{
  "repair_end": "2018-12-02 08:46:37.242721", 
  "repair_begin": "2018-12-02 08:37:24.111975", 
  "patches": [
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "Delete", 
          "seed": "this.minimumRangeValueIncStdDev=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Replace", 
          "seed": "RectangleEdge edge=plot.getRangeAxisEdge();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_566/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:45:30.328256496 -0500\n@@ -204,14 +204,7 @@\n         StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n+        RectangleEdge edge = plot.getRangeAxisEdge();\n     }\n                 \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_566/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:45:30.332256612 -0500\n@@ -107,9 +107,6 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getMean();\n-        }\n         return result;\n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "Delete", 
          "seed": "this.minimumRangeValueIncStdDev=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 111, 
          "faulty": "result=masd.getMean();", 
          "type": "InsertBefore", 
          "seed": "result=masd.getStandardDeviation();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Replace", 
          "seed": "double xx2=domainAxis.getCategoryEnd(column,getColumnCount(),dataArea,plot.getDomainAxisEdge());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "InsertBefore", 
          "seed": "g2.setStroke(plot.getRangeGridlineStroke());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "InsertBefore", 
          "seed": "g2.setStroke(plot.getRangeGridlineStroke());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return new Icon(){\n  public void paintIcon(  Component c,  Graphics g,  int x,  int y){\n    Graphics2D g2=(Graphics2D)g;\n    path.transform(AffineTransform.getTranslateInstance(x,y));\n    if (fillPaint != null) {\n      g2.setPaint(fillPaint);\n      g2.fill(path);\n    }\n    if (outlinePaint != null) {\n      g2.setPaint(outlinePaint);\n      g2.draw(path);\n    }\n    path.transform(AffineTransform.getTranslateInstance(-x,-y));\n  }\n  public int getIconWidth(){\n    return width;\n  }\n  public int getIconHeight(){\n    return height;\n  }\n}\n;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 263, 
          "faulty": "double uclip=getUpperClip();", 
          "type": "InsertBefore", 
          "seed": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "Delete", 
          "seed": "this.minimumRangeValueIncStdDev=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 126, 
          "faulty": "return getMeanValue(row,column);", 
          "type": "InsertBefore", 
          "seed": "double maxval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 169, 
          "faulty": "Number result=null;", 
          "type": "Replace", 
          "seed": "Number result=null;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "InsertBefore", 
          "seed": "Number n=dataset.getValue(row,column);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_624/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:46:00.017119484 -0500\n@@ -201,7 +201,9 @@\n             throw new IllegalArgumentException(\n                 \"Requires StatisticalCategoryDataset.\");\n         }\n-        StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n+        g2.setStroke(plot.getRangeGridlineStroke());\n+\t\tg2.setStroke(plot.getRangeGridlineStroke());\n+\t\tStatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n         if (orientation == PlotOrientation.HORIZONTAL) {\n@@ -245,22 +247,21 @@\n \n         int seriesCount = getRowCount();\n         int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n-        // BAR X\n+        Number n = dataset.getValue(row, column);\n+\t\t// BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n         double value = meanValue.doubleValue();\n         double base = 0.0;\n         double lclip = getLowerClip();\n-        double uclip = getUpperClip();\n+        if (seriesCount > 1) {\n+\t\t\tdouble seriesGap = dataArea.getHeight() * getItemMargin()\n+\t\t\t\t\t/ (categoryCount * (seriesCount - 1));\n+\t\t\trectY = rectY + row * (state.getBarWidth() + seriesGap);\n+\t\t} else {\n+\t\t\trectY = rectY + row * state.getBarWidth();\n+\t\t}\n+\t\tdouble uclip = getUpperClip();\n \n         if (uclip <= 0.0) {  // cases 1, 2, 3 and 4\n             if (value >= uclip) {\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_624/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:46:00.021119600 -0500\n@@ -107,9 +107,6 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getMean();\n-        }\n         return result;\n     }\n \n@@ -123,7 +120,8 @@\n      * @return The value.\n      */\n     public Number getValue(int row, int column) {\n-        return getMeanValue(row, column);\n+        double maxval = Double.NaN;\n+\t\treturn getMeanValue(row, column);\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 200, 
          "faulty": "if (!(data instanceof StatisticalCategoryDataset)) {\n  throw new IllegalArgumentException(\"Requires StatisticalCategoryDataset.\");\n}", 
          "type": "InsertBefore", 
          "seed": "if (!getItemVisible(row,column)) {\n  return;\n}"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 260, 
          "faulty": "double value=meanValue.doubleValue();", 
          "type": "InsertBefore", 
          "seed": "Comparable category=dataset.getColumnKey(column);"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "double seriesGap=dataArea.getWidth() * getItemMargin() / (categoryCount * (seriesCount - 1));"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "Replace", 
          "seed": "fireDatasetChanged();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_2/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:40:00.694682343 -0500\n@@ -196,7 +196,10 @@\n                          int column,\n                          int pass) {\n \n-        // defensive check\n+        if (!getItemVisible(row, column)) {\n+\t\t\t\t\t\t\t\treturn;\n+\t\t\t\t\t\t\t}\n+\t\t// defensive check\n         if (!(data instanceof StatisticalCategoryDataset)) {\n             throw new IllegalArgumentException(\n                 \"Requires StatisticalCategoryDataset.\");\n@@ -251,13 +254,13 @@\n             rectY = rectY + row * (state.getBarWidth() + seriesGap);\n         }\n         else {\n-            rectY = rectY + row * state.getBarWidth();\n         }\n \n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n-        double value = meanValue.doubleValue();\n+        Comparable category = dataset.getColumnKey(column);\n+\t\tdouble value = meanValue.doubleValue();\n         double base = 0.0;\n         double lclip = getLowerClip();\n         double uclip = getUpperClip();\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_2/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:40:00.722683157 -0500\n@@ -107,9 +107,7 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getMean();\n-        }\n+        fireDatasetChanged();\n         return result;\n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "double uclip=getUpperClip();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 200, 
          "faulty": "if (!(data instanceof StatisticalCategoryDataset)) {\n  throw new IllegalArgumentException(\"Requires StatisticalCategoryDataset.\");\n}", 
          "type": "Delete", 
          "seed": "Stroke stroke=plot.getRangeGridlineStroke();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "InsertBefore", 
          "seed": "if (masd != null) {\n  result=masd.getStandardDeviation();\n}"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 111, 
          "faulty": "result=masd.getMean();", 
          "type": "Delete", 
          "seed": "int count=0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 175, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "double m=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 389, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "double minval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Replace", 
          "seed": "setIncludeBaseInRange(false);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 273, 
          "faulty": "return this.data.getColumnCount();", 
          "type": "InsertBefore", 
          "seed": "double sumXX=0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 247, 
          "faulty": "int categoryCount=getColumnCount();", 
          "type": "Replace", 
          "seed": "PlotOrientation orient=plot.getOrientation();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "InsertBefore", 
          "seed": "setNegativeItemLabelPositionFallback(null);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "InsertBefore", 
          "seed": "double minval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "Composite originalComposite=g2.getComposite();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "Delete", 
          "seed": "double aRadius=0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 175, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "double y=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "InsertBefore", 
          "seed": "PlotOrientation orient=plot.getOrientation();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 379, 
          "faulty": "if (!Double.isNaN(this.minimumRangeValueIncStdDev) && !Double.isNaN(this.maximumRangeValueIncStdDev)) result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double x=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 246, 
          "faulty": "return this.data.getRowKey(row);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_400/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:44:01.081662205 -0500\n@@ -196,22 +196,8 @@\n                          int column,\n                          int pass) {\n \n-        // defensive check\n-        if (!(data instanceof StatisticalCategoryDataset)) {\n-            throw new IllegalArgumentException(\n-                \"Requires StatisticalCategoryDataset.\");\n-        }\n-        StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n-\n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n+        PlotOrientation orient = plot.getOrientation();\n     }\n                 \n     /**\n@@ -243,17 +229,9 @@\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                 dataArea, xAxisLocation);\n \n-        int seriesCount = getRowCount();\n-        int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n+        setNegativeItemLabelPositionFallback(null);\n+\t\tint seriesCount = getRowCount();\n+        PlotOrientation orient = plot.getOrientation();\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_400/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:44:01.085662322 -0500\n@@ -92,7 +92,9 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\tthis.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_400/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:44:01.085662322 -0500\n@@ -108,7 +108,10 @@\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n-            result = masd.getMean();\n+\t\t\tresult = masd.getStandardDeviation();\n+\t\t}\n+\t\tdouble minval = Double.NaN;\n+\t\tif (masd != null) {\n         }\n         return result;\n     }\n@@ -172,7 +175,9 @@\n         if (masd != null) {\n             result = masd.getStandardDeviation();\n         }\n-        return result;\n+        double m = 0.0;\n+\t\tdouble y = 0.0;\n+\t\treturn result;\n     }\n \n     /**\n@@ -243,7 +248,8 @@\n      * @return The row key.\n      */\n     public Comparable getRowKey(int row) {\n-        return this.data.getRowKey(row);\n+        double sumX2 = 0.0;\n+\t\treturn this.data.getRowKey(row);\n     }\n \n     /**\n@@ -270,7 +276,8 @@\n      * @return The column count.\n      */\n     public int getColumnCount() {\n-        return this.data.getColumnCount();\n+        double sumXX = 0;\n+\t\treturn this.data.getColumnCount();\n     }\n \n     /**\n@@ -376,17 +383,21 @@\n     public Range getRangeBounds(boolean includeInterval) {\n         Range result = null;\n         if (includeInterval) {\n-            if (!Double.isNaN(this.minimumRangeValueIncStdDev) \n-                    && !Double.isNaN(this.maximumRangeValueIncStdDev))\n-            result = new Range(this.minimumRangeValueIncStdDev, \n-                    this.maximumRangeValueIncStdDev);\n+            double x = 0.0;\n+\t\t\tif (!Double.isNaN(this.minimumRangeValueIncStdDev) \n+                    && !Double.isNaN(this.maximumRangeValueIncStdDev)) {\n+\t\t\t\tdouble sumX2 = 0.0;\n+\t\t\t\tresult = new Range(this.minimumRangeValueIncStdDev,\n+\t\t\t\t\t\tthis.maximumRangeValueIncStdDev);\n+\t\t\t}\n         }\n         else {\n             if (!Double.isNaN(this.minimumRangeValue) \n                     && !Double.isNaN(this.maximumRangeValue))\n             result = new Range(this.minimumRangeValue, this.maximumRangeValue);            \n         }\n-        return result;\n+        double minval = Double.NaN;\n+\t\treturn result;\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 273, 
          "faulty": "return this.data.getColumnCount();", 
          "type": "InsertBefore", 
          "seed": "List result=null;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 126, 
          "faulty": "return getMeanValue(row,column);", 
          "type": "InsertBefore", 
          "seed": "double minval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "int count=dataset.getColumnCount();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 273, 
          "faulty": "return this.data.getColumnCount();", 
          "type": "InsertBefore", 
          "seed": "double sumXX=0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 175, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "double m=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 389, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "double minval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Replace", 
          "seed": "setIncludeBaseInRange(false);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 172, 
          "faulty": "if (masd != null) {\n  result=masd.getStandardDeviation();\n}", 
          "type": "InsertBefore", 
          "seed": "double sumX=0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 274, 
          "faulty": "if (lclip <= 0.0) {\n  if (value >= uclip) {\n    value=uclip;\n  }\n else {\n    if (value <= lclip) {\n      value=lclip;\n    }\n  }\n}\n else {\n  if (value <= lclip) {\n    return;\n  }\n  base=getLowerClip();\n  if (value >= uclip) {\n    value=uclip;\n  }\n}", 
          "type": "Delete", 
          "seed": "double yy2=0.0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_346/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:43:28.820724384 -0500\n@@ -204,14 +204,7 @@\n         StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n+        setIncludeBaseInRange(false);\n     }\n                 \n     /**\n@@ -245,15 +238,6 @@\n \n         int seriesCount = getRowCount();\n         int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n@@ -270,26 +254,8 @@\n             if (value <= lclip) {\n                 value = lclip;\n             }\n-        }\n-        else if (lclip <= 0.0) { // cases 5, 6, 7 and 8\n-            if (value >= uclip) {\n-                value = uclip;\n-            }\n-            else {\n-                if (value <= lclip) {\n-                    value = lclip;\n-                }\n-            }\n-        }\n-        else { // cases 9, 10, 11 and 12\n-            if (value <= lclip) {\n-                return; // bar is not visible\n-            }\n-            base = getLowerClip();\n-            if (value >= uclip) {\n-               value = uclip;\n-            }\n-        }\n+        } else\n+\t\t\t;\n \n         RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n         double transY1 = rangeAxis.valueToJava2D(base, dataArea, yAxisLocation);\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_346/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:43:28.820724384 -0500\n@@ -92,7 +92,9 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\tthis.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_346/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:43:28.824724500 -0500\n@@ -123,7 +123,8 @@\n      * @return The value.\n      */\n     public Number getValue(int row, int column) {\n-        return getMeanValue(row, column);\n+        double minval = Double.NaN;\n+\t\treturn getMeanValue(row, column);\n     }\n \n     /**\n@@ -169,10 +170,12 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n+        double sumX = 0;\n+\t\tif (masd != null) {\n             result = masd.getStandardDeviation();\n         }\n-        return result;\n+        double m = 0.0;\n+\t\treturn result;\n     }\n \n     /**\n@@ -270,7 +273,9 @@\n      * @return The column count.\n      */\n     public int getColumnCount() {\n-        return this.data.getColumnCount();\n+        List result = null;\n+\t\tdouble sumXX = 0;\n+\t\treturn this.data.getColumnCount();\n     }\n \n     /**\n@@ -377,16 +382,19 @@\n         Range result = null;\n         if (includeInterval) {\n             if (!Double.isNaN(this.minimumRangeValueIncStdDev) \n-                    && !Double.isNaN(this.maximumRangeValueIncStdDev))\n-            result = new Range(this.minimumRangeValueIncStdDev, \n-                    this.maximumRangeValueIncStdDev);\n+                    && !Double.isNaN(this.maximumRangeValueIncStdDev)) {\n+\t\t\t\tdouble sumX2 = 0.0;\n+\t\t\t\tresult = new Range(this.minimumRangeValueIncStdDev,\n+\t\t\t\t\t\tthis.maximumRangeValueIncStdDev);\n+\t\t\t}\n         }\n         else {\n             if (!Double.isNaN(this.minimumRangeValue) \n                     && !Double.isNaN(this.maximumRangeValue))\n             result = new Range(this.minimumRangeValue, this.maximumRangeValue);            \n         }\n-        return result;\n+        double minval = Double.NaN;\n+\t\treturn result;\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 389, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "double minval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Replace", 
          "seed": "setIncludeBaseInRange(false);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 273, 
          "faulty": "return this.data.getColumnCount();", 
          "type": "InsertBefore", 
          "seed": "double sumXX=0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 247, 
          "faulty": "int categoryCount=getColumnCount();", 
          "type": "Replace", 
          "seed": "PlotOrientation orient=plot.getOrientation();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "InsertBefore", 
          "seed": "setNegativeItemLabelPositionFallback(null);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "InsertBefore", 
          "seed": "double minval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "Composite originalComposite=g2.getComposite();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "Delete", 
          "seed": "double aRadius=0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 175, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "double y=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "InsertBefore", 
          "seed": "PlotOrientation orient=plot.getOrientation();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 379, 
          "faulty": "if (!Double.isNaN(this.minimumRangeValueIncStdDev) && !Double.isNaN(this.maximumRangeValueIncStdDev)) result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double x=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 170, 
          "faulty": "MeanAndStandardDeviation masd=(MeanAndStandardDeviation)this.data.getObject(row,column);", 
          "type": "InsertBefore", 
          "seed": "this.minimumRangeValue=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 265, 
          "faulty": "if (uclip <= 0.0) {\n  if (value >= uclip) {\n    return;\n  }\n  base=uclip;\n  if (value <= lclip) {\n    value=lclip;\n  }\n}\n else if (lclip <= 0.0) {\n  if (value >= uclip) {\n    value=uclip;\n  }\n else {\n    if (value <= lclip) {\n      value=lclip;\n    }\n  }\n}\n else {\n  if (value <= lclip) {\n    return;\n  }\n  base=getLowerClip();\n  if (value >= uclip) {\n    value=uclip;\n  }\n}", 
          "type": "Delete", 
          "seed": "int itemCount=dataset.getColumnCount();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 104, 
          "faulty": "return this.standardDeviation;", 
          "type": "InsertBefore", 
          "seed": "this.standardDeviation=standardDeviation;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 265, 
          "faulty": "if (uclip <= 0.0) {\n  if (value >= uclip) {\n    return;\n  }\n  base=uclip;\n  if (value <= lclip) {\n    value=lclip;\n  }\n}\n else if (lclip <= 0.0) {\n  if (value >= uclip) {\n    value=uclip;\n  }\n else {\n    if (value <= lclip) {\n      value=lclip;\n    }\n  }\n}\n else {\n  if (value <= lclip) {\n    return;\n  }\n  base=getLowerClip();\n  if (value >= uclip) {\n    value=uclip;\n  }\n}", 
          "type": "Replace", 
          "seed": "g2.setPaint(getItemPaint(row,column));"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "InsertBefore", 
          "seed": "double minOutlier=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 111, 
          "faulty": "result=masd.getMean();", 
          "type": "Replace", 
          "seed": "double sumX=0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "Replace", 
          "seed": "double oRadius=state.getBarWidth() / 3;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 263, 
          "faulty": "double uclip=getUpperClip();", 
          "type": "InsertBefore", 
          "seed": "double currentItemMargin=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 200, 
          "faulty": "if (!(data instanceof StatisticalCategoryDataset)) {\n  throw new IllegalArgumentException(\"Requires StatisticalCategoryDataset.\");\n}", 
          "type": "Delete", 
          "seed": "GeneralPath path=null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_425/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:44:17.326134423 -0500\n@@ -196,22 +196,10 @@\n                          int column,\n                          int pass) {\n \n-        // defensive check\n-        if (!(data instanceof StatisticalCategoryDataset)) {\n-            throw new IllegalArgumentException(\n-                \"Requires StatisticalCategoryDataset.\");\n-        }\n-        StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n+        double oRadius = state.getBarWidth() / 3;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n+        PlotOrientation orient = plot.getOrientation();\n     }\n                 \n     /**\n@@ -243,53 +231,19 @@\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                 dataArea, xAxisLocation);\n \n-        int seriesCount = getRowCount();\n-        int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n+        setNegativeItemLabelPositionFallback(null);\n+\t\tint seriesCount = getRowCount();\n+        PlotOrientation orient = plot.getOrientation();\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n         double value = meanValue.doubleValue();\n         double base = 0.0;\n         double lclip = getLowerClip();\n-        double uclip = getUpperClip();\n+        double currentItemMargin = 0.0;\n+\t\tdouble uclip = getUpperClip();\n \n-        if (uclip <= 0.0) {  // cases 1, 2, 3 and 4\n-            if (value >= uclip) {\n-                return; // bar is not visible\n-            }\n-            base = uclip;\n-            if (value <= lclip) {\n-                value = lclip;\n-            }\n-        }\n-        else if (lclip <= 0.0) { // cases 5, 6, 7 and 8\n-            if (value >= uclip) {\n-                value = uclip;\n-            }\n-            else {\n-                if (value <= lclip) {\n-                    value = lclip;\n-                }\n-            }\n-        }\n-        else { // cases 9, 10, 11 and 12\n-            if (value <= lclip) {\n-                return; // bar is not visible\n-            }\n-            base = getLowerClip();\n-            if (value >= uclip) {\n-               value = uclip;\n-            }\n-        }\n+        g2.setPaint(getItemPaint(row, column));\n \n         RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n         double transY1 = rangeAxis.valueToJava2D(base, dataArea, yAxisLocation);\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_425/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:44:17.330134538 -0500\n@@ -101,7 +101,8 @@\n      * @return The standard deviation.\n      */\n     public Number getStandardDeviation() {\n-        return this.standardDeviation;\n+        this.standardDeviation = standardDeviation;\n+\t\treturn this.standardDeviation;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_425/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:44:17.330134538 -0500\n@@ -107,8 +107,10 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getMean();\n+        double minval = Double.NaN;\n+\t\tdouble minOutlier = Double.POSITIVE_INFINITY;\n+\t\tif (masd != null) {\n+            double sumX = 0;\n         }\n         return result;\n     }\n@@ -167,12 +169,14 @@\n      */\n     public Number getStdDevValue(int row, int column) {\n         Number result = null;\n-        MeanAndStandardDeviation masd \n+        this.minimumRangeValue = Double.NaN;\n+\t\tMeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n             result = masd.getStandardDeviation();\n         }\n-        return result;\n+        double y = 0.0;\n+\t\treturn result;\n     }\n \n     /**\n@@ -270,7 +274,8 @@\n      * @return The column count.\n      */\n     public int getColumnCount() {\n-        return this.data.getColumnCount();\n+        double sumXX = 0;\n+\t\treturn this.data.getColumnCount();\n     }\n \n     /**\n@@ -376,7 +381,8 @@\n     public Range getRangeBounds(boolean includeInterval) {\n         Range result = null;\n         if (includeInterval) {\n-            if (!Double.isNaN(this.minimumRangeValueIncStdDev) \n+            double x = 0.0;\n+\t\t\tif (!Double.isNaN(this.minimumRangeValueIncStdDev) \n                     && !Double.isNaN(this.maximumRangeValueIncStdDev))\n             result = new Range(this.minimumRangeValueIncStdDev, \n                     this.maximumRangeValueIncStdDev);\n@@ -386,7 +392,8 @@\n                     && !Double.isNaN(this.maximumRangeValue))\n             result = new Range(this.minimumRangeValue, this.maximumRangeValue);            \n         }\n-        return result;\n+        double minval = Double.NaN;\n+\t\treturn result;\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 261, 
          "faulty": "double base=0.0;", 
          "type": "InsertBefore", 
          "seed": "double xx0=domainAxis.getCategoryStart(column,getColumnCount(),dataArea,plot.getDomainAxisEdge());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "Delete", 
          "seed": "this.minimumRangeValueIncStdDev=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 111, 
          "faulty": "result=masd.getMean();", 
          "type": "InsertBefore", 
          "seed": "result=masd.getStandardDeviation();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 126, 
          "faulty": "return getMeanValue(row,column);", 
          "type": "InsertBefore", 
          "seed": "double max=-Double.MAX_VALUE;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 111, 
          "faulty": "result=masd.getMean();", 
          "type": "Delete", 
          "seed": "double maxOutlier=Double.NEGATIVE_INFINITY;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 260, 
          "faulty": "double value=meanValue.doubleValue();", 
          "type": "InsertBefore", 
          "seed": "g2.setPaint(Color.lightGray);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_556/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:45:24.564088943 -0500\n@@ -204,14 +204,6 @@\n         StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n     }\n                 \n     /**\n@@ -257,8 +249,11 @@\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n-        double value = meanValue.doubleValue();\n-        double base = 0.0;\n+        g2.setPaint(Color.lightGray);\n+\t\tdouble value = meanValue.doubleValue();\n+        double xx0 = domainAxis.getCategoryStart(column, getColumnCount(),\n+\t\t\t\tdataArea, plot.getDomainAxisEdge());\n+\t\tdouble base = 0.0;\n         double lclip = getLowerClip();\n         double uclip = getUpperClip();\n \n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_556/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:45:24.568089059 -0500\n@@ -92,7 +92,9 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\tthis.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_556/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:45:24.568089059 -0500\n@@ -107,9 +107,6 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getMean();\n-        }\n         return result;\n     }\n \n@@ -123,7 +120,8 @@\n      * @return The value.\n      */\n     public Number getValue(int row, int column) {\n-        return getMeanValue(row, column);\n+        double max = -Double.MAX_VALUE;\n+\t\treturn getMeanValue(row, column);\n     }\n \n     /**\n@@ -377,9 +375,11 @@\n         Range result = null;\n         if (includeInterval) {\n             if (!Double.isNaN(this.minimumRangeValueIncStdDev) \n-                    && !Double.isNaN(this.maximumRangeValueIncStdDev))\n-            result = new Range(this.minimumRangeValueIncStdDev, \n-                    this.maximumRangeValueIncStdDev);\n+                    && !Double.isNaN(this.maximumRangeValueIncStdDev)) {\n+\t\t\t\tdouble sumX2 = 0.0;\n+\t\t\t\tresult = new Range(this.minimumRangeValueIncStdDev,\n+\t\t\t\t\t\tthis.maximumRangeValueIncStdDev);\n+\t\t\t}\n         }\n         else {\n             if (!Double.isNaN(this.minimumRangeValue) \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "InsertBefore", 
          "seed": "if (masd != null) {\n  result=masd.getStandardDeviation();\n}"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 111, 
          "faulty": "result=masd.getMean();", 
          "type": "Delete", 
          "seed": "int count=0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "InsertBefore", 
          "seed": "if (masd != null) {\n  result=masd.getStandardDeviation();\n}"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 111, 
          "faulty": "result=masd.getMean();", 
          "type": "Delete", 
          "seed": "int count=0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 175, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "double m=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 389, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "double minval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Replace", 
          "seed": "setIncludeBaseInRange(false);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 273, 
          "faulty": "return this.data.getColumnCount();", 
          "type": "InsertBefore", 
          "seed": "double sumXX=0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 247, 
          "faulty": "int categoryCount=getColumnCount();", 
          "type": "Replace", 
          "seed": "PlotOrientation orient=plot.getOrientation();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "InsertBefore", 
          "seed": "PlotOrientation orient=plot.getOrientation();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 379, 
          "faulty": "if (!Double.isNaN(this.minimumRangeValueIncStdDev) && !Double.isNaN(this.maximumRangeValueIncStdDev)) result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double x=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 170, 
          "faulty": "MeanAndStandardDeviation masd=(MeanAndStandardDeviation)this.data.getObject(row,column);", 
          "type": "InsertBefore", 
          "seed": "this.minimumRangeValue=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 111, 
          "faulty": "result=masd.getMean();", 
          "type": "Delete", 
          "seed": "double maxRegularValue=Double.NEGATIVE_INFINITY;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 274, 
          "faulty": "if (lclip <= 0.0) {\n  if (value >= uclip) {\n    value=uclip;\n  }\n else {\n    if (value <= lclip) {\n      value=lclip;\n    }\n  }\n}\n else {\n  if (value <= lclip) {\n    return;\n  }\n  base=getLowerClip();\n  if (value >= uclip) {\n    value=uclip;\n  }\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getItemOutlinePaint(row,column));"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 104, 
          "faulty": "return this.standardDeviation;", 
          "type": "InsertBefore", 
          "seed": "double[] result=new double[2];"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "Delete", 
          "seed": "double x1=domainAxis.getCategoryMiddle(column,getColumnCount(),dataArea,plot.getDomainAxisEdge());"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_463/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:44:37.894732335 -0500\n@@ -204,14 +204,7 @@\n         StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n+        PlotOrientation orient = plot.getOrientation();\n     }\n                 \n     /**\n@@ -243,17 +236,7 @@\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                 dataArea, xAxisLocation);\n \n-        int seriesCount = getRowCount();\n-        int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n+        PlotOrientation orient = plot.getOrientation();\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n@@ -270,26 +253,8 @@\n             if (value <= lclip) {\n                 value = lclip;\n             }\n-        }\n-        else if (lclip <= 0.0) { // cases 5, 6, 7 and 8\n-            if (value >= uclip) {\n-                value = uclip;\n-            }\n-            else {\n-                if (value <= lclip) {\n-                    value = lclip;\n-                }\n-            }\n-        }\n-        else { // cases 9, 10, 11 and 12\n-            if (value <= lclip) {\n-                return; // bar is not visible\n-            }\n-            base = getLowerClip();\n-            if (value >= uclip) {\n-               value = uclip;\n-            }\n-        }\n+        } else\n+\t\t\t;\n \n         RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n         double transY1 = rangeAxis.valueToJava2D(base, dataArea, yAxisLocation);\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_463/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:44:37.898732451 -0500\n@@ -92,7 +92,15 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n@@ -101,7 +109,8 @@\n      * @return The standard deviation.\n      */\n     public Number getStandardDeviation() {\n-        return this.standardDeviation;\n+        double[] result = new double[2];\n+\t\treturn this.standardDeviation;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_463/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:44:37.898732451 -0500\n@@ -108,7 +108,12 @@\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n-            result = masd.getMean();\n+\t\t\tresult = masd.getStandardDeviation();\n+\t\t}\n+\t\tif (masd != null) {\n+\t\t\tresult = masd.getStandardDeviation();\n+\t\t}\n+\t\tif (masd != null) {\n         }\n         return result;\n     }\n@@ -167,12 +172,14 @@\n      */\n     public Number getStdDevValue(int row, int column) {\n         Number result = null;\n-        MeanAndStandardDeviation masd \n+        this.minimumRangeValue = Double.NaN;\n+\t\tMeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n             result = masd.getStandardDeviation();\n         }\n-        return result;\n+        double m = 0.0;\n+\t\treturn result;\n     }\n \n     /**\n@@ -270,7 +277,8 @@\n      * @return The column count.\n      */\n     public int getColumnCount() {\n-        return this.data.getColumnCount();\n+        double sumXX = 0;\n+\t\treturn this.data.getColumnCount();\n     }\n \n     /**\n@@ -376,17 +384,21 @@\n     public Range getRangeBounds(boolean includeInterval) {\n         Range result = null;\n         if (includeInterval) {\n-            if (!Double.isNaN(this.minimumRangeValueIncStdDev) \n-                    && !Double.isNaN(this.maximumRangeValueIncStdDev))\n-            result = new Range(this.minimumRangeValueIncStdDev, \n-                    this.maximumRangeValueIncStdDev);\n+            double x = 0.0;\n+\t\t\tif (!Double.isNaN(this.minimumRangeValueIncStdDev) \n+                    && !Double.isNaN(this.maximumRangeValueIncStdDev)) {\n+\t\t\t\tdouble sumX2 = 0.0;\n+\t\t\t\tresult = new Range(this.minimumRangeValueIncStdDev,\n+\t\t\t\t\t\tthis.maximumRangeValueIncStdDev);\n+\t\t\t}\n         }\n         else {\n             if (!Double.isNaN(this.minimumRangeValue) \n                     && !Double.isNaN(this.maximumRangeValue))\n             result = new Range(this.minimumRangeValue, this.maximumRangeValue);            \n         }\n-        return result;\n+        double minval = Double.NaN;\n+\t\treturn result;\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "Replace", 
          "seed": "double sum=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 243, 
          "faulty": "double rectY=domainAxis.getCategoryStart(column,getColumnCount(),dataArea,xAxisLocation);", 
          "type": "InsertBefore", 
          "seed": "CategoryPlot p=getPlot();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 113, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "if (masd != null) {\n  result=masd.getStandardDeviation();\n}"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "InsertBefore", 
          "seed": "setNegativeItemLabelPositionFallback(null);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "InsertBefore", 
          "seed": "double minval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 263, 
          "faulty": "double uclip=getUpperClip();", 
          "type": "InsertBefore", 
          "seed": "if (value <= lclip) {\n  value=lclip;\n}"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "InsertBefore", 
          "seed": "double currentItemMargin=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 126, 
          "faulty": "return getMeanValue(row,column);", 
          "type": "InsertBefore", 
          "seed": "double x=0.0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_256/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:42:36.407202225 -0500\n@@ -201,17 +201,10 @@\n             throw new IllegalArgumentException(\n                 \"Requires StatisticalCategoryDataset.\");\n         }\n-        StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n+        double currentItemMargin = 0.0;\n+\t\tStatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n     }\n                 \n     /**\n@@ -239,11 +232,13 @@\n                                      \n         RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n         \n-        // BAR Y\n+        CategoryPlot p = getPlot();\n+\t\t// BAR Y\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                 dataArea, xAxisLocation);\n \n-        int seriesCount = getRowCount();\n+        setNegativeItemLabelPositionFallback(null);\n+\t\tint seriesCount = getRowCount();\n         int categoryCount = getColumnCount();\n         if (seriesCount > 1) {\n             double seriesGap = dataArea.getHeight() * getItemMargin()\n@@ -260,7 +255,10 @@\n         double value = meanValue.doubleValue();\n         double base = 0.0;\n         double lclip = getLowerClip();\n-        double uclip = getUpperClip();\n+        if (value <= lclip) {\n+\t\t\tvalue = lclip;\n+\t\t}\n+\t\tdouble uclip = getUpperClip();\n \n         if (uclip <= 0.0) {  // cases 1, 2, 3 and 4\n             if (value >= uclip) {\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_256/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:42:36.411202341 -0500\n@@ -92,7 +92,10 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_256/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:42:36.411202341 -0500\n@@ -107,10 +107,12 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n+        double minval = Double.NaN;\n+\t\tdouble sum = 0.0;\n         if (masd != null) {\n-            result = masd.getMean();\n-        }\n-        return result;\n+\t\t\tresult = masd.getStandardDeviation();\n+\t\t}\n+\t\treturn result;\n     }\n \n     /**\n@@ -123,7 +125,8 @@\n      * @return The value.\n      */\n     public Number getValue(int row, int column) {\n-        return getMeanValue(row, column);\n+        double x = 0.0;\n+\t\treturn getMeanValue(row, column);\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 389, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "double minval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Replace", 
          "seed": "setIncludeBaseInRange(false);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 273, 
          "faulty": "return this.data.getColumnCount();", 
          "type": "InsertBefore", 
          "seed": "double sumXX=0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 247, 
          "faulty": "int categoryCount=getColumnCount();", 
          "type": "Replace", 
          "seed": "PlotOrientation orient=plot.getOrientation();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "InsertBefore", 
          "seed": "setNegativeItemLabelPositionFallback(null);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "InsertBefore", 
          "seed": "double minval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "Composite originalComposite=g2.getComposite();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "Delete", 
          "seed": "double aRadius=0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 175, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "double y=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "InsertBefore", 
          "seed": "PlotOrientation orient=plot.getOrientation();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 379, 
          "faulty": "if (!Double.isNaN(this.minimumRangeValueIncStdDev) && !Double.isNaN(this.maximumRangeValueIncStdDev)) result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double x=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 170, 
          "faulty": "MeanAndStandardDeviation masd=(MeanAndStandardDeviation)this.data.getObject(row,column);", 
          "type": "InsertBefore", 
          "seed": "this.minimumRangeValue=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 265, 
          "faulty": "if (uclip <= 0.0) {\n  if (value >= uclip) {\n    return;\n  }\n  base=uclip;\n  if (value <= lclip) {\n    value=lclip;\n  }\n}\n else if (lclip <= 0.0) {\n  if (value >= uclip) {\n    value=uclip;\n  }\n else {\n    if (value <= lclip) {\n      value=lclip;\n    }\n  }\n}\n else {\n  if (value <= lclip) {\n    return;\n  }\n  base=getLowerClip();\n  if (value >= uclip) {\n    value=uclip;\n  }\n}", 
          "type": "Delete", 
          "seed": "int itemCount=dataset.getColumnCount();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_412/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:44:10.713942211 -0500\n@@ -201,17 +201,8 @@\n             throw new IllegalArgumentException(\n                 \"Requires StatisticalCategoryDataset.\");\n         }\n-        StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n-\n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n+        PlotOrientation orient = plot.getOrientation();\n     }\n                 \n     /**\n@@ -243,17 +234,9 @@\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                 dataArea, xAxisLocation);\n \n-        int seriesCount = getRowCount();\n-        int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n+        setNegativeItemLabelPositionFallback(null);\n+\t\tint seriesCount = getRowCount();\n+        PlotOrientation orient = plot.getOrientation();\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n@@ -262,35 +245,6 @@\n         double lclip = getLowerClip();\n         double uclip = getUpperClip();\n \n-        if (uclip <= 0.0) {  // cases 1, 2, 3 and 4\n-            if (value >= uclip) {\n-                return; // bar is not visible\n-            }\n-            base = uclip;\n-            if (value <= lclip) {\n-                value = lclip;\n-            }\n-        }\n-        else if (lclip <= 0.0) { // cases 5, 6, 7 and 8\n-            if (value >= uclip) {\n-                value = uclip;\n-            }\n-            else {\n-                if (value <= lclip) {\n-                    value = lclip;\n-                }\n-            }\n-        }\n-        else { // cases 9, 10, 11 and 12\n-            if (value <= lclip) {\n-                return; // bar is not visible\n-            }\n-            base = getLowerClip();\n-            if (value >= uclip) {\n-               value = uclip;\n-            }\n-        }\n-\n         RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n         double transY1 = rangeAxis.valueToJava2D(base, dataArea, yAxisLocation);\n         double transY2 = rangeAxis.valueToJava2D(value, dataArea, \n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_412/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:44:10.713942211 -0500\n@@ -107,7 +107,8 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n+        double minval = Double.NaN;\n+\t\tif (masd != null) {\n             result = masd.getMean();\n         }\n         return result;\n@@ -167,12 +168,14 @@\n      */\n     public Number getStdDevValue(int row, int column) {\n         Number result = null;\n-        MeanAndStandardDeviation masd \n+        this.minimumRangeValue = Double.NaN;\n+\t\tMeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n             result = masd.getStandardDeviation();\n         }\n-        return result;\n+        double y = 0.0;\n+\t\treturn result;\n     }\n \n     /**\n@@ -270,7 +273,8 @@\n      * @return The column count.\n      */\n     public int getColumnCount() {\n-        return this.data.getColumnCount();\n+        double sumXX = 0;\n+\t\treturn this.data.getColumnCount();\n     }\n \n     /**\n@@ -376,7 +380,8 @@\n     public Range getRangeBounds(boolean includeInterval) {\n         Range result = null;\n         if (includeInterval) {\n-            if (!Double.isNaN(this.minimumRangeValueIncStdDev) \n+            double x = 0.0;\n+\t\t\tif (!Double.isNaN(this.minimumRangeValueIncStdDev) \n                     && !Double.isNaN(this.maximumRangeValueIncStdDev))\n             result = new Range(this.minimumRangeValueIncStdDev, \n                     this.maximumRangeValueIncStdDev);\n@@ -386,7 +391,8 @@\n                     && !Double.isNaN(this.maximumRangeValue))\n             result = new Range(this.minimumRangeValue, this.maximumRangeValue);            \n         }\n-        return result;\n+        double minval = Double.NaN;\n+\t\treturn result;\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "InsertBefore", 
          "seed": "PlotOrientation orient=plot.getOrientation();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 379, 
          "faulty": "if (!Double.isNaN(this.minimumRangeValueIncStdDev) && !Double.isNaN(this.maximumRangeValueIncStdDev)) result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double x=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 111, 
          "faulty": "result=masd.getMean();", 
          "type": "Delete", 
          "seed": "double maxRegularValue=Double.NEGATIVE_INFINITY;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 261, 
          "faulty": "double base=0.0;", 
          "type": "InsertBefore", 
          "seed": "double xx0=domainAxis.getCategoryStart(column,getColumnCount(),dataArea,plot.getDomainAxisEdge());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 172, 
          "faulty": "if (masd != null) {\n  result=masd.getStandardDeviation();\n}", 
          "type": "Replace", 
          "seed": "double maxOutlier=Double.NEGATIVE_INFINITY;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 243, 
          "faulty": "double rectY=domainAxis.getCategoryStart(column,getColumnCount(),dataArea,xAxisLocation);", 
          "type": "InsertBefore", 
          "seed": "double y0=dataArea.getMaxY();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "Delete", 
          "seed": "this.minimumRangeValueIncStdDev=Double.NaN;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_451/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:44:31.102534891 -0500\n@@ -204,14 +204,7 @@\n         StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n+        PlotOrientation orient = plot.getOrientation();\n     }\n                 \n     /**\n@@ -239,7 +232,8 @@\n                                      \n         RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n         \n-        // BAR Y\n+        double y0 = dataArea.getMaxY();\n+\t\t// BAR Y\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                 dataArea, xAxisLocation);\n \n@@ -251,14 +245,15 @@\n             rectY = rectY + row * (state.getBarWidth() + seriesGap);\n         }\n         else {\n-            rectY = rectY + row * state.getBarWidth();\n         }\n \n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n         double value = meanValue.doubleValue();\n-        double base = 0.0;\n+        double xx0 = domainAxis.getCategoryStart(column, getColumnCount(),\n+\t\t\t\tdataArea, plot.getDomainAxisEdge());\n+\t\tdouble base = 0.0;\n         double lclip = getLowerClip();\n         double uclip = getUpperClip();\n \n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_451/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:44:31.102534891 -0500\n@@ -92,7 +92,8 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_451/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:44:31.106535009 -0500\n@@ -107,9 +107,6 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getMean();\n-        }\n         return result;\n     }\n \n@@ -169,9 +166,7 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getStandardDeviation();\n-        }\n+        double maxOutlier = Double.NEGATIVE_INFINITY;\n         return result;\n     }\n \n@@ -376,10 +371,13 @@\n     public Range getRangeBounds(boolean includeInterval) {\n         Range result = null;\n         if (includeInterval) {\n-            if (!Double.isNaN(this.minimumRangeValueIncStdDev) \n-                    && !Double.isNaN(this.maximumRangeValueIncStdDev))\n-            result = new Range(this.minimumRangeValueIncStdDev, \n-                    this.maximumRangeValueIncStdDev);\n+            double x = 0.0;\n+\t\t\tif (!Double.isNaN(this.minimumRangeValueIncStdDev) \n+                    && !Double.isNaN(this.maximumRangeValueIncStdDev)) {\n+\t\t\t\tdouble sumX2 = 0.0;\n+\t\t\t\tresult = new Range(this.minimumRangeValueIncStdDev,\n+\t\t\t\t\t\tthis.maximumRangeValueIncStdDev);\n+\t\t\t}\n         }\n         else {\n             if (!Double.isNaN(this.minimumRangeValue) \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "InsertBefore", 
          "seed": "if (masd != null) {\n  result=masd.getStandardDeviation();\n}"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 111, 
          "faulty": "result=masd.getMean();", 
          "type": "Delete", 
          "seed": "int count=0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 175, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "double m=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 389, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "double minval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Replace", 
          "seed": "setIncludeBaseInRange(false);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 273, 
          "faulty": "return this.data.getColumnCount();", 
          "type": "InsertBefore", 
          "seed": "double sumXX=0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 247, 
          "faulty": "int categoryCount=getColumnCount();", 
          "type": "Replace", 
          "seed": "PlotOrientation orient=plot.getOrientation();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "InsertBefore", 
          "seed": "PlotOrientation orient=plot.getOrientation();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 379, 
          "faulty": "if (!Double.isNaN(this.minimumRangeValueIncStdDev) && !Double.isNaN(this.maximumRangeValueIncStdDev)) result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double x=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 170, 
          "faulty": "MeanAndStandardDeviation masd=(MeanAndStandardDeviation)this.data.getObject(row,column);", 
          "type": "InsertBefore", 
          "seed": "this.minimumRangeValue=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 111, 
          "faulty": "result=masd.getMean();", 
          "type": "Delete", 
          "seed": "double maxRegularValue=Double.NEGATIVE_INFINITY;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_448/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:44:29.426486171 -0500\n@@ -204,14 +204,7 @@\n         StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n+        PlotOrientation orient = plot.getOrientation();\n     }\n                 \n     /**\n@@ -244,16 +237,7 @@\n                 dataArea, xAxisLocation);\n \n         int seriesCount = getRowCount();\n-        int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n+        PlotOrientation orient = plot.getOrientation();\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_448/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:44:29.430486287 -0500\n@@ -92,7 +92,13 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_448/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:44:29.430486287 -0500\n@@ -108,7 +108,9 @@\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n-            result = masd.getMean();\n+\t\t\tresult = masd.getStandardDeviation();\n+\t\t}\n+\t\tif (masd != null) {\n         }\n         return result;\n     }\n@@ -167,12 +169,14 @@\n      */\n     public Number getStdDevValue(int row, int column) {\n         Number result = null;\n-        MeanAndStandardDeviation masd \n+        this.minimumRangeValue = Double.NaN;\n+\t\tMeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n             result = masd.getStandardDeviation();\n         }\n-        return result;\n+        double m = 0.0;\n+\t\treturn result;\n     }\n \n     /**\n@@ -270,7 +274,8 @@\n      * @return The column count.\n      */\n     public int getColumnCount() {\n-        return this.data.getColumnCount();\n+        double sumXX = 0;\n+\t\treturn this.data.getColumnCount();\n     }\n \n     /**\n@@ -376,17 +381,21 @@\n     public Range getRangeBounds(boolean includeInterval) {\n         Range result = null;\n         if (includeInterval) {\n-            if (!Double.isNaN(this.minimumRangeValueIncStdDev) \n-                    && !Double.isNaN(this.maximumRangeValueIncStdDev))\n-            result = new Range(this.minimumRangeValueIncStdDev, \n-                    this.maximumRangeValueIncStdDev);\n+            double x = 0.0;\n+\t\t\tif (!Double.isNaN(this.minimumRangeValueIncStdDev) \n+                    && !Double.isNaN(this.maximumRangeValueIncStdDev)) {\n+\t\t\t\tdouble sumX2 = 0.0;\n+\t\t\t\tresult = new Range(this.minimumRangeValueIncStdDev,\n+\t\t\t\t\t\tthis.maximumRangeValueIncStdDev);\n+\t\t\t}\n         }\n         else {\n             if (!Double.isNaN(this.minimumRangeValue) \n                     && !Double.isNaN(this.maximumRangeValue))\n             result = new Range(this.minimumRangeValue, this.maximumRangeValue);            \n         }\n-        return result;\n+        double minval = Double.NaN;\n+\t\treturn result;\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "Delete", 
          "seed": "this.minimumRangeValueIncStdDev=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 111, 
          "faulty": "result=masd.getMean();", 
          "type": "InsertBefore", 
          "seed": "result=masd.getStandardDeviation();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Replace", 
          "seed": "double xx2=domainAxis.getCategoryEnd(column,getColumnCount(),dataArea,plot.getDomainAxisEdge());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "InsertBefore", 
          "seed": "g2.setStroke(plot.getRangeGridlineStroke());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "InsertBefore", 
          "seed": "g2.setStroke(plot.getRangeGridlineStroke());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 126, 
          "faulty": "return getMeanValue(row,column);", 
          "type": "InsertBefore", 
          "seed": "double maxval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 173, 
          "faulty": "result=masd.getStandardDeviation();", 
          "type": "Replace", 
          "seed": "int count=0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double maxOutlier=Double.NEGATIVE_INFINITY;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "double barW0=domainAxis.getCategoryStart(column,getColumnCount(),dataArea,plot.getDomainAxisEdge());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 208, 
          "faulty": "drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);", 
          "type": "InsertBefore", 
          "seed": "double yy0=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "Replace", 
          "seed": "Stroke itemStroke=getItemStroke(row,column);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_658/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:46:19.269679104 -0500\n@@ -201,17 +201,11 @@\n             throw new IllegalArgumentException(\n                 \"Requires StatisticalCategoryDataset.\");\n         }\n-        StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n+        g2.setStroke(plot.getRangeGridlineStroke());\n+\t\tg2.setStroke(plot.getRangeGridlineStroke());\n+\t\tStroke itemStroke = getItemStroke(row, column);\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n     }\n                 \n     /**\n@@ -245,14 +239,8 @@\n \n         int seriesCount = getRowCount();\n         int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n+        double xx2 = domainAxis.getCategoryEnd(column, getColumnCount(),\n+\t\t\t\tdataArea, plot.getDomainAxisEdge());\n \n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_658/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:46:19.273679221 -0500\n@@ -107,9 +107,6 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getMean();\n-        }\n         return result;\n     }\n \n@@ -123,7 +120,8 @@\n      * @return The value.\n      */\n     public Number getValue(int row, int column) {\n-        return getMeanValue(row, column);\n+        double maxval = Double.NaN;\n+\t\treturn getMeanValue(row, column);\n     }\n \n     /**\n@@ -170,7 +168,7 @@\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n-            result = masd.getStandardDeviation();\n+            int count = 0;\n         }\n         return result;\n     }\n@@ -377,9 +375,11 @@\n         Range result = null;\n         if (includeInterval) {\n             if (!Double.isNaN(this.minimumRangeValueIncStdDev) \n-                    && !Double.isNaN(this.maximumRangeValueIncStdDev))\n-            result = new Range(this.minimumRangeValueIncStdDev, \n-                    this.maximumRangeValueIncStdDev);\n+                    && !Double.isNaN(this.maximumRangeValueIncStdDev)) {\n+\t\t\t\tdouble maxOutlier = Double.NEGATIVE_INFINITY;\n+\t\t\t\tresult = new Range(this.minimumRangeValueIncStdDev,\n+\t\t\t\t\t\tthis.maximumRangeValueIncStdDev);\n+\t\t\t}\n         }\n         else {\n             if (!Double.isNaN(this.minimumRangeValue) \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "Replace", 
          "seed": "double result=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 107, 
          "faulty": "Number result=null;", 
          "type": "InsertBefore", 
          "seed": "this.maximumRangeValue=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 377, 
          "faulty": "Range result=null;", 
          "type": "InsertBefore", 
          "seed": "double sumXY=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "double itemMargin=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "int itemCount=dataset.getColumnCount();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 265, 
          "faulty": "if (uclip <= 0.0) {\n  if (value >= uclip) {\n    return;\n  }\n  base=uclip;\n  if (value <= lclip) {\n    value=lclip;\n  }\n}\n else if (lclip <= 0.0) {\n  if (value >= uclip) {\n    value=uclip;\n  }\n else {\n    if (value <= lclip) {\n      value=lclip;\n    }\n  }\n}\n else {\n  if (value <= lclip) {\n    return;\n  }\n  base=getLowerClip();\n  if (value >= uclip) {\n    value=uclip;\n  }\n}", 
          "type": "Delete", 
          "seed": "this.errorIndicatorPaint=Color.gray;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 260, 
          "faulty": "double value=meanValue.doubleValue();", 
          "type": "InsertBefore", 
          "seed": "Number n2=dataset.getValue(row,column + 1);"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 240, 
          "faulty": "RectangleEdge xAxisLocation=plot.getDomainAxisEdge();", 
          "type": "InsertBefore", 
          "seed": "g2.setPaint(getItemOutlinePaint(row,column));"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 208, 
          "faulty": "drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);", 
          "type": "Replace", 
          "seed": "double base=0.0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_72/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:40:53.428213093 -0500\n@@ -204,14 +204,6 @@\n         StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n     }\n                 \n     /**\n@@ -237,60 +229,25 @@\n                                       int row,\n                                       int column) {\n                                      \n-        RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n+        g2.setPaint(getItemOutlinePaint(row,\n+\t\t\t\t\t\t\t\t\t\t\t\tcolumn));\n+\t\tRectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n         \n         // BAR Y\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                 dataArea, xAxisLocation);\n \n-        int seriesCount = getRowCount();\n+        double result = Double.NaN;\n         int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n-        double value = meanValue.doubleValue();\n+        Number n2 = dataset.getValue(row, column + 1);\n+\t\tdouble value = meanValue.doubleValue();\n         double base = 0.0;\n         double lclip = getLowerClip();\n         double uclip = getUpperClip();\n \n-        if (uclip <= 0.0) {  // cases 1, 2, 3 and 4\n-            if (value >= uclip) {\n-                return; // bar is not visible\n-            }\n-            base = uclip;\n-            if (value <= lclip) {\n-                value = lclip;\n-            }\n-        }\n-        else if (lclip <= 0.0) { // cases 5, 6, 7 and 8\n-            if (value >= uclip) {\n-                value = uclip;\n-            }\n-            else {\n-                if (value <= lclip) {\n-                    value = lclip;\n-                }\n-            }\n-        }\n-        else { // cases 9, 10, 11 and 12\n-            if (value <= lclip) {\n-                return; // bar is not visible\n-            }\n-            base = getLowerClip();\n-            if (value >= uclip) {\n-               value = uclip;\n-            }\n-        }\n-\n         RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n         double transY1 = rangeAxis.valueToJava2D(base, dataArea, yAxisLocation);\n         double transY2 = rangeAxis.valueToJava2D(value, dataArea, \n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_72/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:40:53.432213209 -0500\n@@ -92,7 +92,10 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_72/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:40:53.432213209 -0500\n@@ -104,7 +104,8 @@\n      * @return The mean value.\n      */\n     public Number getMeanValue(int row, int column) {\n-        Number result = null;\n+        this.maximumRangeValue = Double.NaN;\n+\t\tNumber result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n@@ -374,7 +375,8 @@\n      * @return The range.\n      */\n     public Range getRangeBounds(boolean includeInterval) {\n-        Range result = null;\n+        double sumXY = 0.0;\n+\t\tRange result = null;\n         if (includeInterval) {\n             if (!Double.isNaN(this.minimumRangeValueIncStdDev) \n                     && !Double.isNaN(this.maximumRangeValueIncStdDev))\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "Delete", 
          "seed": "this.minimumRangeValueIncStdDev=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "InsertBefore", 
          "seed": "g2.setStroke(plot.getRangeGridlineStroke());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "InsertBefore", 
          "seed": "g2.setStroke(plot.getRangeGridlineStroke());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return new Icon(){\n  public void paintIcon(  Component c,  Graphics g,  int x,  int y){\n    Graphics2D g2=(Graphics2D)g;\n    path.transform(AffineTransform.getTranslateInstance(x,y));\n    if (fillPaint != null) {\n      g2.setPaint(fillPaint);\n      g2.fill(path);\n    }\n    if (outlinePaint != null) {\n      g2.setPaint(outlinePaint);\n      g2.draw(path);\n    }\n    path.transform(AffineTransform.getTranslateInstance(-x,-y));\n  }\n  public int getIconWidth(){\n    return width;\n  }\n  public int getIconHeight(){\n    return height;\n  }\n}\n;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 263, 
          "faulty": "double uclip=getUpperClip();", 
          "type": "InsertBefore", 
          "seed": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 246, 
          "faulty": "return this.data.getRowKey(row);", 
          "type": "InsertBefore", 
          "seed": "double x=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 173, 
          "faulty": "result=masd.getStandardDeviation();", 
          "type": "Replace", 
          "seed": "result=masd.getMean();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Replace", 
          "seed": "RectangleEdge edge=plot.getRangeAxisEdge();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Replace", 
          "seed": "double xx2=domainAxis.getCategoryEnd(column,getColumnCount(),dataArea,plot.getDomainAxisEdge());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "InsertBefore", 
          "seed": "g2.setStroke(plot.getRangeGridlineStroke());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "InsertBefore", 
          "seed": "g2.setStroke(plot.getRangeGridlineStroke());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 126, 
          "faulty": "return getMeanValue(row,column);", 
          "type": "InsertBefore", 
          "seed": "double maxval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 173, 
          "faulty": "result=masd.getStandardDeviation();", 
          "type": "Replace", 
          "seed": "int count=0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double maxOutlier=Double.NEGATIVE_INFINITY;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "double barW0=domainAxis.getCategoryStart(column,getColumnCount(),dataArea,plot.getDomainAxisEdge());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 208, 
          "faulty": "drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);", 
          "type": "InsertBefore", 
          "seed": "double yy0=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "Replace", 
          "seed": "Stroke itemStroke=getItemStroke(row,column);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 173, 
          "faulty": "result=masd.getStandardDeviation();", 
          "type": "Replace", 
          "seed": "double max=-Double.MAX_VALUE;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_673/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:46:27.693923972 -0500\n@@ -201,17 +201,13 @@\n             throw new IllegalArgumentException(\n                 \"Requires StatisticalCategoryDataset.\");\n         }\n-        StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n+        g2.setStroke(plot.getRangeGridlineStroke());\n+\t\tg2.setStroke(plot.getRangeGridlineStroke());\n+\t\tg2.setStroke(plot.getRangeGridlineStroke());\n+\t\tg2.setStroke(plot.getRangeGridlineStroke());\n+\t\tStroke itemStroke = getItemStroke(row, column);\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n     }\n                 \n     /**\n@@ -245,14 +241,8 @@\n \n         int seriesCount = getRowCount();\n         int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n+        double xx2 = domainAxis.getCategoryEnd(column, getColumnCount(),\n+\t\t\t\tdataArea, plot.getDomainAxisEdge());\n \n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n@@ -260,7 +250,14 @@\n         double value = meanValue.doubleValue();\n         double base = 0.0;\n         double lclip = getLowerClip();\n-        double uclip = getUpperClip();\n+        if (seriesCount > 1) {\n+\t\t\tdouble seriesGap = dataArea.getHeight() * getItemMargin()\n+\t\t\t\t\t/ (categoryCount * (seriesCount - 1));\n+\t\t\trectY = rectY + row * (state.getBarWidth() + seriesGap);\n+\t\t} else {\n+\t\t\trectY = rectY + row * state.getBarWidth();\n+\t\t}\n+\t\tdouble uclip = getUpperClip();\n \n         if (uclip <= 0.0) {  // cases 1, 2, 3 and 4\n             if (value >= uclip) {\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_673/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:46:27.697924088 -0500\n@@ -107,9 +107,6 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getMean();\n-        }\n         return result;\n     }\n \n@@ -123,7 +120,8 @@\n      * @return The value.\n      */\n     public Number getValue(int row, int column) {\n-        return getMeanValue(row, column);\n+        double maxval = Double.NaN;\n+\t\treturn getMeanValue(row, column);\n     }\n \n     /**\n@@ -170,7 +168,7 @@\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n-            result = masd.getStandardDeviation();\n+            double max = -Double.MAX_VALUE;\n         }\n         return result;\n     }\n@@ -243,7 +241,8 @@\n      * @return The row key.\n      */\n     public Comparable getRowKey(int row) {\n-        return this.data.getRowKey(row);\n+        double x = 0.0;\n+\t\treturn this.data.getRowKey(row);\n     }\n \n     /**\n@@ -377,9 +376,11 @@\n         Range result = null;\n         if (includeInterval) {\n             if (!Double.isNaN(this.minimumRangeValueIncStdDev) \n-                    && !Double.isNaN(this.maximumRangeValueIncStdDev))\n-            result = new Range(this.minimumRangeValueIncStdDev, \n-                    this.maximumRangeValueIncStdDev);\n+                    && !Double.isNaN(this.maximumRangeValueIncStdDev)) {\n+\t\t\t\tdouble maxOutlier = Double.NEGATIVE_INFINITY;\n+\t\t\t\tresult = new Range(this.minimumRangeValueIncStdDev,\n+\t\t\t\t\t\tthis.maximumRangeValueIncStdDev);\n+\t\t\t}\n         }\n         else {\n             if (!Double.isNaN(this.minimumRangeValue) \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 261, 
          "faulty": "double base=0.0;", 
          "type": "InsertBefore", 
          "seed": "double xx0=domainAxis.getCategoryStart(column,getColumnCount(),dataArea,plot.getDomainAxisEdge());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 172, 
          "faulty": "if (masd != null) {\n  result=masd.getStandardDeviation();\n}", 
          "type": "Replace", 
          "seed": "double maxOutlier=Double.NEGATIVE_INFINITY;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 243, 
          "faulty": "double rectY=domainAxis.getCategoryStart(column,getColumnCount(),dataArea,xAxisLocation);", 
          "type": "InsertBefore", 
          "seed": "double y0=dataArea.getMaxY();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "Delete", 
          "seed": "this.minimumRangeValueIncStdDev=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 243, 
          "faulty": "double rectY=domainAxis.getCategoryStart(column,getColumnCount(),dataArea,xAxisLocation);", 
          "type": "InsertBefore", 
          "seed": "double currentItemMargin=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 265, 
          "faulty": "if (uclip <= 0.0) {\n  if (value >= uclip) {\n    return;\n  }\n  base=uclip;\n  if (value <= lclip) {\n    value=lclip;\n  }\n}\n else if (lclip <= 0.0) {\n  if (value >= uclip) {\n    value=uclip;\n  }\n else {\n    if (value <= lclip) {\n      value=lclip;\n    }\n  }\n}\n else {\n  if (value <= lclip) {\n    return;\n  }\n  base=getLowerClip();\n  if (value >= uclip) {\n    value=uclip;\n  }\n}", 
          "type": "Delete", 
          "seed": "LineAndShapeRenderer clone=(LineAndShapeRenderer)super.clone();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 111, 
          "faulty": "result=masd.getMean();", 
          "type": "InsertBefore", 
          "seed": "result=masd.getStandardDeviation();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_551/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:45:21.888011154 -0500\n@@ -204,14 +204,6 @@\n         StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n     }\n                 \n     /**\n@@ -239,7 +231,9 @@\n                                      \n         RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n         \n-        // BAR Y\n+        double y0 = dataArea.getMaxY();\n+\t\tdouble currentItemMargin = 0.0;\n+\t\t// BAR Y\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                 dataArea, xAxisLocation);\n \n@@ -258,39 +252,12 @@\n         Number meanValue = dataset.getMeanValue(row, column);\n \n         double value = meanValue.doubleValue();\n-        double base = 0.0;\n+        double xx0 = domainAxis.getCategoryStart(column, getColumnCount(),\n+\t\t\t\tdataArea, plot.getDomainAxisEdge());\n+\t\tdouble base = 0.0;\n         double lclip = getLowerClip();\n         double uclip = getUpperClip();\n \n-        if (uclip <= 0.0) {  // cases 1, 2, 3 and 4\n-            if (value >= uclip) {\n-                return; // bar is not visible\n-            }\n-            base = uclip;\n-            if (value <= lclip) {\n-                value = lclip;\n-            }\n-        }\n-        else if (lclip <= 0.0) { // cases 5, 6, 7 and 8\n-            if (value >= uclip) {\n-                value = uclip;\n-            }\n-            else {\n-                if (value <= lclip) {\n-                    value = lclip;\n-                }\n-            }\n-        }\n-        else { // cases 9, 10, 11 and 12\n-            if (value <= lclip) {\n-                return; // bar is not visible\n-            }\n-            base = getLowerClip();\n-            if (value >= uclip) {\n-               value = uclip;\n-            }\n-        }\n-\n         RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n         double transY1 = rangeAxis.valueToJava2D(base, dataArea, yAxisLocation);\n         double transY2 = rangeAxis.valueToJava2D(value, dataArea, \n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_551/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:45:21.892011270 -0500\n@@ -92,7 +92,8 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_551/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:45:21.892011270 -0500\n@@ -107,9 +107,6 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getMean();\n-        }\n         return result;\n     }\n \n@@ -169,9 +166,7 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getStandardDeviation();\n-        }\n+        double maxOutlier = Double.NEGATIVE_INFINITY;\n         return result;\n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 261, 
          "faulty": "double base=0.0;", 
          "type": "InsertBefore", 
          "seed": "double xx0=domainAxis.getCategoryStart(column,getColumnCount(),dataArea,plot.getDomainAxisEdge());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 243, 
          "faulty": "double rectY=domainAxis.getCategoryStart(column,getColumnCount(),dataArea,xAxisLocation);", 
          "type": "InsertBefore", 
          "seed": "double y0=dataArea.getMaxY();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "Delete", 
          "seed": "this.minimumRangeValueIncStdDev=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 243, 
          "faulty": "double rectY=domainAxis.getCategoryStart(column,getColumnCount(),dataArea,xAxisLocation);", 
          "type": "InsertBefore", 
          "seed": "double currentItemMargin=0.0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_521/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:45:07.479592326 -0500\n@@ -239,7 +239,9 @@\n                                      \n         RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n         \n-        // BAR Y\n+        double y0 = dataArea.getMaxY();\n+\t\tdouble currentItemMargin = 0.0;\n+\t\t// BAR Y\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                 dataArea, xAxisLocation);\n \n@@ -258,7 +260,9 @@\n         Number meanValue = dataset.getMeanValue(row, column);\n \n         double value = meanValue.doubleValue();\n-        double base = 0.0;\n+        double xx0 = domainAxis.getCategoryStart(column, getColumnCount(),\n+\t\t\t\tdataArea, plot.getDomainAxisEdge());\n+\t\tdouble base = 0.0;\n         double lclip = getLowerClip();\n         double uclip = getUpperClip();\n \n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_521/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:45:07.479592326 -0500\n@@ -107,9 +107,6 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getMean();\n-        }\n         return result;\n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "Delete", 
          "seed": "this.minimumRangeValueIncStdDev=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 111, 
          "faulty": "result=masd.getMean();", 
          "type": "InsertBefore", 
          "seed": "result=masd.getStandardDeviation();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Replace", 
          "seed": "double xx2=domainAxis.getCategoryEnd(column,getColumnCount(),dataArea,plot.getDomainAxisEdge());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "InsertBefore", 
          "seed": "g2.setStroke(plot.getRangeGridlineStroke());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 243, 
          "faulty": "double rectY=domainAxis.getCategoryStart(column,getColumnCount(),dataArea,xAxisLocation);", 
          "type": "InsertBefore", 
          "seed": "double currentItemMargin=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "Delete", 
          "seed": "this.minimumRangeValueIncStdDev=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Replace", 
          "seed": "RectangleEdge edge=plot.getRangeAxisEdge();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_584/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:45:39.676528230 -0500\n@@ -201,17 +201,11 @@\n             throw new IllegalArgumentException(\n                 \"Requires StatisticalCategoryDataset.\");\n         }\n-        StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n+        g2.setStroke(plot.getRangeGridlineStroke());\n+\t\tStatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n+        RectangleEdge edge = plot.getRangeAxisEdge();\n     }\n                 \n     /**\n@@ -239,20 +233,15 @@\n                                      \n         RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n         \n-        // BAR Y\n+        double currentItemMargin = 0.0;\n+\t\t// BAR Y\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                 dataArea, xAxisLocation);\n \n         int seriesCount = getRowCount();\n         int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n+        double xx2 = domainAxis.getCategoryEnd(column, getColumnCount(),\n+\t\t\t\tdataArea, plot.getDomainAxisEdge());\n \n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_584/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:45:39.676528230 -0500\n@@ -107,9 +107,6 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getMean();\n-        }\n         return result;\n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "Replace", 
          "seed": "double result=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "Replace", 
          "seed": "double result=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 107, 
          "faulty": "Number result=null;", 
          "type": "InsertBefore", 
          "seed": "this.maximumRangeValue=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 169, 
          "faulty": "Number result=null;", 
          "type": "InsertBefore", 
          "seed": "double sumX=0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 246, 
          "faulty": "return this.data.getRowKey(row);", 
          "type": "InsertBefore", 
          "seed": "this.minimumRangeValue=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 265, 
          "faulty": "if (uclip <= 0.0) {\n  if (value >= uclip) {\n    return;\n  }\n  base=uclip;\n  if (value <= lclip) {\n    value=lclip;\n  }\n}\n else if (lclip <= 0.0) {\n  if (value >= uclip) {\n    value=uclip;\n  }\n else {\n    if (value <= lclip) {\n      value=lclip;\n    }\n  }\n}\n else {\n  if (value <= lclip) {\n    return;\n  }\n  base=getLowerClip();\n  if (value >= uclip) {\n    value=uclip;\n  }\n}", 
          "type": "Replace", 
          "seed": "double previous=state.getSeriesRunningTotal();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 200, 
          "faulty": "if (!(data instanceof StatisticalCategoryDataset)) {\n  throw new IllegalArgumentException(\"Requires StatisticalCategoryDataset.\");\n}", 
          "type": "InsertBefore", 
          "seed": "plot.drawBackground(g2,dataArea);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_100/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:41:10.156698676 -0500\n@@ -196,7 +196,8 @@\n                          int column,\n                          int pass) {\n \n-        // defensive check\n+        plot.drawBackground(g2, dataArea);\n+\t\t// defensive check\n         if (!(data instanceof StatisticalCategoryDataset)) {\n             throw new IllegalArgumentException(\n                 \"Requires StatisticalCategoryDataset.\");\n@@ -204,14 +205,6 @@\n         StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n     }\n                 \n     /**\n@@ -243,17 +236,8 @@\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                 dataArea, xAxisLocation);\n \n-        int seriesCount = getRowCount();\n+        double result = Double.NaN;\n         int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n@@ -262,34 +246,7 @@\n         double lclip = getLowerClip();\n         double uclip = getUpperClip();\n \n-        if (uclip <= 0.0) {  // cases 1, 2, 3 and 4\n-            if (value >= uclip) {\n-                return; // bar is not visible\n-            }\n-            base = uclip;\n-            if (value <= lclip) {\n-                value = lclip;\n-            }\n-        }\n-        else if (lclip <= 0.0) { // cases 5, 6, 7 and 8\n-            if (value >= uclip) {\n-                value = uclip;\n-            }\n-            else {\n-                if (value <= lclip) {\n-                    value = lclip;\n-                }\n-            }\n-        }\n-        else { // cases 9, 10, 11 and 12\n-            if (value <= lclip) {\n-                return; // bar is not visible\n-            }\n-            base = getLowerClip();\n-            if (value >= uclip) {\n-               value = uclip;\n-            }\n-        }\n+        double previous = state.getSeriesRunningTotal();\n \n         RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n         double transY1 = rangeAxis.valueToJava2D(base, dataArea, yAxisLocation);\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_100/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:41:10.160698792 -0500\n@@ -92,7 +92,10 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_100/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:41:10.160698792 -0500\n@@ -104,7 +104,8 @@\n      * @return The mean value.\n      */\n     public Number getMeanValue(int row, int column) {\n-        Number result = null;\n+        this.maximumRangeValue = Double.NaN;\n+\t\tNumber result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n@@ -166,7 +167,8 @@\n      * @return The standard deviation.\n      */\n     public Number getStdDevValue(int row, int column) {\n-        Number result = null;\n+        double sumX = 0;\n+\t\tNumber result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n@@ -243,7 +245,8 @@\n      * @return The row key.\n      */\n     public Comparable getRowKey(int row) {\n-        return this.data.getRowKey(row);\n+        this.minimumRangeValue = Double.NaN;\n+\t\treturn this.data.getRowKey(row);\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 261, 
          "faulty": "double base=0.0;", 
          "type": "InsertBefore", 
          "seed": "double xx0=domainAxis.getCategoryStart(column,getColumnCount(),dataArea,plot.getDomainAxisEdge());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 172, 
          "faulty": "if (masd != null) {\n  result=masd.getStandardDeviation();\n}", 
          "type": "Replace", 
          "seed": "double maxOutlier=Double.NEGATIVE_INFINITY;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "Delete", 
          "seed": "this.minimumRangeValueIncStdDev=Double.NaN;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_480/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:44:47.295005590 -0500\n@@ -258,7 +258,9 @@\n         Number meanValue = dataset.getMeanValue(row, column);\n \n         double value = meanValue.doubleValue();\n-        double base = 0.0;\n+        double xx0 = domainAxis.getCategoryStart(column, getColumnCount(),\n+\t\t\t\tdataArea, plot.getDomainAxisEdge());\n+\t\tdouble base = 0.0;\n         double lclip = getLowerClip();\n         double uclip = getUpperClip();\n \n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_480/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:44:47.299005705 -0500\n@@ -107,9 +107,6 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getMean();\n-        }\n         return result;\n     }\n \n@@ -169,9 +166,7 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getStandardDeviation();\n-        }\n+        double maxOutlier = Double.NEGATIVE_INFINITY;\n         return result;\n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 172, 
          "faulty": "if (masd != null) {\n  result=masd.getStandardDeviation();\n}", 
          "type": "InsertBefore", 
          "seed": "double sumX=0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 274, 
          "faulty": "if (lclip <= 0.0) {\n  if (value >= uclip) {\n    value=uclip;\n  }\n else {\n    if (value <= lclip) {\n      value=lclip;\n    }\n  }\n}\n else {\n  if (value <= lclip) {\n    return;\n  }\n  base=getLowerClip();\n  if (value >= uclip) {\n    value=uclip;\n  }\n}", 
          "type": "Delete", 
          "seed": "double yy2=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 108, 
          "faulty": "MeanAndStandardDeviation masd=(MeanAndStandardDeviation)this.data.getObject(row,column);", 
          "type": "InsertBefore", 
          "seed": "double sumY=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 126, 
          "faulty": "return getMeanValue(row,column);", 
          "type": "Replace", 
          "seed": "return 1;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "Iterator iterator=null;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 265, 
          "faulty": "if (uclip <= 0.0) {\n  if (value >= uclip) {\n    return;\n  }\n  base=uclip;\n  if (value <= lclip) {\n    value=lclip;\n  }\n}\n else if (lclip <= 0.0) {\n  if (value >= uclip) {\n    value=uclip;\n  }\n else {\n    if (value <= lclip) {\n      value=lclip;\n    }\n  }\n}\n else {\n  if (value <= lclip) {\n    return;\n  }\n  base=getLowerClip();\n  if (value >= uclip) {\n    value=uclip;\n  }\n}", 
          "type": "Delete", 
          "seed": "float x0=(float)dataArea.getX();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_386/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:43:51.321378477 -0500\n@@ -204,14 +204,6 @@\n         StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n     }\n                 \n     /**\n@@ -245,15 +237,6 @@\n \n         int seriesCount = getRowCount();\n         int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n@@ -262,35 +245,6 @@\n         double lclip = getLowerClip();\n         double uclip = getUpperClip();\n \n-        if (uclip <= 0.0) {  // cases 1, 2, 3 and 4\n-            if (value >= uclip) {\n-                return; // bar is not visible\n-            }\n-            base = uclip;\n-            if (value <= lclip) {\n-                value = lclip;\n-            }\n-        }\n-        else if (lclip <= 0.0) { // cases 5, 6, 7 and 8\n-            if (value >= uclip) {\n-                value = uclip;\n-            }\n-            else {\n-                if (value <= lclip) {\n-                    value = lclip;\n-                }\n-            }\n-        }\n-        else { // cases 9, 10, 11 and 12\n-            if (value <= lclip) {\n-                return; // bar is not visible\n-            }\n-            base = getLowerClip();\n-            if (value >= uclip) {\n-               value = uclip;\n-            }\n-        }\n-\n         RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n         double transY1 = rangeAxis.valueToJava2D(base, dataArea, yAxisLocation);\n         double transY2 = rangeAxis.valueToJava2D(value, dataArea, \n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_386/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:43:51.321378477 -0500\n@@ -92,7 +92,11 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_386/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:43:51.325378594 -0500\n@@ -105,7 +105,8 @@\n      */\n     public Number getMeanValue(int row, int column) {\n         Number result = null;\n-        MeanAndStandardDeviation masd \n+        double sumY = 0.0;\n+\t\tMeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n             result = masd.getMean();\n@@ -123,7 +124,7 @@\n      * @return The value.\n      */\n     public Number getValue(int row, int column) {\n-        return getMeanValue(row, column);\n+        return 1;\n     }\n \n     /**\n@@ -169,7 +170,8 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n+        double sumX = 0;\n+\t\tif (masd != null) {\n             result = masd.getStandardDeviation();\n         }\n         return result;\n@@ -377,9 +379,11 @@\n         Range result = null;\n         if (includeInterval) {\n             if (!Double.isNaN(this.minimumRangeValueIncStdDev) \n-                    && !Double.isNaN(this.maximumRangeValueIncStdDev))\n-            result = new Range(this.minimumRangeValueIncStdDev, \n-                    this.maximumRangeValueIncStdDev);\n+                    && !Double.isNaN(this.maximumRangeValueIncStdDev)) {\n+\t\t\t\tdouble sumX2 = 0.0;\n+\t\t\t\tresult = new Range(this.minimumRangeValueIncStdDev,\n+\t\t\t\t\t\tthis.maximumRangeValueIncStdDev);\n+\t\t\t}\n         }\n         else {\n             if (!Double.isNaN(this.minimumRangeValue) \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 126, 
          "faulty": "return getMeanValue(row,column);", 
          "type": "InsertBefore", 
          "seed": "double minval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "Replace", 
          "seed": "double sum=0.0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_201/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:42:06.874345005 -0500\n@@ -107,9 +107,7 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getMean();\n-        }\n+        double sum = 0.0;\n         return result;\n     }\n \n@@ -123,7 +121,8 @@\n      * @return The value.\n      */\n     public Number getValue(int row, int column) {\n-        return getMeanValue(row, column);\n+        double minval = Double.NaN;\n+\t\treturn getMeanValue(row, column);\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 389, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "double minval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Replace", 
          "seed": "setIncludeBaseInRange(false);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 172, 
          "faulty": "if (masd != null) {\n  result=masd.getStandardDeviation();\n}", 
          "type": "InsertBefore", 
          "seed": "double sumX=0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 274, 
          "faulty": "if (lclip <= 0.0) {\n  if (value >= uclip) {\n    value=uclip;\n  }\n else {\n    if (value <= lclip) {\n      value=lclip;\n    }\n  }\n}\n else {\n  if (value <= lclip) {\n    return;\n  }\n  base=getLowerClip();\n  if (value >= uclip) {\n    value=uclip;\n  }\n}", 
          "type": "Delete", 
          "seed": "double yy2=0.0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_349/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:43:30.520773805 -0500\n@@ -204,14 +204,7 @@\n         StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n+        setIncludeBaseInRange(false);\n     }\n                 \n     /**\n@@ -270,26 +263,8 @@\n             if (value <= lclip) {\n                 value = lclip;\n             }\n-        }\n-        else if (lclip <= 0.0) { // cases 5, 6, 7 and 8\n-            if (value >= uclip) {\n-                value = uclip;\n-            }\n-            else {\n-                if (value <= lclip) {\n-                    value = lclip;\n-                }\n-            }\n-        }\n-        else { // cases 9, 10, 11 and 12\n-            if (value <= lclip) {\n-                return; // bar is not visible\n-            }\n-            base = getLowerClip();\n-            if (value >= uclip) {\n-               value = uclip;\n-            }\n-        }\n+        } else\n+\t\t\t;\n \n         RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n         double transY1 = rangeAxis.valueToJava2D(base, dataArea, yAxisLocation);\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_349/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:43:30.524773920 -0500\n@@ -92,7 +92,9 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\tthis.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_349/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:43:30.524773920 -0500\n@@ -169,7 +169,8 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n+        double sumX = 0;\n+\t\tif (masd != null) {\n             result = masd.getStandardDeviation();\n         }\n         return result;\n@@ -386,7 +387,8 @@\n                     && !Double.isNaN(this.maximumRangeValue))\n             result = new Range(this.minimumRangeValue, this.maximumRangeValue);            \n         }\n-        return result;\n+        double minval = Double.NaN;\n+\t\treturn result;\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 261, 
          "faulty": "double base=0.0;", 
          "type": "InsertBefore", 
          "seed": "double xx0=domainAxis.getCategoryStart(column,getColumnCount(),dataArea,plot.getDomainAxisEdge());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 172, 
          "faulty": "if (masd != null) {\n  result=masd.getStandardDeviation();\n}", 
          "type": "Replace", 
          "seed": "double maxOutlier=Double.NEGATIVE_INFINITY;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 172, 
          "faulty": "if (masd != null) {\n  result=masd.getStandardDeviation();\n}", 
          "type": "Replace", 
          "seed": "double maxOutlier=Double.NEGATIVE_INFINITY;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 243, 
          "faulty": "double rectY=domainAxis.getCategoryStart(column,getColumnCount(),dataArea,xAxisLocation);", 
          "type": "InsertBefore", 
          "seed": "double y0=dataArea.getMaxY();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "Delete", 
          "seed": "this.minimumRangeValueIncStdDev=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 172, 
          "faulty": "if (masd != null) {\n  result=masd.getStandardDeviation();\n}", 
          "type": "Replace", 
          "seed": "double y=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "InsertBefore", 
          "seed": "RectangleEdge edge1=plot.getRangeAxisEdge();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 170, 
          "faulty": "MeanAndStandardDeviation masd=(MeanAndStandardDeviation)this.data.getObject(row,column);", 
          "type": "Delete", 
          "seed": "double result=Double.NaN;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_502/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:44:58.811340353 -0500\n@@ -201,7 +201,8 @@\n             throw new IllegalArgumentException(\n                 \"Requires StatisticalCategoryDataset.\");\n         }\n-        StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n+        RectangleEdge edge1 = plot.getRangeAxisEdge();\n+\t\tStatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n         if (orientation == PlotOrientation.HORIZONTAL) {\n@@ -239,7 +240,8 @@\n                                      \n         RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n         \n-        // BAR Y\n+        double y0 = dataArea.getMaxY();\n+\t\t// BAR Y\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                 dataArea, xAxisLocation);\n \n@@ -258,7 +260,9 @@\n         Number meanValue = dataset.getMeanValue(row, column);\n \n         double value = meanValue.doubleValue();\n-        double base = 0.0;\n+        double xx0 = domainAxis.getCategoryStart(column, getColumnCount(),\n+\t\t\t\tdataArea, plot.getDomainAxisEdge());\n+\t\tdouble base = 0.0;\n         double lclip = getLowerClip();\n         double uclip = getUpperClip();\n \n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_502/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:44:58.811340353 -0500\n@@ -107,9 +107,6 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getMean();\n-        }\n         return result;\n     }\n \n@@ -167,11 +164,7 @@\n      */\n     public Number getStdDevValue(int row, int column) {\n         Number result = null;\n-        MeanAndStandardDeviation masd \n-            = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getStandardDeviation();\n-        }\n+        double y = 0.0;\n         return result;\n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "Delete", 
          "seed": "this.minimumRangeValueIncStdDev=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 246, 
          "faulty": "return this.data.getRowKey(row);", 
          "type": "InsertBefore", 
          "seed": "double x=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 173, 
          "faulty": "result=masd.getStandardDeviation();", 
          "type": "Replace", 
          "seed": "result=masd.getMean();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 172, 
          "faulty": "if (masd != null) {\n  result=masd.getStandardDeviation();\n}", 
          "type": "Delete", 
          "seed": "if (masd != null) {\n  result=masd.getMean();\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_610/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:45:53.616933447 -0500\n@@ -107,9 +107,6 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getMean();\n-        }\n         return result;\n     }\n \n@@ -169,9 +166,6 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getStandardDeviation();\n-        }\n         return result;\n     }\n \n@@ -243,7 +237,8 @@\n      * @return The row key.\n      */\n     public Comparable getRowKey(int row) {\n-        return this.data.getRowKey(row);\n+        double x = 0.0;\n+\t\treturn this.data.getRowKey(row);\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 273, 
          "faulty": "return this.data.getColumnCount();", 
          "type": "InsertBefore", 
          "seed": "List result=null;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 126, 
          "faulty": "return getMeanValue(row,column);", 
          "type": "InsertBefore", 
          "seed": "double minval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "int count=dataset.getColumnCount();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 172, 
          "faulty": "if (masd != null) {\n  result=masd.getStandardDeviation();\n}", 
          "type": "InsertBefore", 
          "seed": "double sumX=0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 274, 
          "faulty": "if (lclip <= 0.0) {\n  if (value >= uclip) {\n    value=uclip;\n  }\n else {\n    if (value <= lclip) {\n      value=lclip;\n    }\n  }\n}\n else {\n  if (value <= lclip) {\n    return;\n  }\n  base=getLowerClip();\n  if (value >= uclip) {\n    value=uclip;\n  }\n}", 
          "type": "Delete", 
          "seed": "double yy2=0.0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_337/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:43:24.620602285 -0500\n@@ -204,14 +204,6 @@\n         StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n     }\n                 \n     /**\n@@ -245,15 +237,6 @@\n \n         int seriesCount = getRowCount();\n         int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n@@ -270,26 +253,8 @@\n             if (value <= lclip) {\n                 value = lclip;\n             }\n-        }\n-        else if (lclip <= 0.0) { // cases 5, 6, 7 and 8\n-            if (value >= uclip) {\n-                value = uclip;\n-            }\n-            else {\n-                if (value <= lclip) {\n-                    value = lclip;\n-                }\n-            }\n-        }\n-        else { // cases 9, 10, 11 and 12\n-            if (value <= lclip) {\n-                return; // bar is not visible\n-            }\n-            base = getLowerClip();\n-            if (value >= uclip) {\n-               value = uclip;\n-            }\n-        }\n+        } else\n+\t\t\t;\n \n         RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n         double transY1 = rangeAxis.valueToJava2D(base, dataArea, yAxisLocation);\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_337/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:43:24.624602402 -0500\n@@ -92,7 +92,9 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\tthis.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_337/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:43:24.624602402 -0500\n@@ -123,7 +123,8 @@\n      * @return The value.\n      */\n     public Number getValue(int row, int column) {\n-        return getMeanValue(row, column);\n+        double minval = Double.NaN;\n+\t\treturn getMeanValue(row, column);\n     }\n \n     /**\n@@ -169,7 +170,8 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n+        double sumX = 0;\n+\t\tif (masd != null) {\n             result = masd.getStandardDeviation();\n         }\n         return result;\n@@ -270,7 +272,8 @@\n      * @return The column count.\n      */\n     public int getColumnCount() {\n-        return this.data.getColumnCount();\n+        List result = null;\n+\t\treturn this.data.getColumnCount();\n     }\n \n     /**\n@@ -377,9 +380,11 @@\n         Range result = null;\n         if (includeInterval) {\n             if (!Double.isNaN(this.minimumRangeValueIncStdDev) \n-                    && !Double.isNaN(this.maximumRangeValueIncStdDev))\n-            result = new Range(this.minimumRangeValueIncStdDev, \n-                    this.maximumRangeValueIncStdDev);\n+                    && !Double.isNaN(this.maximumRangeValueIncStdDev)) {\n+\t\t\t\tdouble sumX2 = 0.0;\n+\t\t\t\tresult = new Range(this.minimumRangeValueIncStdDev,\n+\t\t\t\t\t\tthis.maximumRangeValueIncStdDev);\n+\t\t\t}\n         }\n         else {\n             if (!Double.isNaN(this.minimumRangeValue) \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 273, 
          "faulty": "return this.data.getColumnCount();", 
          "type": "InsertBefore", 
          "seed": "List result=null;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 126, 
          "faulty": "return getMeanValue(row,column);", 
          "type": "InsertBefore", 
          "seed": "double minval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "int count=dataset.getColumnCount();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 273, 
          "faulty": "return this.data.getColumnCount();", 
          "type": "InsertBefore", 
          "seed": "double sumXX=0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 175, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "double m=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 389, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "double minval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Replace", 
          "seed": "setIncludeBaseInRange(false);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 172, 
          "faulty": "if (masd != null) {\n  result=masd.getStandardDeviation();\n}", 
          "type": "InsertBefore", 
          "seed": "double sumX=0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 274, 
          "faulty": "if (lclip <= 0.0) {\n  if (value >= uclip) {\n    value=uclip;\n  }\n else {\n    if (value <= lclip) {\n      value=lclip;\n    }\n  }\n}\n else {\n  if (value <= lclip) {\n    return;\n  }\n  base=getLowerClip();\n  if (value >= uclip) {\n    value=uclip;\n  }\n}", 
          "type": "Delete", 
          "seed": "double yy2=0.0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_357/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:43:34.896901019 -0500\n@@ -204,14 +204,7 @@\n         StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n+        setIncludeBaseInRange(false);\n     }\n                 \n     /**\n@@ -251,7 +244,6 @@\n             rectY = rectY + row * (state.getBarWidth() + seriesGap);\n         }\n         else {\n-            rectY = rectY + row * state.getBarWidth();\n         }\n \n         // BAR X\n@@ -270,26 +262,8 @@\n             if (value <= lclip) {\n                 value = lclip;\n             }\n-        }\n-        else if (lclip <= 0.0) { // cases 5, 6, 7 and 8\n-            if (value >= uclip) {\n-                value = uclip;\n-            }\n-            else {\n-                if (value <= lclip) {\n-                    value = lclip;\n-                }\n-            }\n-        }\n-        else { // cases 9, 10, 11 and 12\n-            if (value <= lclip) {\n-                return; // bar is not visible\n-            }\n-            base = getLowerClip();\n-            if (value >= uclip) {\n-               value = uclip;\n-            }\n-        }\n+        } else\n+\t\t\t;\n \n         RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n         double transY1 = rangeAxis.valueToJava2D(base, dataArea, yAxisLocation);\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_357/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:43:34.896901019 -0500\n@@ -92,7 +92,8 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_357/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:43:34.900901136 -0500\n@@ -123,7 +123,8 @@\n      * @return The value.\n      */\n     public Number getValue(int row, int column) {\n-        return getMeanValue(row, column);\n+        double minval = Double.NaN;\n+\t\treturn getMeanValue(row, column);\n     }\n \n     /**\n@@ -169,10 +170,12 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n+        double sumX = 0;\n+\t\tif (masd != null) {\n             result = masd.getStandardDeviation();\n         }\n-        return result;\n+        double m = 0.0;\n+\t\treturn result;\n     }\n \n     /**\n@@ -270,7 +273,9 @@\n      * @return The column count.\n      */\n     public int getColumnCount() {\n-        return this.data.getColumnCount();\n+        List result = null;\n+\t\tdouble sumXX = 0;\n+\t\treturn this.data.getColumnCount();\n     }\n \n     /**\n@@ -377,16 +382,19 @@\n         Range result = null;\n         if (includeInterval) {\n             if (!Double.isNaN(this.minimumRangeValueIncStdDev) \n-                    && !Double.isNaN(this.maximumRangeValueIncStdDev))\n-            result = new Range(this.minimumRangeValueIncStdDev, \n-                    this.maximumRangeValueIncStdDev);\n+                    && !Double.isNaN(this.maximumRangeValueIncStdDev)) {\n+\t\t\t\tdouble sumX2 = 0.0;\n+\t\t\t\tresult = new Range(this.minimumRangeValueIncStdDev,\n+\t\t\t\t\t\tthis.maximumRangeValueIncStdDev);\n+\t\t\t}\n         }\n         else {\n             if (!Double.isNaN(this.minimumRangeValue) \n                     && !Double.isNaN(this.maximumRangeValue))\n             result = new Range(this.minimumRangeValue, this.maximumRangeValue);            \n         }\n-        return result;\n+        double minval = Double.NaN;\n+\t\treturn result;\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "Replace", 
          "seed": "double result=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 107, 
          "faulty": "Number result=null;", 
          "type": "InsertBefore", 
          "seed": "this.maximumRangeValue=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 169, 
          "faulty": "Number result=null;", 
          "type": "InsertBefore", 
          "seed": "double sumX=0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 246, 
          "faulty": "return this.data.getRowKey(row);", 
          "type": "InsertBefore", 
          "seed": "this.minimumRangeValue=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "Delete", 
          "seed": "GanttCategoryDataset gcd=(GanttCategoryDataset)dataset;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 208, 
          "faulty": "drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);", 
          "type": "Replace", 
          "seed": "Composite originalComposite=g2.getComposite();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 169, 
          "faulty": "Number result=null;", 
          "type": "InsertBefore", 
          "seed": "double max=-Double.MAX_VALUE;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 111, 
          "faulty": "result=masd.getMean();", 
          "type": "Delete", 
          "seed": "double max=-Double.MAX_VALUE;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "InsertBefore", 
          "seed": "double y2=dataArea.getMinY();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_167/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:41:47.181773399 -0500\n@@ -201,17 +201,10 @@\n             throw new IllegalArgumentException(\n                 \"Requires StatisticalCategoryDataset.\");\n         }\n-        StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n+        double y2 = dataArea.getMinY();\n+\t\tStatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n     }\n                 \n     /**\n@@ -243,17 +236,7 @@\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                 dataArea, xAxisLocation);\n \n-        int seriesCount = getRowCount();\n         int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_167/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:41:47.185773516 -0500\n@@ -92,7 +92,8 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_167/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:41:47.185773516 -0500\n@@ -104,11 +104,11 @@\n      * @return The mean value.\n      */\n     public Number getMeanValue(int row, int column) {\n-        Number result = null;\n+        this.maximumRangeValue = Double.NaN;\n+\t\tNumber result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n-            result = masd.getMean();\n         }\n         return result;\n     }\n@@ -166,7 +166,9 @@\n      * @return The standard deviation.\n      */\n     public Number getStdDevValue(int row, int column) {\n-        Number result = null;\n+        double sumX = 0;\n+\t\tdouble max = -Double.MAX_VALUE;\n+\t\tNumber result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n@@ -243,7 +245,8 @@\n      * @return The row key.\n      */\n     public Comparable getRowKey(int row) {\n-        return this.data.getRowKey(row);\n+        this.minimumRangeValue = Double.NaN;\n+\t\treturn this.data.getRowKey(row);\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "Delete", 
          "seed": "this.minimumRangeValueIncStdDev=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 111, 
          "faulty": "result=masd.getMean();", 
          "type": "InsertBefore", 
          "seed": "result=masd.getStandardDeviation();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Replace", 
          "seed": "double xx2=domainAxis.getCategoryEnd(column,getColumnCount(),dataArea,plot.getDomainAxisEdge());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "InsertBefore", 
          "seed": "g2.setStroke(plot.getRangeGridlineStroke());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "InsertBefore", 
          "seed": "g2.setStroke(plot.getRangeGridlineStroke());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 243, 
          "faulty": "double rectY=domainAxis.getCategoryStart(column,getColumnCount(),dataArea,xAxisLocation);", 
          "type": "InsertBefore", 
          "seed": "double currentItemMargin=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 104, 
          "faulty": "return this.standardDeviation;", 
          "type": "InsertBefore", 
          "seed": "double sumXX=0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return new Icon(){\n  public void paintIcon(  Component c,  Graphics g,  int x,  int y){\n    Graphics2D g2=(Graphics2D)g;\n    path.transform(AffineTransform.getTranslateInstance(x,y));\n    if (fillPaint != null) {\n      g2.setPaint(fillPaint);\n      g2.fill(path);\n    }\n    if (outlinePaint != null) {\n      g2.setPaint(outlinePaint);\n      g2.draw(path);\n    }\n    path.transform(AffineTransform.getTranslateInstance(-x,-y));\n  }\n  public int getIconWidth(){\n    return width;\n  }\n  public int getIconHeight(){\n    return height;\n  }\n}\n;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 263, 
          "faulty": "double uclip=getUpperClip();", 
          "type": "InsertBefore", 
          "seed": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 126, 
          "faulty": "return getMeanValue(row,column);", 
          "type": "InsertBefore", 
          "seed": "double maxval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "InsertBefore", 
          "seed": "setPositiveItemLabelPositionFallback(null);"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "InsertBefore", 
          "seed": "float x3=(float)dataArea.getMaxX();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "boolean inverted=rangeAxis.isInverted();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "InsertBefore", 
          "seed": "return;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 265, 
          "faulty": "if (uclip <= 0.0) {\n  if (value >= uclip) {\n    return;\n  }\n  base=uclip;\n  if (value <= lclip) {\n    value=lclip;\n  }\n}\n else if (lclip <= 0.0) {\n  if (value >= uclip) {\n    value=uclip;\n  }\n else {\n    if (value <= lclip) {\n      value=lclip;\n    }\n  }\n}\n else {\n  if (value <= lclip) {\n    return;\n  }\n  base=getLowerClip();\n  if (value >= uclip) {\n    value=uclip;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "Number previousValue=dataset.getValue(row,column - 1);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_580/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:45:37.688470442 -0500\n@@ -201,17 +201,12 @@\n             throw new IllegalArgumentException(\n                 \"Requires StatisticalCategoryDataset.\");\n         }\n-        StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n+        g2.setStroke(plot.getRangeGridlineStroke());\n+\t\tg2.setStroke(plot.getRangeGridlineStroke());\n+\t\tStatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n+        setPositiveItemLabelPositionFallback(null);\n     }\n                 \n     /**\n@@ -239,30 +234,31 @@\n                                      \n         RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n         \n-        // BAR Y\n+        double currentItemMargin = 0.0;\n+\t\t// BAR Y\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                 dataArea, xAxisLocation);\n \n-        int seriesCount = getRowCount();\n+        float x3 = (float) dataArea.getMaxX();\n+\t\tint seriesCount = getRowCount();\n         int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n         double value = meanValue.doubleValue();\n         double base = 0.0;\n         double lclip = getLowerClip();\n-        double uclip = getUpperClip();\n+        if (seriesCount > 1) {\n+\t\t\tdouble seriesGap = dataArea.getHeight() * getItemMargin()\n+\t\t\t\t\t/ (categoryCount * (seriesCount - 1));\n+\t\t\trectY = rectY + row * (state.getBarWidth() + seriesGap);\n+\t\t} else {\n+\t\t\trectY = rectY + row * state.getBarWidth();\n+\t\t}\n+\t\tdouble uclip = getUpperClip();\n \n-        if (uclip <= 0.0) {  // cases 1, 2, 3 and 4\n+        Number previousValue = dataset.getValue(row, column - 1);\n+\t\tif (uclip <= 0.0) {  // cases 1, 2, 3 and 4\n             if (value >= uclip) {\n                 return; // bar is not visible\n             }\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_580/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:45:37.692470559 -0500\n@@ -101,7 +101,8 @@\n      * @return The standard deviation.\n      */\n     public Number getStandardDeviation() {\n-        return this.standardDeviation;\n+        double sumXX = 0;\n+\t\treturn this.standardDeviation;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_580/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:45:37.692470559 -0500\n@@ -107,9 +107,6 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getMean();\n-        }\n         return result;\n     }\n \n@@ -123,7 +120,8 @@\n      * @return The value.\n      */\n     public Number getValue(int row, int column) {\n-        return getMeanValue(row, column);\n+        double maxval = Double.NaN;\n+\t\treturn getMeanValue(row, column);\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "Replace", 
          "seed": "double result=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "Replace", 
          "seed": "double result=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 107, 
          "faulty": "Number result=null;", 
          "type": "InsertBefore", 
          "seed": "this.maximumRangeValue=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 169, 
          "faulty": "Number result=null;", 
          "type": "InsertBefore", 
          "seed": "double sumX=0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 246, 
          "faulty": "return this.data.getRowKey(row);", 
          "type": "InsertBefore", 
          "seed": "this.minimumRangeValue=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 265, 
          "faulty": "if (uclip <= 0.0) {\n  if (value >= uclip) {\n    return;\n  }\n  base=uclip;\n  if (value <= lclip) {\n    value=lclip;\n  }\n}\n else if (lclip <= 0.0) {\n  if (value >= uclip) {\n    value=uclip;\n  }\n else {\n    if (value <= lclip) {\n      value=lclip;\n    }\n  }\n}\n else {\n  if (value <= lclip) {\n    return;\n  }\n  base=getLowerClip();\n  if (value >= uclip) {\n    value=uclip;\n  }\n}", 
          "type": "Replace", 
          "seed": "double previous=state.getSeriesRunningTotal();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 200, 
          "faulty": "if (!(data instanceof StatisticalCategoryDataset)) {\n  throw new IllegalArgumentException(\"Requires StatisticalCategoryDataset.\");\n}", 
          "type": "InsertBefore", 
          "seed": "plot.drawBackground(g2,dataArea);"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Replace", 
          "seed": "double y=0.0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_128/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:41:26.429171018 -0500\n@@ -196,7 +196,8 @@\n                          int column,\n                          int pass) {\n \n-        // defensive check\n+        plot.drawBackground(g2, dataArea);\n+\t\t// defensive check\n         if (!(data instanceof StatisticalCategoryDataset)) {\n             throw new IllegalArgumentException(\n                 \"Requires StatisticalCategoryDataset.\");\n@@ -204,14 +205,7 @@\n         StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n+        double y = 0.0;\n     }\n                 \n     /**\n@@ -243,17 +237,8 @@\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                 dataArea, xAxisLocation);\n \n-        int seriesCount = getRowCount();\n+        double result = Double.NaN;\n         int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n@@ -262,34 +247,7 @@\n         double lclip = getLowerClip();\n         double uclip = getUpperClip();\n \n-        if (uclip <= 0.0) {  // cases 1, 2, 3 and 4\n-            if (value >= uclip) {\n-                return; // bar is not visible\n-            }\n-            base = uclip;\n-            if (value <= lclip) {\n-                value = lclip;\n-            }\n-        }\n-        else if (lclip <= 0.0) { // cases 5, 6, 7 and 8\n-            if (value >= uclip) {\n-                value = uclip;\n-            }\n-            else {\n-                if (value <= lclip) {\n-                    value = lclip;\n-                }\n-            }\n-        }\n-        else { // cases 9, 10, 11 and 12\n-            if (value <= lclip) {\n-                return; // bar is not visible\n-            }\n-            base = getLowerClip();\n-            if (value >= uclip) {\n-               value = uclip;\n-            }\n-        }\n+        double previous = state.getSeriesRunningTotal();\n \n         RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n         double transY1 = rangeAxis.valueToJava2D(base, dataArea, yAxisLocation);\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_128/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:41:26.433171134 -0500\n@@ -92,7 +92,10 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_128/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:41:26.437171251 -0500\n@@ -104,7 +104,8 @@\n      * @return The mean value.\n      */\n     public Number getMeanValue(int row, int column) {\n-        Number result = null;\n+        this.maximumRangeValue = Double.NaN;\n+\t\tNumber result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n@@ -166,7 +167,8 @@\n      * @return The standard deviation.\n      */\n     public Number getStdDevValue(int row, int column) {\n-        Number result = null;\n+        double sumX = 0;\n+\t\tNumber result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n@@ -243,7 +245,8 @@\n      * @return The row key.\n      */\n     public Comparable getRowKey(int row) {\n-        return this.data.getRowKey(row);\n+        this.minimumRangeValue = Double.NaN;\n+\t\treturn this.data.getRowKey(row);\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 126, 
          "faulty": "return getMeanValue(row,column);", 
          "type": "InsertBefore", 
          "seed": "double minval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "Replace", 
          "seed": "double sum=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 243, 
          "faulty": "double rectY=domainAxis.getCategoryStart(column,getColumnCount(),dataArea,xAxisLocation);", 
          "type": "InsertBefore", 
          "seed": "CategoryPlot p=getPlot();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 113, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "if (masd != null) {\n  result=masd.getStandardDeviation();\n}"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "InsertBefore", 
          "seed": "setNegativeItemLabelPositionFallback(null);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "InsertBefore", 
          "seed": "double minval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 263, 
          "faulty": "double uclip=getUpperClip();", 
          "type": "InsertBefore", 
          "seed": "if (value <= lclip) {\n  value=lclip;\n}"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "double uclip=getUpperClip();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 200, 
          "faulty": "if (!(data instanceof StatisticalCategoryDataset)) {\n  throw new IllegalArgumentException(\"Requires StatisticalCategoryDataset.\");\n}", 
          "type": "Delete", 
          "seed": "Stroke stroke=plot.getRangeGridlineStroke();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "InsertBefore", 
          "seed": "if (masd != null) {\n  result=masd.getStandardDeviation();\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_279/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:42:48.443551587 -0500\n@@ -196,22 +196,9 @@\n                          int column,\n                          int pass) {\n \n-        // defensive check\n-        if (!(data instanceof StatisticalCategoryDataset)) {\n-            throw new IllegalArgumentException(\n-                \"Requires StatisticalCategoryDataset.\");\n-        }\n         StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n     }\n                 \n     /**\n@@ -239,28 +226,24 @@\n                                      \n         RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n         \n-        // BAR Y\n+        CategoryPlot p = getPlot();\n+\t\t// BAR Y\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                 dataArea, xAxisLocation);\n \n-        int seriesCount = getRowCount();\n+        setNegativeItemLabelPositionFallback(null);\n+\t\tint seriesCount = getRowCount();\n         int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n         double value = meanValue.doubleValue();\n         double base = 0.0;\n         double lclip = getLowerClip();\n-        double uclip = getUpperClip();\n+        if (value <= lclip) {\n+\t\t\tvalue = lclip;\n+\t\t}\n+\t\tdouble uclip = getUpperClip();\n \n         if (uclip <= 0.0) {  // cases 1, 2, 3 and 4\n             if (value >= uclip) {\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_279/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:42:48.443551587 -0500\n@@ -92,7 +92,11 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_279/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:42:48.447551703 -0500\n@@ -107,10 +107,15 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n+        double minval = Double.NaN;\n+\t\tif (masd != null) {\n+\t\t\tresult = masd.getStandardDeviation();\n+\t\t}\n+\t\tdouble sum = 0.0;\n         if (masd != null) {\n-            result = masd.getMean();\n-        }\n-        return result;\n+\t\t\tresult = masd.getStandardDeviation();\n+\t\t}\n+\t\treturn result;\n     }\n \n     /**\n@@ -123,7 +128,8 @@\n      * @return The value.\n      */\n     public Number getValue(int row, int column) {\n-        return getMeanValue(row, column);\n+        double minval = Double.NaN;\n+\t\treturn getMeanValue(row, column);\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 261, 
          "faulty": "double base=0.0;", 
          "type": "InsertBefore", 
          "seed": "double xx0=domainAxis.getCategoryStart(column,getColumnCount(),dataArea,plot.getDomainAxisEdge());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 243, 
          "faulty": "double rectY=domainAxis.getCategoryStart(column,getColumnCount(),dataArea,xAxisLocation);", 
          "type": "InsertBefore", 
          "seed": "double y0=dataArea.getMaxY();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "Delete", 
          "seed": "this.minimumRangeValueIncStdDev=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 243, 
          "faulty": "double rectY=domainAxis.getCategoryStart(column,getColumnCount(),dataArea,xAxisLocation);", 
          "type": "InsertBefore", 
          "seed": "double currentItemMargin=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "InsertBefore", 
          "seed": "g2.setStroke(plot.getRangeGridlineStroke());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 206, 
          "faulty": "PlotOrientation orientation=plot.getOrientation();", 
          "type": "Delete", 
          "seed": "Rectangle2D completeBar=null;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 108, 
          "faulty": "MeanAndStandardDeviation masd=(MeanAndStandardDeviation)this.data.getObject(row,column);", 
          "type": "InsertBefore", 
          "seed": "double minRegularValue=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 208, 
          "faulty": "drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);", 
          "type": "Delete", 
          "seed": "this.errorIndicatorStroke=new BasicStroke(0.5f);"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 265, 
          "faulty": "if (uclip <= 0.0) {\n  if (value >= uclip) {\n    return;\n  }\n  base=uclip;\n  if (value <= lclip) {\n    value=lclip;\n  }\n}\n else if (lclip <= 0.0) {\n  if (value >= uclip) {\n    value=uclip;\n  }\n else {\n    if (value <= lclip) {\n      value=lclip;\n    }\n  }\n}\n else {\n  if (value <= lclip) {\n    return;\n  }\n  base=getLowerClip();\n  if (value >= uclip) {\n    value=uclip;\n  }\n}", 
          "type": "Delete", 
          "seed": "double rectY=domainAxis.getCategoryStart(column,getColumnCount(),dataArea,xAxisLocation);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_549/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:45:21.163990109 -0500\n@@ -201,17 +201,8 @@\n             throw new IllegalArgumentException(\n                 \"Requires StatisticalCategoryDataset.\");\n         }\n-        StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n-\n-        PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n+        g2.setStroke(plot.getRangeGridlineStroke());\n+\t\tStatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n     }\n                 \n     /**\n@@ -239,7 +230,9 @@\n                                      \n         RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n         \n-        // BAR Y\n+        double y0 = dataArea.getMaxY();\n+\t\tdouble currentItemMargin = 0.0;\n+\t\t// BAR Y\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                 dataArea, xAxisLocation);\n \n@@ -258,39 +251,12 @@\n         Number meanValue = dataset.getMeanValue(row, column);\n \n         double value = meanValue.doubleValue();\n-        double base = 0.0;\n+        double xx0 = domainAxis.getCategoryStart(column, getColumnCount(),\n+\t\t\t\tdataArea, plot.getDomainAxisEdge());\n+\t\tdouble base = 0.0;\n         double lclip = getLowerClip();\n         double uclip = getUpperClip();\n \n-        if (uclip <= 0.0) {  // cases 1, 2, 3 and 4\n-            if (value >= uclip) {\n-                return; // bar is not visible\n-            }\n-            base = uclip;\n-            if (value <= lclip) {\n-                value = lclip;\n-            }\n-        }\n-        else if (lclip <= 0.0) { // cases 5, 6, 7 and 8\n-            if (value >= uclip) {\n-                value = uclip;\n-            }\n-            else {\n-                if (value <= lclip) {\n-                    value = lclip;\n-                }\n-            }\n-        }\n-        else { // cases 9, 10, 11 and 12\n-            if (value <= lclip) {\n-                return; // bar is not visible\n-            }\n-            base = getLowerClip();\n-            if (value >= uclip) {\n-               value = uclip;\n-            }\n-        }\n-\n         RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n         double transY1 = rangeAxis.valueToJava2D(base, dataArea, yAxisLocation);\n         double transY2 = rangeAxis.valueToJava2D(value, dataArea, \n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_549/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:45:21.163990109 -0500\n@@ -105,11 +105,9 @@\n      */\n     public Number getMeanValue(int row, int column) {\n         Number result = null;\n-        MeanAndStandardDeviation masd \n+        double minRegularValue = Double.POSITIVE_INFINITY;\n+\t\tMeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getMean();\n-        }\n         return result;\n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 273, 
          "faulty": "return this.data.getColumnCount();", 
          "type": "InsertBefore", 
          "seed": "List result=null;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 126, 
          "faulty": "return getMeanValue(row,column);", 
          "type": "InsertBefore", 
          "seed": "double minval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "int count=dataset.getColumnCount();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 273, 
          "faulty": "return this.data.getColumnCount();", 
          "type": "InsertBefore", 
          "seed": "double sumXX=0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 247, 
          "faulty": "int categoryCount=getColumnCount();", 
          "type": "Replace", 
          "seed": "PlotOrientation orient=plot.getOrientation();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "InsertBefore", 
          "seed": "setNegativeItemLabelPositionFallback(null);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "InsertBefore", 
          "seed": "double minval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 263, 
          "faulty": "double uclip=getUpperClip();", 
          "type": "InsertBefore", 
          "seed": "if (value <= lclip) {\n  value=lclip;\n}"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "double uclip=getUpperClip();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 200, 
          "faulty": "if (!(data instanceof StatisticalCategoryDataset)) {\n  throw new IllegalArgumentException(\"Requires StatisticalCategoryDataset.\");\n}", 
          "type": "Delete", 
          "seed": "Stroke stroke=plot.getRangeGridlineStroke();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "InsertBefore", 
          "seed": "if (masd != null) {\n  result=masd.getStandardDeviation();\n}"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 111, 
          "faulty": "result=masd.getMean();", 
          "type": "Delete", 
          "seed": "int count=0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 175, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "double m=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 389, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "double minval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Replace", 
          "seed": "setIncludeBaseInRange(false);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 172, 
          "faulty": "if (masd != null) {\n  result=masd.getStandardDeviation();\n}", 
          "type": "InsertBefore", 
          "seed": "double sumX=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_311/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:43:08.104122243 -0500\n@@ -196,22 +196,10 @@\n                          int column,\n                          int pass) {\n \n-        // defensive check\n-        if (!(data instanceof StatisticalCategoryDataset)) {\n-            throw new IllegalArgumentException(\n-                \"Requires StatisticalCategoryDataset.\");\n-        }\n         StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n+        setIncludeBaseInRange(false);\n     }\n                 \n     /**\n@@ -243,24 +231,19 @@\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                 dataArea, xAxisLocation);\n \n-        int seriesCount = getRowCount();\n-        int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n+        setNegativeItemLabelPositionFallback(null);\n+\t\tint seriesCount = getRowCount();\n+        PlotOrientation orient = plot.getOrientation();\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n         double value = meanValue.doubleValue();\n         double base = 0.0;\n         double lclip = getLowerClip();\n-        double uclip = getUpperClip();\n+        if (value <= lclip) {\n+\t\t\tvalue = lclip;\n+\t\t}\n+\t\tdouble uclip = getUpperClip();\n \n         if (uclip <= 0.0) {  // cases 1, 2, 3 and 4\n             if (value >= uclip) {\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_311/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:43:08.108122358 -0500\n@@ -92,7 +92,9 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\tthis.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_311/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:43:08.108122358 -0500\n@@ -107,8 +107,11 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getMean();\n+        double minval = Double.NaN;\n+\t\tif (masd != null) {\n+\t\t\tresult = masd.getStandardDeviation();\n+\t\t}\n+\t\tif (masd != null) {\n         }\n         return result;\n     }\n@@ -123,7 +126,8 @@\n      * @return The value.\n      */\n     public Number getValue(int row, int column) {\n-        return getMeanValue(row, column);\n+        double minval = Double.NaN;\n+\t\treturn getMeanValue(row, column);\n     }\n \n     /**\n@@ -169,10 +173,12 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n+        double sumX = 0;\n+\t\tif (masd != null) {\n             result = masd.getStandardDeviation();\n         }\n-        return result;\n+        double m = 0.0;\n+\t\treturn result;\n     }\n \n     /**\n@@ -270,7 +276,9 @@\n      * @return The column count.\n      */\n     public int getColumnCount() {\n-        return this.data.getColumnCount();\n+        List result = null;\n+\t\tdouble sumXX = 0;\n+\t\treturn this.data.getColumnCount();\n     }\n \n     /**\n@@ -377,16 +385,19 @@\n         Range result = null;\n         if (includeInterval) {\n             if (!Double.isNaN(this.minimumRangeValueIncStdDev) \n-                    && !Double.isNaN(this.maximumRangeValueIncStdDev))\n-            result = new Range(this.minimumRangeValueIncStdDev, \n-                    this.maximumRangeValueIncStdDev);\n+                    && !Double.isNaN(this.maximumRangeValueIncStdDev)) {\n+\t\t\t\tdouble sumX2 = 0.0;\n+\t\t\t\tresult = new Range(this.minimumRangeValueIncStdDev,\n+\t\t\t\t\t\tthis.maximumRangeValueIncStdDev);\n+\t\t\t}\n         }\n         else {\n             if (!Double.isNaN(this.minimumRangeValue) \n                     && !Double.isNaN(this.maximumRangeValue))\n             result = new Range(this.minimumRangeValue, this.maximumRangeValue);            \n         }\n-        return result;\n+        double minval = Double.NaN;\n+\t\treturn result;\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 261, 
          "faulty": "double base=0.0;", 
          "type": "InsertBefore", 
          "seed": "double xx0=domainAxis.getCategoryStart(column,getColumnCount(),dataArea,plot.getDomainAxisEdge());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "Delete", 
          "seed": "this.minimumRangeValueIncStdDev=Double.NaN;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_493/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:44:53.779194077 -0500\n@@ -258,7 +258,9 @@\n         Number meanValue = dataset.getMeanValue(row, column);\n \n         double value = meanValue.doubleValue();\n-        double base = 0.0;\n+        double xx0 = domainAxis.getCategoryStart(column, getColumnCount(),\n+\t\t\t\tdataArea, plot.getDomainAxisEdge());\n+\t\tdouble base = 0.0;\n         double lclip = getLowerClip();\n         double uclip = getUpperClip();\n \n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_493/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:44:53.783194193 -0500\n@@ -107,9 +107,6 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getMean();\n-        }\n         return result;\n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "Composite originalComposite=g2.getComposite();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "Delete", 
          "seed": "double aRadius=0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 208, 
          "faulty": "drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);", 
          "type": "Delete", 
          "seed": "GeneralPath area=new GeneralPath();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 243, 
          "faulty": "double rectY=domainAxis.getCategoryStart(column,getColumnCount(),dataArea,xAxisLocation);", 
          "type": "InsertBefore", 
          "seed": "double y2=dataArea.getMinY();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_330/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:43:20.680487746 -0500\n@@ -201,17 +201,7 @@\n             throw new IllegalArgumentException(\n                 \"Requires StatisticalCategoryDataset.\");\n         }\n-        StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n-\n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n     }\n                 \n     /**\n@@ -239,7 +229,8 @@\n                                      \n         RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n         \n-        // BAR Y\n+        double y2 = dataArea.getMinY();\n+\t\t// BAR Y\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                 dataArea, xAxisLocation);\n \n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_330/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:43:20.684487862 -0500\n@@ -92,7 +92,8 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "Delete", 
          "seed": "this.minimumRangeValueIncStdDev=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 111, 
          "faulty": "result=masd.getMean();", 
          "type": "InsertBefore", 
          "seed": "result=masd.getStandardDeviation();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Replace", 
          "seed": "double xx2=domainAxis.getCategoryEnd(column,getColumnCount(),dataArea,plot.getDomainAxisEdge());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "InsertBefore", 
          "seed": "g2.setStroke(plot.getRangeGridlineStroke());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 243, 
          "faulty": "double rectY=domainAxis.getCategoryStart(column,getColumnCount(),dataArea,xAxisLocation);", 
          "type": "InsertBefore", 
          "seed": "double currentItemMargin=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 104, 
          "faulty": "return this.standardDeviation;", 
          "type": "InsertBefore", 
          "seed": "double sumXX=0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return new Icon(){\n  public void paintIcon(  Component c,  Graphics g,  int x,  int y){\n    Graphics2D g2=(Graphics2D)g;\n    path.transform(AffineTransform.getTranslateInstance(x,y));\n    if (fillPaint != null) {\n      g2.setPaint(fillPaint);\n      g2.fill(path);\n    }\n    if (outlinePaint != null) {\n      g2.setPaint(outlinePaint);\n      g2.draw(path);\n    }\n    path.transform(AffineTransform.getTranslateInstance(-x,-y));\n  }\n  public int getIconWidth(){\n    return width;\n  }\n  public int getIconHeight(){\n    return height;\n  }\n}\n;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "InsertBefore", 
          "seed": "g2.setStroke(plot.getRangeGridlineStroke());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Replace", 
          "seed": "RectangleEdge edge=plot.getRangeAxisEdge();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Replace", 
          "seed": "RectangleEdge edge=plot.getRangeAxisEdge();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 126, 
          "faulty": "return getMeanValue(row,column);", 
          "type": "InsertBefore", 
          "seed": "double maxval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "InsertBefore", 
          "seed": "boolean placed=false;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_619/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:45:57.777054371 -0500\n@@ -201,17 +201,12 @@\n             throw new IllegalArgumentException(\n                 \"Requires StatisticalCategoryDataset.\");\n         }\n-        StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n+        g2.setStroke(plot.getRangeGridlineStroke());\n+\t\tg2.setStroke(plot.getRangeGridlineStroke());\n+\t\tStatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n+        RectangleEdge edge = plot.getRangeAxisEdge();\n     }\n                 \n     /**\n@@ -239,21 +234,13 @@\n                                      \n         RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n         \n-        // BAR Y\n+        double currentItemMargin = 0.0;\n+\t\t// BAR Y\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                 dataArea, xAxisLocation);\n \n         int seriesCount = getRowCount();\n         int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_619/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:45:57.777054371 -0500\n@@ -101,7 +101,8 @@\n      * @return The standard deviation.\n      */\n     public Number getStandardDeviation() {\n-        return this.standardDeviation;\n+        double sumXX = 0;\n+\t\treturn this.standardDeviation;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_619/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:45:57.781054487 -0500\n@@ -107,10 +107,8 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getMean();\n-        }\n-        return result;\n+        boolean placed = false;\n+\t\treturn result;\n     }\n \n     /**\n@@ -123,7 +121,8 @@\n      * @return The value.\n      */\n     public Number getValue(int row, int column) {\n-        return getMeanValue(row, column);\n+        double maxval = Double.NaN;\n+\t\treturn getMeanValue(row, column);\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "Delete", 
          "seed": "this.minimumRangeValueIncStdDev=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "InsertBefore", 
          "seed": "g2.setStroke(plot.getRangeGridlineStroke());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "InsertBefore", 
          "seed": "g2.setStroke(plot.getRangeGridlineStroke());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return new Icon(){\n  public void paintIcon(  Component c,  Graphics g,  int x,  int y){\n    Graphics2D g2=(Graphics2D)g;\n    path.transform(AffineTransform.getTranslateInstance(x,y));\n    if (fillPaint != null) {\n      g2.setPaint(fillPaint);\n      g2.fill(path);\n    }\n    if (outlinePaint != null) {\n      g2.setPaint(outlinePaint);\n      g2.draw(path);\n    }\n    path.transform(AffineTransform.getTranslateInstance(-x,-y));\n  }\n  public int getIconWidth(){\n    return width;\n  }\n  public int getIconHeight(){\n    return height;\n  }\n}\n;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 263, 
          "faulty": "double uclip=getUpperClip();", 
          "type": "InsertBefore", 
          "seed": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "Delete", 
          "seed": "this.minimumRangeValueIncStdDev=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 126, 
          "faulty": "return getMeanValue(row,column);", 
          "type": "InsertBefore", 
          "seed": "double maxval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 169, 
          "faulty": "Number result=null;", 
          "type": "Replace", 
          "seed": "Number result=null;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "InsertBefore", 
          "seed": "Number n=dataset.getValue(row,column);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_601/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:45:48.456783454 -0500\n@@ -201,7 +201,9 @@\n             throw new IllegalArgumentException(\n                 \"Requires StatisticalCategoryDataset.\");\n         }\n-        StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n+        g2.setStroke(plot.getRangeGridlineStroke());\n+\t\tg2.setStroke(plot.getRangeGridlineStroke());\n+\t\tStatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n         if (orientation == PlotOrientation.HORIZONTAL) {\n@@ -245,22 +247,21 @@\n \n         int seriesCount = getRowCount();\n         int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n-        // BAR X\n+        Number n = dataset.getValue(row, column);\n+\t\t// BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n         double value = meanValue.doubleValue();\n         double base = 0.0;\n         double lclip = getLowerClip();\n-        double uclip = getUpperClip();\n+        if (seriesCount > 1) {\n+\t\t\tdouble seriesGap = dataArea.getHeight() * getItemMargin()\n+\t\t\t\t\t/ (categoryCount * (seriesCount - 1));\n+\t\t\trectY = rectY + row * (state.getBarWidth() + seriesGap);\n+\t\t} else {\n+\t\t\trectY = rectY + row * state.getBarWidth();\n+\t\t}\n+\t\tdouble uclip = getUpperClip();\n \n         if (uclip <= 0.0) {  // cases 1, 2, 3 and 4\n             if (value >= uclip) {\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_601/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:45:48.460783569 -0500\n@@ -107,9 +107,6 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getMean();\n-        }\n         return result;\n     }\n \n@@ -123,7 +120,8 @@\n      * @return The value.\n      */\n     public Number getValue(int row, int column) {\n-        return getMeanValue(row, column);\n+        double maxval = Double.NaN;\n+\t\treturn getMeanValue(row, column);\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "Replace", 
          "seed": "double result=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 107, 
          "faulty": "Number result=null;", 
          "type": "InsertBefore", 
          "seed": "this.maximumRangeValue=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "Replace", 
          "seed": "double result=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 107, 
          "faulty": "Number result=null;", 
          "type": "InsertBefore", 
          "seed": "this.maximumRangeValue=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 169, 
          "faulty": "Number result=null;", 
          "type": "InsertBefore", 
          "seed": "double sumX=0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 246, 
          "faulty": "return this.data.getRowKey(row);", 
          "type": "InsertBefore", 
          "seed": "this.minimumRangeValue=Double.NaN;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_85/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:41:00.376414781 -0500\n@@ -204,14 +204,6 @@\n         StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n     }\n                 \n     /**\n@@ -243,17 +235,8 @@\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                 dataArea, xAxisLocation);\n \n-        int seriesCount = getRowCount();\n+        double result = Double.NaN;\n         int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_85/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:41:00.376414781 -0500\n@@ -92,7 +92,9 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\tthis.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_85/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:41:00.380414896 -0500\n@@ -104,7 +104,9 @@\n      * @return The mean value.\n      */\n     public Number getMeanValue(int row, int column) {\n-        Number result = null;\n+        this.maximumRangeValue = Double.NaN;\n+\t\tthis.maximumRangeValue = Double.NaN;\n+\t\tNumber result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n@@ -166,7 +168,8 @@\n      * @return The standard deviation.\n      */\n     public Number getStdDevValue(int row, int column) {\n-        Number result = null;\n+        double sumX = 0;\n+\t\tNumber result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n@@ -243,7 +246,8 @@\n      * @return The row key.\n      */\n     public Comparable getRowKey(int row) {\n-        return this.data.getRowKey(row);\n+        this.minimumRangeValue = Double.NaN;\n+\t\treturn this.data.getRowKey(row);\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "double uclip=getUpperClip();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 200, 
          "faulty": "if (!(data instanceof StatisticalCategoryDataset)) {\n  throw new IllegalArgumentException(\"Requires StatisticalCategoryDataset.\");\n}", 
          "type": "Delete", 
          "seed": "Stroke stroke=plot.getRangeGridlineStroke();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "InsertBefore", 
          "seed": "if (masd != null) {\n  result=masd.getStandardDeviation();\n}"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 111, 
          "faulty": "result=masd.getMean();", 
          "type": "Delete", 
          "seed": "int count=0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 175, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "double m=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 389, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "double minval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Replace", 
          "seed": "setIncludeBaseInRange(false);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 172, 
          "faulty": "if (masd != null) {\n  result=masd.getStandardDeviation();\n}", 
          "type": "InsertBefore", 
          "seed": "double sumX=0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 274, 
          "faulty": "if (lclip <= 0.0) {\n  if (value >= uclip) {\n    value=uclip;\n  }\n else {\n    if (value <= lclip) {\n      value=lclip;\n    }\n  }\n}\n else {\n  if (value <= lclip) {\n    return;\n  }\n  base=getLowerClip();\n  if (value >= uclip) {\n    value=uclip;\n  }\n}", 
          "type": "Delete", 
          "seed": "double yy2=0.0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_321/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:43:14.068295527 -0500\n@@ -196,22 +196,10 @@\n                          int column,\n                          int pass) {\n \n-        // defensive check\n-        if (!(data instanceof StatisticalCategoryDataset)) {\n-            throw new IllegalArgumentException(\n-                \"Requires StatisticalCategoryDataset.\");\n-        }\n         StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n+        setIncludeBaseInRange(false);\n     }\n                 \n     /**\n@@ -245,15 +233,6 @@\n \n         int seriesCount = getRowCount();\n         int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n@@ -270,26 +249,8 @@\n             if (value <= lclip) {\n                 value = lclip;\n             }\n-        }\n-        else if (lclip <= 0.0) { // cases 5, 6, 7 and 8\n-            if (value >= uclip) {\n-                value = uclip;\n-            }\n-            else {\n-                if (value <= lclip) {\n-                    value = lclip;\n-                }\n-            }\n-        }\n-        else { // cases 9, 10, 11 and 12\n-            if (value <= lclip) {\n-                return; // bar is not visible\n-            }\n-            base = getLowerClip();\n-            if (value >= uclip) {\n-               value = uclip;\n-            }\n-        }\n+        } else\n+\t\t\t;\n \n         RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n         double transY1 = rangeAxis.valueToJava2D(base, dataArea, yAxisLocation);\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_321/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:43:14.068295527 -0500\n@@ -92,7 +92,9 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\tthis.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_321/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:43:14.068295527 -0500\n@@ -108,7 +108,9 @@\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n-            result = masd.getMean();\n+\t\t\tresult = masd.getStandardDeviation();\n+\t\t}\n+\t\tif (masd != null) {\n         }\n         return result;\n     }\n@@ -169,10 +171,12 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n+        double sumX = 0;\n+\t\tif (masd != null) {\n             result = masd.getStandardDeviation();\n         }\n-        return result;\n+        double m = 0.0;\n+\t\treturn result;\n     }\n \n     /**\n@@ -377,16 +381,19 @@\n         Range result = null;\n         if (includeInterval) {\n             if (!Double.isNaN(this.minimumRangeValueIncStdDev) \n-                    && !Double.isNaN(this.maximumRangeValueIncStdDev))\n-            result = new Range(this.minimumRangeValueIncStdDev, \n-                    this.maximumRangeValueIncStdDev);\n+                    && !Double.isNaN(this.maximumRangeValueIncStdDev)) {\n+\t\t\t\tdouble sumX2 = 0.0;\n+\t\t\t\tresult = new Range(this.minimumRangeValueIncStdDev,\n+\t\t\t\t\t\tthis.maximumRangeValueIncStdDev);\n+\t\t\t}\n         }\n         else {\n             if (!Double.isNaN(this.minimumRangeValue) \n                     && !Double.isNaN(this.maximumRangeValue))\n             result = new Range(this.minimumRangeValue, this.maximumRangeValue);            \n         }\n-        return result;\n+        double minval = Double.NaN;\n+\t\treturn result;\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 261, 
          "faulty": "double base=0.0;", 
          "type": "InsertBefore", 
          "seed": "double xx0=domainAxis.getCategoryStart(column,getColumnCount(),dataArea,plot.getDomainAxisEdge());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 172, 
          "faulty": "if (masd != null) {\n  result=masd.getStandardDeviation();\n}", 
          "type": "Replace", 
          "seed": "double maxOutlier=Double.NEGATIVE_INFINITY;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 243, 
          "faulty": "double rectY=domainAxis.getCategoryStart(column,getColumnCount(),dataArea,xAxisLocation);", 
          "type": "InsertBefore", 
          "seed": "double y0=dataArea.getMaxY();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "Delete", 
          "seed": "this.minimumRangeValueIncStdDev=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 243, 
          "faulty": "double rectY=domainAxis.getCategoryStart(column,getColumnCount(),dataArea,xAxisLocation);", 
          "type": "InsertBefore", 
          "seed": "double currentItemMargin=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 265, 
          "faulty": "if (uclip <= 0.0) {\n  if (value >= uclip) {\n    return;\n  }\n  base=uclip;\n  if (value <= lclip) {\n    value=lclip;\n  }\n}\n else if (lclip <= 0.0) {\n  if (value >= uclip) {\n    value=uclip;\n  }\n else {\n    if (value <= lclip) {\n      value=lclip;\n    }\n  }\n}\n else {\n  if (value <= lclip) {\n    return;\n  }\n  base=getLowerClip();\n  if (value >= uclip) {\n    value=uclip;\n  }\n}", 
          "type": "Delete", 
          "seed": "LineAndShapeRenderer clone=(LineAndShapeRenderer)super.clone();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_531/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:45:12.903749998 -0500\n@@ -204,14 +204,6 @@\n         StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n     }\n                 \n     /**\n@@ -239,7 +231,9 @@\n                                      \n         RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n         \n-        // BAR Y\n+        double y0 = dataArea.getMaxY();\n+\t\tdouble currentItemMargin = 0.0;\n+\t\t// BAR Y\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                 dataArea, xAxisLocation);\n \n@@ -258,39 +252,12 @@\n         Number meanValue = dataset.getMeanValue(row, column);\n \n         double value = meanValue.doubleValue();\n-        double base = 0.0;\n+        double xx0 = domainAxis.getCategoryStart(column, getColumnCount(),\n+\t\t\t\tdataArea, plot.getDomainAxisEdge());\n+\t\tdouble base = 0.0;\n         double lclip = getLowerClip();\n         double uclip = getUpperClip();\n \n-        if (uclip <= 0.0) {  // cases 1, 2, 3 and 4\n-            if (value >= uclip) {\n-                return; // bar is not visible\n-            }\n-            base = uclip;\n-            if (value <= lclip) {\n-                value = lclip;\n-            }\n-        }\n-        else if (lclip <= 0.0) { // cases 5, 6, 7 and 8\n-            if (value >= uclip) {\n-                value = uclip;\n-            }\n-            else {\n-                if (value <= lclip) {\n-                    value = lclip;\n-                }\n-            }\n-        }\n-        else { // cases 9, 10, 11 and 12\n-            if (value <= lclip) {\n-                return; // bar is not visible\n-            }\n-            base = getLowerClip();\n-            if (value >= uclip) {\n-               value = uclip;\n-            }\n-        }\n-\n         RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n         double transY1 = rangeAxis.valueToJava2D(base, dataArea, yAxisLocation);\n         double transY2 = rangeAxis.valueToJava2D(value, dataArea, \n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_531/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:45:12.907750114 -0500\n@@ -92,7 +92,8 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_531/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:45:12.907750114 -0500\n@@ -107,9 +107,6 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getMean();\n-        }\n         return result;\n     }\n \n@@ -169,9 +166,7 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getStandardDeviation();\n-        }\n+        double maxOutlier = Double.NEGATIVE_INFINITY;\n         return result;\n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 170, 
          "faulty": "MeanAndStandardDeviation masd=(MeanAndStandardDeviation)this.data.getObject(row,column);", 
          "type": "InsertBefore", 
          "seed": "this.minimumRangeValue=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 265, 
          "faulty": "if (uclip <= 0.0) {\n  if (value >= uclip) {\n    return;\n  }\n  base=uclip;\n  if (value <= lclip) {\n    value=lclip;\n  }\n}\n else if (lclip <= 0.0) {\n  if (value >= uclip) {\n    value=uclip;\n  }\n else {\n    if (value <= lclip) {\n      value=lclip;\n    }\n  }\n}\n else {\n  if (value <= lclip) {\n    return;\n  }\n  base=getLowerClip();\n  if (value >= uclip) {\n    value=uclip;\n  }\n}", 
          "type": "Delete", 
          "seed": "int itemCount=dataset.getColumnCount();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 170, 
          "faulty": "MeanAndStandardDeviation masd=(MeanAndStandardDeviation)this.data.getObject(row,column);", 
          "type": "InsertBefore", 
          "seed": "this.minimumRangeValue=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 265, 
          "faulty": "if (uclip <= 0.0) {\n  if (value >= uclip) {\n    return;\n  }\n  base=uclip;\n  if (value <= lclip) {\n    value=lclip;\n  }\n}\n else if (lclip <= 0.0) {\n  if (value >= uclip) {\n    value=uclip;\n  }\n else {\n    if (value <= lclip) {\n      value=lclip;\n    }\n  }\n}\n else {\n  if (value <= lclip) {\n    return;\n  }\n  base=getLowerClip();\n  if (value >= uclip) {\n    value=uclip;\n  }\n}", 
          "type": "Delete", 
          "seed": "int itemCount=dataset.getColumnCount();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 389, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "double m=0.0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_457/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:44:34.282627333 -0500\n@@ -204,14 +204,6 @@\n         StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n     }\n                 \n     /**\n@@ -251,7 +243,6 @@\n             rectY = rectY + row * (state.getBarWidth() + seriesGap);\n         }\n         else {\n-            rectY = rectY + row * state.getBarWidth();\n         }\n \n         // BAR X\n@@ -262,35 +253,6 @@\n         double lclip = getLowerClip();\n         double uclip = getUpperClip();\n \n-        if (uclip <= 0.0) {  // cases 1, 2, 3 and 4\n-            if (value >= uclip) {\n-                return; // bar is not visible\n-            }\n-            base = uclip;\n-            if (value <= lclip) {\n-                value = lclip;\n-            }\n-        }\n-        else if (lclip <= 0.0) { // cases 5, 6, 7 and 8\n-            if (value >= uclip) {\n-                value = uclip;\n-            }\n-            else {\n-                if (value <= lclip) {\n-                    value = lclip;\n-                }\n-            }\n-        }\n-        else { // cases 9, 10, 11 and 12\n-            if (value <= lclip) {\n-                return; // bar is not visible\n-            }\n-            base = getLowerClip();\n-            if (value >= uclip) {\n-               value = uclip;\n-            }\n-        }\n-\n         RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n         double transY1 = rangeAxis.valueToJava2D(base, dataArea, yAxisLocation);\n         double transY2 = rangeAxis.valueToJava2D(value, dataArea, \n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_457/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:44:34.286627451 -0500\n@@ -92,7 +92,12 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_457/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:44:34.290627566 -0500\n@@ -167,7 +167,9 @@\n      */\n     public Number getStdDevValue(int row, int column) {\n         Number result = null;\n-        MeanAndStandardDeviation masd \n+        this.minimumRangeValue = Double.NaN;\n+\t\tthis.minimumRangeValue = Double.NaN;\n+\t\tMeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n             result = masd.getStandardDeviation();\n@@ -377,16 +379,19 @@\n         Range result = null;\n         if (includeInterval) {\n             if (!Double.isNaN(this.minimumRangeValueIncStdDev) \n-                    && !Double.isNaN(this.maximumRangeValueIncStdDev))\n-            result = new Range(this.minimumRangeValueIncStdDev, \n-                    this.maximumRangeValueIncStdDev);\n+                    && !Double.isNaN(this.maximumRangeValueIncStdDev)) {\n+\t\t\t\tdouble sumX2 = 0.0;\n+\t\t\t\tresult = new Range(this.minimumRangeValueIncStdDev,\n+\t\t\t\t\t\tthis.maximumRangeValueIncStdDev);\n+\t\t\t}\n         }\n         else {\n             if (!Double.isNaN(this.minimumRangeValue) \n                     && !Double.isNaN(this.maximumRangeValue))\n             result = new Range(this.minimumRangeValue, this.maximumRangeValue);            \n         }\n-        return result;\n+        double m = 0.0;\n+\t\treturn result;\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "Delete", 
          "seed": "this.minimumRangeValueIncStdDev=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Replace", 
          "seed": "double xx2=domainAxis.getCategoryEnd(column,getColumnCount(),dataArea,plot.getDomainAxisEdge());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 263, 
          "faulty": "double uclip=getUpperClip();", 
          "type": "InsertBefore", 
          "seed": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 126, 
          "faulty": "return getMeanValue(row,column);", 
          "type": "InsertBefore", 
          "seed": "double maxval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "InsertBefore", 
          "seed": "setPositiveItemLabelPositionFallback(null);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_573/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:45:33.952361842 -0500\n@@ -204,7 +204,8 @@\n         StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n+        setPositiveItemLabelPositionFallback(null);\n+\t\tif (orientation == PlotOrientation.HORIZONTAL) {\n             drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n                     rangeAxis, statData, row, column);\n         }\n@@ -245,14 +246,8 @@\n \n         int seriesCount = getRowCount();\n         int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n+        double xx2 = domainAxis.getCategoryEnd(column, getColumnCount(),\n+\t\t\t\tdataArea, plot.getDomainAxisEdge());\n \n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n@@ -260,7 +255,14 @@\n         double value = meanValue.doubleValue();\n         double base = 0.0;\n         double lclip = getLowerClip();\n-        double uclip = getUpperClip();\n+        if (seriesCount > 1) {\n+\t\t\tdouble seriesGap = dataArea.getHeight() * getItemMargin()\n+\t\t\t\t\t/ (categoryCount * (seriesCount - 1));\n+\t\t\trectY = rectY + row * (state.getBarWidth() + seriesGap);\n+\t\t} else {\n+\t\t\trectY = rectY + row * state.getBarWidth();\n+\t\t}\n+\t\tdouble uclip = getUpperClip();\n \n         if (uclip <= 0.0) {  // cases 1, 2, 3 and 4\n             if (value >= uclip) {\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_573/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:45:33.956361958 -0500\n@@ -107,9 +107,6 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getMean();\n-        }\n         return result;\n     }\n \n@@ -123,7 +120,8 @@\n      * @return The value.\n      */\n     public Number getValue(int row, int column) {\n-        return getMeanValue(row, column);\n+        double maxval = Double.NaN;\n+\t\treturn getMeanValue(row, column);\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "double uclip=getUpperClip();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 200, 
          "faulty": "if (!(data instanceof StatisticalCategoryDataset)) {\n  throw new IllegalArgumentException(\"Requires StatisticalCategoryDataset.\");\n}", 
          "type": "Delete", 
          "seed": "Stroke stroke=plot.getRangeGridlineStroke();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "InsertBefore", 
          "seed": "if (masd != null) {\n  result=masd.getStandardDeviation();\n}"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 111, 
          "faulty": "result=masd.getMean();", 
          "type": "Delete", 
          "seed": "int count=0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 175, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "double m=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 389, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "double minval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Replace", 
          "seed": "setIncludeBaseInRange(false);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 273, 
          "faulty": "return this.data.getColumnCount();", 
          "type": "InsertBefore", 
          "seed": "double sumXX=0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 247, 
          "faulty": "int categoryCount=getColumnCount();", 
          "type": "Replace", 
          "seed": "PlotOrientation orient=plot.getOrientation();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "InsertBefore", 
          "seed": "setNegativeItemLabelPositionFallback(null);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "InsertBefore", 
          "seed": "double minval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "Composite originalComposite=g2.getComposite();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "Delete", 
          "seed": "double aRadius=0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 175, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "double y=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "InsertBefore", 
          "seed": "PlotOrientation orient=plot.getOrientation();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 379, 
          "faulty": "if (!Double.isNaN(this.minimumRangeValueIncStdDev) && !Double.isNaN(this.maximumRangeValueIncStdDev)) result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double x=0.0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_370/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:43:41.205084398 -0500\n@@ -196,22 +196,8 @@\n                          int column,\n                          int pass) {\n \n-        // defensive check\n-        if (!(data instanceof StatisticalCategoryDataset)) {\n-            throw new IllegalArgumentException(\n-                \"Requires StatisticalCategoryDataset.\");\n-        }\n-        StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n-\n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n+        PlotOrientation orient = plot.getOrientation();\n     }\n                 \n     /**\n@@ -243,17 +229,9 @@\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                 dataArea, xAxisLocation);\n \n-        int seriesCount = getRowCount();\n-        int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n+        setNegativeItemLabelPositionFallback(null);\n+\t\tint seriesCount = getRowCount();\n+        PlotOrientation orient = plot.getOrientation();\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_370/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:43:41.209084514 -0500\n@@ -108,7 +108,10 @@\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n-            result = masd.getMean();\n+\t\t\tresult = masd.getStandardDeviation();\n+\t\t}\n+\t\tdouble minval = Double.NaN;\n+\t\tif (masd != null) {\n         }\n         return result;\n     }\n@@ -172,7 +175,9 @@\n         if (masd != null) {\n             result = masd.getStandardDeviation();\n         }\n-        return result;\n+        double m = 0.0;\n+\t\tdouble y = 0.0;\n+\t\treturn result;\n     }\n \n     /**\n@@ -270,7 +275,8 @@\n      * @return The column count.\n      */\n     public int getColumnCount() {\n-        return this.data.getColumnCount();\n+        double sumXX = 0;\n+\t\treturn this.data.getColumnCount();\n     }\n \n     /**\n@@ -376,17 +382,21 @@\n     public Range getRangeBounds(boolean includeInterval) {\n         Range result = null;\n         if (includeInterval) {\n-            if (!Double.isNaN(this.minimumRangeValueIncStdDev) \n-                    && !Double.isNaN(this.maximumRangeValueIncStdDev))\n-            result = new Range(this.minimumRangeValueIncStdDev, \n-                    this.maximumRangeValueIncStdDev);\n+            double x = 0.0;\n+\t\t\tif (!Double.isNaN(this.minimumRangeValueIncStdDev) \n+                    && !Double.isNaN(this.maximumRangeValueIncStdDev)) {\n+\t\t\t\tdouble sumX2 = 0.0;\n+\t\t\t\tresult = new Range(this.minimumRangeValueIncStdDev,\n+\t\t\t\t\t\tthis.maximumRangeValueIncStdDev);\n+\t\t\t}\n         }\n         else {\n             if (!Double.isNaN(this.minimumRangeValue) \n                     && !Double.isNaN(this.maximumRangeValue))\n             result = new Range(this.minimumRangeValue, this.maximumRangeValue);            \n         }\n-        return result;\n+        double minval = Double.NaN;\n+\t\treturn result;\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "Delete", 
          "seed": "this.minimumRangeValueIncStdDev=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 111, 
          "faulty": "result=masd.getMean();", 
          "type": "InsertBefore", 
          "seed": "result=masd.getStandardDeviation();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Replace", 
          "seed": "double xx2=domainAxis.getCategoryEnd(column,getColumnCount(),dataArea,plot.getDomainAxisEdge());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "InsertBefore", 
          "seed": "g2.setStroke(plot.getRangeGridlineStroke());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "InsertBefore", 
          "seed": "g2.setStroke(plot.getRangeGridlineStroke());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return new Icon(){\n  public void paintIcon(  Component c,  Graphics g,  int x,  int y){\n    Graphics2D g2=(Graphics2D)g;\n    path.transform(AffineTransform.getTranslateInstance(x,y));\n    if (fillPaint != null) {\n      g2.setPaint(fillPaint);\n      g2.fill(path);\n    }\n    if (outlinePaint != null) {\n      g2.setPaint(outlinePaint);\n      g2.draw(path);\n    }\n    path.transform(AffineTransform.getTranslateInstance(-x,-y));\n  }\n  public int getIconWidth(){\n    return width;\n  }\n  public int getIconHeight(){\n    return height;\n  }\n}\n;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 263, 
          "faulty": "double uclip=getUpperClip();", 
          "type": "InsertBefore", 
          "seed": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "Delete", 
          "seed": "this.minimumRangeValueIncStdDev=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "InsertBefore", 
          "seed": "g2.setStroke(plot.getRangeGridlineStroke());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 243, 
          "faulty": "double rectY=domainAxis.getCategoryStart(column,getColumnCount(),dataArea,xAxisLocation);", 
          "type": "InsertBefore", 
          "seed": "double currentItemMargin=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 104, 
          "faulty": "return this.standardDeviation;", 
          "type": "InsertBefore", 
          "seed": "double sumXX=0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return new Icon(){\n  public void paintIcon(  Component c,  Graphics g,  int x,  int y){\n    Graphics2D g2=(Graphics2D)g;\n    path.transform(AffineTransform.getTranslateInstance(x,y));\n    if (fillPaint != null) {\n      g2.setPaint(fillPaint);\n      g2.fill(path);\n    }\n    if (outlinePaint != null) {\n      g2.setPaint(outlinePaint);\n      g2.draw(path);\n    }\n    path.transform(AffineTransform.getTranslateInstance(-x,-y));\n  }\n  public int getIconWidth(){\n    return width;\n  }\n  public int getIconHeight(){\n    return height;\n  }\n}\n;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 263, 
          "faulty": "double uclip=getUpperClip();", 
          "type": "InsertBefore", 
          "seed": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 126, 
          "faulty": "return getMeanValue(row,column);", 
          "type": "InsertBefore", 
          "seed": "double maxval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 169, 
          "faulty": "Number result=null;", 
          "type": "InsertBefore", 
          "seed": "int count=0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 243, 
          "faulty": "double rectY=domainAxis.getCategoryStart(column,getColumnCount(),dataArea,xAxisLocation);", 
          "type": "InsertBefore", 
          "seed": "g2.setStroke(getItemOutlineStroke(row,column));"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 246, 
          "faulty": "return this.data.getRowKey(row);", 
          "type": "InsertBefore", 
          "seed": "double x=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 173, 
          "faulty": "result=masd.getStandardDeviation();", 
          "type": "Replace", 
          "seed": "result=masd.getMean();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 172, 
          "faulty": "if (masd != null) {\n  result=masd.getStandardDeviation();\n}", 
          "type": "Delete", 
          "seed": "if (masd != null) {\n  result=masd.getMean();\n}"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "double barW0=domainAxis.getCategoryStart(column,getColumnCount(),dataArea,plot.getDomainAxisEdge());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Replace", 
          "seed": "String urlText=null;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 126, 
          "faulty": "return getMeanValue(row,column);", 
          "type": "InsertBefore", 
          "seed": "this.minimumRangeValueIncStdDev=Double.NaN;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_636/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:46:05.617282266 -0500\n@@ -201,7 +201,10 @@\n             throw new IllegalArgumentException(\n                 \"Requires StatisticalCategoryDataset.\");\n         }\n-        StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n+        g2.setStroke(plot.getRangeGridlineStroke());\n+\t\tg2.setStroke(plot.getRangeGridlineStroke());\n+\t\tg2.setStroke(plot.getRangeGridlineStroke());\n+\t\tStatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n         if (orientation == PlotOrientation.HORIZONTAL) {\n@@ -239,20 +242,15 @@\n                                      \n         RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n         \n-        // BAR Y\n+        double currentItemMargin = 0.0;\n+\t\tg2.setStroke(getItemOutlineStroke(row, column));\n+\t\t// BAR Y\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                 dataArea, xAxisLocation);\n \n         int seriesCount = getRowCount();\n         int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n+        String urlText = null;\n \n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n@@ -260,7 +258,21 @@\n         double value = meanValue.doubleValue();\n         double base = 0.0;\n         double lclip = getLowerClip();\n-        double uclip = getUpperClip();\n+        if (seriesCount > 1) {\n+\t\t\tdouble seriesGap = dataArea.getHeight() * getItemMargin()\n+\t\t\t\t\t/ (categoryCount * (seriesCount - 1));\n+\t\t\trectY = rectY + row * (state.getBarWidth() + seriesGap);\n+\t\t} else {\n+\t\t\trectY = rectY + row * state.getBarWidth();\n+\t\t}\n+\t\tif (seriesCount > 1) {\n+\t\t\tdouble seriesGap = dataArea.getHeight() * getItemMargin()\n+\t\t\t\t\t/ (categoryCount * (seriesCount - 1));\n+\t\t\trectY = rectY + row * (state.getBarWidth() + seriesGap);\n+\t\t} else {\n+\t\t\trectY = rectY + row * state.getBarWidth();\n+\t\t}\n+\t\tdouble uclip = getUpperClip();\n \n         if (uclip <= 0.0) {  // cases 1, 2, 3 and 4\n             if (value >= uclip) {\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_636/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:46:05.621282383 -0500\n@@ -101,7 +101,8 @@\n      * @return The standard deviation.\n      */\n     public Number getStandardDeviation() {\n-        return this.standardDeviation;\n+        double sumXX = 0;\n+\t\treturn this.standardDeviation;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_636/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:46:05.621282383 -0500\n@@ -107,9 +107,6 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getMean();\n-        }\n         return result;\n     }\n \n@@ -123,7 +120,9 @@\n      * @return The value.\n      */\n     public Number getValue(int row, int column) {\n-        return getMeanValue(row, column);\n+        double maxval = Double.NaN;\n+\t\tthis.minimumRangeValueIncStdDev = Double.NaN;\n+\t\treturn getMeanValue(row, column);\n     }\n \n     /**\n@@ -166,12 +165,10 @@\n      * @return The standard deviation.\n      */\n     public Number getStdDevValue(int row, int column) {\n-        Number result = null;\n+        int count = 0;\n+\t\tNumber result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getStandardDeviation();\n-        }\n         return result;\n     }\n \n@@ -243,7 +240,8 @@\n      * @return The row key.\n      */\n     public Comparable getRowKey(int row) {\n-        return this.data.getRowKey(row);\n+        double x = 0.0;\n+\t\treturn this.data.getRowKey(row);\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 258, 
          "faulty": "Number meanValue=dataset.getMeanValue(row,column);", 
          "type": "InsertBefore", 
          "seed": "Line2D line2=null;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 215, 
          "faulty": "return this.data.getColumnKey(column);", 
          "type": "InsertBefore", 
          "seed": "double result=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "RectangleEdge xAxisLocation=plot.getDomainAxisEdge();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_69/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:40:52.032172568 -0500\n@@ -204,14 +204,6 @@\n         StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n     }\n                 \n     /**\n@@ -245,16 +237,8 @@\n \n         int seriesCount = getRowCount();\n         int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n-        // BAR X\n+        Line2D line2 = null;\n+\t\t// BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n         double value = meanValue.doubleValue();\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_69/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:40:52.036172685 -0500\n@@ -92,7 +92,9 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\tthis.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_69/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:40:52.036172685 -0500\n@@ -212,7 +212,8 @@\n      * @return The column key.\n      */\n     public Comparable getColumnKey(int column) {\n-        return this.data.getColumnKey(column);\n+        double result = Double.NaN;\n+\t\treturn this.data.getColumnKey(column);\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 170, 
          "faulty": "MeanAndStandardDeviation masd=(MeanAndStandardDeviation)this.data.getObject(row,column);", 
          "type": "InsertBefore", 
          "seed": "double minRegularValue=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "Replace", 
          "seed": "double result=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 107, 
          "faulty": "Number result=null;", 
          "type": "InsertBefore", 
          "seed": "this.maximumRangeValue=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 169, 
          "faulty": "Number result=null;", 
          "type": "InsertBefore", 
          "seed": "double sumX=0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 246, 
          "faulty": "return this.data.getRowKey(row);", 
          "type": "InsertBefore", 
          "seed": "this.minimumRangeValue=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "Delete", 
          "seed": "GanttCategoryDataset gcd=(GanttCategoryDataset)dataset;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 175, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "double minOutlier=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 206, 
          "faulty": "PlotOrientation orientation=plot.getOrientation();", 
          "type": "InsertBefore", 
          "seed": "double y0=0.0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_116/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:41:18.712947040 -0500\n@@ -203,15 +203,8 @@\n         }\n         StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n-        PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n+        double y0 = 0.0;\n+\t\tPlotOrientation orientation = plot.getOrientation();\n     }\n                 \n     /**\n@@ -243,17 +236,7 @@\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                 dataArea, xAxisLocation);\n \n-        int seriesCount = getRowCount();\n         int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_116/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:41:18.716947156 -0500\n@@ -92,7 +92,10 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_116/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:41:18.720947272 -0500\n@@ -104,7 +104,8 @@\n      * @return The mean value.\n      */\n     public Number getMeanValue(int row, int column) {\n-        Number result = null;\n+        this.maximumRangeValue = Double.NaN;\n+\t\tNumber result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n@@ -166,13 +167,16 @@\n      * @return The standard deviation.\n      */\n     public Number getStdDevValue(int row, int column) {\n-        Number result = null;\n-        MeanAndStandardDeviation masd \n+        double sumX = 0;\n+\t\tNumber result = null;\n+        double minRegularValue = Double.POSITIVE_INFINITY;\n+\t\tMeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n             result = masd.getStandardDeviation();\n         }\n-        return result;\n+        double minOutlier = Double.POSITIVE_INFINITY;\n+\t\treturn result;\n     }\n \n     /**\n@@ -243,7 +247,8 @@\n      * @return The row key.\n      */\n     public Comparable getRowKey(int row) {\n-        return this.data.getRowKey(row);\n+        this.minimumRangeValue = Double.NaN;\n+\t\treturn this.data.getRowKey(row);\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 246, 
          "faulty": "return this.data.getRowKey(row);", 
          "type": "InsertBefore", 
          "seed": "this.minimumRangeValue=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 265, 
          "faulty": "if (uclip <= 0.0) {\n  if (value >= uclip) {\n    return;\n  }\n  base=uclip;\n  if (value <= lclip) {\n    value=lclip;\n  }\n}\n else if (lclip <= 0.0) {\n  if (value >= uclip) {\n    value=uclip;\n  }\n else {\n    if (value <= lclip) {\n      value=lclip;\n    }\n  }\n}\n else {\n  if (value <= lclip) {\n    return;\n  }\n  base=getLowerClip();\n  if (value >= uclip) {\n    value=uclip;\n  }\n}", 
          "type": "Replace", 
          "seed": "double previous=state.getSeriesRunningTotal();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 200, 
          "faulty": "if (!(data instanceof StatisticalCategoryDataset)) {\n  throw new IllegalArgumentException(\"Requires StatisticalCategoryDataset.\");\n}", 
          "type": "InsertBefore", 
          "seed": "plot.drawBackground(g2,dataArea);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 108, 
          "faulty": "MeanAndStandardDeviation masd=(MeanAndStandardDeviation)this.data.getObject(row,column);", 
          "type": "InsertBefore", 
          "seed": "double maxRegularValue=Double.NEGATIVE_INFINITY;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "InsertBefore", 
          "seed": "int series=0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "InsertBefore", 
          "seed": "RectangleEdge location=plot.getRangeAxisEdge();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_153/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:41:40.381576012 -0500\n@@ -196,22 +196,16 @@\n                          int column,\n                          int pass) {\n \n-        // defensive check\n+        plot.drawBackground(g2, dataArea);\n+\t\t// defensive check\n         if (!(data instanceof StatisticalCategoryDataset)) {\n             throw new IllegalArgumentException(\n                 \"Requires StatisticalCategoryDataset.\");\n         }\n-        StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n+        int series = 0;\n+\t\tStatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n     }\n                 \n     /**\n@@ -243,7 +237,8 @@\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                 dataArea, xAxisLocation);\n \n-        int seriesCount = getRowCount();\n+        RectangleEdge location = plot.getRangeAxisEdge();\n+\t\tint seriesCount = getRowCount();\n         int categoryCount = getColumnCount();\n         if (seriesCount > 1) {\n             double seriesGap = dataArea.getHeight() * getItemMargin()\n@@ -251,7 +246,6 @@\n             rectY = rectY + row * (state.getBarWidth() + seriesGap);\n         }\n         else {\n-            rectY = rectY + row * state.getBarWidth();\n         }\n \n         // BAR X\n@@ -262,34 +256,7 @@\n         double lclip = getLowerClip();\n         double uclip = getUpperClip();\n \n-        if (uclip <= 0.0) {  // cases 1, 2, 3 and 4\n-            if (value >= uclip) {\n-                return; // bar is not visible\n-            }\n-            base = uclip;\n-            if (value <= lclip) {\n-                value = lclip;\n-            }\n-        }\n-        else if (lclip <= 0.0) { // cases 5, 6, 7 and 8\n-            if (value >= uclip) {\n-                value = uclip;\n-            }\n-            else {\n-                if (value <= lclip) {\n-                    value = lclip;\n-                }\n-            }\n-        }\n-        else { // cases 9, 10, 11 and 12\n-            if (value <= lclip) {\n-                return; // bar is not visible\n-            }\n-            base = getLowerClip();\n-            if (value >= uclip) {\n-               value = uclip;\n-            }\n-        }\n+        double previous = state.getSeriesRunningTotal();\n \n         RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n         double transY1 = rangeAxis.valueToJava2D(base, dataArea, yAxisLocation);\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_153/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:41:40.385576128 -0500\n@@ -92,7 +92,8 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_153/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:41:40.385576128 -0500\n@@ -105,7 +105,8 @@\n      */\n     public Number getMeanValue(int row, int column) {\n         Number result = null;\n-        MeanAndStandardDeviation masd \n+        double maxRegularValue = Double.NEGATIVE_INFINITY;\n+\t\tMeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n             result = masd.getMean();\n@@ -243,7 +244,8 @@\n      * @return The row key.\n      */\n     public Comparable getRowKey(int row) {\n-        return this.data.getRowKey(row);\n+        this.minimumRangeValue = Double.NaN;\n+\t\treturn this.data.getRowKey(row);\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "InsertBefore", 
          "seed": "PlotOrientation orient=plot.getOrientation();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 379, 
          "faulty": "if (!Double.isNaN(this.minimumRangeValueIncStdDev) && !Double.isNaN(this.maximumRangeValueIncStdDev)) result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double x=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 170, 
          "faulty": "MeanAndStandardDeviation masd=(MeanAndStandardDeviation)this.data.getObject(row,column);", 
          "type": "InsertBefore", 
          "seed": "this.minimumRangeValue=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 111, 
          "faulty": "result=masd.getMean();", 
          "type": "Delete", 
          "seed": "double maxRegularValue=Double.NEGATIVE_INFINITY;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_427/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:44:18.738175471 -0500\n@@ -204,14 +204,7 @@\n         StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n+        PlotOrientation orient = plot.getOrientation();\n     }\n                 \n     /**\n@@ -251,7 +244,6 @@\n             rectY = rectY + row * (state.getBarWidth() + seriesGap);\n         }\n         else {\n-            rectY = rectY + row * state.getBarWidth();\n         }\n \n         // BAR X\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_427/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:44:18.738175471 -0500\n@@ -108,7 +108,6 @@\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n-            result = masd.getMean();\n         }\n         return result;\n     }\n@@ -167,7 +166,8 @@\n      */\n     public Number getStdDevValue(int row, int column) {\n         Number result = null;\n-        MeanAndStandardDeviation masd \n+        this.minimumRangeValue = Double.NaN;\n+\t\tMeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n             result = masd.getStandardDeviation();\n@@ -376,7 +376,8 @@\n     public Range getRangeBounds(boolean includeInterval) {\n         Range result = null;\n         if (includeInterval) {\n-            if (!Double.isNaN(this.minimumRangeValueIncStdDev) \n+            double x = 0.0;\n+\t\t\tif (!Double.isNaN(this.minimumRangeValueIncStdDev) \n                     && !Double.isNaN(this.maximumRangeValueIncStdDev))\n             result = new Range(this.minimumRangeValueIncStdDev, \n                     this.maximumRangeValueIncStdDev);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 273, 
          "faulty": "return this.data.getColumnCount();", 
          "type": "InsertBefore", 
          "seed": "List result=null;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 126, 
          "faulty": "return getMeanValue(row,column);", 
          "type": "InsertBefore", 
          "seed": "double minval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "int count=dataset.getColumnCount();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 200, 
          "faulty": "if (!(data instanceof StatisticalCategoryDataset)) {\n  throw new IllegalArgumentException(\"Requires StatisticalCategoryDataset.\");\n}", 
          "type": "Delete", 
          "seed": "Stroke stroke=plot.getRangeGridlineStroke();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "InsertBefore", 
          "seed": "if (masd != null) {\n  result=masd.getStandardDeviation();\n}"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 111, 
          "faulty": "result=masd.getMean();", 
          "type": "Delete", 
          "seed": "int count=0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 389, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "double min=Double.MAX_VALUE;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 215, 
          "faulty": "return this.data.getColumnKey(column);", 
          "type": "InsertBefore", 
          "seed": "double min=Double.MAX_VALUE;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_317/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:43:11.964234360 -0500\n@@ -196,22 +196,9 @@\n                          int column,\n                          int pass) {\n \n-        // defensive check\n-        if (!(data instanceof StatisticalCategoryDataset)) {\n-            throw new IllegalArgumentException(\n-                \"Requires StatisticalCategoryDataset.\");\n-        }\n         StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n     }\n                 \n     /**\n@@ -245,15 +232,6 @@\n \n         int seriesCount = getRowCount();\n         int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_317/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:43:11.968234476 -0500\n@@ -92,7 +92,9 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\tthis.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_317/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:43:11.968234476 -0500\n@@ -108,7 +108,9 @@\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n-            result = masd.getMean();\n+\t\t\tresult = masd.getStandardDeviation();\n+\t\t}\n+\t\tif (masd != null) {\n         }\n         return result;\n     }\n@@ -123,7 +125,8 @@\n      * @return The value.\n      */\n     public Number getValue(int row, int column) {\n-        return getMeanValue(row, column);\n+        double minval = Double.NaN;\n+\t\treturn getMeanValue(row, column);\n     }\n \n     /**\n@@ -212,7 +215,8 @@\n      * @return The column key.\n      */\n     public Comparable getColumnKey(int column) {\n-        return this.data.getColumnKey(column);\n+        double min = Double.MAX_VALUE;\n+\t\treturn this.data.getColumnKey(column);\n     }\n \n     /**\n@@ -270,7 +274,8 @@\n      * @return The column count.\n      */\n     public int getColumnCount() {\n-        return this.data.getColumnCount();\n+        List result = null;\n+\t\treturn this.data.getColumnCount();\n     }\n \n     /**\n@@ -377,16 +382,19 @@\n         Range result = null;\n         if (includeInterval) {\n             if (!Double.isNaN(this.minimumRangeValueIncStdDev) \n-                    && !Double.isNaN(this.maximumRangeValueIncStdDev))\n-            result = new Range(this.minimumRangeValueIncStdDev, \n-                    this.maximumRangeValueIncStdDev);\n+                    && !Double.isNaN(this.maximumRangeValueIncStdDev)) {\n+\t\t\t\tdouble sumX2 = 0.0;\n+\t\t\t\tresult = new Range(this.minimumRangeValueIncStdDev,\n+\t\t\t\t\t\tthis.maximumRangeValueIncStdDev);\n+\t\t\t}\n         }\n         else {\n             if (!Double.isNaN(this.minimumRangeValue) \n                     && !Double.isNaN(this.maximumRangeValue))\n             result = new Range(this.minimumRangeValue, this.maximumRangeValue);            \n         }\n-        return result;\n+        double min = Double.MAX_VALUE;\n+\t\treturn result;\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 273, 
          "faulty": "return this.data.getColumnCount();", 
          "type": "InsertBefore", 
          "seed": "List result=null;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 126, 
          "faulty": "return getMeanValue(row,column);", 
          "type": "InsertBefore", 
          "seed": "double minval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "int count=dataset.getColumnCount();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 108, 
          "faulty": "MeanAndStandardDeviation masd=(MeanAndStandardDeviation)this.data.getObject(row,column);", 
          "type": "InsertBefore", 
          "seed": "double m=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "double y2=0.0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_244/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:42:30.235023072 -0500\n@@ -204,14 +204,6 @@\n         StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n     }\n                 \n     /**\n@@ -251,7 +243,6 @@\n             rectY = rectY + row * (state.getBarWidth() + seriesGap);\n         }\n         else {\n-            rectY = rectY + row * state.getBarWidth();\n         }\n \n         // BAR X\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_244/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:42:30.239023188 -0500\n@@ -105,7 +105,8 @@\n      */\n     public Number getMeanValue(int row, int column) {\n         Number result = null;\n-        MeanAndStandardDeviation masd \n+        double m = 0.0;\n+\t\tMeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n             result = masd.getMean();\n@@ -123,7 +124,8 @@\n      * @return The value.\n      */\n     public Number getValue(int row, int column) {\n-        return getMeanValue(row, column);\n+        double minval = Double.NaN;\n+\t\treturn getMeanValue(row, column);\n     }\n \n     /**\n@@ -270,7 +272,8 @@\n      * @return The column count.\n      */\n     public int getColumnCount() {\n-        return this.data.getColumnCount();\n+        List result = null;\n+\t\treturn this.data.getColumnCount();\n     }\n \n     /**\n@@ -377,9 +380,11 @@\n         Range result = null;\n         if (includeInterval) {\n             if (!Double.isNaN(this.minimumRangeValueIncStdDev) \n-                    && !Double.isNaN(this.maximumRangeValueIncStdDev))\n-            result = new Range(this.minimumRangeValueIncStdDev, \n-                    this.maximumRangeValueIncStdDev);\n+                    && !Double.isNaN(this.maximumRangeValueIncStdDev)) {\n+\t\t\t\tdouble sumX2 = 0.0;\n+\t\t\t\tresult = new Range(this.minimumRangeValueIncStdDev,\n+\t\t\t\t\t\tthis.maximumRangeValueIncStdDev);\n+\t\t\t}\n         }\n         else {\n             if (!Double.isNaN(this.minimumRangeValue) \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 172, 
          "faulty": "if (masd != null) {\n  result=masd.getStandardDeviation();\n}", 
          "type": "InsertBefore", 
          "seed": "double sumX=0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 274, 
          "faulty": "if (lclip <= 0.0) {\n  if (value >= uclip) {\n    value=uclip;\n  }\n else {\n    if (value <= lclip) {\n      value=lclip;\n    }\n  }\n}\n else {\n  if (value <= lclip) {\n    return;\n  }\n  base=getLowerClip();\n  if (value >= uclip) {\n    value=uclip;\n  }\n}", 
          "type": "Delete", 
          "seed": "double yy2=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 108, 
          "faulty": "MeanAndStandardDeviation masd=(MeanAndStandardDeviation)this.data.getObject(row,column);", 
          "type": "InsertBefore", 
          "seed": "double sumY=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 126, 
          "faulty": "return getMeanValue(row,column);", 
          "type": "Replace", 
          "seed": "return 1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_381/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:43:49.121314522 -0500\n@@ -204,14 +204,6 @@\n         StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n     }\n                 \n     /**\n@@ -245,15 +237,6 @@\n \n         int seriesCount = getRowCount();\n         int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n@@ -270,26 +253,8 @@\n             if (value <= lclip) {\n                 value = lclip;\n             }\n-        }\n-        else if (lclip <= 0.0) { // cases 5, 6, 7 and 8\n-            if (value >= uclip) {\n-                value = uclip;\n-            }\n-            else {\n-                if (value <= lclip) {\n-                    value = lclip;\n-                }\n-            }\n-        }\n-        else { // cases 9, 10, 11 and 12\n-            if (value <= lclip) {\n-                return; // bar is not visible\n-            }\n-            base = getLowerClip();\n-            if (value >= uclip) {\n-               value = uclip;\n-            }\n-        }\n+        } else\n+\t\t\t;\n \n         RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n         double transY1 = rangeAxis.valueToJava2D(base, dataArea, yAxisLocation);\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_381/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:43:49.125314638 -0500\n@@ -92,7 +92,11 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_381/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:43:49.125314638 -0500\n@@ -105,7 +105,8 @@\n      */\n     public Number getMeanValue(int row, int column) {\n         Number result = null;\n-        MeanAndStandardDeviation masd \n+        double sumY = 0.0;\n+\t\tMeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n             result = masd.getMean();\n@@ -123,7 +124,7 @@\n      * @return The value.\n      */\n     public Number getValue(int row, int column) {\n-        return getMeanValue(row, column);\n+        return 1;\n     }\n \n     /**\n@@ -169,7 +170,8 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n+        double sumX = 0;\n+\t\tif (masd != null) {\n             result = masd.getStandardDeviation();\n         }\n         return result;\n@@ -377,9 +379,11 @@\n         Range result = null;\n         if (includeInterval) {\n             if (!Double.isNaN(this.minimumRangeValueIncStdDev) \n-                    && !Double.isNaN(this.maximumRangeValueIncStdDev))\n-            result = new Range(this.minimumRangeValueIncStdDev, \n-                    this.maximumRangeValueIncStdDev);\n+                    && !Double.isNaN(this.maximumRangeValueIncStdDev)) {\n+\t\t\t\tdouble sumX2 = 0.0;\n+\t\t\t\tresult = new Range(this.minimumRangeValueIncStdDev,\n+\t\t\t\t\t\tthis.maximumRangeValueIncStdDev);\n+\t\t\t}\n         }\n         else {\n             if (!Double.isNaN(this.minimumRangeValue) \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 273, 
          "faulty": "return this.data.getColumnCount();", 
          "type": "InsertBefore", 
          "seed": "List result=null;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 108, 
          "faulty": "MeanAndStandardDeviation masd=(MeanAndStandardDeviation)this.data.getObject(row,column);", 
          "type": "InsertBefore", 
          "seed": "double m=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "double y2=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 200, 
          "faulty": "if (!(data instanceof StatisticalCategoryDataset)) {\n  throw new IllegalArgumentException(\"Requires StatisticalCategoryDataset.\");\n}", 
          "type": "InsertBefore", 
          "seed": "double positiveBase=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 126, 
          "faulty": "return getMeanValue(row,column);", 
          "type": "InsertBefore", 
          "seed": "double minval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "Replace", 
          "seed": "double sum=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 243, 
          "faulty": "double rectY=domainAxis.getCategoryStart(column,getColumnCount(),dataArea,xAxisLocation);", 
          "type": "InsertBefore", 
          "seed": "CategoryPlot p=getPlot();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 113, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "if (masd != null) {\n  result=masd.getStandardDeviation();\n}"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "InsertBefore", 
          "seed": "setNegativeItemLabelPositionFallback(null);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "InsertBefore", 
          "seed": "double minval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 263, 
          "faulty": "double uclip=getUpperClip();", 
          "type": "InsertBefore", 
          "seed": "if (value <= lclip) {\n  value=lclip;\n}"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "double uclip=getUpperClip();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 200, 
          "faulty": "if (!(data instanceof StatisticalCategoryDataset)) {\n  throw new IllegalArgumentException(\"Requires StatisticalCategoryDataset.\");\n}", 
          "type": "Delete", 
          "seed": "Stroke stroke=plot.getRangeGridlineStroke();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "InsertBefore", 
          "seed": "if (masd != null) {\n  result=masd.getStandardDeviation();\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_291/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:42:57.035800982 -0500\n@@ -196,22 +196,10 @@\n                          int column,\n                          int pass) {\n \n-        // defensive check\n-        if (!(data instanceof StatisticalCategoryDataset)) {\n-            throw new IllegalArgumentException(\n-                \"Requires StatisticalCategoryDataset.\");\n-        }\n-        StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n+        double positiveBase = 0.0;\n+\t\tStatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n     }\n                 \n     /**\n@@ -239,28 +227,24 @@\n                                      \n         RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n         \n-        // BAR Y\n+        CategoryPlot p = getPlot();\n+\t\t// BAR Y\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                 dataArea, xAxisLocation);\n \n-        int seriesCount = getRowCount();\n+        setNegativeItemLabelPositionFallback(null);\n+\t\tint seriesCount = getRowCount();\n         int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n         double value = meanValue.doubleValue();\n         double base = 0.0;\n         double lclip = getLowerClip();\n-        double uclip = getUpperClip();\n+        if (value <= lclip) {\n+\t\t\tvalue = lclip;\n+\t\t}\n+\t\tdouble uclip = getUpperClip();\n \n         if (uclip <= 0.0) {  // cases 1, 2, 3 and 4\n             if (value >= uclip) {\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_291/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:42:57.035800982 -0500\n@@ -92,7 +92,12 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_291/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:42:57.039801098 -0500\n@@ -105,12 +105,18 @@\n      */\n     public Number getMeanValue(int row, int column) {\n         Number result = null;\n-        MeanAndStandardDeviation masd \n+        double m = 0.0;\n+\t\tMeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n+        double minval = Double.NaN;\n+\t\tif (masd != null) {\n+\t\t\tresult = masd.getStandardDeviation();\n+\t\t}\n+\t\tdouble sum = 0.0;\n         if (masd != null) {\n-            result = masd.getMean();\n-        }\n-        return result;\n+\t\t\tresult = masd.getStandardDeviation();\n+\t\t}\n+\t\treturn result;\n     }\n \n     /**\n@@ -123,7 +129,8 @@\n      * @return The value.\n      */\n     public Number getValue(int row, int column) {\n-        return getMeanValue(row, column);\n+        double minval = Double.NaN;\n+\t\treturn getMeanValue(row, column);\n     }\n \n     /**\n@@ -270,7 +277,8 @@\n      * @return The column count.\n      */\n     public int getColumnCount() {\n-        return this.data.getColumnCount();\n+        List result = null;\n+\t\treturn this.data.getColumnCount();\n     }\n \n     /**\n@@ -377,9 +385,11 @@\n         Range result = null;\n         if (includeInterval) {\n             if (!Double.isNaN(this.minimumRangeValueIncStdDev) \n-                    && !Double.isNaN(this.maximumRangeValueIncStdDev))\n-            result = new Range(this.minimumRangeValueIncStdDev, \n-                    this.maximumRangeValueIncStdDev);\n+                    && !Double.isNaN(this.maximumRangeValueIncStdDev)) {\n+\t\t\t\tdouble sumX2 = 0.0;\n+\t\t\t\tresult = new Range(this.minimumRangeValueIncStdDev,\n+\t\t\t\t\t\tthis.maximumRangeValueIncStdDev);\n+\t\t\t}\n         }\n         else {\n             if (!Double.isNaN(this.minimumRangeValue) \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 107, 
          "faulty": "Number result=null;", 
          "type": "InsertBefore", 
          "seed": "this.maximumRangeValue=Double.NaN;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_36/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:40:30.635551474 -0500\n@@ -204,14 +204,6 @@\n         StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n     }\n                 \n     /**\n@@ -245,15 +237,6 @@\n \n         int seriesCount = getRowCount();\n         int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_36/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:40:30.639551590 -0500\n@@ -92,7 +92,8 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_36/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:40:30.639551590 -0500\n@@ -104,7 +104,8 @@\n      * @return The mean value.\n      */\n     public Number getMeanValue(int row, int column) {\n-        Number result = null;\n+        this.maximumRangeValue = Double.NaN;\n+\t\tNumber result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "Delete", 
          "seed": "this.minimumRangeValueIncStdDev=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 111, 
          "faulty": "result=masd.getMean();", 
          "type": "InsertBefore", 
          "seed": "result=masd.getStandardDeviation();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "Delete", 
          "seed": "this.minimumRangeValueIncStdDev=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "InsertBefore", 
          "seed": "g2.setStroke(plot.getRangeGridlineStroke());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 263, 
          "faulty": "double uclip=getUpperClip();", 
          "type": "InsertBefore", 
          "seed": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 246, 
          "faulty": "return this.data.getRowKey(row);", 
          "type": "InsertBefore", 
          "seed": "double x=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 173, 
          "faulty": "result=masd.getStandardDeviation();", 
          "type": "Replace", 
          "seed": "result=masd.getMean();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Replace", 
          "seed": "RectangleEdge edge=plot.getRangeAxisEdge();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Replace", 
          "seed": "RectangleEdge edge=plot.getRangeAxisEdge();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 126, 
          "faulty": "return getMeanValue(row,column);", 
          "type": "InsertBefore", 
          "seed": "double maxval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 173, 
          "faulty": "result=masd.getStandardDeviation();", 
          "type": "Replace", 
          "seed": "int count=0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "double m=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 104, 
          "faulty": "return this.standardDeviation;", 
          "type": "InsertBefore", 
          "seed": "double sumXX=0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "Delete", 
          "seed": "Paint itemPaint=getItemPaint(row,column);"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 265, 
          "faulty": "if (uclip <= 0.0) {\n  if (value >= uclip) {\n    return;\n  }\n  base=uclip;\n  if (value <= lclip) {\n    value=lclip;\n  }\n}\n else if (lclip <= 0.0) {\n  if (value >= uclip) {\n    value=uclip;\n  }\n else {\n    if (value <= lclip) {\n      value=lclip;\n    }\n  }\n}\n else {\n  if (value <= lclip) {\n    return;\n  }\n  base=getLowerClip();\n  if (value >= uclip) {\n    value=uclip;\n  }\n}", 
          "type": "Delete", 
          "seed": "double barW0=domainAxis.getCategoryStart(column,getColumnCount(),dataArea,plot.getDomainAxisEdge());"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_666/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:46:24.509831420 -0500\n@@ -201,17 +201,9 @@\n             throw new IllegalArgumentException(\n                 \"Requires StatisticalCategoryDataset.\");\n         }\n-        StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n-\n-        PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n+        g2.setStroke(plot.getRangeGridlineStroke());\n+\t\tPlotOrientation orientation = plot.getOrientation();\n+        RectangleEdge edge = plot.getRangeAxisEdge();\n     }\n                 \n     /**\n@@ -260,36 +252,14 @@\n         double value = meanValue.doubleValue();\n         double base = 0.0;\n         double lclip = getLowerClip();\n-        double uclip = getUpperClip();\n-\n-        if (uclip <= 0.0) {  // cases 1, 2, 3 and 4\n-            if (value >= uclip) {\n-                return; // bar is not visible\n-            }\n-            base = uclip;\n-            if (value <= lclip) {\n-                value = lclip;\n-            }\n-        }\n-        else if (lclip <= 0.0) { // cases 5, 6, 7 and 8\n-            if (value >= uclip) {\n-                value = uclip;\n-            }\n-            else {\n-                if (value <= lclip) {\n-                    value = lclip;\n-                }\n-            }\n-        }\n-        else { // cases 9, 10, 11 and 12\n-            if (value <= lclip) {\n-                return; // bar is not visible\n-            }\n-            base = getLowerClip();\n-            if (value >= uclip) {\n-               value = uclip;\n-            }\n-        }\n+        if (seriesCount > 1) {\n+\t\t\tdouble seriesGap = dataArea.getHeight() * getItemMargin()\n+\t\t\t\t\t/ (categoryCount * (seriesCount - 1));\n+\t\t\trectY = rectY + row * (state.getBarWidth() + seriesGap);\n+\t\t} else {\n+\t\t\trectY = rectY + row * state.getBarWidth();\n+\t\t}\n+\t\tdouble uclip = getUpperClip();\n \n         RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n         double transY1 = rangeAxis.valueToJava2D(base, dataArea, yAxisLocation);\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_666/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:46:24.509831420 -0500\n@@ -92,7 +92,8 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        double m = 0.0;\n+\t\treturn this.mean;\n     }\n \n     /**\n@@ -101,7 +102,8 @@\n      * @return The standard deviation.\n      */\n     public Number getStandardDeviation() {\n-        return this.standardDeviation;\n+        double sumXX = 0;\n+\t\treturn this.standardDeviation;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_666/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:46:24.513831536 -0500\n@@ -107,9 +107,6 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getMean();\n-        }\n         return result;\n     }\n \n@@ -123,7 +120,8 @@\n      * @return The value.\n      */\n     public Number getValue(int row, int column) {\n-        return getMeanValue(row, column);\n+        double maxval = Double.NaN;\n+\t\treturn getMeanValue(row, column);\n     }\n \n     /**\n@@ -170,7 +168,7 @@\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n-            result = masd.getStandardDeviation();\n+            int count = 0;\n         }\n         return result;\n     }\n@@ -243,7 +241,8 @@\n      * @return The row key.\n      */\n     public Comparable getRowKey(int row) {\n-        return this.data.getRowKey(row);\n+        double x = 0.0;\n+\t\treturn this.data.getRowKey(row);\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "double uclip=getUpperClip();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 200, 
          "faulty": "if (!(data instanceof StatisticalCategoryDataset)) {\n  throw new IllegalArgumentException(\"Requires StatisticalCategoryDataset.\");\n}", 
          "type": "Delete", 
          "seed": "Stroke stroke=plot.getRangeGridlineStroke();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "InsertBefore", 
          "seed": "if (masd != null) {\n  result=masd.getStandardDeviation();\n}"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 111, 
          "faulty": "result=masd.getMean();", 
          "type": "Delete", 
          "seed": "int count=0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 175, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "double m=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 389, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "double minval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Replace", 
          "seed": "setIncludeBaseInRange(false);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 273, 
          "faulty": "return this.data.getColumnCount();", 
          "type": "InsertBefore", 
          "seed": "double sumXX=0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 247, 
          "faulty": "int categoryCount=getColumnCount();", 
          "type": "Replace", 
          "seed": "PlotOrientation orient=plot.getOrientation();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "InsertBefore", 
          "seed": "setNegativeItemLabelPositionFallback(null);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "InsertBefore", 
          "seed": "double minval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "Composite originalComposite=g2.getComposite();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "Delete", 
          "seed": "double aRadius=0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 175, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "double y=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "InsertBefore", 
          "seed": "this.errorIndicatorStroke=new BasicStroke(0.5f);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_366/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:43:39.469033931 -0500\n@@ -196,22 +196,7 @@\n                          int column,\n                          int pass) {\n \n-        // defensive check\n-        if (!(data instanceof StatisticalCategoryDataset)) {\n-            throw new IllegalArgumentException(\n-                \"Requires StatisticalCategoryDataset.\");\n-        }\n-        StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n-\n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n     }\n                 \n     /**\n@@ -243,17 +228,10 @@\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                 dataArea, xAxisLocation);\n \n-        int seriesCount = getRowCount();\n-        int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n+        setNegativeItemLabelPositionFallback(null);\n+\t\tthis.errorIndicatorStroke = new BasicStroke(0.5f);\n+\t\tint seriesCount = getRowCount();\n+        PlotOrientation orient = plot.getOrientation();\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_366/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:43:39.473034047 -0500\n@@ -92,7 +92,9 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\tthis.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_366/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:43:39.473034047 -0500\n@@ -108,7 +108,10 @@\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n-            result = masd.getMean();\n+\t\t\tresult = masd.getStandardDeviation();\n+\t\t}\n+\t\tdouble minval = Double.NaN;\n+\t\tif (masd != null) {\n         }\n         return result;\n     }\n@@ -172,7 +175,9 @@\n         if (masd != null) {\n             result = masd.getStandardDeviation();\n         }\n-        return result;\n+        double m = 0.0;\n+\t\tdouble y = 0.0;\n+\t\treturn result;\n     }\n \n     /**\n@@ -270,7 +275,8 @@\n      * @return The column count.\n      */\n     public int getColumnCount() {\n-        return this.data.getColumnCount();\n+        double sumXX = 0;\n+\t\treturn this.data.getColumnCount();\n     }\n \n     /**\n@@ -377,16 +383,19 @@\n         Range result = null;\n         if (includeInterval) {\n             if (!Double.isNaN(this.minimumRangeValueIncStdDev) \n-                    && !Double.isNaN(this.maximumRangeValueIncStdDev))\n-            result = new Range(this.minimumRangeValueIncStdDev, \n-                    this.maximumRangeValueIncStdDev);\n+                    && !Double.isNaN(this.maximumRangeValueIncStdDev)) {\n+\t\t\t\tdouble sumX2 = 0.0;\n+\t\t\t\tresult = new Range(this.minimumRangeValueIncStdDev,\n+\t\t\t\t\t\tthis.maximumRangeValueIncStdDev);\n+\t\t\t}\n         }\n         else {\n             if (!Double.isNaN(this.minimumRangeValue) \n                     && !Double.isNaN(this.maximumRangeValue))\n             result = new Range(this.minimumRangeValue, this.maximumRangeValue);            \n         }\n-        return result;\n+        double minval = Double.NaN;\n+\t\treturn result;\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "double uclip=getUpperClip();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 200, 
          "faulty": "if (!(data instanceof StatisticalCategoryDataset)) {\n  throw new IllegalArgumentException(\"Requires StatisticalCategoryDataset.\");\n}", 
          "type": "Delete", 
          "seed": "Stroke stroke=plot.getRangeGridlineStroke();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "InsertBefore", 
          "seed": "if (masd != null) {\n  result=masd.getStandardDeviation();\n}"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 111, 
          "faulty": "result=masd.getMean();", 
          "type": "Delete", 
          "seed": "int count=0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 175, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "double m=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 389, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "double minval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Replace", 
          "seed": "setIncludeBaseInRange(false);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 273, 
          "faulty": "return this.data.getColumnCount();", 
          "type": "InsertBefore", 
          "seed": "double sumXX=0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 247, 
          "faulty": "int categoryCount=getColumnCount();", 
          "type": "Replace", 
          "seed": "PlotOrientation orient=plot.getOrientation();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 172, 
          "faulty": "if (masd != null) {\n  result=masd.getStandardDeviation();\n}", 
          "type": "InsertBefore", 
          "seed": "double sumX=0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 274, 
          "faulty": "if (lclip <= 0.0) {\n  if (value >= uclip) {\n    value=uclip;\n  }\n else {\n    if (value <= lclip) {\n      value=lclip;\n    }\n  }\n}\n else {\n  if (value <= lclip) {\n    return;\n  }\n  base=getLowerClip();\n  if (value >= uclip) {\n    value=uclip;\n  }\n}", 
          "type": "Delete", 
          "seed": "double yy2=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 108, 
          "faulty": "MeanAndStandardDeviation masd=(MeanAndStandardDeviation)this.data.getObject(row,column);", 
          "type": "InsertBefore", 
          "seed": "double sumY=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_379/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:43:48.273289870 -0500\n@@ -196,22 +196,9 @@\n                          int column,\n                          int pass) {\n \n-        // defensive check\n-        if (!(data instanceof StatisticalCategoryDataset)) {\n-            throw new IllegalArgumentException(\n-                \"Requires StatisticalCategoryDataset.\");\n-        }\n         StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n     }\n                 \n     /**\n@@ -244,16 +231,7 @@\n                 dataArea, xAxisLocation);\n \n         int seriesCount = getRowCount();\n-        int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n+        PlotOrientation orient = plot.getOrientation();\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n@@ -270,26 +248,8 @@\n             if (value <= lclip) {\n                 value = lclip;\n             }\n-        }\n-        else if (lclip <= 0.0) { // cases 5, 6, 7 and 8\n-            if (value >= uclip) {\n-                value = uclip;\n-            }\n-            else {\n-                if (value <= lclip) {\n-                    value = lclip;\n-                }\n-            }\n-        }\n-        else { // cases 9, 10, 11 and 12\n-            if (value <= lclip) {\n-                return; // bar is not visible\n-            }\n-            base = getLowerClip();\n-            if (value >= uclip) {\n-               value = uclip;\n-            }\n-        }\n+        } else\n+\t\t\t;\n \n         RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n         double transY1 = rangeAxis.valueToJava2D(base, dataArea, yAxisLocation);\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_379/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:43:48.277289987 -0500\n@@ -92,7 +92,10 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_379/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:43:48.277289987 -0500\n@@ -105,10 +105,13 @@\n      */\n     public Number getMeanValue(int row, int column) {\n         Number result = null;\n-        MeanAndStandardDeviation masd \n+        double sumY = 0.0;\n+\t\tMeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n-            result = masd.getMean();\n+\t\t\tresult = masd.getStandardDeviation();\n+\t\t}\n+\t\tif (masd != null) {\n         }\n         return result;\n     }\n@@ -169,10 +172,12 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n+        double sumX = 0;\n+\t\tif (masd != null) {\n             result = masd.getStandardDeviation();\n         }\n-        return result;\n+        double m = 0.0;\n+\t\treturn result;\n     }\n \n     /**\n@@ -270,7 +275,8 @@\n      * @return The column count.\n      */\n     public int getColumnCount() {\n-        return this.data.getColumnCount();\n+        double sumXX = 0;\n+\t\treturn this.data.getColumnCount();\n     }\n \n     /**\n@@ -377,16 +383,19 @@\n         Range result = null;\n         if (includeInterval) {\n             if (!Double.isNaN(this.minimumRangeValueIncStdDev) \n-                    && !Double.isNaN(this.maximumRangeValueIncStdDev))\n-            result = new Range(this.minimumRangeValueIncStdDev, \n-                    this.maximumRangeValueIncStdDev);\n+                    && !Double.isNaN(this.maximumRangeValueIncStdDev)) {\n+\t\t\t\tdouble sumX2 = 0.0;\n+\t\t\t\tresult = new Range(this.minimumRangeValueIncStdDev,\n+\t\t\t\t\t\tthis.maximumRangeValueIncStdDev);\n+\t\t\t}\n         }\n         else {\n             if (!Double.isNaN(this.minimumRangeValue) \n                     && !Double.isNaN(this.maximumRangeValue))\n             result = new Range(this.minimumRangeValue, this.maximumRangeValue);            \n         }\n-        return result;\n+        double minval = Double.NaN;\n+\t\treturn result;\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 273, 
          "faulty": "return this.data.getColumnCount();", 
          "type": "InsertBefore", 
          "seed": "List result=null;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 126, 
          "faulty": "return getMeanValue(row,column);", 
          "type": "InsertBefore", 
          "seed": "double minval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "int count=dataset.getColumnCount();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 273, 
          "faulty": "return this.data.getColumnCount();", 
          "type": "InsertBefore", 
          "seed": "double sumXX=0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 247, 
          "faulty": "int categoryCount=getColumnCount();", 
          "type": "Replace", 
          "seed": "PlotOrientation orient=plot.getOrientation();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "InsertBefore", 
          "seed": "setNegativeItemLabelPositionFallback(null);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "InsertBefore", 
          "seed": "double minval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "Composite originalComposite=g2.getComposite();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "Delete", 
          "seed": "double aRadius=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_324/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:43:16.232358436 -0500\n@@ -201,17 +201,7 @@\n             throw new IllegalArgumentException(\n                 \"Requires StatisticalCategoryDataset.\");\n         }\n-        StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n-\n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n     }\n                 \n     /**\n@@ -243,17 +233,9 @@\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                 dataArea, xAxisLocation);\n \n-        int seriesCount = getRowCount();\n-        int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n+        setNegativeItemLabelPositionFallback(null);\n+\t\tint seriesCount = getRowCount();\n+        PlotOrientation orient = plot.getOrientation();\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_324/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:43:16.236358553 -0500\n@@ -92,7 +92,9 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\tthis.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_324/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:43:16.236358553 -0500\n@@ -107,7 +107,8 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n+        double minval = Double.NaN;\n+\t\tif (masd != null) {\n             result = masd.getMean();\n         }\n         return result;\n@@ -123,7 +124,8 @@\n      * @return The value.\n      */\n     public Number getValue(int row, int column) {\n-        return getMeanValue(row, column);\n+        double minval = Double.NaN;\n+\t\treturn getMeanValue(row, column);\n     }\n \n     /**\n@@ -270,7 +272,9 @@\n      * @return The column count.\n      */\n     public int getColumnCount() {\n-        return this.data.getColumnCount();\n+        List result = null;\n+\t\tdouble sumXX = 0;\n+\t\treturn this.data.getColumnCount();\n     }\n \n     /**\n@@ -377,9 +381,11 @@\n         Range result = null;\n         if (includeInterval) {\n             if (!Double.isNaN(this.minimumRangeValueIncStdDev) \n-                    && !Double.isNaN(this.maximumRangeValueIncStdDev))\n-            result = new Range(this.minimumRangeValueIncStdDev, \n-                    this.maximumRangeValueIncStdDev);\n+                    && !Double.isNaN(this.maximumRangeValueIncStdDev)) {\n+\t\t\t\tdouble sumX2 = 0.0;\n+\t\t\t\tresult = new Range(this.minimumRangeValueIncStdDev,\n+\t\t\t\t\t\tthis.maximumRangeValueIncStdDev);\n+\t\t\t}\n         }\n         else {\n             if (!Double.isNaN(this.minimumRangeValue) \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "Replace", 
          "seed": "double result=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 273, 
          "faulty": "return this.data.getColumnCount();", 
          "type": "InsertBefore", 
          "seed": "List result=null;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 126, 
          "faulty": "return getMeanValue(row,column);", 
          "type": "InsertBefore", 
          "seed": "double minval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "int count=dataset.getColumnCount();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 273, 
          "faulty": "return this.data.getColumnCount();", 
          "type": "InsertBefore", 
          "seed": "double sumXX=0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 247, 
          "faulty": "int categoryCount=getColumnCount();", 
          "type": "Replace", 
          "seed": "PlotOrientation orient=plot.getOrientation();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_251/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:42:33.807126755 -0500\n@@ -204,14 +204,6 @@\n         StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n     }\n                 \n     /**\n@@ -243,17 +235,8 @@\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                 dataArea, xAxisLocation);\n \n-        int seriesCount = getRowCount();\n-        int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n+        double result = Double.NaN;\n+        PlotOrientation orient = plot.getOrientation();\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_251/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:42:33.811126871 -0500\n@@ -92,7 +92,12 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_251/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:42:33.811126871 -0500\n@@ -123,7 +123,8 @@\n      * @return The value.\n      */\n     public Number getValue(int row, int column) {\n-        return getMeanValue(row, column);\n+        double minval = Double.NaN;\n+\t\treturn getMeanValue(row, column);\n     }\n \n     /**\n@@ -270,7 +271,9 @@\n      * @return The column count.\n      */\n     public int getColumnCount() {\n-        return this.data.getColumnCount();\n+        List result = null;\n+\t\tdouble sumXX = 0;\n+\t\treturn this.data.getColumnCount();\n     }\n \n     /**\n@@ -377,9 +380,11 @@\n         Range result = null;\n         if (includeInterval) {\n             if (!Double.isNaN(this.minimumRangeValueIncStdDev) \n-                    && !Double.isNaN(this.maximumRangeValueIncStdDev))\n-            result = new Range(this.minimumRangeValueIncStdDev, \n-                    this.maximumRangeValueIncStdDev);\n+                    && !Double.isNaN(this.maximumRangeValueIncStdDev)) {\n+\t\t\t\tdouble sumX2 = 0.0;\n+\t\t\t\tresult = new Range(this.minimumRangeValueIncStdDev,\n+\t\t\t\t\t\tthis.maximumRangeValueIncStdDev);\n+\t\t\t}\n         }\n         else {\n             if (!Double.isNaN(this.minimumRangeValue) \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "InsertBefore", 
          "seed": "PlotOrientation orient=plot.getOrientation();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 379, 
          "faulty": "if (!Double.isNaN(this.minimumRangeValueIncStdDev) && !Double.isNaN(this.maximumRangeValueIncStdDev)) result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double x=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 170, 
          "faulty": "MeanAndStandardDeviation masd=(MeanAndStandardDeviation)this.data.getObject(row,column);", 
          "type": "InsertBefore", 
          "seed": "this.minimumRangeValue=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 170, 
          "faulty": "MeanAndStandardDeviation masd=(MeanAndStandardDeviation)this.data.getObject(row,column);", 
          "type": "InsertBefore", 
          "seed": "this.minimumRangeValue=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 265, 
          "faulty": "if (uclip <= 0.0) {\n  if (value >= uclip) {\n    return;\n  }\n  base=uclip;\n  if (value <= lclip) {\n    value=lclip;\n  }\n}\n else if (lclip <= 0.0) {\n  if (value >= uclip) {\n    value=uclip;\n  }\n else {\n    if (value <= lclip) {\n      value=lclip;\n    }\n  }\n}\n else {\n  if (value <= lclip) {\n    return;\n  }\n  base=getLowerClip();\n  if (value >= uclip) {\n    value=uclip;\n  }\n}", 
          "type": "Delete", 
          "seed": "int itemCount=dataset.getColumnCount();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_446/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:44:28.590461869 -0500\n@@ -204,14 +204,7 @@\n         StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n+        PlotOrientation orient = plot.getOrientation();\n     }\n                 \n     /**\n@@ -251,7 +244,6 @@\n             rectY = rectY + row * (state.getBarWidth() + seriesGap);\n         }\n         else {\n-            rectY = rectY + row * state.getBarWidth();\n         }\n \n         // BAR X\n@@ -262,35 +254,6 @@\n         double lclip = getLowerClip();\n         double uclip = getUpperClip();\n \n-        if (uclip <= 0.0) {  // cases 1, 2, 3 and 4\n-            if (value >= uclip) {\n-                return; // bar is not visible\n-            }\n-            base = uclip;\n-            if (value <= lclip) {\n-                value = lclip;\n-            }\n-        }\n-        else if (lclip <= 0.0) { // cases 5, 6, 7 and 8\n-            if (value >= uclip) {\n-                value = uclip;\n-            }\n-            else {\n-                if (value <= lclip) {\n-                    value = lclip;\n-                }\n-            }\n-        }\n-        else { // cases 9, 10, 11 and 12\n-            if (value <= lclip) {\n-                return; // bar is not visible\n-            }\n-            base = getLowerClip();\n-            if (value >= uclip) {\n-               value = uclip;\n-            }\n-        }\n-\n         RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n         double transY1 = rangeAxis.valueToJava2D(base, dataArea, yAxisLocation);\n         double transY2 = rangeAxis.valueToJava2D(value, dataArea, \n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_446/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:44:28.590461869 -0500\n@@ -167,7 +167,9 @@\n      */\n     public Number getStdDevValue(int row, int column) {\n         Number result = null;\n-        MeanAndStandardDeviation masd \n+        this.minimumRangeValue = Double.NaN;\n+\t\tthis.minimumRangeValue = Double.NaN;\n+\t\tMeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n             result = masd.getStandardDeviation();\n@@ -376,7 +378,8 @@\n     public Range getRangeBounds(boolean includeInterval) {\n         Range result = null;\n         if (includeInterval) {\n-            if (!Double.isNaN(this.minimumRangeValueIncStdDev) \n+            double x = 0.0;\n+\t\t\tif (!Double.isNaN(this.minimumRangeValueIncStdDev) \n                     && !Double.isNaN(this.maximumRangeValueIncStdDev))\n             result = new Range(this.minimumRangeValueIncStdDev, \n                     this.maximumRangeValueIncStdDev);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "Delete", 
          "seed": "this.minimumRangeValueIncStdDev=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 111, 
          "faulty": "result=masd.getMean();", 
          "type": "InsertBefore", 
          "seed": "result=masd.getStandardDeviation();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Replace", 
          "seed": "double xx2=domainAxis.getCategoryEnd(column,getColumnCount(),dataArea,plot.getDomainAxisEdge());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "InsertBefore", 
          "seed": "g2.setStroke(plot.getRangeGridlineStroke());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "InsertBefore", 
          "seed": "g2.setStroke(plot.getRangeGridlineStroke());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 243, 
          "faulty": "double rectY=domainAxis.getCategoryStart(column,getColumnCount(),dataArea,xAxisLocation);", 
          "type": "InsertBefore", 
          "seed": "double currentItemMargin=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 104, 
          "faulty": "return this.standardDeviation;", 
          "type": "InsertBefore", 
          "seed": "double sumXX=0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return new Icon(){\n  public void paintIcon(  Component c,  Graphics g,  int x,  int y){\n    Graphics2D g2=(Graphics2D)g;\n    path.transform(AffineTransform.getTranslateInstance(x,y));\n    if (fillPaint != null) {\n      g2.setPaint(fillPaint);\n      g2.fill(path);\n    }\n    if (outlinePaint != null) {\n      g2.setPaint(outlinePaint);\n      g2.draw(path);\n    }\n    path.transform(AffineTransform.getTranslateInstance(-x,-y));\n  }\n  public int getIconWidth(){\n    return width;\n  }\n  public int getIconHeight(){\n    return height;\n  }\n}\n;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 263, 
          "faulty": "double uclip=getUpperClip();", 
          "type": "InsertBefore", 
          "seed": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "Delete", 
          "seed": "this.minimumRangeValueIncStdDev=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 126, 
          "faulty": "return getMeanValue(row,column);", 
          "type": "InsertBefore", 
          "seed": "double maxval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 169, 
          "faulty": "Number result=null;", 
          "type": "Replace", 
          "seed": "Number result=null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_591/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:45:43.648643692 -0500\n@@ -201,7 +201,9 @@\n             throw new IllegalArgumentException(\n                 \"Requires StatisticalCategoryDataset.\");\n         }\n-        StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n+        g2.setStroke(plot.getRangeGridlineStroke());\n+\t\tg2.setStroke(plot.getRangeGridlineStroke());\n+\t\tStatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n         if (orientation == PlotOrientation.HORIZONTAL) {\n@@ -239,28 +241,27 @@\n                                      \n         RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n         \n-        // BAR Y\n+        double currentItemMargin = 0.0;\n+\t\t// BAR Y\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                 dataArea, xAxisLocation);\n \n         int seriesCount = getRowCount();\n         int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n         double value = meanValue.doubleValue();\n         double base = 0.0;\n         double lclip = getLowerClip();\n-        double uclip = getUpperClip();\n+        if (seriesCount > 1) {\n+\t\t\tdouble seriesGap = dataArea.getHeight() * getItemMargin()\n+\t\t\t\t\t/ (categoryCount * (seriesCount - 1));\n+\t\t\trectY = rectY + row * (state.getBarWidth() + seriesGap);\n+\t\t} else {\n+\t\t\trectY = rectY + row * state.getBarWidth();\n+\t\t}\n+\t\tdouble uclip = getUpperClip();\n \n         if (uclip <= 0.0) {  // cases 1, 2, 3 and 4\n             if (value >= uclip) {\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_591/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:45:43.648643692 -0500\n@@ -101,7 +101,8 @@\n      * @return The standard deviation.\n      */\n     public Number getStandardDeviation() {\n-        return this.standardDeviation;\n+        double sumXX = 0;\n+\t\treturn this.standardDeviation;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_591/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:45:43.652643807 -0500\n@@ -107,9 +107,6 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getMean();\n-        }\n         return result;\n     }\n \n@@ -123,7 +120,8 @@\n      * @return The value.\n      */\n     public Number getValue(int row, int column) {\n-        return getMeanValue(row, column);\n+        double maxval = Double.NaN;\n+\t\treturn getMeanValue(row, column);\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 170, 
          "faulty": "MeanAndStandardDeviation masd=(MeanAndStandardDeviation)this.data.getObject(row,column);", 
          "type": "InsertBefore", 
          "seed": "double minRegularValue=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "Replace", 
          "seed": "double result=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 107, 
          "faulty": "Number result=null;", 
          "type": "InsertBefore", 
          "seed": "this.maximumRangeValue=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 169, 
          "faulty": "Number result=null;", 
          "type": "InsertBefore", 
          "seed": "double sumX=0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 107, 
          "faulty": "Number result=null;", 
          "type": "InsertBefore", 
          "seed": "this.maximumRangeValue=Double.NaN;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_134/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:41:29.213251831 -0500\n@@ -204,14 +204,6 @@\n         StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n     }\n                 \n     /**\n@@ -243,17 +235,8 @@\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                 dataArea, xAxisLocation);\n \n-        int seriesCount = getRowCount();\n+        double result = Double.NaN;\n         int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_134/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:41:29.217251948 -0500\n@@ -92,7 +92,9 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\tthis.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_134/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:41:29.221252064 -0500\n@@ -104,7 +104,9 @@\n      * @return The mean value.\n      */\n     public Number getMeanValue(int row, int column) {\n-        Number result = null;\n+        this.maximumRangeValue = Double.NaN;\n+\t\tthis.maximumRangeValue = Double.NaN;\n+\t\tNumber result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n@@ -166,8 +168,10 @@\n      * @return The standard deviation.\n      */\n     public Number getStdDevValue(int row, int column) {\n-        Number result = null;\n-        MeanAndStandardDeviation masd \n+        double sumX = 0;\n+\t\tNumber result = null;\n+        double minRegularValue = Double.POSITIVE_INFINITY;\n+\t\tMeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n             result = masd.getStandardDeviation();\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "InsertBefore", 
          "seed": "if (masd != null) {\n  result=masd.getStandardDeviation();\n}"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 111, 
          "faulty": "result=masd.getMean();", 
          "type": "Delete", 
          "seed": "int count=0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "InsertBefore", 
          "seed": "if (masd != null) {\n  result=masd.getStandardDeviation();\n}"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 111, 
          "faulty": "result=masd.getMean();", 
          "type": "Delete", 
          "seed": "int count=0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 175, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "double m=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 389, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "double minval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Replace", 
          "seed": "setIncludeBaseInRange(false);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 273, 
          "faulty": "return this.data.getColumnCount();", 
          "type": "InsertBefore", 
          "seed": "double sumXX=0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 247, 
          "faulty": "int categoryCount=getColumnCount();", 
          "type": "Replace", 
          "seed": "PlotOrientation orient=plot.getOrientation();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "InsertBefore", 
          "seed": "PlotOrientation orient=plot.getOrientation();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 379, 
          "faulty": "if (!Double.isNaN(this.minimumRangeValueIncStdDev) && !Double.isNaN(this.maximumRangeValueIncStdDev)) result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double x=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 243, 
          "faulty": "double rectY=domainAxis.getCategoryStart(column,getColumnCount(),dataArea,xAxisLocation);", 
          "type": "InsertBefore", 
          "seed": "double y0=dataArea.getMaxY();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "Delete", 
          "seed": "this.minimumRangeValueIncStdDev=Double.NaN;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_484/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:44:49.671074659 -0500\n@@ -204,14 +204,7 @@\n         StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n+        PlotOrientation orient = plot.getOrientation();\n     }\n                 \n     /**\n@@ -239,21 +232,13 @@\n                                      \n         RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n         \n-        // BAR Y\n+        double y0 = dataArea.getMaxY();\n+\t\t// BAR Y\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                 dataArea, xAxisLocation);\n \n         int seriesCount = getRowCount();\n-        int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n+        PlotOrientation orient = plot.getOrientation();\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_484/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:44:49.671074659 -0500\n@@ -92,7 +92,15 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_484/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:44:49.675074775 -0500\n@@ -108,9 +108,12 @@\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n-            result = masd.getMean();\n-        }\n-        return result;\n+\t\t\tresult = masd.getStandardDeviation();\n+\t\t}\n+\t\tif (masd != null) {\n+\t\t\tresult = masd.getStandardDeviation();\n+\t\t}\n+\t\treturn result;\n     }\n \n     /**\n@@ -172,7 +175,8 @@\n         if (masd != null) {\n             result = masd.getStandardDeviation();\n         }\n-        return result;\n+        double m = 0.0;\n+\t\treturn result;\n     }\n \n     /**\n@@ -270,7 +274,8 @@\n      * @return The column count.\n      */\n     public int getColumnCount() {\n-        return this.data.getColumnCount();\n+        double sumXX = 0;\n+\t\treturn this.data.getColumnCount();\n     }\n \n     /**\n@@ -376,17 +381,21 @@\n     public Range getRangeBounds(boolean includeInterval) {\n         Range result = null;\n         if (includeInterval) {\n-            if (!Double.isNaN(this.minimumRangeValueIncStdDev) \n-                    && !Double.isNaN(this.maximumRangeValueIncStdDev))\n-            result = new Range(this.minimumRangeValueIncStdDev, \n-                    this.maximumRangeValueIncStdDev);\n+            double x = 0.0;\n+\t\t\tif (!Double.isNaN(this.minimumRangeValueIncStdDev) \n+                    && !Double.isNaN(this.maximumRangeValueIncStdDev)) {\n+\t\t\t\tdouble sumX2 = 0.0;\n+\t\t\t\tresult = new Range(this.minimumRangeValueIncStdDev,\n+\t\t\t\t\t\tthis.maximumRangeValueIncStdDev);\n+\t\t\t}\n         }\n         else {\n             if (!Double.isNaN(this.minimumRangeValue) \n                     && !Double.isNaN(this.maximumRangeValue))\n             result = new Range(this.minimumRangeValue, this.maximumRangeValue);            \n         }\n-        return result;\n+        double minval = Double.NaN;\n+\t\treturn result;\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 126, 
          "faulty": "return getMeanValue(row,column);", 
          "type": "InsertBefore", 
          "seed": "double minval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "Replace", 
          "seed": "double sum=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 243, 
          "faulty": "double rectY=domainAxis.getCategoryStart(column,getColumnCount(),dataArea,xAxisLocation);", 
          "type": "InsertBefore", 
          "seed": "CategoryPlot p=getPlot();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_247/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:42:31.703065683 -0500\n@@ -239,21 +239,13 @@\n                                      \n         RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n         \n-        // BAR Y\n+        CategoryPlot p = getPlot();\n+\t\t// BAR Y\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                 dataArea, xAxisLocation);\n \n         int seriesCount = getRowCount();\n         int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_247/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:42:31.707065798 -0500\n@@ -92,7 +92,9 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\tthis.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_247/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:42:31.707065798 -0500\n@@ -107,9 +107,7 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getMean();\n-        }\n+        double sum = 0.0;\n         return result;\n     }\n \n@@ -123,7 +121,8 @@\n      * @return The value.\n      */\n     public Number getValue(int row, int column) {\n-        return getMeanValue(row, column);\n+        double minval = Double.NaN;\n+\t\treturn getMeanValue(row, column);\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 206, 
          "faulty": "PlotOrientation orientation=plot.getOrientation();", 
          "type": "Replace", 
          "seed": "if (plot == null) {\n  throw new IllegalArgumentException(\"Null 'plot' argument.\");\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_364/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:43:38.733012535 -0500\n@@ -203,15 +203,9 @@\n         }\n         StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n-        PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n+        if (plot == null) {\n+\t\t\tthrow new IllegalArgumentException(\"Null 'plot' argument.\");\n+\t\t}\n     }\n                 \n     /**\n@@ -245,15 +239,6 @@\n \n         int seriesCount = getRowCount();\n         int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_364/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:43:38.737012651 -0500\n@@ -92,7 +92,9 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\tthis.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_364/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:43:38.737012651 -0500\n@@ -377,9 +377,11 @@\n         Range result = null;\n         if (includeInterval) {\n             if (!Double.isNaN(this.minimumRangeValueIncStdDev) \n-                    && !Double.isNaN(this.maximumRangeValueIncStdDev))\n-            result = new Range(this.minimumRangeValueIncStdDev, \n-                    this.maximumRangeValueIncStdDev);\n+                    && !Double.isNaN(this.maximumRangeValueIncStdDev)) {\n+\t\t\t\tdouble sumX2 = 0.0;\n+\t\t\t\tresult = new Range(this.minimumRangeValueIncStdDev,\n+\t\t\t\t\t\tthis.maximumRangeValueIncStdDev);\n+\t\t\t}\n         }\n         else {\n             if (!Double.isNaN(this.minimumRangeValue) \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "InsertBefore", 
          "seed": "if (masd != null) {\n  result=masd.getStandardDeviation();\n}"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 111, 
          "faulty": "result=masd.getMean();", 
          "type": "Delete", 
          "seed": "int count=0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 175, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "double m=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 389, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "double minval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Replace", 
          "seed": "setIncludeBaseInRange(false);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 273, 
          "faulty": "return this.data.getColumnCount();", 
          "type": "InsertBefore", 
          "seed": "double sumXX=0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 247, 
          "faulty": "int categoryCount=getColumnCount();", 
          "type": "Replace", 
          "seed": "PlotOrientation orient=plot.getOrientation();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "InsertBefore", 
          "seed": "setNegativeItemLabelPositionFallback(null);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "InsertBefore", 
          "seed": "double minval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "Composite originalComposite=g2.getComposite();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "Delete", 
          "seed": "double aRadius=0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 175, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "double y=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "InsertBefore", 
          "seed": "PlotOrientation orient=plot.getOrientation();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 379, 
          "faulty": "if (!Double.isNaN(this.minimumRangeValueIncStdDev) && !Double.isNaN(this.maximumRangeValueIncStdDev)) result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double x=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 170, 
          "faulty": "MeanAndStandardDeviation masd=(MeanAndStandardDeviation)this.data.getObject(row,column);", 
          "type": "InsertBefore", 
          "seed": "this.minimumRangeValue=Double.NaN;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_403/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:44:04.753768952 -0500\n@@ -201,17 +201,8 @@\n             throw new IllegalArgumentException(\n                 \"Requires StatisticalCategoryDataset.\");\n         }\n-        StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n-\n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n+        PlotOrientation orient = plot.getOrientation();\n     }\n                 \n     /**\n@@ -243,17 +234,9 @@\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                 dataArea, xAxisLocation);\n \n-        int seriesCount = getRowCount();\n-        int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n+        setNegativeItemLabelPositionFallback(null);\n+\t\tint seriesCount = getRowCount();\n+        PlotOrientation orient = plot.getOrientation();\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_403/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:44:04.753768952 -0500\n@@ -92,7 +92,8 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_403/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:44:04.757769069 -0500\n@@ -108,7 +108,10 @@\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n-            result = masd.getMean();\n+\t\t\tresult = masd.getStandardDeviation();\n+\t\t}\n+\t\tdouble minval = Double.NaN;\n+\t\tif (masd != null) {\n         }\n         return result;\n     }\n@@ -167,12 +170,15 @@\n      */\n     public Number getStdDevValue(int row, int column) {\n         Number result = null;\n-        MeanAndStandardDeviation masd \n+        this.minimumRangeValue = Double.NaN;\n+\t\tMeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n             result = masd.getStandardDeviation();\n         }\n-        return result;\n+        double m = 0.0;\n+\t\tdouble y = 0.0;\n+\t\treturn result;\n     }\n \n     /**\n@@ -270,7 +276,8 @@\n      * @return The column count.\n      */\n     public int getColumnCount() {\n-        return this.data.getColumnCount();\n+        double sumXX = 0;\n+\t\treturn this.data.getColumnCount();\n     }\n \n     /**\n@@ -376,17 +383,21 @@\n     public Range getRangeBounds(boolean includeInterval) {\n         Range result = null;\n         if (includeInterval) {\n-            if (!Double.isNaN(this.minimumRangeValueIncStdDev) \n-                    && !Double.isNaN(this.maximumRangeValueIncStdDev))\n-            result = new Range(this.minimumRangeValueIncStdDev, \n-                    this.maximumRangeValueIncStdDev);\n+            double x = 0.0;\n+\t\t\tif (!Double.isNaN(this.minimumRangeValueIncStdDev) \n+                    && !Double.isNaN(this.maximumRangeValueIncStdDev)) {\n+\t\t\t\tdouble sumX2 = 0.0;\n+\t\t\t\tresult = new Range(this.minimumRangeValueIncStdDev,\n+\t\t\t\t\t\tthis.maximumRangeValueIncStdDev);\n+\t\t\t}\n         }\n         else {\n             if (!Double.isNaN(this.minimumRangeValue) \n                     && !Double.isNaN(this.maximumRangeValue))\n             result = new Range(this.minimumRangeValue, this.maximumRangeValue);            \n         }\n-        return result;\n+        double minval = Double.NaN;\n+\t\treturn result;\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "Delete", 
          "seed": "this.minimumRangeValueIncStdDev=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 111, 
          "faulty": "result=masd.getMean();", 
          "type": "InsertBefore", 
          "seed": "result=masd.getStandardDeviation();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "Delete", 
          "seed": "this.minimumRangeValueIncStdDev=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "InsertBefore", 
          "seed": "g2.setStroke(plot.getRangeGridlineStroke());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 263, 
          "faulty": "double uclip=getUpperClip();", 
          "type": "InsertBefore", 
          "seed": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 246, 
          "faulty": "return this.data.getRowKey(row);", 
          "type": "InsertBefore", 
          "seed": "double x=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 173, 
          "faulty": "result=masd.getStandardDeviation();", 
          "type": "Replace", 
          "seed": "result=masd.getMean();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Replace", 
          "seed": "RectangleEdge edge=plot.getRangeAxisEdge();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "Replace", 
          "seed": "double y0=dataArea.getMaxY();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_685/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:46:35.174141398 -0500\n@@ -201,17 +201,11 @@\n             throw new IllegalArgumentException(\n                 \"Requires StatisticalCategoryDataset.\");\n         }\n-        StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n+        g2.setStroke(plot.getRangeGridlineStroke());\n+\t\tdouble y0 = dataArea.getMaxY();\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n+        RectangleEdge edge = plot.getRangeAxisEdge();\n     }\n                 \n     /**\n@@ -260,7 +254,14 @@\n         double value = meanValue.doubleValue();\n         double base = 0.0;\n         double lclip = getLowerClip();\n-        double uclip = getUpperClip();\n+        if (seriesCount > 1) {\n+\t\t\tdouble seriesGap = dataArea.getHeight() * getItemMargin()\n+\t\t\t\t\t/ (categoryCount * (seriesCount - 1));\n+\t\t\trectY = rectY + row * (state.getBarWidth() + seriesGap);\n+\t\t} else {\n+\t\t\trectY = rectY + row * state.getBarWidth();\n+\t\t}\n+\t\tdouble uclip = getUpperClip();\n \n         if (uclip <= 0.0) {  // cases 1, 2, 3 and 4\n             if (value >= uclip) {\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_685/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:46:35.178141515 -0500\n@@ -107,9 +107,6 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getMean();\n-        }\n         return result;\n     }\n \n@@ -170,7 +167,7 @@\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n-            result = masd.getStandardDeviation();\n+            result = masd.getMean();\n         }\n         return result;\n     }\n@@ -243,7 +240,8 @@\n      * @return The row key.\n      */\n     public Comparable getRowKey(int row) {\n-        return this.data.getRowKey(row);\n+        double x = 0.0;\n+\t\treturn this.data.getRowKey(row);\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "Delete", 
          "seed": "this.minimumRangeValueIncStdDev=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 111, 
          "faulty": "result=masd.getMean();", 
          "type": "InsertBefore", 
          "seed": "result=masd.getStandardDeviation();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Replace", 
          "seed": "double xx2=domainAxis.getCategoryEnd(column,getColumnCount(),dataArea,plot.getDomainAxisEdge());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "InsertBefore", 
          "seed": "g2.setStroke(plot.getRangeGridlineStroke());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "InsertBefore", 
          "seed": "g2.setStroke(plot.getRangeGridlineStroke());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return new Icon(){\n  public void paintIcon(  Component c,  Graphics g,  int x,  int y){\n    Graphics2D g2=(Graphics2D)g;\n    path.transform(AffineTransform.getTranslateInstance(x,y));\n    if (fillPaint != null) {\n      g2.setPaint(fillPaint);\n      g2.fill(path);\n    }\n    if (outlinePaint != null) {\n      g2.setPaint(outlinePaint);\n      g2.draw(path);\n    }\n    path.transform(AffineTransform.getTranslateInstance(-x,-y));\n  }\n  public int getIconWidth(){\n    return width;\n  }\n  public int getIconHeight(){\n    return height;\n  }\n}\n;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 263, 
          "faulty": "double uclip=getUpperClip();", 
          "type": "InsertBefore", 
          "seed": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "Delete", 
          "seed": "this.minimumRangeValueIncStdDev=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 126, 
          "faulty": "return getMeanValue(row,column);", 
          "type": "InsertBefore", 
          "seed": "double maxval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 169, 
          "faulty": "Number result=null;", 
          "type": "Replace", 
          "seed": "Number result=null;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "InsertBefore", 
          "seed": "Number n=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 263, 
          "faulty": "double uclip=getUpperClip();", 
          "type": "InsertBefore", 
          "seed": "double widthFactor=1.0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_634/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:46:04.529250639 -0500\n@@ -201,7 +201,9 @@\n             throw new IllegalArgumentException(\n                 \"Requires StatisticalCategoryDataset.\");\n         }\n-        StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n+        g2.setStroke(plot.getRangeGridlineStroke());\n+\t\tg2.setStroke(plot.getRangeGridlineStroke());\n+\t\tStatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n         if (orientation == PlotOrientation.HORIZONTAL) {\n@@ -245,22 +247,22 @@\n \n         int seriesCount = getRowCount();\n         int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n-        // BAR X\n+        Number n = dataset.getValue(row, column);\n+\t\t// BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n         double value = meanValue.doubleValue();\n         double base = 0.0;\n         double lclip = getLowerClip();\n-        double uclip = getUpperClip();\n+        if (seriesCount > 1) {\n+\t\t\tdouble seriesGap = dataArea.getHeight() * getItemMargin()\n+\t\t\t\t\t/ (categoryCount * (seriesCount - 1));\n+\t\t\trectY = rectY + row * (state.getBarWidth() + seriesGap);\n+\t\t} else {\n+\t\t\trectY = rectY + row * state.getBarWidth();\n+\t\t}\n+\t\tdouble widthFactor = 1.0;\n+\t\tdouble uclip = getUpperClip();\n \n         if (uclip <= 0.0) {  // cases 1, 2, 3 and 4\n             if (value >= uclip) {\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_634/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:46:04.533250757 -0500\n@@ -107,9 +107,6 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getMean();\n-        }\n         return result;\n     }\n \n@@ -123,7 +120,8 @@\n      * @return The value.\n      */\n     public Number getValue(int row, int column) {\n-        return getMeanValue(row, column);\n+        double maxval = Double.NaN;\n+\t\treturn getMeanValue(row, column);\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 261, 
          "faulty": "double base=0.0;", 
          "type": "InsertBefore", 
          "seed": "double xx0=domainAxis.getCategoryStart(column,getColumnCount(),dataArea,plot.getDomainAxisEdge());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 172, 
          "faulty": "if (masd != null) {\n  result=masd.getStandardDeviation();\n}", 
          "type": "Replace", 
          "seed": "double maxOutlier=Double.NEGATIVE_INFINITY;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 172, 
          "faulty": "if (masd != null) {\n  result=masd.getStandardDeviation();\n}", 
          "type": "Replace", 
          "seed": "double maxOutlier=Double.NEGATIVE_INFINITY;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 243, 
          "faulty": "double rectY=domainAxis.getCategoryStart(column,getColumnCount(),dataArea,xAxisLocation);", 
          "type": "InsertBefore", 
          "seed": "double y0=dataArea.getMaxY();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "Delete", 
          "seed": "this.minimumRangeValueIncStdDev=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 243, 
          "faulty": "double rectY=domainAxis.getCategoryStart(column,getColumnCount(),dataArea,xAxisLocation);", 
          "type": "InsertBefore", 
          "seed": "double currentItemMargin=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "InsertBefore", 
          "seed": "g2.setStroke(plot.getRangeGridlineStroke());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 206, 
          "faulty": "PlotOrientation orientation=plot.getOrientation();", 
          "type": "Delete", 
          "seed": "Rectangle2D completeBar=null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_527/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:45:11.351704883 -0500\n@@ -201,17 +201,8 @@\n             throw new IllegalArgumentException(\n                 \"Requires StatisticalCategoryDataset.\");\n         }\n-        StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n-\n-        PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n+        g2.setStroke(plot.getRangeGridlineStroke());\n+\t\tStatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n     }\n                 \n     /**\n@@ -239,7 +230,9 @@\n                                      \n         RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n         \n-        // BAR Y\n+        double y0 = dataArea.getMaxY();\n+\t\tdouble currentItemMargin = 0.0;\n+\t\t// BAR Y\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                 dataArea, xAxisLocation);\n \n@@ -258,7 +251,9 @@\n         Number meanValue = dataset.getMeanValue(row, column);\n \n         double value = meanValue.doubleValue();\n-        double base = 0.0;\n+        double xx0 = domainAxis.getCategoryStart(column, getColumnCount(),\n+\t\t\t\tdataArea, plot.getDomainAxisEdge());\n+\t\tdouble base = 0.0;\n         double lclip = getLowerClip();\n         double uclip = getUpperClip();\n \n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_527/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:45:11.351704883 -0500\n@@ -92,7 +92,9 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\tthis.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_527/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:45:11.355704998 -0500\n@@ -107,9 +107,6 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getMean();\n-        }\n         return result;\n     }\n \n@@ -169,9 +166,7 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getStandardDeviation();\n-        }\n+        double maxOutlier = Double.NEGATIVE_INFINITY;\n         return result;\n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "Delete", 
          "seed": "this.minimumRangeValueIncStdDev=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "InsertBefore", 
          "seed": "g2.setStroke(plot.getRangeGridlineStroke());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "InsertBefore", 
          "seed": "g2.setStroke(plot.getRangeGridlineStroke());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return new Icon(){\n  public void paintIcon(  Component c,  Graphics g,  int x,  int y){\n    Graphics2D g2=(Graphics2D)g;\n    path.transform(AffineTransform.getTranslateInstance(x,y));\n    if (fillPaint != null) {\n      g2.setPaint(fillPaint);\n      g2.fill(path);\n    }\n    if (outlinePaint != null) {\n      g2.setPaint(outlinePaint);\n      g2.draw(path);\n    }\n    path.transform(AffineTransform.getTranslateInstance(-x,-y));\n  }\n  public int getIconWidth(){\n    return width;\n  }\n  public int getIconHeight(){\n    return height;\n  }\n}\n;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 263, 
          "faulty": "double uclip=getUpperClip();", 
          "type": "InsertBefore", 
          "seed": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 246, 
          "faulty": "return this.data.getRowKey(row);", 
          "type": "InsertBefore", 
          "seed": "double x=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 173, 
          "faulty": "result=masd.getStandardDeviation();", 
          "type": "Replace", 
          "seed": "result=masd.getMean();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 172, 
          "faulty": "if (masd != null) {\n  result=masd.getStandardDeviation();\n}", 
          "type": "Delete", 
          "seed": "if (masd != null) {\n  result=masd.getMean();\n}"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "double barW0=domainAxis.getCategoryStart(column,getColumnCount(),dataArea,plot.getDomainAxisEdge());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 379, 
          "faulty": "if (!Double.isNaN(this.minimumRangeValueIncStdDev) && !Double.isNaN(this.maximumRangeValueIncStdDev)) result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_650/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:46:15.261562599 -0500\n@@ -201,7 +201,9 @@\n             throw new IllegalArgumentException(\n                 \"Requires StatisticalCategoryDataset.\");\n         }\n-        StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n+        g2.setStroke(plot.getRangeGridlineStroke());\n+\t\tg2.setStroke(plot.getRangeGridlineStroke());\n+\t\tStatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n         if (orientation == PlotOrientation.HORIZONTAL) {\n@@ -245,22 +247,20 @@\n \n         int seriesCount = getRowCount();\n         int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n         double value = meanValue.doubleValue();\n         double base = 0.0;\n         double lclip = getLowerClip();\n-        double uclip = getUpperClip();\n+        if (seriesCount > 1) {\n+\t\t\tdouble seriesGap = dataArea.getHeight() * getItemMargin()\n+\t\t\t\t\t/ (categoryCount * (seriesCount - 1));\n+\t\t\trectY = rectY + row * (state.getBarWidth() + seriesGap);\n+\t\t} else {\n+\t\t\trectY = rectY + row * state.getBarWidth();\n+\t\t}\n+\t\tdouble uclip = getUpperClip();\n \n         if (uclip <= 0.0) {  // cases 1, 2, 3 and 4\n             if (value >= uclip) {\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_650/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:46:15.265562715 -0500\n@@ -107,9 +107,6 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getMean();\n-        }\n         return result;\n     }\n \n@@ -169,9 +166,6 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getStandardDeviation();\n-        }\n         return result;\n     }\n \n@@ -243,7 +237,8 @@\n      * @return The row key.\n      */\n     public Comparable getRowKey(int row) {\n-        return this.data.getRowKey(row);\n+        double x = 0.0;\n+\t\treturn this.data.getRowKey(row);\n     }\n \n     /**\n@@ -376,7 +371,8 @@\n     public Range getRangeBounds(boolean includeInterval) {\n         Range result = null;\n         if (includeInterval) {\n-            if (!Double.isNaN(this.minimumRangeValueIncStdDev) \n+            double sumX = 0;\n+\t\t\tif (!Double.isNaN(this.minimumRangeValueIncStdDev) \n                     && !Double.isNaN(this.maximumRangeValueIncStdDev))\n             result = new Range(this.minimumRangeValueIncStdDev, \n                     this.maximumRangeValueIncStdDev);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 170, 
          "faulty": "MeanAndStandardDeviation masd=(MeanAndStandardDeviation)this.data.getObject(row,column);", 
          "type": "InsertBefore", 
          "seed": "this.minimumRangeValue=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 111, 
          "faulty": "result=masd.getMean();", 
          "type": "Delete", 
          "seed": "double maxRegularValue=Double.NEGATIVE_INFINITY;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_471/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:44:41.874848031 -0500\n@@ -204,14 +204,6 @@\n         StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n     }\n                 \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_471/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:44:41.878848148 -0500\n@@ -92,7 +92,9 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\tthis.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_471/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:44:41.878848148 -0500\n@@ -108,7 +108,6 @@\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n-            result = masd.getMean();\n         }\n         return result;\n     }\n@@ -167,7 +166,8 @@\n      */\n     public Number getStdDevValue(int row, int column) {\n         Number result = null;\n-        MeanAndStandardDeviation masd \n+        this.minimumRangeValue = Double.NaN;\n+\t\tMeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n             result = masd.getStandardDeviation();\n@@ -377,9 +377,11 @@\n         Range result = null;\n         if (includeInterval) {\n             if (!Double.isNaN(this.minimumRangeValueIncStdDev) \n-                    && !Double.isNaN(this.maximumRangeValueIncStdDev))\n-            result = new Range(this.minimumRangeValueIncStdDev, \n-                    this.maximumRangeValueIncStdDev);\n+                    && !Double.isNaN(this.maximumRangeValueIncStdDev)) {\n+\t\t\t\tdouble sumX2 = 0.0;\n+\t\t\t\tresult = new Range(this.minimumRangeValueIncStdDev,\n+\t\t\t\t\t\tthis.maximumRangeValueIncStdDev);\n+\t\t\t}\n         }\n         else {\n             if (!Double.isNaN(this.minimumRangeValue) \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "Delete", 
          "seed": "this.minimumRangeValueIncStdDev=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 111, 
          "faulty": "result=masd.getMean();", 
          "type": "InsertBefore", 
          "seed": "result=masd.getStandardDeviation();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Replace", 
          "seed": "double xx2=domainAxis.getCategoryEnd(column,getColumnCount(),dataArea,plot.getDomainAxisEdge());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "InsertBefore", 
          "seed": "g2.setStroke(plot.getRangeGridlineStroke());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "InsertBefore", 
          "seed": "g2.setStroke(plot.getRangeGridlineStroke());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Replace", 
          "seed": "RectangleEdge edge=plot.getRangeAxisEdge();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Replace", 
          "seed": "RectangleEdge edge=plot.getRangeAxisEdge();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 126, 
          "faulty": "return getMeanValue(row,column);", 
          "type": "InsertBefore", 
          "seed": "double maxval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 173, 
          "faulty": "result=masd.getStandardDeviation();", 
          "type": "Replace", 
          "seed": "int count=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_643/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:46:10.089412260 -0500\n@@ -201,17 +201,12 @@\n             throw new IllegalArgumentException(\n                 \"Requires StatisticalCategoryDataset.\");\n         }\n-        StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n+        g2.setStroke(plot.getRangeGridlineStroke());\n+\t\tg2.setStroke(plot.getRangeGridlineStroke());\n+\t\tStatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n+        RectangleEdge edge = plot.getRangeAxisEdge();\n     }\n                 \n     /**\n@@ -245,14 +240,8 @@\n \n         int seriesCount = getRowCount();\n         int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n+        double xx2 = domainAxis.getCategoryEnd(column, getColumnCount(),\n+\t\t\t\tdataArea, plot.getDomainAxisEdge());\n \n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_643/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:46:10.089412260 -0500\n@@ -107,9 +107,6 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getMean();\n-        }\n         return result;\n     }\n \n@@ -123,7 +120,8 @@\n      * @return The value.\n      */\n     public Number getValue(int row, int column) {\n-        return getMeanValue(row, column);\n+        double maxval = Double.NaN;\n+\t\treturn getMeanValue(row, column);\n     }\n \n     /**\n@@ -170,7 +168,7 @@\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n-            result = masd.getStandardDeviation();\n+            int count = 0;\n         }\n         return result;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 273, 
          "faulty": "return this.data.getColumnCount();", 
          "type": "InsertBefore", 
          "seed": "List result=null;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 126, 
          "faulty": "return getMeanValue(row,column);", 
          "type": "InsertBefore", 
          "seed": "double minval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "int count=dataset.getColumnCount();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 108, 
          "faulty": "MeanAndStandardDeviation masd=(MeanAndStandardDeviation)this.data.getObject(row,column);", 
          "type": "InsertBefore", 
          "seed": "double m=0.0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_218/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:42:17.194644563 -0500\n@@ -204,14 +204,6 @@\n         StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n     }\n                 \n     /**\n@@ -251,7 +243,6 @@\n             rectY = rectY + row * (state.getBarWidth() + seriesGap);\n         }\n         else {\n-            rectY = rectY + row * state.getBarWidth();\n         }\n \n         // BAR X\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_218/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:42:17.198644678 -0500\n@@ -92,7 +92,10 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_218/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:42:17.198644678 -0500\n@@ -105,7 +105,8 @@\n      */\n     public Number getMeanValue(int row, int column) {\n         Number result = null;\n-        MeanAndStandardDeviation masd \n+        double m = 0.0;\n+\t\tMeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n             result = masd.getMean();\n@@ -123,7 +124,8 @@\n      * @return The value.\n      */\n     public Number getValue(int row, int column) {\n-        return getMeanValue(row, column);\n+        double minval = Double.NaN;\n+\t\treturn getMeanValue(row, column);\n     }\n \n     /**\n@@ -270,7 +272,8 @@\n      * @return The column count.\n      */\n     public int getColumnCount() {\n-        return this.data.getColumnCount();\n+        List result = null;\n+\t\treturn this.data.getColumnCount();\n     }\n \n     /**\n@@ -377,9 +380,11 @@\n         Range result = null;\n         if (includeInterval) {\n             if (!Double.isNaN(this.minimumRangeValueIncStdDev) \n-                    && !Double.isNaN(this.maximumRangeValueIncStdDev))\n-            result = new Range(this.minimumRangeValueIncStdDev, \n-                    this.maximumRangeValueIncStdDev);\n+                    && !Double.isNaN(this.maximumRangeValueIncStdDev)) {\n+\t\t\t\tdouble sumX2 = 0.0;\n+\t\t\t\tresult = new Range(this.minimumRangeValueIncStdDev,\n+\t\t\t\t\t\tthis.maximumRangeValueIncStdDev);\n+\t\t\t}\n         }\n         else {\n             if (!Double.isNaN(this.minimumRangeValue) \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "Replace", 
          "seed": "double result=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 273, 
          "faulty": "return this.data.getColumnCount();", 
          "type": "InsertBefore", 
          "seed": "List result=null;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 126, 
          "faulty": "return getMeanValue(row,column);", 
          "type": "InsertBefore", 
          "seed": "double minval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "int count=dataset.getColumnCount();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 273, 
          "faulty": "return this.data.getColumnCount();", 
          "type": "InsertBefore", 
          "seed": "double sumXX=0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 247, 
          "faulty": "int categoryCount=getColumnCount();", 
          "type": "Replace", 
          "seed": "PlotOrientation orient=plot.getOrientation();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "Replace", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "int seriesCount=getRowCount();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_254/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:42:35.447174359 -0500\n@@ -204,14 +204,6 @@\n         StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n     }\n                 \n     /**\n@@ -243,17 +235,8 @@\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                 dataArea, xAxisLocation);\n \n-        int seriesCount = getRowCount();\n-        int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n+        Number dataValue = dataset.getValue(row, column);\n+        PlotOrientation orient = plot.getOrientation();\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_254/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:42:35.451174475 -0500\n@@ -92,7 +92,12 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_254/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:42:35.451174475 -0500\n@@ -123,7 +123,8 @@\n      * @return The value.\n      */\n     public Number getValue(int row, int column) {\n-        return getMeanValue(row, column);\n+        double minval = Double.NaN;\n+\t\treturn getMeanValue(row, column);\n     }\n \n     /**\n@@ -270,7 +271,9 @@\n      * @return The column count.\n      */\n     public int getColumnCount() {\n-        return this.data.getColumnCount();\n+        List result = null;\n+\t\tdouble sumXX = 0;\n+\t\treturn this.data.getColumnCount();\n     }\n \n     /**\n@@ -377,9 +380,11 @@\n         Range result = null;\n         if (includeInterval) {\n             if (!Double.isNaN(this.minimumRangeValueIncStdDev) \n-                    && !Double.isNaN(this.maximumRangeValueIncStdDev))\n-            result = new Range(this.minimumRangeValueIncStdDev, \n-                    this.maximumRangeValueIncStdDev);\n+                    && !Double.isNaN(this.maximumRangeValueIncStdDev)) {\n+\t\t\t\tdouble sumX2 = 0.0;\n+\t\t\t\tresult = new Range(this.minimumRangeValueIncStdDev,\n+\t\t\t\t\t\tthis.maximumRangeValueIncStdDev);\n+\t\t\t}\n         }\n         else {\n             if (!Double.isNaN(this.minimumRangeValue) \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_28/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:40:24.255366270 -0500\n@@ -204,14 +204,6 @@\n         StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n     }\n                 \n     /**\n@@ -245,15 +237,6 @@\n \n         int seriesCount = getRowCount();\n         int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_28/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:40:24.255366270 -0500\n@@ -92,7 +92,8 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "Replace", 
          "seed": "double result=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 107, 
          "faulty": "Number result=null;", 
          "type": "InsertBefore", 
          "seed": "this.maximumRangeValue=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 169, 
          "faulty": "Number result=null;", 
          "type": "InsertBefore", 
          "seed": "double sumX=0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 246, 
          "faulty": "return this.data.getRowKey(row);", 
          "type": "InsertBefore", 
          "seed": "this.minimumRangeValue=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "Delete", 
          "seed": "GanttCategoryDataset gcd=(GanttCategoryDataset)dataset;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_113/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:41:17.204903265 -0500\n@@ -204,14 +204,6 @@\n         StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n     }\n                 \n     /**\n@@ -243,17 +235,7 @@\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                 dataArea, xAxisLocation);\n \n-        int seriesCount = getRowCount();\n         int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_113/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:41:17.208903381 -0500\n@@ -92,7 +92,10 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_113/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:41:17.208903381 -0500\n@@ -104,7 +104,8 @@\n      * @return The mean value.\n      */\n     public Number getMeanValue(int row, int column) {\n-        Number result = null;\n+        this.maximumRangeValue = Double.NaN;\n+\t\tNumber result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n@@ -166,7 +167,8 @@\n      * @return The standard deviation.\n      */\n     public Number getStdDevValue(int row, int column) {\n-        Number result = null;\n+        double sumX = 0;\n+\t\tNumber result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n@@ -243,7 +245,8 @@\n      * @return The row key.\n      */\n     public Comparable getRowKey(int row) {\n-        return this.data.getRowKey(row);\n+        this.minimumRangeValue = Double.NaN;\n+\t\treturn this.data.getRowKey(row);\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "Delete", 
          "seed": "this.minimumRangeValueIncStdDev=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 111, 
          "faulty": "result=masd.getMean();", 
          "type": "InsertBefore", 
          "seed": "result=masd.getStandardDeviation();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 104, 
          "faulty": "return this.standardDeviation;", 
          "type": "InsertBefore", 
          "seed": "double sumXX=0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return new Icon(){\n  public void paintIcon(  Component c,  Graphics g,  int x,  int y){\n    Graphics2D g2=(Graphics2D)g;\n    path.transform(AffineTransform.getTranslateInstance(x,y));\n    if (fillPaint != null) {\n      g2.setPaint(fillPaint);\n      g2.fill(path);\n    }\n    if (outlinePaint != null) {\n      g2.setPaint(outlinePaint);\n      g2.draw(path);\n    }\n    path.transform(AffineTransform.getTranslateInstance(-x,-y));\n  }\n  public int getIconWidth(){\n    return width;\n  }\n  public int getIconHeight(){\n    return height;\n  }\n}\n;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 263, 
          "faulty": "double uclip=getUpperClip();", 
          "type": "InsertBefore", 
          "seed": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 126, 
          "faulty": "return getMeanValue(row,column);", 
          "type": "InsertBefore", 
          "seed": "double maxval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 169, 
          "faulty": "Number result=null;", 
          "type": "InsertBefore", 
          "seed": "int count=0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 243, 
          "faulty": "double rectY=domainAxis.getCategoryStart(column,getColumnCount(),dataArea,xAxisLocation);", 
          "type": "InsertBefore", 
          "seed": "g2.setStroke(getItemOutlineStroke(row,column));"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 246, 
          "faulty": "return this.data.getRowKey(row);", 
          "type": "InsertBefore", 
          "seed": "double x=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 173, 
          "faulty": "result=masd.getStandardDeviation();", 
          "type": "Replace", 
          "seed": "result=masd.getMean();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 172, 
          "faulty": "if (masd != null) {\n  result=masd.getStandardDeviation();\n}", 
          "type": "Delete", 
          "seed": "if (masd != null) {\n  result=masd.getMean();\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_616/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:45:56.105005768 -0500\n@@ -239,28 +239,27 @@\n                                      \n         RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n         \n-        // BAR Y\n+        g2.setStroke(getItemOutlineStroke(row, column));\n+\t\t// BAR Y\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                 dataArea, xAxisLocation);\n \n         int seriesCount = getRowCount();\n         int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n         double value = meanValue.doubleValue();\n         double base = 0.0;\n         double lclip = getLowerClip();\n-        double uclip = getUpperClip();\n+        if (seriesCount > 1) {\n+\t\t\tdouble seriesGap = dataArea.getHeight() * getItemMargin()\n+\t\t\t\t\t/ (categoryCount * (seriesCount - 1));\n+\t\t\trectY = rectY + row * (state.getBarWidth() + seriesGap);\n+\t\t} else {\n+\t\t\trectY = rectY + row * state.getBarWidth();\n+\t\t}\n+\t\tdouble uclip = getUpperClip();\n \n         if (uclip <= 0.0) {  // cases 1, 2, 3 and 4\n             if (value >= uclip) {\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_616/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:45:56.105005768 -0500\n@@ -101,7 +101,8 @@\n      * @return The standard deviation.\n      */\n     public Number getStandardDeviation() {\n-        return this.standardDeviation;\n+        double sumXX = 0;\n+\t\treturn this.standardDeviation;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_616/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:45:56.105005768 -0500\n@@ -107,9 +107,6 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getMean();\n-        }\n         return result;\n     }\n \n@@ -123,7 +120,8 @@\n      * @return The value.\n      */\n     public Number getValue(int row, int column) {\n-        return getMeanValue(row, column);\n+        double maxval = Double.NaN;\n+\t\treturn getMeanValue(row, column);\n     }\n \n     /**\n@@ -166,12 +164,10 @@\n      * @return The standard deviation.\n      */\n     public Number getStdDevValue(int row, int column) {\n-        Number result = null;\n+        int count = 0;\n+\t\tNumber result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getStandardDeviation();\n-        }\n         return result;\n     }\n \n@@ -243,7 +239,8 @@\n      * @return The row key.\n      */\n     public Comparable getRowKey(int row) {\n-        return this.data.getRowKey(row);\n+        double x = 0.0;\n+\t\treturn this.data.getRowKey(row);\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "Replace", 
          "seed": "double result=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 107, 
          "faulty": "Number result=null;", 
          "type": "InsertBefore", 
          "seed": "this.maximumRangeValue=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "Replace", 
          "seed": "double result=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 107, 
          "faulty": "Number result=null;", 
          "type": "InsertBefore", 
          "seed": "this.maximumRangeValue=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 169, 
          "faulty": "Number result=null;", 
          "type": "InsertBefore", 
          "seed": "double sumX=0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 246, 
          "faulty": "return this.data.getRowKey(row);", 
          "type": "InsertBefore", 
          "seed": "this.minimumRangeValue=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 265, 
          "faulty": "if (uclip <= 0.0) {\n  if (value >= uclip) {\n    return;\n  }\n  base=uclip;\n  if (value <= lclip) {\n    value=lclip;\n  }\n}\n else if (lclip <= 0.0) {\n  if (value >= uclip) {\n    value=uclip;\n  }\n else {\n    if (value <= lclip) {\n      value=lclip;\n    }\n  }\n}\n else {\n  if (value <= lclip) {\n    return;\n  }\n  base=getLowerClip();\n  if (value >= uclip) {\n    value=uclip;\n  }\n}", 
          "type": "Replace", 
          "seed": "double previous=state.getSeriesRunningTotal();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_94/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:41:06.556594174 -0500\n@@ -204,14 +204,6 @@\n         StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n     }\n                 \n     /**\n@@ -243,17 +235,8 @@\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                 dataArea, xAxisLocation);\n \n-        int seriesCount = getRowCount();\n+        double result = Double.NaN;\n         int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n@@ -262,34 +245,7 @@\n         double lclip = getLowerClip();\n         double uclip = getUpperClip();\n \n-        if (uclip <= 0.0) {  // cases 1, 2, 3 and 4\n-            if (value >= uclip) {\n-                return; // bar is not visible\n-            }\n-            base = uclip;\n-            if (value <= lclip) {\n-                value = lclip;\n-            }\n-        }\n-        else if (lclip <= 0.0) { // cases 5, 6, 7 and 8\n-            if (value >= uclip) {\n-                value = uclip;\n-            }\n-            else {\n-                if (value <= lclip) {\n-                    value = lclip;\n-                }\n-            }\n-        }\n-        else { // cases 9, 10, 11 and 12\n-            if (value <= lclip) {\n-                return; // bar is not visible\n-            }\n-            base = getLowerClip();\n-            if (value >= uclip) {\n-               value = uclip;\n-            }\n-        }\n+        double previous = state.getSeriesRunningTotal();\n \n         RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n         double transY1 = rangeAxis.valueToJava2D(base, dataArea, yAxisLocation);\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_94/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:41:06.556594174 -0500\n@@ -92,7 +92,11 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_94/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:41:06.560594291 -0500\n@@ -104,7 +104,9 @@\n      * @return The mean value.\n      */\n     public Number getMeanValue(int row, int column) {\n-        Number result = null;\n+        this.maximumRangeValue = Double.NaN;\n+\t\tthis.maximumRangeValue = Double.NaN;\n+\t\tNumber result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n@@ -166,7 +168,8 @@\n      * @return The standard deviation.\n      */\n     public Number getStdDevValue(int row, int column) {\n-        Number result = null;\n+        double sumX = 0;\n+\t\tNumber result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n@@ -243,7 +246,8 @@\n      * @return The row key.\n      */\n     public Comparable getRowKey(int row) {\n-        return this.data.getRowKey(row);\n+        this.minimumRangeValue = Double.NaN;\n+\t\treturn this.data.getRowKey(row);\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "Replace", 
          "seed": "double result=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 126, 
          "faulty": "return getMeanValue(row,column);", 
          "type": "InsertBefore", 
          "seed": "double minval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "Replace", 
          "seed": "double sum=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 243, 
          "faulty": "double rectY=domainAxis.getCategoryStart(column,getColumnCount(),dataArea,xAxisLocation);", 
          "type": "InsertBefore", 
          "seed": "CategoryPlot p=getPlot();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 113, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "if (masd != null) {\n  result=masd.getStandardDeviation();\n}"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "InsertBefore", 
          "seed": "setNegativeItemLabelPositionFallback(null);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "InsertBefore", 
          "seed": "double minval=Double.NaN;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_239/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:42:27.158933785 -0500\n@@ -204,14 +204,6 @@\n         StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n     }\n                 \n     /**\n@@ -239,21 +231,14 @@\n                                      \n         RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n         \n-        // BAR Y\n+        CategoryPlot p = getPlot();\n+\t\t// BAR Y\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                 dataArea, xAxisLocation);\n \n-        int seriesCount = getRowCount();\n+        setNegativeItemLabelPositionFallback(null);\n+\t\tdouble result = Double.NaN;\n         int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_239/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:42:27.162933903 -0500\n@@ -92,7 +92,13 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_239/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:42:27.162933903 -0500\n@@ -107,10 +107,12 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n+        double minval = Double.NaN;\n+\t\tdouble sum = 0.0;\n         if (masd != null) {\n-            result = masd.getMean();\n-        }\n-        return result;\n+\t\t\tresult = masd.getStandardDeviation();\n+\t\t}\n+\t\treturn result;\n     }\n \n     /**\n@@ -123,7 +125,8 @@\n      * @return The value.\n      */\n     public Number getValue(int row, int column) {\n-        return getMeanValue(row, column);\n+        double minval = Double.NaN;\n+\t\treturn getMeanValue(row, column);\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 274, 
          "faulty": "if (lclip <= 0.0) {\n  if (value >= uclip) {\n    value=uclip;\n  }\n else {\n    if (value <= lclip) {\n      value=lclip;\n    }\n  }\n}\n else {\n  if (value <= lclip) {\n    return;\n  }\n  base=getLowerClip();\n  if (value >= uclip) {\n    value=uclip;\n  }\n}", 
          "type": "Delete", 
          "seed": "double rectX=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "Delete", 
          "seed": "return HistogramType.FREQUENCY;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_192/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:42:01.862199520 -0500\n@@ -204,14 +204,6 @@\n         StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n     }\n                 \n     /**\n@@ -245,15 +237,6 @@\n \n         int seriesCount = getRowCount();\n         int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n@@ -270,26 +253,8 @@\n             if (value <= lclip) {\n                 value = lclip;\n             }\n-        }\n-        else if (lclip <= 0.0) { // cases 5, 6, 7 and 8\n-            if (value >= uclip) {\n-                value = uclip;\n-            }\n-            else {\n-                if (value <= lclip) {\n-                    value = lclip;\n-                }\n-            }\n-        }\n-        else { // cases 9, 10, 11 and 12\n-            if (value <= lclip) {\n-                return; // bar is not visible\n-            }\n-            base = getLowerClip();\n-            if (value >= uclip) {\n-               value = uclip;\n-            }\n-        }\n+        } else\n+\t\t\t;\n \n         RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n         double transY1 = rangeAxis.valueToJava2D(base, dataArea, yAxisLocation);\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_192/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:42:01.866199636 -0500\n@@ -92,7 +92,10 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_192/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:42:01.866199636 -0500\n@@ -107,9 +107,6 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getMean();\n-        }\n         return result;\n     }\n \n@@ -377,9 +374,11 @@\n         Range result = null;\n         if (includeInterval) {\n             if (!Double.isNaN(this.minimumRangeValueIncStdDev) \n-                    && !Double.isNaN(this.maximumRangeValueIncStdDev))\n-            result = new Range(this.minimumRangeValueIncStdDev, \n-                    this.maximumRangeValueIncStdDev);\n+                    && !Double.isNaN(this.maximumRangeValueIncStdDev)) {\n+\t\t\t\tdouble sumX2 = 0.0;\n+\t\t\t\tresult = new Range(this.minimumRangeValueIncStdDev,\n+\t\t\t\t\t\tthis.maximumRangeValueIncStdDev);\n+\t\t\t}\n         }\n         else {\n             if (!Double.isNaN(this.minimumRangeValue) \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 170, 
          "faulty": "MeanAndStandardDeviation masd=(MeanAndStandardDeviation)this.data.getObject(row,column);", 
          "type": "InsertBefore", 
          "seed": "double minRegularValue=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "Replace", 
          "seed": "double result=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 107, 
          "faulty": "Number result=null;", 
          "type": "InsertBefore", 
          "seed": "this.maximumRangeValue=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 169, 
          "faulty": "Number result=null;", 
          "type": "InsertBefore", 
          "seed": "double sumX=0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 246, 
          "faulty": "return this.data.getRowKey(row);", 
          "type": "InsertBefore", 
          "seed": "this.minimumRangeValue=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "Delete", 
          "seed": "GanttCategoryDataset gcd=(GanttCategoryDataset)dataset;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 113, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "this.maximumRangeValue=Double.NaN;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_103/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:41:11.596740477 -0500\n@@ -204,14 +204,6 @@\n         StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n     }\n                 \n     /**\n@@ -243,17 +235,7 @@\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                 dataArea, xAxisLocation);\n \n-        int seriesCount = getRowCount();\n         int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_103/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:41:11.596740477 -0500\n@@ -92,7 +92,8 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_103/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:41:11.600740593 -0500\n@@ -104,13 +104,15 @@\n      * @return The mean value.\n      */\n     public Number getMeanValue(int row, int column) {\n-        Number result = null;\n+        this.maximumRangeValue = Double.NaN;\n+\t\tNumber result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n             result = masd.getMean();\n         }\n-        return result;\n+        this.maximumRangeValue = Double.NaN;\n+\t\treturn result;\n     }\n \n     /**\n@@ -166,8 +168,10 @@\n      * @return The standard deviation.\n      */\n     public Number getStdDevValue(int row, int column) {\n-        Number result = null;\n-        MeanAndStandardDeviation masd \n+        double sumX = 0;\n+\t\tNumber result = null;\n+        double minRegularValue = Double.POSITIVE_INFINITY;\n+\t\tMeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n             result = masd.getStandardDeviation();\n@@ -243,7 +247,8 @@\n      * @return The row key.\n      */\n     public Comparable getRowKey(int row) {\n-        return this.data.getRowKey(row);\n+        this.minimumRangeValue = Double.NaN;\n+\t\treturn this.data.getRowKey(row);\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 111, 
          "faulty": "result=masd.getMean();", 
          "type": "Delete", 
          "seed": "int count=0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 175, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "double m=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 389, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "double minval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Replace", 
          "seed": "setIncludeBaseInRange(false);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 172, 
          "faulty": "if (masd != null) {\n  result=masd.getStandardDeviation();\n}", 
          "type": "InsertBefore", 
          "seed": "double sumX=0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 274, 
          "faulty": "if (lclip <= 0.0) {\n  if (value >= uclip) {\n    value=uclip;\n  }\n else {\n    if (value <= lclip) {\n      value=lclip;\n    }\n  }\n}\n else {\n  if (value <= lclip) {\n    return;\n  }\n  base=getLowerClip();\n  if (value >= uclip) {\n    value=uclip;\n  }\n}", 
          "type": "Delete", 
          "seed": "double yy2=0.0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_343/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:43:27.328681010 -0500\n@@ -204,14 +204,7 @@\n         StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n+        setIncludeBaseInRange(false);\n     }\n                 \n     /**\n@@ -245,15 +238,6 @@\n \n         int seriesCount = getRowCount();\n         int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n@@ -270,26 +254,8 @@\n             if (value <= lclip) {\n                 value = lclip;\n             }\n-        }\n-        else if (lclip <= 0.0) { // cases 5, 6, 7 and 8\n-            if (value >= uclip) {\n-                value = uclip;\n-            }\n-            else {\n-                if (value <= lclip) {\n-                    value = lclip;\n-                }\n-            }\n-        }\n-        else { // cases 9, 10, 11 and 12\n-            if (value <= lclip) {\n-                return; // bar is not visible\n-            }\n-            base = getLowerClip();\n-            if (value >= uclip) {\n-               value = uclip;\n-            }\n-        }\n+        } else\n+\t\t\t;\n \n         RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n         double transY1 = rangeAxis.valueToJava2D(base, dataArea, yAxisLocation);\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_343/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:43:27.332681126 -0500\n@@ -92,7 +92,9 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\tthis.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_343/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:43:27.332681126 -0500\n@@ -108,7 +108,6 @@\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n-            result = masd.getMean();\n         }\n         return result;\n     }\n@@ -169,10 +168,12 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n+        double sumX = 0;\n+\t\tif (masd != null) {\n             result = masd.getStandardDeviation();\n         }\n-        return result;\n+        double m = 0.0;\n+\t\treturn result;\n     }\n \n     /**\n@@ -377,16 +378,19 @@\n         Range result = null;\n         if (includeInterval) {\n             if (!Double.isNaN(this.minimumRangeValueIncStdDev) \n-                    && !Double.isNaN(this.maximumRangeValueIncStdDev))\n-            result = new Range(this.minimumRangeValueIncStdDev, \n-                    this.maximumRangeValueIncStdDev);\n+                    && !Double.isNaN(this.maximumRangeValueIncStdDev)) {\n+\t\t\t\tdouble sumX2 = 0.0;\n+\t\t\t\tresult = new Range(this.minimumRangeValueIncStdDev,\n+\t\t\t\t\t\tthis.maximumRangeValueIncStdDev);\n+\t\t\t}\n         }\n         else {\n             if (!Double.isNaN(this.minimumRangeValue) \n                     && !Double.isNaN(this.maximumRangeValue))\n             result = new Range(this.minimumRangeValue, this.maximumRangeValue);            \n         }\n-        return result;\n+        double minval = Double.NaN;\n+\t\treturn result;\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "InsertBefore", 
          "seed": "Rectangle2D bar=null;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "Replace", 
          "seed": "double xx0=domainAxis.getCategoryStart(column,getColumnCount(),dataArea,plot.getDomainAxisEdge());"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_210/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:42:13.178527991 -0500\n@@ -201,17 +201,10 @@\n             throw new IllegalArgumentException(\n                 \"Requires StatisticalCategoryDataset.\");\n         }\n-        StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n+        double xx0 = domainAxis.getCategoryStart(column, getColumnCount(),\n+\t\t\t\tdataArea, plot.getDomainAxisEdge());\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n     }\n                 \n     /**\n@@ -245,15 +238,6 @@\n \n         int seriesCount = getRowCount();\n         int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_210/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:42:13.182528107 -0500\n@@ -92,7 +92,10 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_210/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:42:13.182528107 -0500\n@@ -377,9 +377,11 @@\n         Range result = null;\n         if (includeInterval) {\n             if (!Double.isNaN(this.minimumRangeValueIncStdDev) \n-                    && !Double.isNaN(this.maximumRangeValueIncStdDev))\n-            result = new Range(this.minimumRangeValueIncStdDev, \n-                    this.maximumRangeValueIncStdDev);\n+                    && !Double.isNaN(this.maximumRangeValueIncStdDev)) {\n+\t\t\t\tdouble sumX2 = 0.0;\n+\t\t\t\tresult = new Range(this.minimumRangeValueIncStdDev,\n+\t\t\t\t\t\tthis.maximumRangeValueIncStdDev);\n+\t\t\t}\n         }\n         else {\n             if (!Double.isNaN(this.minimumRangeValue) \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "Delete", 
          "seed": "this.minimumRangeValueIncStdDev=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 111, 
          "faulty": "result=masd.getMean();", 
          "type": "InsertBefore", 
          "seed": "result=masd.getStandardDeviation();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 173, 
          "faulty": "result=masd.getStandardDeviation();", 
          "type": "Replace", 
          "seed": "double m=0.0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_516/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:45:05.163525002 -0500\n@@ -204,14 +204,6 @@\n         StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n     }\n                 \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_516/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:45:05.163525002 -0500\n@@ -92,7 +92,12 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_516/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:45:05.167525119 -0500\n@@ -107,9 +107,6 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getMean();\n-        }\n         return result;\n     }\n \n@@ -170,7 +167,7 @@\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n-            result = masd.getStandardDeviation();\n+            double m = 0.0;\n         }\n         return result;\n     }\n@@ -377,9 +374,11 @@\n         Range result = null;\n         if (includeInterval) {\n             if (!Double.isNaN(this.minimumRangeValueIncStdDev) \n-                    && !Double.isNaN(this.maximumRangeValueIncStdDev))\n-            result = new Range(this.minimumRangeValueIncStdDev, \n-                    this.maximumRangeValueIncStdDev);\n+                    && !Double.isNaN(this.maximumRangeValueIncStdDev)) {\n+\t\t\t\tdouble sumX2 = 0.0;\n+\t\t\t\tresult = new Range(this.minimumRangeValueIncStdDev,\n+\t\t\t\t\t\tthis.maximumRangeValueIncStdDev);\n+\t\t\t}\n         }\n         else {\n             if (!Double.isNaN(this.minimumRangeValue) \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "double uclip=getUpperClip();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 200, 
          "faulty": "if (!(data instanceof StatisticalCategoryDataset)) {\n  throw new IllegalArgumentException(\"Requires StatisticalCategoryDataset.\");\n}", 
          "type": "Delete", 
          "seed": "Stroke stroke=plot.getRangeGridlineStroke();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "InsertBefore", 
          "seed": "if (masd != null) {\n  result=masd.getStandardDeviation();\n}"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "double uclip=getUpperClip();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 200, 
          "faulty": "if (!(data instanceof StatisticalCategoryDataset)) {\n  throw new IllegalArgumentException(\"Requires StatisticalCategoryDataset.\");\n}", 
          "type": "Delete", 
          "seed": "Stroke stroke=plot.getRangeGridlineStroke();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "InsertBefore", 
          "seed": "if (masd != null) {\n  result=masd.getStandardDeviation();\n}"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 111, 
          "faulty": "result=masd.getMean();", 
          "type": "Delete", 
          "seed": "int count=0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 175, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "double m=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 389, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "double minval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Replace", 
          "seed": "setIncludeBaseInRange(false);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 172, 
          "faulty": "if (masd != null) {\n  result=masd.getStandardDeviation();\n}", 
          "type": "InsertBefore", 
          "seed": "double sumX=0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 274, 
          "faulty": "if (lclip <= 0.0) {\n  if (value >= uclip) {\n    value=uclip;\n  }\n else {\n    if (value <= lclip) {\n      value=lclip;\n    }\n  }\n}\n else {\n  if (value <= lclip) {\n    return;\n  }\n  base=getLowerClip();\n  if (value >= uclip) {\n    value=uclip;\n  }\n}", 
          "type": "Delete", 
          "seed": "double yy2=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 273, 
          "faulty": "return this.data.getColumnCount();", 
          "type": "InsertBefore", 
          "seed": "double[] result=new double[2];"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "Delete", 
          "seed": "if (this.errorIndicatorPaint != null) {\n  g2.setPaint(this.errorIndicatorPaint);\n}\n else {\n  g2.setPaint(getItemOutlinePaint(row,column));\n}"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "Replace", 
          "seed": "double sumY=0.0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_359/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:43:35.580920904 -0500\n@@ -196,22 +196,8 @@\n                          int column,\n                          int pass) {\n \n-        // defensive check\n-        if (!(data instanceof StatisticalCategoryDataset)) {\n-            throw new IllegalArgumentException(\n-                \"Requires StatisticalCategoryDataset.\");\n-        }\n-        StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n-\n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n+        setIncludeBaseInRange(false);\n     }\n                 \n     /**\n@@ -245,15 +231,6 @@\n \n         int seriesCount = getRowCount();\n         int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n@@ -270,26 +247,8 @@\n             if (value <= lclip) {\n                 value = lclip;\n             }\n-        }\n-        else if (lclip <= 0.0) { // cases 5, 6, 7 and 8\n-            if (value >= uclip) {\n-                value = uclip;\n-            }\n-            else {\n-                if (value <= lclip) {\n-                    value = lclip;\n-                }\n-            }\n-        }\n-        else { // cases 9, 10, 11 and 12\n-            if (value <= lclip) {\n-                return; // bar is not visible\n-            }\n-            base = getLowerClip();\n-            if (value >= uclip) {\n-               value = uclip;\n-            }\n-        }\n+        } else\n+\t\t\t;\n \n         RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n         double transY1 = rangeAxis.valueToJava2D(base, dataArea, yAxisLocation);\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_359/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:43:35.580920904 -0500\n@@ -92,7 +92,10 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_359/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:43:35.584921019 -0500\n@@ -108,8 +108,12 @@\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n-            result = masd.getMean();\n-        }\n+\t\t\tresult = masd.getStandardDeviation();\n+\t\t}\n+\t\tif (masd != null) {\n+\t\t\tresult = masd.getStandardDeviation();\n+\t\t}\n+\t\tdouble sumY = 0.0;\n         return result;\n     }\n \n@@ -169,10 +173,12 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n+        double sumX = 0;\n+\t\tif (masd != null) {\n             result = masd.getStandardDeviation();\n         }\n-        return result;\n+        double m = 0.0;\n+\t\treturn result;\n     }\n \n     /**\n@@ -270,7 +276,8 @@\n      * @return The column count.\n      */\n     public int getColumnCount() {\n-        return this.data.getColumnCount();\n+        double[] result = new double[2];\n+\t\treturn this.data.getColumnCount();\n     }\n \n     /**\n@@ -377,16 +384,19 @@\n         Range result = null;\n         if (includeInterval) {\n             if (!Double.isNaN(this.minimumRangeValueIncStdDev) \n-                    && !Double.isNaN(this.maximumRangeValueIncStdDev))\n-            result = new Range(this.minimumRangeValueIncStdDev, \n-                    this.maximumRangeValueIncStdDev);\n+                    && !Double.isNaN(this.maximumRangeValueIncStdDev)) {\n+\t\t\t\tdouble sumX2 = 0.0;\n+\t\t\t\tresult = new Range(this.minimumRangeValueIncStdDev,\n+\t\t\t\t\t\tthis.maximumRangeValueIncStdDev);\n+\t\t\t}\n         }\n         else {\n             if (!Double.isNaN(this.minimumRangeValue) \n                     && !Double.isNaN(this.maximumRangeValue))\n             result = new Range(this.minimumRangeValue, this.maximumRangeValue);            \n         }\n-        return result;\n+        double minval = Double.NaN;\n+\t\treturn result;\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "Delete", 
          "seed": "this.minimumRangeValueIncStdDev=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 126, 
          "faulty": "return getMeanValue(row,column);", 
          "type": "InsertBefore", 
          "seed": "double maxval=Double.NaN;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_568/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:45:31.276284053 -0500\n@@ -107,9 +107,6 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getMean();\n-        }\n         return result;\n     }\n \n@@ -123,7 +120,8 @@\n      * @return The value.\n      */\n     public Number getValue(int row, int column) {\n-        return getMeanValue(row, column);\n+        double maxval = Double.NaN;\n+\t\treturn getMeanValue(row, column);\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "Delete", 
          "seed": "this.minimumRangeValueIncStdDev=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 111, 
          "faulty": "result=masd.getMean();", 
          "type": "InsertBefore", 
          "seed": "result=masd.getStandardDeviation();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 126, 
          "faulty": "return getMeanValue(row,column);", 
          "type": "InsertBefore", 
          "seed": "double max=-Double.MAX_VALUE;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 111, 
          "faulty": "result=masd.getMean();", 
          "type": "Delete", 
          "seed": "double maxOutlier=Double.NEGATIVE_INFINITY;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 260, 
          "faulty": "double value=meanValue.doubleValue();", 
          "type": "InsertBefore", 
          "seed": "g2.setPaint(Color.lightGray);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_541/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:45:16.755861972 -0500\n@@ -257,7 +257,8 @@\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n-        double value = meanValue.doubleValue();\n+        g2.setPaint(Color.lightGray);\n+\t\tdouble value = meanValue.doubleValue();\n         double base = 0.0;\n         double lclip = getLowerClip();\n         double uclip = getUpperClip();\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_541/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:45:16.755861972 -0500\n@@ -92,7 +92,8 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_541/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:45:16.759862088 -0500\n@@ -107,9 +107,6 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getMean();\n-        }\n         return result;\n     }\n \n@@ -123,7 +120,8 @@\n      * @return The value.\n      */\n     public Number getValue(int row, int column) {\n-        return getMeanValue(row, column);\n+        double max = -Double.MAX_VALUE;\n+\t\treturn getMeanValue(row, column);\n     }\n \n     /**\n@@ -377,9 +375,11 @@\n         Range result = null;\n         if (includeInterval) {\n             if (!Double.isNaN(this.minimumRangeValueIncStdDev) \n-                    && !Double.isNaN(this.maximumRangeValueIncStdDev))\n-            result = new Range(this.minimumRangeValueIncStdDev, \n-                    this.maximumRangeValueIncStdDev);\n+                    && !Double.isNaN(this.maximumRangeValueIncStdDev)) {\n+\t\t\t\tdouble sumX2 = 0.0;\n+\t\t\t\tresult = new Range(this.minimumRangeValueIncStdDev,\n+\t\t\t\t\t\tthis.maximumRangeValueIncStdDev);\n+\t\t\t}\n         }\n         else {\n             if (!Double.isNaN(this.minimumRangeValue) \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "Replace", 
          "seed": "double result=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 107, 
          "faulty": "Number result=null;", 
          "type": "InsertBefore", 
          "seed": "this.maximumRangeValue=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 169, 
          "faulty": "Number result=null;", 
          "type": "InsertBefore", 
          "seed": "double sumX=0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 246, 
          "faulty": "return this.data.getRowKey(row);", 
          "type": "InsertBefore", 
          "seed": "this.minimumRangeValue=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "Delete", 
          "seed": "GanttCategoryDataset gcd=(GanttCategoryDataset)dataset;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 208, 
          "faulty": "drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);", 
          "type": "Replace", 
          "seed": "Composite originalComposite=g2.getComposite();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 169, 
          "faulty": "Number result=null;", 
          "type": "InsertBefore", 
          "seed": "double max=-Double.MAX_VALUE;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_165/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:41:46.437751803 -0500\n@@ -204,14 +204,6 @@\n         StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n     }\n                 \n     /**\n@@ -243,17 +235,7 @@\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                 dataArea, xAxisLocation);\n \n-        int seriesCount = getRowCount();\n         int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_165/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:41:46.441751919 -0500\n@@ -92,7 +92,8 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_165/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:41:46.445752035 -0500\n@@ -104,7 +104,8 @@\n      * @return The mean value.\n      */\n     public Number getMeanValue(int row, int column) {\n-        Number result = null;\n+        this.maximumRangeValue = Double.NaN;\n+\t\tNumber result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n@@ -166,7 +167,9 @@\n      * @return The standard deviation.\n      */\n     public Number getStdDevValue(int row, int column) {\n-        Number result = null;\n+        double sumX = 0;\n+\t\tdouble max = -Double.MAX_VALUE;\n+\t\tNumber result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n@@ -243,7 +246,8 @@\n      * @return The row key.\n      */\n     public Comparable getRowKey(int row) {\n-        return this.data.getRowKey(row);\n+        this.minimumRangeValue = Double.NaN;\n+\t\treturn this.data.getRowKey(row);\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "InsertBefore", 
          "seed": "if (masd != null) {\n  result=masd.getStandardDeviation();\n}"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 111, 
          "faulty": "result=masd.getMean();", 
          "type": "Delete", 
          "seed": "int count=0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 175, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "double m=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 389, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "double minval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Replace", 
          "seed": "setIncludeBaseInRange(false);"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "InsertBefore", 
          "seed": "PlotOrientation orient=plot.getOrientation();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 379, 
          "faulty": "if (!Double.isNaN(this.minimumRangeValueIncStdDev) && !Double.isNaN(this.maximumRangeValueIncStdDev)) result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double x=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 170, 
          "faulty": "MeanAndStandardDeviation masd=(MeanAndStandardDeviation)this.data.getObject(row,column);", 
          "type": "InsertBefore", 
          "seed": "this.minimumRangeValue=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 111, 
          "faulty": "result=masd.getMean();", 
          "type": "Delete", 
          "seed": "double maxRegularValue=Double.NEGATIVE_INFINITY;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 111, 
          "faulty": "result=masd.getMean();", 
          "type": "Delete", 
          "seed": "this.maximumRangeValueIncStdDev=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 377, 
          "faulty": "Range result=null;", 
          "type": "InsertBefore", 
          "seed": "double sd=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 206, 
          "faulty": "PlotOrientation orientation=plot.getOrientation();", 
          "type": "Replace", 
          "seed": "double previous=state.getSeriesRunningTotal();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_442/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:44:27.114418961 -0500\n@@ -203,15 +203,8 @@\n         }\n         StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n-        PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n+        double previous = state.getSeriesRunningTotal();\n+        PlotOrientation orient = plot.getOrientation();\n     }\n                 \n     /**\n@@ -245,15 +238,6 @@\n \n         int seriesCount = getRowCount();\n         int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_442/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:44:27.118419076 -0500\n@@ -92,7 +92,13 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_442/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:44:27.118419076 -0500\n@@ -108,7 +108,9 @@\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n-            result = masd.getMean();\n+\t\t\tresult = masd.getStandardDeviation();\n+\t\t}\n+\t\tif (masd != null) {\n         }\n         return result;\n     }\n@@ -167,12 +169,14 @@\n      */\n     public Number getStdDevValue(int row, int column) {\n         Number result = null;\n-        MeanAndStandardDeviation masd \n+        this.minimumRangeValue = Double.NaN;\n+\t\tMeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n             result = masd.getStandardDeviation();\n         }\n-        return result;\n+        double m = 0.0;\n+\t\treturn result;\n     }\n \n     /**\n@@ -374,19 +378,24 @@\n      * @return The range.\n      */\n     public Range getRangeBounds(boolean includeInterval) {\n-        Range result = null;\n+        double sd = 0.0;\n+\t\tRange result = null;\n         if (includeInterval) {\n-            if (!Double.isNaN(this.minimumRangeValueIncStdDev) \n-                    && !Double.isNaN(this.maximumRangeValueIncStdDev))\n-            result = new Range(this.minimumRangeValueIncStdDev, \n-                    this.maximumRangeValueIncStdDev);\n+            double x = 0.0;\n+\t\t\tif (!Double.isNaN(this.minimumRangeValueIncStdDev) \n+                    && !Double.isNaN(this.maximumRangeValueIncStdDev)) {\n+\t\t\t\tdouble sumX2 = 0.0;\n+\t\t\t\tresult = new Range(this.minimumRangeValueIncStdDev,\n+\t\t\t\t\t\tthis.maximumRangeValueIncStdDev);\n+\t\t\t}\n         }\n         else {\n             if (!Double.isNaN(this.minimumRangeValue) \n                     && !Double.isNaN(this.maximumRangeValue))\n             result = new Range(this.minimumRangeValue, this.maximumRangeValue);            \n         }\n-        return result;\n+        double minval = Double.NaN;\n+\t\treturn result;\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "Delete", 
          "seed": "this.minimumRangeValueIncStdDev=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 111, 
          "faulty": "result=masd.getMean();", 
          "type": "InsertBefore", 
          "seed": "result=masd.getStandardDeviation();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_496/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:44:55.859254541 -0500\n@@ -204,14 +204,6 @@\n         StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n     }\n                 \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_496/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:44:55.859254541 -0500\n@@ -92,7 +92,12 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_496/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:44:55.863254656 -0500\n@@ -107,9 +107,6 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getMean();\n-        }\n         return result;\n     }\n \n@@ -377,9 +374,11 @@\n         Range result = null;\n         if (includeInterval) {\n             if (!Double.isNaN(this.minimumRangeValueIncStdDev) \n-                    && !Double.isNaN(this.maximumRangeValueIncStdDev))\n-            result = new Range(this.minimumRangeValueIncStdDev, \n-                    this.maximumRangeValueIncStdDev);\n+                    && !Double.isNaN(this.maximumRangeValueIncStdDev)) {\n+\t\t\t\tdouble sumX2 = 0.0;\n+\t\t\t\tresult = new Range(this.minimumRangeValueIncStdDev,\n+\t\t\t\t\t\tthis.maximumRangeValueIncStdDev);\n+\t\t\t}\n         }\n         else {\n             if (!Double.isNaN(this.minimumRangeValue) \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "Delete", 
          "seed": "this.minimumRangeValueIncStdDev=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 111, 
          "faulty": "result=masd.getMean();", 
          "type": "InsertBefore", 
          "seed": "result=masd.getStandardDeviation();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "InsertBefore", 
          "seed": "float x0=(float)dataArea.getX();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_508/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:45:01.667423376 -0500\n@@ -204,14 +204,6 @@\n         StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n     }\n                 \n     /**\n@@ -251,7 +243,8 @@\n             rectY = rectY + row * (state.getBarWidth() + seriesGap);\n         }\n         else {\n-            rectY = rectY + row * state.getBarWidth();\n+            float x0 = (float) dataArea.getX();\n+\t\t\trectY = rectY + row * state.getBarWidth();\n         }\n \n         // BAR X\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_508/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:45:01.671423491 -0500\n@@ -92,7 +92,12 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_508/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:45:01.671423491 -0500\n@@ -107,9 +107,6 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getMean();\n-        }\n         return result;\n     }\n \n@@ -377,9 +374,11 @@\n         Range result = null;\n         if (includeInterval) {\n             if (!Double.isNaN(this.minimumRangeValueIncStdDev) \n-                    && !Double.isNaN(this.maximumRangeValueIncStdDev))\n-            result = new Range(this.minimumRangeValueIncStdDev, \n-                    this.maximumRangeValueIncStdDev);\n+                    && !Double.isNaN(this.maximumRangeValueIncStdDev)) {\n+\t\t\t\tdouble sumX2 = 0.0;\n+\t\t\t\tresult = new Range(this.minimumRangeValueIncStdDev,\n+\t\t\t\t\t\tthis.maximumRangeValueIncStdDev);\n+\t\t\t}\n         }\n         else {\n             if (!Double.isNaN(this.minimumRangeValue) \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "Replace", 
          "seed": "double result=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "Replace", 
          "seed": "double result=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "Replace", 
          "seed": "double result=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 107, 
          "faulty": "Number result=null;", 
          "type": "InsertBefore", 
          "seed": "this.maximumRangeValue=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 169, 
          "faulty": "Number result=null;", 
          "type": "InsertBefore", 
          "seed": "double sumX=0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 246, 
          "faulty": "return this.data.getRowKey(row);", 
          "type": "InsertBefore", 
          "seed": "this.minimumRangeValue=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 265, 
          "faulty": "if (uclip <= 0.0) {\n  if (value >= uclip) {\n    return;\n  }\n  base=uclip;\n  if (value <= lclip) {\n    value=lclip;\n  }\n}\n else if (lclip <= 0.0) {\n  if (value >= uclip) {\n    value=uclip;\n  }\n else {\n    if (value <= lclip) {\n      value=lclip;\n    }\n  }\n}\n else {\n  if (value <= lclip) {\n    return;\n  }\n  base=getLowerClip();\n  if (value >= uclip) {\n    value=uclip;\n  }\n}", 
          "type": "Replace", 
          "seed": "double previous=state.getSeriesRunningTotal();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 200, 
          "faulty": "if (!(data instanceof StatisticalCategoryDataset)) {\n  throw new IllegalArgumentException(\"Requires StatisticalCategoryDataset.\");\n}", 
          "type": "InsertBefore", 
          "seed": "plot.drawBackground(g2,dataArea);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 108, 
          "faulty": "MeanAndStandardDeviation masd=(MeanAndStandardDeviation)this.data.getObject(row,column);", 
          "type": "InsertBefore", 
          "seed": "double maxRegularValue=Double.NEGATIVE_INFINITY;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "InsertBefore", 
          "seed": "int series=0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 170, 
          "faulty": "MeanAndStandardDeviation masd=(MeanAndStandardDeviation)this.data.getObject(row,column);", 
          "type": "InsertBefore", 
          "seed": "double minRegularValue=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "Replace", 
          "seed": "double result=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 200, 
          "faulty": "if (!(data instanceof StatisticalCategoryDataset)) {\n  throw new IllegalArgumentException(\"Requires StatisticalCategoryDataset.\");\n}", 
          "type": "InsertBefore", 
          "seed": "double rectBreadth=state.getBarWidth();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 265, 
          "faulty": "if (uclip <= 0.0) {\n  if (value >= uclip) {\n    return;\n  }\n  base=uclip;\n  if (value <= lclip) {\n    value=lclip;\n  }\n}\n else if (lclip <= 0.0) {\n  if (value >= uclip) {\n    value=uclip;\n  }\n else {\n    if (value <= lclip) {\n      value=lclip;\n    }\n  }\n}\n else {\n  if (value <= lclip) {\n    return;\n  }\n  base=getLowerClip();\n  if (value >= uclip) {\n    value=uclip;\n  }\n}", 
          "type": "Delete", 
          "seed": "boolean inverted=rangeAxis.isInverted();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 260, 
          "faulty": "double value=meanValue.doubleValue();", 
          "type": "InsertBefore", 
          "seed": "Line2D line2=null;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 200, 
          "faulty": "if (!(data instanceof StatisticalCategoryDataset)) {\n  throw new IllegalArgumentException(\"Requires StatisticalCategoryDataset.\");\n}", 
          "type": "InsertBefore", 
          "seed": "int baseIndex=-1;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 258, 
          "faulty": "Number meanValue=dataset.getMeanValue(row,column);", 
          "type": "InsertBefore", 
          "seed": "this.errorIndicatorStroke=new BasicStroke(0.5f);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_160/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:41:43.713672733 -0500\n@@ -196,22 +196,18 @@\n                          int column,\n                          int pass) {\n \n-        // defensive check\n+        plot.drawBackground(g2, dataArea);\n+\t\t\t\t\t\t\tdouble rectBreadth = state.getBarWidth();\n+\t\t\t\t\t\t\tint baseIndex = -1;\n+\t\t// defensive check\n         if (!(data instanceof StatisticalCategoryDataset)) {\n             throw new IllegalArgumentException(\n                 \"Requires StatisticalCategoryDataset.\");\n         }\n-        StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n+        int series = 0;\n+\t\tStatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n     }\n                 \n     /**\n@@ -243,54 +239,18 @@\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                 dataArea, xAxisLocation);\n \n-        int seriesCount = getRowCount();\n+        double result = Double.NaN;\n         int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n-        // BAR X\n+        this.errorIndicatorStroke = new BasicStroke(0.5f);\n+\t\t// BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n-        double value = meanValue.doubleValue();\n+        Line2D line2 = null;\n+\t\tdouble value = meanValue.doubleValue();\n         double base = 0.0;\n         double lclip = getLowerClip();\n         double uclip = getUpperClip();\n \n-        if (uclip <= 0.0) {  // cases 1, 2, 3 and 4\n-            if (value >= uclip) {\n-                return; // bar is not visible\n-            }\n-            base = uclip;\n-            if (value <= lclip) {\n-                value = lclip;\n-            }\n-        }\n-        else if (lclip <= 0.0) { // cases 5, 6, 7 and 8\n-            if (value >= uclip) {\n-                value = uclip;\n-            }\n-            else {\n-                if (value <= lclip) {\n-                    value = lclip;\n-                }\n-            }\n-        }\n-        else { // cases 9, 10, 11 and 12\n-            if (value <= lclip) {\n-                return; // bar is not visible\n-            }\n-            base = getLowerClip();\n-            if (value >= uclip) {\n-               value = uclip;\n-            }\n-        }\n-\n         RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n         double transY1 = rangeAxis.valueToJava2D(base, dataArea, yAxisLocation);\n         double transY2 = rangeAxis.valueToJava2D(value, dataArea, \n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_160/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:41:43.717672849 -0500\n@@ -92,7 +92,12 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_160/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:41:43.717672849 -0500\n@@ -104,8 +104,10 @@\n      * @return The mean value.\n      */\n     public Number getMeanValue(int row, int column) {\n-        Number result = null;\n-        MeanAndStandardDeviation masd \n+        this.maximumRangeValue = Double.NaN;\n+\t\tNumber result = null;\n+        double maxRegularValue = Double.NEGATIVE_INFINITY;\n+\t\tMeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n             result = masd.getMean();\n@@ -166,8 +168,10 @@\n      * @return The standard deviation.\n      */\n     public Number getStdDevValue(int row, int column) {\n-        Number result = null;\n-        MeanAndStandardDeviation masd \n+        double sumX = 0;\n+\t\tNumber result = null;\n+        double minRegularValue = Double.POSITIVE_INFINITY;\n+\t\tMeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n             result = masd.getStandardDeviation();\n@@ -243,7 +247,8 @@\n      * @return The row key.\n      */\n     public Comparable getRowKey(int row) {\n-        return this.data.getRowKey(row);\n+        this.minimumRangeValue = Double.NaN;\n+\t\treturn this.data.getRowKey(row);\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 273, 
          "faulty": "return this.data.getColumnCount();", 
          "type": "InsertBefore", 
          "seed": "List result=null;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 126, 
          "faulty": "return getMeanValue(row,column);", 
          "type": "InsertBefore", 
          "seed": "double minval=Double.NaN;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_197/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:42:04.454274759 -0500\n@@ -204,14 +204,6 @@\n         StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n     }\n                 \n     /**\n@@ -245,15 +237,6 @@\n \n         int seriesCount = getRowCount();\n         int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_197/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:42:04.458274875 -0500\n@@ -92,7 +92,10 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_197/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:42:04.458274875 -0500\n@@ -123,7 +123,8 @@\n      * @return The value.\n      */\n     public Number getValue(int row, int column) {\n-        return getMeanValue(row, column);\n+        double minval = Double.NaN;\n+\t\treturn getMeanValue(row, column);\n     }\n \n     /**\n@@ -270,7 +271,8 @@\n      * @return The column count.\n      */\n     public int getColumnCount() {\n-        return this.data.getColumnCount();\n+        List result = null;\n+\t\treturn this.data.getColumnCount();\n     }\n \n     /**\n@@ -377,9 +379,11 @@\n         Range result = null;\n         if (includeInterval) {\n             if (!Double.isNaN(this.minimumRangeValueIncStdDev) \n-                    && !Double.isNaN(this.maximumRangeValueIncStdDev))\n-            result = new Range(this.minimumRangeValueIncStdDev, \n-                    this.maximumRangeValueIncStdDev);\n+                    && !Double.isNaN(this.maximumRangeValueIncStdDev)) {\n+\t\t\t\tdouble sumX2 = 0.0;\n+\t\t\t\tresult = new Range(this.minimumRangeValueIncStdDev,\n+\t\t\t\t\t\tthis.maximumRangeValueIncStdDev);\n+\t\t\t}\n         }\n         else {\n             if (!Double.isNaN(this.minimumRangeValue) \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "Replace", 
          "seed": "double result=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "Replace", 
          "seed": "double result=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 107, 
          "faulty": "Number result=null;", 
          "type": "InsertBefore", 
          "seed": "this.maximumRangeValue=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "Replace", 
          "seed": "double result=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "Replace", 
          "seed": "double result=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "Replace", 
          "seed": "double result=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "Replace", 
          "seed": "double result=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 107, 
          "faulty": "Number result=null;", 
          "type": "InsertBefore", 
          "seed": "this.maximumRangeValue=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 169, 
          "faulty": "Number result=null;", 
          "type": "InsertBefore", 
          "seed": "double sumX=0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 246, 
          "faulty": "return this.data.getRowKey(row);", 
          "type": "InsertBefore", 
          "seed": "this.minimumRangeValue=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 265, 
          "faulty": "if (uclip <= 0.0) {\n  if (value >= uclip) {\n    return;\n  }\n  base=uclip;\n  if (value <= lclip) {\n    value=lclip;\n  }\n}\n else if (lclip <= 0.0) {\n  if (value >= uclip) {\n    value=uclip;\n  }\n else {\n    if (value <= lclip) {\n      value=lclip;\n    }\n  }\n}\n else {\n  if (value <= lclip) {\n    return;\n  }\n  base=getLowerClip();\n  if (value >= uclip) {\n    value=uclip;\n  }\n}", 
          "type": "Replace", 
          "seed": "double previous=state.getSeriesRunningTotal();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 200, 
          "faulty": "if (!(data instanceof StatisticalCategoryDataset)) {\n  throw new IllegalArgumentException(\"Requires StatisticalCategoryDataset.\");\n}", 
          "type": "InsertBefore", 
          "seed": "plot.drawBackground(g2,dataArea);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 108, 
          "faulty": "MeanAndStandardDeviation masd=(MeanAndStandardDeviation)this.data.getObject(row,column);", 
          "type": "InsertBefore", 
          "seed": "double maxRegularValue=Double.NEGATIVE_INFINITY;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "InsertBefore", 
          "seed": "int series=0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "InsertBefore", 
          "seed": "RectangleEdge location=plot.getRangeAxisEdge();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 111, 
          "faulty": "result=masd.getMean();", 
          "type": "InsertBefore", 
          "seed": "if (masd != null) {\n  result=masd.getStandardDeviation();\n}"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 263, 
          "faulty": "double uclip=getUpperClip();", 
          "type": "Delete", 
          "seed": "GeneralPath top=new GeneralPath();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_151/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:41:39.533551397 -0500\n@@ -196,22 +196,16 @@\n                          int column,\n                          int pass) {\n \n-        // defensive check\n+        plot.drawBackground(g2, dataArea);\n+\t\t// defensive check\n         if (!(data instanceof StatisticalCategoryDataset)) {\n             throw new IllegalArgumentException(\n                 \"Requires StatisticalCategoryDataset.\");\n         }\n-        StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n+        int series = 0;\n+\t\tStatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n     }\n                 \n     /**\n@@ -243,53 +237,16 @@\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                 dataArea, xAxisLocation);\n \n-        int seriesCount = getRowCount();\n+        RectangleEdge location = plot.getRangeAxisEdge();\n+\t\tdouble result = Double.NaN;\n         int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n         double value = meanValue.doubleValue();\n         double base = 0.0;\n         double lclip = getLowerClip();\n-        double uclip = getUpperClip();\n-\n-        if (uclip <= 0.0) {  // cases 1, 2, 3 and 4\n-            if (value >= uclip) {\n-                return; // bar is not visible\n-            }\n-            base = uclip;\n-            if (value <= lclip) {\n-                value = lclip;\n-            }\n-        }\n-        else if (lclip <= 0.0) { // cases 5, 6, 7 and 8\n-            if (value >= uclip) {\n-                value = uclip;\n-            }\n-            else {\n-                if (value <= lclip) {\n-                    value = lclip;\n-                }\n-            }\n-        }\n-        else { // cases 9, 10, 11 and 12\n-            if (value <= lclip) {\n-                return; // bar is not visible\n-            }\n-            base = getLowerClip();\n-            if (value >= uclip) {\n-               value = uclip;\n-            }\n-        }\n+        double previous = state.getSeriesRunningTotal();\n \n         RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n         double transY1 = rangeAxis.valueToJava2D(base, dataArea, yAxisLocation);\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_151/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:41:39.537551513 -0500\n@@ -92,7 +92,14 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_151/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:41:39.537551513 -0500\n@@ -104,11 +104,17 @@\n      * @return The mean value.\n      */\n     public Number getMeanValue(int row, int column) {\n-        Number result = null;\n-        MeanAndStandardDeviation masd \n+        this.maximumRangeValue = Double.NaN;\n+\t\tthis.maximumRangeValue = Double.NaN;\n+\t\tNumber result = null;\n+        double maxRegularValue = Double.NEGATIVE_INFINITY;\n+\t\tMeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n-            result = masd.getMean();\n+            if (masd != null) {\n+\t\t\t\tresult = masd.getStandardDeviation();\n+\t\t\t}\n+\t\t\tresult = masd.getMean();\n         }\n         return result;\n     }\n@@ -166,7 +172,8 @@\n      * @return The standard deviation.\n      */\n     public Number getStdDevValue(int row, int column) {\n-        Number result = null;\n+        double sumX = 0;\n+\t\tNumber result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n@@ -243,7 +250,8 @@\n      * @return The row key.\n      */\n     public Comparable getRowKey(int row) {\n-        return this.data.getRowKey(row);\n+        this.minimumRangeValue = Double.NaN;\n+\t\treturn this.data.getRowKey(row);\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "double uclip=getUpperClip();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 200, 
          "faulty": "if (!(data instanceof StatisticalCategoryDataset)) {\n  throw new IllegalArgumentException(\"Requires StatisticalCategoryDataset.\");\n}", 
          "type": "Delete", 
          "seed": "Stroke stroke=plot.getRangeGridlineStroke();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 273, 
          "faulty": "return this.data.getColumnCount();", 
          "type": "InsertBefore", 
          "seed": "double sumXX=0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 247, 
          "faulty": "int categoryCount=getColumnCount();", 
          "type": "Replace", 
          "seed": "PlotOrientation orient=plot.getOrientation();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "InsertBefore", 
          "seed": "setNegativeItemLabelPositionFallback(null);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "InsertBefore", 
          "seed": "double minval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "Composite originalComposite=g2.getComposite();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "Delete", 
          "seed": "double aRadius=0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 175, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "double y=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "InsertBefore", 
          "seed": "PlotOrientation orient=plot.getOrientation();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 379, 
          "faulty": "if (!Double.isNaN(this.minimumRangeValueIncStdDev) && !Double.isNaN(this.maximumRangeValueIncStdDev)) result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double x=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 111, 
          "faulty": "result=masd.getMean();", 
          "type": "Delete", 
          "seed": "return HistogramType.FREQUENCY;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_414/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:44:11.769972909 -0500\n@@ -196,22 +196,8 @@\n                          int column,\n                          int pass) {\n \n-        // defensive check\n-        if (!(data instanceof StatisticalCategoryDataset)) {\n-            throw new IllegalArgumentException(\n-                \"Requires StatisticalCategoryDataset.\");\n-        }\n-        StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n-\n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n+        PlotOrientation orient = plot.getOrientation();\n     }\n                 \n     /**\n@@ -243,17 +229,9 @@\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                 dataArea, xAxisLocation);\n \n-        int seriesCount = getRowCount();\n-        int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n+        setNegativeItemLabelPositionFallback(null);\n+\t\tint seriesCount = getRowCount();\n+        PlotOrientation orient = plot.getOrientation();\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_414/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:44:11.769972909 -0500\n@@ -92,7 +92,13 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_414/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:44:11.773973026 -0500\n@@ -107,8 +107,8 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getMean();\n+        double minval = Double.NaN;\n+\t\tif (masd != null) {\n         }\n         return result;\n     }\n@@ -172,7 +172,8 @@\n         if (masd != null) {\n             result = masd.getStandardDeviation();\n         }\n-        return result;\n+        double y = 0.0;\n+\t\treturn result;\n     }\n \n     /**\n@@ -270,7 +271,8 @@\n      * @return The column count.\n      */\n     public int getColumnCount() {\n-        return this.data.getColumnCount();\n+        double sumXX = 0;\n+\t\treturn this.data.getColumnCount();\n     }\n \n     /**\n@@ -376,10 +378,13 @@\n     public Range getRangeBounds(boolean includeInterval) {\n         Range result = null;\n         if (includeInterval) {\n-            if (!Double.isNaN(this.minimumRangeValueIncStdDev) \n-                    && !Double.isNaN(this.maximumRangeValueIncStdDev))\n-            result = new Range(this.minimumRangeValueIncStdDev, \n-                    this.maximumRangeValueIncStdDev);\n+            double x = 0.0;\n+\t\t\tif (!Double.isNaN(this.minimumRangeValueIncStdDev) \n+                    && !Double.isNaN(this.maximumRangeValueIncStdDev)) {\n+\t\t\t\tdouble sumX2 = 0.0;\n+\t\t\t\tresult = new Range(this.minimumRangeValueIncStdDev,\n+\t\t\t\t\t\tthis.maximumRangeValueIncStdDev);\n+\t\t\t}\n         }\n         else {\n             if (!Double.isNaN(this.minimumRangeValue) \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 389, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "double minval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Replace", 
          "seed": "setIncludeBaseInRange(false);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 273, 
          "faulty": "return this.data.getColumnCount();", 
          "type": "InsertBefore", 
          "seed": "double sumXX=0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 247, 
          "faulty": "int categoryCount=getColumnCount();", 
          "type": "Replace", 
          "seed": "PlotOrientation orient=plot.getOrientation();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "InsertBefore", 
          "seed": "setNegativeItemLabelPositionFallback(null);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "InsertBefore", 
          "seed": "double minval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "Composite originalComposite=g2.getComposite();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "Delete", 
          "seed": "double aRadius=0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 175, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "double y=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "InsertBefore", 
          "seed": "PlotOrientation orient=plot.getOrientation();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 379, 
          "faulty": "if (!Double.isNaN(this.minimumRangeValueIncStdDev) && !Double.isNaN(this.maximumRangeValueIncStdDev)) result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double x=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 170, 
          "faulty": "MeanAndStandardDeviation masd=(MeanAndStandardDeviation)this.data.getObject(row,column);", 
          "type": "InsertBefore", 
          "seed": "this.minimumRangeValue=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 265, 
          "faulty": "if (uclip <= 0.0) {\n  if (value >= uclip) {\n    return;\n  }\n  base=uclip;\n  if (value <= lclip) {\n    value=lclip;\n  }\n}\n else if (lclip <= 0.0) {\n  if (value >= uclip) {\n    value=uclip;\n  }\n else {\n    if (value <= lclip) {\n      value=lclip;\n    }\n  }\n}\n else {\n  if (value <= lclip) {\n    return;\n  }\n  base=getLowerClip();\n  if (value >= uclip) {\n    value=uclip;\n  }\n}", 
          "type": "Delete", 
          "seed": "int itemCount=dataset.getColumnCount();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 104, 
          "faulty": "return this.standardDeviation;", 
          "type": "InsertBefore", 
          "seed": "this.standardDeviation=standardDeviation;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 265, 
          "faulty": "if (uclip <= 0.0) {\n  if (value >= uclip) {\n    return;\n  }\n  base=uclip;\n  if (value <= lclip) {\n    value=lclip;\n  }\n}\n else if (lclip <= 0.0) {\n  if (value >= uclip) {\n    value=uclip;\n  }\n else {\n    if (value <= lclip) {\n      value=lclip;\n    }\n  }\n}\n else {\n  if (value <= lclip) {\n    return;\n  }\n  base=getLowerClip();\n  if (value >= uclip) {\n    value=uclip;\n  }\n}", 
          "type": "Replace", 
          "seed": "g2.setPaint(getItemPaint(row,column));"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "InsertBefore", 
          "seed": "double minOutlier=Double.POSITIVE_INFINITY;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_418/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:44:14.162042444 -0500\n@@ -201,17 +201,8 @@\n             throw new IllegalArgumentException(\n                 \"Requires StatisticalCategoryDataset.\");\n         }\n-        StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n-\n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n+        PlotOrientation orient = plot.getOrientation();\n     }\n                 \n     /**\n@@ -243,17 +234,9 @@\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                 dataArea, xAxisLocation);\n \n-        int seriesCount = getRowCount();\n-        int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n+        setNegativeItemLabelPositionFallback(null);\n+\t\tint seriesCount = getRowCount();\n+        PlotOrientation orient = plot.getOrientation();\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n@@ -262,34 +245,7 @@\n         double lclip = getLowerClip();\n         double uclip = getUpperClip();\n \n-        if (uclip <= 0.0) {  // cases 1, 2, 3 and 4\n-            if (value >= uclip) {\n-                return; // bar is not visible\n-            }\n-            base = uclip;\n-            if (value <= lclip) {\n-                value = lclip;\n-            }\n-        }\n-        else if (lclip <= 0.0) { // cases 5, 6, 7 and 8\n-            if (value >= uclip) {\n-                value = uclip;\n-            }\n-            else {\n-                if (value <= lclip) {\n-                    value = lclip;\n-                }\n-            }\n-        }\n-        else { // cases 9, 10, 11 and 12\n-            if (value <= lclip) {\n-                return; // bar is not visible\n-            }\n-            base = getLowerClip();\n-            if (value >= uclip) {\n-               value = uclip;\n-            }\n-        }\n+        g2.setPaint(getItemPaint(row, column));\n \n         RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n         double transY1 = rangeAxis.valueToJava2D(base, dataArea, yAxisLocation);\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_418/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:44:14.162042444 -0500\n@@ -101,7 +101,8 @@\n      * @return The standard deviation.\n      */\n     public Number getStandardDeviation() {\n-        return this.standardDeviation;\n+        this.standardDeviation = standardDeviation;\n+\t\treturn this.standardDeviation;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_418/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:44:14.166042562 -0500\n@@ -107,7 +107,9 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n+        double minval = Double.NaN;\n+\t\tdouble minOutlier = Double.POSITIVE_INFINITY;\n+\t\tif (masd != null) {\n             result = masd.getMean();\n         }\n         return result;\n@@ -167,12 +169,14 @@\n      */\n     public Number getStdDevValue(int row, int column) {\n         Number result = null;\n-        MeanAndStandardDeviation masd \n+        this.minimumRangeValue = Double.NaN;\n+\t\tMeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n             result = masd.getStandardDeviation();\n         }\n-        return result;\n+        double y = 0.0;\n+\t\treturn result;\n     }\n \n     /**\n@@ -270,7 +274,8 @@\n      * @return The column count.\n      */\n     public int getColumnCount() {\n-        return this.data.getColumnCount();\n+        double sumXX = 0;\n+\t\treturn this.data.getColumnCount();\n     }\n \n     /**\n@@ -376,7 +381,8 @@\n     public Range getRangeBounds(boolean includeInterval) {\n         Range result = null;\n         if (includeInterval) {\n-            if (!Double.isNaN(this.minimumRangeValueIncStdDev) \n+            double x = 0.0;\n+\t\t\tif (!Double.isNaN(this.minimumRangeValueIncStdDev) \n                     && !Double.isNaN(this.maximumRangeValueIncStdDev))\n             result = new Range(this.minimumRangeValueIncStdDev, \n                     this.maximumRangeValueIncStdDev);\n@@ -386,7 +392,8 @@\n                     && !Double.isNaN(this.maximumRangeValue))\n             result = new Range(this.minimumRangeValue, this.maximumRangeValue);            \n         }\n-        return result;\n+        double minval = Double.NaN;\n+\t\treturn result;\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "InsertBefore", 
          "seed": "String urlText=null;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 208, 
          "faulty": "drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);", 
          "type": "Replace", 
          "seed": "double previous=state.getSeriesRunningTotal();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 200, 
          "faulty": "if (!(data instanceof StatisticalCategoryDataset)) {\n  throw new IllegalArgumentException(\"Requires StatisticalCategoryDataset.\");\n}", 
          "type": "InsertBefore", 
          "seed": "Line2D line1=null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_224/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:42:20.098728857 -0500\n@@ -196,7 +196,8 @@\n                          int column,\n                          int pass) {\n \n-        // defensive check\n+        Line2D line1 = null;\n+\t\t// defensive check\n         if (!(data instanceof StatisticalCategoryDataset)) {\n             throw new IllegalArgumentException(\n                 \"Requires StatisticalCategoryDataset.\");\n@@ -204,14 +205,7 @@\n         StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n+        String urlText = null;\n     }\n                 \n     /**\n@@ -245,15 +239,6 @@\n \n         int seriesCount = getRowCount();\n         int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_224/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:42:20.102728973 -0500\n@@ -92,7 +92,12 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_224/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:42:20.102728973 -0500\n@@ -377,9 +377,11 @@\n         Range result = null;\n         if (includeInterval) {\n             if (!Double.isNaN(this.minimumRangeValueIncStdDev) \n-                    && !Double.isNaN(this.maximumRangeValueIncStdDev))\n-            result = new Range(this.minimumRangeValueIncStdDev, \n-                    this.maximumRangeValueIncStdDev);\n+                    && !Double.isNaN(this.maximumRangeValueIncStdDev)) {\n+\t\t\t\tdouble sumX2 = 0.0;\n+\t\t\t\tresult = new Range(this.minimumRangeValueIncStdDev,\n+\t\t\t\t\t\tthis.maximumRangeValueIncStdDev);\n+\t\t\t}\n         }\n         else {\n             if (!Double.isNaN(this.minimumRangeValue) \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "Delete", 
          "seed": "this.minimumRangeValueIncStdDev=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 111, 
          "faulty": "result=masd.getMean();", 
          "type": "InsertBefore", 
          "seed": "result=masd.getStandardDeviation();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Replace", 
          "seed": "double xx2=domainAxis.getCategoryEnd(column,getColumnCount(),dataArea,plot.getDomainAxisEdge());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 126, 
          "faulty": "return getMeanValue(row,column);", 
          "type": "InsertBefore", 
          "seed": "double max=-Double.MAX_VALUE;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_513/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:45:03.707482677 -0500\n@@ -245,14 +245,8 @@\n \n         int seriesCount = getRowCount();\n         int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n+        double xx2 = domainAxis.getCategoryEnd(column, getColumnCount(),\n+\t\t\t\tdataArea, plot.getDomainAxisEdge());\n \n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_513/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:45:03.711482794 -0500\n@@ -92,7 +92,8 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_513/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:45:03.711482794 -0500\n@@ -107,9 +107,6 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getMean();\n-        }\n         return result;\n     }\n \n@@ -123,7 +120,8 @@\n      * @return The value.\n      */\n     public Number getValue(int row, int column) {\n-        return getMeanValue(row, column);\n+        double max = -Double.MAX_VALUE;\n+\t\treturn getMeanValue(row, column);\n     }\n \n     /**\n@@ -377,9 +375,11 @@\n         Range result = null;\n         if (includeInterval) {\n             if (!Double.isNaN(this.minimumRangeValueIncStdDev) \n-                    && !Double.isNaN(this.maximumRangeValueIncStdDev))\n-            result = new Range(this.minimumRangeValueIncStdDev, \n-                    this.maximumRangeValueIncStdDev);\n+                    && !Double.isNaN(this.maximumRangeValueIncStdDev)) {\n+\t\t\t\tdouble sumX2 = 0.0;\n+\t\t\t\tresult = new Range(this.minimumRangeValueIncStdDev,\n+\t\t\t\t\t\tthis.maximumRangeValueIncStdDev);\n+\t\t\t}\n         }\n         else {\n             if (!Double.isNaN(this.minimumRangeValue) \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "double space=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 247, 
          "faulty": "int categoryCount=getColumnCount();", 
          "type": "Replace", 
          "seed": "double barW=state.getBarWidth();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_57/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:40:44.007939644 -0500\n@@ -204,14 +204,6 @@\n         StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n     }\n                 \n     /**\n@@ -244,16 +236,7 @@\n                 dataArea, xAxisLocation);\n \n         int seriesCount = getRowCount();\n-        int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n+        double barW = state.getBarWidth();\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_57/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:40:44.011939760 -0500\n@@ -92,7 +92,8 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 273, 
          "faulty": "return this.data.getColumnCount();", 
          "type": "InsertBefore", 
          "seed": "List result=null;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 126, 
          "faulty": "return getMeanValue(row,column);", 
          "type": "InsertBefore", 
          "seed": "double minval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "int count=dataset.getColumnCount();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 273, 
          "faulty": "return this.data.getColumnCount();", 
          "type": "InsertBefore", 
          "seed": "double sumXX=0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 247, 
          "faulty": "int categoryCount=getColumnCount();", 
          "type": "Replace", 
          "seed": "PlotOrientation orient=plot.getOrientation();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 111, 
          "faulty": "result=masd.getMean();", 
          "type": "InsertBefore", 
          "seed": "int count=0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 200, 
          "faulty": "if (!(data instanceof StatisticalCategoryDataset)) {\n  throw new IllegalArgumentException(\"Requires StatisticalCategoryDataset.\");\n}", 
          "type": "Delete", 
          "seed": "this.errorIndicatorPaint=Color.gray;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 240, 
          "faulty": "RectangleEdge xAxisLocation=plot.getDomainAxisEdge();", 
          "type": "InsertBefore", 
          "seed": "int series=0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 247, 
          "faulty": "int categoryCount=getColumnCount();", 
          "type": "Replace", 
          "seed": "g2.setPaint(getItemPaint(row,column));"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_263/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:42:39.891303352 -0500\n@@ -196,22 +196,9 @@\n                          int column,\n                          int pass) {\n \n-        // defensive check\n-        if (!(data instanceof StatisticalCategoryDataset)) {\n-            throw new IllegalArgumentException(\n-                \"Requires StatisticalCategoryDataset.\");\n-        }\n         StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n     }\n                 \n     /**\n@@ -237,23 +224,15 @@\n                                       int row,\n                                       int column) {\n                                      \n-        RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n+        int series = 0;\n+\t\tRectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n         \n         // BAR Y\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                 dataArea, xAxisLocation);\n \n         int seriesCount = getRowCount();\n-        int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n+        g2.setPaint(getItemPaint(row, column));\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_263/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:42:39.895303470 -0500\n@@ -92,7 +92,10 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_263/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:42:39.895303470 -0500\n@@ -108,7 +108,8 @@\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n-            result = masd.getMean();\n+            int count = 0;\n+\t\t\tresult = masd.getMean();\n         }\n         return result;\n     }\n@@ -123,7 +124,8 @@\n      * @return The value.\n      */\n     public Number getValue(int row, int column) {\n-        return getMeanValue(row, column);\n+        double minval = Double.NaN;\n+\t\treturn getMeanValue(row, column);\n     }\n \n     /**\n@@ -270,7 +272,9 @@\n      * @return The column count.\n      */\n     public int getColumnCount() {\n-        return this.data.getColumnCount();\n+        List result = null;\n+\t\tdouble sumXX = 0;\n+\t\treturn this.data.getColumnCount();\n     }\n \n     /**\n@@ -377,9 +381,11 @@\n         Range result = null;\n         if (includeInterval) {\n             if (!Double.isNaN(this.minimumRangeValueIncStdDev) \n-                    && !Double.isNaN(this.maximumRangeValueIncStdDev))\n-            result = new Range(this.minimumRangeValueIncStdDev, \n-                    this.maximumRangeValueIncStdDev);\n+                    && !Double.isNaN(this.maximumRangeValueIncStdDev)) {\n+\t\t\t\tdouble sumX2 = 0.0;\n+\t\t\t\tresult = new Range(this.minimumRangeValueIncStdDev,\n+\t\t\t\t\t\tthis.maximumRangeValueIncStdDev);\n+\t\t\t}\n         }\n         else {\n             if (!Double.isNaN(this.minimumRangeValue) \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "Delete", 
          "seed": "this.minimumRangeValueIncStdDev=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 111, 
          "faulty": "result=masd.getMean();", 
          "type": "InsertBefore", 
          "seed": "result=masd.getStandardDeviation();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Replace", 
          "seed": "double xx2=domainAxis.getCategoryEnd(column,getColumnCount(),dataArea,plot.getDomainAxisEdge());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "InsertBefore", 
          "seed": "g2.setStroke(plot.getRangeGridlineStroke());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 243, 
          "faulty": "double rectY=domainAxis.getCategoryStart(column,getColumnCount(),dataArea,xAxisLocation);", 
          "type": "InsertBefore", 
          "seed": "double currentItemMargin=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 104, 
          "faulty": "return this.standardDeviation;", 
          "type": "InsertBefore", 
          "seed": "double sumXX=0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return new Icon(){\n  public void paintIcon(  Component c,  Graphics g,  int x,  int y){\n    Graphics2D g2=(Graphics2D)g;\n    path.transform(AffineTransform.getTranslateInstance(x,y));\n    if (fillPaint != null) {\n      g2.setPaint(fillPaint);\n      g2.fill(path);\n    }\n    if (outlinePaint != null) {\n      g2.setPaint(outlinePaint);\n      g2.draw(path);\n    }\n    path.transform(AffineTransform.getTranslateInstance(-x,-y));\n  }\n  public int getIconWidth(){\n    return width;\n  }\n  public int getIconHeight(){\n    return height;\n  }\n}\n;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 263, 
          "faulty": "double uclip=getUpperClip();", 
          "type": "InsertBefore", 
          "seed": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 126, 
          "faulty": "return getMeanValue(row,column);", 
          "type": "InsertBefore", 
          "seed": "double maxval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 169, 
          "faulty": "Number result=null;", 
          "type": "InsertBefore", 
          "seed": "int count=0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 243, 
          "faulty": "double rectY=domainAxis.getCategoryStart(column,getColumnCount(),dataArea,xAxisLocation);", 
          "type": "InsertBefore", 
          "seed": "g2.setStroke(getItemOutlineStroke(row,column));"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 246, 
          "faulty": "return this.data.getRowKey(row);", 
          "type": "InsertBefore", 
          "seed": "double x=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 173, 
          "faulty": "result=masd.getStandardDeviation();", 
          "type": "Replace", 
          "seed": "result=masd.getMean();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 172, 
          "faulty": "if (masd != null) {\n  result=masd.getStandardDeviation();\n}", 
          "type": "Delete", 
          "seed": "if (masd != null) {\n  result=masd.getMean();\n}"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "double barW0=domainAxis.getCategoryStart(column,getColumnCount(),dataArea,plot.getDomainAxisEdge());"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_621/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:45:58.565077277 -0500\n@@ -201,7 +201,8 @@\n             throw new IllegalArgumentException(\n                 \"Requires StatisticalCategoryDataset.\");\n         }\n-        StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n+        g2.setStroke(plot.getRangeGridlineStroke());\n+\t\tStatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n         if (orientation == PlotOrientation.HORIZONTAL) {\n@@ -239,28 +240,28 @@\n                                      \n         RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n         \n-        // BAR Y\n+        double currentItemMargin = 0.0;\n+\t\tg2.setStroke(getItemOutlineStroke(row, column));\n+\t\t// BAR Y\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                 dataArea, xAxisLocation);\n \n         int seriesCount = getRowCount();\n         int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n         double value = meanValue.doubleValue();\n         double base = 0.0;\n         double lclip = getLowerClip();\n-        double uclip = getUpperClip();\n+        if (seriesCount > 1) {\n+\t\t\tdouble seriesGap = dataArea.getHeight() * getItemMargin()\n+\t\t\t\t\t/ (categoryCount * (seriesCount - 1));\n+\t\t\trectY = rectY + row * (state.getBarWidth() + seriesGap);\n+\t\t} else {\n+\t\t\trectY = rectY + row * state.getBarWidth();\n+\t\t}\n+\t\tdouble uclip = getUpperClip();\n \n         if (uclip <= 0.0) {  // cases 1, 2, 3 and 4\n             if (value >= uclip) {\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_621/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:45:58.565077277 -0500\n@@ -101,7 +101,8 @@\n      * @return The standard deviation.\n      */\n     public Number getStandardDeviation() {\n-        return this.standardDeviation;\n+        double sumXX = 0;\n+\t\treturn this.standardDeviation;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_621/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:45:58.569077393 -0500\n@@ -107,9 +107,6 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getMean();\n-        }\n         return result;\n     }\n \n@@ -123,7 +120,8 @@\n      * @return The value.\n      */\n     public Number getValue(int row, int column) {\n-        return getMeanValue(row, column);\n+        double maxval = Double.NaN;\n+\t\treturn getMeanValue(row, column);\n     }\n \n     /**\n@@ -166,12 +164,10 @@\n      * @return The standard deviation.\n      */\n     public Number getStdDevValue(int row, int column) {\n-        Number result = null;\n+        int count = 0;\n+\t\tNumber result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getStandardDeviation();\n-        }\n         return result;\n     }\n \n@@ -243,7 +239,8 @@\n      * @return The row key.\n      */\n     public Comparable getRowKey(int row) {\n-        return this.data.getRowKey(row);\n+        double x = 0.0;\n+\t\treturn this.data.getRowKey(row);\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "InsertBefore", 
          "seed": "if (masd != null) {\n  result=masd.getStandardDeviation();\n}"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 111, 
          "faulty": "result=masd.getMean();", 
          "type": "Delete", 
          "seed": "int count=0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 175, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "double m=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 389, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "double minval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Replace", 
          "seed": "setIncludeBaseInRange(false);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 273, 
          "faulty": "return this.data.getColumnCount();", 
          "type": "InsertBefore", 
          "seed": "double sumXX=0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 247, 
          "faulty": "int categoryCount=getColumnCount();", 
          "type": "Replace", 
          "seed": "PlotOrientation orient=plot.getOrientation();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "InsertBefore", 
          "seed": "PlotOrientation orient=plot.getOrientation();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 379, 
          "faulty": "if (!Double.isNaN(this.minimumRangeValueIncStdDev) && !Double.isNaN(this.maximumRangeValueIncStdDev)) result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double x=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 170, 
          "faulty": "MeanAndStandardDeviation masd=(MeanAndStandardDeviation)this.data.getObject(row,column);", 
          "type": "InsertBefore", 
          "seed": "this.minimumRangeValue=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 111, 
          "faulty": "result=masd.getMean();", 
          "type": "Delete", 
          "seed": "double maxRegularValue=Double.NEGATIVE_INFINITY;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 247, 
          "faulty": "int categoryCount=getColumnCount();", 
          "type": "Replace", 
          "seed": "CategoryPlot cp=getPlot();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_460/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:44:36.290685707 -0500\n@@ -204,14 +204,7 @@\n         StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n+        PlotOrientation orient = plot.getOrientation();\n     }\n                 \n     /**\n@@ -244,16 +237,7 @@\n                 dataArea, xAxisLocation);\n \n         int seriesCount = getRowCount();\n-        int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n+        CategoryPlot cp = getPlot();\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_460/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:44:36.290685707 -0500\n@@ -92,7 +92,12 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_460/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:44:36.294685822 -0500\n@@ -108,7 +108,9 @@\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n-            result = masd.getMean();\n+\t\t\tresult = masd.getStandardDeviation();\n+\t\t}\n+\t\tif (masd != null) {\n         }\n         return result;\n     }\n@@ -167,12 +169,14 @@\n      */\n     public Number getStdDevValue(int row, int column) {\n         Number result = null;\n-        MeanAndStandardDeviation masd \n+        this.minimumRangeValue = Double.NaN;\n+\t\tMeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n             result = masd.getStandardDeviation();\n         }\n-        return result;\n+        double m = 0.0;\n+\t\treturn result;\n     }\n \n     /**\n@@ -270,7 +274,8 @@\n      * @return The column count.\n      */\n     public int getColumnCount() {\n-        return this.data.getColumnCount();\n+        double sumXX = 0;\n+\t\treturn this.data.getColumnCount();\n     }\n \n     /**\n@@ -376,17 +381,21 @@\n     public Range getRangeBounds(boolean includeInterval) {\n         Range result = null;\n         if (includeInterval) {\n-            if (!Double.isNaN(this.minimumRangeValueIncStdDev) \n-                    && !Double.isNaN(this.maximumRangeValueIncStdDev))\n-            result = new Range(this.minimumRangeValueIncStdDev, \n-                    this.maximumRangeValueIncStdDev);\n+            double x = 0.0;\n+\t\t\tif (!Double.isNaN(this.minimumRangeValueIncStdDev) \n+                    && !Double.isNaN(this.maximumRangeValueIncStdDev)) {\n+\t\t\t\tdouble sumX2 = 0.0;\n+\t\t\t\tresult = new Range(this.minimumRangeValueIncStdDev,\n+\t\t\t\t\t\tthis.maximumRangeValueIncStdDev);\n+\t\t\t}\n         }\n         else {\n             if (!Double.isNaN(this.minimumRangeValue) \n                     && !Double.isNaN(this.maximumRangeValue))\n             result = new Range(this.minimumRangeValue, this.maximumRangeValue);            \n         }\n-        return result;\n+        double minval = Double.NaN;\n+\t\treturn result;\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 258, 
          "faulty": "Number meanValue=dataset.getMeanValue(row,column);", 
          "type": "InsertBefore", 
          "seed": "Line2D line2=null;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "Replace", 
          "seed": "double result=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "Replace", 
          "seed": "double result=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "Replace", 
          "seed": "double result=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "Replace", 
          "seed": "double result=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 107, 
          "faulty": "Number result=null;", 
          "type": "InsertBefore", 
          "seed": "this.maximumRangeValue=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 169, 
          "faulty": "Number result=null;", 
          "type": "InsertBefore", 
          "seed": "double sumX=0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 246, 
          "faulty": "return this.data.getRowKey(row);", 
          "type": "InsertBefore", 
          "seed": "this.minimumRangeValue=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 265, 
          "faulty": "if (uclip <= 0.0) {\n  if (value >= uclip) {\n    return;\n  }\n  base=uclip;\n  if (value <= lclip) {\n    value=lclip;\n  }\n}\n else if (lclip <= 0.0) {\n  if (value >= uclip) {\n    value=uclip;\n  }\n else {\n    if (value <= lclip) {\n      value=lclip;\n    }\n  }\n}\n else {\n  if (value <= lclip) {\n    return;\n  }\n  base=getLowerClip();\n  if (value >= uclip) {\n    value=uclip;\n  }\n}", 
          "type": "Replace", 
          "seed": "double previous=state.getSeriesRunningTotal();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 200, 
          "faulty": "if (!(data instanceof StatisticalCategoryDataset)) {\n  throw new IllegalArgumentException(\"Requires StatisticalCategoryDataset.\");\n}", 
          "type": "InsertBefore", 
          "seed": "plot.drawBackground(g2,dataArea);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 108, 
          "faulty": "MeanAndStandardDeviation masd=(MeanAndStandardDeviation)this.data.getObject(row,column);", 
          "type": "InsertBefore", 
          "seed": "double maxRegularValue=Double.NEGATIVE_INFINITY;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "InsertBefore", 
          "seed": "int series=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_124/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:41:24.769122832 -0500\n@@ -196,22 +196,16 @@\n                          int column,\n                          int pass) {\n \n-        // defensive check\n+        plot.drawBackground(g2, dataArea);\n+\t\t// defensive check\n         if (!(data instanceof StatisticalCategoryDataset)) {\n             throw new IllegalArgumentException(\n                 \"Requires StatisticalCategoryDataset.\");\n         }\n-        StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n+        int series = 0;\n+\t\tStatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n     }\n                 \n     /**\n@@ -243,18 +237,10 @@\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                 dataArea, xAxisLocation);\n \n-        int seriesCount = getRowCount();\n+        double result = Double.NaN;\n         int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n-        // BAR X\n+        Line2D line2 = null;\n+\t\t// BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n         double value = meanValue.doubleValue();\n@@ -262,34 +248,7 @@\n         double lclip = getLowerClip();\n         double uclip = getUpperClip();\n \n-        if (uclip <= 0.0) {  // cases 1, 2, 3 and 4\n-            if (value >= uclip) {\n-                return; // bar is not visible\n-            }\n-            base = uclip;\n-            if (value <= lclip) {\n-                value = lclip;\n-            }\n-        }\n-        else if (lclip <= 0.0) { // cases 5, 6, 7 and 8\n-            if (value >= uclip) {\n-                value = uclip;\n-            }\n-            else {\n-                if (value <= lclip) {\n-                    value = lclip;\n-                }\n-            }\n-        }\n-        else { // cases 9, 10, 11 and 12\n-            if (value <= lclip) {\n-                return; // bar is not visible\n-            }\n-            base = getLowerClip();\n-            if (value >= uclip) {\n-               value = uclip;\n-            }\n-        }\n+        double previous = state.getSeriesRunningTotal();\n \n         RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n         double transY1 = rangeAxis.valueToJava2D(base, dataArea, yAxisLocation);\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_124/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:41:24.773122949 -0500\n@@ -92,7 +92,13 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_124/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:41:24.773122949 -0500\n@@ -104,8 +104,10 @@\n      * @return The mean value.\n      */\n     public Number getMeanValue(int row, int column) {\n-        Number result = null;\n-        MeanAndStandardDeviation masd \n+        this.maximumRangeValue = Double.NaN;\n+\t\tNumber result = null;\n+        double maxRegularValue = Double.NEGATIVE_INFINITY;\n+\t\tMeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n             result = masd.getMean();\n@@ -166,7 +168,8 @@\n      * @return The standard deviation.\n      */\n     public Number getStdDevValue(int row, int column) {\n-        Number result = null;\n+        double sumX = 0;\n+\t\tNumber result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n@@ -243,7 +246,8 @@\n      * @return The row key.\n      */\n     public Comparable getRowKey(int row) {\n-        return this.data.getRowKey(row);\n+        this.minimumRangeValue = Double.NaN;\n+\t\treturn this.data.getRowKey(row);\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "Delete", 
          "seed": "this.minimumRangeValueIncStdDev=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 111, 
          "faulty": "result=masd.getMean();", 
          "type": "InsertBefore", 
          "seed": "result=masd.getStandardDeviation();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "Delete", 
          "seed": "this.minimumRangeValueIncStdDev=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "InsertBefore", 
          "seed": "g2.setStroke(plot.getRangeGridlineStroke());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "InsertBefore", 
          "seed": "g2.setStroke(plot.getRangeGridlineStroke());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return new Icon(){\n  public void paintIcon(  Component c,  Graphics g,  int x,  int y){\n    Graphics2D g2=(Graphics2D)g;\n    path.transform(AffineTransform.getTranslateInstance(x,y));\n    if (fillPaint != null) {\n      g2.setPaint(fillPaint);\n      g2.fill(path);\n    }\n    if (outlinePaint != null) {\n      g2.setPaint(outlinePaint);\n      g2.draw(path);\n    }\n    path.transform(AffineTransform.getTranslateInstance(-x,-y));\n  }\n  public int getIconWidth(){\n    return width;\n  }\n  public int getIconHeight(){\n    return height;\n  }\n}\n;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 263, 
          "faulty": "double uclip=getUpperClip();", 
          "type": "InsertBefore", 
          "seed": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 246, 
          "faulty": "return this.data.getRowKey(row);", 
          "type": "InsertBefore", 
          "seed": "double x=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 173, 
          "faulty": "result=masd.getStandardDeviation();", 
          "type": "Replace", 
          "seed": "result=masd.getMean();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 172, 
          "faulty": "if (masd != null) {\n  result=masd.getStandardDeviation();\n}", 
          "type": "Delete", 
          "seed": "if (masd != null) {\n  result=masd.getMean();\n}"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "double barW0=domainAxis.getCategoryStart(column,getColumnCount(),dataArea,plot.getDomainAxisEdge());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 379, 
          "faulty": "if (!Double.isNaN(this.minimumRangeValueIncStdDev) && !Double.isNaN(this.maximumRangeValueIncStdDev)) result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_662/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:46:21.305738286 -0500\n@@ -201,7 +201,9 @@\n             throw new IllegalArgumentException(\n                 \"Requires StatisticalCategoryDataset.\");\n         }\n-        StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n+        g2.setStroke(plot.getRangeGridlineStroke());\n+\t\tg2.setStroke(plot.getRangeGridlineStroke());\n+\t\tStatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n         if (orientation == PlotOrientation.HORIZONTAL) {\n@@ -245,22 +247,20 @@\n \n         int seriesCount = getRowCount();\n         int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n         double value = meanValue.doubleValue();\n         double base = 0.0;\n         double lclip = getLowerClip();\n-        double uclip = getUpperClip();\n+        if (seriesCount > 1) {\n+\t\t\tdouble seriesGap = dataArea.getHeight() * getItemMargin()\n+\t\t\t\t\t/ (categoryCount * (seriesCount - 1));\n+\t\t\trectY = rectY + row * (state.getBarWidth() + seriesGap);\n+\t\t} else {\n+\t\t\trectY = rectY + row * state.getBarWidth();\n+\t\t}\n+\t\tdouble uclip = getUpperClip();\n \n         if (uclip <= 0.0) {  // cases 1, 2, 3 and 4\n             if (value >= uclip) {\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_662/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:46:21.305738286 -0500\n@@ -107,9 +107,6 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getMean();\n-        }\n         return result;\n     }\n \n@@ -169,9 +166,6 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getStandardDeviation();\n-        }\n         return result;\n     }\n \n@@ -243,7 +237,8 @@\n      * @return The row key.\n      */\n     public Comparable getRowKey(int row) {\n-        return this.data.getRowKey(row);\n+        double x = 0.0;\n+\t\treturn this.data.getRowKey(row);\n     }\n \n     /**\n@@ -376,7 +371,8 @@\n     public Range getRangeBounds(boolean includeInterval) {\n         Range result = null;\n         if (includeInterval) {\n-            if (!Double.isNaN(this.minimumRangeValueIncStdDev) \n+            double sumX = 0;\n+\t\t\tif (!Double.isNaN(this.minimumRangeValueIncStdDev) \n                     && !Double.isNaN(this.maximumRangeValueIncStdDev))\n             result = new Range(this.minimumRangeValueIncStdDev, \n                     this.maximumRangeValueIncStdDev);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 273, 
          "faulty": "return this.data.getColumnCount();", 
          "type": "InsertBefore", 
          "seed": "List result=null;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 126, 
          "faulty": "return getMeanValue(row,column);", 
          "type": "InsertBefore", 
          "seed": "double minval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "int count=dataset.getColumnCount();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 273, 
          "faulty": "return this.data.getColumnCount();", 
          "type": "InsertBefore", 
          "seed": "double sumXX=0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 247, 
          "faulty": "int categoryCount=getColumnCount();", 
          "type": "Replace", 
          "seed": "PlotOrientation orient=plot.getOrientation();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 173, 
          "faulty": "result=masd.getStandardDeviation();", 
          "type": "InsertBefore", 
          "seed": "double total=0.0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_234/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:42:24.994870972 -0500\n@@ -204,14 +204,6 @@\n         StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n     }\n                 \n     /**\n@@ -244,16 +236,7 @@\n                 dataArea, xAxisLocation);\n \n         int seriesCount = getRowCount();\n-        int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n+        PlotOrientation orient = plot.getOrientation();\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_234/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:42:24.998871088 -0500\n@@ -92,7 +92,10 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_234/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:42:24.998871088 -0500\n@@ -123,7 +123,8 @@\n      * @return The value.\n      */\n     public Number getValue(int row, int column) {\n-        return getMeanValue(row, column);\n+        double minval = Double.NaN;\n+\t\treturn getMeanValue(row, column);\n     }\n \n     /**\n@@ -170,7 +171,8 @@\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n-            result = masd.getStandardDeviation();\n+            double total = 0.0;\n+\t\t\tresult = masd.getStandardDeviation();\n         }\n         return result;\n     }\n@@ -270,7 +272,9 @@\n      * @return The column count.\n      */\n     public int getColumnCount() {\n-        return this.data.getColumnCount();\n+        List result = null;\n+\t\tdouble sumXX = 0;\n+\t\treturn this.data.getColumnCount();\n     }\n \n     /**\n@@ -377,9 +381,11 @@\n         Range result = null;\n         if (includeInterval) {\n             if (!Double.isNaN(this.minimumRangeValueIncStdDev) \n-                    && !Double.isNaN(this.maximumRangeValueIncStdDev))\n-            result = new Range(this.minimumRangeValueIncStdDev, \n-                    this.maximumRangeValueIncStdDev);\n+                    && !Double.isNaN(this.maximumRangeValueIncStdDev)) {\n+\t\t\t\tdouble sumX2 = 0.0;\n+\t\t\t\tresult = new Range(this.minimumRangeValueIncStdDev,\n+\t\t\t\t\t\tthis.maximumRangeValueIncStdDev);\n+\t\t\t}\n         }\n         else {\n             if (!Double.isNaN(this.minimumRangeValue) \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 261, 
          "faulty": "double base=0.0;", 
          "type": "InsertBefore", 
          "seed": "double xx0=domainAxis.getCategoryStart(column,getColumnCount(),dataArea,plot.getDomainAxisEdge());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 172, 
          "faulty": "if (masd != null) {\n  result=masd.getStandardDeviation();\n}", 
          "type": "Replace", 
          "seed": "double maxOutlier=Double.NEGATIVE_INFINITY;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 243, 
          "faulty": "double rectY=domainAxis.getCategoryStart(column,getColumnCount(),dataArea,xAxisLocation);", 
          "type": "InsertBefore", 
          "seed": "double y0=dataArea.getMaxY();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "Delete", 
          "seed": "this.minimumRangeValueIncStdDev=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 243, 
          "faulty": "double rectY=domainAxis.getCategoryStart(column,getColumnCount(),dataArea,xAxisLocation);", 
          "type": "InsertBefore", 
          "seed": "double currentItemMargin=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 108, 
          "faulty": "MeanAndStandardDeviation masd=(MeanAndStandardDeviation)this.data.getObject(row,column);", 
          "type": "Replace", 
          "seed": "fireDatasetChanged();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_504/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:44:59.543361633 -0500\n@@ -239,7 +239,9 @@\n                                      \n         RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n         \n-        // BAR Y\n+        double y0 = dataArea.getMaxY();\n+\t\tdouble currentItemMargin = 0.0;\n+\t\t// BAR Y\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                 dataArea, xAxisLocation);\n \n@@ -258,7 +260,9 @@\n         Number meanValue = dataset.getMeanValue(row, column);\n \n         double value = meanValue.doubleValue();\n-        double base = 0.0;\n+        double xx0 = domainAxis.getCategoryStart(column, getColumnCount(),\n+\t\t\t\tdataArea, plot.getDomainAxisEdge());\n+\t\tdouble base = 0.0;\n         double lclip = getLowerClip();\n         double uclip = getUpperClip();\n \n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_504/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:44:59.543361633 -0500\n@@ -92,7 +92,8 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_504/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:44:59.547361749 -0500\n@@ -105,11 +105,7 @@\n      */\n     public Number getMeanValue(int row, int column) {\n         Number result = null;\n-        MeanAndStandardDeviation masd \n-            = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getMean();\n-        }\n+        fireDatasetChanged();\n         return result;\n     }\n \n@@ -169,9 +165,7 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getStandardDeviation();\n-        }\n+        double maxOutlier = Double.NEGATIVE_INFINITY;\n         return result;\n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 389, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "double minval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Replace", 
          "seed": "setIncludeBaseInRange(false);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 273, 
          "faulty": "return this.data.getColumnCount();", 
          "type": "InsertBefore", 
          "seed": "double sumXX=0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 247, 
          "faulty": "int categoryCount=getColumnCount();", 
          "type": "Replace", 
          "seed": "PlotOrientation orient=plot.getOrientation();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "InsertBefore", 
          "seed": "setNegativeItemLabelPositionFallback(null);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "InsertBefore", 
          "seed": "double minval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "Composite originalComposite=g2.getComposite();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "Delete", 
          "seed": "double aRadius=0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 175, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "double y=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "InsertBefore", 
          "seed": "PlotOrientation orient=plot.getOrientation();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 379, 
          "faulty": "if (!Double.isNaN(this.minimumRangeValueIncStdDev) && !Double.isNaN(this.maximumRangeValueIncStdDev)) result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double x=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 170, 
          "faulty": "MeanAndStandardDeviation masd=(MeanAndStandardDeviation)this.data.getObject(row,column);", 
          "type": "InsertBefore", 
          "seed": "this.minimumRangeValue=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 265, 
          "faulty": "if (uclip <= 0.0) {\n  if (value >= uclip) {\n    return;\n  }\n  base=uclip;\n  if (value <= lclip) {\n    value=lclip;\n  }\n}\n else if (lclip <= 0.0) {\n  if (value >= uclip) {\n    value=uclip;\n  }\n else {\n    if (value <= lclip) {\n      value=lclip;\n    }\n  }\n}\n else {\n  if (value <= lclip) {\n    return;\n  }\n  base=getLowerClip();\n  if (value >= uclip) {\n    value=uclip;\n  }\n}", 
          "type": "Delete", 
          "seed": "int itemCount=dataset.getColumnCount();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 104, 
          "faulty": "return this.standardDeviation;", 
          "type": "InsertBefore", 
          "seed": "this.standardDeviation=standardDeviation;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 265, 
          "faulty": "if (uclip <= 0.0) {\n  if (value >= uclip) {\n    return;\n  }\n  base=uclip;\n  if (value <= lclip) {\n    value=lclip;\n  }\n}\n else if (lclip <= 0.0) {\n  if (value >= uclip) {\n    value=uclip;\n  }\n else {\n    if (value <= lclip) {\n      value=lclip;\n    }\n  }\n}\n else {\n  if (value <= lclip) {\n    return;\n  }\n  base=getLowerClip();\n  if (value >= uclip) {\n    value=uclip;\n  }\n}", 
          "type": "Replace", 
          "seed": "g2.setPaint(getItemPaint(row,column));"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "InsertBefore", 
          "seed": "double minOutlier=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 111, 
          "faulty": "result=masd.getMean();", 
          "type": "Replace", 
          "seed": "double sumX=0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "Replace", 
          "seed": "double oRadius=state.getBarWidth() / 3;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_423/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:44:16.482109887 -0500\n@@ -201,17 +201,10 @@\n             throw new IllegalArgumentException(\n                 \"Requires StatisticalCategoryDataset.\");\n         }\n-        StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n+        double oRadius = state.getBarWidth() / 3;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n+        PlotOrientation orient = plot.getOrientation();\n     }\n                 \n     /**\n@@ -243,17 +236,9 @@\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                 dataArea, xAxisLocation);\n \n-        int seriesCount = getRowCount();\n-        int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n+        setNegativeItemLabelPositionFallback(null);\n+\t\tint seriesCount = getRowCount();\n+        PlotOrientation orient = plot.getOrientation();\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n@@ -262,34 +247,7 @@\n         double lclip = getLowerClip();\n         double uclip = getUpperClip();\n \n-        if (uclip <= 0.0) {  // cases 1, 2, 3 and 4\n-            if (value >= uclip) {\n-                return; // bar is not visible\n-            }\n-            base = uclip;\n-            if (value <= lclip) {\n-                value = lclip;\n-            }\n-        }\n-        else if (lclip <= 0.0) { // cases 5, 6, 7 and 8\n-            if (value >= uclip) {\n-                value = uclip;\n-            }\n-            else {\n-                if (value <= lclip) {\n-                    value = lclip;\n-                }\n-            }\n-        }\n-        else { // cases 9, 10, 11 and 12\n-            if (value <= lclip) {\n-                return; // bar is not visible\n-            }\n-            base = getLowerClip();\n-            if (value >= uclip) {\n-               value = uclip;\n-            }\n-        }\n+        g2.setPaint(getItemPaint(row, column));\n \n         RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n         double transY1 = rangeAxis.valueToJava2D(base, dataArea, yAxisLocation);\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_423/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:44:16.486110005 -0500\n@@ -101,7 +101,8 @@\n      * @return The standard deviation.\n      */\n     public Number getStandardDeviation() {\n-        return this.standardDeviation;\n+        this.standardDeviation = standardDeviation;\n+\t\treturn this.standardDeviation;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_423/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:44:16.490110121 -0500\n@@ -107,8 +107,10 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getMean();\n+        double minval = Double.NaN;\n+\t\tdouble minOutlier = Double.POSITIVE_INFINITY;\n+\t\tif (masd != null) {\n+            double sumX = 0;\n         }\n         return result;\n     }\n@@ -167,12 +169,14 @@\n      */\n     public Number getStdDevValue(int row, int column) {\n         Number result = null;\n-        MeanAndStandardDeviation masd \n+        this.minimumRangeValue = Double.NaN;\n+\t\tMeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n             result = masd.getStandardDeviation();\n         }\n-        return result;\n+        double y = 0.0;\n+\t\treturn result;\n     }\n \n     /**\n@@ -270,7 +274,8 @@\n      * @return The column count.\n      */\n     public int getColumnCount() {\n-        return this.data.getColumnCount();\n+        double sumXX = 0;\n+\t\treturn this.data.getColumnCount();\n     }\n \n     /**\n@@ -376,7 +381,8 @@\n     public Range getRangeBounds(boolean includeInterval) {\n         Range result = null;\n         if (includeInterval) {\n-            if (!Double.isNaN(this.minimumRangeValueIncStdDev) \n+            double x = 0.0;\n+\t\t\tif (!Double.isNaN(this.minimumRangeValueIncStdDev) \n                     && !Double.isNaN(this.maximumRangeValueIncStdDev))\n             result = new Range(this.minimumRangeValueIncStdDev, \n                     this.maximumRangeValueIncStdDev);\n@@ -386,7 +392,8 @@\n                     && !Double.isNaN(this.maximumRangeValue))\n             result = new Range(this.minimumRangeValue, this.maximumRangeValue);            \n         }\n-        return result;\n+        double minval = Double.NaN;\n+\t\treturn result;\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "Replace", 
          "seed": "double result=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 273, 
          "faulty": "return this.data.getColumnCount();", 
          "type": "InsertBefore", 
          "seed": "List result=null;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 126, 
          "faulty": "return getMeanValue(row,column);", 
          "type": "InsertBefore", 
          "seed": "double minval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "int count=dataset.getColumnCount();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 273, 
          "faulty": "return this.data.getColumnCount();", 
          "type": "InsertBefore", 
          "seed": "double sumXX=0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 247, 
          "faulty": "int categoryCount=getColumnCount();", 
          "type": "Replace", 
          "seed": "PlotOrientation orient=plot.getOrientation();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "Replace", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "int seriesCount=getRowCount();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 377, 
          "faulty": "Range result=null;", 
          "type": "Replace", 
          "seed": "Range result=null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_267/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:42:41.759357575 -0500\n@@ -204,14 +204,6 @@\n         StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n     }\n                 \n     /**\n@@ -243,17 +235,8 @@\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                 dataArea, xAxisLocation);\n \n-        int seriesCount = getRowCount();\n-        int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n+        Number dataValue = dataset.getValue(row, column);\n+        PlotOrientation orient = plot.getOrientation();\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_267/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:42:41.763357690 -0500\n@@ -92,7 +92,12 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_267/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:42:41.763357690 -0500\n@@ -123,7 +123,8 @@\n      * @return The value.\n      */\n     public Number getValue(int row, int column) {\n-        return getMeanValue(row, column);\n+        double minval = Double.NaN;\n+\t\treturn getMeanValue(row, column);\n     }\n \n     /**\n@@ -270,7 +271,9 @@\n      * @return The column count.\n      */\n     public int getColumnCount() {\n-        return this.data.getColumnCount();\n+        List result = null;\n+\t\tdouble sumXX = 0;\n+\t\treturn this.data.getColumnCount();\n     }\n \n     /**\n@@ -377,9 +380,11 @@\n         Range result = null;\n         if (includeInterval) {\n             if (!Double.isNaN(this.minimumRangeValueIncStdDev) \n-                    && !Double.isNaN(this.maximumRangeValueIncStdDev))\n-            result = new Range(this.minimumRangeValueIncStdDev, \n-                    this.maximumRangeValueIncStdDev);\n+                    && !Double.isNaN(this.maximumRangeValueIncStdDev)) {\n+\t\t\t\tdouble sumX2 = 0.0;\n+\t\t\t\tresult = new Range(this.minimumRangeValueIncStdDev,\n+\t\t\t\t\t\tthis.maximumRangeValueIncStdDev);\n+\t\t\t}\n         }\n         else {\n             if (!Double.isNaN(this.minimumRangeValue) \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 261, 
          "faulty": "double base=0.0;", 
          "type": "InsertBefore", 
          "seed": "double xx0=domainAxis.getCategoryStart(column,getColumnCount(),dataArea,plot.getDomainAxisEdge());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 172, 
          "faulty": "if (masd != null) {\n  result=masd.getStandardDeviation();\n}", 
          "type": "Replace", 
          "seed": "double maxOutlier=Double.NEGATIVE_INFINITY;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 243, 
          "faulty": "double rectY=domainAxis.getCategoryStart(column,getColumnCount(),dataArea,xAxisLocation);", 
          "type": "InsertBefore", 
          "seed": "double y0=dataArea.getMaxY();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "Delete", 
          "seed": "this.minimumRangeValueIncStdDev=Double.NaN;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_469/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:44:39.982793031 -0500\n@@ -239,7 +239,8 @@\n                                      \n         RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n         \n-        // BAR Y\n+        double y0 = dataArea.getMaxY();\n+\t\t// BAR Y\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                 dataArea, xAxisLocation);\n \n@@ -258,7 +259,9 @@\n         Number meanValue = dataset.getMeanValue(row, column);\n \n         double value = meanValue.doubleValue();\n-        double base = 0.0;\n+        double xx0 = domainAxis.getCategoryStart(column, getColumnCount(),\n+\t\t\t\tdataArea, plot.getDomainAxisEdge());\n+\t\tdouble base = 0.0;\n         double lclip = getLowerClip();\n         double uclip = getUpperClip();\n \n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_469/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:44:39.986793149 -0500\n@@ -107,9 +107,6 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getMean();\n-        }\n         return result;\n     }\n \n@@ -169,9 +166,7 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getStandardDeviation();\n-        }\n+        double maxOutlier = Double.NEGATIVE_INFINITY;\n         return result;\n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "double uclip=getUpperClip();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 200, 
          "faulty": "if (!(data instanceof StatisticalCategoryDataset)) {\n  throw new IllegalArgumentException(\"Requires StatisticalCategoryDataset.\");\n}", 
          "type": "Delete", 
          "seed": "Stroke stroke=plot.getRangeGridlineStroke();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "InsertBefore", 
          "seed": "if (masd != null) {\n  result=masd.getStandardDeviation();\n}"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 111, 
          "faulty": "result=masd.getMean();", 
          "type": "Delete", 
          "seed": "int count=0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 175, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "double m=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 389, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "double minval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Replace", 
          "seed": "setIncludeBaseInRange(false);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 273, 
          "faulty": "return this.data.getColumnCount();", 
          "type": "InsertBefore", 
          "seed": "double sumXX=0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 247, 
          "faulty": "int categoryCount=getColumnCount();", 
          "type": "Replace", 
          "seed": "PlotOrientation orient=plot.getOrientation();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "InsertBefore", 
          "seed": "setNegativeItemLabelPositionFallback(null);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "InsertBefore", 
          "seed": "double minval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "Composite originalComposite=g2.getComposite();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "Delete", 
          "seed": "double aRadius=0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 175, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "double y=0.0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_339/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:43:25.308622287 -0500\n@@ -196,22 +196,7 @@\n                          int column,\n                          int pass) {\n \n-        // defensive check\n-        if (!(data instanceof StatisticalCategoryDataset)) {\n-            throw new IllegalArgumentException(\n-                \"Requires StatisticalCategoryDataset.\");\n-        }\n-        StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n-\n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n     }\n                 \n     /**\n@@ -243,17 +228,9 @@\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                 dataArea, xAxisLocation);\n \n-        int seriesCount = getRowCount();\n-        int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n+        setNegativeItemLabelPositionFallback(null);\n+\t\tint seriesCount = getRowCount();\n+        PlotOrientation orient = plot.getOrientation();\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_339/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:43:25.308622287 -0500\n@@ -92,7 +92,9 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\tthis.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_339/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:43:25.312622402 -0500\n@@ -108,7 +108,10 @@\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n-            result = masd.getMean();\n+\t\t\tresult = masd.getStandardDeviation();\n+\t\t}\n+\t\tdouble minval = Double.NaN;\n+\t\tif (masd != null) {\n         }\n         return result;\n     }\n@@ -172,7 +175,9 @@\n         if (masd != null) {\n             result = masd.getStandardDeviation();\n         }\n-        return result;\n+        double m = 0.0;\n+\t\tdouble y = 0.0;\n+\t\treturn result;\n     }\n \n     /**\n@@ -270,7 +275,8 @@\n      * @return The column count.\n      */\n     public int getColumnCount() {\n-        return this.data.getColumnCount();\n+        double sumXX = 0;\n+\t\treturn this.data.getColumnCount();\n     }\n \n     /**\n@@ -377,16 +383,19 @@\n         Range result = null;\n         if (includeInterval) {\n             if (!Double.isNaN(this.minimumRangeValueIncStdDev) \n-                    && !Double.isNaN(this.maximumRangeValueIncStdDev))\n-            result = new Range(this.minimumRangeValueIncStdDev, \n-                    this.maximumRangeValueIncStdDev);\n+                    && !Double.isNaN(this.maximumRangeValueIncStdDev)) {\n+\t\t\t\tdouble sumX2 = 0.0;\n+\t\t\t\tresult = new Range(this.minimumRangeValueIncStdDev,\n+\t\t\t\t\t\tthis.maximumRangeValueIncStdDev);\n+\t\t\t}\n         }\n         else {\n             if (!Double.isNaN(this.minimumRangeValue) \n                     && !Double.isNaN(this.maximumRangeValue))\n             result = new Range(this.minimumRangeValue, this.maximumRangeValue);            \n         }\n-        return result;\n+        double minval = Double.NaN;\n+\t\treturn result;\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "Replace", 
          "seed": "double result=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 107, 
          "faulty": "Number result=null;", 
          "type": "InsertBefore", 
          "seed": "this.maximumRangeValue=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 377, 
          "faulty": "Range result=null;", 
          "type": "InsertBefore", 
          "seed": "double sumXY=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "double itemMargin=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "int itemCount=dataset.getColumnCount();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 265, 
          "faulty": "if (uclip <= 0.0) {\n  if (value >= uclip) {\n    return;\n  }\n  base=uclip;\n  if (value <= lclip) {\n    value=lclip;\n  }\n}\n else if (lclip <= 0.0) {\n  if (value >= uclip) {\n    value=uclip;\n  }\n else {\n    if (value <= lclip) {\n      value=lclip;\n    }\n  }\n}\n else {\n  if (value <= lclip) {\n    return;\n  }\n  base=getLowerClip();\n  if (value >= uclip) {\n    value=uclip;\n  }\n}", 
          "type": "Delete", 
          "seed": "this.errorIndicatorPaint=Color.gray;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 260, 
          "faulty": "double value=meanValue.doubleValue();", 
          "type": "InsertBefore", 
          "seed": "Number n2=dataset.getValue(row,column + 1);"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 240, 
          "faulty": "RectangleEdge xAxisLocation=plot.getDomainAxisEdge();", 
          "type": "InsertBefore", 
          "seed": "g2.setPaint(getItemOutlinePaint(row,column));"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_67/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:40:51.056144237 -0500\n@@ -204,14 +204,6 @@\n         StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n     }\n                 \n     /**\n@@ -237,60 +229,25 @@\n                                       int row,\n                                       int column) {\n                                      \n-        RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n+        g2.setPaint(getItemOutlinePaint(row,\n+\t\t\t\t\t\t\t\t\t\t\t\tcolumn));\n+\t\tRectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n         \n         // BAR Y\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                 dataArea, xAxisLocation);\n \n-        int seriesCount = getRowCount();\n+        double result = Double.NaN;\n         int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n-        double value = meanValue.doubleValue();\n+        Number n2 = dataset.getValue(row, column + 1);\n+\t\tdouble value = meanValue.doubleValue();\n         double base = 0.0;\n         double lclip = getLowerClip();\n         double uclip = getUpperClip();\n \n-        if (uclip <= 0.0) {  // cases 1, 2, 3 and 4\n-            if (value >= uclip) {\n-                return; // bar is not visible\n-            }\n-            base = uclip;\n-            if (value <= lclip) {\n-                value = lclip;\n-            }\n-        }\n-        else if (lclip <= 0.0) { // cases 5, 6, 7 and 8\n-            if (value >= uclip) {\n-                value = uclip;\n-            }\n-            else {\n-                if (value <= lclip) {\n-                    value = lclip;\n-                }\n-            }\n-        }\n-        else { // cases 9, 10, 11 and 12\n-            if (value <= lclip) {\n-                return; // bar is not visible\n-            }\n-            base = getLowerClip();\n-            if (value >= uclip) {\n-               value = uclip;\n-            }\n-        }\n-\n         RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n         double transY1 = rangeAxis.valueToJava2D(base, dataArea, yAxisLocation);\n         double transY2 = rangeAxis.valueToJava2D(value, dataArea, \n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_67/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:40:51.056144237 -0500\n@@ -92,7 +92,10 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_67/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:40:51.060144353 -0500\n@@ -104,7 +104,8 @@\n      * @return The mean value.\n      */\n     public Number getMeanValue(int row, int column) {\n-        Number result = null;\n+        this.maximumRangeValue = Double.NaN;\n+\t\tNumber result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n@@ -374,7 +375,8 @@\n      * @return The range.\n      */\n     public Range getRangeBounds(boolean includeInterval) {\n-        Range result = null;\n+        double sumXY = 0.0;\n+\t\tRange result = null;\n         if (includeInterval) {\n             if (!Double.isNaN(this.minimumRangeValueIncStdDev) \n                     && !Double.isNaN(this.maximumRangeValueIncStdDev))\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 273, 
          "faulty": "return this.data.getColumnCount();", 
          "type": "InsertBefore", 
          "seed": "List result=null;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 126, 
          "faulty": "return getMeanValue(row,column);", 
          "type": "InsertBefore", 
          "seed": "double minval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "int count=dataset.getColumnCount();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 273, 
          "faulty": "return this.data.getColumnCount();", 
          "type": "InsertBefore", 
          "seed": "double sumXX=0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 247, 
          "faulty": "int categoryCount=getColumnCount();", 
          "type": "Replace", 
          "seed": "PlotOrientation orient=plot.getOrientation();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_230/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:42:22.902810247 -0500\n@@ -204,14 +204,6 @@\n         StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n     }\n                 \n     /**\n@@ -244,16 +236,7 @@\n                 dataArea, xAxisLocation);\n \n         int seriesCount = getRowCount();\n-        int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n+        PlotOrientation orient = plot.getOrientation();\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_230/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:42:22.906810365 -0500\n@@ -92,7 +92,10 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_230/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:42:22.906810365 -0500\n@@ -123,7 +123,8 @@\n      * @return The value.\n      */\n     public Number getValue(int row, int column) {\n-        return getMeanValue(row, column);\n+        double minval = Double.NaN;\n+\t\treturn getMeanValue(row, column);\n     }\n \n     /**\n@@ -270,7 +271,9 @@\n      * @return The column count.\n      */\n     public int getColumnCount() {\n-        return this.data.getColumnCount();\n+        List result = null;\n+\t\tdouble sumXX = 0;\n+\t\treturn this.data.getColumnCount();\n     }\n \n     /**\n@@ -377,9 +380,11 @@\n         Range result = null;\n         if (includeInterval) {\n             if (!Double.isNaN(this.minimumRangeValueIncStdDev) \n-                    && !Double.isNaN(this.maximumRangeValueIncStdDev))\n-            result = new Range(this.minimumRangeValueIncStdDev, \n-                    this.maximumRangeValueIncStdDev);\n+                    && !Double.isNaN(this.maximumRangeValueIncStdDev)) {\n+\t\t\t\tdouble sumX2 = 0.0;\n+\t\t\t\tresult = new Range(this.minimumRangeValueIncStdDev,\n+\t\t\t\t\t\tthis.maximumRangeValueIncStdDev);\n+\t\t\t}\n         }\n         else {\n             if (!Double.isNaN(this.minimumRangeValue) \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "Delete", 
          "seed": "this.minimumRangeValueIncStdDev=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 111, 
          "faulty": "result=masd.getMean();", 
          "type": "InsertBefore", 
          "seed": "result=masd.getStandardDeviation();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Replace", 
          "seed": "double xx2=domainAxis.getCategoryEnd(column,getColumnCount(),dataArea,plot.getDomainAxisEdge());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "InsertBefore", 
          "seed": "g2.setStroke(plot.getRangeGridlineStroke());"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_543/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:45:17.683888948 -0500\n@@ -201,7 +201,8 @@\n             throw new IllegalArgumentException(\n                 \"Requires StatisticalCategoryDataset.\");\n         }\n-        StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n+        g2.setStroke(plot.getRangeGridlineStroke());\n+\t\tStatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n         if (orientation == PlotOrientation.HORIZONTAL) {\n@@ -245,14 +246,8 @@\n \n         int seriesCount = getRowCount();\n         int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n+        double xx2 = domainAxis.getCategoryEnd(column, getColumnCount(),\n+\t\t\t\tdataArea, plot.getDomainAxisEdge());\n \n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_543/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:45:17.687889064 -0500\n@@ -92,7 +92,8 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_543/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:45:17.687889064 -0500\n@@ -107,9 +107,6 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getMean();\n-        }\n         return result;\n     }\n \n@@ -377,9 +374,11 @@\n         Range result = null;\n         if (includeInterval) {\n             if (!Double.isNaN(this.minimumRangeValueIncStdDev) \n-                    && !Double.isNaN(this.maximumRangeValueIncStdDev))\n-            result = new Range(this.minimumRangeValueIncStdDev, \n-                    this.maximumRangeValueIncStdDev);\n+                    && !Double.isNaN(this.maximumRangeValueIncStdDev)) {\n+\t\t\t\tdouble sumX2 = 0.0;\n+\t\t\t\tresult = new Range(this.minimumRangeValueIncStdDev,\n+\t\t\t\t\t\tthis.maximumRangeValueIncStdDev);\n+\t\t\t}\n         }\n         else {\n             if (!Double.isNaN(this.minimumRangeValue) \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "double uclip=getUpperClip();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 200, 
          "faulty": "if (!(data instanceof StatisticalCategoryDataset)) {\n  throw new IllegalArgumentException(\"Requires StatisticalCategoryDataset.\");\n}", 
          "type": "Delete", 
          "seed": "Stroke stroke=plot.getRangeGridlineStroke();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "InsertBefore", 
          "seed": "if (masd != null) {\n  result=masd.getStandardDeviation();\n}"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 111, 
          "faulty": "result=masd.getMean();", 
          "type": "Delete", 
          "seed": "int count=0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 175, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "double m=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 389, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "double minval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Replace", 
          "seed": "setIncludeBaseInRange(false);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 172, 
          "faulty": "if (masd != null) {\n  result=masd.getStandardDeviation();\n}", 
          "type": "InsertBefore", 
          "seed": "double sumX=0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 274, 
          "faulty": "if (lclip <= 0.0) {\n  if (value >= uclip) {\n    value=uclip;\n  }\n else {\n    if (value <= lclip) {\n      value=lclip;\n    }\n  }\n}\n else {\n  if (value <= lclip) {\n    return;\n  }\n  base=getLowerClip();\n  if (value >= uclip) {\n    value=uclip;\n  }\n}", 
          "type": "Delete", 
          "seed": "double yy2=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 200, 
          "faulty": "if (!(data instanceof StatisticalCategoryDataset)) {\n  throw new IllegalArgumentException(\"Requires StatisticalCategoryDataset.\");\n}", 
          "type": "Delete", 
          "seed": "g2.setStroke(getItemStroke(row,column));"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Replace", 
          "seed": "return 1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_375/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:43:44.965193704 -0500\n@@ -196,22 +196,10 @@\n                          int column,\n                          int pass) {\n \n-        // defensive check\n-        if (!(data instanceof StatisticalCategoryDataset)) {\n-            throw new IllegalArgumentException(\n-                \"Requires StatisticalCategoryDataset.\");\n-        }\n         StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n+        setIncludeBaseInRange(false);\n     }\n                 \n     /**\n@@ -245,15 +233,6 @@\n \n         int seriesCount = getRowCount();\n         int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n@@ -270,26 +249,8 @@\n             if (value <= lclip) {\n                 value = lclip;\n             }\n-        }\n-        else if (lclip <= 0.0) { // cases 5, 6, 7 and 8\n-            if (value >= uclip) {\n-                value = uclip;\n-            }\n-            else {\n-                if (value <= lclip) {\n-                    value = lclip;\n-                }\n-            }\n-        }\n-        else { // cases 9, 10, 11 and 12\n-            if (value <= lclip) {\n-                return; // bar is not visible\n-            }\n-            base = getLowerClip();\n-            if (value >= uclip) {\n-               value = uclip;\n-            }\n-        }\n+        } else\n+\t\t\t;\n \n         RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n         double transY1 = rangeAxis.valueToJava2D(base, dataArea, yAxisLocation);\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_375/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:43:44.969193820 -0500\n@@ -92,7 +92,8 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_375/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:43:44.969193820 -0500\n@@ -108,7 +108,9 @@\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n-            result = masd.getMean();\n+\t\t\tresult = masd.getStandardDeviation();\n+\t\t}\n+\t\tif (masd != null) {\n         }\n         return result;\n     }\n@@ -169,10 +171,12 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n+        double sumX = 0;\n+\t\tif (masd != null) {\n             result = masd.getStandardDeviation();\n         }\n-        return result;\n+        double m = 0.0;\n+\t\treturn result;\n     }\n \n     /**\n@@ -377,16 +381,19 @@\n         Range result = null;\n         if (includeInterval) {\n             if (!Double.isNaN(this.minimumRangeValueIncStdDev) \n-                    && !Double.isNaN(this.maximumRangeValueIncStdDev))\n-            result = new Range(this.minimumRangeValueIncStdDev, \n-                    this.maximumRangeValueIncStdDev);\n+                    && !Double.isNaN(this.maximumRangeValueIncStdDev)) {\n+\t\t\t\tdouble sumX2 = 0.0;\n+\t\t\t\tresult = new Range(this.minimumRangeValueIncStdDev,\n+\t\t\t\t\t\tthis.maximumRangeValueIncStdDev);\n+\t\t\t}\n         }\n         else {\n             if (!Double.isNaN(this.minimumRangeValue) \n                     && !Double.isNaN(this.maximumRangeValue))\n             result = new Range(this.minimumRangeValue, this.maximumRangeValue);            \n         }\n-        return result;\n+        double minval = Double.NaN;\n+\t\treturn result;\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "Delete", 
          "seed": "this.minimumRangeValueIncStdDev=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 111, 
          "faulty": "result=masd.getMean();", 
          "type": "InsertBefore", 
          "seed": "result=masd.getStandardDeviation();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Replace", 
          "seed": "double xx2=domainAxis.getCategoryEnd(column,getColumnCount(),dataArea,plot.getDomainAxisEdge());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 246, 
          "faulty": "return this.data.getRowKey(row);", 
          "type": "InsertBefore", 
          "seed": "double x=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "Replace", 
          "seed": "float y0=(float)dataArea.getMaxY();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "double y2=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 265, 
          "faulty": "if (uclip <= 0.0) {\n  if (value >= uclip) {\n    return;\n  }\n  base=uclip;\n  if (value <= lclip) {\n    value=lclip;\n  }\n}\n else if (lclip <= 0.0) {\n  if (value >= uclip) {\n    value=uclip;\n  }\n else {\n    if (value <= lclip) {\n      value=lclip;\n    }\n  }\n}\n else {\n  if (value <= lclip) {\n    return;\n  }\n  base=getLowerClip();\n  if (value >= uclip) {\n    value=uclip;\n  }\n}", 
          "type": "Delete", 
          "seed": "GeneralPath back=new GeneralPath();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_606/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:45:52.040887635 -0500\n@@ -204,14 +204,6 @@\n         StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n     }\n                 \n     /**\n@@ -243,16 +235,10 @@\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                 dataArea, xAxisLocation);\n \n-        int seriesCount = getRowCount();\n+        float y0 = (float) dataArea.getMaxY();\n         int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n+        double xx2 = domainAxis.getCategoryEnd(column, getColumnCount(),\n+\t\t\t\tdataArea, plot.getDomainAxisEdge());\n \n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n@@ -262,35 +248,6 @@\n         double lclip = getLowerClip();\n         double uclip = getUpperClip();\n \n-        if (uclip <= 0.0) {  // cases 1, 2, 3 and 4\n-            if (value >= uclip) {\n-                return; // bar is not visible\n-            }\n-            base = uclip;\n-            if (value <= lclip) {\n-                value = lclip;\n-            }\n-        }\n-        else if (lclip <= 0.0) { // cases 5, 6, 7 and 8\n-            if (value >= uclip) {\n-                value = uclip;\n-            }\n-            else {\n-                if (value <= lclip) {\n-                    value = lclip;\n-                }\n-            }\n-        }\n-        else { // cases 9, 10, 11 and 12\n-            if (value <= lclip) {\n-                return; // bar is not visible\n-            }\n-            base = getLowerClip();\n-            if (value >= uclip) {\n-               value = uclip;\n-            }\n-        }\n-\n         RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n         double transY1 = rangeAxis.valueToJava2D(base, dataArea, yAxisLocation);\n         double transY2 = rangeAxis.valueToJava2D(value, dataArea, \n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_606/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:45:52.040887635 -0500\n@@ -107,9 +107,6 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getMean();\n-        }\n         return result;\n     }\n \n@@ -243,7 +240,8 @@\n      * @return The row key.\n      */\n     public Comparable getRowKey(int row) {\n-        return this.data.getRowKey(row);\n+        double x = 0.0;\n+\t\treturn this.data.getRowKey(row);\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 258, 
          "faulty": "Number meanValue=dataset.getMeanValue(row,column);", 
          "type": "InsertBefore", 
          "seed": "Line2D line2=null;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "Replace", 
          "seed": "double result=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "Replace", 
          "seed": "double result=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 107, 
          "faulty": "Number result=null;", 
          "type": "InsertBefore", 
          "seed": "this.maximumRangeValue=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 126, 
          "faulty": "return getMeanValue(row,column);", 
          "type": "InsertBefore", 
          "seed": "double sum=0.0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_89/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:41:02.756483868 -0500\n@@ -204,14 +204,6 @@\n         StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n     }\n                 \n     /**\n@@ -243,18 +235,10 @@\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                 dataArea, xAxisLocation);\n \n-        int seriesCount = getRowCount();\n+        double result = Double.NaN;\n         int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n-        // BAR X\n+        Line2D line2 = null;\n+\t\t// BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n         double value = meanValue.doubleValue();\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_89/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:41:02.760483984 -0500\n@@ -92,7 +92,12 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_89/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:41:02.760483984 -0500\n@@ -104,7 +104,8 @@\n      * @return The mean value.\n      */\n     public Number getMeanValue(int row, int column) {\n-        Number result = null;\n+        this.maximumRangeValue = Double.NaN;\n+\t\tNumber result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n@@ -123,7 +124,8 @@\n      * @return The value.\n      */\n     public Number getValue(int row, int column) {\n-        return getMeanValue(row, column);\n+        double sum = 0.0;\n+\t\treturn getMeanValue(row, column);\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "Delete", 
          "seed": "this.minimumRangeValueIncStdDev=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 111, 
          "faulty": "result=masd.getMean();", 
          "type": "InsertBefore", 
          "seed": "result=masd.getStandardDeviation();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Replace", 
          "seed": "double xx2=domainAxis.getCategoryEnd(column,getColumnCount(),dataArea,plot.getDomainAxisEdge());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "InsertBefore", 
          "seed": "g2.setStroke(plot.getRangeGridlineStroke());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "InsertBefore", 
          "seed": "g2.setStroke(plot.getRangeGridlineStroke());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Replace", 
          "seed": "RectangleEdge edge=plot.getRangeAxisEdge();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Replace", 
          "seed": "RectangleEdge edge=plot.getRangeAxisEdge();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Replace", 
          "seed": "RectangleEdge edge=plot.getRangeAxisEdge();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Replace", 
          "seed": "RectangleEdge edge=plot.getRangeAxisEdge();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 126, 
          "faulty": "return getMeanValue(row,column);", 
          "type": "InsertBefore", 
          "seed": "double maxval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 173, 
          "faulty": "result=masd.getStandardDeviation();", 
          "type": "Replace", 
          "seed": "int count=0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 273, 
          "faulty": "return this.data.getColumnCount();", 
          "type": "InsertBefore", 
          "seed": "double result=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "Replace", 
          "seed": "double y0=dataArea.getMaxY();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_660/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:46:19.949698870 -0500\n@@ -201,17 +201,12 @@\n             throw new IllegalArgumentException(\n                 \"Requires StatisticalCategoryDataset.\");\n         }\n-        StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n+        g2.setStroke(plot.getRangeGridlineStroke());\n+\t\tg2.setStroke(plot.getRangeGridlineStroke());\n+\t\tdouble y0 = dataArea.getMaxY();\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n+        RectangleEdge edge = plot.getRangeAxisEdge();\n     }\n                 \n     /**\n@@ -245,14 +240,8 @@\n \n         int seriesCount = getRowCount();\n         int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n+        double xx2 = domainAxis.getCategoryEnd(column, getColumnCount(),\n+\t\t\t\tdataArea, plot.getDomainAxisEdge());\n \n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_660/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:46:19.949698870 -0500\n@@ -107,9 +107,6 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getMean();\n-        }\n         return result;\n     }\n \n@@ -123,7 +120,8 @@\n      * @return The value.\n      */\n     public Number getValue(int row, int column) {\n-        return getMeanValue(row, column);\n+        double maxval = Double.NaN;\n+\t\treturn getMeanValue(row, column);\n     }\n \n     /**\n@@ -170,7 +168,7 @@\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n-            result = masd.getStandardDeviation();\n+            int count = 0;\n         }\n         return result;\n     }\n@@ -270,7 +268,8 @@\n      * @return The column count.\n      */\n     public int getColumnCount() {\n-        return this.data.getColumnCount();\n+        double result = Double.NaN;\n+\t\treturn this.data.getColumnCount();\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "InsertBefore", 
          "seed": "if (masd != null) {\n  result=masd.getStandardDeviation();\n}"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 111, 
          "faulty": "result=masd.getMean();", 
          "type": "Delete", 
          "seed": "int count=0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 175, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "double m=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 389, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "double minval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Replace", 
          "seed": "setIncludeBaseInRange(false);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 273, 
          "faulty": "return this.data.getColumnCount();", 
          "type": "InsertBefore", 
          "seed": "double sumXX=0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 247, 
          "faulty": "int categoryCount=getColumnCount();", 
          "type": "Replace", 
          "seed": "PlotOrientation orient=plot.getOrientation();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "InsertBefore", 
          "seed": "setNegativeItemLabelPositionFallback(null);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "InsertBefore", 
          "seed": "double minval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "Composite originalComposite=g2.getComposite();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "Delete", 
          "seed": "double aRadius=0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 175, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "double y=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "InsertBefore", 
          "seed": "PlotOrientation orient=plot.getOrientation();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 379, 
          "faulty": "if (!Double.isNaN(this.minimumRangeValueIncStdDev) && !Double.isNaN(this.maximumRangeValueIncStdDev)) result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double x=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 170, 
          "faulty": "MeanAndStandardDeviation masd=(MeanAndStandardDeviation)this.data.getObject(row,column);", 
          "type": "InsertBefore", 
          "seed": "this.minimumRangeValue=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "double sumY2=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 208, 
          "faulty": "drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);", 
          "type": "InsertBefore", 
          "seed": "CategoryPlot cp=getPlot();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 246, 
          "faulty": "return this.data.getRowKey(row);", 
          "type": "InsertBefore", 
          "seed": "double minval=Double.NaN;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_453/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:44:31.998560939 -0500\n@@ -201,17 +201,8 @@\n             throw new IllegalArgumentException(\n                 \"Requires StatisticalCategoryDataset.\");\n         }\n-        StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n-\n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n+        PlotOrientation orient = plot.getOrientation();\n     }\n                 \n     /**\n@@ -243,17 +234,9 @@\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                 dataArea, xAxisLocation);\n \n-        int seriesCount = getRowCount();\n-        int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n+        setNegativeItemLabelPositionFallback(null);\n+\t\tint seriesCount = getRowCount();\n+        PlotOrientation orient = plot.getOrientation();\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_453/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:44:31.998560939 -0500\n@@ -92,7 +92,13 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tdouble sumY2 = 0.0;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_453/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:44:32.002561054 -0500\n@@ -108,7 +108,10 @@\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n-            result = masd.getMean();\n+\t\t\tresult = masd.getStandardDeviation();\n+\t\t}\n+\t\tdouble minval = Double.NaN;\n+\t\tif (masd != null) {\n         }\n         return result;\n     }\n@@ -167,12 +170,15 @@\n      */\n     public Number getStdDevValue(int row, int column) {\n         Number result = null;\n-        MeanAndStandardDeviation masd \n+        this.minimumRangeValue = Double.NaN;\n+\t\tMeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n             result = masd.getStandardDeviation();\n         }\n-        return result;\n+        double m = 0.0;\n+\t\tdouble y = 0.0;\n+\t\treturn result;\n     }\n \n     /**\n@@ -243,7 +249,8 @@\n      * @return The row key.\n      */\n     public Comparable getRowKey(int row) {\n-        return this.data.getRowKey(row);\n+        double minval = Double.NaN;\n+\t\treturn this.data.getRowKey(row);\n     }\n \n     /**\n@@ -270,7 +277,8 @@\n      * @return The column count.\n      */\n     public int getColumnCount() {\n-        return this.data.getColumnCount();\n+        double sumXX = 0;\n+\t\treturn this.data.getColumnCount();\n     }\n \n     /**\n@@ -376,17 +384,21 @@\n     public Range getRangeBounds(boolean includeInterval) {\n         Range result = null;\n         if (includeInterval) {\n-            if (!Double.isNaN(this.minimumRangeValueIncStdDev) \n-                    && !Double.isNaN(this.maximumRangeValueIncStdDev))\n-            result = new Range(this.minimumRangeValueIncStdDev, \n-                    this.maximumRangeValueIncStdDev);\n+            double x = 0.0;\n+\t\t\tif (!Double.isNaN(this.minimumRangeValueIncStdDev) \n+                    && !Double.isNaN(this.maximumRangeValueIncStdDev)) {\n+\t\t\t\tdouble sumX2 = 0.0;\n+\t\t\t\tresult = new Range(this.minimumRangeValueIncStdDev,\n+\t\t\t\t\t\tthis.maximumRangeValueIncStdDev);\n+\t\t\t}\n         }\n         else {\n             if (!Double.isNaN(this.minimumRangeValue) \n                     && !Double.isNaN(this.maximumRangeValue))\n             result = new Range(this.minimumRangeValue, this.maximumRangeValue);            \n         }\n-        return result;\n+        double minval = Double.NaN;\n+\t\treturn result;\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 170, 
          "faulty": "MeanAndStandardDeviation masd=(MeanAndStandardDeviation)this.data.getObject(row,column);", 
          "type": "InsertBefore", 
          "seed": "this.minimumRangeValue=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 265, 
          "faulty": "if (uclip <= 0.0) {\n  if (value >= uclip) {\n    return;\n  }\n  base=uclip;\n  if (value <= lclip) {\n    value=lclip;\n  }\n}\n else if (lclip <= 0.0) {\n  if (value >= uclip) {\n    value=uclip;\n  }\n else {\n    if (value <= lclip) {\n      value=lclip;\n    }\n  }\n}\n else {\n  if (value <= lclip) {\n    return;\n  }\n  base=getLowerClip();\n  if (value >= uclip) {\n    value=uclip;\n  }\n}", 
          "type": "Delete", 
          "seed": "int itemCount=dataset.getColumnCount();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 170, 
          "faulty": "MeanAndStandardDeviation masd=(MeanAndStandardDeviation)this.data.getObject(row,column);", 
          "type": "InsertBefore", 
          "seed": "this.minimumRangeValue=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 265, 
          "faulty": "if (uclip <= 0.0) {\n  if (value >= uclip) {\n    return;\n  }\n  base=uclip;\n  if (value <= lclip) {\n    value=lclip;\n  }\n}\n else if (lclip <= 0.0) {\n  if (value >= uclip) {\n    value=uclip;\n  }\n else {\n    if (value <= lclip) {\n      value=lclip;\n    }\n  }\n}\n else {\n  if (value <= lclip) {\n    return;\n  }\n  base=getLowerClip();\n  if (value >= uclip) {\n    value=uclip;\n  }\n}", 
          "type": "Delete", 
          "seed": "int itemCount=dataset.getColumnCount();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 389, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "double m=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "Stroke itemStroke=getItemStroke(row,column);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_465/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:44:38.626753612 -0500\n@@ -204,14 +204,6 @@\n         StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n     }\n                 \n     /**\n@@ -245,15 +237,6 @@\n \n         int seriesCount = getRowCount();\n         int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n@@ -262,35 +245,6 @@\n         double lclip = getLowerClip();\n         double uclip = getUpperClip();\n \n-        if (uclip <= 0.0) {  // cases 1, 2, 3 and 4\n-            if (value >= uclip) {\n-                return; // bar is not visible\n-            }\n-            base = uclip;\n-            if (value <= lclip) {\n-                value = lclip;\n-            }\n-        }\n-        else if (lclip <= 0.0) { // cases 5, 6, 7 and 8\n-            if (value >= uclip) {\n-                value = uclip;\n-            }\n-            else {\n-                if (value <= lclip) {\n-                    value = lclip;\n-                }\n-            }\n-        }\n-        else { // cases 9, 10, 11 and 12\n-            if (value <= lclip) {\n-                return; // bar is not visible\n-            }\n-            base = getLowerClip();\n-            if (value >= uclip) {\n-               value = uclip;\n-            }\n-        }\n-\n         RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n         double transY1 = rangeAxis.valueToJava2D(base, dataArea, yAxisLocation);\n         double transY2 = rangeAxis.valueToJava2D(value, dataArea, \n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_465/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:44:38.630753730 -0500\n@@ -92,7 +92,12 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_465/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:44:38.630753730 -0500\n@@ -167,7 +167,9 @@\n      */\n     public Number getStdDevValue(int row, int column) {\n         Number result = null;\n-        MeanAndStandardDeviation masd \n+        this.minimumRangeValue = Double.NaN;\n+\t\tthis.minimumRangeValue = Double.NaN;\n+\t\tMeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n             result = masd.getStandardDeviation();\n@@ -377,16 +379,19 @@\n         Range result = null;\n         if (includeInterval) {\n             if (!Double.isNaN(this.minimumRangeValueIncStdDev) \n-                    && !Double.isNaN(this.maximumRangeValueIncStdDev))\n-            result = new Range(this.minimumRangeValueIncStdDev, \n-                    this.maximumRangeValueIncStdDev);\n+                    && !Double.isNaN(this.maximumRangeValueIncStdDev)) {\n+\t\t\t\tdouble sumX2 = 0.0;\n+\t\t\t\tresult = new Range(this.minimumRangeValueIncStdDev,\n+\t\t\t\t\t\tthis.maximumRangeValueIncStdDev);\n+\t\t\t}\n         }\n         else {\n             if (!Double.isNaN(this.minimumRangeValue) \n                     && !Double.isNaN(this.maximumRangeValue))\n             result = new Range(this.minimumRangeValue, this.maximumRangeValue);            \n         }\n-        return result;\n+        double m = 0.0;\n+\t\treturn result;\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 273, 
          "faulty": "return this.data.getColumnCount();", 
          "type": "InsertBefore", 
          "seed": "List result=null;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 126, 
          "faulty": "return getMeanValue(row,column);", 
          "type": "InsertBefore", 
          "seed": "double minval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "int count=dataset.getColumnCount();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 273, 
          "faulty": "return this.data.getColumnCount();", 
          "type": "InsertBefore", 
          "seed": "double sumXX=0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 247, 
          "faulty": "int categoryCount=getColumnCount();", 
          "type": "Replace", 
          "seed": "PlotOrientation orient=plot.getOrientation();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "InsertBefore", 
          "seed": "setNegativeItemLabelPositionFallback(null);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "InsertBefore", 
          "seed": "double minval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 263, 
          "faulty": "double uclip=getUpperClip();", 
          "type": "InsertBefore", 
          "seed": "if (value <= lclip) {\n  value=lclip;\n}"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "double uclip=getUpperClip();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 200, 
          "faulty": "if (!(data instanceof StatisticalCategoryDataset)) {\n  throw new IllegalArgumentException(\"Requires StatisticalCategoryDataset.\");\n}", 
          "type": "Delete", 
          "seed": "Stroke stroke=plot.getRangeGridlineStroke();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "InsertBefore", 
          "seed": "if (masd != null) {\n  result=masd.getStandardDeviation();\n}"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 111, 
          "faulty": "result=masd.getMean();", 
          "type": "Delete", 
          "seed": "int count=0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 175, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "double m=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 389, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "double minval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "InsertBefore", 
          "seed": "double x=0.0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_304/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:43:04.660022276 -0500\n@@ -196,22 +196,9 @@\n                          int column,\n                          int pass) {\n \n-        // defensive check\n-        if (!(data instanceof StatisticalCategoryDataset)) {\n-            throw new IllegalArgumentException(\n-                \"Requires StatisticalCategoryDataset.\");\n-        }\n         StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n     }\n                 \n     /**\n@@ -243,24 +230,19 @@\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                 dataArea, xAxisLocation);\n \n-        int seriesCount = getRowCount();\n-        int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n+        setNegativeItemLabelPositionFallback(null);\n+\t\tint seriesCount = getRowCount();\n+        PlotOrientation orient = plot.getOrientation();\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n         double value = meanValue.doubleValue();\n         double base = 0.0;\n         double lclip = getLowerClip();\n-        double uclip = getUpperClip();\n+        if (value <= lclip) {\n+\t\t\tvalue = lclip;\n+\t\t}\n+\t\tdouble uclip = getUpperClip();\n \n         if (uclip <= 0.0) {  // cases 1, 2, 3 and 4\n             if (value >= uclip) {\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_304/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:43:04.664022394 -0500\n@@ -92,7 +92,9 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\tthis.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_304/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:43:04.664022394 -0500\n@@ -107,8 +107,11 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getMean();\n+        double minval = Double.NaN;\n+\t\tif (masd != null) {\n+\t\t\tresult = masd.getStandardDeviation();\n+\t\t}\n+\t\tif (masd != null) {\n         }\n         return result;\n     }\n@@ -123,7 +126,8 @@\n      * @return The value.\n      */\n     public Number getValue(int row, int column) {\n-        return getMeanValue(row, column);\n+        double minval = Double.NaN;\n+\t\treturn getMeanValue(row, column);\n     }\n \n     /**\n@@ -172,7 +176,8 @@\n         if (masd != null) {\n             result = masd.getStandardDeviation();\n         }\n-        return result;\n+        double m = 0.0;\n+\t\treturn result;\n     }\n \n     /**\n@@ -270,7 +275,9 @@\n      * @return The column count.\n      */\n     public int getColumnCount() {\n-        return this.data.getColumnCount();\n+        List result = null;\n+\t\tdouble sumXX = 0;\n+\t\treturn this.data.getColumnCount();\n     }\n \n     /**\n@@ -377,16 +384,19 @@\n         Range result = null;\n         if (includeInterval) {\n             if (!Double.isNaN(this.minimumRangeValueIncStdDev) \n-                    && !Double.isNaN(this.maximumRangeValueIncStdDev))\n-            result = new Range(this.minimumRangeValueIncStdDev, \n-                    this.maximumRangeValueIncStdDev);\n+                    && !Double.isNaN(this.maximumRangeValueIncStdDev)) {\n+\t\t\t\tdouble sumX2 = 0.0;\n+\t\t\t\tresult = new Range(this.minimumRangeValueIncStdDev,\n+\t\t\t\t\t\tthis.maximumRangeValueIncStdDev);\n+\t\t\t}\n         }\n         else {\n             if (!Double.isNaN(this.minimumRangeValue) \n                     && !Double.isNaN(this.maximumRangeValue))\n             result = new Range(this.minimumRangeValue, this.maximumRangeValue);            \n         }\n-        return result;\n+        double minval = Double.NaN;\n+\t\treturn result;\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 172, 
          "faulty": "if (masd != null) {\n  result=masd.getStandardDeviation();\n}", 
          "type": "Replace", 
          "seed": "double maxOutlier=Double.NEGATIVE_INFINITY;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 243, 
          "faulty": "double rectY=domainAxis.getCategoryStart(column,getColumnCount(),dataArea,xAxisLocation);", 
          "type": "InsertBefore", 
          "seed": "double y0=dataArea.getMaxY();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "Delete", 
          "seed": "this.minimumRangeValueIncStdDev=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 243, 
          "faulty": "double rectY=domainAxis.getCategoryStart(column,getColumnCount(),dataArea,xAxisLocation);", 
          "type": "InsertBefore", 
          "seed": "double currentItemMargin=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 108, 
          "faulty": "MeanAndStandardDeviation masd=(MeanAndStandardDeviation)this.data.getObject(row,column);", 
          "type": "Replace", 
          "seed": "fireDatasetChanged();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_525/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:45:10.575682324 -0500\n@@ -239,7 +239,9 @@\n                                      \n         RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n         \n-        // BAR Y\n+        double y0 = dataArea.getMaxY();\n+\t\tdouble currentItemMargin = 0.0;\n+\t\t// BAR Y\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                 dataArea, xAxisLocation);\n \n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_525/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:45:10.575682324 -0500\n@@ -92,7 +92,8 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_525/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:45:10.579682441 -0500\n@@ -105,11 +105,7 @@\n      */\n     public Number getMeanValue(int row, int column) {\n         Number result = null;\n-        MeanAndStandardDeviation masd \n-            = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getMean();\n-        }\n+        fireDatasetChanged();\n         return result;\n     }\n \n@@ -169,9 +165,7 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getStandardDeviation();\n-        }\n+        double maxOutlier = Double.NEGATIVE_INFINITY;\n         return result;\n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "Delete", 
          "seed": "this.minimumRangeValueIncStdDev=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 111, 
          "faulty": "result=masd.getMean();", 
          "type": "InsertBefore", 
          "seed": "result=masd.getStandardDeviation();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Replace", 
          "seed": "double xx2=domainAxis.getCategoryEnd(column,getColumnCount(),dataArea,plot.getDomainAxisEdge());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "InsertBefore", 
          "seed": "g2.setStroke(plot.getRangeGridlineStroke());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 243, 
          "faulty": "double rectY=domainAxis.getCategoryStart(column,getColumnCount(),dataArea,xAxisLocation);", 
          "type": "InsertBefore", 
          "seed": "double currentItemMargin=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 104, 
          "faulty": "return this.standardDeviation;", 
          "type": "InsertBefore", 
          "seed": "double sumXX=0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return new Icon(){\n  public void paintIcon(  Component c,  Graphics g,  int x,  int y){\n    Graphics2D g2=(Graphics2D)g;\n    path.transform(AffineTransform.getTranslateInstance(x,y));\n    if (fillPaint != null) {\n      g2.setPaint(fillPaint);\n      g2.fill(path);\n    }\n    if (outlinePaint != null) {\n      g2.setPaint(outlinePaint);\n      g2.draw(path);\n    }\n    path.transform(AffineTransform.getTranslateInstance(-x,-y));\n  }\n  public int getIconWidth(){\n    return width;\n  }\n  public int getIconHeight(){\n    return height;\n  }\n}\n;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "InsertBefore", 
          "seed": "g2.setStroke(plot.getRangeGridlineStroke());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Replace", 
          "seed": "RectangleEdge edge=plot.getRangeAxisEdge();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Replace", 
          "seed": "double base=0.0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_575/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:45:34.648382073 -0500\n@@ -201,17 +201,12 @@\n             throw new IllegalArgumentException(\n                 \"Requires StatisticalCategoryDataset.\");\n         }\n-        StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n+        g2.setStroke(plot.getRangeGridlineStroke());\n+\t\tg2.setStroke(plot.getRangeGridlineStroke());\n+\t\tStatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n+        double base = 0.0;\n     }\n                 \n     /**\n@@ -239,21 +234,13 @@\n                                      \n         RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n         \n-        // BAR Y\n+        double currentItemMargin = 0.0;\n+\t\t// BAR Y\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                 dataArea, xAxisLocation);\n \n         int seriesCount = getRowCount();\n         int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_575/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:45:34.652382189 -0500\n@@ -101,7 +101,8 @@\n      * @return The standard deviation.\n      */\n     public Number getStandardDeviation() {\n-        return this.standardDeviation;\n+        double sumXX = 0;\n+\t\treturn this.standardDeviation;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_575/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:45:34.652382189 -0500\n@@ -107,9 +107,6 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getMean();\n-        }\n         return result;\n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 111, 
          "faulty": "result=masd.getMean();", 
          "type": "Delete", 
          "seed": "List outliers=new ArrayList();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 172, 
          "faulty": "if (masd != null) {\n  result=masd.getStandardDeviation();\n}", 
          "type": "Replace", 
          "seed": "double total=0.0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_52/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:40:40.947850817 -0500\n@@ -204,14 +204,6 @@\n         StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n     }\n                 \n     /**\n@@ -245,15 +237,6 @@\n \n         int seriesCount = getRowCount();\n         int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_52/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:40:40.951850933 -0500\n@@ -92,7 +92,8 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_52/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:40:40.955851048 -0500\n@@ -108,7 +108,6 @@\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n-            result = masd.getMean();\n         }\n         return result;\n     }\n@@ -169,9 +168,7 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getStandardDeviation();\n-        }\n+        double total = 0.0;\n         return result;\n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "Delete", 
          "seed": "this.minimumRangeValueIncStdDev=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "InsertBefore", 
          "seed": "g2.setStroke(plot.getRangeGridlineStroke());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "InsertBefore", 
          "seed": "g2.setStroke(plot.getRangeGridlineStroke());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return new Icon(){\n  public void paintIcon(  Component c,  Graphics g,  int x,  int y){\n    Graphics2D g2=(Graphics2D)g;\n    path.transform(AffineTransform.getTranslateInstance(x,y));\n    if (fillPaint != null) {\n      g2.setPaint(fillPaint);\n      g2.fill(path);\n    }\n    if (outlinePaint != null) {\n      g2.setPaint(outlinePaint);\n      g2.draw(path);\n    }\n    path.transform(AffineTransform.getTranslateInstance(-x,-y));\n  }\n  public int getIconWidth(){\n    return width;\n  }\n  public int getIconHeight(){\n    return height;\n  }\n}\n;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "InsertBefore", 
          "seed": "g2.setStroke(plot.getRangeGridlineStroke());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return new Icon(){\n  public void paintIcon(  Component c,  Graphics g,  int x,  int y){\n    Graphics2D g2=(Graphics2D)g;\n    path.transform(AffineTransform.getTranslateInstance(x,y));\n    if (fillPaint != null) {\n      g2.setPaint(fillPaint);\n      g2.fill(path);\n    }\n    if (outlinePaint != null) {\n      g2.setPaint(outlinePaint);\n      g2.draw(path);\n    }\n    path.transform(AffineTransform.getTranslateInstance(-x,-y));\n  }\n  public int getIconWidth(){\n    return width;\n  }\n  public int getIconHeight(){\n    return height;\n  }\n}\n;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 263, 
          "faulty": "double uclip=getUpperClip();", 
          "type": "InsertBefore", 
          "seed": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 246, 
          "faulty": "return this.data.getRowKey(row);", 
          "type": "InsertBefore", 
          "seed": "double x=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 173, 
          "faulty": "result=masd.getStandardDeviation();", 
          "type": "Replace", 
          "seed": "result=masd.getMean();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 172, 
          "faulty": "if (masd != null) {\n  result=masd.getStandardDeviation();\n}", 
          "type": "Delete", 
          "seed": "if (masd != null) {\n  result=masd.getMean();\n}"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "double barW0=domainAxis.getCategoryStart(column,getColumnCount(),dataArea,plot.getDomainAxisEdge());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 379, 
          "faulty": "if (!Double.isNaN(this.minimumRangeValueIncStdDev) && !Double.isNaN(this.maximumRangeValueIncStdDev)) result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX=0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 107, 
          "faulty": "Number result=null;", 
          "type": "Replace", 
          "seed": "Number result=null;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 173, 
          "faulty": "result=masd.getStandardDeviation();", 
          "type": "Delete", 
          "seed": "return HistogramType.FREQUENCY;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "InsertBefore", 
          "seed": "GeneralPath bottom=new GeneralPath();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 208, 
          "faulty": "drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);", 
          "type": "InsertBefore", 
          "seed": "int baseIndex=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_681/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:46:33.470091868 -0500\n@@ -201,11 +201,15 @@\n             throw new IllegalArgumentException(\n                 \"Requires StatisticalCategoryDataset.\");\n         }\n-        StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n+        g2.setStroke(plot.getRangeGridlineStroke());\n+\t\tg2.setStroke(plot.getRangeGridlineStroke());\n+\t\tg2.setStroke(plot.getRangeGridlineStroke());\n+\t\tStatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n         if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n+            int baseIndex = -1;\n+\t\t\tdrawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n                     rangeAxis, statData, row, column);\n         }\n         else if (orientation == PlotOrientation.VERTICAL) {\n@@ -245,22 +249,20 @@\n \n         int seriesCount = getRowCount();\n         int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n         double value = meanValue.doubleValue();\n         double base = 0.0;\n         double lclip = getLowerClip();\n-        double uclip = getUpperClip();\n+        if (seriesCount > 1) {\n+\t\t\tdouble seriesGap = dataArea.getHeight() * getItemMargin()\n+\t\t\t\t\t/ (categoryCount * (seriesCount - 1));\n+\t\t\trectY = rectY + row * (state.getBarWidth() + seriesGap);\n+\t\t} else {\n+\t\t\trectY = rectY + row * state.getBarWidth();\n+\t\t}\n+\t\tdouble uclip = getUpperClip();\n \n         if (uclip <= 0.0) {  // cases 1, 2, 3 and 4\n             if (value >= uclip) {\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_681/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:46:33.470091868 -0500\n@@ -107,9 +107,6 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getMean();\n-        }\n         return result;\n     }\n \n@@ -169,9 +166,6 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getStandardDeviation();\n-        }\n         return result;\n     }\n \n@@ -243,7 +237,8 @@\n      * @return The row key.\n      */\n     public Comparable getRowKey(int row) {\n-        return this.data.getRowKey(row);\n+        double x = 0.0;\n+\t\treturn this.data.getRowKey(row);\n     }\n \n     /**\n@@ -376,7 +371,8 @@\n     public Range getRangeBounds(boolean includeInterval) {\n         Range result = null;\n         if (includeInterval) {\n-            if (!Double.isNaN(this.minimumRangeValueIncStdDev) \n+            double sumX = 0;\n+\t\t\tif (!Double.isNaN(this.minimumRangeValueIncStdDev) \n                     && !Double.isNaN(this.maximumRangeValueIncStdDev))\n             result = new Range(this.minimumRangeValueIncStdDev, \n                     this.maximumRangeValueIncStdDev);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "Replace", 
          "seed": "double result=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "Replace", 
          "seed": "double result=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "Replace", 
          "seed": "double result=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 107, 
          "faulty": "Number result=null;", 
          "type": "InsertBefore", 
          "seed": "this.maximumRangeValue=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 169, 
          "faulty": "Number result=null;", 
          "type": "InsertBefore", 
          "seed": "double sumX=0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 246, 
          "faulty": "return this.data.getRowKey(row);", 
          "type": "InsertBefore", 
          "seed": "this.minimumRangeValue=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 265, 
          "faulty": "if (uclip <= 0.0) {\n  if (value >= uclip) {\n    return;\n  }\n  base=uclip;\n  if (value <= lclip) {\n    value=lclip;\n  }\n}\n else if (lclip <= 0.0) {\n  if (value >= uclip) {\n    value=uclip;\n  }\n else {\n    if (value <= lclip) {\n      value=lclip;\n    }\n  }\n}\n else {\n  if (value <= lclip) {\n    return;\n  }\n  base=getLowerClip();\n  if (value >= uclip) {\n    value=uclip;\n  }\n}", 
          "type": "Replace", 
          "seed": "double previous=state.getSeriesRunningTotal();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 200, 
          "faulty": "if (!(data instanceof StatisticalCategoryDataset)) {\n  throw new IllegalArgumentException(\"Requires StatisticalCategoryDataset.\");\n}", 
          "type": "InsertBefore", 
          "seed": "plot.drawBackground(g2,dataArea);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 108, 
          "faulty": "MeanAndStandardDeviation masd=(MeanAndStandardDeviation)this.data.getObject(row,column);", 
          "type": "InsertBefore", 
          "seed": "double maxRegularValue=Double.NEGATIVE_INFINITY;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "InsertBefore", 
          "seed": "RectangleEdge location=plot.getRangeAxisEdge();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 274, 
          "faulty": "if (lclip <= 0.0) {\n  if (value >= uclip) {\n    value=uclip;\n  }\n else {\n    if (value <= lclip) {\n      value=lclip;\n    }\n  }\n}\n else {\n  if (value <= lclip) {\n    return;\n  }\n  base=getLowerClip();\n  if (value >= uclip) {\n    value=uclip;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "Stroke outlineStroke=plot.getOutlineStroke();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_177/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:41:52.361923761 -0500\n@@ -196,7 +196,8 @@\n                          int column,\n                          int pass) {\n \n-        // defensive check\n+        plot.drawBackground(g2, dataArea);\n+\t\t// defensive check\n         if (!(data instanceof StatisticalCategoryDataset)) {\n             throw new IllegalArgumentException(\n                 \"Requires StatisticalCategoryDataset.\");\n@@ -204,14 +205,6 @@\n         StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n     }\n                 \n     /**\n@@ -243,17 +236,9 @@\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                 dataArea, xAxisLocation);\n \n-        int seriesCount = getRowCount();\n+        RectangleEdge location = plot.getRangeAxisEdge();\n+\t\tdouble result = Double.NaN;\n         int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n@@ -262,34 +247,7 @@\n         double lclip = getLowerClip();\n         double uclip = getUpperClip();\n \n-        if (uclip <= 0.0) {  // cases 1, 2, 3 and 4\n-            if (value >= uclip) {\n-                return; // bar is not visible\n-            }\n-            base = uclip;\n-            if (value <= lclip) {\n-                value = lclip;\n-            }\n-        }\n-        else if (lclip <= 0.0) { // cases 5, 6, 7 and 8\n-            if (value >= uclip) {\n-                value = uclip;\n-            }\n-            else {\n-                if (value <= lclip) {\n-                    value = lclip;\n-                }\n-            }\n-        }\n-        else { // cases 9, 10, 11 and 12\n-            if (value <= lclip) {\n-                return; // bar is not visible\n-            }\n-            base = getLowerClip();\n-            if (value >= uclip) {\n-               value = uclip;\n-            }\n-        }\n+        double previous = state.getSeriesRunningTotal();\n \n         RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n         double transY1 = rangeAxis.valueToJava2D(base, dataArea, yAxisLocation);\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_177/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:41:52.365923877 -0500\n@@ -92,7 +92,10 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_177/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:41:52.365923877 -0500\n@@ -104,8 +104,10 @@\n      * @return The mean value.\n      */\n     public Number getMeanValue(int row, int column) {\n-        Number result = null;\n-        MeanAndStandardDeviation masd \n+        this.maximumRangeValue = Double.NaN;\n+\t\tNumber result = null;\n+        double maxRegularValue = Double.NEGATIVE_INFINITY;\n+\t\tMeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n             result = masd.getMean();\n@@ -166,7 +168,8 @@\n      * @return The standard deviation.\n      */\n     public Number getStdDevValue(int row, int column) {\n-        Number result = null;\n+        double sumX = 0;\n+\t\tNumber result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n@@ -243,7 +246,8 @@\n      * @return The row key.\n      */\n     public Comparable getRowKey(int row) {\n-        return this.data.getRowKey(row);\n+        this.minimumRangeValue = Double.NaN;\n+\t\treturn this.data.getRowKey(row);\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 273, 
          "faulty": "return this.data.getColumnCount();", 
          "type": "InsertBefore", 
          "seed": "List result=null;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 126, 
          "faulty": "return getMeanValue(row,column);", 
          "type": "InsertBefore", 
          "seed": "double minval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "int count=dataset.getColumnCount();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 273, 
          "faulty": "return this.data.getColumnCount();", 
          "type": "InsertBefore", 
          "seed": "double sumXX=0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 247, 
          "faulty": "int categoryCount=getColumnCount();", 
          "type": "Replace", 
          "seed": "PlotOrientation orient=plot.getOrientation();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 111, 
          "faulty": "result=masd.getMean();", 
          "type": "InsertBefore", 
          "seed": "int count=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_237/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:42:26.418912306 -0500\n@@ -204,14 +204,6 @@\n         StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n     }\n                 \n     /**\n@@ -244,16 +236,7 @@\n                 dataArea, xAxisLocation);\n \n         int seriesCount = getRowCount();\n-        int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n+        PlotOrientation orient = plot.getOrientation();\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_237/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:42:26.418912306 -0500\n@@ -92,7 +92,10 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_237/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:42:26.422912421 -0500\n@@ -108,7 +108,8 @@\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n-            result = masd.getMean();\n+            int count = 0;\n+\t\t\tresult = masd.getMean();\n         }\n         return result;\n     }\n@@ -123,7 +124,8 @@\n      * @return The value.\n      */\n     public Number getValue(int row, int column) {\n-        return getMeanValue(row, column);\n+        double minval = Double.NaN;\n+\t\treturn getMeanValue(row, column);\n     }\n \n     /**\n@@ -270,7 +272,9 @@\n      * @return The column count.\n      */\n     public int getColumnCount() {\n-        return this.data.getColumnCount();\n+        List result = null;\n+\t\tdouble sumXX = 0;\n+\t\treturn this.data.getColumnCount();\n     }\n \n     /**\n@@ -377,9 +381,11 @@\n         Range result = null;\n         if (includeInterval) {\n             if (!Double.isNaN(this.minimumRangeValueIncStdDev) \n-                    && !Double.isNaN(this.maximumRangeValueIncStdDev))\n-            result = new Range(this.minimumRangeValueIncStdDev, \n-                    this.maximumRangeValueIncStdDev);\n+                    && !Double.isNaN(this.maximumRangeValueIncStdDev)) {\n+\t\t\t\tdouble sumX2 = 0.0;\n+\t\t\t\tresult = new Range(this.minimumRangeValueIncStdDev,\n+\t\t\t\t\t\tthis.maximumRangeValueIncStdDev);\n+\t\t\t}\n         }\n         else {\n             if (!Double.isNaN(this.minimumRangeValue) \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 261, 
          "faulty": "double base=0.0;", 
          "type": "InsertBefore", 
          "seed": "double xx0=domainAxis.getCategoryStart(column,getColumnCount(),dataArea,plot.getDomainAxisEdge());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 243, 
          "faulty": "double rectY=domainAxis.getCategoryStart(column,getColumnCount(),dataArea,xAxisLocation);", 
          "type": "InsertBefore", 
          "seed": "double currentItemMargin=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 104, 
          "faulty": "return this.standardDeviation;", 
          "type": "InsertBefore", 
          "seed": "double sumXX=0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return new Icon(){\n  public void paintIcon(  Component c,  Graphics g,  int x,  int y){\n    Graphics2D g2=(Graphics2D)g;\n    path.transform(AffineTransform.getTranslateInstance(x,y));\n    if (fillPaint != null) {\n      g2.setPaint(fillPaint);\n      g2.fill(path);\n    }\n    if (outlinePaint != null) {\n      g2.setPaint(outlinePaint);\n      g2.draw(path);\n    }\n    path.transform(AffineTransform.getTranslateInstance(-x,-y));\n  }\n  public int getIconWidth(){\n    return width;\n  }\n  public int getIconHeight(){\n    return height;\n  }\n}\n;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 263, 
          "faulty": "double uclip=getUpperClip();", 
          "type": "InsertBefore", 
          "seed": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 126, 
          "faulty": "return getMeanValue(row,column);", 
          "type": "InsertBefore", 
          "seed": "double maxval=Double.NaN;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_570/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:45:32.112308354 -0500\n@@ -204,14 +204,6 @@\n         StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n     }\n                 \n     /**\n@@ -239,28 +231,29 @@\n                                      \n         RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n         \n-        // BAR Y\n+        double currentItemMargin = 0.0;\n+\t\t// BAR Y\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                 dataArea, xAxisLocation);\n \n         int seriesCount = getRowCount();\n         int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n         double value = meanValue.doubleValue();\n-        double base = 0.0;\n+        double xx0 = domainAxis.getCategoryStart(column, getColumnCount(),\n+\t\t\t\tdataArea, plot.getDomainAxisEdge());\n+\t\tdouble base = 0.0;\n         double lclip = getLowerClip();\n-        double uclip = getUpperClip();\n+        if (seriesCount > 1) {\n+\t\t\tdouble seriesGap = dataArea.getHeight() * getItemMargin()\n+\t\t\t\t\t/ (categoryCount * (seriesCount - 1));\n+\t\t\trectY = rectY + row * (state.getBarWidth() + seriesGap);\n+\t\t} else {\n+\t\t\trectY = rectY + row * state.getBarWidth();\n+\t\t}\n+\t\tdouble uclip = getUpperClip();\n \n         if (uclip <= 0.0) {  // cases 1, 2, 3 and 4\n             if (value >= uclip) {\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_570/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:45:32.112308354 -0500\n@@ -92,7 +92,8 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n@@ -101,7 +102,8 @@\n      * @return The standard deviation.\n      */\n     public Number getStandardDeviation() {\n-        return this.standardDeviation;\n+        double sumXX = 0;\n+\t\treturn this.standardDeviation;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_570/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:45:32.116308472 -0500\n@@ -123,7 +123,8 @@\n      * @return The value.\n      */\n     public Number getValue(int row, int column) {\n-        return getMeanValue(row, column);\n+        double maxval = Double.NaN;\n+\t\treturn getMeanValue(row, column);\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 170, 
          "faulty": "MeanAndStandardDeviation masd=(MeanAndStandardDeviation)this.data.getObject(row,column);", 
          "type": "InsertBefore", 
          "seed": "this.minimumRangeValue=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 265, 
          "faulty": "if (uclip <= 0.0) {\n  if (value >= uclip) {\n    return;\n  }\n  base=uclip;\n  if (value <= lclip) {\n    value=lclip;\n  }\n}\n else if (lclip <= 0.0) {\n  if (value >= uclip) {\n    value=uclip;\n  }\n else {\n    if (value <= lclip) {\n      value=lclip;\n    }\n  }\n}\n else {\n  if (value <= lclip) {\n    return;\n  }\n  base=getLowerClip();\n  if (value >= uclip) {\n    value=uclip;\n  }\n}", 
          "type": "Delete", 
          "seed": "int itemCount=dataset.getColumnCount();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_420/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:44:14.846062330 -0500\n@@ -204,14 +204,6 @@\n         StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n     }\n                 \n     /**\n@@ -251,7 +243,6 @@\n             rectY = rectY + row * (state.getBarWidth() + seriesGap);\n         }\n         else {\n-            rectY = rectY + row * state.getBarWidth();\n         }\n \n         // BAR X\n@@ -262,35 +253,6 @@\n         double lclip = getLowerClip();\n         double uclip = getUpperClip();\n \n-        if (uclip <= 0.0) {  // cases 1, 2, 3 and 4\n-            if (value >= uclip) {\n-                return; // bar is not visible\n-            }\n-            base = uclip;\n-            if (value <= lclip) {\n-                value = lclip;\n-            }\n-        }\n-        else if (lclip <= 0.0) { // cases 5, 6, 7 and 8\n-            if (value >= uclip) {\n-                value = uclip;\n-            }\n-            else {\n-                if (value <= lclip) {\n-                    value = lclip;\n-                }\n-            }\n-        }\n-        else { // cases 9, 10, 11 and 12\n-            if (value <= lclip) {\n-                return; // bar is not visible\n-            }\n-            base = getLowerClip();\n-            if (value >= uclip) {\n-               value = uclip;\n-            }\n-        }\n-\n         RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n         double transY1 = rangeAxis.valueToJava2D(base, dataArea, yAxisLocation);\n         double transY2 = rangeAxis.valueToJava2D(value, dataArea, \n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_420/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:44:14.850062445 -0500\n@@ -92,7 +92,13 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_420/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:44:14.850062445 -0500\n@@ -167,7 +167,8 @@\n      */\n     public Number getStdDevValue(int row, int column) {\n         Number result = null;\n-        MeanAndStandardDeviation masd \n+        this.minimumRangeValue = Double.NaN;\n+\t\tMeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n             result = masd.getStandardDeviation();\n@@ -377,9 +378,11 @@\n         Range result = null;\n         if (includeInterval) {\n             if (!Double.isNaN(this.minimumRangeValueIncStdDev) \n-                    && !Double.isNaN(this.maximumRangeValueIncStdDev))\n-            result = new Range(this.minimumRangeValueIncStdDev, \n-                    this.maximumRangeValueIncStdDev);\n+                    && !Double.isNaN(this.maximumRangeValueIncStdDev)) {\n+\t\t\t\tdouble sumX2 = 0.0;\n+\t\t\t\tresult = new Range(this.minimumRangeValueIncStdDev,\n+\t\t\t\t\t\tthis.maximumRangeValueIncStdDev);\n+\t\t\t}\n         }\n         else {\n             if (!Double.isNaN(this.minimumRangeValue) \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "Replace", 
          "seed": "double result=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 273, 
          "faulty": "return this.data.getColumnCount();", 
          "type": "InsertBefore", 
          "seed": "List result=null;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 126, 
          "faulty": "return getMeanValue(row,column);", 
          "type": "InsertBefore", 
          "seed": "double minval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "int count=dataset.getColumnCount();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 273, 
          "faulty": "return this.data.getColumnCount();", 
          "type": "InsertBefore", 
          "seed": "double sumXX=0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 247, 
          "faulty": "int categoryCount=getColumnCount();", 
          "type": "Replace", 
          "seed": "PlotOrientation orient=plot.getOrientation();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "Replace", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "int seriesCount=getRowCount();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 377, 
          "faulty": "Range result=null;", 
          "type": "Replace", 
          "seed": "Range result=null;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "InsertBefore", 
          "seed": "CategoryItemLabelGenerator generator=getItemLabelGenerator(row,column);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_269/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:42:42.823388459 -0500\n@@ -201,17 +201,11 @@\n             throw new IllegalArgumentException(\n                 \"Requires StatisticalCategoryDataset.\");\n         }\n-        StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n+        CategoryItemLabelGenerator generator = getItemLabelGenerator(row,\n+\t\t\t\tcolumn);\n+\t\tStatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n     }\n                 \n     /**\n@@ -243,17 +237,8 @@\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                 dataArea, xAxisLocation);\n \n-        int seriesCount = getRowCount();\n-        int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n+        Number dataValue = dataset.getValue(row, column);\n+        PlotOrientation orient = plot.getOrientation();\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_269/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:42:42.823388459 -0500\n@@ -92,7 +92,12 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_269/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:42:42.827388574 -0500\n@@ -123,7 +123,8 @@\n      * @return The value.\n      */\n     public Number getValue(int row, int column) {\n-        return getMeanValue(row, column);\n+        double minval = Double.NaN;\n+\t\treturn getMeanValue(row, column);\n     }\n \n     /**\n@@ -270,7 +271,9 @@\n      * @return The column count.\n      */\n     public int getColumnCount() {\n-        return this.data.getColumnCount();\n+        List result = null;\n+\t\tdouble sumXX = 0;\n+\t\treturn this.data.getColumnCount();\n     }\n \n     /**\n@@ -377,9 +380,11 @@\n         Range result = null;\n         if (includeInterval) {\n             if (!Double.isNaN(this.minimumRangeValueIncStdDev) \n-                    && !Double.isNaN(this.maximumRangeValueIncStdDev))\n-            result = new Range(this.minimumRangeValueIncStdDev, \n-                    this.maximumRangeValueIncStdDev);\n+                    && !Double.isNaN(this.maximumRangeValueIncStdDev)) {\n+\t\t\t\tdouble sumX2 = 0.0;\n+\t\t\t\tresult = new Range(this.minimumRangeValueIncStdDev,\n+\t\t\t\t\t\tthis.maximumRangeValueIncStdDev);\n+\t\t\t}\n         }\n         else {\n             if (!Double.isNaN(this.minimumRangeValue) \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "Replace", 
          "seed": "double result=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 107, 
          "faulty": "Number result=null;", 
          "type": "InsertBefore", 
          "seed": "this.maximumRangeValue=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 200, 
          "faulty": "if (!(data instanceof StatisticalCategoryDataset)) {\n  throw new IllegalArgumentException(\"Requires StatisticalCategoryDataset.\");\n}", 
          "type": "InsertBefore", 
          "seed": "double rectBreadth=state.getBarWidth();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 265, 
          "faulty": "if (uclip <= 0.0) {\n  if (value >= uclip) {\n    return;\n  }\n  base=uclip;\n  if (value <= lclip) {\n    value=lclip;\n  }\n}\n else if (lclip <= 0.0) {\n  if (value >= uclip) {\n    value=uclip;\n  }\n else {\n    if (value <= lclip) {\n      value=lclip;\n    }\n  }\n}\n else {\n  if (value <= lclip) {\n    return;\n  }\n  base=getLowerClip();\n  if (value >= uclip) {\n    value=uclip;\n  }\n}", 
          "type": "Delete", 
          "seed": "boolean inverted=rangeAxis.isInverted();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_126/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:41:25.685149422 -0500\n@@ -196,7 +196,8 @@\n                          int column,\n                          int pass) {\n \n-        // defensive check\n+        double rectBreadth = state.getBarWidth();\n+\t\t// defensive check\n         if (!(data instanceof StatisticalCategoryDataset)) {\n             throw new IllegalArgumentException(\n                 \"Requires StatisticalCategoryDataset.\");\n@@ -204,14 +205,6 @@\n         StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n     }\n                 \n     /**\n@@ -243,17 +236,8 @@\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                 dataArea, xAxisLocation);\n \n-        int seriesCount = getRowCount();\n+        double result = Double.NaN;\n         int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n@@ -262,35 +246,6 @@\n         double lclip = getLowerClip();\n         double uclip = getUpperClip();\n \n-        if (uclip <= 0.0) {  // cases 1, 2, 3 and 4\n-            if (value >= uclip) {\n-                return; // bar is not visible\n-            }\n-            base = uclip;\n-            if (value <= lclip) {\n-                value = lclip;\n-            }\n-        }\n-        else if (lclip <= 0.0) { // cases 5, 6, 7 and 8\n-            if (value >= uclip) {\n-                value = uclip;\n-            }\n-            else {\n-                if (value <= lclip) {\n-                    value = lclip;\n-                }\n-            }\n-        }\n-        else { // cases 9, 10, 11 and 12\n-            if (value <= lclip) {\n-                return; // bar is not visible\n-            }\n-            base = getLowerClip();\n-            if (value >= uclip) {\n-               value = uclip;\n-            }\n-        }\n-\n         RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n         double transY1 = rangeAxis.valueToJava2D(base, dataArea, yAxisLocation);\n         double transY2 = rangeAxis.valueToJava2D(value, dataArea, \n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_126/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:41:25.689149537 -0500\n@@ -92,7 +92,9 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\tthis.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_126/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:41:25.693149654 -0500\n@@ -104,7 +104,8 @@\n      * @return The mean value.\n      */\n     public Number getMeanValue(int row, int column) {\n-        Number result = null;\n+        this.maximumRangeValue = Double.NaN;\n+\t\tNumber result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "int count=dataset.getColumnCount();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 273, 
          "faulty": "return this.data.getColumnCount();", 
          "type": "InsertBefore", 
          "seed": "double sumXX=0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 247, 
          "faulty": "int categoryCount=getColumnCount();", 
          "type": "Replace", 
          "seed": "PlotOrientation orient=plot.getOrientation();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "InsertBefore", 
          "seed": "setNegativeItemLabelPositionFallback(null);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "InsertBefore", 
          "seed": "double minval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 263, 
          "faulty": "double uclip=getUpperClip();", 
          "type": "InsertBefore", 
          "seed": "if (value <= lclip) {\n  value=lclip;\n}"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "double uclip=getUpperClip();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 200, 
          "faulty": "if (!(data instanceof StatisticalCategoryDataset)) {\n  throw new IllegalArgumentException(\"Requires StatisticalCategoryDataset.\");\n}", 
          "type": "Delete", 
          "seed": "Stroke stroke=plot.getRangeGridlineStroke();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "InsertBefore", 
          "seed": "if (masd != null) {\n  result=masd.getStandardDeviation();\n}"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 111, 
          "faulty": "result=masd.getMean();", 
          "type": "Delete", 
          "seed": "int count=0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 175, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "double m=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 389, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "double minval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "Composite originalComposite=g2.getComposite();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_319/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:43:12.764257616 -0500\n@@ -196,22 +196,9 @@\n                          int column,\n                          int pass) {\n \n-        // defensive check\n-        if (!(data instanceof StatisticalCategoryDataset)) {\n-            throw new IllegalArgumentException(\n-                \"Requires StatisticalCategoryDataset.\");\n-        }\n         StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n     }\n                 \n     /**\n@@ -243,24 +230,19 @@\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                 dataArea, xAxisLocation);\n \n-        int seriesCount = getRowCount();\n-        int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n+        setNegativeItemLabelPositionFallback(null);\n+\t\tint seriesCount = getRowCount();\n+        PlotOrientation orient = plot.getOrientation();\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n         double value = meanValue.doubleValue();\n         double base = 0.0;\n         double lclip = getLowerClip();\n-        double uclip = getUpperClip();\n+        if (value <= lclip) {\n+\t\t\tvalue = lclip;\n+\t\t}\n+\t\tdouble uclip = getUpperClip();\n \n         if (uclip <= 0.0) {  // cases 1, 2, 3 and 4\n             if (value >= uclip) {\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_319/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:43:12.764257616 -0500\n@@ -92,7 +92,8 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_319/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:43:12.768257734 -0500\n@@ -107,8 +107,11 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getMean();\n+        double minval = Double.NaN;\n+\t\tif (masd != null) {\n+\t\t\tresult = masd.getStandardDeviation();\n+\t\t}\n+\t\tif (masd != null) {\n         }\n         return result;\n     }\n@@ -172,7 +175,8 @@\n         if (masd != null) {\n             result = masd.getStandardDeviation();\n         }\n-        return result;\n+        double m = 0.0;\n+\t\treturn result;\n     }\n \n     /**\n@@ -270,7 +274,8 @@\n      * @return The column count.\n      */\n     public int getColumnCount() {\n-        return this.data.getColumnCount();\n+        double sumXX = 0;\n+\t\treturn this.data.getColumnCount();\n     }\n \n     /**\n@@ -386,7 +391,8 @@\n                     && !Double.isNaN(this.maximumRangeValue))\n             result = new Range(this.minimumRangeValue, this.maximumRangeValue);            \n         }\n-        return result;\n+        double minval = Double.NaN;\n+\t\treturn result;\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 246, 
          "faulty": "return this.data.getRowKey(row);", 
          "type": "InsertBefore", 
          "seed": "this.minimumRangeValue=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 265, 
          "faulty": "if (uclip <= 0.0) {\n  if (value >= uclip) {\n    return;\n  }\n  base=uclip;\n  if (value <= lclip) {\n    value=lclip;\n  }\n}\n else if (lclip <= 0.0) {\n  if (value >= uclip) {\n    value=uclip;\n  }\n else {\n    if (value <= lclip) {\n      value=lclip;\n    }\n  }\n}\n else {\n  if (value <= lclip) {\n    return;\n  }\n  base=getLowerClip();\n  if (value >= uclip) {\n    value=uclip;\n  }\n}", 
          "type": "Replace", 
          "seed": "double previous=state.getSeriesRunningTotal();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 200, 
          "faulty": "if (!(data instanceof StatisticalCategoryDataset)) {\n  throw new IllegalArgumentException(\"Requires StatisticalCategoryDataset.\");\n}", 
          "type": "InsertBefore", 
          "seed": "plot.drawBackground(g2,dataArea);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 108, 
          "faulty": "MeanAndStandardDeviation masd=(MeanAndStandardDeviation)this.data.getObject(row,column);", 
          "type": "InsertBefore", 
          "seed": "double maxRegularValue=Double.NEGATIVE_INFINITY;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "InsertBefore", 
          "seed": "int series=0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "InsertBefore", 
          "seed": "RectangleEdge location=plot.getRangeAxisEdge();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 175, 
          "faulty": "return result;", 
          "type": "Replace", 
          "seed": "throw new IllegalArgumentException(\"Null 'values' argument.\");"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "Replace", 
          "seed": "double sumX2=0.0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_179/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:41:54.505985995 -0500\n@@ -196,22 +196,16 @@\n                          int column,\n                          int pass) {\n \n-        // defensive check\n+        plot.drawBackground(g2, dataArea);\n+\t\t// defensive check\n         if (!(data instanceof StatisticalCategoryDataset)) {\n             throw new IllegalArgumentException(\n                 \"Requires StatisticalCategoryDataset.\");\n         }\n-        StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n+        int series = 0;\n+\t\tStatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n     }\n                 \n     /**\n@@ -243,7 +237,8 @@\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                 dataArea, xAxisLocation);\n \n-        int seriesCount = getRowCount();\n+        RectangleEdge location = plot.getRangeAxisEdge();\n+\t\tint seriesCount = getRowCount();\n         int categoryCount = getColumnCount();\n         if (seriesCount > 1) {\n             double seriesGap = dataArea.getHeight() * getItemMargin()\n@@ -251,7 +246,6 @@\n             rectY = rectY + row * (state.getBarWidth() + seriesGap);\n         }\n         else {\n-            rectY = rectY + row * state.getBarWidth();\n         }\n \n         // BAR X\n@@ -262,34 +256,7 @@\n         double lclip = getLowerClip();\n         double uclip = getUpperClip();\n \n-        if (uclip <= 0.0) {  // cases 1, 2, 3 and 4\n-            if (value >= uclip) {\n-                return; // bar is not visible\n-            }\n-            base = uclip;\n-            if (value <= lclip) {\n-                value = lclip;\n-            }\n-        }\n-        else if (lclip <= 0.0) { // cases 5, 6, 7 and 8\n-            if (value >= uclip) {\n-                value = uclip;\n-            }\n-            else {\n-                if (value <= lclip) {\n-                    value = lclip;\n-                }\n-            }\n-        }\n-        else { // cases 9, 10, 11 and 12\n-            if (value <= lclip) {\n-                return; // bar is not visible\n-            }\n-            base = getLowerClip();\n-            if (value >= uclip) {\n-               value = uclip;\n-            }\n-        }\n+        double previous = state.getSeriesRunningTotal();\n \n         RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n         double transY1 = rangeAxis.valueToJava2D(base, dataArea, yAxisLocation);\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_179/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:41:54.509986112 -0500\n@@ -92,7 +92,8 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_179/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:41:54.509986112 -0500\n@@ -105,11 +105,10 @@\n      */\n     public Number getMeanValue(int row, int column) {\n         Number result = null;\n-        MeanAndStandardDeviation masd \n+        double maxRegularValue = Double.NEGATIVE_INFINITY;\n+\t\tMeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getMean();\n-        }\n+        double sumX2 = 0.0;\n         return result;\n     }\n \n@@ -172,7 +171,7 @@\n         if (masd != null) {\n             result = masd.getStandardDeviation();\n         }\n-        return result;\n+        throw new IllegalArgumentException(\"Null 'values' argument.\");\n     }\n \n     /**\n@@ -243,7 +242,8 @@\n      * @return The row key.\n      */\n     public Comparable getRowKey(int row) {\n-        return this.data.getRowKey(row);\n+        this.minimumRangeValue = Double.NaN;\n+\t\treturn this.data.getRowKey(row);\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 170, 
          "faulty": "MeanAndStandardDeviation masd=(MeanAndStandardDeviation)this.data.getObject(row,column);", 
          "type": "InsertBefore", 
          "seed": "this.minimumRangeValue=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 111, 
          "faulty": "result=masd.getMean();", 
          "type": "Delete", 
          "seed": "double maxRegularValue=Double.NEGATIVE_INFINITY;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 107, 
          "faulty": "Number result=null;", 
          "type": "InsertBefore", 
          "seed": "double sumXY=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_477/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:44:45.578955706 -0500\n@@ -204,14 +204,6 @@\n         StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n     }\n                 \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_477/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:44:45.578955706 -0500\n@@ -92,7 +92,13 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_477/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:44:45.582955822 -0500\n@@ -104,11 +104,11 @@\n      * @return The mean value.\n      */\n     public Number getMeanValue(int row, int column) {\n-        Number result = null;\n+        double sumXY = 0;\n+\t\tNumber result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n-            result = masd.getMean();\n         }\n         return result;\n     }\n@@ -167,7 +167,8 @@\n      */\n     public Number getStdDevValue(int row, int column) {\n         Number result = null;\n-        MeanAndStandardDeviation masd \n+        this.minimumRangeValue = Double.NaN;\n+\t\tMeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n             result = masd.getStandardDeviation();\n@@ -377,9 +378,11 @@\n         Range result = null;\n         if (includeInterval) {\n             if (!Double.isNaN(this.minimumRangeValueIncStdDev) \n-                    && !Double.isNaN(this.maximumRangeValueIncStdDev))\n-            result = new Range(this.minimumRangeValueIncStdDev, \n-                    this.maximumRangeValueIncStdDev);\n+                    && !Double.isNaN(this.maximumRangeValueIncStdDev)) {\n+\t\t\t\tdouble sumX2 = 0.0;\n+\t\t\t\tresult = new Range(this.minimumRangeValueIncStdDev,\n+\t\t\t\t\t\tthis.maximumRangeValueIncStdDev);\n+\t\t\t}\n         }\n         else {\n             if (!Double.isNaN(this.minimumRangeValue) \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 261, 
          "faulty": "double base=0.0;", 
          "type": "InsertBefore", 
          "seed": "double xx0=domainAxis.getCategoryStart(column,getColumnCount(),dataArea,plot.getDomainAxisEdge());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 172, 
          "faulty": "if (masd != null) {\n  result=masd.getStandardDeviation();\n}", 
          "type": "Replace", 
          "seed": "double maxOutlier=Double.NEGATIVE_INFINITY;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 172, 
          "faulty": "if (masd != null) {\n  result=masd.getStandardDeviation();\n}", 
          "type": "Replace", 
          "seed": "double maxOutlier=Double.NEGATIVE_INFINITY;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 243, 
          "faulty": "double rectY=domainAxis.getCategoryStart(column,getColumnCount(),dataArea,xAxisLocation);", 
          "type": "InsertBefore", 
          "seed": "double y0=dataArea.getMaxY();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "Delete", 
          "seed": "this.minimumRangeValueIncStdDev=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 172, 
          "faulty": "if (masd != null) {\n  result=masd.getStandardDeviation();\n}", 
          "type": "Replace", 
          "seed": "double y=0.0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_491/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:44:53.111174657 -0500\n@@ -239,7 +239,8 @@\n                                      \n         RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n         \n-        // BAR Y\n+        double y0 = dataArea.getMaxY();\n+\t\t// BAR Y\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                 dataArea, xAxisLocation);\n \n@@ -258,7 +259,9 @@\n         Number meanValue = dataset.getMeanValue(row, column);\n \n         double value = meanValue.doubleValue();\n-        double base = 0.0;\n+        double xx0 = domainAxis.getCategoryStart(column, getColumnCount(),\n+\t\t\t\tdataArea, plot.getDomainAxisEdge());\n+\t\tdouble base = 0.0;\n         double lclip = getLowerClip();\n         double uclip = getUpperClip();\n \n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_491/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:44:53.115174775 -0500\n@@ -107,9 +107,6 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getMean();\n-        }\n         return result;\n     }\n \n@@ -169,9 +166,7 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getStandardDeviation();\n-        }\n+        double y = 0.0;\n         return result;\n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 111, 
          "faulty": "result=masd.getMean();", 
          "type": "Delete", 
          "seed": "int count=0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 175, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "double m=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 389, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "double minval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Replace", 
          "seed": "setIncludeBaseInRange(false);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 172, 
          "faulty": "if (masd != null) {\n  result=masd.getStandardDeviation();\n}", 
          "type": "InsertBefore", 
          "seed": "double sumX=0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 274, 
          "faulty": "if (lclip <= 0.0) {\n  if (value >= uclip) {\n    value=uclip;\n  }\n else {\n    if (value <= lclip) {\n      value=lclip;\n    }\n  }\n}\n else {\n  if (value <= lclip) {\n    return;\n  }\n  base=getLowerClip();\n  if (value >= uclip) {\n    value=uclip;\n  }\n}", 
          "type": "Delete", 
          "seed": "double yy2=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 108, 
          "faulty": "MeanAndStandardDeviation masd=(MeanAndStandardDeviation)this.data.getObject(row,column);", 
          "type": "InsertBefore", 
          "seed": "double sumY=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_352/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:43:32.204822761 -0500\n@@ -204,14 +204,7 @@\n         StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n+        setIncludeBaseInRange(false);\n     }\n                 \n     /**\n@@ -245,15 +238,6 @@\n \n         int seriesCount = getRowCount();\n         int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n@@ -270,26 +254,8 @@\n             if (value <= lclip) {\n                 value = lclip;\n             }\n-        }\n-        else if (lclip <= 0.0) { // cases 5, 6, 7 and 8\n-            if (value >= uclip) {\n-                value = uclip;\n-            }\n-            else {\n-                if (value <= lclip) {\n-                    value = lclip;\n-                }\n-            }\n-        }\n-        else { // cases 9, 10, 11 and 12\n-            if (value <= lclip) {\n-                return; // bar is not visible\n-            }\n-            base = getLowerClip();\n-            if (value >= uclip) {\n-               value = uclip;\n-            }\n-        }\n+        } else\n+\t\t\t;\n \n         RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n         double transY1 = rangeAxis.valueToJava2D(base, dataArea, yAxisLocation);\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_352/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:43:32.208822877 -0500\n@@ -105,10 +105,10 @@\n      */\n     public Number getMeanValue(int row, int column) {\n         Number result = null;\n-        MeanAndStandardDeviation masd \n+        double sumY = 0.0;\n+\t\tMeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n-            result = masd.getMean();\n         }\n         return result;\n     }\n@@ -169,10 +169,12 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n+        double sumX = 0;\n+\t\tif (masd != null) {\n             result = masd.getStandardDeviation();\n         }\n-        return result;\n+        double m = 0.0;\n+\t\treturn result;\n     }\n \n     /**\n@@ -386,7 +388,8 @@\n                     && !Double.isNaN(this.maximumRangeValue))\n             result = new Range(this.minimumRangeValue, this.maximumRangeValue);            \n         }\n-        return result;\n+        double minval = Double.NaN;\n+\t\treturn result;\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "InsertBefore", 
          "seed": "if (masd != null) {\n  result=masd.getStandardDeviation();\n}"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 111, 
          "faulty": "result=masd.getMean();", 
          "type": "Delete", 
          "seed": "int count=0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 175, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "double m=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 389, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "double minval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Replace", 
          "seed": "setIncludeBaseInRange(false);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 273, 
          "faulty": "return this.data.getColumnCount();", 
          "type": "InsertBefore", 
          "seed": "double sumXX=0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 247, 
          "faulty": "int categoryCount=getColumnCount();", 
          "type": "Replace", 
          "seed": "PlotOrientation orient=plot.getOrientation();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "InsertBefore", 
          "seed": "setNegativeItemLabelPositionFallback(null);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "InsertBefore", 
          "seed": "double minval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "Composite originalComposite=g2.getComposite();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "Delete", 
          "seed": "double aRadius=0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 175, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "double y=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "InsertBefore", 
          "seed": "PlotOrientation orient=plot.getOrientation();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 379, 
          "faulty": "if (!Double.isNaN(this.minimumRangeValueIncStdDev) && !Double.isNaN(this.maximumRangeValueIncStdDev)) result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double x=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 170, 
          "faulty": "MeanAndStandardDeviation masd=(MeanAndStandardDeviation)this.data.getObject(row,column);", 
          "type": "InsertBefore", 
          "seed": "this.minimumRangeValue=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "double sumY2=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 208, 
          "faulty": "drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);", 
          "type": "InsertBefore", 
          "seed": "CategoryPlot cp=getPlot();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 246, 
          "faulty": "return this.data.getRowKey(row);", 
          "type": "InsertBefore", 
          "seed": "double minval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 111, 
          "faulty": "result=masd.getMean();", 
          "type": "InsertBefore", 
          "seed": "double sumY=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_455/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:44:32.862586054 -0500\n@@ -201,17 +201,8 @@\n             throw new IllegalArgumentException(\n                 \"Requires StatisticalCategoryDataset.\");\n         }\n-        StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n-\n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n+        PlotOrientation orient = plot.getOrientation();\n     }\n                 \n     /**\n@@ -243,17 +234,9 @@\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                 dataArea, xAxisLocation);\n \n-        int seriesCount = getRowCount();\n-        int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n+        setNegativeItemLabelPositionFallback(null);\n+\t\tint seriesCount = getRowCount();\n+        PlotOrientation orient = plot.getOrientation();\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_455/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:44:32.862586054 -0500\n@@ -92,7 +92,13 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tdouble sumY2 = 0.0;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_455/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:44:32.866586172 -0500\n@@ -108,7 +108,11 @@\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n-            result = masd.getMean();\n+\t\t\tresult = masd.getStandardDeviation();\n+\t\t}\n+\t\tdouble minval = Double.NaN;\n+\t\tif (masd != null) {\n+            double sumY = 0;\n         }\n         return result;\n     }\n@@ -167,12 +171,15 @@\n      */\n     public Number getStdDevValue(int row, int column) {\n         Number result = null;\n-        MeanAndStandardDeviation masd \n+        this.minimumRangeValue = Double.NaN;\n+\t\tMeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n             result = masd.getStandardDeviation();\n         }\n-        return result;\n+        double m = 0.0;\n+\t\tdouble y = 0.0;\n+\t\treturn result;\n     }\n \n     /**\n@@ -243,7 +250,8 @@\n      * @return The row key.\n      */\n     public Comparable getRowKey(int row) {\n-        return this.data.getRowKey(row);\n+        double minval = Double.NaN;\n+\t\treturn this.data.getRowKey(row);\n     }\n \n     /**\n@@ -270,7 +278,8 @@\n      * @return The column count.\n      */\n     public int getColumnCount() {\n-        return this.data.getColumnCount();\n+        double sumXX = 0;\n+\t\treturn this.data.getColumnCount();\n     }\n \n     /**\n@@ -376,17 +385,21 @@\n     public Range getRangeBounds(boolean includeInterval) {\n         Range result = null;\n         if (includeInterval) {\n-            if (!Double.isNaN(this.minimumRangeValueIncStdDev) \n-                    && !Double.isNaN(this.maximumRangeValueIncStdDev))\n-            result = new Range(this.minimumRangeValueIncStdDev, \n-                    this.maximumRangeValueIncStdDev);\n+            double x = 0.0;\n+\t\t\tif (!Double.isNaN(this.minimumRangeValueIncStdDev) \n+                    && !Double.isNaN(this.maximumRangeValueIncStdDev)) {\n+\t\t\t\tdouble sumX2 = 0.0;\n+\t\t\t\tresult = new Range(this.minimumRangeValueIncStdDev,\n+\t\t\t\t\t\tthis.maximumRangeValueIncStdDev);\n+\t\t\t}\n         }\n         else {\n             if (!Double.isNaN(this.minimumRangeValue) \n                     && !Double.isNaN(this.maximumRangeValue))\n             result = new Range(this.minimumRangeValue, this.maximumRangeValue);            \n         }\n-        return result;\n+        double minval = Double.NaN;\n+\t\treturn result;\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 261, 
          "faulty": "double base=0.0;", 
          "type": "InsertBefore", 
          "seed": "double xx0=domainAxis.getCategoryStart(column,getColumnCount(),dataArea,plot.getDomainAxisEdge());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 172, 
          "faulty": "if (masd != null) {\n  result=masd.getStandardDeviation();\n}", 
          "type": "Replace", 
          "seed": "double maxOutlier=Double.NEGATIVE_INFINITY;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 243, 
          "faulty": "double rectY=domainAxis.getCategoryStart(column,getColumnCount(),dataArea,xAxisLocation);", 
          "type": "InsertBefore", 
          "seed": "double y0=dataArea.getMaxY();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "Delete", 
          "seed": "this.minimumRangeValueIncStdDev=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 243, 
          "faulty": "double rectY=domainAxis.getCategoryStart(column,getColumnCount(),dataArea,xAxisLocation);", 
          "type": "InsertBefore", 
          "seed": "double currentItemMargin=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "InsertBefore", 
          "seed": "g2.setStroke(plot.getRangeGridlineStroke());"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_499/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:44:57.447300703 -0500\n@@ -201,17 +201,10 @@\n             throw new IllegalArgumentException(\n                 \"Requires StatisticalCategoryDataset.\");\n         }\n-        StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n+        g2.setStroke(plot.getRangeGridlineStroke());\n+\t\tStatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n     }\n                 \n     /**\n@@ -239,7 +232,9 @@\n                                      \n         RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n         \n-        // BAR Y\n+        double y0 = dataArea.getMaxY();\n+\t\tdouble currentItemMargin = 0.0;\n+\t\t// BAR Y\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                 dataArea, xAxisLocation);\n \n@@ -258,7 +253,9 @@\n         Number meanValue = dataset.getMeanValue(row, column);\n \n         double value = meanValue.doubleValue();\n-        double base = 0.0;\n+        double xx0 = domainAxis.getCategoryStart(column, getColumnCount(),\n+\t\t\t\tdataArea, plot.getDomainAxisEdge());\n+\t\tdouble base = 0.0;\n         double lclip = getLowerClip();\n         double uclip = getUpperClip();\n \n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_499/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:44:57.451300819 -0500\n@@ -92,7 +92,8 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_499/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:44:57.451300819 -0500\n@@ -107,9 +107,6 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getMean();\n-        }\n         return result;\n     }\n \n@@ -169,9 +166,7 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getStandardDeviation();\n-        }\n+        double maxOutlier = Double.NEGATIVE_INFINITY;\n         return result;\n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 273, 
          "faulty": "return this.data.getColumnCount();", 
          "type": "InsertBefore", 
          "seed": "List result=null;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 108, 
          "faulty": "MeanAndStandardDeviation masd=(MeanAndStandardDeviation)this.data.getObject(row,column);", 
          "type": "InsertBefore", 
          "seed": "double m=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "double y2=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 200, 
          "faulty": "if (!(data instanceof StatisticalCategoryDataset)) {\n  throw new IllegalArgumentException(\"Requires StatisticalCategoryDataset.\");\n}", 
          "type": "InsertBefore", 
          "seed": "double positiveBase=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 206, 
          "faulty": "PlotOrientation orientation=plot.getOrientation();", 
          "type": "Delete", 
          "seed": "return new Icon(){\n  public void paintIcon(  Component c,  Graphics g,  int x,  int y){\n    Graphics2D g2=(Graphics2D)g;\n    path.transform(AffineTransform.getTranslateInstance(x,y));\n    if (fillPaint != null) {\n      g2.setPaint(fillPaint);\n      g2.fill(path);\n    }\n    if (outlinePaint != null) {\n      g2.setPaint(outlinePaint);\n      g2.draw(path);\n    }\n    path.transform(AffineTransform.getTranslateInstance(-x,-y));\n  }\n  public int getIconWidth(){\n    return width;\n  }\n  public int getIconHeight(){\n    return height;\n  }\n}\n;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_277/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:42:47.639528249 -0500\n@@ -196,22 +196,13 @@\n                          int column,\n                          int pass) {\n \n-        // defensive check\n+        double positiveBase = 0.0;\n+\t\t// defensive check\n         if (!(data instanceof StatisticalCategoryDataset)) {\n             throw new IllegalArgumentException(\n                 \"Requires StatisticalCategoryDataset.\");\n         }\n         StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n-\n-        PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n     }\n                 \n     /**\n@@ -245,15 +236,6 @@\n \n         int seriesCount = getRowCount();\n         int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_277/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:42:47.643528367 -0500\n@@ -92,7 +92,9 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\tthis.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_277/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:42:47.643528367 -0500\n@@ -105,7 +105,8 @@\n      */\n     public Number getMeanValue(int row, int column) {\n         Number result = null;\n-        MeanAndStandardDeviation masd \n+        double m = 0.0;\n+\t\tMeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n             result = masd.getMean();\n@@ -270,7 +271,8 @@\n      * @return The column count.\n      */\n     public int getColumnCount() {\n-        return this.data.getColumnCount();\n+        List result = null;\n+\t\treturn this.data.getColumnCount();\n     }\n \n     /**\n@@ -377,9 +379,11 @@\n         Range result = null;\n         if (includeInterval) {\n             if (!Double.isNaN(this.minimumRangeValueIncStdDev) \n-                    && !Double.isNaN(this.maximumRangeValueIncStdDev))\n-            result = new Range(this.minimumRangeValueIncStdDev, \n-                    this.maximumRangeValueIncStdDev);\n+                    && !Double.isNaN(this.maximumRangeValueIncStdDev)) {\n+\t\t\t\tdouble sumX2 = 0.0;\n+\t\t\t\tresult = new Range(this.minimumRangeValueIncStdDev,\n+\t\t\t\t\t\tthis.maximumRangeValueIncStdDev);\n+\t\t\t}\n         }\n         else {\n             if (!Double.isNaN(this.minimumRangeValue) \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "Delete", 
          "seed": "this.minimumRangeValueIncStdDev=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Replace", 
          "seed": "double xx2=domainAxis.getCategoryEnd(column,getColumnCount(),dataArea,plot.getDomainAxisEdge());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "InsertBefore", 
          "seed": "g2.setStroke(plot.getRangeGridlineStroke());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 243, 
          "faulty": "double rectY=domainAxis.getCategoryStart(column,getColumnCount(),dataArea,xAxisLocation);", 
          "type": "InsertBefore", 
          "seed": "double currentItemMargin=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 104, 
          "faulty": "return this.standardDeviation;", 
          "type": "InsertBefore", 
          "seed": "double sumXX=0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return new Icon(){\n  public void paintIcon(  Component c,  Graphics g,  int x,  int y){\n    Graphics2D g2=(Graphics2D)g;\n    path.transform(AffineTransform.getTranslateInstance(x,y));\n    if (fillPaint != null) {\n      g2.setPaint(fillPaint);\n      g2.fill(path);\n    }\n    if (outlinePaint != null) {\n      g2.setPaint(outlinePaint);\n      g2.draw(path);\n    }\n    path.transform(AffineTransform.getTranslateInstance(-x,-y));\n  }\n  public int getIconWidth(){\n    return width;\n  }\n  public int getIconHeight(){\n    return height;\n  }\n}\n;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "InsertBefore", 
          "seed": "g2.setStroke(plot.getRangeGridlineStroke());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Replace", 
          "seed": "RectangleEdge edge=plot.getRangeAxisEdge();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Replace", 
          "seed": "RectangleEdge edge=plot.getRangeAxisEdge();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 126, 
          "faulty": "return getMeanValue(row,column);", 
          "type": "InsertBefore", 
          "seed": "double maxval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 200, 
          "faulty": "if (!(data instanceof StatisticalCategoryDataset)) {\n  throw new IllegalArgumentException(\"Requires StatisticalCategoryDataset.\");\n}", 
          "type": "Delete", 
          "seed": "Rectangle2D completeBar=null;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "Replace", 
          "seed": "double sumX=0.0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_626/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:46:00.901145181 -0500\n@@ -196,22 +196,12 @@\n                          int column,\n                          int pass) {\n \n-        // defensive check\n-        if (!(data instanceof StatisticalCategoryDataset)) {\n-            throw new IllegalArgumentException(\n-                \"Requires StatisticalCategoryDataset.\");\n-        }\n-        StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n+        g2.setStroke(plot.getRangeGridlineStroke());\n+\t\tg2.setStroke(plot.getRangeGridlineStroke());\n+\t\tStatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n+        RectangleEdge edge = plot.getRangeAxisEdge();\n     }\n                 \n     /**\n@@ -239,21 +229,13 @@\n                                      \n         RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n         \n-        // BAR Y\n+        double currentItemMargin = 0.0;\n+\t\t// BAR Y\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                 dataArea, xAxisLocation);\n \n         int seriesCount = getRowCount();\n         int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_626/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:46:00.905145297 -0500\n@@ -101,7 +101,8 @@\n      * @return The standard deviation.\n      */\n     public Number getStandardDeviation() {\n-        return this.standardDeviation;\n+        double sumXX = 0;\n+\t\treturn this.standardDeviation;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_626/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:46:00.905145297 -0500\n@@ -107,9 +107,7 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getMean();\n-        }\n+        double sumX = 0.0;\n         return result;\n     }\n \n@@ -123,7 +121,8 @@\n      * @return The value.\n      */\n     public Number getValue(int row, int column) {\n-        return getMeanValue(row, column);\n+        double maxval = Double.NaN;\n+\t\treturn getMeanValue(row, column);\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "Replace", 
          "seed": "double result=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "Replace", 
          "seed": "double result=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 107, 
          "faulty": "Number result=null;", 
          "type": "InsertBefore", 
          "seed": "this.maximumRangeValue=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "Replace", 
          "seed": "double result=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "Replace", 
          "seed": "double result=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "Replace", 
          "seed": "double result=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "Replace", 
          "seed": "double result=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 107, 
          "faulty": "Number result=null;", 
          "type": "InsertBefore", 
          "seed": "this.maximumRangeValue=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 169, 
          "faulty": "Number result=null;", 
          "type": "InsertBefore", 
          "seed": "double sumX=0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 246, 
          "faulty": "return this.data.getRowKey(row);", 
          "type": "InsertBefore", 
          "seed": "this.minimumRangeValue=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 265, 
          "faulty": "if (uclip <= 0.0) {\n  if (value >= uclip) {\n    return;\n  }\n  base=uclip;\n  if (value <= lclip) {\n    value=lclip;\n  }\n}\n else if (lclip <= 0.0) {\n  if (value >= uclip) {\n    value=uclip;\n  }\n else {\n    if (value <= lclip) {\n      value=lclip;\n    }\n  }\n}\n else {\n  if (value <= lclip) {\n    return;\n  }\n  base=getLowerClip();\n  if (value >= uclip) {\n    value=uclip;\n  }\n}", 
          "type": "Replace", 
          "seed": "double previous=state.getSeriesRunningTotal();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 200, 
          "faulty": "if (!(data instanceof StatisticalCategoryDataset)) {\n  throw new IllegalArgumentException(\"Requires StatisticalCategoryDataset.\");\n}", 
          "type": "InsertBefore", 
          "seed": "plot.drawBackground(g2,dataArea);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 108, 
          "faulty": "MeanAndStandardDeviation masd=(MeanAndStandardDeviation)this.data.getObject(row,column);", 
          "type": "InsertBefore", 
          "seed": "double maxRegularValue=Double.NEGATIVE_INFINITY;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "InsertBefore", 
          "seed": "int series=0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "InsertBefore", 
          "seed": "RectangleEdge location=plot.getRangeAxisEdge();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_138/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:41:31.549319641 -0500\n@@ -196,22 +196,16 @@\n                          int column,\n                          int pass) {\n \n-        // defensive check\n+        plot.drawBackground(g2, dataArea);\n+\t\t// defensive check\n         if (!(data instanceof StatisticalCategoryDataset)) {\n             throw new IllegalArgumentException(\n                 \"Requires StatisticalCategoryDataset.\");\n         }\n-        StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n+        int series = 0;\n+\t\tStatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n     }\n                 \n     /**\n@@ -243,17 +237,9 @@\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                 dataArea, xAxisLocation);\n \n-        int seriesCount = getRowCount();\n+        RectangleEdge location = plot.getRangeAxisEdge();\n+\t\tdouble result = Double.NaN;\n         int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n@@ -262,34 +248,7 @@\n         double lclip = getLowerClip();\n         double uclip = getUpperClip();\n \n-        if (uclip <= 0.0) {  // cases 1, 2, 3 and 4\n-            if (value >= uclip) {\n-                return; // bar is not visible\n-            }\n-            base = uclip;\n-            if (value <= lclip) {\n-                value = lclip;\n-            }\n-        }\n-        else if (lclip <= 0.0) { // cases 5, 6, 7 and 8\n-            if (value >= uclip) {\n-                value = uclip;\n-            }\n-            else {\n-                if (value <= lclip) {\n-                    value = lclip;\n-                }\n-            }\n-        }\n-        else { // cases 9, 10, 11 and 12\n-            if (value <= lclip) {\n-                return; // bar is not visible\n-            }\n-            base = getLowerClip();\n-            if (value >= uclip) {\n-               value = uclip;\n-            }\n-        }\n+        double previous = state.getSeriesRunningTotal();\n \n         RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n         double transY1 = rangeAxis.valueToJava2D(base, dataArea, yAxisLocation);\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_138/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:41:31.553319757 -0500\n@@ -92,7 +92,14 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_138/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:41:31.553319757 -0500\n@@ -104,8 +104,11 @@\n      * @return The mean value.\n      */\n     public Number getMeanValue(int row, int column) {\n-        Number result = null;\n-        MeanAndStandardDeviation masd \n+        this.maximumRangeValue = Double.NaN;\n+\t\tthis.maximumRangeValue = Double.NaN;\n+\t\tNumber result = null;\n+        double maxRegularValue = Double.NEGATIVE_INFINITY;\n+\t\tMeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n             result = masd.getMean();\n@@ -166,7 +169,8 @@\n      * @return The standard deviation.\n      */\n     public Number getStdDevValue(int row, int column) {\n-        Number result = null;\n+        double sumX = 0;\n+\t\tNumber result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n@@ -243,7 +247,8 @@\n      * @return The row key.\n      */\n     public Comparable getRowKey(int row) {\n-        return this.data.getRowKey(row);\n+        this.minimumRangeValue = Double.NaN;\n+\t\treturn this.data.getRowKey(row);\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "InsertBefore", 
          "seed": "String urlText=null;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 208, 
          "faulty": "drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);", 
          "type": "Replace", 
          "seed": "double previous=state.getSeriesRunningTotal();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_199/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:42:06.054321202 -0500\n@@ -204,14 +204,7 @@\n         StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n+        String urlText = null;\n     }\n                 \n     /**\n@@ -245,15 +238,6 @@\n \n         int seriesCount = getRowCount();\n         int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_199/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:42:06.058321317 -0500\n@@ -92,7 +92,9 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\tthis.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_199/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:42:06.058321317 -0500\n@@ -377,9 +377,11 @@\n         Range result = null;\n         if (includeInterval) {\n             if (!Double.isNaN(this.minimumRangeValueIncStdDev) \n-                    && !Double.isNaN(this.maximumRangeValueIncStdDev))\n-            result = new Range(this.minimumRangeValueIncStdDev, \n-                    this.maximumRangeValueIncStdDev);\n+                    && !Double.isNaN(this.maximumRangeValueIncStdDev)) {\n+\t\t\t\tdouble sumX2 = 0.0;\n+\t\t\t\tresult = new Range(this.minimumRangeValueIncStdDev,\n+\t\t\t\t\t\tthis.maximumRangeValueIncStdDev);\n+\t\t\t}\n         }\n         else {\n             if (!Double.isNaN(this.minimumRangeValue) \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "Replace", 
          "seed": "double result=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 246, 
          "faulty": "return this.data.getRowKey(row);", 
          "type": "InsertBefore", 
          "seed": "this.minimumRangeValue=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 265, 
          "faulty": "if (uclip <= 0.0) {\n  if (value >= uclip) {\n    return;\n  }\n  base=uclip;\n  if (value <= lclip) {\n    value=lclip;\n  }\n}\n else if (lclip <= 0.0) {\n  if (value >= uclip) {\n    value=uclip;\n  }\n else {\n    if (value <= lclip) {\n      value=lclip;\n    }\n  }\n}\n else {\n  if (value <= lclip) {\n    return;\n  }\n  base=getLowerClip();\n  if (value >= uclip) {\n    value=uclip;\n  }\n}", 
          "type": "Replace", 
          "seed": "double previous=state.getSeriesRunningTotal();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 200, 
          "faulty": "if (!(data instanceof StatisticalCategoryDataset)) {\n  throw new IllegalArgumentException(\"Requires StatisticalCategoryDataset.\");\n}", 
          "type": "InsertBefore", 
          "seed": "plot.drawBackground(g2,dataArea);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 108, 
          "faulty": "MeanAndStandardDeviation masd=(MeanAndStandardDeviation)this.data.getObject(row,column);", 
          "type": "InsertBefore", 
          "seed": "double maxRegularValue=Double.NEGATIVE_INFINITY;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "InsertBefore", 
          "seed": "int series=0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "InsertBefore", 
          "seed": "RectangleEdge location=plot.getRangeAxisEdge();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_173/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:41:50.041856417 -0500\n@@ -196,22 +196,16 @@\n                          int column,\n                          int pass) {\n \n-        // defensive check\n+        plot.drawBackground(g2, dataArea);\n+\t\t// defensive check\n         if (!(data instanceof StatisticalCategoryDataset)) {\n             throw new IllegalArgumentException(\n                 \"Requires StatisticalCategoryDataset.\");\n         }\n-        StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n+        int series = 0;\n+\t\tStatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n     }\n                 \n     /**\n@@ -243,17 +237,9 @@\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                 dataArea, xAxisLocation);\n \n-        int seriesCount = getRowCount();\n+        RectangleEdge location = plot.getRangeAxisEdge();\n+\t\tdouble result = Double.NaN;\n         int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n@@ -262,34 +248,7 @@\n         double lclip = getLowerClip();\n         double uclip = getUpperClip();\n \n-        if (uclip <= 0.0) {  // cases 1, 2, 3 and 4\n-            if (value >= uclip) {\n-                return; // bar is not visible\n-            }\n-            base = uclip;\n-            if (value <= lclip) {\n-                value = lclip;\n-            }\n-        }\n-        else if (lclip <= 0.0) { // cases 5, 6, 7 and 8\n-            if (value >= uclip) {\n-                value = uclip;\n-            }\n-            else {\n-                if (value <= lclip) {\n-                    value = lclip;\n-                }\n-            }\n-        }\n-        else { // cases 9, 10, 11 and 12\n-            if (value <= lclip) {\n-                return; // bar is not visible\n-            }\n-            base = getLowerClip();\n-            if (value >= uclip) {\n-               value = uclip;\n-            }\n-        }\n+        double previous = state.getSeriesRunningTotal();\n \n         RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n         double transY1 = rangeAxis.valueToJava2D(base, dataArea, yAxisLocation);\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_173/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:41:50.045856534 -0500\n@@ -92,7 +92,11 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_173/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:41:50.045856534 -0500\n@@ -105,7 +105,8 @@\n      */\n     public Number getMeanValue(int row, int column) {\n         Number result = null;\n-        MeanAndStandardDeviation masd \n+        double maxRegularValue = Double.NEGATIVE_INFINITY;\n+\t\tMeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n             result = masd.getMean();\n@@ -243,7 +244,8 @@\n      * @return The row key.\n      */\n     public Comparable getRowKey(int row) {\n-        return this.data.getRowKey(row);\n+        this.minimumRangeValue = Double.NaN;\n+\t\treturn this.data.getRowKey(row);\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "double uclip=getUpperClip();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 200, 
          "faulty": "if (!(data instanceof StatisticalCategoryDataset)) {\n  throw new IllegalArgumentException(\"Requires StatisticalCategoryDataset.\");\n}", 
          "type": "Delete", 
          "seed": "Stroke stroke=plot.getRangeGridlineStroke();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 273, 
          "faulty": "return this.data.getColumnCount();", 
          "type": "InsertBefore", 
          "seed": "double sumXX=0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 247, 
          "faulty": "int categoryCount=getColumnCount();", 
          "type": "Replace", 
          "seed": "PlotOrientation orient=plot.getOrientation();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "InsertBefore", 
          "seed": "setNegativeItemLabelPositionFallback(null);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "InsertBefore", 
          "seed": "double minval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "Composite originalComposite=g2.getComposite();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "Delete", 
          "seed": "double aRadius=0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 175, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "double y=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "InsertBefore", 
          "seed": "PlotOrientation orient=plot.getOrientation();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 379, 
          "faulty": "if (!Double.isNaN(this.minimumRangeValueIncStdDev) && !Double.isNaN(this.maximumRangeValueIncStdDev)) result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double x=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 111, 
          "faulty": "result=masd.getMean();", 
          "type": "Delete", 
          "seed": "return HistogramType.FREQUENCY;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_394/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:43:57.269551390 -0500\n@@ -196,22 +196,8 @@\n                          int column,\n                          int pass) {\n \n-        // defensive check\n-        if (!(data instanceof StatisticalCategoryDataset)) {\n-            throw new IllegalArgumentException(\n-                \"Requires StatisticalCategoryDataset.\");\n-        }\n-        StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n-\n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n+        PlotOrientation orient = plot.getOrientation();\n     }\n                 \n     /**\n@@ -243,17 +229,9 @@\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                 dataArea, xAxisLocation);\n \n-        int seriesCount = getRowCount();\n-        int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n+        setNegativeItemLabelPositionFallback(null);\n+\t\tint seriesCount = getRowCount();\n+        PlotOrientation orient = plot.getOrientation();\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_394/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:43:57.273551505 -0500\n@@ -107,8 +107,8 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getMean();\n+        double minval = Double.NaN;\n+\t\tif (masd != null) {\n         }\n         return result;\n     }\n@@ -172,7 +172,8 @@\n         if (masd != null) {\n             result = masd.getStandardDeviation();\n         }\n-        return result;\n+        double y = 0.0;\n+\t\treturn result;\n     }\n \n     /**\n@@ -270,7 +271,8 @@\n      * @return The column count.\n      */\n     public int getColumnCount() {\n-        return this.data.getColumnCount();\n+        double sumXX = 0;\n+\t\treturn this.data.getColumnCount();\n     }\n \n     /**\n@@ -376,10 +378,13 @@\n     public Range getRangeBounds(boolean includeInterval) {\n         Range result = null;\n         if (includeInterval) {\n-            if (!Double.isNaN(this.minimumRangeValueIncStdDev) \n-                    && !Double.isNaN(this.maximumRangeValueIncStdDev))\n-            result = new Range(this.minimumRangeValueIncStdDev, \n-                    this.maximumRangeValueIncStdDev);\n+            double x = 0.0;\n+\t\t\tif (!Double.isNaN(this.minimumRangeValueIncStdDev) \n+                    && !Double.isNaN(this.maximumRangeValueIncStdDev)) {\n+\t\t\t\tdouble sumX2 = 0.0;\n+\t\t\t\tresult = new Range(this.minimumRangeValueIncStdDev,\n+\t\t\t\t\t\tthis.maximumRangeValueIncStdDev);\n+\t\t\t}\n         }\n         else {\n             if (!Double.isNaN(this.minimumRangeValue) \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 273, 
          "faulty": "return this.data.getColumnCount();", 
          "type": "InsertBefore", 
          "seed": "List result=null;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 126, 
          "faulty": "return getMeanValue(row,column);", 
          "type": "InsertBefore", 
          "seed": "double minval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 200, 
          "faulty": "if (!(data instanceof StatisticalCategoryDataset)) {\n  throw new IllegalArgumentException(\"Requires StatisticalCategoryDataset.\");\n}", 
          "type": "InsertBefore", 
          "seed": "int columns=data.getColumnCount();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 240, 
          "faulty": "RectangleEdge xAxisLocation=plot.getDomainAxisEdge();", 
          "type": "InsertBefore", 
          "seed": "double yyAverage=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 206, 
          "faulty": "PlotOrientation orientation=plot.getOrientation();", 
          "type": "Delete", 
          "seed": "this.errorIndicatorPaint=Color.gray;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_215/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:42:15.722601834 -0500\n@@ -196,22 +196,13 @@\n                          int column,\n                          int pass) {\n \n-        // defensive check\n+        int columns = data.getColumnCount();\n+\t\t// defensive check\n         if (!(data instanceof StatisticalCategoryDataset)) {\n             throw new IllegalArgumentException(\n                 \"Requires StatisticalCategoryDataset.\");\n         }\n         StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n-\n-        PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n     }\n                 \n     /**\n@@ -237,7 +228,8 @@\n                                       int row,\n                                       int column) {\n                                      \n-        RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n+        double yyAverage = 0.0;\n+\t\tRectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n         \n         // BAR Y\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n@@ -245,15 +237,6 @@\n \n         int seriesCount = getRowCount();\n         int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_215/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:42:15.726601952 -0500\n@@ -92,7 +92,10 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_215/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:42:15.726601952 -0500\n@@ -123,7 +123,8 @@\n      * @return The value.\n      */\n     public Number getValue(int row, int column) {\n-        return getMeanValue(row, column);\n+        double minval = Double.NaN;\n+\t\treturn getMeanValue(row, column);\n     }\n \n     /**\n@@ -270,7 +271,8 @@\n      * @return The column count.\n      */\n     public int getColumnCount() {\n-        return this.data.getColumnCount();\n+        List result = null;\n+\t\treturn this.data.getColumnCount();\n     }\n \n     /**\n@@ -377,9 +379,11 @@\n         Range result = null;\n         if (includeInterval) {\n             if (!Double.isNaN(this.minimumRangeValueIncStdDev) \n-                    && !Double.isNaN(this.maximumRangeValueIncStdDev))\n-            result = new Range(this.minimumRangeValueIncStdDev, \n-                    this.maximumRangeValueIncStdDev);\n+                    && !Double.isNaN(this.maximumRangeValueIncStdDev)) {\n+\t\t\t\tdouble sumX2 = 0.0;\n+\t\t\t\tresult = new Range(this.minimumRangeValueIncStdDev,\n+\t\t\t\t\t\tthis.maximumRangeValueIncStdDev);\n+\t\t\t}\n         }\n         else {\n             if (!Double.isNaN(this.minimumRangeValue) \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 273, 
          "faulty": "return this.data.getColumnCount();", 
          "type": "InsertBefore", 
          "seed": "List result=null;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 126, 
          "faulty": "return getMeanValue(row,column);", 
          "type": "InsertBefore", 
          "seed": "double minval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "int count=dataset.getColumnCount();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 273, 
          "faulty": "return this.data.getColumnCount();", 
          "type": "InsertBefore", 
          "seed": "double sumXX=0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 247, 
          "faulty": "int categoryCount=getColumnCount();", 
          "type": "Replace", 
          "seed": "PlotOrientation orient=plot.getOrientation();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "InsertBefore", 
          "seed": "setNegativeItemLabelPositionFallback(null);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "InsertBefore", 
          "seed": "double minval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 263, 
          "faulty": "double uclip=getUpperClip();", 
          "type": "InsertBefore", 
          "seed": "if (value <= lclip) {\n  value=lclip;\n}"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "double uclip=getUpperClip();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 200, 
          "faulty": "if (!(data instanceof StatisticalCategoryDataset)) {\n  throw new IllegalArgumentException(\"Requires StatisticalCategoryDataset.\");\n}", 
          "type": "Delete", 
          "seed": "Stroke stroke=plot.getRangeGridlineStroke();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "InsertBefore", 
          "seed": "if (masd != null) {\n  result=masd.getStandardDeviation();\n}"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 111, 
          "faulty": "result=masd.getMean();", 
          "type": "Delete", 
          "seed": "int count=0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 175, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "double m=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 389, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "double minval=Double.NaN;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_301/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:43:03.071976184 -0500\n@@ -196,22 +196,9 @@\n                          int column,\n                          int pass) {\n \n-        // defensive check\n-        if (!(data instanceof StatisticalCategoryDataset)) {\n-            throw new IllegalArgumentException(\n-                \"Requires StatisticalCategoryDataset.\");\n-        }\n         StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n     }\n                 \n     /**\n@@ -243,24 +230,19 @@\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                 dataArea, xAxisLocation);\n \n-        int seriesCount = getRowCount();\n-        int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n+        setNegativeItemLabelPositionFallback(null);\n+\t\tint seriesCount = getRowCount();\n+        PlotOrientation orient = plot.getOrientation();\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n         double value = meanValue.doubleValue();\n         double base = 0.0;\n         double lclip = getLowerClip();\n-        double uclip = getUpperClip();\n+        if (value <= lclip) {\n+\t\t\tvalue = lclip;\n+\t\t}\n+\t\tdouble uclip = getUpperClip();\n \n         if (uclip <= 0.0) {  // cases 1, 2, 3 and 4\n             if (value >= uclip) {\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_301/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:43:03.075976299 -0500\n@@ -92,7 +92,9 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\tthis.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_301/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:43:03.075976299 -0500\n@@ -107,8 +107,11 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getMean();\n+        double minval = Double.NaN;\n+\t\tif (masd != null) {\n+\t\t\tresult = masd.getStandardDeviation();\n+\t\t}\n+\t\tif (masd != null) {\n         }\n         return result;\n     }\n@@ -123,7 +126,8 @@\n      * @return The value.\n      */\n     public Number getValue(int row, int column) {\n-        return getMeanValue(row, column);\n+        double minval = Double.NaN;\n+\t\treturn getMeanValue(row, column);\n     }\n \n     /**\n@@ -172,7 +176,8 @@\n         if (masd != null) {\n             result = masd.getStandardDeviation();\n         }\n-        return result;\n+        double m = 0.0;\n+\t\treturn result;\n     }\n \n     /**\n@@ -270,7 +275,9 @@\n      * @return The column count.\n      */\n     public int getColumnCount() {\n-        return this.data.getColumnCount();\n+        List result = null;\n+\t\tdouble sumXX = 0;\n+\t\treturn this.data.getColumnCount();\n     }\n \n     /**\n@@ -377,16 +384,19 @@\n         Range result = null;\n         if (includeInterval) {\n             if (!Double.isNaN(this.minimumRangeValueIncStdDev) \n-                    && !Double.isNaN(this.maximumRangeValueIncStdDev))\n-            result = new Range(this.minimumRangeValueIncStdDev, \n-                    this.maximumRangeValueIncStdDev);\n+                    && !Double.isNaN(this.maximumRangeValueIncStdDev)) {\n+\t\t\t\tdouble sumX2 = 0.0;\n+\t\t\t\tresult = new Range(this.minimumRangeValueIncStdDev,\n+\t\t\t\t\t\tthis.maximumRangeValueIncStdDev);\n+\t\t\t}\n         }\n         else {\n             if (!Double.isNaN(this.minimumRangeValue) \n                     && !Double.isNaN(this.maximumRangeValue))\n             result = new Range(this.minimumRangeValue, this.maximumRangeValue);            \n         }\n-        return result;\n+        double minval = Double.NaN;\n+\t\treturn result;\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "Replace", 
          "seed": "double result=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "Replace", 
          "seed": "double result=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "Replace", 
          "seed": "double result=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 107, 
          "faulty": "Number result=null;", 
          "type": "InsertBefore", 
          "seed": "this.maximumRangeValue=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 169, 
          "faulty": "Number result=null;", 
          "type": "InsertBefore", 
          "seed": "double sumX=0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 246, 
          "faulty": "return this.data.getRowKey(row);", 
          "type": "InsertBefore", 
          "seed": "this.minimumRangeValue=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 265, 
          "faulty": "if (uclip <= 0.0) {\n  if (value >= uclip) {\n    return;\n  }\n  base=uclip;\n  if (value <= lclip) {\n    value=lclip;\n  }\n}\n else if (lclip <= 0.0) {\n  if (value >= uclip) {\n    value=uclip;\n  }\n else {\n    if (value <= lclip) {\n      value=lclip;\n    }\n  }\n}\n else {\n  if (value <= lclip) {\n    return;\n  }\n  base=getLowerClip();\n  if (value >= uclip) {\n    value=uclip;\n  }\n}", 
          "type": "Replace", 
          "seed": "double previous=state.getSeriesRunningTotal();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 200, 
          "faulty": "if (!(data instanceof StatisticalCategoryDataset)) {\n  throw new IllegalArgumentException(\"Requires StatisticalCategoryDataset.\");\n}", 
          "type": "InsertBefore", 
          "seed": "plot.drawBackground(g2,dataArea);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 108, 
          "faulty": "MeanAndStandardDeviation masd=(MeanAndStandardDeviation)this.data.getObject(row,column);", 
          "type": "InsertBefore", 
          "seed": "double maxRegularValue=Double.NEGATIVE_INFINITY;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "InsertBefore", 
          "seed": "int series=0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 208, 
          "faulty": "drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);", 
          "type": "Delete", 
          "seed": "g2.setPaint(Color.lightGray);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_140/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:41:32.409344604 -0500\n@@ -196,22 +196,16 @@\n                          int column,\n                          int pass) {\n \n-        // defensive check\n+        plot.drawBackground(g2, dataArea);\n+\t\t// defensive check\n         if (!(data instanceof StatisticalCategoryDataset)) {\n             throw new IllegalArgumentException(\n                 \"Requires StatisticalCategoryDataset.\");\n         }\n-        StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n+        int series = 0;\n+\t\tStatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n     }\n                 \n     /**\n@@ -243,17 +237,8 @@\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                 dataArea, xAxisLocation);\n \n-        int seriesCount = getRowCount();\n+        double result = Double.NaN;\n         int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n@@ -262,34 +247,7 @@\n         double lclip = getLowerClip();\n         double uclip = getUpperClip();\n \n-        if (uclip <= 0.0) {  // cases 1, 2, 3 and 4\n-            if (value >= uclip) {\n-                return; // bar is not visible\n-            }\n-            base = uclip;\n-            if (value <= lclip) {\n-                value = lclip;\n-            }\n-        }\n-        else if (lclip <= 0.0) { // cases 5, 6, 7 and 8\n-            if (value >= uclip) {\n-                value = uclip;\n-            }\n-            else {\n-                if (value <= lclip) {\n-                    value = lclip;\n-                }\n-            }\n-        }\n-        else { // cases 9, 10, 11 and 12\n-            if (value <= lclip) {\n-                return; // bar is not visible\n-            }\n-            base = getLowerClip();\n-            if (value >= uclip) {\n-               value = uclip;\n-            }\n-        }\n+        double previous = state.getSeriesRunningTotal();\n \n         RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n         double transY1 = rangeAxis.valueToJava2D(base, dataArea, yAxisLocation);\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_140/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:41:32.413344721 -0500\n@@ -92,7 +92,10 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_140/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:41:32.413344721 -0500\n@@ -104,8 +104,10 @@\n      * @return The mean value.\n      */\n     public Number getMeanValue(int row, int column) {\n-        Number result = null;\n-        MeanAndStandardDeviation masd \n+        this.maximumRangeValue = Double.NaN;\n+\t\tNumber result = null;\n+        double maxRegularValue = Double.NEGATIVE_INFINITY;\n+\t\tMeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n             result = masd.getMean();\n@@ -166,7 +168,8 @@\n      * @return The standard deviation.\n      */\n     public Number getStdDevValue(int row, int column) {\n-        Number result = null;\n+        double sumX = 0;\n+\t\tNumber result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n@@ -243,7 +246,8 @@\n      * @return The row key.\n      */\n     public Comparable getRowKey(int row) {\n-        return this.data.getRowKey(row);\n+        this.minimumRangeValue = Double.NaN;\n+\t\treturn this.data.getRowKey(row);\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 274, 
          "faulty": "if (lclip <= 0.0) {\n  if (value >= uclip) {\n    value=uclip;\n  }\n else {\n    if (value <= lclip) {\n      value=lclip;\n    }\n  }\n}\n else {\n  if (value <= lclip) {\n    return;\n  }\n  base=getLowerClip();\n  if (value >= uclip) {\n    value=uclip;\n  }\n}", 
          "type": "Delete", 
          "seed": "double rectX=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "Delete", 
          "seed": "return HistogramType.FREQUENCY;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 173, 
          "faulty": "result=masd.getStandardDeviation();", 
          "type": "Replace", 
          "seed": "int count=0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 108, 
          "faulty": "MeanAndStandardDeviation masd=(MeanAndStandardDeviation)this.data.getObject(row,column);", 
          "type": "Delete", 
          "seed": "List outliers=new ArrayList();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_194/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:42:02.550219491 -0500\n@@ -204,14 +204,6 @@\n         StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n     }\n                 \n     /**\n@@ -245,15 +237,6 @@\n \n         int seriesCount = getRowCount();\n         int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n@@ -270,26 +253,8 @@\n             if (value <= lclip) {\n                 value = lclip;\n             }\n-        }\n-        else if (lclip <= 0.0) { // cases 5, 6, 7 and 8\n-            if (value >= uclip) {\n-                value = uclip;\n-            }\n-            else {\n-                if (value <= lclip) {\n-                    value = lclip;\n-                }\n-            }\n-        }\n-        else { // cases 9, 10, 11 and 12\n-            if (value <= lclip) {\n-                return; // bar is not visible\n-            }\n-            base = getLowerClip();\n-            if (value >= uclip) {\n-               value = uclip;\n-            }\n-        }\n+        } else\n+\t\t\t;\n \n         RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n         double transY1 = rangeAxis.valueToJava2D(base, dataArea, yAxisLocation);\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_194/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:42:02.550219491 -0500\n@@ -92,7 +92,10 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_194/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:42:02.554219607 -0500\n@@ -105,11 +105,6 @@\n      */\n     public Number getMeanValue(int row, int column) {\n         Number result = null;\n-        MeanAndStandardDeviation masd \n-            = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getMean();\n-        }\n         return result;\n     }\n \n@@ -170,7 +165,7 @@\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n-            result = masd.getStandardDeviation();\n+            int count = 0;\n         }\n         return result;\n     }\n@@ -377,9 +372,11 @@\n         Range result = null;\n         if (includeInterval) {\n             if (!Double.isNaN(this.minimumRangeValueIncStdDev) \n-                    && !Double.isNaN(this.maximumRangeValueIncStdDev))\n-            result = new Range(this.minimumRangeValueIncStdDev, \n-                    this.maximumRangeValueIncStdDev);\n+                    && !Double.isNaN(this.maximumRangeValueIncStdDev)) {\n+\t\t\t\tdouble sumX2 = 0.0;\n+\t\t\t\tresult = new Range(this.minimumRangeValueIncStdDev,\n+\t\t\t\t\t\tthis.maximumRangeValueIncStdDev);\n+\t\t\t}\n         }\n         else {\n             if (!Double.isNaN(this.minimumRangeValue) \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 126, 
          "faulty": "return getMeanValue(row,column);", 
          "type": "InsertBefore", 
          "seed": "double minval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "Replace", 
          "seed": "double sum=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 243, 
          "faulty": "double rectY=domainAxis.getCategoryStart(column,getColumnCount(),dataArea,xAxisLocation);", 
          "type": "InsertBefore", 
          "seed": "CategoryPlot p=getPlot();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 113, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "if (masd != null) {\n  result=masd.getStandardDeviation();\n}"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "InsertBefore", 
          "seed": "setNegativeItemLabelPositionFallback(null);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "InsertBefore", 
          "seed": "double minval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 263, 
          "faulty": "double uclip=getUpperClip();", 
          "type": "InsertBefore", 
          "seed": "if (value <= lclip) {\n  value=lclip;\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_265/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:42:40.855331334 -0500\n@@ -204,14 +204,6 @@\n         StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n     }\n                 \n     /**\n@@ -239,28 +231,24 @@\n                                      \n         RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n         \n-        // BAR Y\n+        CategoryPlot p = getPlot();\n+\t\t// BAR Y\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                 dataArea, xAxisLocation);\n \n-        int seriesCount = getRowCount();\n+        setNegativeItemLabelPositionFallback(null);\n+\t\tint seriesCount = getRowCount();\n         int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n         double value = meanValue.doubleValue();\n         double base = 0.0;\n         double lclip = getLowerClip();\n-        double uclip = getUpperClip();\n+        if (value <= lclip) {\n+\t\t\tvalue = lclip;\n+\t\t}\n+\t\tdouble uclip = getUpperClip();\n \n         if (uclip <= 0.0) {  // cases 1, 2, 3 and 4\n             if (value >= uclip) {\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_265/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:42:40.855331334 -0500\n@@ -92,7 +92,11 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_265/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:42:40.859331451 -0500\n@@ -107,10 +107,12 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n+        double minval = Double.NaN;\n+\t\tdouble sum = 0.0;\n         if (masd != null) {\n-            result = masd.getMean();\n-        }\n-        return result;\n+\t\t\tresult = masd.getStandardDeviation();\n+\t\t}\n+\t\treturn result;\n     }\n \n     /**\n@@ -123,7 +125,8 @@\n      * @return The value.\n      */\n     public Number getValue(int row, int column) {\n-        return getMeanValue(row, column);\n+        double minval = Double.NaN;\n+\t\treturn getMeanValue(row, column);\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 170, 
          "faulty": "MeanAndStandardDeviation masd=(MeanAndStandardDeviation)this.data.getObject(row,column);", 
          "type": "InsertBefore", 
          "seed": "this.minimumRangeValue=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 265, 
          "faulty": "if (uclip <= 0.0) {\n  if (value >= uclip) {\n    return;\n  }\n  base=uclip;\n  if (value <= lclip) {\n    value=lclip;\n  }\n}\n else if (lclip <= 0.0) {\n  if (value >= uclip) {\n    value=uclip;\n  }\n else {\n    if (value <= lclip) {\n      value=lclip;\n    }\n  }\n}\n else {\n  if (value <= lclip) {\n    return;\n  }\n  base=getLowerClip();\n  if (value >= uclip) {\n    value=uclip;\n  }\n}", 
          "type": "Delete", 
          "seed": "int itemCount=dataset.getColumnCount();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 262, 
          "faulty": "double lclip=getLowerClip();", 
          "type": "Replace", 
          "seed": "double aRadius=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_434/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:44:22.710290936 -0500\n@@ -204,14 +204,6 @@\n         StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n     }\n                 \n     /**\n@@ -251,7 +243,6 @@\n             rectY = rectY + row * (state.getBarWidth() + seriesGap);\n         }\n         else {\n-            rectY = rectY + row * state.getBarWidth();\n         }\n \n         // BAR X\n@@ -259,38 +250,9 @@\n \n         double value = meanValue.doubleValue();\n         double base = 0.0;\n-        double lclip = getLowerClip();\n+        double aRadius = 0;\n         double uclip = getUpperClip();\n \n-        if (uclip <= 0.0) {  // cases 1, 2, 3 and 4\n-            if (value >= uclip) {\n-                return; // bar is not visible\n-            }\n-            base = uclip;\n-            if (value <= lclip) {\n-                value = lclip;\n-            }\n-        }\n-        else if (lclip <= 0.0) { // cases 5, 6, 7 and 8\n-            if (value >= uclip) {\n-                value = uclip;\n-            }\n-            else {\n-                if (value <= lclip) {\n-                    value = lclip;\n-                }\n-            }\n-        }\n-        else { // cases 9, 10, 11 and 12\n-            if (value <= lclip) {\n-                return; // bar is not visible\n-            }\n-            base = getLowerClip();\n-            if (value >= uclip) {\n-               value = uclip;\n-            }\n-        }\n-\n         RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n         double transY1 = rangeAxis.valueToJava2D(base, dataArea, yAxisLocation);\n         double transY2 = rangeAxis.valueToJava2D(value, dataArea, \n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_434/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:44:22.710290936 -0500\n@@ -92,7 +92,12 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_434/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:44:22.710290936 -0500\n@@ -167,7 +167,8 @@\n      */\n     public Number getStdDevValue(int row, int column) {\n         Number result = null;\n-        MeanAndStandardDeviation masd \n+        this.minimumRangeValue = Double.NaN;\n+\t\tMeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n             result = masd.getStandardDeviation();\n@@ -377,9 +378,11 @@\n         Range result = null;\n         if (includeInterval) {\n             if (!Double.isNaN(this.minimumRangeValueIncStdDev) \n-                    && !Double.isNaN(this.maximumRangeValueIncStdDev))\n-            result = new Range(this.minimumRangeValueIncStdDev, \n-                    this.maximumRangeValueIncStdDev);\n+                    && !Double.isNaN(this.maximumRangeValueIncStdDev)) {\n+\t\t\t\tdouble sumX2 = 0.0;\n+\t\t\t\tresult = new Range(this.minimumRangeValueIncStdDev,\n+\t\t\t\t\t\tthis.maximumRangeValueIncStdDev);\n+\t\t\t}\n         }\n         else {\n             if (!Double.isNaN(this.minimumRangeValue) \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "Replace", 
          "seed": "double result=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 246, 
          "faulty": "return this.data.getRowKey(row);", 
          "type": "InsertBefore", 
          "seed": "this.minimumRangeValue=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "InsertBefore", 
          "seed": "RectangleEdge location=plot.getRangeAxisEdge();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 111, 
          "faulty": "result=masd.getMean();", 
          "type": "Replace", 
          "seed": "double sumY=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 206, 
          "faulty": "PlotOrientation orientation=plot.getOrientation();", 
          "type": "Replace", 
          "seed": "Rectangle2D incompleteBar=null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_187/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:41:59.510131248 -0500\n@@ -203,15 +203,7 @@\n         }\n         StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n-        PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n+        Rectangle2D incompleteBar = null;\n     }\n                 \n     /**\n@@ -243,17 +235,9 @@\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                 dataArea, xAxisLocation);\n \n-        int seriesCount = getRowCount();\n+        RectangleEdge location = plot.getRangeAxisEdge();\n+\t\tdouble result = Double.NaN;\n         int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_187/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:41:59.514131363 -0500\n@@ -92,7 +92,11 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_187/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:41:59.514131363 -0500\n@@ -108,7 +108,7 @@\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n-            result = masd.getMean();\n+            double sumY = 0.0;\n         }\n         return result;\n     }\n@@ -243,7 +243,8 @@\n      * @return The row key.\n      */\n     public Comparable getRowKey(int row) {\n-        return this.data.getRowKey(row);\n+        this.minimumRangeValue = Double.NaN;\n+\t\treturn this.data.getRowKey(row);\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "Delete", 
          "seed": "this.minimumRangeValueIncStdDev=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 111, 
          "faulty": "result=masd.getMean();", 
          "type": "InsertBefore", 
          "seed": "result=masd.getStandardDeviation();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Replace", 
          "seed": "double xx2=domainAxis.getCategoryEnd(column,getColumnCount(),dataArea,plot.getDomainAxisEdge());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "InsertBefore", 
          "seed": "g2.setStroke(plot.getRangeGridlineStroke());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "InsertBefore", 
          "seed": "g2.setStroke(plot.getRangeGridlineStroke());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 172, 
          "faulty": "if (masd != null) {\n  result=masd.getStandardDeviation();\n}", 
          "type": "Delete", 
          "seed": "if (masd != null) {\n  result=masd.getMean();\n}"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "double barW0=domainAxis.getCategoryStart(column,getColumnCount(),dataArea,plot.getDomainAxisEdge());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 379, 
          "faulty": "if (!Double.isNaN(this.minimumRangeValueIncStdDev) && !Double.isNaN(this.maximumRangeValueIncStdDev)) result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX=0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 104, 
          "faulty": "return this.standardDeviation;", 
          "type": "Replace", 
          "seed": "return this.mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Replace", 
          "seed": "RectangleEdge edge=plot.getRangeAxisEdge();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Replace", 
          "seed": "RectangleEdge edge=plot.getRangeAxisEdge();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 126, 
          "faulty": "return getMeanValue(row,column);", 
          "type": "InsertBefore", 
          "seed": "double maxval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 173, 
          "faulty": "result=masd.getStandardDeviation();", 
          "type": "Replace", 
          "seed": "int count=0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "double m=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 104, 
          "faulty": "return this.standardDeviation;", 
          "type": "InsertBefore", 
          "seed": "double sumXX=0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "Delete", 
          "seed": "Paint itemPaint=getItemPaint(row,column);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_677/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:46:30.149995363 -0500\n@@ -201,17 +201,10 @@\n             throw new IllegalArgumentException(\n                 \"Requires StatisticalCategoryDataset.\");\n         }\n-        StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n-\n-        PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n+        g2.setStroke(plot.getRangeGridlineStroke());\n+\t\tg2.setStroke(plot.getRangeGridlineStroke());\n+\t\tPlotOrientation orientation = plot.getOrientation();\n+        RectangleEdge edge = plot.getRangeAxisEdge();\n     }\n                 \n     /**\n@@ -245,14 +238,8 @@\n \n         int seriesCount = getRowCount();\n         int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n+        double xx2 = domainAxis.getCategoryEnd(column, getColumnCount(),\n+\t\t\t\tdataArea, plot.getDomainAxisEdge());\n \n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_677/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:46:30.149995363 -0500\n@@ -92,7 +92,8 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        double m = 0.0;\n+\t\treturn this.mean;\n     }\n \n     /**\n@@ -101,7 +102,8 @@\n      * @return The standard deviation.\n      */\n     public Number getStandardDeviation() {\n-        return this.standardDeviation;\n+        double sumXX = 0;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_677/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:46:30.153995479 -0500\n@@ -107,9 +107,6 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getMean();\n-        }\n         return result;\n     }\n \n@@ -123,7 +120,8 @@\n      * @return The value.\n      */\n     public Number getValue(int row, int column) {\n-        return getMeanValue(row, column);\n+        double maxval = Double.NaN;\n+\t\treturn getMeanValue(row, column);\n     }\n \n     /**\n@@ -169,9 +167,6 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getStandardDeviation();\n-        }\n         return result;\n     }\n \n@@ -376,7 +371,8 @@\n     public Range getRangeBounds(boolean includeInterval) {\n         Range result = null;\n         if (includeInterval) {\n-            if (!Double.isNaN(this.minimumRangeValueIncStdDev) \n+            double sumX = 0;\n+\t\t\tif (!Double.isNaN(this.minimumRangeValueIncStdDev) \n                     && !Double.isNaN(this.maximumRangeValueIncStdDev))\n             result = new Range(this.minimumRangeValueIncStdDev, \n                     this.maximumRangeValueIncStdDev);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "InsertBefore", 
          "seed": "if (masd != null) {\n  result=masd.getStandardDeviation();\n}"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 111, 
          "faulty": "result=masd.getMean();", 
          "type": "Delete", 
          "seed": "int count=0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 175, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "double m=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 389, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "double minval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Replace", 
          "seed": "setIncludeBaseInRange(false);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 273, 
          "faulty": "return this.data.getColumnCount();", 
          "type": "InsertBefore", 
          "seed": "double sumXX=0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 247, 
          "faulty": "int categoryCount=getColumnCount();", 
          "type": "Replace", 
          "seed": "PlotOrientation orient=plot.getOrientation();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "InsertBefore", 
          "seed": "setNegativeItemLabelPositionFallback(null);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "InsertBefore", 
          "seed": "double minval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "Composite originalComposite=g2.getComposite();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "Delete", 
          "seed": "double aRadius=0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 175, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "double y=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "InsertBefore", 
          "seed": "PlotOrientation orient=plot.getOrientation();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 379, 
          "faulty": "if (!Double.isNaN(this.minimumRangeValueIncStdDev) && !Double.isNaN(this.maximumRangeValueIncStdDev)) result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double x=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 170, 
          "faulty": "MeanAndStandardDeviation masd=(MeanAndStandardDeviation)this.data.getObject(row,column);", 
          "type": "InsertBefore", 
          "seed": "this.minimumRangeValue=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "double sumY2=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 208, 
          "faulty": "drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);", 
          "type": "InsertBefore", 
          "seed": "CategoryPlot cp=getPlot();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_440/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:44:26.218392913 -0500\n@@ -201,17 +201,8 @@\n             throw new IllegalArgumentException(\n                 \"Requires StatisticalCategoryDataset.\");\n         }\n-        StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n-\n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n+        PlotOrientation orient = plot.getOrientation();\n     }\n                 \n     /**\n@@ -243,17 +234,9 @@\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                 dataArea, xAxisLocation);\n \n-        int seriesCount = getRowCount();\n-        int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n+        setNegativeItemLabelPositionFallback(null);\n+\t\tint seriesCount = getRowCount();\n+        PlotOrientation orient = plot.getOrientation();\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_440/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:44:26.218392913 -0500\n@@ -92,7 +92,13 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tdouble sumY2 = 0.0;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_440/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:44:26.222393031 -0500\n@@ -108,7 +108,10 @@\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n-            result = masd.getMean();\n+\t\t\tresult = masd.getStandardDeviation();\n+\t\t}\n+\t\tdouble minval = Double.NaN;\n+\t\tif (masd != null) {\n         }\n         return result;\n     }\n@@ -167,12 +170,15 @@\n      */\n     public Number getStdDevValue(int row, int column) {\n         Number result = null;\n-        MeanAndStandardDeviation masd \n+        this.minimumRangeValue = Double.NaN;\n+\t\tMeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n             result = masd.getStandardDeviation();\n         }\n-        return result;\n+        double m = 0.0;\n+\t\tdouble y = 0.0;\n+\t\treturn result;\n     }\n \n     /**\n@@ -270,7 +276,8 @@\n      * @return The column count.\n      */\n     public int getColumnCount() {\n-        return this.data.getColumnCount();\n+        double sumXX = 0;\n+\t\treturn this.data.getColumnCount();\n     }\n \n     /**\n@@ -376,17 +383,21 @@\n     public Range getRangeBounds(boolean includeInterval) {\n         Range result = null;\n         if (includeInterval) {\n-            if (!Double.isNaN(this.minimumRangeValueIncStdDev) \n-                    && !Double.isNaN(this.maximumRangeValueIncStdDev))\n-            result = new Range(this.minimumRangeValueIncStdDev, \n-                    this.maximumRangeValueIncStdDev);\n+            double x = 0.0;\n+\t\t\tif (!Double.isNaN(this.minimumRangeValueIncStdDev) \n+                    && !Double.isNaN(this.maximumRangeValueIncStdDev)) {\n+\t\t\t\tdouble sumX2 = 0.0;\n+\t\t\t\tresult = new Range(this.minimumRangeValueIncStdDev,\n+\t\t\t\t\t\tthis.maximumRangeValueIncStdDev);\n+\t\t\t}\n         }\n         else {\n             if (!Double.isNaN(this.minimumRangeValue) \n                     && !Double.isNaN(this.maximumRangeValue))\n             result = new Range(this.minimumRangeValue, this.maximumRangeValue);            \n         }\n-        return result;\n+        double minval = Double.NaN;\n+\t\treturn result;\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "Replace", 
          "seed": "double result=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "Replace", 
          "seed": "double result=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "Replace", 
          "seed": "double result=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 107, 
          "faulty": "Number result=null;", 
          "type": "InsertBefore", 
          "seed": "this.maximumRangeValue=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 169, 
          "faulty": "Number result=null;", 
          "type": "InsertBefore", 
          "seed": "double sumX=0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 246, 
          "faulty": "return this.data.getRowKey(row);", 
          "type": "InsertBefore", 
          "seed": "this.minimumRangeValue=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 265, 
          "faulty": "if (uclip <= 0.0) {\n  if (value >= uclip) {\n    return;\n  }\n  base=uclip;\n  if (value <= lclip) {\n    value=lclip;\n  }\n}\n else if (lclip <= 0.0) {\n  if (value >= uclip) {\n    value=uclip;\n  }\n else {\n    if (value <= lclip) {\n      value=lclip;\n    }\n  }\n}\n else {\n  if (value <= lclip) {\n    return;\n  }\n  base=getLowerClip();\n  if (value >= uclip) {\n    value=uclip;\n  }\n}", 
          "type": "Replace", 
          "seed": "double previous=state.getSeriesRunningTotal();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 200, 
          "faulty": "if (!(data instanceof StatisticalCategoryDataset)) {\n  throw new IllegalArgumentException(\"Requires StatisticalCategoryDataset.\");\n}", 
          "type": "InsertBefore", 
          "seed": "plot.drawBackground(g2,dataArea);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 108, 
          "faulty": "MeanAndStandardDeviation masd=(MeanAndStandardDeviation)this.data.getObject(row,column);", 
          "type": "InsertBefore", 
          "seed": "double maxRegularValue=Double.NEGATIVE_INFINITY;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "InsertBefore", 
          "seed": "int series=0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 170, 
          "faulty": "MeanAndStandardDeviation masd=(MeanAndStandardDeviation)this.data.getObject(row,column);", 
          "type": "InsertBefore", 
          "seed": "double minRegularValue=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "Replace", 
          "seed": "double result=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 200, 
          "faulty": "if (!(data instanceof StatisticalCategoryDataset)) {\n  throw new IllegalArgumentException(\"Requires StatisticalCategoryDataset.\");\n}", 
          "type": "InsertBefore", 
          "seed": "double rectBreadth=state.getBarWidth();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 265, 
          "faulty": "if (uclip <= 0.0) {\n  if (value >= uclip) {\n    return;\n  }\n  base=uclip;\n  if (value <= lclip) {\n    value=lclip;\n  }\n}\n else if (lclip <= 0.0) {\n  if (value >= uclip) {\n    value=uclip;\n  }\n else {\n    if (value <= lclip) {\n      value=lclip;\n    }\n  }\n}\n else {\n  if (value <= lclip) {\n    return;\n  }\n  base=getLowerClip();\n  if (value >= uclip) {\n    value=uclip;\n  }\n}", 
          "type": "Delete", 
          "seed": "boolean inverted=rangeAxis.isInverted();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 260, 
          "faulty": "double value=meanValue.doubleValue();", 
          "type": "InsertBefore", 
          "seed": "Line2D line2=null;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 200, 
          "faulty": "if (!(data instanceof StatisticalCategoryDataset)) {\n  throw new IllegalArgumentException(\"Requires StatisticalCategoryDataset.\");\n}", 
          "type": "InsertBefore", 
          "seed": "int baseIndex=-1;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 258, 
          "faulty": "Number meanValue=dataset.getMeanValue(row,column);", 
          "type": "InsertBefore", 
          "seed": "this.errorIndicatorStroke=new BasicStroke(0.5f);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 273, 
          "faulty": "return this.data.getColumnCount();", 
          "type": "InsertBefore", 
          "seed": "double sumXY=0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 247, 
          "faulty": "int categoryCount=getColumnCount();", 
          "type": "Delete", 
          "seed": "double currentItemMargin=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "InsertBefore", 
          "seed": "ItemLabelPosition p1=new ItemLabelPosition(ItemLabelAnchor.INSIDE12,TextAnchor.TOP_CENTER);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_170/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:41:48.661816360 -0500\n@@ -196,22 +196,18 @@\n                          int column,\n                          int pass) {\n \n-        // defensive check\n+        plot.drawBackground(g2, dataArea);\n+\t\t\t\t\t\t\tdouble rectBreadth = state.getBarWidth();\n+\t\t\t\t\t\t\tint baseIndex = -1;\n+\t\t// defensive check\n         if (!(data instanceof StatisticalCategoryDataset)) {\n             throw new IllegalArgumentException(\n                 \"Requires StatisticalCategoryDataset.\");\n         }\n-        StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n+        int series = 0;\n+\t\tStatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n     }\n                 \n     /**\n@@ -243,54 +239,17 @@\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                 dataArea, xAxisLocation);\n \n-        int seriesCount = getRowCount();\n-        int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n-        // BAR X\n+        double result = Double.NaN;\n+        this.errorIndicatorStroke = new BasicStroke(0.5f);\n+\t\t// BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n-        double value = meanValue.doubleValue();\n+        Line2D line2 = null;\n+\t\tdouble value = meanValue.doubleValue();\n         double base = 0.0;\n         double lclip = getLowerClip();\n         double uclip = getUpperClip();\n \n-        if (uclip <= 0.0) {  // cases 1, 2, 3 and 4\n-            if (value >= uclip) {\n-                return; // bar is not visible\n-            }\n-            base = uclip;\n-            if (value <= lclip) {\n-                value = lclip;\n-            }\n-        }\n-        else if (lclip <= 0.0) { // cases 5, 6, 7 and 8\n-            if (value >= uclip) {\n-                value = uclip;\n-            }\n-            else {\n-                if (value <= lclip) {\n-                    value = lclip;\n-                }\n-            }\n-        }\n-        else { // cases 9, 10, 11 and 12\n-            if (value <= lclip) {\n-                return; // bar is not visible\n-            }\n-            base = getLowerClip();\n-            if (value >= uclip) {\n-               value = uclip;\n-            }\n-        }\n-\n         RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n         double transY1 = rangeAxis.valueToJava2D(base, dataArea, yAxisLocation);\n         double transY2 = rangeAxis.valueToJava2D(value, dataArea, \n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_170/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:41:48.661816360 -0500\n@@ -92,7 +92,12 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_170/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:41:48.665816476 -0500\n@@ -104,8 +104,10 @@\n      * @return The mean value.\n      */\n     public Number getMeanValue(int row, int column) {\n-        Number result = null;\n-        MeanAndStandardDeviation masd \n+        this.maximumRangeValue = Double.NaN;\n+\t\tNumber result = null;\n+        double maxRegularValue = Double.NEGATIVE_INFINITY;\n+\t\tMeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n             result = masd.getMean();\n@@ -166,8 +168,10 @@\n      * @return The standard deviation.\n      */\n     public Number getStdDevValue(int row, int column) {\n-        Number result = null;\n-        MeanAndStandardDeviation masd \n+        double sumX = 0;\n+\t\tNumber result = null;\n+        double minRegularValue = Double.POSITIVE_INFINITY;\n+\t\tMeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n             result = masd.getStandardDeviation();\n@@ -243,7 +247,8 @@\n      * @return The row key.\n      */\n     public Comparable getRowKey(int row) {\n-        return this.data.getRowKey(row);\n+        this.minimumRangeValue = Double.NaN;\n+\t\treturn this.data.getRowKey(row);\n     }\n \n     /**\n@@ -270,7 +275,8 @@\n      * @return The column count.\n      */\n     public int getColumnCount() {\n-        return this.data.getColumnCount();\n+        double sumXY = 0;\n+\t\treturn this.data.getColumnCount();\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "Replace", 
          "seed": "double result=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "InsertBefore", 
          "seed": "Rectangle2D bar=null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_190/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:42:01.130178272 -0500\n@@ -204,14 +204,6 @@\n         StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n     }\n                 \n     /**\n@@ -243,17 +235,8 @@\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                 dataArea, xAxisLocation);\n \n-        int seriesCount = getRowCount();\n+        double result = Double.NaN;\n         int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_190/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:42:01.134178388 -0500\n@@ -92,7 +92,11 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_190/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:42:01.134178388 -0500\n@@ -377,9 +377,11 @@\n         Range result = null;\n         if (includeInterval) {\n             if (!Double.isNaN(this.minimumRangeValueIncStdDev) \n-                    && !Double.isNaN(this.maximumRangeValueIncStdDev))\n-            result = new Range(this.minimumRangeValueIncStdDev, \n-                    this.maximumRangeValueIncStdDev);\n+                    && !Double.isNaN(this.maximumRangeValueIncStdDev)) {\n+\t\t\t\tdouble sumX2 = 0.0;\n+\t\t\t\tresult = new Range(this.minimumRangeValueIncStdDev,\n+\t\t\t\t\t\tthis.maximumRangeValueIncStdDev);\n+\t\t\t}\n         }\n         else {\n             if (!Double.isNaN(this.minimumRangeValue) \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "Delete", 
          "seed": "this.minimumRangeValueIncStdDev=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 111, 
          "faulty": "result=masd.getMean();", 
          "type": "InsertBefore", 
          "seed": "result=masd.getStandardDeviation();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Replace", 
          "seed": "double xx2=domainAxis.getCategoryEnd(column,getColumnCount(),dataArea,plot.getDomainAxisEdge());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "InsertBefore", 
          "seed": "g2.setStroke(plot.getRangeGridlineStroke());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "InsertBefore", 
          "seed": "g2.setStroke(plot.getRangeGridlineStroke());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 243, 
          "faulty": "double rectY=domainAxis.getCategoryStart(column,getColumnCount(),dataArea,xAxisLocation);", 
          "type": "InsertBefore", 
          "seed": "double currentItemMargin=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 104, 
          "faulty": "return this.standardDeviation;", 
          "type": "InsertBefore", 
          "seed": "double sumXX=0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return new Icon(){\n  public void paintIcon(  Component c,  Graphics g,  int x,  int y){\n    Graphics2D g2=(Graphics2D)g;\n    path.transform(AffineTransform.getTranslateInstance(x,y));\n    if (fillPaint != null) {\n      g2.setPaint(fillPaint);\n      g2.fill(path);\n    }\n    if (outlinePaint != null) {\n      g2.setPaint(outlinePaint);\n      g2.draw(path);\n    }\n    path.transform(AffineTransform.getTranslateInstance(-x,-y));\n  }\n  public int getIconWidth(){\n    return width;\n  }\n  public int getIconHeight(){\n    return height;\n  }\n}\n;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 263, 
          "faulty": "double uclip=getUpperClip();", 
          "type": "InsertBefore", 
          "seed": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "Delete", 
          "seed": "this.minimumRangeValueIncStdDev=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 126, 
          "faulty": "return getMeanValue(row,column);", 
          "type": "InsertBefore", 
          "seed": "double maxval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 169, 
          "faulty": "Number result=null;", 
          "type": "Replace", 
          "seed": "Number result=null;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "RectangleEdge location=plot.getRangeAxisEdge();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_599/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:45:47.772763570 -0500\n@@ -201,17 +201,11 @@\n             throw new IllegalArgumentException(\n                 \"Requires StatisticalCategoryDataset.\");\n         }\n-        StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n+        g2.setStroke(plot.getRangeGridlineStroke());\n+\t\tg2.setStroke(plot.getRangeGridlineStroke());\n+\t\tStatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n     }\n                 \n     /**\n@@ -239,28 +233,27 @@\n                                      \n         RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n         \n-        // BAR Y\n+        double currentItemMargin = 0.0;\n+\t\t// BAR Y\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                 dataArea, xAxisLocation);\n \n         int seriesCount = getRowCount();\n         int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n         double value = meanValue.doubleValue();\n         double base = 0.0;\n         double lclip = getLowerClip();\n-        double uclip = getUpperClip();\n+        if (seriesCount > 1) {\n+\t\t\tdouble seriesGap = dataArea.getHeight() * getItemMargin()\n+\t\t\t\t\t/ (categoryCount * (seriesCount - 1));\n+\t\t\trectY = rectY + row * (state.getBarWidth() + seriesGap);\n+\t\t} else {\n+\t\t\trectY = rectY + row * state.getBarWidth();\n+\t\t}\n+\t\tdouble uclip = getUpperClip();\n \n         if (uclip <= 0.0) {  // cases 1, 2, 3 and 4\n             if (value >= uclip) {\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_599/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:45:47.776763687 -0500\n@@ -101,7 +101,8 @@\n      * @return The standard deviation.\n      */\n     public Number getStandardDeviation() {\n-        return this.standardDeviation;\n+        double sumXX = 0;\n+\t\treturn this.standardDeviation;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_599/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:45:47.776763687 -0500\n@@ -107,9 +107,6 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getMean();\n-        }\n         return result;\n     }\n \n@@ -123,7 +120,8 @@\n      * @return The value.\n      */\n     public Number getValue(int row, int column) {\n-        return getMeanValue(row, column);\n+        double maxval = Double.NaN;\n+\t\treturn getMeanValue(row, column);\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "Replace", 
          "seed": "double result=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "Replace", 
          "seed": "double result=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 107, 
          "faulty": "Number result=null;", 
          "type": "InsertBefore", 
          "seed": "this.maximumRangeValue=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 126, 
          "faulty": "return getMeanValue(row,column);", 
          "type": "InsertBefore", 
          "seed": "double sum=0.0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_75/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:40:54.812253267 -0500\n@@ -204,14 +204,6 @@\n         StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n     }\n                 \n     /**\n@@ -243,17 +235,8 @@\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                 dataArea, xAxisLocation);\n \n-        int seriesCount = getRowCount();\n+        double result = Double.NaN;\n         int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_75/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:40:54.816253383 -0500\n@@ -92,7 +92,13 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_75/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:40:54.816253383 -0500\n@@ -104,7 +104,8 @@\n      * @return The mean value.\n      */\n     public Number getMeanValue(int row, int column) {\n-        Number result = null;\n+        this.maximumRangeValue = Double.NaN;\n+\t\tNumber result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n@@ -123,7 +124,8 @@\n      * @return The value.\n      */\n     public Number getValue(int row, int column) {\n-        return getMeanValue(row, column);\n+        double sum = 0.0;\n+\t\treturn getMeanValue(row, column);\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "Delete", 
          "seed": "this.minimumRangeValueIncStdDev=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 111, 
          "faulty": "result=masd.getMean();", 
          "type": "InsertBefore", 
          "seed": "result=masd.getStandardDeviation();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Replace", 
          "seed": "double xx2=domainAxis.getCategoryEnd(column,getColumnCount(),dataArea,plot.getDomainAxisEdge());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "InsertBefore", 
          "seed": "g2.setStroke(plot.getRangeGridlineStroke());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 243, 
          "faulty": "double rectY=domainAxis.getCategoryStart(column,getColumnCount(),dataArea,xAxisLocation);", 
          "type": "InsertBefore", 
          "seed": "double currentItemMargin=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 104, 
          "faulty": "return this.standardDeviation;", 
          "type": "InsertBefore", 
          "seed": "double sumXX=0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return new Icon(){\n  public void paintIcon(  Component c,  Graphics g,  int x,  int y){\n    Graphics2D g2=(Graphics2D)g;\n    path.transform(AffineTransform.getTranslateInstance(x,y));\n    if (fillPaint != null) {\n      g2.setPaint(fillPaint);\n      g2.fill(path);\n    }\n    if (outlinePaint != null) {\n      g2.setPaint(outlinePaint);\n      g2.draw(path);\n    }\n    path.transform(AffineTransform.getTranslateInstance(-x,-y));\n  }\n  public int getIconWidth(){\n    return width;\n  }\n  public int getIconHeight(){\n    return height;\n  }\n}\n;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 263, 
          "faulty": "double uclip=getUpperClip();", 
          "type": "InsertBefore", 
          "seed": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 126, 
          "faulty": "return getMeanValue(row,column);", 
          "type": "InsertBefore", 
          "seed": "double maxval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "InsertBefore", 
          "seed": "setPositiveItemLabelPositionFallback(null);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_564/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:45:29.652236845 -0500\n@@ -201,10 +201,12 @@\n             throw new IllegalArgumentException(\n                 \"Requires StatisticalCategoryDataset.\");\n         }\n-        StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n+        g2.setStroke(plot.getRangeGridlineStroke());\n+\t\tStatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n+        setPositiveItemLabelPositionFallback(null);\n+\t\tif (orientation == PlotOrientation.HORIZONTAL) {\n             drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n                     rangeAxis, statData, row, column);\n         }\n@@ -239,28 +241,27 @@\n                                      \n         RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n         \n-        // BAR Y\n+        double currentItemMargin = 0.0;\n+\t\t// BAR Y\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                 dataArea, xAxisLocation);\n \n         int seriesCount = getRowCount();\n         int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n         double value = meanValue.doubleValue();\n         double base = 0.0;\n         double lclip = getLowerClip();\n-        double uclip = getUpperClip();\n+        if (seriesCount > 1) {\n+\t\t\tdouble seriesGap = dataArea.getHeight() * getItemMargin()\n+\t\t\t\t\t/ (categoryCount * (seriesCount - 1));\n+\t\t\trectY = rectY + row * (state.getBarWidth() + seriesGap);\n+\t\t} else {\n+\t\t\trectY = rectY + row * state.getBarWidth();\n+\t\t}\n+\t\tdouble uclip = getUpperClip();\n \n         if (uclip <= 0.0) {  // cases 1, 2, 3 and 4\n             if (value >= uclip) {\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_564/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:45:29.656236962 -0500\n@@ -101,7 +101,8 @@\n      * @return The standard deviation.\n      */\n     public Number getStandardDeviation() {\n-        return this.standardDeviation;\n+        double sumXX = 0;\n+\t\treturn this.standardDeviation;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_564/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:45:29.656236962 -0500\n@@ -107,9 +107,6 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getMean();\n-        }\n         return result;\n     }\n \n@@ -123,7 +120,8 @@\n      * @return The value.\n      */\n     public Number getValue(int row, int column) {\n-        return getMeanValue(row, column);\n+        double maxval = Double.NaN;\n+\t\treturn getMeanValue(row, column);\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 273, 
          "faulty": "return this.data.getColumnCount();", 
          "type": "InsertBefore", 
          "seed": "List result=null;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 126, 
          "faulty": "return getMeanValue(row,column);", 
          "type": "InsertBefore", 
          "seed": "double minval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "int count=dataset.getColumnCount();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 273, 
          "faulty": "return this.data.getColumnCount();", 
          "type": "InsertBefore", 
          "seed": "double sumXX=0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 247, 
          "faulty": "int categoryCount=getColumnCount();", 
          "type": "Replace", 
          "seed": "PlotOrientation orient=plot.getOrientation();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "InsertBefore", 
          "seed": "setNegativeItemLabelPositionFallback(null);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "InsertBefore", 
          "seed": "double minval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 263, 
          "faulty": "double uclip=getUpperClip();", 
          "type": "InsertBefore", 
          "seed": "if (value <= lclip) {\n  value=lclip;\n}"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "double uclip=getUpperClip();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 200, 
          "faulty": "if (!(data instanceof StatisticalCategoryDataset)) {\n  throw new IllegalArgumentException(\"Requires StatisticalCategoryDataset.\");\n}", 
          "type": "Delete", 
          "seed": "Stroke stroke=plot.getRangeGridlineStroke();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "InsertBefore", 
          "seed": "if (masd != null) {\n  result=masd.getStandardDeviation();\n}"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 111, 
          "faulty": "result=masd.getMean();", 
          "type": "Delete", 
          "seed": "int count=0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 175, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "double m=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 389, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "double minval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 273, 
          "faulty": "return this.data.getColumnCount();", 
          "type": "InsertBefore", 
          "seed": "fireDatasetChanged();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 208, 
          "faulty": "drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);", 
          "type": "Replace", 
          "seed": "Image backgroundImage=plot.getBackgroundImage();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_306/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:43:05.356042480 -0500\n@@ -196,22 +196,9 @@\n                          int column,\n                          int pass) {\n \n-        // defensive check\n-        if (!(data instanceof StatisticalCategoryDataset)) {\n-            throw new IllegalArgumentException(\n-                \"Requires StatisticalCategoryDataset.\");\n-        }\n         StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n     }\n                 \n     /**\n@@ -243,24 +230,19 @@\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                 dataArea, xAxisLocation);\n \n-        int seriesCount = getRowCount();\n-        int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n+        setNegativeItemLabelPositionFallback(null);\n+\t\tint seriesCount = getRowCount();\n+        PlotOrientation orient = plot.getOrientation();\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n         double value = meanValue.doubleValue();\n         double base = 0.0;\n         double lclip = getLowerClip();\n-        double uclip = getUpperClip();\n+        if (value <= lclip) {\n+\t\t\tvalue = lclip;\n+\t\t}\n+\t\tdouble uclip = getUpperClip();\n \n         if (uclip <= 0.0) {  // cases 1, 2, 3 and 4\n             if (value >= uclip) {\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_306/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:43:05.356042480 -0500\n@@ -92,7 +92,11 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_306/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:43:05.360042595 -0500\n@@ -107,8 +107,11 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getMean();\n+        double minval = Double.NaN;\n+\t\tif (masd != null) {\n+\t\t\tresult = masd.getStandardDeviation();\n+\t\t}\n+\t\tif (masd != null) {\n         }\n         return result;\n     }\n@@ -123,7 +126,8 @@\n      * @return The value.\n      */\n     public Number getValue(int row, int column) {\n-        return getMeanValue(row, column);\n+        double minval = Double.NaN;\n+\t\treturn getMeanValue(row, column);\n     }\n \n     /**\n@@ -172,7 +176,8 @@\n         if (masd != null) {\n             result = masd.getStandardDeviation();\n         }\n-        return result;\n+        double m = 0.0;\n+\t\treturn result;\n     }\n \n     /**\n@@ -270,7 +275,10 @@\n      * @return The column count.\n      */\n     public int getColumnCount() {\n-        return this.data.getColumnCount();\n+        List result = null;\n+\t\tdouble sumXX = 0;\n+\t\tfireDatasetChanged();\n+\t\treturn this.data.getColumnCount();\n     }\n \n     /**\n@@ -377,16 +385,19 @@\n         Range result = null;\n         if (includeInterval) {\n             if (!Double.isNaN(this.minimumRangeValueIncStdDev) \n-                    && !Double.isNaN(this.maximumRangeValueIncStdDev))\n-            result = new Range(this.minimumRangeValueIncStdDev, \n-                    this.maximumRangeValueIncStdDev);\n+                    && !Double.isNaN(this.maximumRangeValueIncStdDev)) {\n+\t\t\t\tdouble sumX2 = 0.0;\n+\t\t\t\tresult = new Range(this.minimumRangeValueIncStdDev,\n+\t\t\t\t\t\tthis.maximumRangeValueIncStdDev);\n+\t\t\t}\n         }\n         else {\n             if (!Double.isNaN(this.minimumRangeValue) \n                     && !Double.isNaN(this.maximumRangeValue))\n             result = new Range(this.minimumRangeValue, this.maximumRangeValue);            \n         }\n-        return result;\n+        double minval = Double.NaN;\n+\t\treturn result;\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 126, 
          "faulty": "return getMeanValue(row,column);", 
          "type": "InsertBefore", 
          "seed": "double minval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "Replace", 
          "seed": "double sum=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 243, 
          "faulty": "double rectY=domainAxis.getCategoryStart(column,getColumnCount(),dataArea,xAxisLocation);", 
          "type": "InsertBefore", 
          "seed": "CategoryPlot p=getPlot();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 208, 
          "faulty": "drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);", 
          "type": "Delete", 
          "seed": "double x1=domainAxis.getCategoryMiddle(column,getColumnCount(),dataArea,plot.getDomainAxisEdge());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 265, 
          "faulty": "if (uclip <= 0.0) {\n  if (value >= uclip) {\n    return;\n  }\n  base=uclip;\n  if (value <= lclip) {\n    value=lclip;\n  }\n}\n else if (lclip <= 0.0) {\n  if (value >= uclip) {\n    value=uclip;\n  }\n else {\n    if (value <= lclip) {\n      value=lclip;\n    }\n  }\n}\n else {\n  if (value <= lclip) {\n    return;\n  }\n  base=getLowerClip();\n  if (value >= uclip) {\n    value=uclip;\n  }\n}", 
          "type": "Replace", 
          "seed": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)dataset;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 246, 
          "faulty": "return this.data.getRowKey(row);", 
          "type": "InsertBefore", 
          "seed": "double sumY=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_260/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:42:37.923246228 -0500\n@@ -205,8 +205,6 @@\n \n         PlotOrientation orientation = plot.getOrientation();\n         if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n         }\n         else if (orientation == PlotOrientation.VERTICAL) {\n             drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n@@ -239,21 +237,13 @@\n                                      \n         RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n         \n-        // BAR Y\n+        CategoryPlot p = getPlot();\n+\t\t// BAR Y\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                 dataArea, xAxisLocation);\n \n         int seriesCount = getRowCount();\n         int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n@@ -262,34 +252,7 @@\n         double lclip = getLowerClip();\n         double uclip = getUpperClip();\n \n-        if (uclip <= 0.0) {  // cases 1, 2, 3 and 4\n-            if (value >= uclip) {\n-                return; // bar is not visible\n-            }\n-            base = uclip;\n-            if (value <= lclip) {\n-                value = lclip;\n-            }\n-        }\n-        else if (lclip <= 0.0) { // cases 5, 6, 7 and 8\n-            if (value >= uclip) {\n-                value = uclip;\n-            }\n-            else {\n-                if (value <= lclip) {\n-                    value = lclip;\n-                }\n-            }\n-        }\n-        else { // cases 9, 10, 11 and 12\n-            if (value <= lclip) {\n-                return; // bar is not visible\n-            }\n-            base = getLowerClip();\n-            if (value >= uclip) {\n-               value = uclip;\n-            }\n-        }\n+        StatisticalCategoryDataset statData = (StatisticalCategoryDataset) dataset;\n \n         RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n         double transY1 = rangeAxis.valueToJava2D(base, dataArea, yAxisLocation);\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_260/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:42:37.923246228 -0500\n@@ -92,7 +92,9 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\tthis.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_260/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:42:37.927246346 -0500\n@@ -107,9 +107,7 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getMean();\n-        }\n+        double sum = 0.0;\n         return result;\n     }\n \n@@ -123,7 +121,8 @@\n      * @return The value.\n      */\n     public Number getValue(int row, int column) {\n-        return getMeanValue(row, column);\n+        double minval = Double.NaN;\n+\t\treturn getMeanValue(row, column);\n     }\n \n     /**\n@@ -243,7 +242,8 @@\n      * @return The row key.\n      */\n     public Comparable getRowKey(int row) {\n-        return this.data.getRowKey(row);\n+        double sumY = 0;\n+\t\treturn this.data.getRowKey(row);\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 261, 
          "faulty": "double base=0.0;", 
          "type": "InsertBefore", 
          "seed": "double xx0=domainAxis.getCategoryStart(column,getColumnCount(),dataArea,plot.getDomainAxisEdge());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "Delete", 
          "seed": "this.minimumRangeValueIncStdDev=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 111, 
          "faulty": "result=masd.getMean();", 
          "type": "InsertBefore", 
          "seed": "result=masd.getStandardDeviation();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Replace", 
          "seed": "double xx2=domainAxis.getCategoryEnd(column,getColumnCount(),dataArea,plot.getDomainAxisEdge());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 126, 
          "faulty": "return getMeanValue(row,column);", 
          "type": "InsertBefore", 
          "seed": "double max=-Double.MAX_VALUE;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "ItemLabelPosition p=new ItemLabelPosition(ItemLabelAnchor.CENTER,TextAnchor.CENTER);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_529/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:45:12.227730348 -0500\n@@ -204,14 +204,6 @@\n         StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n     }\n                 \n     /**\n@@ -245,20 +237,13 @@\n \n         int seriesCount = getRowCount();\n         int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n         double value = meanValue.doubleValue();\n-        double base = 0.0;\n+        double xx0 = domainAxis.getCategoryStart(column, getColumnCount(),\n+\t\t\t\tdataArea, plot.getDomainAxisEdge());\n+\t\tdouble base = 0.0;\n         double lclip = getLowerClip();\n         double uclip = getUpperClip();\n \n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_529/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:45:12.231730463 -0500\n@@ -92,7 +92,9 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\tthis.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_529/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:45:12.231730463 -0500\n@@ -107,9 +107,6 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getMean();\n-        }\n         return result;\n     }\n \n@@ -123,7 +120,8 @@\n      * @return The value.\n      */\n     public Number getValue(int row, int column) {\n-        return getMeanValue(row, column);\n+        double max = -Double.MAX_VALUE;\n+\t\treturn getMeanValue(row, column);\n     }\n \n     /**\n@@ -377,9 +375,11 @@\n         Range result = null;\n         if (includeInterval) {\n             if (!Double.isNaN(this.minimumRangeValueIncStdDev) \n-                    && !Double.isNaN(this.maximumRangeValueIncStdDev))\n-            result = new Range(this.minimumRangeValueIncStdDev, \n-                    this.maximumRangeValueIncStdDev);\n+                    && !Double.isNaN(this.maximumRangeValueIncStdDev)) {\n+\t\t\t\tdouble sumX2 = 0.0;\n+\t\t\t\tresult = new Range(this.minimumRangeValueIncStdDev,\n+\t\t\t\t\t\tthis.maximumRangeValueIncStdDev);\n+\t\t\t}\n         }\n         else {\n             if (!Double.isNaN(this.minimumRangeValue) \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "InsertBefore", 
          "seed": "PlotOrientation orient=plot.getOrientation();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 379, 
          "faulty": "if (!Double.isNaN(this.minimumRangeValueIncStdDev) && !Double.isNaN(this.maximumRangeValueIncStdDev)) result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double x=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 170, 
          "faulty": "MeanAndStandardDeviation masd=(MeanAndStandardDeviation)this.data.getObject(row,column);", 
          "type": "InsertBefore", 
          "seed": "this.minimumRangeValue=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 111, 
          "faulty": "result=masd.getMean();", 
          "type": "Delete", 
          "seed": "double maxRegularValue=Double.NEGATIVE_INFINITY;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "InsertBefore", 
          "seed": "result=masd.getStandardDeviation();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_432/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:44:22.026271052 -0500\n@@ -204,14 +204,7 @@\n         StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n+        PlotOrientation orient = plot.getOrientation();\n     }\n                 \n     /**\n@@ -251,7 +244,6 @@\n             rectY = rectY + row * (state.getBarWidth() + seriesGap);\n         }\n         else {\n-            rectY = rectY + row * state.getBarWidth();\n         }\n \n         // BAR X\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_432/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:44:22.030271170 -0500\n@@ -92,7 +92,8 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_432/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:44:22.030271170 -0500\n@@ -107,8 +107,8 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getMean();\n+        result = masd.getStandardDeviation();\n+\t\tif (masd != null) {\n         }\n         return result;\n     }\n@@ -167,7 +167,8 @@\n      */\n     public Number getStdDevValue(int row, int column) {\n         Number result = null;\n-        MeanAndStandardDeviation masd \n+        this.minimumRangeValue = Double.NaN;\n+\t\tMeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n             result = masd.getStandardDeviation();\n@@ -376,7 +377,8 @@\n     public Range getRangeBounds(boolean includeInterval) {\n         Range result = null;\n         if (includeInterval) {\n-            if (!Double.isNaN(this.minimumRangeValueIncStdDev) \n+            double x = 0.0;\n+\t\t\tif (!Double.isNaN(this.minimumRangeValueIncStdDev) \n                     && !Double.isNaN(this.maximumRangeValueIncStdDev))\n             result = new Range(this.minimumRangeValueIncStdDev, \n                     this.maximumRangeValueIncStdDev);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "Delete", 
          "seed": "this.minimumRangeValueIncStdDev=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "InsertBefore", 
          "seed": "g2.setStroke(plot.getRangeGridlineStroke());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "InsertBefore", 
          "seed": "g2.setStroke(plot.getRangeGridlineStroke());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return new Icon(){\n  public void paintIcon(  Component c,  Graphics g,  int x,  int y){\n    Graphics2D g2=(Graphics2D)g;\n    path.transform(AffineTransform.getTranslateInstance(x,y));\n    if (fillPaint != null) {\n      g2.setPaint(fillPaint);\n      g2.fill(path);\n    }\n    if (outlinePaint != null) {\n      g2.setPaint(outlinePaint);\n      g2.draw(path);\n    }\n    path.transform(AffineTransform.getTranslateInstance(-x,-y));\n  }\n  public int getIconWidth(){\n    return width;\n  }\n  public int getIconHeight(){\n    return height;\n  }\n}\n;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 263, 
          "faulty": "double uclip=getUpperClip();", 
          "type": "InsertBefore", 
          "seed": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 246, 
          "faulty": "return this.data.getRowKey(row);", 
          "type": "InsertBefore", 
          "seed": "double x=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 173, 
          "faulty": "result=masd.getStandardDeviation();", 
          "type": "Replace", 
          "seed": "result=masd.getMean();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Replace", 
          "seed": "RectangleEdge edge=plot.getRangeAxisEdge();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Replace", 
          "seed": "RectangleEdge edge=plot.getRangeAxisEdge();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 126, 
          "faulty": "return getMeanValue(row,column);", 
          "type": "InsertBefore", 
          "seed": "double maxval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 173, 
          "faulty": "result=masd.getStandardDeviation();", 
          "type": "Replace", 
          "seed": "int count=0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "double m=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 104, 
          "faulty": "return this.standardDeviation;", 
          "type": "InsertBefore", 
          "seed": "double sumXX=0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "Delete", 
          "seed": "Paint itemPaint=getItemPaint(row,column);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_653/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:46:16.977612480 -0500\n@@ -201,17 +201,10 @@\n             throw new IllegalArgumentException(\n                 \"Requires StatisticalCategoryDataset.\");\n         }\n-        StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n-\n-        PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n+        g2.setStroke(plot.getRangeGridlineStroke());\n+\t\tg2.setStroke(plot.getRangeGridlineStroke());\n+\t\tPlotOrientation orientation = plot.getOrientation();\n+        RectangleEdge edge = plot.getRangeAxisEdge();\n     }\n                 \n     /**\n@@ -245,22 +238,20 @@\n \n         int seriesCount = getRowCount();\n         int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n         double value = meanValue.doubleValue();\n         double base = 0.0;\n         double lclip = getLowerClip();\n-        double uclip = getUpperClip();\n+        if (seriesCount > 1) {\n+\t\t\tdouble seriesGap = dataArea.getHeight() * getItemMargin()\n+\t\t\t\t\t/ (categoryCount * (seriesCount - 1));\n+\t\t\trectY = rectY + row * (state.getBarWidth() + seriesGap);\n+\t\t} else {\n+\t\t\trectY = rectY + row * state.getBarWidth();\n+\t\t}\n+\t\tdouble uclip = getUpperClip();\n \n         if (uclip <= 0.0) {  // cases 1, 2, 3 and 4\n             if (value >= uclip) {\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_653/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:46:16.977612480 -0500\n@@ -92,7 +92,8 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        double m = 0.0;\n+\t\treturn this.mean;\n     }\n \n     /**\n@@ -101,7 +102,8 @@\n      * @return The standard deviation.\n      */\n     public Number getStandardDeviation() {\n-        return this.standardDeviation;\n+        double sumXX = 0;\n+\t\treturn this.standardDeviation;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_653/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:46:16.981612597 -0500\n@@ -107,9 +107,6 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getMean();\n-        }\n         return result;\n     }\n \n@@ -123,7 +120,8 @@\n      * @return The value.\n      */\n     public Number getValue(int row, int column) {\n-        return getMeanValue(row, column);\n+        double maxval = Double.NaN;\n+\t\treturn getMeanValue(row, column);\n     }\n \n     /**\n@@ -170,7 +168,7 @@\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n-            result = masd.getStandardDeviation();\n+            int count = 0;\n         }\n         return result;\n     }\n@@ -243,7 +241,8 @@\n      * @return The row key.\n      */\n     public Comparable getRowKey(int row) {\n-        return this.data.getRowKey(row);\n+        double x = 0.0;\n+\t\treturn this.data.getRowKey(row);\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "Delete", 
          "seed": "this.minimumRangeValueIncStdDev=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 111, 
          "faulty": "result=masd.getMean();", 
          "type": "InsertBefore", 
          "seed": "result=masd.getStandardDeviation();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Replace", 
          "seed": "double xx2=domainAxis.getCategoryEnd(column,getColumnCount(),dataArea,plot.getDomainAxisEdge());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "InsertBefore", 
          "seed": "g2.setStroke(plot.getRangeGridlineStroke());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "InsertBefore", 
          "seed": "g2.setStroke(plot.getRangeGridlineStroke());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 172, 
          "faulty": "if (masd != null) {\n  result=masd.getStandardDeviation();\n}", 
          "type": "Delete", 
          "seed": "if (masd != null) {\n  result=masd.getMean();\n}"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "double barW0=domainAxis.getCategoryStart(column,getColumnCount(),dataArea,plot.getDomainAxisEdge());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Replace", 
          "seed": "double xx2=domainAxis.getCategoryEnd(column,getColumnCount(),dataArea,plot.getDomainAxisEdge());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "InsertBefore", 
          "seed": "g2.setStroke(plot.getRangeGridlineStroke());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "InsertBefore", 
          "seed": "g2.setStroke(plot.getRangeGridlineStroke());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Replace", 
          "seed": "RectangleEdge edge=plot.getRangeAxisEdge();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Replace", 
          "seed": "RectangleEdge edge=plot.getRangeAxisEdge();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Replace", 
          "seed": "RectangleEdge edge=plot.getRangeAxisEdge();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Replace", 
          "seed": "RectangleEdge edge=plot.getRangeAxisEdge();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 126, 
          "faulty": "return getMeanValue(row,column);", 
          "type": "InsertBefore", 
          "seed": "double maxval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 173, 
          "faulty": "result=masd.getStandardDeviation();", 
          "type": "Replace", 
          "seed": "int count=0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 273, 
          "faulty": "return this.data.getColumnCount();", 
          "type": "InsertBefore", 
          "seed": "double result=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "Replace", 
          "seed": "double y0=dataArea.getMaxY();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_687/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:46:35.994165235 -0500\n@@ -201,17 +201,14 @@\n             throw new IllegalArgumentException(\n                 \"Requires StatisticalCategoryDataset.\");\n         }\n-        StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n+        g2.setStroke(plot.getRangeGridlineStroke());\n+\t\tg2.setStroke(plot.getRangeGridlineStroke());\n+\t\tg2.setStroke(plot.getRangeGridlineStroke());\n+\t\tg2.setStroke(plot.getRangeGridlineStroke());\n+\t\tdouble y0 = dataArea.getMaxY();\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n+        RectangleEdge edge = plot.getRangeAxisEdge();\n     }\n                 \n     /**\n@@ -245,14 +242,8 @@\n \n         int seriesCount = getRowCount();\n         int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n+        double xx2 = domainAxis.getCategoryEnd(column, getColumnCount(),\n+\t\t\t\tdataArea, plot.getDomainAxisEdge());\n \n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_687/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:46:35.998165351 -0500\n@@ -107,9 +107,6 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getMean();\n-        }\n         return result;\n     }\n \n@@ -123,7 +120,8 @@\n      * @return The value.\n      */\n     public Number getValue(int row, int column) {\n-        return getMeanValue(row, column);\n+        double maxval = Double.NaN;\n+\t\treturn getMeanValue(row, column);\n     }\n \n     /**\n@@ -169,9 +167,6 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getStandardDeviation();\n-        }\n         return result;\n     }\n \n@@ -270,7 +265,8 @@\n      * @return The column count.\n      */\n     public int getColumnCount() {\n-        return this.data.getColumnCount();\n+        double result = Double.NaN;\n+\t\treturn this.data.getColumnCount();\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 273, 
          "faulty": "return this.data.getColumnCount();", 
          "type": "InsertBefore", 
          "seed": "List result=null;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 126, 
          "faulty": "return getMeanValue(row,column);", 
          "type": "InsertBefore", 
          "seed": "double minval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "int count=dataset.getColumnCount();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 273, 
          "faulty": "return this.data.getColumnCount();", 
          "type": "InsertBefore", 
          "seed": "double sumXX=0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 247, 
          "faulty": "int categoryCount=getColumnCount();", 
          "type": "Replace", 
          "seed": "PlotOrientation orient=plot.getOrientation();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "InsertBefore", 
          "seed": "setNegativeItemLabelPositionFallback(null);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "InsertBefore", 
          "seed": "double minval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 263, 
          "faulty": "double uclip=getUpperClip();", 
          "type": "InsertBefore", 
          "seed": "if (value <= lclip) {\n  value=lclip;\n}"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "double uclip=getUpperClip();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 200, 
          "faulty": "if (!(data instanceof StatisticalCategoryDataset)) {\n  throw new IllegalArgumentException(\"Requires StatisticalCategoryDataset.\");\n}", 
          "type": "Delete", 
          "seed": "Stroke stroke=plot.getRangeGridlineStroke();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "InsertBefore", 
          "seed": "if (masd != null) {\n  result=masd.getStandardDeviation();\n}"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 111, 
          "faulty": "result=masd.getMean();", 
          "type": "Delete", 
          "seed": "int count=0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 175, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "double m=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 389, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "double minval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 273, 
          "faulty": "return this.data.getColumnCount();", 
          "type": "InsertBefore", 
          "seed": "fireDatasetChanged();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 208, 
          "faulty": "drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);", 
          "type": "Replace", 
          "seed": "Image backgroundImage=plot.getBackgroundImage();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 377, 
          "faulty": "Range result=null;", 
          "type": "InsertBefore", 
          "seed": "double sd=0.0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_333/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:43:22.208532165 -0500\n@@ -196,22 +196,9 @@\n                          int column,\n                          int pass) {\n \n-        // defensive check\n-        if (!(data instanceof StatisticalCategoryDataset)) {\n-            throw new IllegalArgumentException(\n-                \"Requires StatisticalCategoryDataset.\");\n-        }\n         StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n     }\n                 \n     /**\n@@ -243,24 +230,19 @@\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                 dataArea, xAxisLocation);\n \n-        int seriesCount = getRowCount();\n-        int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n+        setNegativeItemLabelPositionFallback(null);\n+\t\tint seriesCount = getRowCount();\n+        PlotOrientation orient = plot.getOrientation();\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n         double value = meanValue.doubleValue();\n         double base = 0.0;\n         double lclip = getLowerClip();\n-        double uclip = getUpperClip();\n+        if (value <= lclip) {\n+\t\t\tvalue = lclip;\n+\t\t}\n+\t\tdouble uclip = getUpperClip();\n \n         if (uclip <= 0.0) {  // cases 1, 2, 3 and 4\n             if (value >= uclip) {\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_333/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:43:22.212532283 -0500\n@@ -92,7 +92,9 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\tthis.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_333/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:43:22.212532283 -0500\n@@ -107,8 +107,11 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getMean();\n+        double minval = Double.NaN;\n+\t\tif (masd != null) {\n+\t\t\tresult = masd.getStandardDeviation();\n+\t\t}\n+\t\tif (masd != null) {\n         }\n         return result;\n     }\n@@ -123,7 +126,8 @@\n      * @return The value.\n      */\n     public Number getValue(int row, int column) {\n-        return getMeanValue(row, column);\n+        double minval = Double.NaN;\n+\t\treturn getMeanValue(row, column);\n     }\n \n     /**\n@@ -172,7 +176,8 @@\n         if (masd != null) {\n             result = masd.getStandardDeviation();\n         }\n-        return result;\n+        double m = 0.0;\n+\t\treturn result;\n     }\n \n     /**\n@@ -270,7 +275,10 @@\n      * @return The column count.\n      */\n     public int getColumnCount() {\n-        return this.data.getColumnCount();\n+        List result = null;\n+\t\tdouble sumXX = 0;\n+\t\tfireDatasetChanged();\n+\t\treturn this.data.getColumnCount();\n     }\n \n     /**\n@@ -374,19 +382,23 @@\n      * @return The range.\n      */\n     public Range getRangeBounds(boolean includeInterval) {\n-        Range result = null;\n+        double sd = 0.0;\n+\t\tRange result = null;\n         if (includeInterval) {\n             if (!Double.isNaN(this.minimumRangeValueIncStdDev) \n-                    && !Double.isNaN(this.maximumRangeValueIncStdDev))\n-            result = new Range(this.minimumRangeValueIncStdDev, \n-                    this.maximumRangeValueIncStdDev);\n+                    && !Double.isNaN(this.maximumRangeValueIncStdDev)) {\n+\t\t\t\tdouble sumX2 = 0.0;\n+\t\t\t\tresult = new Range(this.minimumRangeValueIncStdDev,\n+\t\t\t\t\t\tthis.maximumRangeValueIncStdDev);\n+\t\t\t}\n         }\n         else {\n             if (!Double.isNaN(this.minimumRangeValue) \n                     && !Double.isNaN(this.maximumRangeValue))\n             result = new Range(this.minimumRangeValue, this.maximumRangeValue);            \n         }\n-        return result;\n+        double minval = Double.NaN;\n+\t\treturn result;\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 107, 
          "faulty": "Number result=null;", 
          "type": "InsertBefore", 
          "seed": "this.maximumRangeValue=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 169, 
          "faulty": "Number result=null;", 
          "type": "InsertBefore", 
          "seed": "double sumX=0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 246, 
          "faulty": "return this.data.getRowKey(row);", 
          "type": "InsertBefore", 
          "seed": "this.minimumRangeValue=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "Delete", 
          "seed": "GanttCategoryDataset gcd=(GanttCategoryDataset)dataset;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 172, 
          "faulty": "if (masd != null) {\n  result=masd.getStandardDeviation();\n}", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_163/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:41:45.641728697 -0500\n@@ -204,14 +204,6 @@\n         StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n     }\n                 \n     /**\n@@ -243,17 +235,7 @@\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                 dataArea, xAxisLocation);\n \n-        int seriesCount = getRowCount();\n         int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_163/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:41:45.641728697 -0500\n@@ -92,7 +92,9 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\tthis.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_163/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:41:45.645728814 -0500\n@@ -104,7 +104,8 @@\n      * @return The mean value.\n      */\n     public Number getMeanValue(int row, int column) {\n-        Number result = null;\n+        this.maximumRangeValue = Double.NaN;\n+\t\tNumber result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n@@ -166,10 +167,12 @@\n      * @return The standard deviation.\n      */\n     public Number getStdDevValue(int row, int column) {\n-        Number result = null;\n+        double sumX = 0;\n+\t\tNumber result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n+        double sumX2 = 0.0;\n+\t\tif (masd != null) {\n             result = masd.getStandardDeviation();\n         }\n         return result;\n@@ -243,7 +246,8 @@\n      * @return The row key.\n      */\n     public Comparable getRowKey(int row) {\n-        return this.data.getRowKey(row);\n+        this.minimumRangeValue = Double.NaN;\n+\t\treturn this.data.getRowKey(row);\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 261, 
          "faulty": "double base=0.0;", 
          "type": "InsertBefore", 
          "seed": "double xx0=domainAxis.getCategoryStart(column,getColumnCount(),dataArea,plot.getDomainAxisEdge());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 172, 
          "faulty": "if (masd != null) {\n  result=masd.getStandardDeviation();\n}", 
          "type": "Replace", 
          "seed": "double maxOutlier=Double.NEGATIVE_INFINITY;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 243, 
          "faulty": "double rectY=domainAxis.getCategoryStart(column,getColumnCount(),dataArea,xAxisLocation);", 
          "type": "InsertBefore", 
          "seed": "double y0=dataArea.getMaxY();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "Delete", 
          "seed": "this.minimumRangeValueIncStdDev=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 243, 
          "faulty": "double rectY=domainAxis.getCategoryStart(column,getColumnCount(),dataArea,xAxisLocation);", 
          "type": "InsertBefore", 
          "seed": "double currentItemMargin=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "InsertBefore", 
          "seed": "g2.setStroke(plot.getRangeGridlineStroke());"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_537/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:45:15.291819414 -0500\n@@ -201,7 +201,8 @@\n             throw new IllegalArgumentException(\n                 \"Requires StatisticalCategoryDataset.\");\n         }\n-        StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n+        g2.setStroke(plot.getRangeGridlineStroke());\n+\t\tStatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n         if (orientation == PlotOrientation.HORIZONTAL) {\n@@ -239,7 +240,9 @@\n                                      \n         RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n         \n-        // BAR Y\n+        double y0 = dataArea.getMaxY();\n+\t\tdouble currentItemMargin = 0.0;\n+\t\t// BAR Y\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                 dataArea, xAxisLocation);\n \n@@ -258,7 +261,9 @@\n         Number meanValue = dataset.getMeanValue(row, column);\n \n         double value = meanValue.doubleValue();\n-        double base = 0.0;\n+        double xx0 = domainAxis.getCategoryStart(column, getColumnCount(),\n+\t\t\t\tdataArea, plot.getDomainAxisEdge());\n+\t\tdouble base = 0.0;\n         double lclip = getLowerClip();\n         double uclip = getUpperClip();\n \n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_537/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:45:15.291819414 -0500\n@@ -107,9 +107,6 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getMean();\n-        }\n         return result;\n     }\n \n@@ -169,9 +166,7 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getStandardDeviation();\n-        }\n+        double maxOutlier = Double.NEGATIVE_INFINITY;\n         return result;\n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 170, 
          "faulty": "MeanAndStandardDeviation masd=(MeanAndStandardDeviation)this.data.getObject(row,column);", 
          "type": "InsertBefore", 
          "seed": "double minRegularValue=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "Replace", 
          "seed": "double result=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "Replace", 
          "seed": "double result=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 107, 
          "faulty": "Number result=null;", 
          "type": "InsertBefore", 
          "seed": "this.maximumRangeValue=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 126, 
          "faulty": "return getMeanValue(row,column);", 
          "type": "InsertBefore", 
          "seed": "double sum=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 175, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "double total=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "InsertBefore", 
          "seed": "double[] result=new double[2];"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 206, 
          "faulty": "PlotOrientation orientation=plot.getOrientation();", 
          "type": "InsertBefore", 
          "seed": "double barW=state.getBarWidth();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_121/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:41:22.941069770 -0500\n@@ -201,17 +201,11 @@\n             throw new IllegalArgumentException(\n                 \"Requires StatisticalCategoryDataset.\");\n         }\n-        StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n+        double[] result = new double[2];\n+\t\tStatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n-        PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n+        double barW = state.getBarWidth();\n+\t\tPlotOrientation orientation = plot.getOrientation();\n     }\n                 \n     /**\n@@ -243,17 +237,8 @@\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                 dataArea, xAxisLocation);\n \n-        int seriesCount = getRowCount();\n+        double result = Double.NaN;\n         int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_121/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:41:22.945069885 -0500\n@@ -92,7 +92,11 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_121/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:41:22.945069885 -0500\n@@ -104,7 +104,8 @@\n      * @return The mean value.\n      */\n     public Number getMeanValue(int row, int column) {\n-        Number result = null;\n+        this.maximumRangeValue = Double.NaN;\n+\t\tNumber result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n@@ -123,7 +124,8 @@\n      * @return The value.\n      */\n     public Number getValue(int row, int column) {\n-        return getMeanValue(row, column);\n+        double sum = 0.0;\n+\t\treturn getMeanValue(row, column);\n     }\n \n     /**\n@@ -167,12 +169,14 @@\n      */\n     public Number getStdDevValue(int row, int column) {\n         Number result = null;\n-        MeanAndStandardDeviation masd \n+        double minRegularValue = Double.POSITIVE_INFINITY;\n+\t\tMeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n             result = masd.getStandardDeviation();\n         }\n-        return result;\n+        double total = 0.0;\n+\t\treturn result;\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 126, 
          "faulty": "return getMeanValue(row,column);", 
          "type": "InsertBefore", 
          "seed": "double minval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "Replace", 
          "seed": "double sum=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 274, 
          "faulty": "if (lclip <= 0.0) {\n  if (value >= uclip) {\n    value=uclip;\n  }\n else {\n    if (value <= lclip) {\n      value=lclip;\n    }\n  }\n}\n else {\n  if (value <= lclip) {\n    return;\n  }\n  base=getLowerClip();\n  if (value >= uclip) {\n    value=uclip;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "double previous=state.getSeriesRunningTotal();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 104, 
          "faulty": "return this.standardDeviation;", 
          "type": "InsertBefore", 
          "seed": "this.standardDeviation=standardDeviation;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_228/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:42:22.214790278 -0500\n@@ -204,14 +204,6 @@\n         StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n     }\n                 \n     /**\n@@ -245,15 +237,6 @@\n \n         int seriesCount = getRowCount();\n         int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n@@ -270,26 +253,26 @@\n             if (value <= lclip) {\n                 value = lclip;\n             }\n-        }\n-        else if (lclip <= 0.0) { // cases 5, 6, 7 and 8\n-            if (value >= uclip) {\n-                value = uclip;\n-            }\n-            else {\n-                if (value <= lclip) {\n-                    value = lclip;\n-                }\n-            }\n-        }\n-        else { // cases 9, 10, 11 and 12\n-            if (value <= lclip) {\n-                return; // bar is not visible\n-            }\n-            base = getLowerClip();\n-            if (value >= uclip) {\n-               value = uclip;\n-            }\n-        }\n+        } else {\n+\t\t\tdouble previous = state.getSeriesRunningTotal();\n+\t\t\tif (lclip <= 0.0) {\n+\t\t\t\tif (value >= uclip) {\n+\t\t\t\t\tvalue = uclip;\n+\t\t\t\t} else {\n+\t\t\t\t\tif (value <= lclip) {\n+\t\t\t\t\t\tvalue = lclip;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t} else {\n+\t\t\t\tif (value <= lclip) {\n+\t\t\t\t\treturn;\n+\t\t\t\t}\n+\t\t\t\tbase = getLowerClip();\n+\t\t\t\tif (value >= uclip) {\n+\t\t\t\t\tvalue = uclip;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n \n         RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n         double transY1 = rangeAxis.valueToJava2D(base, dataArea, yAxisLocation);\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_228/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:42:22.218790394 -0500\n@@ -92,7 +92,10 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n@@ -101,7 +104,8 @@\n      * @return The standard deviation.\n      */\n     public Number getStandardDeviation() {\n-        return this.standardDeviation;\n+        this.standardDeviation = standardDeviation;\n+\t\treturn this.standardDeviation;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_228/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:42:22.218790394 -0500\n@@ -107,9 +107,7 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getMean();\n-        }\n+        double sum = 0.0;\n         return result;\n     }\n \n@@ -123,7 +121,8 @@\n      * @return The value.\n      */\n     public Number getValue(int row, int column) {\n-        return getMeanValue(row, column);\n+        double minval = Double.NaN;\n+\t\treturn getMeanValue(row, column);\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "InsertBefore", 
          "seed": "if (masd != null) {\n  result=masd.getStandardDeviation();\n}"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 111, 
          "faulty": "result=masd.getMean();", 
          "type": "Delete", 
          "seed": "int count=0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 175, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "double m=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 389, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "double minval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Replace", 
          "seed": "setIncludeBaseInRange(false);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 273, 
          "faulty": "return this.data.getColumnCount();", 
          "type": "InsertBefore", 
          "seed": "double sumXX=0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 247, 
          "faulty": "int categoryCount=getColumnCount();", 
          "type": "Replace", 
          "seed": "PlotOrientation orient=plot.getOrientation();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "InsertBefore", 
          "seed": "setNegativeItemLabelPositionFallback(null);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "InsertBefore", 
          "seed": "double minval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "Composite originalComposite=g2.getComposite();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "Delete", 
          "seed": "double aRadius=0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 175, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "double y=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "InsertBefore", 
          "seed": "PlotOrientation orient=plot.getOrientation();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 379, 
          "faulty": "if (!Double.isNaN(this.minimumRangeValueIncStdDev) && !Double.isNaN(this.maximumRangeValueIncStdDev)) result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double x=0.0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_388/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:43:52.061399989 -0500\n@@ -201,17 +201,8 @@\n             throw new IllegalArgumentException(\n                 \"Requires StatisticalCategoryDataset.\");\n         }\n-        StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n-\n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n+        PlotOrientation orient = plot.getOrientation();\n     }\n                 \n     /**\n@@ -243,17 +234,9 @@\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                 dataArea, xAxisLocation);\n \n-        int seriesCount = getRowCount();\n-        int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n+        setNegativeItemLabelPositionFallback(null);\n+\t\tint seriesCount = getRowCount();\n+        PlotOrientation orient = plot.getOrientation();\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_388/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:43:52.065400106 -0500\n@@ -92,7 +92,11 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_388/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:43:52.065400106 -0500\n@@ -108,7 +108,10 @@\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n-            result = masd.getMean();\n+\t\t\tresult = masd.getStandardDeviation();\n+\t\t}\n+\t\tdouble minval = Double.NaN;\n+\t\tif (masd != null) {\n         }\n         return result;\n     }\n@@ -172,7 +175,9 @@\n         if (masd != null) {\n             result = masd.getStandardDeviation();\n         }\n-        return result;\n+        double m = 0.0;\n+\t\tdouble y = 0.0;\n+\t\treturn result;\n     }\n \n     /**\n@@ -270,7 +275,8 @@\n      * @return The column count.\n      */\n     public int getColumnCount() {\n-        return this.data.getColumnCount();\n+        double sumXX = 0;\n+\t\treturn this.data.getColumnCount();\n     }\n \n     /**\n@@ -376,17 +382,21 @@\n     public Range getRangeBounds(boolean includeInterval) {\n         Range result = null;\n         if (includeInterval) {\n-            if (!Double.isNaN(this.minimumRangeValueIncStdDev) \n-                    && !Double.isNaN(this.maximumRangeValueIncStdDev))\n-            result = new Range(this.minimumRangeValueIncStdDev, \n-                    this.maximumRangeValueIncStdDev);\n+            double x = 0.0;\n+\t\t\tif (!Double.isNaN(this.minimumRangeValueIncStdDev) \n+                    && !Double.isNaN(this.maximumRangeValueIncStdDev)) {\n+\t\t\t\tdouble sumX2 = 0.0;\n+\t\t\t\tresult = new Range(this.minimumRangeValueIncStdDev,\n+\t\t\t\t\t\tthis.maximumRangeValueIncStdDev);\n+\t\t\t}\n         }\n         else {\n             if (!Double.isNaN(this.minimumRangeValue) \n                     && !Double.isNaN(this.maximumRangeValue))\n             result = new Range(this.minimumRangeValue, this.maximumRangeValue);            \n         }\n-        return result;\n+        double minval = Double.NaN;\n+\t\treturn result;\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "InsertBefore", 
          "seed": "if (masd != null) {\n  result=masd.getStandardDeviation();\n}"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 389, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "double minval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Replace", 
          "seed": "setIncludeBaseInRange(false);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 273, 
          "faulty": "return this.data.getColumnCount();", 
          "type": "InsertBefore", 
          "seed": "double sumXX=0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 247, 
          "faulty": "int categoryCount=getColumnCount();", 
          "type": "Replace", 
          "seed": "PlotOrientation orient=plot.getOrientation();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "InsertBefore", 
          "seed": "PlotOrientation orient=plot.getOrientation();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 379, 
          "faulty": "if (!Double.isNaN(this.minimumRangeValueIncStdDev) && !Double.isNaN(this.maximumRangeValueIncStdDev)) result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double x=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 170, 
          "faulty": "MeanAndStandardDeviation masd=(MeanAndStandardDeviation)this.data.getObject(row,column);", 
          "type": "InsertBefore", 
          "seed": "this.minimumRangeValue=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 111, 
          "faulty": "result=masd.getMean();", 
          "type": "Delete", 
          "seed": "double maxRegularValue=Double.NEGATIVE_INFINITY;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 274, 
          "faulty": "if (lclip <= 0.0) {\n  if (value >= uclip) {\n    value=uclip;\n  }\n else {\n    if (value <= lclip) {\n      value=lclip;\n    }\n  }\n}\n else {\n  if (value <= lclip) {\n    return;\n  }\n  base=getLowerClip();\n  if (value >= uclip) {\n    value=uclip;\n  }\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getItemOutlinePaint(row,column));"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 104, 
          "faulty": "return this.standardDeviation;", 
          "type": "InsertBefore", 
          "seed": "double[] result=new double[2];"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "Delete", 
          "seed": "double x1=domainAxis.getCategoryMiddle(column,getColumnCount(),dataArea,plot.getDomainAxisEdge());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 274, 
          "faulty": "if (lclip <= 0.0) {\n  if (value >= uclip) {\n    value=uclip;\n  }\n else {\n    if (value <= lclip) {\n      value=lclip;\n    }\n  }\n}\n else {\n  if (value <= lclip) {\n    return;\n  }\n  base=getLowerClip();\n  if (value >= uclip) {\n    value=uclip;\n  }\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_475/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:44:44.186915240 -0500\n@@ -204,14 +204,7 @@\n         StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n+        PlotOrientation orient = plot.getOrientation();\n     }\n                 \n     /**\n@@ -243,17 +236,7 @@\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                 dataArea, xAxisLocation);\n \n-        int seriesCount = getRowCount();\n-        int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n+        PlotOrientation orient = plot.getOrientation();\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n@@ -270,26 +253,8 @@\n             if (value <= lclip) {\n                 value = lclip;\n             }\n-        }\n-        else if (lclip <= 0.0) { // cases 5, 6, 7 and 8\n-            if (value >= uclip) {\n-                value = uclip;\n-            }\n-            else {\n-                if (value <= lclip) {\n-                    value = lclip;\n-                }\n-            }\n-        }\n-        else { // cases 9, 10, 11 and 12\n-            if (value <= lclip) {\n-                return; // bar is not visible\n-            }\n-            base = getLowerClip();\n-            if (value >= uclip) {\n-               value = uclip;\n-            }\n-        }\n+        } else\n+\t\t\t;\n \n         RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n         double transY1 = rangeAxis.valueToJava2D(base, dataArea, yAxisLocation);\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_475/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:44:44.186915240 -0500\n@@ -92,7 +92,12 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n@@ -101,7 +106,8 @@\n      * @return The standard deviation.\n      */\n     public Number getStandardDeviation() {\n-        return this.standardDeviation;\n+        double[] result = new double[2];\n+\t\treturn this.standardDeviation;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_475/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:44:44.190915358 -0500\n@@ -108,7 +108,9 @@\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n-            result = masd.getMean();\n+\t\t\tresult = masd.getStandardDeviation();\n+\t\t}\n+\t\tif (masd != null) {\n         }\n         return result;\n     }\n@@ -167,7 +169,8 @@\n      */\n     public Number getStdDevValue(int row, int column) {\n         Number result = null;\n-        MeanAndStandardDeviation masd \n+        this.minimumRangeValue = Double.NaN;\n+\t\tMeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n             result = masd.getStandardDeviation();\n@@ -270,7 +273,8 @@\n      * @return The column count.\n      */\n     public int getColumnCount() {\n-        return this.data.getColumnCount();\n+        double sumXX = 0;\n+\t\treturn this.data.getColumnCount();\n     }\n \n     /**\n@@ -376,17 +380,21 @@\n     public Range getRangeBounds(boolean includeInterval) {\n         Range result = null;\n         if (includeInterval) {\n-            if (!Double.isNaN(this.minimumRangeValueIncStdDev) \n-                    && !Double.isNaN(this.maximumRangeValueIncStdDev))\n-            result = new Range(this.minimumRangeValueIncStdDev, \n-                    this.maximumRangeValueIncStdDev);\n+            double x = 0.0;\n+\t\t\tif (!Double.isNaN(this.minimumRangeValueIncStdDev) \n+                    && !Double.isNaN(this.maximumRangeValueIncStdDev)) {\n+\t\t\t\tdouble sumX2 = 0.0;\n+\t\t\t\tresult = new Range(this.minimumRangeValueIncStdDev,\n+\t\t\t\t\t\tthis.maximumRangeValueIncStdDev);\n+\t\t\t}\n         }\n         else {\n             if (!Double.isNaN(this.minimumRangeValue) \n                     && !Double.isNaN(this.maximumRangeValue))\n             result = new Range(this.minimumRangeValue, this.maximumRangeValue);            \n         }\n-        return result;\n+        double minval = Double.NaN;\n+\t\treturn result;\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "double uclip=getUpperClip();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 200, 
          "faulty": "if (!(data instanceof StatisticalCategoryDataset)) {\n  throw new IllegalArgumentException(\"Requires StatisticalCategoryDataset.\");\n}", 
          "type": "Delete", 
          "seed": "Stroke stroke=plot.getRangeGridlineStroke();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 273, 
          "faulty": "return this.data.getColumnCount();", 
          "type": "InsertBefore", 
          "seed": "double sumXX=0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 247, 
          "faulty": "int categoryCount=getColumnCount();", 
          "type": "Replace", 
          "seed": "PlotOrientation orient=plot.getOrientation();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "InsertBefore", 
          "seed": "setNegativeItemLabelPositionFallback(null);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "InsertBefore", 
          "seed": "double minval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "Composite originalComposite=g2.getComposite();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "Delete", 
          "seed": "double aRadius=0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 175, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "double y=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "InsertBefore", 
          "seed": "PlotOrientation orient=plot.getOrientation();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 379, 
          "faulty": "if (!Double.isNaN(this.minimumRangeValueIncStdDev) && !Double.isNaN(this.maximumRangeValueIncStdDev)) result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double x=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 111, 
          "faulty": "result=masd.getMean();", 
          "type": "Delete", 
          "seed": "return HistogramType.FREQUENCY;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 200, 
          "faulty": "if (!(data instanceof StatisticalCategoryDataset)) {\n  throw new IllegalArgumentException(\"Requires StatisticalCategoryDataset.\");\n}", 
          "type": "Delete", 
          "seed": "double rectY=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 206, 
          "faulty": "PlotOrientation orientation=plot.getOrientation();", 
          "type": "Replace", 
          "seed": "double lclip=getLowerClip();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_410/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:44:09.985921048 -0500\n@@ -196,22 +196,8 @@\n                          int column,\n                          int pass) {\n \n-        // defensive check\n-        if (!(data instanceof StatisticalCategoryDataset)) {\n-            throw new IllegalArgumentException(\n-                \"Requires StatisticalCategoryDataset.\");\n-        }\n-        StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n-\n-        PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n+        double lclip = getLowerClip();\n+        PlotOrientation orient = plot.getOrientation();\n     }\n                 \n     /**\n@@ -243,17 +229,9 @@\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                 dataArea, xAxisLocation);\n \n-        int seriesCount = getRowCount();\n-        int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n+        setNegativeItemLabelPositionFallback(null);\n+\t\tint seriesCount = getRowCount();\n+        PlotOrientation orient = plot.getOrientation();\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_410/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:44:09.989921164 -0500\n@@ -107,8 +107,8 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getMean();\n+        double minval = Double.NaN;\n+\t\tif (masd != null) {\n         }\n         return result;\n     }\n@@ -172,7 +172,8 @@\n         if (masd != null) {\n             result = masd.getStandardDeviation();\n         }\n-        return result;\n+        double y = 0.0;\n+\t\treturn result;\n     }\n \n     /**\n@@ -270,7 +271,8 @@\n      * @return The column count.\n      */\n     public int getColumnCount() {\n-        return this.data.getColumnCount();\n+        double sumXX = 0;\n+\t\treturn this.data.getColumnCount();\n     }\n \n     /**\n@@ -376,10 +378,13 @@\n     public Range getRangeBounds(boolean includeInterval) {\n         Range result = null;\n         if (includeInterval) {\n-            if (!Double.isNaN(this.minimumRangeValueIncStdDev) \n-                    && !Double.isNaN(this.maximumRangeValueIncStdDev))\n-            result = new Range(this.minimumRangeValueIncStdDev, \n-                    this.maximumRangeValueIncStdDev);\n+            double x = 0.0;\n+\t\t\tif (!Double.isNaN(this.minimumRangeValueIncStdDev) \n+                    && !Double.isNaN(this.maximumRangeValueIncStdDev)) {\n+\t\t\t\tdouble sumX2 = 0.0;\n+\t\t\t\tresult = new Range(this.minimumRangeValueIncStdDev,\n+\t\t\t\t\t\tthis.maximumRangeValueIncStdDev);\n+\t\t\t}\n         }\n         else {\n             if (!Double.isNaN(this.minimumRangeValue) \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "Delete", 
          "seed": "this.minimumRangeValueIncStdDev=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 111, 
          "faulty": "result=masd.getMean();", 
          "type": "InsertBefore", 
          "seed": "result=masd.getStandardDeviation();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Replace", 
          "seed": "double xx2=domainAxis.getCategoryEnd(column,getColumnCount(),dataArea,plot.getDomainAxisEdge());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "InsertBefore", 
          "seed": "g2.setStroke(plot.getRangeGridlineStroke());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 243, 
          "faulty": "double rectY=domainAxis.getCategoryStart(column,getColumnCount(),dataArea,xAxisLocation);", 
          "type": "InsertBefore", 
          "seed": "double currentItemMargin=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 104, 
          "faulty": "return this.standardDeviation;", 
          "type": "InsertBefore", 
          "seed": "double sumXX=0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return new Icon(){\n  public void paintIcon(  Component c,  Graphics g,  int x,  int y){\n    Graphics2D g2=(Graphics2D)g;\n    path.transform(AffineTransform.getTranslateInstance(x,y));\n    if (fillPaint != null) {\n      g2.setPaint(fillPaint);\n      g2.fill(path);\n    }\n    if (outlinePaint != null) {\n      g2.setPaint(outlinePaint);\n      g2.draw(path);\n    }\n    path.transform(AffineTransform.getTranslateInstance(-x,-y));\n  }\n  public int getIconWidth(){\n    return width;\n  }\n  public int getIconHeight(){\n    return height;\n  }\n}\n;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "InsertBefore", 
          "seed": "g2.setStroke(plot.getRangeGridlineStroke());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Replace", 
          "seed": "RectangleEdge edge=plot.getRangeAxisEdge();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Replace", 
          "seed": "RectangleEdge edge=plot.getRangeAxisEdge();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 126, 
          "faulty": "return getMeanValue(row,column);", 
          "type": "InsertBefore", 
          "seed": "double maxval=Double.NaN;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_603/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:45:50.304837172 -0500\n@@ -201,17 +201,12 @@\n             throw new IllegalArgumentException(\n                 \"Requires StatisticalCategoryDataset.\");\n         }\n-        StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n+        g2.setStroke(plot.getRangeGridlineStroke());\n+\t\tg2.setStroke(plot.getRangeGridlineStroke());\n+\t\tStatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n+        RectangleEdge edge = plot.getRangeAxisEdge();\n     }\n                 \n     /**\n@@ -239,21 +234,13 @@\n                                      \n         RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n         \n-        // BAR Y\n+        double currentItemMargin = 0.0;\n+\t\t// BAR Y\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                 dataArea, xAxisLocation);\n \n         int seriesCount = getRowCount();\n         int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_603/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:45:50.304837172 -0500\n@@ -101,7 +101,8 @@\n      * @return The standard deviation.\n      */\n     public Number getStandardDeviation() {\n-        return this.standardDeviation;\n+        double sumXX = 0;\n+\t\treturn this.standardDeviation;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_603/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:45:50.308837287 -0500\n@@ -107,9 +107,6 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getMean();\n-        }\n         return result;\n     }\n \n@@ -123,7 +120,8 @@\n      * @return The value.\n      */\n     public Number getValue(int row, int column) {\n-        return getMeanValue(row, column);\n+        double maxval = Double.NaN;\n+\t\treturn getMeanValue(row, column);\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 170, 
          "faulty": "MeanAndStandardDeviation masd=(MeanAndStandardDeviation)this.data.getObject(row,column);", 
          "type": "InsertBefore", 
          "seed": "double minRegularValue=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "Replace", 
          "seed": "double result=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 200, 
          "faulty": "if (!(data instanceof StatisticalCategoryDataset)) {\n  throw new IllegalArgumentException(\"Requires StatisticalCategoryDataset.\");\n}", 
          "type": "InsertBefore", 
          "seed": "double rectBreadth=state.getBarWidth();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 265, 
          "faulty": "if (uclip <= 0.0) {\n  if (value >= uclip) {\n    return;\n  }\n  base=uclip;\n  if (value <= lclip) {\n    value=lclip;\n  }\n}\n else if (lclip <= 0.0) {\n  if (value >= uclip) {\n    value=uclip;\n  }\n else {\n    if (value <= lclip) {\n      value=lclip;\n    }\n  }\n}\n else {\n  if (value <= lclip) {\n    return;\n  }\n  base=getLowerClip();\n  if (value >= uclip) {\n    value=uclip;\n  }\n}", 
          "type": "Delete", 
          "seed": "boolean inverted=rangeAxis.isInverted();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 260, 
          "faulty": "double value=meanValue.doubleValue();", 
          "type": "InsertBefore", 
          "seed": "Line2D line2=null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_142/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:41:33.533377232 -0500\n@@ -196,7 +196,8 @@\n                          int column,\n                          int pass) {\n \n-        // defensive check\n+        double rectBreadth = state.getBarWidth();\n+\t\t// defensive check\n         if (!(data instanceof StatisticalCategoryDataset)) {\n             throw new IllegalArgumentException(\n                 \"Requires StatisticalCategoryDataset.\");\n@@ -204,14 +205,6 @@\n         StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n     }\n                 \n     /**\n@@ -243,54 +236,17 @@\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                 dataArea, xAxisLocation);\n \n-        int seriesCount = getRowCount();\n+        double result = Double.NaN;\n         int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n-        double value = meanValue.doubleValue();\n+        Line2D line2 = null;\n+\t\tdouble value = meanValue.doubleValue();\n         double base = 0.0;\n         double lclip = getLowerClip();\n         double uclip = getUpperClip();\n \n-        if (uclip <= 0.0) {  // cases 1, 2, 3 and 4\n-            if (value >= uclip) {\n-                return; // bar is not visible\n-            }\n-            base = uclip;\n-            if (value <= lclip) {\n-                value = lclip;\n-            }\n-        }\n-        else if (lclip <= 0.0) { // cases 5, 6, 7 and 8\n-            if (value >= uclip) {\n-                value = uclip;\n-            }\n-            else {\n-                if (value <= lclip) {\n-                    value = lclip;\n-                }\n-            }\n-        }\n-        else { // cases 9, 10, 11 and 12\n-            if (value <= lclip) {\n-                return; // bar is not visible\n-            }\n-            base = getLowerClip();\n-            if (value >= uclip) {\n-               value = uclip;\n-            }\n-        }\n-\n         RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n         double transY1 = rangeAxis.valueToJava2D(base, dataArea, yAxisLocation);\n         double transY2 = rangeAxis.valueToJava2D(value, dataArea, \n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_142/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:41:33.533377232 -0500\n@@ -92,7 +92,9 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\tthis.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_142/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:41:33.537377348 -0500\n@@ -167,7 +167,8 @@\n      */\n     public Number getStdDevValue(int row, int column) {\n         Number result = null;\n-        MeanAndStandardDeviation masd \n+        double minRegularValue = Double.POSITIVE_INFINITY;\n+\t\tMeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n             result = masd.getStandardDeviation();\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 172, 
          "faulty": "if (masd != null) {\n  result=masd.getStandardDeviation();\n}", 
          "type": "Replace", 
          "seed": "double maxOutlier=Double.NEGATIVE_INFINITY;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 243, 
          "faulty": "double rectY=domainAxis.getCategoryStart(column,getColumnCount(),dataArea,xAxisLocation);", 
          "type": "InsertBefore", 
          "seed": "double y0=dataArea.getMaxY();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "Delete", 
          "seed": "this.minimumRangeValueIncStdDev=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 243, 
          "faulty": "double rectY=domainAxis.getCategoryStart(column,getColumnCount(),dataArea,xAxisLocation);", 
          "type": "InsertBefore", 
          "seed": "double currentItemMargin=0.0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_486/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:44:50.491098495 -0500\n@@ -204,14 +204,6 @@\n         StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n     }\n                 \n     /**\n@@ -239,7 +231,9 @@\n                                      \n         RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n         \n-        // BAR Y\n+        double y0 = dataArea.getMaxY();\n+\t\tdouble currentItemMargin = 0.0;\n+\t\t// BAR Y\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                 dataArea, xAxisLocation);\n \n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_486/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:44:50.495098612 -0500\n@@ -92,7 +92,8 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_486/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:44:50.495098612 -0500\n@@ -107,9 +107,6 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getMean();\n-        }\n         return result;\n     }\n \n@@ -169,9 +166,7 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getStandardDeviation();\n-        }\n+        double maxOutlier = Double.NEGATIVE_INFINITY;\n         return result;\n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_184/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:41:57.110061583 -0500\n@@ -204,14 +204,6 @@\n         StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n     }\n                 \n     /**\n@@ -245,15 +237,6 @@\n \n         int seriesCount = getRowCount();\n         int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_184/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:41:57.114061699 -0500\n@@ -92,7 +92,10 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_184/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:41:57.114061699 -0500\n@@ -377,9 +377,11 @@\n         Range result = null;\n         if (includeInterval) {\n             if (!Double.isNaN(this.minimumRangeValueIncStdDev) \n-                    && !Double.isNaN(this.maximumRangeValueIncStdDev))\n-            result = new Range(this.minimumRangeValueIncStdDev, \n-                    this.maximumRangeValueIncStdDev);\n+                    && !Double.isNaN(this.maximumRangeValueIncStdDev)) {\n+\t\t\t\tdouble sumX2 = 0.0;\n+\t\t\t\tresult = new Range(this.minimumRangeValueIncStdDev,\n+\t\t\t\t\t\tthis.maximumRangeValueIncStdDev);\n+\t\t\t}\n         }\n         else {\n             if (!Double.isNaN(this.minimumRangeValue) \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "Delete", 
          "seed": "this.minimumRangeValueIncStdDev=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 243, 
          "faulty": "double rectY=domainAxis.getCategoryStart(column,getColumnCount(),dataArea,xAxisLocation);", 
          "type": "InsertBefore", 
          "seed": "double currentItemMargin=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 104, 
          "faulty": "return this.standardDeviation;", 
          "type": "InsertBefore", 
          "seed": "double sumXX=0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return new Icon(){\n  public void paintIcon(  Component c,  Graphics g,  int x,  int y){\n    Graphics2D g2=(Graphics2D)g;\n    path.transform(AffineTransform.getTranslateInstance(x,y));\n    if (fillPaint != null) {\n      g2.setPaint(fillPaint);\n      g2.fill(path);\n    }\n    if (outlinePaint != null) {\n      g2.setPaint(outlinePaint);\n      g2.draw(path);\n    }\n    path.transform(AffineTransform.getTranslateInstance(-x,-y));\n  }\n  public int getIconWidth(){\n    return width;\n  }\n  public int getIconHeight(){\n    return height;\n  }\n}\n;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_535/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:45:14.311790928 -0500\n@@ -239,21 +239,13 @@\n                                      \n         RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n         \n-        // BAR Y\n+        double currentItemMargin = 0.0;\n+\t\t// BAR Y\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                 dataArea, xAxisLocation);\n \n         int seriesCount = getRowCount();\n         int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_535/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:45:14.311790928 -0500\n@@ -101,7 +101,8 @@\n      * @return The standard deviation.\n      */\n     public Number getStandardDeviation() {\n-        return this.standardDeviation;\n+        double sumXX = 0;\n+\t\treturn this.standardDeviation;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_535/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:45:14.315791043 -0500\n@@ -107,9 +107,6 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getMean();\n-        }\n         return result;\n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "InsertBefore", 
          "seed": "PlotOrientation orient=plot.getOrientation();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 379, 
          "faulty": "if (!Double.isNaN(this.minimumRangeValueIncStdDev) && !Double.isNaN(this.maximumRangeValueIncStdDev)) result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double x=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 111, 
          "faulty": "result=masd.getMean();", 
          "type": "Delete", 
          "seed": "double maxRegularValue=Double.NEGATIVE_INFINITY;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 261, 
          "faulty": "double base=0.0;", 
          "type": "InsertBefore", 
          "seed": "double xx0=domainAxis.getCategoryStart(column,getColumnCount(),dataArea,plot.getDomainAxisEdge());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 172, 
          "faulty": "if (masd != null) {\n  result=masd.getStandardDeviation();\n}", 
          "type": "Replace", 
          "seed": "double maxOutlier=Double.NEGATIVE_INFINITY;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 243, 
          "faulty": "double rectY=domainAxis.getCategoryStart(column,getColumnCount(),dataArea,xAxisLocation);", 
          "type": "InsertBefore", 
          "seed": "double y0=dataArea.getMaxY();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "Delete", 
          "seed": "this.minimumRangeValueIncStdDev=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 274, 
          "faulty": "if (lclip <= 0.0) {\n  if (value >= uclip) {\n    value=uclip;\n  }\n else {\n    if (value <= lclip) {\n      value=lclip;\n    }\n  }\n}\n else {\n  if (value <= lclip) {\n    return;\n  }\n  base=getLowerClip();\n  if (value >= uclip) {\n    value=uclip;\n  }\n}", 
          "type": "Delete", 
          "seed": "Comparable category=dataset.getColumnKey(column);"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 265, 
          "faulty": "if (uclip <= 0.0) {\n  if (value >= uclip) {\n    return;\n  }\n  base=uclip;\n  if (value <= lclip) {\n    value=lclip;\n  }\n}\n else if (lclip <= 0.0) {\n  if (value >= uclip) {\n    value=uclip;\n  }\n else {\n    if (value <= lclip) {\n      value=lclip;\n    }\n  }\n}\n else {\n  if (value <= lclip) {\n    return;\n  }\n  base=getLowerClip();\n  if (value >= uclip) {\n    value=uclip;\n  }\n}", 
          "type": "Delete", 
          "seed": "rectY=rectY + row * state.getBarWidth();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_467/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:44:39.314773614 -0500\n@@ -204,14 +204,7 @@\n         StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n+        PlotOrientation orient = plot.getOrientation();\n     }\n                 \n     /**\n@@ -239,7 +232,8 @@\n                                      \n         RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n         \n-        // BAR Y\n+        double y0 = dataArea.getMaxY();\n+\t\t// BAR Y\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                 dataArea, xAxisLocation);\n \n@@ -251,46 +245,18 @@\n             rectY = rectY + row * (state.getBarWidth() + seriesGap);\n         }\n         else {\n-            rectY = rectY + row * state.getBarWidth();\n         }\n \n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n         double value = meanValue.doubleValue();\n-        double base = 0.0;\n+        double xx0 = domainAxis.getCategoryStart(column, getColumnCount(),\n+\t\t\t\tdataArea, plot.getDomainAxisEdge());\n+\t\tdouble base = 0.0;\n         double lclip = getLowerClip();\n         double uclip = getUpperClip();\n \n-        if (uclip <= 0.0) {  // cases 1, 2, 3 and 4\n-            if (value >= uclip) {\n-                return; // bar is not visible\n-            }\n-            base = uclip;\n-            if (value <= lclip) {\n-                value = lclip;\n-            }\n-        }\n-        else if (lclip <= 0.0) { // cases 5, 6, 7 and 8\n-            if (value >= uclip) {\n-                value = uclip;\n-            }\n-            else {\n-                if (value <= lclip) {\n-                    value = lclip;\n-                }\n-            }\n-        }\n-        else { // cases 9, 10, 11 and 12\n-            if (value <= lclip) {\n-                return; // bar is not visible\n-            }\n-            base = getLowerClip();\n-            if (value >= uclip) {\n-               value = uclip;\n-            }\n-        }\n-\n         RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n         double transY1 = rangeAxis.valueToJava2D(base, dataArea, yAxisLocation);\n         double transY2 = rangeAxis.valueToJava2D(value, dataArea, \n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_467/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:44:39.314773614 -0500\n@@ -92,7 +92,8 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_467/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:44:39.318773729 -0500\n@@ -107,9 +107,6 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getMean();\n-        }\n         return result;\n     }\n \n@@ -169,9 +166,7 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getStandardDeviation();\n-        }\n+        double maxOutlier = Double.NEGATIVE_INFINITY;\n         return result;\n     }\n \n@@ -376,10 +371,13 @@\n     public Range getRangeBounds(boolean includeInterval) {\n         Range result = null;\n         if (includeInterval) {\n-            if (!Double.isNaN(this.minimumRangeValueIncStdDev) \n-                    && !Double.isNaN(this.maximumRangeValueIncStdDev))\n-            result = new Range(this.minimumRangeValueIncStdDev, \n-                    this.maximumRangeValueIncStdDev);\n+            double x = 0.0;\n+\t\t\tif (!Double.isNaN(this.minimumRangeValueIncStdDev) \n+                    && !Double.isNaN(this.maximumRangeValueIncStdDev)) {\n+\t\t\t\tdouble sumX2 = 0.0;\n+\t\t\t\tresult = new Range(this.minimumRangeValueIncStdDev,\n+\t\t\t\t\t\tthis.maximumRangeValueIncStdDev);\n+\t\t\t}\n         }\n         else {\n             if (!Double.isNaN(this.minimumRangeValue) \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 258, 
          "faulty": "Number meanValue=dataset.getMeanValue(row,column);", 
          "type": "InsertBefore", 
          "seed": "Line2D line2=null;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "Replace", 
          "seed": "double result=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "Replace", 
          "seed": "double result=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 107, 
          "faulty": "Number result=null;", 
          "type": "InsertBefore", 
          "seed": "this.maximumRangeValue=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 126, 
          "faulty": "return getMeanValue(row,column);", 
          "type": "InsertBefore", 
          "seed": "double sum=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 175, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "double total=0.0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_107/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:41:13.776803757 -0500\n@@ -204,14 +204,6 @@\n         StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n     }\n                 \n     /**\n@@ -243,18 +235,10 @@\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                 dataArea, xAxisLocation);\n \n-        int seriesCount = getRowCount();\n+        double result = Double.NaN;\n         int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n-        // BAR X\n+        Line2D line2 = null;\n+\t\t// BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n         double value = meanValue.doubleValue();\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_107/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:41:13.780803874 -0500\n@@ -92,7 +92,13 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_107/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:41:13.780803874 -0500\n@@ -104,7 +104,8 @@\n      * @return The mean value.\n      */\n     public Number getMeanValue(int row, int column) {\n-        Number result = null;\n+        this.maximumRangeValue = Double.NaN;\n+\t\tNumber result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n@@ -123,7 +124,8 @@\n      * @return The value.\n      */\n     public Number getValue(int row, int column) {\n-        return getMeanValue(row, column);\n+        double sum = 0.0;\n+\t\treturn getMeanValue(row, column);\n     }\n \n     /**\n@@ -172,7 +174,8 @@\n         if (masd != null) {\n             result = masd.getStandardDeviation();\n         }\n-        return result;\n+        double total = 0.0;\n+\t\treturn result;\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "Delete", 
          "seed": "this.minimumRangeValueIncStdDev=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "InsertBefore", 
          "seed": "g2.setStroke(plot.getRangeGridlineStroke());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "InsertBefore", 
          "seed": "g2.setStroke(plot.getRangeGridlineStroke());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return new Icon(){\n  public void paintIcon(  Component c,  Graphics g,  int x,  int y){\n    Graphics2D g2=(Graphics2D)g;\n    path.transform(AffineTransform.getTranslateInstance(x,y));\n    if (fillPaint != null) {\n      g2.setPaint(fillPaint);\n      g2.fill(path);\n    }\n    if (outlinePaint != null) {\n      g2.setPaint(outlinePaint);\n      g2.draw(path);\n    }\n    path.transform(AffineTransform.getTranslateInstance(-x,-y));\n  }\n  public int getIconWidth(){\n    return width;\n  }\n  public int getIconHeight(){\n    return height;\n  }\n}\n;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 263, 
          "faulty": "double uclip=getUpperClip();", 
          "type": "InsertBefore", 
          "seed": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 246, 
          "faulty": "return this.data.getRowKey(row);", 
          "type": "InsertBefore", 
          "seed": "double x=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 173, 
          "faulty": "result=masd.getStandardDeviation();", 
          "type": "Replace", 
          "seed": "result=masd.getMean();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 172, 
          "faulty": "if (masd != null) {\n  result=masd.getStandardDeviation();\n}", 
          "type": "Delete", 
          "seed": "if (masd != null) {\n  result=masd.getMean();\n}"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "double barW0=domainAxis.getCategoryStart(column,getColumnCount(),dataArea,plot.getDomainAxisEdge());"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_639/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:46:07.085324939 -0500\n@@ -201,7 +201,9 @@\n             throw new IllegalArgumentException(\n                 \"Requires StatisticalCategoryDataset.\");\n         }\n-        StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n+        g2.setStroke(plot.getRangeGridlineStroke());\n+\t\tg2.setStroke(plot.getRangeGridlineStroke());\n+\t\tStatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n         if (orientation == PlotOrientation.HORIZONTAL) {\n@@ -245,22 +247,20 @@\n \n         int seriesCount = getRowCount();\n         int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n         double value = meanValue.doubleValue();\n         double base = 0.0;\n         double lclip = getLowerClip();\n-        double uclip = getUpperClip();\n+        if (seriesCount > 1) {\n+\t\t\tdouble seriesGap = dataArea.getHeight() * getItemMargin()\n+\t\t\t\t\t/ (categoryCount * (seriesCount - 1));\n+\t\t\trectY = rectY + row * (state.getBarWidth() + seriesGap);\n+\t\t} else {\n+\t\t\trectY = rectY + row * state.getBarWidth();\n+\t\t}\n+\t\tdouble uclip = getUpperClip();\n \n         if (uclip <= 0.0) {  // cases 1, 2, 3 and 4\n             if (value >= uclip) {\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_639/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:46:07.085324939 -0500\n@@ -107,9 +107,6 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getMean();\n-        }\n         return result;\n     }\n \n@@ -169,9 +166,6 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getStandardDeviation();\n-        }\n         return result;\n     }\n \n@@ -243,7 +237,8 @@\n      * @return The row key.\n      */\n     public Comparable getRowKey(int row) {\n-        return this.data.getRowKey(row);\n+        double x = 0.0;\n+\t\treturn this.data.getRowKey(row);\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "Delete", 
          "seed": "this.minimumRangeValueIncStdDev=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Replace", 
          "seed": "double xx2=domainAxis.getCategoryEnd(column,getColumnCount(),dataArea,plot.getDomainAxisEdge());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "InsertBefore", 
          "seed": "g2.setStroke(plot.getRangeGridlineStroke());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 243, 
          "faulty": "double rectY=domainAxis.getCategoryStart(column,getColumnCount(),dataArea,xAxisLocation);", 
          "type": "InsertBefore", 
          "seed": "double currentItemMargin=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 104, 
          "faulty": "return this.standardDeviation;", 
          "type": "InsertBefore", 
          "seed": "double sumXX=0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "Delete", 
          "seed": "this.minimumRangeValueIncStdDev=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 246, 
          "faulty": "return this.data.getRowKey(row);", 
          "type": "InsertBefore", 
          "seed": "double x=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 173, 
          "faulty": "result=masd.getStandardDeviation();", 
          "type": "Replace", 
          "seed": "result=masd.getMean();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 172, 
          "faulty": "if (masd != null) {\n  result=masd.getStandardDeviation();\n}", 
          "type": "Delete", 
          "seed": "if (masd != null) {\n  result=masd.getMean();\n}"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 111, 
          "faulty": "result=masd.getMean();", 
          "type": "InsertBefore", 
          "seed": "return getMedianValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 215, 
          "faulty": "return this.data.getColumnKey(column);", 
          "type": "InsertBefore", 
          "seed": "fireDatasetChanged();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 247, 
          "faulty": "int categoryCount=getColumnCount();", 
          "type": "InsertBefore", 
          "seed": "double positiveBase=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 170, 
          "faulty": "MeanAndStandardDeviation masd=(MeanAndStandardDeviation)this.data.getObject(row,column);", 
          "type": "InsertBefore", 
          "seed": "double sumX=0.0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_629/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:46:02.281185295 -0500\n@@ -201,7 +201,8 @@\n             throw new IllegalArgumentException(\n                 \"Requires StatisticalCategoryDataset.\");\n         }\n-        StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n+        g2.setStroke(plot.getRangeGridlineStroke());\n+\t\tStatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n         if (orientation == PlotOrientation.HORIZONTAL) {\n@@ -239,20 +240,16 @@\n                                      \n         RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n         \n-        // BAR Y\n+        double currentItemMargin = 0.0;\n+\t\t// BAR Y\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                 dataArea, xAxisLocation);\n \n         int seriesCount = getRowCount();\n-        int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n+        double positiveBase = 0.0;\n+\t\tint categoryCount = getColumnCount();\n+        double xx2 = domainAxis.getCategoryEnd(column, getColumnCount(),\n+\t\t\t\tdataArea, plot.getDomainAxisEdge());\n \n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_629/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:46:02.285185410 -0500\n@@ -101,7 +101,8 @@\n      * @return The standard deviation.\n      */\n     public Number getStandardDeviation() {\n-        return this.standardDeviation;\n+        double sumXX = 0;\n+\t\treturn this.standardDeviation;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_629/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:46:02.285185410 -0500\n@@ -107,9 +107,6 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getMean();\n-        }\n         return result;\n     }\n \n@@ -167,11 +164,9 @@\n      */\n     public Number getStdDevValue(int row, int column) {\n         Number result = null;\n-        MeanAndStandardDeviation masd \n+        double sumX = 0.0;\n+\t\tMeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getStandardDeviation();\n-        }\n         return result;\n     }\n \n@@ -212,7 +207,8 @@\n      * @return The column key.\n      */\n     public Comparable getColumnKey(int column) {\n-        return this.data.getColumnKey(column);\n+        fireDatasetChanged();\n+\t\treturn this.data.getColumnKey(column);\n     }\n \n     /**\n@@ -243,7 +239,8 @@\n      * @return The row key.\n      */\n     public Comparable getRowKey(int row) {\n-        return this.data.getRowKey(row);\n+        double x = 0.0;\n+\t\treturn this.data.getRowKey(row);\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 175, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "double m=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 389, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "double minval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Replace", 
          "seed": "setIncludeBaseInRange(false);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 172, 
          "faulty": "if (masd != null) {\n  result=masd.getStandardDeviation();\n}", 
          "type": "InsertBefore", 
          "seed": "double sumX=0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 274, 
          "faulty": "if (lclip <= 0.0) {\n  if (value >= uclip) {\n    value=uclip;\n  }\n else {\n    if (value <= lclip) {\n      value=lclip;\n    }\n  }\n}\n else {\n  if (value <= lclip) {\n    return;\n  }\n  base=getLowerClip();\n  if (value >= uclip) {\n    value=uclip;\n  }\n}", 
          "type": "Delete", 
          "seed": "double yy2=0.0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_372/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:43:42.913134050 -0500\n@@ -204,14 +204,7 @@\n         StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n+        setIncludeBaseInRange(false);\n     }\n                 \n     /**\n@@ -270,26 +263,8 @@\n             if (value <= lclip) {\n                 value = lclip;\n             }\n-        }\n-        else if (lclip <= 0.0) { // cases 5, 6, 7 and 8\n-            if (value >= uclip) {\n-                value = uclip;\n-            }\n-            else {\n-                if (value <= lclip) {\n-                    value = lclip;\n-                }\n-            }\n-        }\n-        else { // cases 9, 10, 11 and 12\n-            if (value <= lclip) {\n-                return; // bar is not visible\n-            }\n-            base = getLowerClip();\n-            if (value >= uclip) {\n-               value = uclip;\n-            }\n-        }\n+        } else\n+\t\t\t;\n \n         RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n         double transY1 = rangeAxis.valueToJava2D(base, dataArea, yAxisLocation);\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_372/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:43:42.913134050 -0500\n@@ -92,7 +92,8 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_372/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:43:42.913134050 -0500\n@@ -169,10 +169,12 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n+        double sumX = 0;\n+\t\tif (masd != null) {\n             result = masd.getStandardDeviation();\n         }\n-        return result;\n+        double m = 0.0;\n+\t\treturn result;\n     }\n \n     /**\n@@ -386,7 +388,8 @@\n                     && !Double.isNaN(this.maximumRangeValue))\n             result = new Range(this.minimumRangeValue, this.maximumRangeValue);            \n         }\n-        return result;\n+        double minval = Double.NaN;\n+\t\treturn result;\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "Replace", 
          "seed": "double result=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 107, 
          "faulty": "Number result=null;", 
          "type": "InsertBefore", 
          "seed": "this.maximumRangeValue=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "Replace", 
          "seed": "double result=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "Replace", 
          "seed": "double result=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 107, 
          "faulty": "Number result=null;", 
          "type": "InsertBefore", 
          "seed": "this.maximumRangeValue=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 169, 
          "faulty": "Number result=null;", 
          "type": "InsertBefore", 
          "seed": "double sumX=0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 246, 
          "faulty": "return this.data.getRowKey(row);", 
          "type": "InsertBefore", 
          "seed": "this.minimumRangeValue=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "Delete", 
          "seed": "GanttCategoryDataset gcd=(GanttCategoryDataset)dataset;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 389, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "double sumX=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_158/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:41:42.889648814 -0500\n@@ -204,14 +204,6 @@\n         StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n     }\n                 \n     /**\n@@ -243,17 +235,7 @@\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                 dataArea, xAxisLocation);\n \n-        int seriesCount = getRowCount();\n         int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_158/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:41:42.889648814 -0500\n@@ -92,7 +92,10 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_158/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:41:42.893648930 -0500\n@@ -104,7 +104,9 @@\n      * @return The mean value.\n      */\n     public Number getMeanValue(int row, int column) {\n-        Number result = null;\n+        this.maximumRangeValue = Double.NaN;\n+\t\tthis.maximumRangeValue = Double.NaN;\n+\t\tNumber result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n@@ -166,7 +168,8 @@\n      * @return The standard deviation.\n      */\n     public Number getStdDevValue(int row, int column) {\n-        Number result = null;\n+        double sumX = 0;\n+\t\tNumber result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n@@ -243,7 +246,8 @@\n      * @return The row key.\n      */\n     public Comparable getRowKey(int row) {\n-        return this.data.getRowKey(row);\n+        this.minimumRangeValue = Double.NaN;\n+\t\treturn this.data.getRowKey(row);\n     }\n \n     /**\n@@ -386,7 +390,8 @@\n                     && !Double.isNaN(this.maximumRangeValue))\n             result = new Range(this.minimumRangeValue, this.maximumRangeValue);            \n         }\n-        return result;\n+        double sumX = 0;\n+\t\treturn result;\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 169, 
          "faulty": "Number result=null;", 
          "type": "InsertBefore", 
          "seed": "double sumX=0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 246, 
          "faulty": "return this.data.getRowKey(row);", 
          "type": "InsertBefore", 
          "seed": "this.minimumRangeValue=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 265, 
          "faulty": "if (uclip <= 0.0) {\n  if (value >= uclip) {\n    return;\n  }\n  base=uclip;\n  if (value <= lclip) {\n    value=lclip;\n  }\n}\n else if (lclip <= 0.0) {\n  if (value >= uclip) {\n    value=uclip;\n  }\n else {\n    if (value <= lclip) {\n      value=lclip;\n    }\n  }\n}\n else {\n  if (value <= lclip) {\n    return;\n  }\n  base=getLowerClip();\n  if (value >= uclip) {\n    value=uclip;\n  }\n}", 
          "type": "Replace", 
          "seed": "double previous=state.getSeriesRunningTotal();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 200, 
          "faulty": "if (!(data instanceof StatisticalCategoryDataset)) {\n  throw new IllegalArgumentException(\"Requires StatisticalCategoryDataset.\");\n}", 
          "type": "InsertBefore", 
          "seed": "plot.drawBackground(g2,dataArea);"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 200, 
          "faulty": "if (!(data instanceof StatisticalCategoryDataset)) {\n  throw new IllegalArgumentException(\"Requires StatisticalCategoryDataset.\");\n}", 
          "type": "Delete", 
          "seed": "Paint outlinePaint=plot.getOutlinePaint();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_130/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:41:27.117190989 -0500\n@@ -196,22 +196,10 @@\n                          int column,\n                          int pass) {\n \n-        // defensive check\n-        if (!(data instanceof StatisticalCategoryDataset)) {\n-            throw new IllegalArgumentException(\n-                \"Requires StatisticalCategoryDataset.\");\n-        }\n-        StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n+        plot.drawBackground(g2, dataArea);\n+\t\tStatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n     }\n                 \n     /**\n@@ -262,34 +250,7 @@\n         double lclip = getLowerClip();\n         double uclip = getUpperClip();\n \n-        if (uclip <= 0.0) {  // cases 1, 2, 3 and 4\n-            if (value >= uclip) {\n-                return; // bar is not visible\n-            }\n-            base = uclip;\n-            if (value <= lclip) {\n-                value = lclip;\n-            }\n-        }\n-        else if (lclip <= 0.0) { // cases 5, 6, 7 and 8\n-            if (value >= uclip) {\n-                value = uclip;\n-            }\n-            else {\n-                if (value <= lclip) {\n-                    value = lclip;\n-                }\n-            }\n-        }\n-        else { // cases 9, 10, 11 and 12\n-            if (value <= lclip) {\n-                return; // bar is not visible\n-            }\n-            base = getLowerClip();\n-            if (value >= uclip) {\n-               value = uclip;\n-            }\n-        }\n+        double previous = state.getSeriesRunningTotal();\n \n         RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n         double transY1 = rangeAxis.valueToJava2D(base, dataArea, yAxisLocation);\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_130/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:41:27.121191106 -0500\n@@ -92,7 +92,9 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\tthis.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_130/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:41:27.121191106 -0500\n@@ -166,7 +166,8 @@\n      * @return The standard deviation.\n      */\n     public Number getStdDevValue(int row, int column) {\n-        Number result = null;\n+        double sumX = 0;\n+\t\tNumber result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n@@ -243,7 +244,8 @@\n      * @return The row key.\n      */\n     public Comparable getRowKey(int row) {\n-        return this.data.getRowKey(row);\n+        this.minimumRangeValue = Double.NaN;\n+\t\treturn this.data.getRowKey(row);\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "Delete", 
          "seed": "this.minimumRangeValueIncStdDev=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 111, 
          "faulty": "result=masd.getMean();", 
          "type": "InsertBefore", 
          "seed": "result=masd.getStandardDeviation();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Replace", 
          "seed": "double xx2=domainAxis.getCategoryEnd(column,getColumnCount(),dataArea,plot.getDomainAxisEdge());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "InsertBefore", 
          "seed": "g2.setStroke(plot.getRangeGridlineStroke());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 243, 
          "faulty": "double rectY=domainAxis.getCategoryStart(column,getColumnCount(),dataArea,xAxisLocation);", 
          "type": "InsertBefore", 
          "seed": "double currentItemMargin=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 104, 
          "faulty": "return this.standardDeviation;", 
          "type": "InsertBefore", 
          "seed": "double sumXX=0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return new Icon(){\n  public void paintIcon(  Component c,  Graphics g,  int x,  int y){\n    Graphics2D g2=(Graphics2D)g;\n    path.transform(AffineTransform.getTranslateInstance(x,y));\n    if (fillPaint != null) {\n      g2.setPaint(fillPaint);\n      g2.fill(path);\n    }\n    if (outlinePaint != null) {\n      g2.setPaint(outlinePaint);\n      g2.draw(path);\n    }\n    path.transform(AffineTransform.getTranslateInstance(-x,-y));\n  }\n  public int getIconWidth(){\n    return width;\n  }\n  public int getIconHeight(){\n    return height;\n  }\n}\n;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "InsertBefore", 
          "seed": "g2.setStroke(plot.getRangeGridlineStroke());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Replace", 
          "seed": "RectangleEdge edge=plot.getRangeAxisEdge();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Replace", 
          "seed": "RectangleEdge edge=plot.getRangeAxisEdge();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Replace", 
          "seed": "double base=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 169, 
          "faulty": "Number result=null;", 
          "type": "InsertBefore", 
          "seed": "int count=0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 243, 
          "faulty": "double rectY=domainAxis.getCategoryStart(column,getColumnCount(),dataArea,xAxisLocation);", 
          "type": "InsertBefore", 
          "seed": "g2.setStroke(getItemOutlineStroke(row,column));"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 246, 
          "faulty": "return this.data.getRowKey(row);", 
          "type": "InsertBefore", 
          "seed": "double x=0.0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_594/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:45:45.536698573 -0500\n@@ -201,17 +201,12 @@\n             throw new IllegalArgumentException(\n                 \"Requires StatisticalCategoryDataset.\");\n         }\n-        StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n+        g2.setStroke(plot.getRangeGridlineStroke());\n+\t\tg2.setStroke(plot.getRangeGridlineStroke());\n+\t\tStatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n+        double base = 0.0;\n     }\n                 \n     /**\n@@ -239,21 +234,14 @@\n                                      \n         RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n         \n-        // BAR Y\n+        double currentItemMargin = 0.0;\n+\t\tg2.setStroke(getItemOutlineStroke(row, column));\n+\t\t// BAR Y\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                 dataArea, xAxisLocation);\n \n         int seriesCount = getRowCount();\n         int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_594/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:45:45.540698690 -0500\n@@ -101,7 +101,8 @@\n      * @return The standard deviation.\n      */\n     public Number getStandardDeviation() {\n-        return this.standardDeviation;\n+        double sumXX = 0;\n+\t\treturn this.standardDeviation;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_594/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:45:45.540698690 -0500\n@@ -107,9 +107,6 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getMean();\n-        }\n         return result;\n     }\n \n@@ -166,7 +163,8 @@\n      * @return The standard deviation.\n      */\n     public Number getStdDevValue(int row, int column) {\n-        Number result = null;\n+        int count = 0;\n+\t\tNumber result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n@@ -243,7 +241,8 @@\n      * @return The row key.\n      */\n     public Comparable getRowKey(int row) {\n-        return this.data.getRowKey(row);\n+        double x = 0.0;\n+\t\treturn this.data.getRowKey(row);\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "Replace", 
          "seed": "double result=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 107, 
          "faulty": "Number result=null;", 
          "type": "InsertBefore", 
          "seed": "this.maximumRangeValue=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 377, 
          "faulty": "Range result=null;", 
          "type": "InsertBefore", 
          "seed": "double sumXY=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "double itemMargin=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "int itemCount=dataset.getColumnCount();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 265, 
          "faulty": "if (uclip <= 0.0) {\n  if (value >= uclip) {\n    return;\n  }\n  base=uclip;\n  if (value <= lclip) {\n    value=lclip;\n  }\n}\n else if (lclip <= 0.0) {\n  if (value >= uclip) {\n    value=uclip;\n  }\n else {\n    if (value <= lclip) {\n      value=lclip;\n    }\n  }\n}\n else {\n  if (value <= lclip) {\n    return;\n  }\n  base=getLowerClip();\n  if (value >= uclip) {\n    value=uclip;\n  }\n}", 
          "type": "Delete", 
          "seed": "this.errorIndicatorPaint=Color.gray;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_65/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:40:50.244120666 -0500\n@@ -204,14 +204,6 @@\n         StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n     }\n                 \n     /**\n@@ -243,17 +235,8 @@\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                 dataArea, xAxisLocation);\n \n-        int seriesCount = getRowCount();\n+        double result = Double.NaN;\n         int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n@@ -262,35 +245,6 @@\n         double lclip = getLowerClip();\n         double uclip = getUpperClip();\n \n-        if (uclip <= 0.0) {  // cases 1, 2, 3 and 4\n-            if (value >= uclip) {\n-                return; // bar is not visible\n-            }\n-            base = uclip;\n-            if (value <= lclip) {\n-                value = lclip;\n-            }\n-        }\n-        else if (lclip <= 0.0) { // cases 5, 6, 7 and 8\n-            if (value >= uclip) {\n-                value = uclip;\n-            }\n-            else {\n-                if (value <= lclip) {\n-                    value = lclip;\n-                }\n-            }\n-        }\n-        else { // cases 9, 10, 11 and 12\n-            if (value <= lclip) {\n-                return; // bar is not visible\n-            }\n-            base = getLowerClip();\n-            if (value >= uclip) {\n-               value = uclip;\n-            }\n-        }\n-\n         RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n         double transY1 = rangeAxis.valueToJava2D(base, dataArea, yAxisLocation);\n         double transY2 = rangeAxis.valueToJava2D(value, dataArea, \n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_65/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:40:50.248120782 -0500\n@@ -92,7 +92,10 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_65/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:40:50.248120782 -0500\n@@ -104,7 +104,8 @@\n      * @return The mean value.\n      */\n     public Number getMeanValue(int row, int column) {\n-        Number result = null;\n+        this.maximumRangeValue = Double.NaN;\n+\t\tNumber result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n@@ -374,7 +375,8 @@\n      * @return The range.\n      */\n     public Range getRangeBounds(boolean includeInterval) {\n-        Range result = null;\n+        double sumXY = 0.0;\n+\t\tRange result = null;\n         if (includeInterval) {\n             if (!Double.isNaN(this.minimumRangeValueIncStdDev) \n                     && !Double.isNaN(this.maximumRangeValueIncStdDev))\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "Delete", 
          "seed": "this.minimumRangeValueIncStdDev=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "InsertBefore", 
          "seed": "g2.setStroke(plot.getRangeGridlineStroke());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "InsertBefore", 
          "seed": "g2.setStroke(plot.getRangeGridlineStroke());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 243, 
          "faulty": "double rectY=domainAxis.getCategoryStart(column,getColumnCount(),dataArea,xAxisLocation);", 
          "type": "InsertBefore", 
          "seed": "double currentItemMargin=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 104, 
          "faulty": "return this.standardDeviation;", 
          "type": "InsertBefore", 
          "seed": "double sumXX=0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return new Icon(){\n  public void paintIcon(  Component c,  Graphics g,  int x,  int y){\n    Graphics2D g2=(Graphics2D)g;\n    path.transform(AffineTransform.getTranslateInstance(x,y));\n    if (fillPaint != null) {\n      g2.setPaint(fillPaint);\n      g2.fill(path);\n    }\n    if (outlinePaint != null) {\n      g2.setPaint(outlinePaint);\n      g2.draw(path);\n    }\n    path.transform(AffineTransform.getTranslateInstance(-x,-y));\n  }\n  public int getIconWidth(){\n    return width;\n  }\n  public int getIconHeight(){\n    return height;\n  }\n}\n;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 263, 
          "faulty": "double uclip=getUpperClip();", 
          "type": "InsertBefore", 
          "seed": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 126, 
          "faulty": "return getMeanValue(row,column);", 
          "type": "InsertBefore", 
          "seed": "double maxval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "InsertBefore", 
          "seed": "setPositiveItemLabelPositionFallback(null);"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "InsertBefore", 
          "seed": "float x3=(float)dataArea.getMaxX();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "boolean inverted=rangeAxis.isInverted();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "InsertBefore", 
          "seed": "return;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 265, 
          "faulty": "if (uclip <= 0.0) {\n  if (value >= uclip) {\n    return;\n  }\n  base=uclip;\n  if (value <= lclip) {\n    value=lclip;\n  }\n}\n else if (lclip <= 0.0) {\n  if (value >= uclip) {\n    value=uclip;\n  }\n else {\n    if (value <= lclip) {\n      value=lclip;\n    }\n  }\n}\n else {\n  if (value <= lclip) {\n    return;\n  }\n  base=getLowerClip();\n  if (value >= uclip) {\n    value=uclip;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "Number previousValue=dataset.getValue(row,column - 1);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 246, 
          "faulty": "return this.data.getRowKey(row);", 
          "type": "InsertBefore", 
          "seed": "this.minimumRangeValue=Double.NaN;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_588/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:45:41.932593809 -0500\n@@ -201,17 +201,12 @@\n             throw new IllegalArgumentException(\n                 \"Requires StatisticalCategoryDataset.\");\n         }\n-        StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n+        g2.setStroke(plot.getRangeGridlineStroke());\n+\t\tg2.setStroke(plot.getRangeGridlineStroke());\n+\t\tStatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n+        setPositiveItemLabelPositionFallback(null);\n     }\n                 \n     /**\n@@ -239,30 +234,31 @@\n                                      \n         RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n         \n-        // BAR Y\n+        double currentItemMargin = 0.0;\n+\t\t// BAR Y\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                 dataArea, xAxisLocation);\n \n-        int seriesCount = getRowCount();\n+        float x3 = (float) dataArea.getMaxX();\n+\t\tint seriesCount = getRowCount();\n         int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n         double value = meanValue.doubleValue();\n         double base = 0.0;\n         double lclip = getLowerClip();\n-        double uclip = getUpperClip();\n+        if (seriesCount > 1) {\n+\t\t\tdouble seriesGap = dataArea.getHeight() * getItemMargin()\n+\t\t\t\t\t/ (categoryCount * (seriesCount - 1));\n+\t\t\trectY = rectY + row * (state.getBarWidth() + seriesGap);\n+\t\t} else {\n+\t\t\trectY = rectY + row * state.getBarWidth();\n+\t\t}\n+\t\tdouble uclip = getUpperClip();\n \n-        if (uclip <= 0.0) {  // cases 1, 2, 3 and 4\n+        Number previousValue = dataset.getValue(row, column - 1);\n+\t\tif (uclip <= 0.0) {  // cases 1, 2, 3 and 4\n             if (value >= uclip) {\n                 return; // bar is not visible\n             }\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_588/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:45:41.932593809 -0500\n@@ -101,7 +101,8 @@\n      * @return The standard deviation.\n      */\n     public Number getStandardDeviation() {\n-        return this.standardDeviation;\n+        double sumXX = 0;\n+\t\treturn this.standardDeviation;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_588/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:45:41.936593926 -0500\n@@ -107,9 +107,6 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getMean();\n-        }\n         return result;\n     }\n \n@@ -123,7 +120,8 @@\n      * @return The value.\n      */\n     public Number getValue(int row, int column) {\n-        return getMeanValue(row, column);\n+        double maxval = Double.NaN;\n+\t\treturn getMeanValue(row, column);\n     }\n \n     /**\n@@ -243,7 +241,8 @@\n      * @return The row key.\n      */\n     public Comparable getRowKey(int row) {\n-        return this.data.getRowKey(row);\n+        this.minimumRangeValue = Double.NaN;\n+\t\treturn this.data.getRowKey(row);\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 273, 
          "faulty": "return this.data.getColumnCount();", 
          "type": "InsertBefore", 
          "seed": "List result=null;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 126, 
          "faulty": "return getMeanValue(row,column);", 
          "type": "InsertBefore", 
          "seed": "double minval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "Replace", 
          "seed": "double sum=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "Replace", 
          "seed": "double result=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 377, 
          "faulty": "Range result=null;", 
          "type": "Replace", 
          "seed": "Range result=null;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 172, 
          "faulty": "if (masd != null) {\n  result=masd.getStandardDeviation();\n}", 
          "type": "Replace", 
          "seed": "double sum=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "Delete", 
          "seed": "setMinimumBarLength(1.0);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 170, 
          "faulty": "MeanAndStandardDeviation masd=(MeanAndStandardDeviation)this.data.getObject(row,column);", 
          "type": "Delete", 
          "seed": "SimpleHistogramDataset clone=(SimpleHistogramDataset)super.clone();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_286/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:42:54.279720986 -0500\n@@ -201,17 +201,7 @@\n             throw new IllegalArgumentException(\n                 \"Requires StatisticalCategoryDataset.\");\n         }\n-        StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n-\n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n     }\n                 \n     /**\n@@ -243,17 +233,8 @@\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                 dataArea, xAxisLocation);\n \n-        int seriesCount = getRowCount();\n+        double result = Double.NaN;\n         int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_286/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:42:54.279720986 -0500\n@@ -92,7 +92,8 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_286/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:42:54.283721102 -0500\n@@ -107,9 +107,7 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getMean();\n-        }\n+        double sum = 0.0;\n         return result;\n     }\n \n@@ -123,7 +121,8 @@\n      * @return The value.\n      */\n     public Number getValue(int row, int column) {\n-        return getMeanValue(row, column);\n+        double minval = Double.NaN;\n+\t\treturn getMeanValue(row, column);\n     }\n \n     /**\n@@ -167,11 +166,7 @@\n      */\n     public Number getStdDevValue(int row, int column) {\n         Number result = null;\n-        MeanAndStandardDeviation masd \n-            = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getStandardDeviation();\n-        }\n+        double sum = 0.0;\n         return result;\n     }\n \n@@ -270,7 +265,8 @@\n      * @return The column count.\n      */\n     public int getColumnCount() {\n-        return this.data.getColumnCount();\n+        List result = null;\n+\t\treturn this.data.getColumnCount();\n     }\n \n     /**\n@@ -377,9 +373,11 @@\n         Range result = null;\n         if (includeInterval) {\n             if (!Double.isNaN(this.minimumRangeValueIncStdDev) \n-                    && !Double.isNaN(this.maximumRangeValueIncStdDev))\n-            result = new Range(this.minimumRangeValueIncStdDev, \n-                    this.maximumRangeValueIncStdDev);\n+                    && !Double.isNaN(this.maximumRangeValueIncStdDev)) {\n+\t\t\t\tdouble sumX2 = 0.0;\n+\t\t\t\tresult = new Range(this.minimumRangeValueIncStdDev,\n+\t\t\t\t\t\tthis.maximumRangeValueIncStdDev);\n+\t\t\t}\n         }\n         else {\n             if (!Double.isNaN(this.minimumRangeValue) \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "Replace", 
          "seed": "double result=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 273, 
          "faulty": "return this.data.getColumnCount();", 
          "type": "InsertBefore", 
          "seed": "List result=null;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 126, 
          "faulty": "return getMeanValue(row,column);", 
          "type": "InsertBefore", 
          "seed": "double minval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "int count=dataset.getColumnCount();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 273, 
          "faulty": "return this.data.getColumnCount();", 
          "type": "InsertBefore", 
          "seed": "double sumXX=0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 247, 
          "faulty": "int categoryCount=getColumnCount();", 
          "type": "Replace", 
          "seed": "PlotOrientation orient=plot.getOrientation();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "Replace", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "int seriesCount=getRowCount();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 377, 
          "faulty": "Range result=null;", 
          "type": "Replace", 
          "seed": "Range result=null;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "InsertBefore", 
          "seed": "CategoryItemLabelGenerator generator=getItemLabelGenerator(row,column);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 104, 
          "faulty": "return this.standardDeviation;", 
          "type": "InsertBefore", 
          "seed": "double maxval=Double.NaN;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_271/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:42:43.515408546 -0500\n@@ -201,17 +201,11 @@\n             throw new IllegalArgumentException(\n                 \"Requires StatisticalCategoryDataset.\");\n         }\n-        StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n+        CategoryItemLabelGenerator generator = getItemLabelGenerator(row,\n+\t\t\t\tcolumn);\n+\t\tStatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n     }\n                 \n     /**\n@@ -243,17 +237,8 @@\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                 dataArea, xAxisLocation);\n \n-        int seriesCount = getRowCount();\n-        int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n+        Number dataValue = dataset.getValue(row, column);\n+        PlotOrientation orient = plot.getOrientation();\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_271/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:42:43.519408662 -0500\n@@ -92,7 +92,12 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n@@ -101,7 +106,8 @@\n      * @return The standard deviation.\n      */\n     public Number getStandardDeviation() {\n-        return this.standardDeviation;\n+        double maxval = Double.NaN;\n+\t\treturn this.standardDeviation;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_271/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:42:43.519408662 -0500\n@@ -123,7 +123,8 @@\n      * @return The value.\n      */\n     public Number getValue(int row, int column) {\n-        return getMeanValue(row, column);\n+        double minval = Double.NaN;\n+\t\treturn getMeanValue(row, column);\n     }\n \n     /**\n@@ -270,7 +271,9 @@\n      * @return The column count.\n      */\n     public int getColumnCount() {\n-        return this.data.getColumnCount();\n+        List result = null;\n+\t\tdouble sumXX = 0;\n+\t\treturn this.data.getColumnCount();\n     }\n \n     /**\n@@ -377,9 +380,11 @@\n         Range result = null;\n         if (includeInterval) {\n             if (!Double.isNaN(this.minimumRangeValueIncStdDev) \n-                    && !Double.isNaN(this.maximumRangeValueIncStdDev))\n-            result = new Range(this.minimumRangeValueIncStdDev, \n-                    this.maximumRangeValueIncStdDev);\n+                    && !Double.isNaN(this.maximumRangeValueIncStdDev)) {\n+\t\t\t\tdouble sumX2 = 0.0;\n+\t\t\t\tresult = new Range(this.minimumRangeValueIncStdDev,\n+\t\t\t\t\t\tthis.maximumRangeValueIncStdDev);\n+\t\t\t}\n         }\n         else {\n             if (!Double.isNaN(this.minimumRangeValue) \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "Delete", 
          "seed": "this.minimumRangeValueIncStdDev=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "InsertBefore", 
          "seed": "g2.setStroke(plot.getRangeGridlineStroke());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "InsertBefore", 
          "seed": "g2.setStroke(plot.getRangeGridlineStroke());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return new Icon(){\n  public void paintIcon(  Component c,  Graphics g,  int x,  int y){\n    Graphics2D g2=(Graphics2D)g;\n    path.transform(AffineTransform.getTranslateInstance(x,y));\n    if (fillPaint != null) {\n      g2.setPaint(fillPaint);\n      g2.fill(path);\n    }\n    if (outlinePaint != null) {\n      g2.setPaint(outlinePaint);\n      g2.draw(path);\n    }\n    path.transform(AffineTransform.getTranslateInstance(-x,-y));\n  }\n  public int getIconWidth(){\n    return width;\n  }\n  public int getIconHeight(){\n    return height;\n  }\n}\n;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 263, 
          "faulty": "double uclip=getUpperClip();", 
          "type": "InsertBefore", 
          "seed": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 104, 
          "faulty": "return this.standardDeviation;", 
          "type": "InsertBefore", 
          "seed": "double sumXX=0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return new Icon(){\n  public void paintIcon(  Component c,  Graphics g,  int x,  int y){\n    Graphics2D g2=(Graphics2D)g;\n    path.transform(AffineTransform.getTranslateInstance(x,y));\n    if (fillPaint != null) {\n      g2.setPaint(fillPaint);\n      g2.fill(path);\n    }\n    if (outlinePaint != null) {\n      g2.setPaint(outlinePaint);\n      g2.draw(path);\n    }\n    path.transform(AffineTransform.getTranslateInstance(-x,-y));\n  }\n  public int getIconWidth(){\n    return width;\n  }\n  public int getIconHeight(){\n    return height;\n  }\n}\n;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "InsertBefore", 
          "seed": "g2.setStroke(plot.getRangeGridlineStroke());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Replace", 
          "seed": "RectangleEdge edge=plot.getRangeAxisEdge();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Replace", 
          "seed": "RectangleEdge edge=plot.getRangeAxisEdge();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 126, 
          "faulty": "return getMeanValue(row,column);", 
          "type": "InsertBefore", 
          "seed": "double maxval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 173, 
          "faulty": "result=masd.getStandardDeviation();", 
          "type": "Replace", 
          "seed": "int count=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_612/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:45:54.444957516 -0500\n@@ -201,17 +201,13 @@\n             throw new IllegalArgumentException(\n                 \"Requires StatisticalCategoryDataset.\");\n         }\n-        StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n+        g2.setStroke(plot.getRangeGridlineStroke());\n+\t\tg2.setStroke(plot.getRangeGridlineStroke());\n+\t\tg2.setStroke(plot.getRangeGridlineStroke());\n+\t\tStatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n+        RectangleEdge edge = plot.getRangeAxisEdge();\n     }\n                 \n     /**\n@@ -245,22 +241,20 @@\n \n         int seriesCount = getRowCount();\n         int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n         double value = meanValue.doubleValue();\n         double base = 0.0;\n         double lclip = getLowerClip();\n-        double uclip = getUpperClip();\n+        if (seriesCount > 1) {\n+\t\t\tdouble seriesGap = dataArea.getHeight() * getItemMargin()\n+\t\t\t\t\t/ (categoryCount * (seriesCount - 1));\n+\t\t\trectY = rectY + row * (state.getBarWidth() + seriesGap);\n+\t\t} else {\n+\t\t\trectY = rectY + row * state.getBarWidth();\n+\t\t}\n+\t\tdouble uclip = getUpperClip();\n \n         if (uclip <= 0.0) {  // cases 1, 2, 3 and 4\n             if (value >= uclip) {\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_612/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:45:54.444957516 -0500\n@@ -101,7 +101,8 @@\n      * @return The standard deviation.\n      */\n     public Number getStandardDeviation() {\n-        return this.standardDeviation;\n+        double sumXX = 0;\n+\t\treturn this.standardDeviation;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_612/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:45:54.448957631 -0500\n@@ -107,9 +107,6 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getMean();\n-        }\n         return result;\n     }\n \n@@ -123,7 +120,8 @@\n      * @return The value.\n      */\n     public Number getValue(int row, int column) {\n-        return getMeanValue(row, column);\n+        double maxval = Double.NaN;\n+\t\treturn getMeanValue(row, column);\n     }\n \n     /**\n@@ -170,7 +168,7 @@\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n-            result = masd.getStandardDeviation();\n+            int count = 0;\n         }\n         return result;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "Delete", 
          "seed": "this.minimumRangeValueIncStdDev=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Replace", 
          "seed": "double xx2=domainAxis.getCategoryEnd(column,getColumnCount(),dataArea,plot.getDomainAxisEdge());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "InsertBefore", 
          "seed": "g2.setStroke(plot.getRangeGridlineStroke());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Replace", 
          "seed": "RectangleEdge edge=plot.getRangeAxisEdge();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_562/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:45:28.824212776 -0500\n@@ -201,17 +201,11 @@\n             throw new IllegalArgumentException(\n                 \"Requires StatisticalCategoryDataset.\");\n         }\n-        StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n+        g2.setStroke(plot.getRangeGridlineStroke());\n+\t\tStatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n+        RectangleEdge edge = plot.getRangeAxisEdge();\n     }\n                 \n     /**\n@@ -245,14 +239,8 @@\n \n         int seriesCount = getRowCount();\n         int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n+        double xx2 = domainAxis.getCategoryEnd(column, getColumnCount(),\n+\t\t\t\tdataArea, plot.getDomainAxisEdge());\n \n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_562/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:45:28.824212776 -0500\n@@ -107,9 +107,6 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getMean();\n-        }\n         return result;\n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "Delete", 
          "seed": "this.minimumRangeValueIncStdDev=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 111, 
          "faulty": "result=masd.getMean();", 
          "type": "InsertBefore", 
          "seed": "result=masd.getStandardDeviation();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Replace", 
          "seed": "double xx2=domainAxis.getCategoryEnd(column,getColumnCount(),dataArea,plot.getDomainAxisEdge());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "InsertBefore", 
          "seed": "g2.setStroke(plot.getRangeGridlineStroke());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 243, 
          "faulty": "double rectY=domainAxis.getCategoryStart(column,getColumnCount(),dataArea,xAxisLocation);", 
          "type": "InsertBefore", 
          "seed": "double currentItemMargin=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 104, 
          "faulty": "return this.standardDeviation;", 
          "type": "InsertBefore", 
          "seed": "double sumXX=0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return new Icon(){\n  public void paintIcon(  Component c,  Graphics g,  int x,  int y){\n    Graphics2D g2=(Graphics2D)g;\n    path.transform(AffineTransform.getTranslateInstance(x,y));\n    if (fillPaint != null) {\n      g2.setPaint(fillPaint);\n      g2.fill(path);\n    }\n    if (outlinePaint != null) {\n      g2.setPaint(outlinePaint);\n      g2.draw(path);\n    }\n    path.transform(AffineTransform.getTranslateInstance(-x,-y));\n  }\n  public int getIconWidth(){\n    return width;\n  }\n  public int getIconHeight(){\n    return height;\n  }\n}\n;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 263, 
          "faulty": "double uclip=getUpperClip();", 
          "type": "InsertBefore", 
          "seed": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "InsertBefore", 
          "seed": "setPositiveItemLabelPositionFallback(null);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_582/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:45:38.604497069 -0500\n@@ -201,10 +201,12 @@\n             throw new IllegalArgumentException(\n                 \"Requires StatisticalCategoryDataset.\");\n         }\n-        StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n+        g2.setStroke(plot.getRangeGridlineStroke());\n+\t\tStatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n+        setPositiveItemLabelPositionFallback(null);\n+\t\tif (orientation == PlotOrientation.HORIZONTAL) {\n             drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n                     rangeAxis, statData, row, column);\n         }\n@@ -239,28 +241,27 @@\n                                      \n         RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n         \n-        // BAR Y\n+        double currentItemMargin = 0.0;\n+\t\t// BAR Y\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                 dataArea, xAxisLocation);\n \n         int seriesCount = getRowCount();\n         int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n         double value = meanValue.doubleValue();\n         double base = 0.0;\n         double lclip = getLowerClip();\n-        double uclip = getUpperClip();\n+        if (seriesCount > 1) {\n+\t\t\tdouble seriesGap = dataArea.getHeight() * getItemMargin()\n+\t\t\t\t\t/ (categoryCount * (seriesCount - 1));\n+\t\t\trectY = rectY + row * (state.getBarWidth() + seriesGap);\n+\t\t} else {\n+\t\t\trectY = rectY + row * state.getBarWidth();\n+\t\t}\n+\t\tdouble uclip = getUpperClip();\n \n         if (uclip <= 0.0) {  // cases 1, 2, 3 and 4\n             if (value >= uclip) {\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_582/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:45:38.608497186 -0500\n@@ -101,7 +101,8 @@\n      * @return The standard deviation.\n      */\n     public Number getStandardDeviation() {\n-        return this.standardDeviation;\n+        double sumXX = 0;\n+\t\treturn this.standardDeviation;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_582/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:45:38.608497186 -0500\n@@ -107,9 +107,6 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getMean();\n-        }\n         return result;\n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "Replace", 
          "seed": "double result=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 107, 
          "faulty": "Number result=null;", 
          "type": "InsertBefore", 
          "seed": "this.maximumRangeValue=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 169, 
          "faulty": "Number result=null;", 
          "type": "InsertBefore", 
          "seed": "double sumX=0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 246, 
          "faulty": "return this.data.getRowKey(row);", 
          "type": "InsertBefore", 
          "seed": "this.minimumRangeValue=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "Delete", 
          "seed": "GanttCategoryDataset gcd=(GanttCategoryDataset)dataset;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 107, 
          "faulty": "Number result=null;", 
          "type": "InsertBefore", 
          "seed": "double maxRegularValue=Double.NEGATIVE_INFINITY;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_145/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:41:34.925417638 -0500\n@@ -204,14 +204,6 @@\n         StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n     }\n                 \n     /**\n@@ -243,17 +235,7 @@\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                 dataArea, xAxisLocation);\n \n-        int seriesCount = getRowCount();\n         int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_145/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:41:34.929417754 -0500\n@@ -92,7 +92,10 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_145/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:41:34.929417754 -0500\n@@ -104,7 +104,9 @@\n      * @return The mean value.\n      */\n     public Number getMeanValue(int row, int column) {\n-        Number result = null;\n+        this.maximumRangeValue = Double.NaN;\n+\t\tdouble maxRegularValue = Double.NEGATIVE_INFINITY;\n+\t\tNumber result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n@@ -166,7 +168,8 @@\n      * @return The standard deviation.\n      */\n     public Number getStdDevValue(int row, int column) {\n-        Number result = null;\n+        double sumX = 0;\n+\t\tNumber result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n@@ -243,7 +246,8 @@\n      * @return The row key.\n      */\n     public Comparable getRowKey(int row) {\n-        return this.data.getRowKey(row);\n+        this.minimumRangeValue = Double.NaN;\n+\t\treturn this.data.getRowKey(row);\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 273, 
          "faulty": "return this.data.getColumnCount();", 
          "type": "InsertBefore", 
          "seed": "List result=null;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 126, 
          "faulty": "return getMeanValue(row,column);", 
          "type": "InsertBefore", 
          "seed": "double minval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "Replace", 
          "seed": "double sum=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "Replace", 
          "seed": "double result=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 377, 
          "faulty": "Range result=null;", 
          "type": "Replace", 
          "seed": "Range result=null;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 172, 
          "faulty": "if (masd != null) {\n  result=masd.getStandardDeviation();\n}", 
          "type": "Replace", 
          "seed": "double sum=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "Delete", 
          "seed": "setMinimumBarLength(1.0);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 170, 
          "faulty": "MeanAndStandardDeviation masd=(MeanAndStandardDeviation)this.data.getObject(row,column);", 
          "type": "Delete", 
          "seed": "SimpleHistogramDataset clone=(SimpleHistogramDataset)super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 260, 
          "faulty": "double value=meanValue.doubleValue();", 
          "type": "InsertBefore", 
          "seed": "if (dataset != null) {\n  int columns=dataset.getColumnCount();\n  int rows=dataset.getRowCount();\n  double space=0.0;\n  PlotOrientation orientation=plot.getOrientation();\n  if (orientation == PlotOrientation.HORIZONTAL) {\n    space=dataArea.getHeight();\n  }\n else   if (orientation == PlotOrientation.VERTICAL) {\n    space=dataArea.getWidth();\n  }\n  double maxWidth=space * getMaximumBarWidth();\n  double categoryMargin=0.0;\n  double currentItemMargin=0.0;\n  if (columns > 1) {\n    categoryMargin=domainAxis.getCategoryMargin();\n  }\n  if (rows > 1) {\n    currentItemMargin=getItemMargin();\n  }\n  double used=space * (1 - domainAxis.getLowerMargin() - domainAxis.getUpperMargin()- categoryMargin- currentItemMargin);\n  if ((rows * columns) > 0) {\n    state.setBarWidth(Math.min(used / (rows * columns),maxWidth));\n  }\n else {\n    state.setBarWidth(Math.min(used,maxWidth));\n  }\n}"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Rectangle2D adjusted=new Rectangle2D.Double(dataArea.getX(),dataArea.getY() + getYOffset(),dataArea.getWidth() - getXOffset(),dataArea.getHeight() - getYOffset());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 126, 
          "faulty": "return getMeanValue(row,column);", 
          "type": "InsertBefore", 
          "seed": "double sumXX=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_298/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:43:00.187892473 -0500\n@@ -201,17 +201,7 @@\n             throw new IllegalArgumentException(\n                 \"Requires StatisticalCategoryDataset.\");\n         }\n-        StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n-\n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n     }\n                 \n     /**\n@@ -243,21 +233,40 @@\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                 dataArea, xAxisLocation);\n \n-        int seriesCount = getRowCount();\n+        double result = Double.NaN;\n         int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n-        double value = meanValue.doubleValue();\n+        if (dataset != null) {\n+\t\t\tint columns = dataset.getColumnCount();\n+\t\t\tint rows = dataset.getRowCount();\n+\t\t\tdouble space = 0.0;\n+\t\t\tPlotOrientation orientation = plot.getOrientation();\n+\t\t\tif (orientation == PlotOrientation.HORIZONTAL) {\n+\t\t\t\tspace = dataArea.getHeight();\n+\t\t\t} else if (orientation == PlotOrientation.VERTICAL) {\n+\t\t\t\tspace = dataArea.getWidth();\n+\t\t\t}\n+\t\t\tdouble maxWidth = space * getMaximumBarWidth();\n+\t\t\tdouble categoryMargin = 0.0;\n+\t\t\tdouble currentItemMargin = 0.0;\n+\t\t\tif (columns > 1) {\n+\t\t\t\tcategoryMargin = domainAxis.getCategoryMargin();\n+\t\t\t}\n+\t\t\tif (rows > 1) {\n+\t\t\t\tcurrentItemMargin = getItemMargin();\n+\t\t\t}\n+\t\t\tdouble used = space\n+\t\t\t\t\t* (1 - domainAxis.getLowerMargin()\n+\t\t\t\t\t\t\t- domainAxis.getUpperMargin() - categoryMargin - currentItemMargin);\n+\t\t\tif ((rows * columns) > 0) {\n+\t\t\t\tstate.setBarWidth(Math.min(used / (rows * columns), maxWidth));\n+\t\t\t} else {\n+\t\t\t\tstate.setBarWidth(Math.min(used, maxWidth));\n+\t\t\t}\n+\t\t}\n+\t\tdouble value = meanValue.doubleValue();\n         double base = 0.0;\n         double lclip = getLowerClip();\n         double uclip = getUpperClip();\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_298/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:43:00.191892588 -0500\n@@ -92,7 +92,8 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_298/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:43:00.191892588 -0500\n@@ -107,9 +107,7 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getMean();\n-        }\n+        double sum = 0.0;\n         return result;\n     }\n \n@@ -123,7 +121,9 @@\n      * @return The value.\n      */\n     public Number getValue(int row, int column) {\n-        return getMeanValue(row, column);\n+        double minval = Double.NaN;\n+\t\tdouble sumXX = 0;\n+\t\treturn getMeanValue(row, column);\n     }\n \n     /**\n@@ -167,11 +167,7 @@\n      */\n     public Number getStdDevValue(int row, int column) {\n         Number result = null;\n-        MeanAndStandardDeviation masd \n-            = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getStandardDeviation();\n-        }\n+        double sum = 0.0;\n         return result;\n     }\n \n@@ -270,7 +266,8 @@\n      * @return The column count.\n      */\n     public int getColumnCount() {\n-        return this.data.getColumnCount();\n+        List result = null;\n+\t\treturn this.data.getColumnCount();\n     }\n \n     /**\n@@ -377,9 +374,11 @@\n         Range result = null;\n         if (includeInterval) {\n             if (!Double.isNaN(this.minimumRangeValueIncStdDev) \n-                    && !Double.isNaN(this.maximumRangeValueIncStdDev))\n-            result = new Range(this.minimumRangeValueIncStdDev, \n-                    this.maximumRangeValueIncStdDev);\n+                    && !Double.isNaN(this.maximumRangeValueIncStdDev)) {\n+\t\t\t\tdouble sumX2 = 0.0;\n+\t\t\t\tresult = new Range(this.minimumRangeValueIncStdDev,\n+\t\t\t\t\t\tthis.maximumRangeValueIncStdDev);\n+\t\t\t}\n         }\n         else {\n             if (!Double.isNaN(this.minimumRangeValue) \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "double uclip=getUpperClip();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 200, 
          "faulty": "if (!(data instanceof StatisticalCategoryDataset)) {\n  throw new IllegalArgumentException(\"Requires StatisticalCategoryDataset.\");\n}", 
          "type": "Delete", 
          "seed": "Stroke stroke=plot.getRangeGridlineStroke();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "InsertBefore", 
          "seed": "if (masd != null) {\n  result=masd.getStandardDeviation();\n}"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "double uclip=getUpperClip();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 200, 
          "faulty": "if (!(data instanceof StatisticalCategoryDataset)) {\n  throw new IllegalArgumentException(\"Requires StatisticalCategoryDataset.\");\n}", 
          "type": "Delete", 
          "seed": "Stroke stroke=plot.getRangeGridlineStroke();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "InsertBefore", 
          "seed": "if (masd != null) {\n  result=masd.getStandardDeviation();\n}"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 111, 
          "faulty": "result=masd.getMean();", 
          "type": "Delete", 
          "seed": "int count=0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 175, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "double m=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 389, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "double minval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Replace", 
          "seed": "setIncludeBaseInRange(false);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 172, 
          "faulty": "if (masd != null) {\n  result=masd.getStandardDeviation();\n}", 
          "type": "InsertBefore", 
          "seed": "double sumX=0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 274, 
          "faulty": "if (lclip <= 0.0) {\n  if (value >= uclip) {\n    value=uclip;\n  }\n else {\n    if (value <= lclip) {\n      value=lclip;\n    }\n  }\n}\n else {\n  if (value <= lclip) {\n    return;\n  }\n  base=getLowerClip();\n  if (value >= uclip) {\n    value=uclip;\n  }\n}", 
          "type": "Delete", 
          "seed": "double yy2=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 273, 
          "faulty": "return this.data.getColumnCount();", 
          "type": "InsertBefore", 
          "seed": "double[] result=new double[2];"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "Delete", 
          "seed": "if (this.errorIndicatorPaint != null) {\n  g2.setPaint(this.errorIndicatorPaint);\n}\n else {\n  g2.setPaint(getItemOutlinePaint(row,column));\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_341/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:43:26.540658102 -0500\n@@ -196,22 +196,8 @@\n                          int column,\n                          int pass) {\n \n-        // defensive check\n-        if (!(data instanceof StatisticalCategoryDataset)) {\n-            throw new IllegalArgumentException(\n-                \"Requires StatisticalCategoryDataset.\");\n-        }\n-        StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n-\n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n+        setIncludeBaseInRange(false);\n     }\n                 \n     /**\n@@ -245,15 +231,6 @@\n \n         int seriesCount = getRowCount();\n         int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n@@ -270,26 +247,8 @@\n             if (value <= lclip) {\n                 value = lclip;\n             }\n-        }\n-        else if (lclip <= 0.0) { // cases 5, 6, 7 and 8\n-            if (value >= uclip) {\n-                value = uclip;\n-            }\n-            else {\n-                if (value <= lclip) {\n-                    value = lclip;\n-                }\n-            }\n-        }\n-        else { // cases 9, 10, 11 and 12\n-            if (value <= lclip) {\n-                return; // bar is not visible\n-            }\n-            base = getLowerClip();\n-            if (value >= uclip) {\n-               value = uclip;\n-            }\n-        }\n+        } else\n+\t\t\t;\n \n         RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n         double transY1 = rangeAxis.valueToJava2D(base, dataArea, yAxisLocation);\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_341/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:43:26.544658218 -0500\n@@ -92,7 +92,9 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\tthis.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_341/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:43:26.544658218 -0500\n@@ -108,7 +108,12 @@\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n-            result = masd.getMean();\n+\t\t\tresult = masd.getStandardDeviation();\n+\t\t}\n+\t\tif (masd != null) {\n+\t\t\tresult = masd.getStandardDeviation();\n+\t\t}\n+\t\tif (masd != null) {\n         }\n         return result;\n     }\n@@ -169,10 +174,12 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n+        double sumX = 0;\n+\t\tif (masd != null) {\n             result = masd.getStandardDeviation();\n         }\n-        return result;\n+        double m = 0.0;\n+\t\treturn result;\n     }\n \n     /**\n@@ -270,7 +277,8 @@\n      * @return The column count.\n      */\n     public int getColumnCount() {\n-        return this.data.getColumnCount();\n+        double[] result = new double[2];\n+\t\treturn this.data.getColumnCount();\n     }\n \n     /**\n@@ -377,16 +385,19 @@\n         Range result = null;\n         if (includeInterval) {\n             if (!Double.isNaN(this.minimumRangeValueIncStdDev) \n-                    && !Double.isNaN(this.maximumRangeValueIncStdDev))\n-            result = new Range(this.minimumRangeValueIncStdDev, \n-                    this.maximumRangeValueIncStdDev);\n+                    && !Double.isNaN(this.maximumRangeValueIncStdDev)) {\n+\t\t\t\tdouble sumX2 = 0.0;\n+\t\t\t\tresult = new Range(this.minimumRangeValueIncStdDev,\n+\t\t\t\t\t\tthis.maximumRangeValueIncStdDev);\n+\t\t\t}\n         }\n         else {\n             if (!Double.isNaN(this.minimumRangeValue) \n                     && !Double.isNaN(this.maximumRangeValue))\n             result = new Range(this.minimumRangeValue, this.maximumRangeValue);            \n         }\n-        return result;\n+        double minval = Double.NaN;\n+\t\treturn result;\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "Replace", 
          "seed": "double result=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 126, 
          "faulty": "return getMeanValue(row,column);", 
          "type": "InsertBefore", 
          "seed": "double minval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "Replace", 
          "seed": "double sum=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 243, 
          "faulty": "double rectY=domainAxis.getCategoryStart(column,getColumnCount(),dataArea,xAxisLocation);", 
          "type": "InsertBefore", 
          "seed": "CategoryPlot p=getPlot();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_232/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:42:23.838837417 -0500\n@@ -204,14 +204,6 @@\n         StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n     }\n                 \n     /**\n@@ -239,21 +231,13 @@\n                                      \n         RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n         \n-        // BAR Y\n+        CategoryPlot p = getPlot();\n+\t\t// BAR Y\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                 dataArea, xAxisLocation);\n \n-        int seriesCount = getRowCount();\n+        double result = Double.NaN;\n         int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_232/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:42:23.842837532 -0500\n@@ -92,7 +92,13 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_232/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:42:23.842837532 -0500\n@@ -107,9 +107,7 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getMean();\n-        }\n+        double sum = 0.0;\n         return result;\n     }\n \n@@ -123,7 +121,8 @@\n      * @return The value.\n      */\n     public Number getValue(int row, int column) {\n-        return getMeanValue(row, column);\n+        double minval = Double.NaN;\n+\t\treturn getMeanValue(row, column);\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "Replace", 
          "seed": "double result=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 107, 
          "faulty": "Number result=null;", 
          "type": "InsertBefore", 
          "seed": "this.maximumRangeValue=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 377, 
          "faulty": "Range result=null;", 
          "type": "InsertBefore", 
          "seed": "double sumXY=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "double itemMargin=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "int itemCount=dataset.getColumnCount();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 265, 
          "faulty": "if (uclip <= 0.0) {\n  if (value >= uclip) {\n    return;\n  }\n  base=uclip;\n  if (value <= lclip) {\n    value=lclip;\n  }\n}\n else if (lclip <= 0.0) {\n  if (value >= uclip) {\n    value=uclip;\n  }\n else {\n    if (value <= lclip) {\n      value=lclip;\n    }\n  }\n}\n else {\n  if (value <= lclip) {\n    return;\n  }\n  base=getLowerClip();\n  if (value >= uclip) {\n    value=uclip;\n  }\n}", 
          "type": "Delete", 
          "seed": "this.errorIndicatorPaint=Color.gray;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 260, 
          "faulty": "double value=meanValue.doubleValue();", 
          "type": "InsertBefore", 
          "seed": "Number n2=dataset.getValue(row,column + 1);"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 240, 
          "faulty": "RectangleEdge xAxisLocation=plot.getDomainAxisEdge();", 
          "type": "InsertBefore", 
          "seed": "g2.setPaint(getItemOutlinePaint(row,column));"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 208, 
          "faulty": "drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);", 
          "type": "Replace", 
          "seed": "double base=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "Replace", 
          "seed": "double y=0.0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_80/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:40:58.120349293 -0500\n@@ -201,17 +201,9 @@\n             throw new IllegalArgumentException(\n                 \"Requires StatisticalCategoryDataset.\");\n         }\n-        StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n+        double y = 0.0;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n     }\n                 \n     /**\n@@ -237,60 +229,25 @@\n                                       int row,\n                                       int column) {\n                                      \n-        RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n+        g2.setPaint(getItemOutlinePaint(row,\n+\t\t\t\t\t\t\t\t\t\t\t\tcolumn));\n+\t\tRectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n         \n         // BAR Y\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                 dataArea, xAxisLocation);\n \n-        int seriesCount = getRowCount();\n+        double result = Double.NaN;\n         int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n-        double value = meanValue.doubleValue();\n+        Number n2 = dataset.getValue(row, column + 1);\n+\t\tdouble value = meanValue.doubleValue();\n         double base = 0.0;\n         double lclip = getLowerClip();\n         double uclip = getUpperClip();\n \n-        if (uclip <= 0.0) {  // cases 1, 2, 3 and 4\n-            if (value >= uclip) {\n-                return; // bar is not visible\n-            }\n-            base = uclip;\n-            if (value <= lclip) {\n-                value = lclip;\n-            }\n-        }\n-        else if (lclip <= 0.0) { // cases 5, 6, 7 and 8\n-            if (value >= uclip) {\n-                value = uclip;\n-            }\n-            else {\n-                if (value <= lclip) {\n-                    value = lclip;\n-                }\n-            }\n-        }\n-        else { // cases 9, 10, 11 and 12\n-            if (value <= lclip) {\n-                return; // bar is not visible\n-            }\n-            base = getLowerClip();\n-            if (value >= uclip) {\n-               value = uclip;\n-            }\n-        }\n-\n         RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n         double transY1 = rangeAxis.valueToJava2D(base, dataArea, yAxisLocation);\n         double transY2 = rangeAxis.valueToJava2D(value, dataArea, \n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_80/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:40:58.124349409 -0500\n@@ -92,7 +92,10 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_80/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:40:58.124349409 -0500\n@@ -104,7 +104,8 @@\n      * @return The mean value.\n      */\n     public Number getMeanValue(int row, int column) {\n-        Number result = null;\n+        this.maximumRangeValue = Double.NaN;\n+\t\tNumber result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n@@ -374,7 +375,8 @@\n      * @return The range.\n      */\n     public Range getRangeBounds(boolean includeInterval) {\n-        Range result = null;\n+        double sumXY = 0.0;\n+\t\tRange result = null;\n         if (includeInterval) {\n             if (!Double.isNaN(this.minimumRangeValueIncStdDev) \n                     && !Double.isNaN(this.maximumRangeValueIncStdDev))\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 273, 
          "faulty": "return this.data.getColumnCount();", 
          "type": "InsertBefore", 
          "seed": "List result=null;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 126, 
          "faulty": "return getMeanValue(row,column);", 
          "type": "InsertBefore", 
          "seed": "double minval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "int count=dataset.getColumnCount();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 273, 
          "faulty": "return this.data.getColumnCount();", 
          "type": "InsertBefore", 
          "seed": "double sumXX=0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 247, 
          "faulty": "int categoryCount=getColumnCount();", 
          "type": "Replace", 
          "seed": "PlotOrientation orient=plot.getOrientation();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "GeneralPath clip=new GeneralPath();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 265, 
          "faulty": "if (uclip <= 0.0) {\n  if (value >= uclip) {\n    return;\n  }\n  base=uclip;\n  if (value <= lclip) {\n    value=lclip;\n  }\n}\n else if (lclip <= 0.0) {\n  if (value >= uclip) {\n    value=uclip;\n  }\n else {\n    if (value <= lclip) {\n      value=lclip;\n    }\n  }\n}\n else {\n  if (value <= lclip) {\n    return;\n  }\n  base=getLowerClip();\n  if (value >= uclip) {\n    value=uclip;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "if (value >= uclip) {\n  value=uclip;\n}\n else {\n  if (value <= lclip) {\n    value=lclip;\n  }\n}"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 206, 
          "faulty": "PlotOrientation orientation=plot.getOrientation();", 
          "type": "Delete", 
          "seed": "GeneralPath leftWall=new GeneralPath();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 206, 
          "faulty": "PlotOrientation orientation=plot.getOrientation();", 
          "type": "InsertBefore", 
          "seed": "setPositiveItemLabelPositionFallback(null);"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 200, 
          "faulty": "if (!(data instanceof StatisticalCategoryDataset)) {\n  throw new IllegalArgumentException(\"Requires StatisticalCategoryDataset.\");\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_294/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:42:58.619846959 -0500\n@@ -196,22 +196,9 @@\n                          int column,\n                          int pass) {\n \n-        // defensive check\n-        if (!(data instanceof StatisticalCategoryDataset)) {\n-            throw new IllegalArgumentException(\n-                \"Requires StatisticalCategoryDataset.\");\n-        }\n         StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n-        PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n+        setPositiveItemLabelPositionFallback(null);\n     }\n                 \n     /**\n@@ -244,16 +231,7 @@\n                 dataArea, xAxisLocation);\n \n         int seriesCount = getRowCount();\n-        int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n+        PlotOrientation orient = plot.getOrientation();\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n@@ -262,7 +240,14 @@\n         double lclip = getLowerClip();\n         double uclip = getUpperClip();\n \n-        if (uclip <= 0.0) {  // cases 1, 2, 3 and 4\n+        if (value >= uclip) {\n+\t\t\tvalue = uclip;\n+\t\t} else {\n+\t\t\tif (value <= lclip) {\n+\t\t\t\tvalue = lclip;\n+\t\t\t}\n+\t\t}\n+\t\tif (uclip <= 0.0) {  // cases 1, 2, 3 and 4\n             if (value >= uclip) {\n                 return; // bar is not visible\n             }\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_294/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:42:58.619846959 -0500\n@@ -92,7 +92,9 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\tthis.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_294/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:42:58.623847074 -0500\n@@ -123,7 +123,8 @@\n      * @return The value.\n      */\n     public Number getValue(int row, int column) {\n-        return getMeanValue(row, column);\n+        double minval = Double.NaN;\n+\t\treturn getMeanValue(row, column);\n     }\n \n     /**\n@@ -270,7 +271,9 @@\n      * @return The column count.\n      */\n     public int getColumnCount() {\n-        return this.data.getColumnCount();\n+        List result = null;\n+\t\tdouble sumXX = 0;\n+\t\treturn this.data.getColumnCount();\n     }\n \n     /**\n@@ -377,9 +380,11 @@\n         Range result = null;\n         if (includeInterval) {\n             if (!Double.isNaN(this.minimumRangeValueIncStdDev) \n-                    && !Double.isNaN(this.maximumRangeValueIncStdDev))\n-            result = new Range(this.minimumRangeValueIncStdDev, \n-                    this.maximumRangeValueIncStdDev);\n+                    && !Double.isNaN(this.maximumRangeValueIncStdDev)) {\n+\t\t\t\tdouble sumX2 = 0.0;\n+\t\t\t\tresult = new Range(this.minimumRangeValueIncStdDev,\n+\t\t\t\t\t\tthis.maximumRangeValueIncStdDev);\n+\t\t\t}\n         }\n         else {\n             if (!Double.isNaN(this.minimumRangeValue) \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "Replace", 
          "seed": "double result=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "Replace", 
          "seed": "double result=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "Replace", 
          "seed": "double result=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 107, 
          "faulty": "Number result=null;", 
          "type": "InsertBefore", 
          "seed": "this.maximumRangeValue=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 169, 
          "faulty": "Number result=null;", 
          "type": "InsertBefore", 
          "seed": "double sumX=0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 246, 
          "faulty": "return this.data.getRowKey(row);", 
          "type": "InsertBefore", 
          "seed": "this.minimumRangeValue=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 265, 
          "faulty": "if (uclip <= 0.0) {\n  if (value >= uclip) {\n    return;\n  }\n  base=uclip;\n  if (value <= lclip) {\n    value=lclip;\n  }\n}\n else if (lclip <= 0.0) {\n  if (value >= uclip) {\n    value=uclip;\n  }\n else {\n    if (value <= lclip) {\n      value=lclip;\n    }\n  }\n}\n else {\n  if (value <= lclip) {\n    return;\n  }\n  base=getLowerClip();\n  if (value >= uclip) {\n    value=uclip;\n  }\n}", 
          "type": "Replace", 
          "seed": "double previous=state.getSeriesRunningTotal();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 200, 
          "faulty": "if (!(data instanceof StatisticalCategoryDataset)) {\n  throw new IllegalArgumentException(\"Requires StatisticalCategoryDataset.\");\n}", 
          "type": "InsertBefore", 
          "seed": "plot.drawBackground(g2,dataArea);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 108, 
          "faulty": "MeanAndStandardDeviation masd=(MeanAndStandardDeviation)this.data.getObject(row,column);", 
          "type": "InsertBefore", 
          "seed": "double maxRegularValue=Double.NEGATIVE_INFINITY;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "InsertBefore", 
          "seed": "int series=0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 208, 
          "faulty": "drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);", 
          "type": "Delete", 
          "seed": "g2.setPaint(Color.lightGray);"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 206, 
          "faulty": "PlotOrientation orientation=plot.getOrientation();", 
          "type": "Replace", 
          "seed": "EntityCollection entities=state.getEntityCollection();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_156/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:41:42.097625823 -0500\n@@ -196,22 +196,16 @@\n                          int column,\n                          int pass) {\n \n-        // defensive check\n+        plot.drawBackground(g2, dataArea);\n+\t\t// defensive check\n         if (!(data instanceof StatisticalCategoryDataset)) {\n             throw new IllegalArgumentException(\n                 \"Requires StatisticalCategoryDataset.\");\n         }\n-        StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n+        int series = 0;\n+\t\tStatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n-        PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n+        EntityCollection entities = state.getEntityCollection();\n     }\n                 \n     /**\n@@ -243,17 +237,8 @@\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                 dataArea, xAxisLocation);\n \n-        int seriesCount = getRowCount();\n+        double result = Double.NaN;\n         int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n@@ -262,34 +247,7 @@\n         double lclip = getLowerClip();\n         double uclip = getUpperClip();\n \n-        if (uclip <= 0.0) {  // cases 1, 2, 3 and 4\n-            if (value >= uclip) {\n-                return; // bar is not visible\n-            }\n-            base = uclip;\n-            if (value <= lclip) {\n-                value = lclip;\n-            }\n-        }\n-        else if (lclip <= 0.0) { // cases 5, 6, 7 and 8\n-            if (value >= uclip) {\n-                value = uclip;\n-            }\n-            else {\n-                if (value <= lclip) {\n-                    value = lclip;\n-                }\n-            }\n-        }\n-        else { // cases 9, 10, 11 and 12\n-            if (value <= lclip) {\n-                return; // bar is not visible\n-            }\n-            base = getLowerClip();\n-            if (value >= uclip) {\n-               value = uclip;\n-            }\n-        }\n+        double previous = state.getSeriesRunningTotal();\n \n         RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n         double transY1 = rangeAxis.valueToJava2D(base, dataArea, yAxisLocation);\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_156/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:41:42.097625823 -0500\n@@ -92,7 +92,10 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_156/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:41:42.101625940 -0500\n@@ -104,8 +104,10 @@\n      * @return The mean value.\n      */\n     public Number getMeanValue(int row, int column) {\n-        Number result = null;\n-        MeanAndStandardDeviation masd \n+        this.maximumRangeValue = Double.NaN;\n+\t\tNumber result = null;\n+        double maxRegularValue = Double.NEGATIVE_INFINITY;\n+\t\tMeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n             result = masd.getMean();\n@@ -166,7 +168,8 @@\n      * @return The standard deviation.\n      */\n     public Number getStdDevValue(int row, int column) {\n-        Number result = null;\n+        double sumX = 0;\n+\t\tNumber result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n@@ -243,7 +246,8 @@\n      * @return The row key.\n      */\n     public Comparable getRowKey(int row) {\n-        return this.data.getRowKey(row);\n+        this.minimumRangeValue = Double.NaN;\n+\t\treturn this.data.getRowKey(row);\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 273, 
          "faulty": "return this.data.getColumnCount();", 
          "type": "InsertBefore", 
          "seed": "List result=null;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 126, 
          "faulty": "return getMeanValue(row,column);", 
          "type": "InsertBefore", 
          "seed": "double minval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "int count=dataset.getColumnCount();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 273, 
          "faulty": "return this.data.getColumnCount();", 
          "type": "InsertBefore", 
          "seed": "double sumXX=0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 247, 
          "faulty": "int categoryCount=getColumnCount();", 
          "type": "Replace", 
          "seed": "PlotOrientation orient=plot.getOrientation();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "InsertBefore", 
          "seed": "setNegativeItemLabelPositionFallback(null);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "InsertBefore", 
          "seed": "double minval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 263, 
          "faulty": "double uclip=getUpperClip();", 
          "type": "InsertBefore", 
          "seed": "if (value <= lclip) {\n  value=lclip;\n}"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "double uclip=getUpperClip();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 200, 
          "faulty": "if (!(data instanceof StatisticalCategoryDataset)) {\n  throw new IllegalArgumentException(\"Requires StatisticalCategoryDataset.\");\n}", 
          "type": "Delete", 
          "seed": "Stroke stroke=plot.getRangeGridlineStroke();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "InsertBefore", 
          "seed": "if (masd != null) {\n  result=masd.getStandardDeviation();\n}"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 111, 
          "faulty": "result=masd.getMean();", 
          "type": "Delete", 
          "seed": "int count=0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 389, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "double min=Double.MAX_VALUE;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 389, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "double minval=Double.NaN;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_315/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:43:10.904203545 -0500\n@@ -196,22 +196,9 @@\n                          int column,\n                          int pass) {\n \n-        // defensive check\n-        if (!(data instanceof StatisticalCategoryDataset)) {\n-            throw new IllegalArgumentException(\n-                \"Requires StatisticalCategoryDataset.\");\n-        }\n         StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n     }\n                 \n     /**\n@@ -243,24 +230,19 @@\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                 dataArea, xAxisLocation);\n \n-        int seriesCount = getRowCount();\n-        int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n+        setNegativeItemLabelPositionFallback(null);\n+\t\tint seriesCount = getRowCount();\n+        PlotOrientation orient = plot.getOrientation();\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n         double value = meanValue.doubleValue();\n         double base = 0.0;\n         double lclip = getLowerClip();\n-        double uclip = getUpperClip();\n+        if (value <= lclip) {\n+\t\t\tvalue = lclip;\n+\t\t}\n+\t\tdouble uclip = getUpperClip();\n \n         if (uclip <= 0.0) {  // cases 1, 2, 3 and 4\n             if (value >= uclip) {\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_315/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:43:10.908203661 -0500\n@@ -92,7 +92,9 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\tthis.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_315/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:43:10.908203661 -0500\n@@ -107,8 +107,11 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getMean();\n+        double minval = Double.NaN;\n+\t\tif (masd != null) {\n+\t\t\tresult = masd.getStandardDeviation();\n+\t\t}\n+\t\tif (masd != null) {\n         }\n         return result;\n     }\n@@ -123,7 +126,8 @@\n      * @return The value.\n      */\n     public Number getValue(int row, int column) {\n-        return getMeanValue(row, column);\n+        double minval = Double.NaN;\n+\t\treturn getMeanValue(row, column);\n     }\n \n     /**\n@@ -270,7 +274,9 @@\n      * @return The column count.\n      */\n     public int getColumnCount() {\n-        return this.data.getColumnCount();\n+        List result = null;\n+\t\tdouble sumXX = 0;\n+\t\treturn this.data.getColumnCount();\n     }\n \n     /**\n@@ -377,16 +383,20 @@\n         Range result = null;\n         if (includeInterval) {\n             if (!Double.isNaN(this.minimumRangeValueIncStdDev) \n-                    && !Double.isNaN(this.maximumRangeValueIncStdDev))\n-            result = new Range(this.minimumRangeValueIncStdDev, \n-                    this.maximumRangeValueIncStdDev);\n+                    && !Double.isNaN(this.maximumRangeValueIncStdDev)) {\n+\t\t\t\tdouble sumX2 = 0.0;\n+\t\t\t\tresult = new Range(this.minimumRangeValueIncStdDev,\n+\t\t\t\t\t\tthis.maximumRangeValueIncStdDev);\n+\t\t\t}\n         }\n         else {\n             if (!Double.isNaN(this.minimumRangeValue) \n                     && !Double.isNaN(this.maximumRangeValue))\n             result = new Range(this.minimumRangeValue, this.maximumRangeValue);            \n         }\n-        return result;\n+        double min = Double.MAX_VALUE;\n+\t\tdouble minval = Double.NaN;\n+\t\treturn result;\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 261, 
          "faulty": "double base=0.0;", 
          "type": "InsertBefore", 
          "seed": "double xx0=domainAxis.getCategoryStart(column,getColumnCount(),dataArea,plot.getDomainAxisEdge());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 172, 
          "faulty": "if (masd != null) {\n  result=masd.getStandardDeviation();\n}", 
          "type": "Replace", 
          "seed": "double maxOutlier=Double.NEGATIVE_INFINITY;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 243, 
          "faulty": "double rectY=domainAxis.getCategoryStart(column,getColumnCount(),dataArea,xAxisLocation);", 
          "type": "InsertBefore", 
          "seed": "double y0=dataArea.getMaxY();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "Delete", 
          "seed": "this.minimumRangeValueIncStdDev=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 243, 
          "faulty": "double rectY=domainAxis.getCategoryStart(column,getColumnCount(),dataArea,xAxisLocation);", 
          "type": "InsertBefore", 
          "seed": "double currentItemMargin=0.0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_519/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:45:06.659568490 -0500\n@@ -204,14 +204,6 @@\n         StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n     }\n                 \n     /**\n@@ -239,7 +231,9 @@\n                                      \n         RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n         \n-        // BAR Y\n+        double y0 = dataArea.getMaxY();\n+\t\tdouble currentItemMargin = 0.0;\n+\t\t// BAR Y\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                 dataArea, xAxisLocation);\n \n@@ -258,7 +252,9 @@\n         Number meanValue = dataset.getMeanValue(row, column);\n \n         double value = meanValue.doubleValue();\n-        double base = 0.0;\n+        double xx0 = domainAxis.getCategoryStart(column, getColumnCount(),\n+\t\t\t\tdataArea, plot.getDomainAxisEdge());\n+\t\tdouble base = 0.0;\n         double lclip = getLowerClip();\n         double uclip = getUpperClip();\n \n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_519/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:45:06.663568605 -0500\n@@ -92,7 +92,8 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_519/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:45:06.667568723 -0500\n@@ -107,9 +107,6 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getMean();\n-        }\n         return result;\n     }\n \n@@ -169,9 +166,7 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getStandardDeviation();\n-        }\n+        double maxOutlier = Double.NEGATIVE_INFINITY;\n         return result;\n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "InsertBefore", 
          "seed": "String urlText=null;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 208, 
          "faulty": "drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);", 
          "type": "Replace", 
          "seed": "double previous=state.getSeriesRunningTotal();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "Replace", 
          "seed": "double[] result=new double[2];"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 169, 
          "faulty": "Number result=null;", 
          "type": "InsertBefore", 
          "seed": "double y=0.0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_203/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:42:07.562364975 -0500\n@@ -204,14 +204,7 @@\n         StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n+        String urlText = null;\n     }\n                 \n     /**\n@@ -243,17 +236,8 @@\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                 dataArea, xAxisLocation);\n \n-        int seriesCount = getRowCount();\n+        double[] result = new double[2];\n         int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_203/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:42:07.566365090 -0500\n@@ -92,7 +92,9 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\tthis.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_203/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:42:07.566365090 -0500\n@@ -166,7 +166,8 @@\n      * @return The standard deviation.\n      */\n     public Number getStdDevValue(int row, int column) {\n-        Number result = null;\n+        double y = 0.0;\n+\t\tNumber result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n@@ -377,9 +378,11 @@\n         Range result = null;\n         if (includeInterval) {\n             if (!Double.isNaN(this.minimumRangeValueIncStdDev) \n-                    && !Double.isNaN(this.maximumRangeValueIncStdDev))\n-            result = new Range(this.minimumRangeValueIncStdDev, \n-                    this.maximumRangeValueIncStdDev);\n+                    && !Double.isNaN(this.maximumRangeValueIncStdDev)) {\n+\t\t\t\tdouble sumX2 = 0.0;\n+\t\t\t\tresult = new Range(this.minimumRangeValueIncStdDev,\n+\t\t\t\t\t\tthis.maximumRangeValueIncStdDev);\n+\t\t\t}\n         }\n         else {\n             if (!Double.isNaN(this.minimumRangeValue) \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 170, 
          "faulty": "MeanAndStandardDeviation masd=(MeanAndStandardDeviation)this.data.getObject(row,column);", 
          "type": "InsertBefore", 
          "seed": "double minRegularValue=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "Replace", 
          "seed": "double result=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 107, 
          "faulty": "Number result=null;", 
          "type": "InsertBefore", 
          "seed": "this.maximumRangeValue=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 169, 
          "faulty": "Number result=null;", 
          "type": "InsertBefore", 
          "seed": "double sumX=0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 246, 
          "faulty": "return this.data.getRowKey(row);", 
          "type": "InsertBefore", 
          "seed": "this.minimumRangeValue=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "Delete", 
          "seed": "GanttCategoryDataset gcd=(GanttCategoryDataset)dataset;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_97/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:41:08.272643987 -0500\n@@ -204,14 +204,6 @@\n         StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n     }\n                 \n     /**\n@@ -243,17 +235,7 @@\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                 dataArea, xAxisLocation);\n \n-        int seriesCount = getRowCount();\n         int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_97/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:41:08.276644103 -0500\n@@ -92,7 +92,8 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_97/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:41:08.280644219 -0500\n@@ -104,7 +104,8 @@\n      * @return The mean value.\n      */\n     public Number getMeanValue(int row, int column) {\n-        Number result = null;\n+        this.maximumRangeValue = Double.NaN;\n+\t\tNumber result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n@@ -166,8 +167,10 @@\n      * @return The standard deviation.\n      */\n     public Number getStdDevValue(int row, int column) {\n-        Number result = null;\n-        MeanAndStandardDeviation masd \n+        double sumX = 0;\n+\t\tNumber result = null;\n+        double minRegularValue = Double.POSITIVE_INFINITY;\n+\t\tMeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n             result = masd.getStandardDeviation();\n@@ -243,7 +246,8 @@\n      * @return The row key.\n      */\n     public Comparable getRowKey(int row) {\n-        return this.data.getRowKey(row);\n+        this.minimumRangeValue = Double.NaN;\n+\t\treturn this.data.getRowKey(row);\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 246, 
          "faulty": "return this.data.getRowKey(row);", 
          "type": "InsertBefore", 
          "seed": "double maxOutlier=Double.NEGATIVE_INFINITY;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "Replace", 
          "seed": "double categoryEnd=domainAxis.getCategoryEnd(column,getColumnCount(),dataArea,plot.getDomainAxisEdge());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 206, 
          "faulty": "PlotOrientation orientation=plot.getOrientation();", 
          "type": "InsertBefore", 
          "seed": "double rectX=domainAxis.getCategoryMiddle(column,getColumnCount(),dataArea,plot.getDomainAxisEdge()) - state.getBarWidth() / 2.0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_39/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:40:32.303599894 -0500\n@@ -203,15 +203,9 @@\n         }\n         StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n-        PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n+        double rectX = domainAxis.getCategoryMiddle(column, getColumnCount(),\n+\t\t\t\tdataArea, plot.getDomainAxisEdge()) - state.getBarWidth() / 2.0;\n+\t\tPlotOrientation orientation = plot.getOrientation();\n     }\n                 \n     /**\n@@ -243,17 +237,9 @@\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                 dataArea, xAxisLocation);\n \n-        int seriesCount = getRowCount();\n+        double categoryEnd = domainAxis.getCategoryEnd(column,\n+\t\t\t\tgetColumnCount(), dataArea, plot.getDomainAxisEdge());\n         int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_39/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:40:32.307600010 -0500\n@@ -243,7 +243,8 @@\n      * @return The row key.\n      */\n     public Comparable getRowKey(int row) {\n-        return this.data.getRowKey(row);\n+        double maxOutlier = Double.NEGATIVE_INFINITY;\n+\t\treturn this.data.getRowKey(row);\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 170, 
          "faulty": "MeanAndStandardDeviation masd=(MeanAndStandardDeviation)this.data.getObject(row,column);", 
          "type": "InsertBefore", 
          "seed": "double minRegularValue=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "Replace", 
          "seed": "double result=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "Replace", 
          "seed": "double result=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 107, 
          "faulty": "Number result=null;", 
          "type": "InsertBefore", 
          "seed": "this.maximumRangeValue=Double.NaN;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_109/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:41:14.628828489 -0500\n@@ -204,14 +204,6 @@\n         StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n     }\n                 \n     /**\n@@ -243,17 +235,8 @@\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                 dataArea, xAxisLocation);\n \n-        int seriesCount = getRowCount();\n+        double result = Double.NaN;\n         int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_109/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:41:14.628828489 -0500\n@@ -92,7 +92,8 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_109/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:41:14.632828605 -0500\n@@ -104,7 +104,8 @@\n      * @return The mean value.\n      */\n     public Number getMeanValue(int row, int column) {\n-        Number result = null;\n+        this.maximumRangeValue = Double.NaN;\n+\t\tNumber result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n@@ -167,7 +168,8 @@\n      */\n     public Number getStdDevValue(int row, int column) {\n         Number result = null;\n-        MeanAndStandardDeviation masd \n+        double minRegularValue = Double.POSITIVE_INFINITY;\n+\t\tMeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n             result = masd.getStandardDeviation();\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 273, 
          "faulty": "return this.data.getColumnCount();", 
          "type": "InsertBefore", 
          "seed": "List result=null;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 126, 
          "faulty": "return getMeanValue(row,column);", 
          "type": "InsertBefore", 
          "seed": "double minval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "int count=dataset.getColumnCount();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 273, 
          "faulty": "return this.data.getColumnCount();", 
          "type": "InsertBefore", 
          "seed": "double sumXX=0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 247, 
          "faulty": "int categoryCount=getColumnCount();", 
          "type": "Replace", 
          "seed": "PlotOrientation orient=plot.getOrientation();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "GeneralPath clip=new GeneralPath();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 265, 
          "faulty": "if (uclip <= 0.0) {\n  if (value >= uclip) {\n    return;\n  }\n  base=uclip;\n  if (value <= lclip) {\n    value=lclip;\n  }\n}\n else if (lclip <= 0.0) {\n  if (value >= uclip) {\n    value=uclip;\n  }\n else {\n    if (value <= lclip) {\n      value=lclip;\n    }\n  }\n}\n else {\n  if (value <= lclip) {\n    return;\n  }\n  base=getLowerClip();\n  if (value >= uclip) {\n    value=uclip;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "if (value >= uclip) {\n  value=uclip;\n}\n else {\n  if (value <= lclip) {\n    value=lclip;\n  }\n}"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 206, 
          "faulty": "PlotOrientation orientation=plot.getOrientation();", 
          "type": "Delete", 
          "seed": "GeneralPath leftWall=new GeneralPath();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_274/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:42:45.071453711 -0500\n@@ -202,16 +202,6 @@\n                 \"Requires StatisticalCategoryDataset.\");\n         }\n         StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n-\n-        PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n     }\n                 \n     /**\n@@ -244,16 +234,7 @@\n                 dataArea, xAxisLocation);\n \n         int seriesCount = getRowCount();\n-        int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n+        PlotOrientation orient = plot.getOrientation();\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n@@ -262,7 +243,14 @@\n         double lclip = getLowerClip();\n         double uclip = getUpperClip();\n \n-        if (uclip <= 0.0) {  // cases 1, 2, 3 and 4\n+        if (value >= uclip) {\n+\t\t\tvalue = uclip;\n+\t\t} else {\n+\t\t\tif (value <= lclip) {\n+\t\t\t\tvalue = lclip;\n+\t\t\t}\n+\t\t}\n+\t\tif (uclip <= 0.0) {  // cases 1, 2, 3 and 4\n             if (value >= uclip) {\n                 return; // bar is not visible\n             }\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_274/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:42:45.075453827 -0500\n@@ -92,7 +92,9 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\tthis.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_274/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:42:45.079453942 -0500\n@@ -123,7 +123,8 @@\n      * @return The value.\n      */\n     public Number getValue(int row, int column) {\n-        return getMeanValue(row, column);\n+        double minval = Double.NaN;\n+\t\treturn getMeanValue(row, column);\n     }\n \n     /**\n@@ -270,7 +271,9 @@\n      * @return The column count.\n      */\n     public int getColumnCount() {\n-        return this.data.getColumnCount();\n+        List result = null;\n+\t\tdouble sumXX = 0;\n+\t\treturn this.data.getColumnCount();\n     }\n \n     /**\n@@ -377,9 +380,11 @@\n         Range result = null;\n         if (includeInterval) {\n             if (!Double.isNaN(this.minimumRangeValueIncStdDev) \n-                    && !Double.isNaN(this.maximumRangeValueIncStdDev))\n-            result = new Range(this.minimumRangeValueIncStdDev, \n-                    this.maximumRangeValueIncStdDev);\n+                    && !Double.isNaN(this.maximumRangeValueIncStdDev)) {\n+\t\t\t\tdouble sumX2 = 0.0;\n+\t\t\t\tresult = new Range(this.minimumRangeValueIncStdDev,\n+\t\t\t\t\t\tthis.maximumRangeValueIncStdDev);\n+\t\t\t}\n         }\n         else {\n             if (!Double.isNaN(this.minimumRangeValue) \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 273, 
          "faulty": "return this.data.getColumnCount();", 
          "type": "InsertBefore", 
          "seed": "List result=null;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 126, 
          "faulty": "return getMeanValue(row,column);", 
          "type": "InsertBefore", 
          "seed": "double minval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "int count=dataset.getColumnCount();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 273, 
          "faulty": "return this.data.getColumnCount();", 
          "type": "InsertBefore", 
          "seed": "double sumXX=0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 247, 
          "faulty": "int categoryCount=getColumnCount();", 
          "type": "Replace", 
          "seed": "PlotOrientation orient=plot.getOrientation();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "GeneralPath clip=new GeneralPath();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 265, 
          "faulty": "if (uclip <= 0.0) {\n  if (value >= uclip) {\n    return;\n  }\n  base=uclip;\n  if (value <= lclip) {\n    value=lclip;\n  }\n}\n else if (lclip <= 0.0) {\n  if (value >= uclip) {\n    value=uclip;\n  }\n else {\n    if (value <= lclip) {\n      value=lclip;\n    }\n  }\n}\n else {\n  if (value <= lclip) {\n    return;\n  }\n  base=getLowerClip();\n  if (value >= uclip) {\n    value=uclip;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "if (value >= uclip) {\n  value=uclip;\n}\n else {\n  if (value <= lclip) {\n    value=lclip;\n  }\n}"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 206, 
          "faulty": "PlotOrientation orientation=plot.getOrientation();", 
          "type": "Delete", 
          "seed": "GeneralPath leftWall=new GeneralPath();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 206, 
          "faulty": "PlotOrientation orientation=plot.getOrientation();", 
          "type": "InsertBefore", 
          "seed": "setPositiveItemLabelPositionFallback(null);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_283/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:42:52.375665719 -0500\n@@ -203,15 +203,7 @@\n         }\n         StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n-        PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n+        setPositiveItemLabelPositionFallback(null);\n     }\n                 \n     /**\n@@ -244,16 +236,7 @@\n                 dataArea, xAxisLocation);\n \n         int seriesCount = getRowCount();\n-        int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n+        PlotOrientation orient = plot.getOrientation();\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n@@ -262,7 +245,14 @@\n         double lclip = getLowerClip();\n         double uclip = getUpperClip();\n \n-        if (uclip <= 0.0) {  // cases 1, 2, 3 and 4\n+        if (value >= uclip) {\n+\t\t\tvalue = uclip;\n+\t\t} else {\n+\t\t\tif (value <= lclip) {\n+\t\t\t\tvalue = lclip;\n+\t\t\t}\n+\t\t}\n+\t\tif (uclip <= 0.0) {  // cases 1, 2, 3 and 4\n             if (value >= uclip) {\n                 return; // bar is not visible\n             }\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_283/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:42:52.379665834 -0500\n@@ -92,7 +92,9 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\tthis.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_283/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:42:52.379665834 -0500\n@@ -123,7 +123,8 @@\n      * @return The value.\n      */\n     public Number getValue(int row, int column) {\n-        return getMeanValue(row, column);\n+        double minval = Double.NaN;\n+\t\treturn getMeanValue(row, column);\n     }\n \n     /**\n@@ -270,7 +271,9 @@\n      * @return The column count.\n      */\n     public int getColumnCount() {\n-        return this.data.getColumnCount();\n+        List result = null;\n+\t\tdouble sumXX = 0;\n+\t\treturn this.data.getColumnCount();\n     }\n \n     /**\n@@ -377,9 +380,11 @@\n         Range result = null;\n         if (includeInterval) {\n             if (!Double.isNaN(this.minimumRangeValueIncStdDev) \n-                    && !Double.isNaN(this.maximumRangeValueIncStdDev))\n-            result = new Range(this.minimumRangeValueIncStdDev, \n-                    this.maximumRangeValueIncStdDev);\n+                    && !Double.isNaN(this.maximumRangeValueIncStdDev)) {\n+\t\t\t\tdouble sumX2 = 0.0;\n+\t\t\t\tresult = new Range(this.minimumRangeValueIncStdDev,\n+\t\t\t\t\t\tthis.maximumRangeValueIncStdDev);\n+\t\t\t}\n         }\n         else {\n             if (!Double.isNaN(this.minimumRangeValue) \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "Delete", 
          "seed": "this.minimumRangeValueIncStdDev=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Replace", 
          "seed": "double xx2=domainAxis.getCategoryEnd(column,getColumnCount(),dataArea,plot.getDomainAxisEdge());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 263, 
          "faulty": "double uclip=getUpperClip();", 
          "type": "InsertBefore", 
          "seed": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 126, 
          "faulty": "return getMeanValue(row,column);", 
          "type": "InsertBefore", 
          "seed": "double maxval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "InsertBefore", 
          "seed": "setPositiveItemLabelPositionFallback(null);"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 261, 
          "faulty": "double base=0.0;", 
          "type": "InsertBefore", 
          "seed": "double categoryEnd=domainAxis.getCategoryEnd(column,getColumnCount(),dataArea,plot.getDomainAxisEdge());"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_586/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:45:41.000566718 -0500\n@@ -204,7 +204,8 @@\n         StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n+        setPositiveItemLabelPositionFallback(null);\n+\t\tif (orientation == PlotOrientation.HORIZONTAL) {\n             drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n                     rangeAxis, statData, row, column);\n         }\n@@ -245,22 +246,25 @@\n \n         int seriesCount = getRowCount();\n         int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n+        double xx2 = domainAxis.getCategoryEnd(column, getColumnCount(),\n+\t\t\t\tdataArea, plot.getDomainAxisEdge());\n \n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n         double value = meanValue.doubleValue();\n-        double base = 0.0;\n+        double categoryEnd = domainAxis.getCategoryEnd(column,\n+\t\t\t\tgetColumnCount(), dataArea, plot.getDomainAxisEdge());\n+\t\tdouble base = 0.0;\n         double lclip = getLowerClip();\n-        double uclip = getUpperClip();\n+        if (seriesCount > 1) {\n+\t\t\tdouble seriesGap = dataArea.getHeight() * getItemMargin()\n+\t\t\t\t\t/ (categoryCount * (seriesCount - 1));\n+\t\t\trectY = rectY + row * (state.getBarWidth() + seriesGap);\n+\t\t} else {\n+\t\t\trectY = rectY + row * state.getBarWidth();\n+\t\t}\n+\t\tdouble uclip = getUpperClip();\n \n         if (uclip <= 0.0) {  // cases 1, 2, 3 and 4\n             if (value >= uclip) {\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_586/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:45:41.004566834 -0500\n@@ -107,9 +107,6 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getMean();\n-        }\n         return result;\n     }\n \n@@ -123,7 +120,8 @@\n      * @return The value.\n      */\n     public Number getValue(int row, int column) {\n-        return getMeanValue(row, column);\n+        double maxval = Double.NaN;\n+\t\treturn getMeanValue(row, column);\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 273, 
          "faulty": "return this.data.getColumnCount();", 
          "type": "InsertBefore", 
          "seed": "List result=null;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 126, 
          "faulty": "return getMeanValue(row,column);", 
          "type": "InsertBefore", 
          "seed": "double minval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "int count=dataset.getColumnCount();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 273, 
          "faulty": "return this.data.getColumnCount();", 
          "type": "InsertBefore", 
          "seed": "double sumXX=0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 247, 
          "faulty": "int categoryCount=getColumnCount();", 
          "type": "Replace", 
          "seed": "PlotOrientation orient=plot.getOrientation();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "InsertBefore", 
          "seed": "setNegativeItemLabelPositionFallback(null);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "InsertBefore", 
          "seed": "double minval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 263, 
          "faulty": "double uclip=getUpperClip();", 
          "type": "InsertBefore", 
          "seed": "if (value <= lclip) {\n  value=lclip;\n}"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "double uclip=getUpperClip();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 200, 
          "faulty": "if (!(data instanceof StatisticalCategoryDataset)) {\n  throw new IllegalArgumentException(\"Requires StatisticalCategoryDataset.\");\n}", 
          "type": "Delete", 
          "seed": "Stroke stroke=plot.getRangeGridlineStroke();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "InsertBefore", 
          "seed": "if (masd != null) {\n  result=masd.getStandardDeviation();\n}"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 111, 
          "faulty": "result=masd.getMean();", 
          "type": "Delete", 
          "seed": "int count=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_289/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:42:56.207776948 -0500\n@@ -196,22 +196,9 @@\n                          int column,\n                          int pass) {\n \n-        // defensive check\n-        if (!(data instanceof StatisticalCategoryDataset)) {\n-            throw new IllegalArgumentException(\n-                \"Requires StatisticalCategoryDataset.\");\n-        }\n         StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n     }\n                 \n     /**\n@@ -243,24 +230,19 @@\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                 dataArea, xAxisLocation);\n \n-        int seriesCount = getRowCount();\n-        int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n+        setNegativeItemLabelPositionFallback(null);\n+\t\tint seriesCount = getRowCount();\n+        PlotOrientation orient = plot.getOrientation();\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n         double value = meanValue.doubleValue();\n         double base = 0.0;\n         double lclip = getLowerClip();\n-        double uclip = getUpperClip();\n+        if (value <= lclip) {\n+\t\t\tvalue = lclip;\n+\t\t}\n+\t\tdouble uclip = getUpperClip();\n \n         if (uclip <= 0.0) {  // cases 1, 2, 3 and 4\n             if (value >= uclip) {\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_289/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:42:56.211777064 -0500\n@@ -92,7 +92,9 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\tthis.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_289/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:42:56.211777064 -0500\n@@ -107,8 +107,11 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getMean();\n+        double minval = Double.NaN;\n+\t\tif (masd != null) {\n+\t\t\tresult = masd.getStandardDeviation();\n+\t\t}\n+\t\tif (masd != null) {\n         }\n         return result;\n     }\n@@ -123,7 +126,8 @@\n      * @return The value.\n      */\n     public Number getValue(int row, int column) {\n-        return getMeanValue(row, column);\n+        double minval = Double.NaN;\n+\t\treturn getMeanValue(row, column);\n     }\n \n     /**\n@@ -270,7 +274,9 @@\n      * @return The column count.\n      */\n     public int getColumnCount() {\n-        return this.data.getColumnCount();\n+        List result = null;\n+\t\tdouble sumXX = 0;\n+\t\treturn this.data.getColumnCount();\n     }\n \n     /**\n@@ -377,9 +383,11 @@\n         Range result = null;\n         if (includeInterval) {\n             if (!Double.isNaN(this.minimumRangeValueIncStdDev) \n-                    && !Double.isNaN(this.maximumRangeValueIncStdDev))\n-            result = new Range(this.minimumRangeValueIncStdDev, \n-                    this.maximumRangeValueIncStdDev);\n+                    && !Double.isNaN(this.maximumRangeValueIncStdDev)) {\n+\t\t\t\tdouble sumX2 = 0.0;\n+\t\t\t\tresult = new Range(this.minimumRangeValueIncStdDev,\n+\t\t\t\t\t\tthis.maximumRangeValueIncStdDev);\n+\t\t\t}\n         }\n         else {\n             if (!Double.isNaN(this.minimumRangeValue) \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "Delete", 
          "seed": "this.minimumRangeValueIncStdDev=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "InsertBefore", 
          "seed": "g2.setStroke(plot.getRangeGridlineStroke());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "InsertBefore", 
          "seed": "g2.setStroke(plot.getRangeGridlineStroke());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return new Icon(){\n  public void paintIcon(  Component c,  Graphics g,  int x,  int y){\n    Graphics2D g2=(Graphics2D)g;\n    path.transform(AffineTransform.getTranslateInstance(x,y));\n    if (fillPaint != null) {\n      g2.setPaint(fillPaint);\n      g2.fill(path);\n    }\n    if (outlinePaint != null) {\n      g2.setPaint(outlinePaint);\n      g2.draw(path);\n    }\n    path.transform(AffineTransform.getTranslateInstance(-x,-y));\n  }\n  public int getIconWidth(){\n    return width;\n  }\n  public int getIconHeight(){\n    return height;\n  }\n}\n;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "InsertBefore", 
          "seed": "g2.setStroke(plot.getRangeGridlineStroke());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return new Icon(){\n  public void paintIcon(  Component c,  Graphics g,  int x,  int y){\n    Graphics2D g2=(Graphics2D)g;\n    path.transform(AffineTransform.getTranslateInstance(x,y));\n    if (fillPaint != null) {\n      g2.setPaint(fillPaint);\n      g2.fill(path);\n    }\n    if (outlinePaint != null) {\n      g2.setPaint(outlinePaint);\n      g2.draw(path);\n    }\n    path.transform(AffineTransform.getTranslateInstance(-x,-y));\n  }\n  public int getIconWidth(){\n    return width;\n  }\n  public int getIconHeight(){\n    return height;\n  }\n}\n;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 263, 
          "faulty": "double uclip=getUpperClip();", 
          "type": "InsertBefore", 
          "seed": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 246, 
          "faulty": "return this.data.getRowKey(row);", 
          "type": "InsertBefore", 
          "seed": "double x=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 173, 
          "faulty": "result=masd.getStandardDeviation();", 
          "type": "Replace", 
          "seed": "result=masd.getMean();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 172, 
          "faulty": "if (masd != null) {\n  result=masd.getStandardDeviation();\n}", 
          "type": "Delete", 
          "seed": "if (masd != null) {\n  result=masd.getMean();\n}"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "double barW0=domainAxis.getCategoryStart(column,getColumnCount(),dataArea,plot.getDomainAxisEdge());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 379, 
          "faulty": "if (!Double.isNaN(this.minimumRangeValueIncStdDev) && !Double.isNaN(this.maximumRangeValueIncStdDev)) result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX=0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 107, 
          "faulty": "Number result=null;", 
          "type": "Replace", 
          "seed": "Number result=null;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 173, 
          "faulty": "result=masd.getStandardDeviation();", 
          "type": "Delete", 
          "seed": "return HistogramType.FREQUENCY;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "InsertBefore", 
          "seed": "GeneralPath bottom=new GeneralPath();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_668/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:46:25.185851070 -0500\n@@ -201,7 +201,10 @@\n             throw new IllegalArgumentException(\n                 \"Requires StatisticalCategoryDataset.\");\n         }\n-        StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n+        g2.setStroke(plot.getRangeGridlineStroke());\n+\t\tg2.setStroke(plot.getRangeGridlineStroke());\n+\t\tg2.setStroke(plot.getRangeGridlineStroke());\n+\t\tStatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n         if (orientation == PlotOrientation.HORIZONTAL) {\n@@ -245,22 +248,20 @@\n \n         int seriesCount = getRowCount();\n         int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n         double value = meanValue.doubleValue();\n         double base = 0.0;\n         double lclip = getLowerClip();\n-        double uclip = getUpperClip();\n+        if (seriesCount > 1) {\n+\t\t\tdouble seriesGap = dataArea.getHeight() * getItemMargin()\n+\t\t\t\t\t/ (categoryCount * (seriesCount - 1));\n+\t\t\trectY = rectY + row * (state.getBarWidth() + seriesGap);\n+\t\t} else {\n+\t\t\trectY = rectY + row * state.getBarWidth();\n+\t\t}\n+\t\tdouble uclip = getUpperClip();\n \n         if (uclip <= 0.0) {  // cases 1, 2, 3 and 4\n             if (value >= uclip) {\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_668/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:46:25.189851187 -0500\n@@ -107,9 +107,6 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getMean();\n-        }\n         return result;\n     }\n \n@@ -169,9 +166,6 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getStandardDeviation();\n-        }\n         return result;\n     }\n \n@@ -243,7 +237,8 @@\n      * @return The row key.\n      */\n     public Comparable getRowKey(int row) {\n-        return this.data.getRowKey(row);\n+        double x = 0.0;\n+\t\treturn this.data.getRowKey(row);\n     }\n \n     /**\n@@ -376,7 +371,8 @@\n     public Range getRangeBounds(boolean includeInterval) {\n         Range result = null;\n         if (includeInterval) {\n-            if (!Double.isNaN(this.minimumRangeValueIncStdDev) \n+            double sumX = 0;\n+\t\t\tif (!Double.isNaN(this.minimumRangeValueIncStdDev) \n                     && !Double.isNaN(this.maximumRangeValueIncStdDev))\n             result = new Range(this.minimumRangeValueIncStdDev, \n                     this.maximumRangeValueIncStdDev);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 111, 
          "faulty": "result=masd.getMean();", 
          "type": "Delete", 
          "seed": "double maxRegularValue=Double.NEGATIVE_INFINITY;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 261, 
          "faulty": "double base=0.0;", 
          "type": "InsertBefore", 
          "seed": "double xx0=domainAxis.getCategoryStart(column,getColumnCount(),dataArea,plot.getDomainAxisEdge());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 172, 
          "faulty": "if (masd != null) {\n  result=masd.getStandardDeviation();\n}", 
          "type": "Replace", 
          "seed": "double maxOutlier=Double.NEGATIVE_INFINITY;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_444/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:44:27.902441867 -0500\n@@ -204,14 +204,6 @@\n         StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n     }\n                 \n     /**\n@@ -258,7 +250,9 @@\n         Number meanValue = dataset.getMeanValue(row, column);\n \n         double value = meanValue.doubleValue();\n-        double base = 0.0;\n+        double xx0 = domainAxis.getCategoryStart(column, getColumnCount(),\n+\t\t\t\tdataArea, plot.getDomainAxisEdge());\n+\t\tdouble base = 0.0;\n         double lclip = getLowerClip();\n         double uclip = getUpperClip();\n \n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_444/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:44:27.910442101 -0500\n@@ -92,7 +92,13 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_444/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:44:27.910442101 -0500\n@@ -108,7 +108,6 @@\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n-            result = masd.getMean();\n         }\n         return result;\n     }\n@@ -169,9 +168,7 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getStandardDeviation();\n-        }\n+        double maxOutlier = Double.NEGATIVE_INFINITY;\n         return result;\n     }\n \n@@ -377,9 +374,11 @@\n         Range result = null;\n         if (includeInterval) {\n             if (!Double.isNaN(this.minimumRangeValueIncStdDev) \n-                    && !Double.isNaN(this.maximumRangeValueIncStdDev))\n-            result = new Range(this.minimumRangeValueIncStdDev, \n-                    this.maximumRangeValueIncStdDev);\n+                    && !Double.isNaN(this.maximumRangeValueIncStdDev)) {\n+\t\t\t\tdouble sumX2 = 0.0;\n+\t\t\t\tresult = new Range(this.minimumRangeValueIncStdDev,\n+\t\t\t\t\t\tthis.maximumRangeValueIncStdDev);\n+\t\t\t}\n         }\n         else {\n             if (!Double.isNaN(this.minimumRangeValue) \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 175, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "double m=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 389, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "double minval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Replace", 
          "seed": "setIncludeBaseInRange(false);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 172, 
          "faulty": "if (masd != null) {\n  result=masd.getStandardDeviation();\n}", 
          "type": "InsertBefore", 
          "seed": "double sumX=0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 274, 
          "faulty": "if (lclip <= 0.0) {\n  if (value >= uclip) {\n    value=uclip;\n  }\n else {\n    if (value <= lclip) {\n      value=lclip;\n    }\n  }\n}\n else {\n  if (value <= lclip) {\n    return;\n  }\n  base=getLowerClip();\n  if (value >= uclip) {\n    value=uclip;\n  }\n}", 
          "type": "Delete", 
          "seed": "double yy2=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 169, 
          "faulty": "Number result=null;", 
          "type": "InsertBefore", 
          "seed": "boolean placed=false;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_383/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:43:49.913337546 -0500\n@@ -204,14 +204,7 @@\n         StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n+        setIncludeBaseInRange(false);\n     }\n                 \n     /**\n@@ -270,26 +263,8 @@\n             if (value <= lclip) {\n                 value = lclip;\n             }\n-        }\n-        else if (lclip <= 0.0) { // cases 5, 6, 7 and 8\n-            if (value >= uclip) {\n-                value = uclip;\n-            }\n-            else {\n-                if (value <= lclip) {\n-                    value = lclip;\n-                }\n-            }\n-        }\n-        else { // cases 9, 10, 11 and 12\n-            if (value <= lclip) {\n-                return; // bar is not visible\n-            }\n-            base = getLowerClip();\n-            if (value >= uclip) {\n-               value = uclip;\n-            }\n-        }\n+        } else\n+\t\t\t;\n \n         RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n         double transY1 = rangeAxis.valueToJava2D(base, dataArea, yAxisLocation);\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_383/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:43:49.917337662 -0500\n@@ -92,7 +92,8 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_383/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:43:49.921337779 -0500\n@@ -166,13 +166,16 @@\n      * @return The standard deviation.\n      */\n     public Number getStdDevValue(int row, int column) {\n-        Number result = null;\n+        boolean placed = false;\n+\t\tNumber result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n+        double sumX = 0;\n+\t\tif (masd != null) {\n             result = masd.getStandardDeviation();\n         }\n-        return result;\n+        double m = 0.0;\n+\t\treturn result;\n     }\n \n     /**\n@@ -386,7 +389,8 @@\n                     && !Double.isNaN(this.maximumRangeValue))\n             result = new Range(this.minimumRangeValue, this.maximumRangeValue);            \n         }\n-        return result;\n+        double minval = Double.NaN;\n+\t\treturn result;\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 261, 
          "faulty": "double base=0.0;", 
          "type": "InsertBefore", 
          "seed": "double xx0=domainAxis.getCategoryStart(column,getColumnCount(),dataArea,plot.getDomainAxisEdge());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 172, 
          "faulty": "if (masd != null) {\n  result=masd.getStandardDeviation();\n}", 
          "type": "Replace", 
          "seed": "double maxOutlier=Double.NEGATIVE_INFINITY;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 243, 
          "faulty": "double rectY=domainAxis.getCategoryStart(column,getColumnCount(),dataArea,xAxisLocation);", 
          "type": "InsertBefore", 
          "seed": "double y0=dataArea.getMaxY();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "Delete", 
          "seed": "this.minimumRangeValueIncStdDev=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "InsertBefore", 
          "seed": "double base=0.0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_489/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:44:52.439155122 -0500\n@@ -239,7 +239,8 @@\n                                      \n         RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n         \n-        // BAR Y\n+        double y0 = dataArea.getMaxY();\n+\t\t// BAR Y\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                 dataArea, xAxisLocation);\n \n@@ -251,14 +252,17 @@\n             rectY = rectY + row * (state.getBarWidth() + seriesGap);\n         }\n         else {\n-            rectY = rectY + row * state.getBarWidth();\n+            double base = 0.0;\n+\t\t\trectY = rectY + row * state.getBarWidth();\n         }\n \n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n         double value = meanValue.doubleValue();\n-        double base = 0.0;\n+        double xx0 = domainAxis.getCategoryStart(column, getColumnCount(),\n+\t\t\t\tdataArea, plot.getDomainAxisEdge());\n+\t\tdouble base = 0.0;\n         double lclip = getLowerClip();\n         double uclip = getUpperClip();\n \n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_489/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:44:52.443155240 -0500\n@@ -107,9 +107,6 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getMean();\n-        }\n         return result;\n     }\n \n@@ -169,9 +166,7 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getStandardDeviation();\n-        }\n+        double maxOutlier = Double.NEGATIVE_INFINITY;\n         return result;\n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "Replace", 
          "seed": "double result=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 107, 
          "faulty": "Number result=null;", 
          "type": "InsertBefore", 
          "seed": "this.maximumRangeValue=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 173, 
          "faulty": "result=masd.getStandardDeviation();", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 378, 
          "faulty": "if (includeInterval) {\n  if (!Double.isNaN(this.minimumRangeValueIncStdDev) && !Double.isNaN(this.maximumRangeValueIncStdDev))   result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);\n}\n else {\n  if (!Double.isNaN(this.minimumRangeValue) && !Double.isNaN(this.maximumRangeValue))   result=new Range(this.minimumRangeValue,this.maximumRangeValue);\n}", 
          "type": "InsertBefore", 
          "seed": "double minval=Double.NaN;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_83/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:40:59.560391094 -0500\n@@ -204,14 +204,6 @@\n         StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n     }\n                 \n     /**\n@@ -243,17 +235,8 @@\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                 dataArea, xAxisLocation);\n \n-        int seriesCount = getRowCount();\n+        double result = Double.NaN;\n         int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_83/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:40:59.564391209 -0500\n@@ -92,7 +92,9 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\tthis.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_83/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:40:59.564391209 -0500\n@@ -104,7 +104,8 @@\n      * @return The mean value.\n      */\n     public Number getMeanValue(int row, int column) {\n-        Number result = null;\n+        this.maximumRangeValue = Double.NaN;\n+\t\tNumber result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n@@ -170,7 +171,8 @@\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n-            result = masd.getStandardDeviation();\n+            double sumX2 = 0.0;\n+\t\t\tresult = masd.getStandardDeviation();\n         }\n         return result;\n     }\n@@ -375,7 +377,8 @@\n      */\n     public Range getRangeBounds(boolean includeInterval) {\n         Range result = null;\n-        if (includeInterval) {\n+        double minval = Double.NaN;\n+\t\tif (includeInterval) {\n             if (!Double.isNaN(this.minimumRangeValueIncStdDev) \n                     && !Double.isNaN(this.maximumRangeValueIncStdDev))\n             result = new Range(this.minimumRangeValueIncStdDev, \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 170, 
          "faulty": "MeanAndStandardDeviation masd=(MeanAndStandardDeviation)this.data.getObject(row,column);", 
          "type": "InsertBefore", 
          "seed": "double minRegularValue=Double.POSITIVE_INFINITY;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_50/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:40:39.975822602 -0500\n@@ -204,14 +204,6 @@\n         StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n     }\n                 \n     /**\n@@ -245,15 +237,6 @@\n \n         int seriesCount = getRowCount();\n         int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_50/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:40:39.975822602 -0500\n@@ -92,7 +92,9 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\tthis.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_50/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:40:39.979822717 -0500\n@@ -167,7 +167,8 @@\n      */\n     public Number getStdDevValue(int row, int column) {\n         Number result = null;\n-        MeanAndStandardDeviation masd \n+        double minRegularValue = Double.POSITIVE_INFINITY;\n+\t\tMeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n             result = masd.getStandardDeviation();\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 261, 
          "faulty": "double base=0.0;", 
          "type": "InsertBefore", 
          "seed": "double xx0=domainAxis.getCategoryStart(column,getColumnCount(),dataArea,plot.getDomainAxisEdge());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 172, 
          "faulty": "if (masd != null) {\n  result=masd.getStandardDeviation();\n}", 
          "type": "Replace", 
          "seed": "double maxOutlier=Double.NEGATIVE_INFINITY;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 243, 
          "faulty": "double rectY=domainAxis.getCategoryStart(column,getColumnCount(),dataArea,xAxisLocation);", 
          "type": "InsertBefore", 
          "seed": "double y0=dataArea.getMaxY();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "Delete", 
          "seed": "this.minimumRangeValueIncStdDev=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 111, 
          "faulty": "result=masd.getMean();", 
          "type": "InsertBefore", 
          "seed": "result=masd.getStandardDeviation();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Replace", 
          "seed": "double xx2=domainAxis.getCategoryEnd(column,getColumnCount(),dataArea,plot.getDomainAxisEdge());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 126, 
          "faulty": "return getMeanValue(row,column);", 
          "type": "InsertBefore", 
          "seed": "double max=-Double.MAX_VALUE;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_533/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:45:13.639771392 -0500\n@@ -204,14 +204,6 @@\n         StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n     }\n                 \n     /**\n@@ -239,26 +231,23 @@\n                                      \n         RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n         \n-        // BAR Y\n+        double y0 = dataArea.getMaxY();\n+\t\t// BAR Y\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                 dataArea, xAxisLocation);\n \n         int seriesCount = getRowCount();\n         int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n+        double xx2 = domainAxis.getCategoryEnd(column, getColumnCount(),\n+\t\t\t\tdataArea, plot.getDomainAxisEdge());\n \n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n         double value = meanValue.doubleValue();\n-        double base = 0.0;\n+        double xx0 = domainAxis.getCategoryStart(column, getColumnCount(),\n+\t\t\t\tdataArea, plot.getDomainAxisEdge());\n+\t\tdouble base = 0.0;\n         double lclip = getLowerClip();\n         double uclip = getUpperClip();\n \n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_533/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:45:13.639771392 -0500\n@@ -92,7 +92,9 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\tthis.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_533/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:45:13.643771510 -0500\n@@ -107,9 +107,6 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getMean();\n-        }\n         return result;\n     }\n \n@@ -123,7 +120,8 @@\n      * @return The value.\n      */\n     public Number getValue(int row, int column) {\n-        return getMeanValue(row, column);\n+        double max = -Double.MAX_VALUE;\n+\t\treturn getMeanValue(row, column);\n     }\n \n     /**\n@@ -169,9 +167,7 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getStandardDeviation();\n-        }\n+        double maxOutlier = Double.NEGATIVE_INFINITY;\n         return result;\n     }\n \n@@ -377,9 +373,11 @@\n         Range result = null;\n         if (includeInterval) {\n             if (!Double.isNaN(this.minimumRangeValueIncStdDev) \n-                    && !Double.isNaN(this.maximumRangeValueIncStdDev))\n-            result = new Range(this.minimumRangeValueIncStdDev, \n-                    this.maximumRangeValueIncStdDev);\n+                    && !Double.isNaN(this.maximumRangeValueIncStdDev)) {\n+\t\t\t\tdouble sumX2 = 0.0;\n+\t\t\t\tresult = new Range(this.minimumRangeValueIncStdDev,\n+\t\t\t\t\t\tthis.maximumRangeValueIncStdDev);\n+\t\t\t}\n         }\n         else {\n             if (!Double.isNaN(this.minimumRangeValue) \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "Delete", 
          "seed": "this.minimumRangeValueIncStdDev=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 111, 
          "faulty": "result=masd.getMean();", 
          "type": "InsertBefore", 
          "seed": "result=masd.getStandardDeviation();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Replace", 
          "seed": "RectangleEdge edge=plot.getRangeAxisEdge();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 126, 
          "faulty": "return getMeanValue(row,column);", 
          "type": "InsertBefore", 
          "seed": "double maxval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 173, 
          "faulty": "result=masd.getStandardDeviation();", 
          "type": "Replace", 
          "seed": "int count=0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "double m=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 104, 
          "faulty": "return this.standardDeviation;", 
          "type": "InsertBefore", 
          "seed": "double sumXX=0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "Delete", 
          "seed": "Paint itemPaint=getItemPaint(row,column);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_671/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:46:27.009904089 -0500\n@@ -201,17 +201,8 @@\n             throw new IllegalArgumentException(\n                 \"Requires StatisticalCategoryDataset.\");\n         }\n-        StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n-\n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n+        RectangleEdge edge = plot.getRangeAxisEdge();\n     }\n                 \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_671/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:46:27.013904206 -0500\n@@ -92,7 +92,8 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        double m = 0.0;\n+\t\treturn this.mean;\n     }\n \n     /**\n@@ -101,7 +102,8 @@\n      * @return The standard deviation.\n      */\n     public Number getStandardDeviation() {\n-        return this.standardDeviation;\n+        double sumXX = 0;\n+\t\treturn this.standardDeviation;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_671/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:46:27.013904206 -0500\n@@ -107,9 +107,6 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getMean();\n-        }\n         return result;\n     }\n \n@@ -123,7 +120,8 @@\n      * @return The value.\n      */\n     public Number getValue(int row, int column) {\n-        return getMeanValue(row, column);\n+        double maxval = Double.NaN;\n+\t\treturn getMeanValue(row, column);\n     }\n \n     /**\n@@ -170,7 +168,7 @@\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n-            result = masd.getStandardDeviation();\n+            int count = 0;\n         }\n         return result;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "Delete", 
          "seed": "this.minimumRangeValueIncStdDev=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "InsertBefore", 
          "seed": "g2.setStroke(plot.getRangeGridlineStroke());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "InsertBefore", 
          "seed": "g2.setStroke(plot.getRangeGridlineStroke());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 243, 
          "faulty": "double rectY=domainAxis.getCategoryStart(column,getColumnCount(),dataArea,xAxisLocation);", 
          "type": "InsertBefore", 
          "seed": "double currentItemMargin=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 104, 
          "faulty": "return this.standardDeviation;", 
          "type": "InsertBefore", 
          "seed": "double sumXX=0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return new Icon(){\n  public void paintIcon(  Component c,  Graphics g,  int x,  int y){\n    Graphics2D g2=(Graphics2D)g;\n    path.transform(AffineTransform.getTranslateInstance(x,y));\n    if (fillPaint != null) {\n      g2.setPaint(fillPaint);\n      g2.fill(path);\n    }\n    if (outlinePaint != null) {\n      g2.setPaint(outlinePaint);\n      g2.draw(path);\n    }\n    path.transform(AffineTransform.getTranslateInstance(-x,-y));\n  }\n  public int getIconWidth(){\n    return width;\n  }\n  public int getIconHeight(){\n    return height;\n  }\n}\n;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 263, 
          "faulty": "double uclip=getUpperClip();", 
          "type": "InsertBefore", 
          "seed": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 126, 
          "faulty": "return getMeanValue(row,column);", 
          "type": "InsertBefore", 
          "seed": "double maxval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 169, 
          "faulty": "Number result=null;", 
          "type": "InsertBefore", 
          "seed": "int count=0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 243, 
          "faulty": "double rectY=domainAxis.getCategoryStart(column,getColumnCount(),dataArea,xAxisLocation);", 
          "type": "InsertBefore", 
          "seed": "g2.setStroke(getItemOutlineStroke(row,column));"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 246, 
          "faulty": "return this.data.getRowKey(row);", 
          "type": "InsertBefore", 
          "seed": "double x=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 173, 
          "faulty": "result=masd.getStandardDeviation();", 
          "type": "Replace", 
          "seed": "result=masd.getMean();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 172, 
          "faulty": "if (masd != null) {\n  result=masd.getStandardDeviation();\n}", 
          "type": "Delete", 
          "seed": "if (masd != null) {\n  result=masd.getMean();\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_597/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:45:46.940739385 -0500\n@@ -201,7 +201,9 @@\n             throw new IllegalArgumentException(\n                 \"Requires StatisticalCategoryDataset.\");\n         }\n-        StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n+        g2.setStroke(plot.getRangeGridlineStroke());\n+\t\tg2.setStroke(plot.getRangeGridlineStroke());\n+\t\tStatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n         if (orientation == PlotOrientation.HORIZONTAL) {\n@@ -239,28 +241,28 @@\n                                      \n         RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n         \n-        // BAR Y\n+        double currentItemMargin = 0.0;\n+\t\tg2.setStroke(getItemOutlineStroke(row, column));\n+\t\t// BAR Y\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                 dataArea, xAxisLocation);\n \n         int seriesCount = getRowCount();\n         int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n         double value = meanValue.doubleValue();\n         double base = 0.0;\n         double lclip = getLowerClip();\n-        double uclip = getUpperClip();\n+        if (seriesCount > 1) {\n+\t\t\tdouble seriesGap = dataArea.getHeight() * getItemMargin()\n+\t\t\t\t\t/ (categoryCount * (seriesCount - 1));\n+\t\t\trectY = rectY + row * (state.getBarWidth() + seriesGap);\n+\t\t} else {\n+\t\t\trectY = rectY + row * state.getBarWidth();\n+\t\t}\n+\t\tdouble uclip = getUpperClip();\n \n         if (uclip <= 0.0) {  // cases 1, 2, 3 and 4\n             if (value >= uclip) {\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_597/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:45:46.944739501 -0500\n@@ -101,7 +101,8 @@\n      * @return The standard deviation.\n      */\n     public Number getStandardDeviation() {\n-        return this.standardDeviation;\n+        double sumXX = 0;\n+\t\treturn this.standardDeviation;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_597/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:45:46.944739501 -0500\n@@ -107,9 +107,6 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getMean();\n-        }\n         return result;\n     }\n \n@@ -123,7 +120,8 @@\n      * @return The value.\n      */\n     public Number getValue(int row, int column) {\n-        return getMeanValue(row, column);\n+        double maxval = Double.NaN;\n+\t\treturn getMeanValue(row, column);\n     }\n \n     /**\n@@ -166,12 +164,10 @@\n      * @return The standard deviation.\n      */\n     public Number getStdDevValue(int row, int column) {\n-        Number result = null;\n+        int count = 0;\n+\t\tNumber result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getStandardDeviation();\n-        }\n         return result;\n     }\n \n@@ -243,7 +239,8 @@\n      * @return The row key.\n      */\n     public Comparable getRowKey(int row) {\n-        return this.data.getRowKey(row);\n+        double x = 0.0;\n+\t\treturn this.data.getRowKey(row);\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "Delete", 
          "seed": "this.minimumRangeValueIncStdDev=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "InsertBefore", 
          "seed": "g2.setStroke(plot.getRangeGridlineStroke());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "InsertBefore", 
          "seed": "g2.setStroke(plot.getRangeGridlineStroke());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return new Icon(){\n  public void paintIcon(  Component c,  Graphics g,  int x,  int y){\n    Graphics2D g2=(Graphics2D)g;\n    path.transform(AffineTransform.getTranslateInstance(x,y));\n    if (fillPaint != null) {\n      g2.setPaint(fillPaint);\n      g2.fill(path);\n    }\n    if (outlinePaint != null) {\n      g2.setPaint(outlinePaint);\n      g2.draw(path);\n    }\n    path.transform(AffineTransform.getTranslateInstance(-x,-y));\n  }\n  public int getIconWidth(){\n    return width;\n  }\n  public int getIconHeight(){\n    return height;\n  }\n}\n;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "InsertBefore", 
          "seed": "g2.setStroke(plot.getRangeGridlineStroke());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return new Icon(){\n  public void paintIcon(  Component c,  Graphics g,  int x,  int y){\n    Graphics2D g2=(Graphics2D)g;\n    path.transform(AffineTransform.getTranslateInstance(x,y));\n    if (fillPaint != null) {\n      g2.setPaint(fillPaint);\n      g2.fill(path);\n    }\n    if (outlinePaint != null) {\n      g2.setPaint(outlinePaint);\n      g2.draw(path);\n    }\n    path.transform(AffineTransform.getTranslateInstance(-x,-y));\n  }\n  public int getIconWidth(){\n    return width;\n  }\n  public int getIconHeight(){\n    return height;\n  }\n}\n;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 263, 
          "faulty": "double uclip=getUpperClip();", 
          "type": "InsertBefore", 
          "seed": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "InsertBefore", 
          "seed": "g2.setStroke(plot.getRangeGridlineStroke());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 263, 
          "faulty": "double uclip=getUpperClip();", 
          "type": "InsertBefore", 
          "seed": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 246, 
          "faulty": "return this.data.getRowKey(row);", 
          "type": "InsertBefore", 
          "seed": "double x=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 173, 
          "faulty": "result=masd.getStandardDeviation();", 
          "type": "Replace", 
          "seed": "result=masd.getMean();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Replace", 
          "seed": "RectangleEdge edge=plot.getRangeAxisEdge();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Replace", 
          "seed": "RectangleEdge edge=plot.getRangeAxisEdge();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 126, 
          "faulty": "return getMeanValue(row,column);", 
          "type": "InsertBefore", 
          "seed": "double maxval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 173, 
          "faulty": "result=masd.getStandardDeviation();", 
          "type": "Replace", 
          "seed": "int count=0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "double m=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 104, 
          "faulty": "return this.standardDeviation;", 
          "type": "InsertBefore", 
          "seed": "double sumXX=0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "Delete", 
          "seed": "Paint itemPaint=getItemPaint(row,column);"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 265, 
          "faulty": "if (uclip <= 0.0) {\n  if (value >= uclip) {\n    return;\n  }\n  base=uclip;\n  if (value <= lclip) {\n    value=lclip;\n  }\n}\n else if (lclip <= 0.0) {\n  if (value >= uclip) {\n    value=uclip;\n  }\n else {\n    if (value <= lclip) {\n      value=lclip;\n    }\n  }\n}\n else {\n  if (value <= lclip) {\n    return;\n  }\n  base=getLowerClip();\n  if (value >= uclip) {\n    value=uclip;\n  }\n}", 
          "type": "Delete", 
          "seed": "double barW0=domainAxis.getCategoryStart(column,getColumnCount(),dataArea,plot.getDomainAxisEdge());"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_683/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:46:34.338117099 -0500\n@@ -201,17 +201,12 @@\n             throw new IllegalArgumentException(\n                 \"Requires StatisticalCategoryDataset.\");\n         }\n-        StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n-\n-        PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n+        g2.setStroke(plot.getRangeGridlineStroke());\n+\t\tg2.setStroke(plot.getRangeGridlineStroke());\n+\t\tg2.setStroke(plot.getRangeGridlineStroke());\n+\t\tg2.setStroke(plot.getRangeGridlineStroke());\n+\t\tPlotOrientation orientation = plot.getOrientation();\n+        RectangleEdge edge = plot.getRangeAxisEdge();\n     }\n                 \n     /**\n@@ -245,51 +240,27 @@\n \n         int seriesCount = getRowCount();\n         int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n         double value = meanValue.doubleValue();\n         double base = 0.0;\n         double lclip = getLowerClip();\n-        double uclip = getUpperClip();\n-\n-        if (uclip <= 0.0) {  // cases 1, 2, 3 and 4\n-            if (value >= uclip) {\n-                return; // bar is not visible\n-            }\n-            base = uclip;\n-            if (value <= lclip) {\n-                value = lclip;\n-            }\n-        }\n-        else if (lclip <= 0.0) { // cases 5, 6, 7 and 8\n-            if (value >= uclip) {\n-                value = uclip;\n-            }\n-            else {\n-                if (value <= lclip) {\n-                    value = lclip;\n-                }\n-            }\n-        }\n-        else { // cases 9, 10, 11 and 12\n-            if (value <= lclip) {\n-                return; // bar is not visible\n-            }\n-            base = getLowerClip();\n-            if (value >= uclip) {\n-               value = uclip;\n-            }\n-        }\n+        if (seriesCount > 1) {\n+\t\t\tdouble seriesGap = dataArea.getHeight() * getItemMargin()\n+\t\t\t\t\t/ (categoryCount * (seriesCount - 1));\n+\t\t\trectY = rectY + row * (state.getBarWidth() + seriesGap);\n+\t\t} else {\n+\t\t\trectY = rectY + row * state.getBarWidth();\n+\t\t}\n+\t\tif (seriesCount > 1) {\n+\t\t\tdouble seriesGap = dataArea.getHeight() * getItemMargin()\n+\t\t\t\t\t/ (categoryCount * (seriesCount - 1));\n+\t\t\trectY = rectY + row * (state.getBarWidth() + seriesGap);\n+\t\t} else {\n+\t\t\trectY = rectY + row * state.getBarWidth();\n+\t\t}\n+\t\tdouble uclip = getUpperClip();\n \n         RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n         double transY1 = rangeAxis.valueToJava2D(base, dataArea, yAxisLocation);\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_683/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:46:34.342117215 -0500\n@@ -92,7 +92,8 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        double m = 0.0;\n+\t\treturn this.mean;\n     }\n \n     /**\n@@ -101,7 +102,8 @@\n      * @return The standard deviation.\n      */\n     public Number getStandardDeviation() {\n-        return this.standardDeviation;\n+        double sumXX = 0;\n+\t\treturn this.standardDeviation;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_683/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:46:34.342117215 -0500\n@@ -107,9 +107,6 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getMean();\n-        }\n         return result;\n     }\n \n@@ -123,7 +120,8 @@\n      * @return The value.\n      */\n     public Number getValue(int row, int column) {\n-        return getMeanValue(row, column);\n+        double maxval = Double.NaN;\n+\t\treturn getMeanValue(row, column);\n     }\n \n     /**\n@@ -170,7 +168,7 @@\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n-            result = masd.getStandardDeviation();\n+            int count = 0;\n         }\n         return result;\n     }\n@@ -243,7 +241,8 @@\n      * @return The row key.\n      */\n     public Comparable getRowKey(int row) {\n-        return this.data.getRowKey(row);\n+        double x = 0.0;\n+\t\treturn this.data.getRowKey(row);\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "Delete", 
          "seed": "this.minimumRangeValueIncStdDev=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 111, 
          "faulty": "result=masd.getMean();", 
          "type": "InsertBefore", 
          "seed": "result=masd.getStandardDeviation();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Replace", 
          "seed": "double xx2=domainAxis.getCategoryEnd(column,getColumnCount(),dataArea,plot.getDomainAxisEdge());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "InsertBefore", 
          "seed": "g2.setStroke(plot.getRangeGridlineStroke());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Replace", 
          "seed": "RectangleEdge edge=plot.getRangeAxisEdge();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_554/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:45:23.444056386 -0500\n@@ -201,17 +201,11 @@\n             throw new IllegalArgumentException(\n                 \"Requires StatisticalCategoryDataset.\");\n         }\n-        StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n+        g2.setStroke(plot.getRangeGridlineStroke());\n+\t\tStatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n+        RectangleEdge edge = plot.getRangeAxisEdge();\n     }\n                 \n     /**\n@@ -245,14 +239,8 @@\n \n         int seriesCount = getRowCount();\n         int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n+        double xx2 = domainAxis.getCategoryEnd(column, getColumnCount(),\n+\t\t\t\tdataArea, plot.getDomainAxisEdge());\n \n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_554/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:45:23.448056501 -0500\n@@ -107,9 +107,6 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getMean();\n-        }\n         return result;\n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 172, 
          "faulty": "if (masd != null) {\n  result=masd.getStandardDeviation();\n}", 
          "type": "InsertBefore", 
          "seed": "double sumX=0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 274, 
          "faulty": "if (lclip <= 0.0) {\n  if (value >= uclip) {\n    value=uclip;\n  }\n else {\n    if (value <= lclip) {\n      value=lclip;\n    }\n  }\n}\n else {\n  if (value <= lclip) {\n    return;\n  }\n  base=getLowerClip();\n  if (value >= uclip) {\n    value=uclip;\n  }\n}", 
          "type": "Delete", 
          "seed": "double yy2=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 108, 
          "faulty": "MeanAndStandardDeviation masd=(MeanAndStandardDeviation)this.data.getObject(row,column);", 
          "type": "InsertBefore", 
          "seed": "double sumY=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_368/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:43:40.421061606 -0500\n@@ -204,14 +204,6 @@\n         StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n     }\n                 \n     /**\n@@ -245,15 +237,6 @@\n \n         int seriesCount = getRowCount();\n         int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n@@ -270,26 +253,8 @@\n             if (value <= lclip) {\n                 value = lclip;\n             }\n-        }\n-        else if (lclip <= 0.0) { // cases 5, 6, 7 and 8\n-            if (value >= uclip) {\n-                value = uclip;\n-            }\n-            else {\n-                if (value <= lclip) {\n-                    value = lclip;\n-                }\n-            }\n-        }\n-        else { // cases 9, 10, 11 and 12\n-            if (value <= lclip) {\n-                return; // bar is not visible\n-            }\n-            base = getLowerClip();\n-            if (value >= uclip) {\n-               value = uclip;\n-            }\n-        }\n+        } else\n+\t\t\t;\n \n         RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n         double transY1 = rangeAxis.valueToJava2D(base, dataArea, yAxisLocation);\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_368/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:43:40.421061606 -0500\n@@ -92,7 +92,10 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_368/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:43:40.425061723 -0500\n@@ -105,7 +105,8 @@\n      */\n     public Number getMeanValue(int row, int column) {\n         Number result = null;\n-        MeanAndStandardDeviation masd \n+        double sumY = 0.0;\n+\t\tMeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n             result = masd.getMean();\n@@ -169,7 +170,8 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n+        double sumX = 0;\n+\t\tif (masd != null) {\n             result = masd.getStandardDeviation();\n         }\n         return result;\n@@ -377,9 +379,11 @@\n         Range result = null;\n         if (includeInterval) {\n             if (!Double.isNaN(this.minimumRangeValueIncStdDev) \n-                    && !Double.isNaN(this.maximumRangeValueIncStdDev))\n-            result = new Range(this.minimumRangeValueIncStdDev, \n-                    this.maximumRangeValueIncStdDev);\n+                    && !Double.isNaN(this.maximumRangeValueIncStdDev)) {\n+\t\t\t\tdouble sumX2 = 0.0;\n+\t\t\t\tresult = new Range(this.minimumRangeValueIncStdDev,\n+\t\t\t\t\t\tthis.maximumRangeValueIncStdDev);\n+\t\t\t}\n         }\n         else {\n             if (!Double.isNaN(this.minimumRangeValue) \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "Delete", 
          "seed": "this.minimumRangeValueIncStdDev=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 111, 
          "faulty": "result=masd.getMean();", 
          "type": "InsertBefore", 
          "seed": "result=masd.getStandardDeviation();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Replace", 
          "seed": "double xx2=domainAxis.getCategoryEnd(column,getColumnCount(),dataArea,plot.getDomainAxisEdge());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "InsertBefore", 
          "seed": "g2.setStroke(plot.getRangeGridlineStroke());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 243, 
          "faulty": "double rectY=domainAxis.getCategoryStart(column,getColumnCount(),dataArea,xAxisLocation);", 
          "type": "InsertBefore", 
          "seed": "double currentItemMargin=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "InsertBefore", 
          "seed": "g2.setStroke(plot.getRangeGridlineStroke());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return new Icon(){\n  public void paintIcon(  Component c,  Graphics g,  int x,  int y){\n    Graphics2D g2=(Graphics2D)g;\n    path.transform(AffineTransform.getTranslateInstance(x,y));\n    if (fillPaint != null) {\n      g2.setPaint(fillPaint);\n      g2.fill(path);\n    }\n    if (outlinePaint != null) {\n      g2.setPaint(outlinePaint);\n      g2.draw(path);\n    }\n    path.transform(AffineTransform.getTranslateInstance(-x,-y));\n  }\n  public int getIconWidth(){\n    return width;\n  }\n  public int getIconHeight(){\n    return height;\n  }\n}\n;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 263, 
          "faulty": "double uclip=getUpperClip();", 
          "type": "InsertBefore", 
          "seed": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "Delete", 
          "seed": "this.minimumRangeValueIncStdDev=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 126, 
          "faulty": "return getMeanValue(row,column);", 
          "type": "InsertBefore", 
          "seed": "double maxval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 169, 
          "faulty": "Number result=null;", 
          "type": "Replace", 
          "seed": "Number result=null;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "InsertBefore", 
          "seed": "Number n=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 274, 
          "faulty": "if (lclip <= 0.0) {\n  if (value >= uclip) {\n    value=uclip;\n  }\n else {\n    if (value <= lclip) {\n      value=lclip;\n    }\n  }\n}\n else {\n  if (value <= lclip) {\n    return;\n  }\n  base=getLowerClip();\n  if (value >= uclip) {\n    value=uclip;\n  }\n}", 
          "type": "Delete", 
          "seed": "Number v=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Replace", 
          "seed": "Stroke outlineStroke=plot.getOutlineStroke();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_608/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:45:52.816910192 -0500\n@@ -201,17 +201,12 @@\n             throw new IllegalArgumentException(\n                 \"Requires StatisticalCategoryDataset.\");\n         }\n-        StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n+        g2.setStroke(plot.getRangeGridlineStroke());\n+\t\tg2.setStroke(plot.getRangeGridlineStroke());\n+\t\tStatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n+        Stroke outlineStroke = plot.getOutlineStroke();\n     }\n                 \n     /**\n@@ -239,28 +234,28 @@\n                                      \n         RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n         \n-        // BAR Y\n+        double currentItemMargin = 0.0;\n+\t\t// BAR Y\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                 dataArea, xAxisLocation);\n \n         int seriesCount = getRowCount();\n         int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n-        // BAR X\n+        Number n = dataset.getValue(row, column);\n+\t\t// BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n         double value = meanValue.doubleValue();\n         double base = 0.0;\n         double lclip = getLowerClip();\n-        double uclip = getUpperClip();\n+        if (seriesCount > 1) {\n+\t\t\tdouble seriesGap = dataArea.getHeight() * getItemMargin()\n+\t\t\t\t\t/ (categoryCount * (seriesCount - 1));\n+\t\t\trectY = rectY + row * (state.getBarWidth() + seriesGap);\n+\t\t} else {\n+\t\t\trectY = rectY + row * state.getBarWidth();\n+\t\t}\n+\t\tdouble uclip = getUpperClip();\n \n         if (uclip <= 0.0) {  // cases 1, 2, 3 and 4\n             if (value >= uclip) {\n@@ -270,26 +265,8 @@\n             if (value <= lclip) {\n                 value = lclip;\n             }\n-        }\n-        else if (lclip <= 0.0) { // cases 5, 6, 7 and 8\n-            if (value >= uclip) {\n-                value = uclip;\n-            }\n-            else {\n-                if (value <= lclip) {\n-                    value = lclip;\n-                }\n-            }\n-        }\n-        else { // cases 9, 10, 11 and 12\n-            if (value <= lclip) {\n-                return; // bar is not visible\n-            }\n-            base = getLowerClip();\n-            if (value >= uclip) {\n-               value = uclip;\n-            }\n-        }\n+        } else\n+\t\t\t;\n \n         RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n         double transY1 = rangeAxis.valueToJava2D(base, dataArea, yAxisLocation);\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_608/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:45:52.816910192 -0500\n@@ -107,9 +107,6 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getMean();\n-        }\n         return result;\n     }\n \n@@ -123,7 +120,8 @@\n      * @return The value.\n      */\n     public Number getValue(int row, int column) {\n-        return getMeanValue(row, column);\n+        double maxval = Double.NaN;\n+\t\treturn getMeanValue(row, column);\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 273, 
          "faulty": "return this.data.getColumnCount();", 
          "type": "InsertBefore", 
          "seed": "List result=null;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 126, 
          "faulty": "return getMeanValue(row,column);", 
          "type": "InsertBefore", 
          "seed": "double minval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "int count=dataset.getColumnCount();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 200, 
          "faulty": "if (!(data instanceof StatisticalCategoryDataset)) {\n  throw new IllegalArgumentException(\"Requires StatisticalCategoryDataset.\");\n}", 
          "type": "Delete", 
          "seed": "GeneralPath right=new GeneralPath();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_221/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:42:18.666687290 -0500\n@@ -196,22 +196,9 @@\n                          int column,\n                          int pass) {\n \n-        // defensive check\n-        if (!(data instanceof StatisticalCategoryDataset)) {\n-            throw new IllegalArgumentException(\n-                \"Requires StatisticalCategoryDataset.\");\n-        }\n         StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n     }\n                 \n     /**\n@@ -251,7 +238,6 @@\n             rectY = rectY + row * (state.getBarWidth() + seriesGap);\n         }\n         else {\n-            rectY = rectY + row * state.getBarWidth();\n         }\n \n         // BAR X\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_221/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:42:18.670687405 -0500\n@@ -92,7 +92,8 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_221/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:42:18.670687405 -0500\n@@ -123,7 +123,8 @@\n      * @return The value.\n      */\n     public Number getValue(int row, int column) {\n-        return getMeanValue(row, column);\n+        double minval = Double.NaN;\n+\t\treturn getMeanValue(row, column);\n     }\n \n     /**\n@@ -270,7 +271,8 @@\n      * @return The column count.\n      */\n     public int getColumnCount() {\n-        return this.data.getColumnCount();\n+        List result = null;\n+\t\treturn this.data.getColumnCount();\n     }\n \n     /**\n@@ -377,9 +379,11 @@\n         Range result = null;\n         if (includeInterval) {\n             if (!Double.isNaN(this.minimumRangeValueIncStdDev) \n-                    && !Double.isNaN(this.maximumRangeValueIncStdDev))\n-            result = new Range(this.minimumRangeValueIncStdDev, \n-                    this.maximumRangeValueIncStdDev);\n+                    && !Double.isNaN(this.maximumRangeValueIncStdDev)) {\n+\t\t\t\tdouble sumX2 = 0.0;\n+\t\t\t\tresult = new Range(this.minimumRangeValueIncStdDev,\n+\t\t\t\t\t\tthis.maximumRangeValueIncStdDev);\n+\t\t\t}\n         }\n         else {\n             if (!Double.isNaN(this.minimumRangeValue) \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 273, 
          "faulty": "return this.data.getColumnCount();", 
          "type": "InsertBefore", 
          "seed": "List result=null;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 126, 
          "faulty": "return getMeanValue(row,column);", 
          "type": "InsertBefore", 
          "seed": "double minval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "int count=dataset.getColumnCount();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 273, 
          "faulty": "return this.data.getColumnCount();", 
          "type": "InsertBefore", 
          "seed": "double sumXX=0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 247, 
          "faulty": "int categoryCount=getColumnCount();", 
          "type": "Replace", 
          "seed": "PlotOrientation orient=plot.getOrientation();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "InsertBefore", 
          "seed": "setNegativeItemLabelPositionFallback(null);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "InsertBefore", 
          "seed": "double minval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 263, 
          "faulty": "double uclip=getUpperClip();", 
          "type": "InsertBefore", 
          "seed": "if (value <= lclip) {\n  value=lclip;\n}"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "double uclip=getUpperClip();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 200, 
          "faulty": "if (!(data instanceof StatisticalCategoryDataset)) {\n  throw new IllegalArgumentException(\"Requires StatisticalCategoryDataset.\");\n}", 
          "type": "Delete", 
          "seed": "Stroke stroke=plot.getRangeGridlineStroke();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "InsertBefore", 
          "seed": "if (masd != null) {\n  result=masd.getStandardDeviation();\n}"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 111, 
          "faulty": "result=masd.getMean();", 
          "type": "Delete", 
          "seed": "int count=0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 389, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "double min=Double.MAX_VALUE;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 215, 
          "faulty": "return this.data.getColumnKey(column);", 
          "type": "InsertBefore", 
          "seed": "double min=Double.MAX_VALUE;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_296/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:42:59.387869251 -0500\n@@ -196,22 +196,9 @@\n                          int column,\n                          int pass) {\n \n-        // defensive check\n-        if (!(data instanceof StatisticalCategoryDataset)) {\n-            throw new IllegalArgumentException(\n-                \"Requires StatisticalCategoryDataset.\");\n-        }\n         StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n     }\n                 \n     /**\n@@ -243,24 +230,19 @@\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                 dataArea, xAxisLocation);\n \n-        int seriesCount = getRowCount();\n-        int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n+        setNegativeItemLabelPositionFallback(null);\n+\t\tint seriesCount = getRowCount();\n+        PlotOrientation orient = plot.getOrientation();\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n         double value = meanValue.doubleValue();\n         double base = 0.0;\n         double lclip = getLowerClip();\n-        double uclip = getUpperClip();\n+        if (value <= lclip) {\n+\t\t\tvalue = lclip;\n+\t\t}\n+\t\tdouble uclip = getUpperClip();\n \n         if (uclip <= 0.0) {  // cases 1, 2, 3 and 4\n             if (value >= uclip) {\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_296/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:42:59.391869367 -0500\n@@ -92,7 +92,9 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\tthis.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_296/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:42:59.391869367 -0500\n@@ -107,8 +107,11 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getMean();\n+        double minval = Double.NaN;\n+\t\tif (masd != null) {\n+\t\t\tresult = masd.getStandardDeviation();\n+\t\t}\n+\t\tif (masd != null) {\n         }\n         return result;\n     }\n@@ -123,7 +126,8 @@\n      * @return The value.\n      */\n     public Number getValue(int row, int column) {\n-        return getMeanValue(row, column);\n+        double minval = Double.NaN;\n+\t\treturn getMeanValue(row, column);\n     }\n \n     /**\n@@ -212,7 +216,8 @@\n      * @return The column key.\n      */\n     public Comparable getColumnKey(int column) {\n-        return this.data.getColumnKey(column);\n+        double min = Double.MAX_VALUE;\n+\t\treturn this.data.getColumnKey(column);\n     }\n \n     /**\n@@ -270,7 +275,9 @@\n      * @return The column count.\n      */\n     public int getColumnCount() {\n-        return this.data.getColumnCount();\n+        List result = null;\n+\t\tdouble sumXX = 0;\n+\t\treturn this.data.getColumnCount();\n     }\n \n     /**\n@@ -377,16 +384,19 @@\n         Range result = null;\n         if (includeInterval) {\n             if (!Double.isNaN(this.minimumRangeValueIncStdDev) \n-                    && !Double.isNaN(this.maximumRangeValueIncStdDev))\n-            result = new Range(this.minimumRangeValueIncStdDev, \n-                    this.maximumRangeValueIncStdDev);\n+                    && !Double.isNaN(this.maximumRangeValueIncStdDev)) {\n+\t\t\t\tdouble sumX2 = 0.0;\n+\t\t\t\tresult = new Range(this.minimumRangeValueIncStdDev,\n+\t\t\t\t\t\tthis.maximumRangeValueIncStdDev);\n+\t\t\t}\n         }\n         else {\n             if (!Double.isNaN(this.minimumRangeValue) \n                     && !Double.isNaN(this.maximumRangeValue))\n             result = new Range(this.minimumRangeValue, this.maximumRangeValue);            \n         }\n-        return result;\n+        double min = Double.MAX_VALUE;\n+\t\treturn result;\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 111, 
          "faulty": "result=masd.getMean();", 
          "type": "Delete", 
          "seed": "int count=0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 175, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "double m=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 389, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "double minval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Replace", 
          "seed": "setIncludeBaseInRange(false);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 172, 
          "faulty": "if (masd != null) {\n  result=masd.getStandardDeviation();\n}", 
          "type": "InsertBefore", 
          "seed": "double sumX=0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 274, 
          "faulty": "if (lclip <= 0.0) {\n  if (value >= uclip) {\n    value=uclip;\n  }\n else {\n    if (value <= lclip) {\n      value=lclip;\n    }\n  }\n}\n else {\n  if (value <= lclip) {\n    return;\n  }\n  base=getLowerClip();\n  if (value >= uclip) {\n    value=uclip;\n  }\n}", 
          "type": "Delete", 
          "seed": "double yy2=0.0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_354/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:43:33.052847412 -0500\n@@ -204,14 +204,7 @@\n         StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n+        setIncludeBaseInRange(false);\n     }\n                 \n     /**\n@@ -245,15 +238,6 @@\n \n         int seriesCount = getRowCount();\n         int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n@@ -270,26 +254,8 @@\n             if (value <= lclip) {\n                 value = lclip;\n             }\n-        }\n-        else if (lclip <= 0.0) { // cases 5, 6, 7 and 8\n-            if (value >= uclip) {\n-                value = uclip;\n-            }\n-            else {\n-                if (value <= lclip) {\n-                    value = lclip;\n-                }\n-            }\n-        }\n-        else { // cases 9, 10, 11 and 12\n-            if (value <= lclip) {\n-                return; // bar is not visible\n-            }\n-            base = getLowerClip();\n-            if (value >= uclip) {\n-               value = uclip;\n-            }\n-        }\n+        } else\n+\t\t\t;\n \n         RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n         double transY1 = rangeAxis.valueToJava2D(base, dataArea, yAxisLocation);\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_354/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:43:33.056847529 -0500\n@@ -92,7 +92,8 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_354/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:43:33.056847529 -0500\n@@ -108,7 +108,6 @@\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n-            result = masd.getMean();\n         }\n         return result;\n     }\n@@ -169,10 +168,12 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n+        double sumX = 0;\n+\t\tif (masd != null) {\n             result = masd.getStandardDeviation();\n         }\n-        return result;\n+        double m = 0.0;\n+\t\treturn result;\n     }\n \n     /**\n@@ -386,7 +387,8 @@\n                     && !Double.isNaN(this.maximumRangeValue))\n             result = new Range(this.minimumRangeValue, this.maximumRangeValue);            \n         }\n-        return result;\n+        double minval = Double.NaN;\n+\t\treturn result;\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "Replace", 
          "seed": "double result=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 126, 
          "faulty": "return getMeanValue(row,column);", 
          "type": "InsertBefore", 
          "seed": "double minval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "Replace", 
          "seed": "double sum=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 243, 
          "faulty": "double rectY=domainAxis.getCategoryStart(column,getColumnCount(),dataArea,xAxisLocation);", 
          "type": "InsertBefore", 
          "seed": "CategoryPlot p=getPlot();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 113, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "if (masd != null) {\n  result=masd.getStandardDeviation();\n}"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "InsertBefore", 
          "seed": "setNegativeItemLabelPositionFallback(null);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "InsertBefore", 
          "seed": "double minval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 263, 
          "faulty": "double uclip=getUpperClip();", 
          "type": "InsertBefore", 
          "seed": "if (value <= lclip) {\n  value=lclip;\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_242/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:42:29.366997878 -0500\n@@ -204,14 +204,6 @@\n         StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n     }\n                 \n     /**\n@@ -239,28 +231,24 @@\n                                      \n         RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n         \n-        // BAR Y\n+        CategoryPlot p = getPlot();\n+\t\t// BAR Y\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                 dataArea, xAxisLocation);\n \n-        int seriesCount = getRowCount();\n+        setNegativeItemLabelPositionFallback(null);\n+\t\tdouble result = Double.NaN;\n         int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n         double value = meanValue.doubleValue();\n         double base = 0.0;\n         double lclip = getLowerClip();\n-        double uclip = getUpperClip();\n+        if (value <= lclip) {\n+\t\t\tvalue = lclip;\n+\t\t}\n+\t\tdouble uclip = getUpperClip();\n \n         if (uclip <= 0.0) {  // cases 1, 2, 3 and 4\n             if (value >= uclip) {\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_242/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:42:29.370997993 -0500\n@@ -92,7 +92,13 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_242/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:42:29.370997993 -0500\n@@ -107,10 +107,12 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n+        double minval = Double.NaN;\n+\t\tdouble sum = 0.0;\n         if (masd != null) {\n-            result = masd.getMean();\n-        }\n-        return result;\n+\t\t\tresult = masd.getStandardDeviation();\n+\t\t}\n+\t\treturn result;\n     }\n \n     /**\n@@ -123,7 +125,8 @@\n      * @return The value.\n      */\n     public Number getValue(int row, int column) {\n-        return getMeanValue(row, column);\n+        double minval = Double.NaN;\n+\t\treturn getMeanValue(row, column);\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 273, 
          "faulty": "return this.data.getColumnCount();", 
          "type": "InsertBefore", 
          "seed": "List result=null;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 126, 
          "faulty": "return getMeanValue(row,column);", 
          "type": "InsertBefore", 
          "seed": "double minval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "int count=dataset.getColumnCount();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 108, 
          "faulty": "MeanAndStandardDeviation masd=(MeanAndStandardDeviation)this.data.getObject(row,column);", 
          "type": "InsertBefore", 
          "seed": "double m=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "double y2=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 200, 
          "faulty": "if (!(data instanceof StatisticalCategoryDataset)) {\n  throw new IllegalArgumentException(\"Requires StatisticalCategoryDataset.\");\n}", 
          "type": "InsertBefore", 
          "seed": "double positiveBase=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 206, 
          "faulty": "PlotOrientation orientation=plot.getOrientation();", 
          "type": "Delete", 
          "seed": "return new Icon(){\n  public void paintIcon(  Component c,  Graphics g,  int x,  int y){\n    Graphics2D g2=(Graphics2D)g;\n    path.transform(AffineTransform.getTranslateInstance(x,y));\n    if (fillPaint != null) {\n      g2.setPaint(fillPaint);\n      g2.fill(path);\n    }\n    if (outlinePaint != null) {\n      g2.setPaint(outlinePaint);\n      g2.draw(path);\n    }\n    path.transform(AffineTransform.getTranslateInstance(-x,-y));\n  }\n  public int getIconWidth(){\n    return width;\n  }\n  public int getIconHeight(){\n    return height;\n  }\n}\n;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_258/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:42:37.083221847 -0500\n@@ -196,22 +196,13 @@\n                          int column,\n                          int pass) {\n \n-        // defensive check\n+        double positiveBase = 0.0;\n+\t\t// defensive check\n         if (!(data instanceof StatisticalCategoryDataset)) {\n             throw new IllegalArgumentException(\n                 \"Requires StatisticalCategoryDataset.\");\n         }\n         StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n-\n-        PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n     }\n                 \n     /**\n@@ -251,7 +242,6 @@\n             rectY = rectY + row * (state.getBarWidth() + seriesGap);\n         }\n         else {\n-            rectY = rectY + row * state.getBarWidth();\n         }\n \n         // BAR X\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_258/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:42:37.087221963 -0500\n@@ -105,7 +105,8 @@\n      */\n     public Number getMeanValue(int row, int column) {\n         Number result = null;\n-        MeanAndStandardDeviation masd \n+        double m = 0.0;\n+\t\tMeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n             result = masd.getMean();\n@@ -123,7 +124,8 @@\n      * @return The value.\n      */\n     public Number getValue(int row, int column) {\n-        return getMeanValue(row, column);\n+        double minval = Double.NaN;\n+\t\treturn getMeanValue(row, column);\n     }\n \n     /**\n@@ -270,7 +272,8 @@\n      * @return The column count.\n      */\n     public int getColumnCount() {\n-        return this.data.getColumnCount();\n+        List result = null;\n+\t\treturn this.data.getColumnCount();\n     }\n \n     /**\n@@ -377,9 +380,11 @@\n         Range result = null;\n         if (includeInterval) {\n             if (!Double.isNaN(this.minimumRangeValueIncStdDev) \n-                    && !Double.isNaN(this.maximumRangeValueIncStdDev))\n-            result = new Range(this.minimumRangeValueIncStdDev, \n-                    this.maximumRangeValueIncStdDev);\n+                    && !Double.isNaN(this.maximumRangeValueIncStdDev)) {\n+\t\t\t\tdouble sumX2 = 0.0;\n+\t\t\t\tresult = new Range(this.minimumRangeValueIncStdDev,\n+\t\t\t\t\t\tthis.maximumRangeValueIncStdDev);\n+\t\t\t}\n         }\n         else {\n             if (!Double.isNaN(this.minimumRangeValue) \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "Replace", 
          "seed": "double result=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return super.clone();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 107, 
          "faulty": "Number result=null;", 
          "type": "InsertBefore", 
          "seed": "this.maximumRangeValue=Double.NaN;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_43/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:40:35.143682334 -0500\n@@ -204,14 +204,6 @@\n         StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n     }\n                 \n     /**\n@@ -243,17 +235,8 @@\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                 dataArea, xAxisLocation);\n \n-        int seriesCount = getRowCount();\n+        double result = Double.NaN;\n         int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_43/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:40:35.147682451 -0500\n@@ -92,7 +92,9 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\tthis.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_43/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:40:35.147682451 -0500\n@@ -104,7 +104,8 @@\n      * @return The mean value.\n      */\n     public Number getMeanValue(int row, int column) {\n-        Number result = null;\n+        this.maximumRangeValue = Double.NaN;\n+\t\tNumber result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "Delete", 
          "seed": "this.minimumRangeValueIncStdDev=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 111, 
          "faulty": "result=masd.getMean();", 
          "type": "InsertBefore", 
          "seed": "result=masd.getStandardDeviation();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Replace", 
          "seed": "double xx2=domainAxis.getCategoryEnd(column,getColumnCount(),dataArea,plot.getDomainAxisEdge());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "InsertBefore", 
          "seed": "g2.setStroke(plot.getRangeGridlineStroke());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 243, 
          "faulty": "double rectY=domainAxis.getCategoryStart(column,getColumnCount(),dataArea,xAxisLocation);", 
          "type": "InsertBefore", 
          "seed": "double currentItemMargin=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "Delete", 
          "seed": "this.minimumRangeValueIncStdDev=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 126, 
          "faulty": "return getMeanValue(row,column);", 
          "type": "InsertBefore", 
          "seed": "double maxval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 169, 
          "faulty": "Number result=null;", 
          "type": "Replace", 
          "seed": "Number result=null;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "InsertBefore", 
          "seed": "Number n=dataset.getValue(row,column);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_614/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:45:55.116977049 -0500\n@@ -201,7 +201,8 @@\n             throw new IllegalArgumentException(\n                 \"Requires StatisticalCategoryDataset.\");\n         }\n-        StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n+        g2.setStroke(plot.getRangeGridlineStroke());\n+\t\tStatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n         if (orientation == PlotOrientation.HORIZONTAL) {\n@@ -239,20 +240,16 @@\n                                      \n         RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n         \n-        // BAR Y\n+        double currentItemMargin = 0.0;\n+\t\t// BAR Y\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                 dataArea, xAxisLocation);\n \n         int seriesCount = getRowCount();\n         int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n+        Number n = dataset.getValue(row, column);\n+\t\tdouble xx2 = domainAxis.getCategoryEnd(column, getColumnCount(),\n+\t\t\t\tdataArea, plot.getDomainAxisEdge());\n \n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_614/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:45:55.120977165 -0500\n@@ -107,9 +107,6 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getMean();\n-        }\n         return result;\n     }\n \n@@ -123,7 +120,8 @@\n      * @return The value.\n      */\n     public Number getValue(int row, int column) {\n-        return getMeanValue(row, column);\n+        double maxval = Double.NaN;\n+\t\treturn getMeanValue(row, column);\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 261, 
          "faulty": "double base=0.0;", 
          "type": "InsertBefore", 
          "seed": "double xx0=domainAxis.getCategoryStart(column,getColumnCount(),dataArea,plot.getDomainAxisEdge());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 243, 
          "faulty": "double rectY=domainAxis.getCategoryStart(column,getColumnCount(),dataArea,xAxisLocation);", 
          "type": "InsertBefore", 
          "seed": "double y0=dataArea.getMaxY();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "Delete", 
          "seed": "this.minimumRangeValueIncStdDev=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 243, 
          "faulty": "double rectY=domainAxis.getCategoryStart(column,getColumnCount(),dataArea,xAxisLocation);", 
          "type": "InsertBefore", 
          "seed": "double currentItemMargin=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 243, 
          "faulty": "double rectY=domainAxis.getCategoryStart(column,getColumnCount(),dataArea,xAxisLocation);", 
          "type": "InsertBefore", 
          "seed": "double shift=0.0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_539/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:45:15.967839065 -0500\n@@ -204,14 +204,6 @@\n         StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n     }\n                 \n     /**\n@@ -239,7 +231,10 @@\n                                      \n         RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n         \n-        // BAR Y\n+        double y0 = dataArea.getMaxY();\n+\t\tdouble currentItemMargin = 0.0;\n+\t\tdouble shift = 0.0;\n+\t\t// BAR Y\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                 dataArea, xAxisLocation);\n \n@@ -258,7 +253,9 @@\n         Number meanValue = dataset.getMeanValue(row, column);\n \n         double value = meanValue.doubleValue();\n-        double base = 0.0;\n+        double xx0 = domainAxis.getCategoryStart(column, getColumnCount(),\n+\t\t\t\tdataArea, plot.getDomainAxisEdge());\n+\t\tdouble base = 0.0;\n         double lclip = getLowerClip();\n         double uclip = getUpperClip();\n \n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_539/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:45:15.967839065 -0500\n@@ -92,7 +92,8 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_539/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:45:15.971839182 -0500\n@@ -107,9 +107,6 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getMean();\n-        }\n         return result;\n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "Delete", 
          "seed": "this.minimumRangeValueIncStdDev=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 111, 
          "faulty": "result=masd.getMean();", 
          "type": "InsertBefore", 
          "seed": "result=masd.getStandardDeviation();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Replace", 
          "seed": "double xx2=domainAxis.getCategoryEnd(column,getColumnCount(),dataArea,plot.getDomainAxisEdge());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "InsertBefore", 
          "seed": "g2.setStroke(plot.getRangeGridlineStroke());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 243, 
          "faulty": "double rectY=domainAxis.getCategoryStart(column,getColumnCount(),dataArea,xAxisLocation);", 
          "type": "InsertBefore", 
          "seed": "double currentItemMargin=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "InsertBefore", 
          "seed": "g2.setStroke(plot.getRangeGridlineStroke());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return new Icon(){\n  public void paintIcon(  Component c,  Graphics g,  int x,  int y){\n    Graphics2D g2=(Graphics2D)g;\n    path.transform(AffineTransform.getTranslateInstance(x,y));\n    if (fillPaint != null) {\n      g2.setPaint(fillPaint);\n      g2.fill(path);\n    }\n    if (outlinePaint != null) {\n      g2.setPaint(outlinePaint);\n      g2.draw(path);\n    }\n    path.transform(AffineTransform.getTranslateInstance(-x,-y));\n  }\n  public int getIconWidth(){\n    return width;\n  }\n  public int getIconHeight(){\n    return height;\n  }\n}\n;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 263, 
          "faulty": "double uclip=getUpperClip();", 
          "type": "InsertBefore", 
          "seed": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "Delete", 
          "seed": "this.minimumRangeValueIncStdDev=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 126, 
          "faulty": "return getMeanValue(row,column);", 
          "type": "InsertBefore", 
          "seed": "double maxval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 169, 
          "faulty": "Number result=null;", 
          "type": "Replace", 
          "seed": "Number result=null;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "InsertBefore", 
          "seed": "Number n=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 274, 
          "faulty": "if (lclip <= 0.0) {\n  if (value >= uclip) {\n    value=uclip;\n  }\n else {\n    if (value <= lclip) {\n      value=lclip;\n    }\n  }\n}\n else {\n  if (value <= lclip) {\n    return;\n  }\n  base=getLowerClip();\n  if (value >= uclip) {\n    value=uclip;\n  }\n}", 
          "type": "Delete", 
          "seed": "Number v=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Replace", 
          "seed": "Stroke outlineStroke=plot.getOutlineStroke();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 108, 
          "faulty": "MeanAndStandardDeviation masd=(MeanAndStandardDeviation)this.data.getObject(row,column);", 
          "type": "Replace", 
          "seed": "double minOutlier=Double.POSITIVE_INFINITY;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_631/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:46:03.009206456 -0500\n@@ -201,17 +201,12 @@\n             throw new IllegalArgumentException(\n                 \"Requires StatisticalCategoryDataset.\");\n         }\n-        StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n+        g2.setStroke(plot.getRangeGridlineStroke());\n+\t\tg2.setStroke(plot.getRangeGridlineStroke());\n+\t\tStatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n+        Stroke outlineStroke = plot.getOutlineStroke();\n     }\n                 \n     /**\n@@ -239,28 +234,28 @@\n                                      \n         RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n         \n-        // BAR Y\n+        double currentItemMargin = 0.0;\n+\t\t// BAR Y\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                 dataArea, xAxisLocation);\n \n         int seriesCount = getRowCount();\n         int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n-        // BAR X\n+        Number n = dataset.getValue(row, column);\n+\t\t// BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n         double value = meanValue.doubleValue();\n         double base = 0.0;\n         double lclip = getLowerClip();\n-        double uclip = getUpperClip();\n+        if (seriesCount > 1) {\n+\t\t\tdouble seriesGap = dataArea.getHeight() * getItemMargin()\n+\t\t\t\t\t/ (categoryCount * (seriesCount - 1));\n+\t\t\trectY = rectY + row * (state.getBarWidth() + seriesGap);\n+\t\t} else {\n+\t\t\trectY = rectY + row * state.getBarWidth();\n+\t\t}\n+\t\tdouble uclip = getUpperClip();\n \n         if (uclip <= 0.0) {  // cases 1, 2, 3 and 4\n             if (value >= uclip) {\n@@ -270,26 +265,8 @@\n             if (value <= lclip) {\n                 value = lclip;\n             }\n-        }\n-        else if (lclip <= 0.0) { // cases 5, 6, 7 and 8\n-            if (value >= uclip) {\n-                value = uclip;\n-            }\n-            else {\n-                if (value <= lclip) {\n-                    value = lclip;\n-                }\n-            }\n-        }\n-        else { // cases 9, 10, 11 and 12\n-            if (value <= lclip) {\n-                return; // bar is not visible\n-            }\n-            base = getLowerClip();\n-            if (value >= uclip) {\n-               value = uclip;\n-            }\n-        }\n+        } else\n+\t\t\t;\n \n         RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n         double transY1 = rangeAxis.valueToJava2D(base, dataArea, yAxisLocation);\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_631/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:46:03.013206573 -0500\n@@ -105,11 +105,7 @@\n      */\n     public Number getMeanValue(int row, int column) {\n         Number result = null;\n-        MeanAndStandardDeviation masd \n-            = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getMean();\n-        }\n+        double minOutlier = Double.POSITIVE_INFINITY;\n         return result;\n     }\n \n@@ -123,7 +119,8 @@\n      * @return The value.\n      */\n     public Number getValue(int row, int column) {\n-        return getMeanValue(row, column);\n+        double maxval = Double.NaN;\n+\t\treturn getMeanValue(row, column);\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 170, 
          "faulty": "MeanAndStandardDeviation masd=(MeanAndStandardDeviation)this.data.getObject(row,column);", 
          "type": "InsertBefore", 
          "seed": "this.minimumRangeValue=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 265, 
          "faulty": "if (uclip <= 0.0) {\n  if (value >= uclip) {\n    return;\n  }\n  base=uclip;\n  if (value <= lclip) {\n    value=lclip;\n  }\n}\n else if (lclip <= 0.0) {\n  if (value >= uclip) {\n    value=uclip;\n  }\n else {\n    if (value <= lclip) {\n      value=lclip;\n    }\n  }\n}\n else {\n  if (value <= lclip) {\n    return;\n  }\n  base=getLowerClip();\n  if (value >= uclip) {\n    value=uclip;\n  }\n}", 
          "type": "Delete", 
          "seed": "int itemCount=dataset.getColumnCount();"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 172, 
          "faulty": "if (masd != null) {\n  result=masd.getStandardDeviation();\n}", 
          "type": "InsertBefore", 
          "seed": "this.minimumRangeValue=Double.NaN;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_437/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:44:24.642347100 -0500\n@@ -204,14 +204,6 @@\n         StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n     }\n                 \n     /**\n@@ -251,7 +243,6 @@\n             rectY = rectY + row * (state.getBarWidth() + seriesGap);\n         }\n         else {\n-            rectY = rectY + row * state.getBarWidth();\n         }\n \n         // BAR X\n@@ -262,35 +253,6 @@\n         double lclip = getLowerClip();\n         double uclip = getUpperClip();\n \n-        if (uclip <= 0.0) {  // cases 1, 2, 3 and 4\n-            if (value >= uclip) {\n-                return; // bar is not visible\n-            }\n-            base = uclip;\n-            if (value <= lclip) {\n-                value = lclip;\n-            }\n-        }\n-        else if (lclip <= 0.0) { // cases 5, 6, 7 and 8\n-            if (value >= uclip) {\n-                value = uclip;\n-            }\n-            else {\n-                if (value <= lclip) {\n-                    value = lclip;\n-                }\n-            }\n-        }\n-        else { // cases 9, 10, 11 and 12\n-            if (value <= lclip) {\n-                return; // bar is not visible\n-            }\n-            base = getLowerClip();\n-            if (value >= uclip) {\n-               value = uclip;\n-            }\n-        }\n-\n         RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n         double transY1 = rangeAxis.valueToJava2D(base, dataArea, yAxisLocation);\n         double transY2 = rangeAxis.valueToJava2D(value, dataArea, \n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_437/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:44:24.642347100 -0500\n@@ -92,7 +92,13 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_437/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:44:24.642347100 -0500\n@@ -167,9 +167,11 @@\n      */\n     public Number getStdDevValue(int row, int column) {\n         Number result = null;\n-        MeanAndStandardDeviation masd \n+        this.minimumRangeValue = Double.NaN;\n+\t\tMeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n+        this.minimumRangeValue = Double.NaN;\n+\t\tif (masd != null) {\n             result = masd.getStandardDeviation();\n         }\n         return result;\n@@ -377,9 +379,11 @@\n         Range result = null;\n         if (includeInterval) {\n             if (!Double.isNaN(this.minimumRangeValueIncStdDev) \n-                    && !Double.isNaN(this.maximumRangeValueIncStdDev))\n-            result = new Range(this.minimumRangeValueIncStdDev, \n-                    this.maximumRangeValueIncStdDev);\n+                    && !Double.isNaN(this.maximumRangeValueIncStdDev)) {\n+\t\t\t\tdouble sumX2 = 0.0;\n+\t\t\t\tresult = new Range(this.minimumRangeValueIncStdDev,\n+\t\t\t\t\t\tthis.maximumRangeValueIncStdDev);\n+\t\t\t}\n         }\n         else {\n             if (!Double.isNaN(this.minimumRangeValue) \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 273, 
          "faulty": "return this.data.getColumnCount();", 
          "type": "InsertBefore", 
          "seed": "List result=null;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 126, 
          "faulty": "return getMeanValue(row,column);", 
          "type": "InsertBefore", 
          "seed": "double minval=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 200, 
          "faulty": "if (!(data instanceof StatisticalCategoryDataset)) {\n  throw new IllegalArgumentException(\"Requires StatisticalCategoryDataset.\");\n}", 
          "type": "InsertBefore", 
          "seed": "int columns=data.getColumnCount();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 240, 
          "faulty": "RectangleEdge xAxisLocation=plot.getDomainAxisEdge();", 
          "type": "InsertBefore", 
          "seed": "double yyAverage=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 206, 
          "faulty": "PlotOrientation orientation=plot.getOrientation();", 
          "type": "Delete", 
          "seed": "this.errorIndicatorPaint=Color.gray;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_212/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:42:14.030552720 -0500\n@@ -196,22 +196,13 @@\n                          int column,\n                          int pass) {\n \n-        // defensive check\n+        int columns = data.getColumnCount();\n+\t\t// defensive check\n         if (!(data instanceof StatisticalCategoryDataset)) {\n             throw new IllegalArgumentException(\n                 \"Requires StatisticalCategoryDataset.\");\n         }\n         StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n-\n-        PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n     }\n                 \n     /**\n@@ -237,7 +228,8 @@\n                                       int row,\n                                       int column) {\n                                      \n-        RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n+        double yyAverage = 0.0;\n+\t\tRectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n         \n         // BAR Y\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_212/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:42:14.030552720 -0500\n@@ -92,7 +92,9 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\tthis.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_212/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:42:14.034552838 -0500\n@@ -123,7 +123,8 @@\n      * @return The value.\n      */\n     public Number getValue(int row, int column) {\n-        return getMeanValue(row, column);\n+        double minval = Double.NaN;\n+\t\treturn getMeanValue(row, column);\n     }\n \n     /**\n@@ -270,7 +271,8 @@\n      * @return The column count.\n      */\n     public int getColumnCount() {\n-        return this.data.getColumnCount();\n+        List result = null;\n+\t\treturn this.data.getColumnCount();\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 381, 
          "faulty": "result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX2=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "Delete", 
          "seed": "this.minimumRangeValueIncStdDev=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 111, 
          "faulty": "result=masd.getMean();", 
          "type": "InsertBefore", 
          "seed": "result=masd.getStandardDeviation();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "InsertBefore", 
          "seed": "float x0=(float)dataArea.getX();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 263, 
          "faulty": "double uclip=getUpperClip();", 
          "type": "InsertBefore", 
          "seed": "Line2D line1=null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_510/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:45:02.347443142 -0500\n@@ -204,14 +204,6 @@\n         StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n     }\n                 \n     /**\n@@ -251,7 +243,8 @@\n             rectY = rectY + row * (state.getBarWidth() + seriesGap);\n         }\n         else {\n-            rectY = rectY + row * state.getBarWidth();\n+            float x0 = (float) dataArea.getX();\n+\t\t\trectY = rectY + row * state.getBarWidth();\n         }\n \n         // BAR X\n@@ -260,7 +253,8 @@\n         double value = meanValue.doubleValue();\n         double base = 0.0;\n         double lclip = getLowerClip();\n-        double uclip = getUpperClip();\n+        Line2D line1 = null;\n+\t\tdouble uclip = getUpperClip();\n \n         if (uclip <= 0.0) {  // cases 1, 2, 3 and 4\n             if (value >= uclip) {\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_510/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:45:02.351443260 -0500\n@@ -92,7 +92,12 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\tthis.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_510/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:45:02.355443376 -0500\n@@ -107,9 +107,6 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getMean();\n-        }\n         return result;\n     }\n \n@@ -377,9 +374,11 @@\n         Range result = null;\n         if (includeInterval) {\n             if (!Double.isNaN(this.minimumRangeValueIncStdDev) \n-                    && !Double.isNaN(this.maximumRangeValueIncStdDev))\n-            result = new Range(this.minimumRangeValueIncStdDev, \n-                    this.maximumRangeValueIncStdDev);\n+                    && !Double.isNaN(this.maximumRangeValueIncStdDev)) {\n+\t\t\t\tdouble sumX2 = 0.0;\n+\t\t\t\tresult = new Range(this.minimumRangeValueIncStdDev,\n+\t\t\t\t\t\tthis.maximumRangeValueIncStdDev);\n+\t\t\t}\n         }\n         else {\n             if (!Double.isNaN(this.minimumRangeValue) \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "Delete", 
          "seed": "this.minimumRangeValueIncStdDev=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 111, 
          "faulty": "result=masd.getMean();", 
          "type": "InsertBefore", 
          "seed": "result=masd.getStandardDeviation();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Replace", 
          "seed": "double xx2=domainAxis.getCategoryEnd(column,getColumnCount(),dataArea,plot.getDomainAxisEdge());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "InsertBefore", 
          "seed": "g2.setStroke(plot.getRangeGridlineStroke());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "InsertBefore", 
          "seed": "g2.setStroke(plot.getRangeGridlineStroke());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 172, 
          "faulty": "if (masd != null) {\n  result=masd.getStandardDeviation();\n}", 
          "type": "Delete", 
          "seed": "if (masd != null) {\n  result=masd.getMean();\n}"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "double barW0=domainAxis.getCategoryStart(column,getColumnCount(),dataArea,plot.getDomainAxisEdge());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 379, 
          "faulty": "if (!Double.isNaN(this.minimumRangeValueIncStdDev) && !Double.isNaN(this.maximumRangeValueIncStdDev)) result=new Range(this.minimumRangeValueIncStdDev,this.maximumRangeValueIncStdDev);", 
          "type": "InsertBefore", 
          "seed": "double sumX=0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 104, 
          "faulty": "return this.standardDeviation;", 
          "type": "Replace", 
          "seed": "return this.mean;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 108, 
          "faulty": "MeanAndStandardDeviation masd=(MeanAndStandardDeviation)this.data.getObject(row,column);", 
          "type": "Delete", 
          "seed": "Range result=null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_655/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:46:17.657632247 -0500\n@@ -201,7 +201,9 @@\n             throw new IllegalArgumentException(\n                 \"Requires StatisticalCategoryDataset.\");\n         }\n-        StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n+        g2.setStroke(plot.getRangeGridlineStroke());\n+\t\tg2.setStroke(plot.getRangeGridlineStroke());\n+\t\tStatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n         if (orientation == PlotOrientation.HORIZONTAL) {\n@@ -245,14 +247,8 @@\n \n         int seriesCount = getRowCount();\n         int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n+        double xx2 = domainAxis.getCategoryEnd(column, getColumnCount(),\n+\t\t\t\tdataArea, plot.getDomainAxisEdge());\n \n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_655/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:46:17.657632247 -0500\n@@ -101,7 +101,7 @@\n      * @return The standard deviation.\n      */\n     public Number getStandardDeviation() {\n-        return this.standardDeviation;\n+        return this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_655/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:46:17.661632362 -0500\n@@ -105,11 +105,6 @@\n      */\n     public Number getMeanValue(int row, int column) {\n         Number result = null;\n-        MeanAndStandardDeviation masd \n-            = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getMean();\n-        }\n         return result;\n     }\n \n@@ -169,9 +164,6 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getStandardDeviation();\n-        }\n         return result;\n     }\n \n@@ -376,7 +368,8 @@\n     public Range getRangeBounds(boolean includeInterval) {\n         Range result = null;\n         if (includeInterval) {\n-            if (!Double.isNaN(this.minimumRangeValueIncStdDev) \n+            double sumX = 0;\n+\t\t\tif (!Double.isNaN(this.minimumRangeValueIncStdDev) \n                     && !Double.isNaN(this.maximumRangeValueIncStdDev))\n             result = new Range(this.minimumRangeValueIncStdDev, \n                     this.maximumRangeValueIncStdDev);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 95, 
          "faulty": "return this.mean;", 
          "type": "InsertBefore", 
          "seed": "this.mean=mean;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Delete", 
          "seed": "g2.setPaint(getWallPaint());"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 246, 
          "faulty": "return this.data.getRowKey(row);", 
          "type": "InsertBefore", 
          "seed": "this.minimumRangeValue=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 204, 
          "faulty": "StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;", 
          "type": "InsertBefore", 
          "seed": "int series=0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 246, 
          "faulty": "int seriesCount=getRowCount();", 
          "type": "InsertBefore", 
          "seed": "RectangleEdge location=plot.getRangeAxisEdge();"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 254, 
          "faulty": "rectY=rectY + row * state.getBarWidth();", 
          "type": "Delete", 
          "seed": "Number dataValue=dataset.getValue(row,column);"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 207, 
          "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", 
          "type": "Replace", 
          "seed": "double rectX=domainAxis.getCategoryMiddle(column,getColumnCount(),dataArea,plot.getDomainAxisEdge()) - state.getBarWidth() / 2.0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 208, 
          "faulty": "drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);", 
          "type": "InsertBefore", 
          "seed": "int categories=data.getColumnCount();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_181/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:41:55.638018855 -0500\n@@ -201,17 +201,12 @@\n             throw new IllegalArgumentException(\n                 \"Requires StatisticalCategoryDataset.\");\n         }\n-        StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n+        int series = 0;\n+\t\tStatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n+        double rectX = domainAxis.getCategoryMiddle(column, getColumnCount(),\n+\t\t\t\tdataArea, plot.getDomainAxisEdge()) - state.getBarWidth() / 2.0;\n     }\n                 \n     /**\n@@ -243,7 +238,8 @@\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                 dataArea, xAxisLocation);\n \n-        int seriesCount = getRowCount();\n+        RectangleEdge location = plot.getRangeAxisEdge();\n+\t\tint seriesCount = getRowCount();\n         int categoryCount = getColumnCount();\n         if (seriesCount > 1) {\n             double seriesGap = dataArea.getHeight() * getItemMargin()\n@@ -251,7 +247,6 @@\n             rectY = rectY + row * (state.getBarWidth() + seriesGap);\n         }\n         else {\n-            rectY = rectY + row * state.getBarWidth();\n         }\n \n         // BAR X\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_181/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:41:55.638018855 -0500\n@@ -92,7 +92,8 @@\n      * @return The mean.\n      */\n     public Number getMean() {\n-        return this.mean;\n+        this.mean = mean;\n+\t\treturn this.mean;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_181/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:41:55.642018971 -0500\n@@ -243,7 +243,8 @@\n      * @return The row key.\n      */\n     public Comparable getRowKey(int row) {\n-        return this.data.getRowKey(row);\n+        this.minimumRangeValue = Double.NaN;\n+\t\treturn this.data.getRowKey(row);\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 110, 
          "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", 
          "type": "Delete", 
          "seed": "this.minimumRangeValueIncStdDev=Double.NaN;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 243, 
          "faulty": "double rectY=domainAxis.getCategoryStart(column,getColumnCount(),dataArea,xAxisLocation);", 
          "type": "InsertBefore", 
          "seed": "double currentItemMargin=0.0;"
        }, 
        {
          "path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java", 
          "line": 104, 
          "faulty": "return this.standardDeviation;", 
          "type": "InsertBefore", 
          "seed": "double sumXX=0;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 248, 
          "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", 
          "type": "Delete", 
          "seed": "return new Icon(){\n  public void paintIcon(  Component c,  Graphics g,  int x,  int y){\n    Graphics2D g2=(Graphics2D)g;\n    path.transform(AffineTransform.getTranslateInstance(x,y));\n    if (fillPaint != null) {\n      g2.setPaint(fillPaint);\n      g2.fill(path);\n    }\n    if (outlinePaint != null) {\n      g2.setPaint(outlinePaint);\n      g2.draw(path);\n    }\n    path.transform(AffineTransform.getTranslateInstance(-x,-y));\n  }\n  public int getIconWidth(){\n    return width;\n  }\n  public int getIconHeight(){\n    return height;\n  }\n}\n;"
        }, 
        {
          "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", 
          "line": 263, 
          "faulty": "double uclip=getUpperClip();", 
          "type": "InsertBefore", 
          "seed": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}"
        }, 
        {
          "path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", 
          "line": 126, 
          "faulty": "return getMeanValue(row,column);", 
          "type": "InsertBefore", 
          "seed": "double maxval=Double.NaN;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_559/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:45:26.152135104 -0500\n@@ -239,28 +239,27 @@\n                                      \n         RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n         \n-        // BAR Y\n+        double currentItemMargin = 0.0;\n+\t\t// BAR Y\n         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                 dataArea, xAxisLocation);\n \n         int seriesCount = getRowCount();\n         int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n-\n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n         double value = meanValue.doubleValue();\n         double base = 0.0;\n         double lclip = getLowerClip();\n-        double uclip = getUpperClip();\n+        if (seriesCount > 1) {\n+\t\t\tdouble seriesGap = dataArea.getHeight() * getItemMargin()\n+\t\t\t\t\t/ (categoryCount * (seriesCount - 1));\n+\t\t\trectY = rectY + row * (state.getBarWidth() + seriesGap);\n+\t\t} else {\n+\t\t\trectY = rectY + row * state.getBarWidth();\n+\t\t}\n+\t\tdouble uclip = getUpperClip();\n \n         if (uclip <= 0.0) {  // cases 1, 2, 3 and 4\n             if (value >= uclip) {\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:37:06.233617740 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_559/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java\t2018-12-02 02:45:26.156135221 -0500\n@@ -101,7 +101,8 @@\n      * @return The standard deviation.\n      */\n     public Number getStandardDeviation() {\n-        return this.standardDeviation;\n+        double sumXX = 0;\n+\t\treturn this.standardDeviation;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_559/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:45:26.156135221 -0500\n@@ -107,9 +107,6 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getMean();\n-        }\n         return result;\n     }\n \n@@ -123,7 +120,8 @@\n      * @return The value.\n      */\n     public Number getValue(int row, int column) {\n-        return getMeanValue(row, column);\n+        double maxval = Double.NaN;\n+\t\treturn getMeanValue(row, column);\n     }\n \n     /**\n\n\n"
    }
  ]
}