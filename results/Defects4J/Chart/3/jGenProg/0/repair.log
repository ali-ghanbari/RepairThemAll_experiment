cd /tmp/jGenProg_Defects4J_Chart_3;
export JAVA_TOOL_OPTIONS="-Dfile.encoding=UTF8 -Duser.language=en-US -Duser.country=US -Duser.language=en";
TZ="America/New_York"; export TZ;
export PATH="/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/:$PATH";
export JAVA_HOME="/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/";
time java -Xmx4048m -cp /home/tdurieux/defects4j4repair/script/../libs/jtestex7.jar:/home/tdurieux/defects4j4repair/script/../repair_tools/astor.jar fr.inria.main.evolution.AstorMain \
	-mode jgenprog \
	-location . \
	-id Chart-3 \
	-failing org.jfree.data.time.junit.TimeSeriesTests \
	-jvm4testexecution /home/tdurieux/openjdk-1.7.0/bin/ \
	-jvm4evosuitetestexecution /home/tdurieux/openjdk-1.7.0/bin/ \
	-maxgen 1000000 \
	-maxtime 120 \
	-stopfirst true \
	-seed 0 \
	-scope local \
	-population 1 \
	-javacompliancelevel 4 \
	-srcjavafolder source/ \
	-srctestfolder tests/ \
	-binjavafolder build/ \
	-bintestfolder build-tests/ \
	-parameters x:x \
	-dependencies /home/tdurieux/defects4j4repair/script/../benchmarks/defects4j/framework/projects/lib/junit-4.11.jar:/home/tdurieux/defects4j4repair/script/../benchmarks/defects4j/framework/projects/lib/cobertura-2.0.3.jar:/tmp/jGenProg_Defects4J_Chart_3/build/:/tmp/jGenProg_Defects4J_Chart_3/build-tests/:/tmp/jGenProg_Defects4J_Chart_3/lib/iText-2.1.4.jar:/tmp/jGenProg_Defects4J_Chart_3/lib/junit.jar:/tmp/jGenProg_Defects4J_Chart_3/lib/servlet.jar;
	echo "\n\nNode: `hostname`\n";
	echo "\n\nDate: `date`\n";
Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8 -Duser.language=en-US -Duser.country=US -Duser.language=en
2018-11-30 16:15:02,337 INFO main - command line arguments: [-mode  jgenprog  -location  .  -id  Chart-3  -failing  org.jfree.data.time.junit.TimeSeriesTests  -jvm4testexecution  /home/tdurieux/openjdk-1.7.0/bin/  -jvm4evosuitetestexecution  /home/tdurieux/openjdk-1.7.0/bin/  -maxgen  1000000  -maxtime  120  -stopfirst  true  -seed  0  -scope  local  -population  1  -javacompliancelevel  4  -srcjavafolder  source/  -srctestfolder  tests/  -binjavafolder  build/  -bintestfolder  build-tests/  -parameters  x:x  -dependencies  /home/tdurieux/defects4j4repair/script/../benchmarks/defects4j/framework/projects/lib/junit-4.11.jar:/home/tdurieux/defects4j4repair/script/../benchmarks/defects4j/framework/projects/lib/cobertura-2.0.3.jar:/tmp/jGenProg_Defects4J_Chart_3/build/:/tmp/jGenProg_Defects4J_Chart_3/build-tests/:/tmp/jGenProg_Defects4J_Chart_3/lib/iText-2.1.4.jar:/tmp/jGenProg_Defects4J_Chart_3/lib/junit.jar:/tmp/jGenProg_Defects4J_Chart_3/lib/servlet.jar]
2018-11-30 16:15:02,339 INFO fr.inria.main.evolution.AstorMain - Running Astor on a JDK at /usr/lib/jvm/java-8-openjdk-amd64/jre
[INFO ] fr.inria.main.AbstractMain.determineSourceFolders(AbstractMain.java:842) - Source folders: [/tmp/jGenProg_Defects4J_Chart_3/./source]
[INFO ] fr.inria.main.AbstractMain.determineSourceFolders(AbstractMain.java:861) - Source Test folders: [/tmp/jGenProg_Defects4J_Chart_3/./tests]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.calculateSuspicious(GZoltarFaultLocalization.java:75) - -Executing Gzoltar classpath: /tmp/jGenProg_Defects4J_Chart_3/./output_astor/AstorMain-Chart-3//bin//default from 764 classes with test cases
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:149) - Gzoltar fault localization: min susp value parameter: 0.1
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:169) - -gz-Adding classpath: [/tmp/jGenProg_Defects4J_Chart_3/./output_astor/AstorMain-Chart-3//bin//default, /tmp/jGenProg_Defects4J_Chart_3/lib/junit.jar, /tmp/jGenProg_Defects4J_Chart_3/build-tests/, /home/tdurieux/defects4j4repair/script/../benchmarks/defects4j/framework/projects/lib/cobertura-2.0.3.jar, /tmp/jGenProg_Defects4J_Chart_3/lib/servlet.jar, /tmp/jGenProg_Defects4J_Chart_3/build/, /tmp/jGenProg_Defects4J_Chart_3/lib/iText-2.1.4.jar, /home/tdurieux/defects4j4repair/script/../benchmarks/defects4j/framework/projects/lib/junit-4.11.jar]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:206) - Test failt: org.jfree.chart.annotations.junit.XYImageAnnotationTests#testPublicCloneable
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:206) - Test failt: org.jfree.data.time.junit.TimeSeriesTests#testCreateCopy3
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:206) - Test failt: org.jfree.data.time.junit.TimeSeriesTests#testCreateCopy3
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:218) - Gzoltar Test Result Total:4390, fails: 3, GZoltar suspicious 25202, with positive susp 108
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:226) - nr test results 4390
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:271) - Gzoltar found: 93 with susp > 0.1, we consider: 93
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.initPopulation(AstorCoreEngine.java:689) - 
---- Creating spoon model
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.initModel(AstorCoreEngine.java:781) - Creating model,  Code location from working folder: /tmp/jGenProg_Defects4J_Chart_3/./output_astor/AstorMain-Chart-3//src//default
[INFO ] fr.inria.astor.core.manipulation.MutationSupporter.buildModel(MutationSupporter.java:65) - building model: /tmp/jGenProg_Defects4J_Chart_3/./output_astor/AstorMain-Chart-3//src//default, compliance level: 4
[INFO ] fr.inria.astor.core.manipulation.MutationSupporter.buildModel(MutationSupporter.java:78) - Classpath for building SpoonModel [/home/tdurieux/defects4j4repair/script/../benchmarks/defects4j/framework/projects/lib/junit-4.11.jar, /home/tdurieux/defects4j4repair/script/../benchmarks/defects4j/framework/projects/lib/cobertura-2.0.3.jar, /tmp/jGenProg_Defects4J_Chart_3/build/, /tmp/jGenProg_Defects4J_Chart_3/build-tests/, /tmp/jGenProg_Defects4J_Chart_3/lib/iText-2.1.4.jar, /tmp/jGenProg_Defects4J_Chart_3/lib/junit.jar, /tmp/jGenProg_Defects4J_Chart_3/lib/servlet.jar]
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.initPopulation(AstorCoreEngine.java:693) - 
---- Initial suspicious size: 93
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createProgramInstance(ProgramVariantFactory.java:127) - Total suspicious from FL: 93,  81
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createProgramInstance(ProgramVariantFactory.java:136) - Total ModPoint created: 81
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createInitialPopulation(ProgramVariantFactory.java:82) - Creating program variant #1, [Variant id: 1, #gens: 81, #ops: 0, parent:-]
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:66) - ----------------------------
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:67) - ---Configuration properties:---Execution values
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:lastJUnitVersion= ./examples/libs/junit-4.11.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:alternativecompliancelevel= 4
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:ignoredTestCases= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:workingDirectory= /tmp/jGenProg_Defects4J_Chart_3/./output_astor
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:manipulatesuper= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:validation= process
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jvm4testexecution= /home/tdurieux/openjdk-1.7.0/bin/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:operatorspace= irr-statements
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:disablelog= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:binjavafolder= build/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:synthesis_depth= 3
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:gzoltartestpackagetoexclude= junit.framework
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:skipfitnessinitialpopulation= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evosuiteresultfolder= evosuite
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:flthreshold= 0.1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:regressionforfaultlocalization= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:collectonlyusedmethod= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:preservelinenumbers= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:tmax2= 28760
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:tmax1= 10000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:probagenmutation= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:nomodificationconvergence= 100
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:targetelementprocessor= statements
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:srctestfolder= tests/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:forceExecuteRegression= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:clusteringfilename= clustering.csv
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:failing= org.jfree.data.time.junit.TimeSeriesTests
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:logtestexecution= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evo_buggy_class= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:numberExecutions= 1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxnumbersolutions= 1000000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evo_affected_by_op= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:population= 1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:considerzerovaluesusp= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxCombinationVariableLimit= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:loglevel= INFO
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:savesolution= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:javacompliancelevel= 4
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:x= x
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:uniqueoptogen= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:gzoltarpackagetonotinstrument= junit.framework
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:projectIdentifier= Chart-3
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:modificationpointnavigation= weight
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:stopfirst= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:multipointmodification= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:elementsToMutate= 10
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jsonoutputname= astor_output
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evoDSE= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:bintestfolder= build-tests/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:testbystep= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:version-location= ./math-version/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:reintroduce= PARENTS:ORIGINAL
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:executorjar= ./lib/jtestex7.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxGeneration= 1000000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:max_synthesis_step= 10000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxVarCombination= 1000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxtime= 120
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evosuitejar= ./lib/evosuite-master-1.0.4-SNAPSHOT.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jvmversion= 1.7.0-u80-unofficial
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:commandTrunk= 50000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:faultlocalization= gzoltar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:resetmodel= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxsuspcandidates= 1000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:mode= jgenprog
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:learningdir= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jvm4evosuitetestexecution= /home/tdurieux/openjdk-1.7.0/bin/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:filterfaultlocalization= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:mutationrate= 1 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:pathToMVNRepository= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:resourcesfolder= /src/main/resources:/src/test/resources:
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:runjava7code= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:timezone= America/Los_Angeles
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evoRunOnBuggyClass= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:compiler= fr.inria.astor.core.manipulation.bytecode.compiler.SpoonClassCompiler
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:limitbysuspicious= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:logsattemps= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:dependenciespath= /home/tdurieux/defects4j4repair/script/../benchmarks/defects4j/framework/projects/lib/junit-4.11.jar:/home/tdurieux/defects4j4repair/script/../benchmarks/defects4j/framework/projects/lib/cobertura-2.0.3.jar:/tmp/jGenProg_Defects4J_Chart_3/build/:/tmp/jGenProg_Defects4J_Chart_3/build-tests/:/tmp/jGenProg_Defects4J_Chart_3/lib/iText-2.1.4.jar:/tmp/jGenProg_Defects4J_Chart_3/lib/junit.jar:/tmp/jGenProg_Defects4J_Chart_3/lib/servlet.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:logpatternlayout= [%-5p] %l - %m%n
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:packageToInstrument= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:skipfaultlocalization= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:scope= local
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:transformingredient= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:fitnessfunction= fr.inria.astor.core.solutionsearch.population.TestCaseFitnessFunction
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxnumvariablesperingredient= 10
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:parsesourcefromoriginal= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:pvariantfoldername= variant-
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:savespoonmodelondisk= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:srcjavafolder= source/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:populationcontroller= fr.inria.astor.core.solutionsearch.population.TestCaseBasedFitnessPopulationController
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:ignoreflakyinfl= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:cleantemplates= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:applyCrossover= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxmodificationpoints= 1000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:duplicateingredientsinspace= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:saveall= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:seed= 0
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:savecompletepatched= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:resetoperations= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:processoutputinfile= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:location= .
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:probabilistictransformation= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:overridemaxtime= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:allpoints= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:bugId= 280
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evosuitetimeout= 120
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:nrPlaceholders= 1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:forcesubprocesskilling= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:71) - ----------------------------
[INFO ] fr.inria.astor.core.solutionsearch.EvolutionarySearchEngine.startEvolution(EvolutionarySearchEngine.java:40) - 
----Starting Solution Search
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.processCreatedVariant(AstorCoreEngine.java:436) - -Found Solution, child variant #486
[ERROR] fr.inria.astor.core.solutionsearch.AstorCoreEngine.validateReversedOriginalVariant(AstorCoreEngine.java:346) - Error variant :486 the model was not the same from the original after this generation
[ERROR] fr.inria.astor.core.solutionsearch.AstorCoreEngine.validateReversedOriginalVariant(AstorCoreEngine.java:364) - Undo Error: diff: 
/var/lib/oar/.batch_job_bashrc: line 5: /home/tdurieux/.bashrc: No such file or directory
--- org.jfree.chart.ui.ProjectInfo
+++ org.jfree.chart.ui.ProjectInfo
@@ -1,107 +1,44 @@
 public class ProjectInfo extends org.jfree.chart.ui.BasicProjectInfo {
-
-
 	private java.awt.Image logo;
 
-
 	private java.lang.String licenceText;
 
-
 	private java.util.List contributors;
 
-
-
-
 	public ProjectInfo() {
-
 	}
 
-
-
-
-
-
-
-
-
-
-
-
-	public ProjectInfo(java.lang.String name, 
-	java.lang.String version, 
-	java.lang.String info, 
-	java.awt.Image logo, 
-	java.lang.String copyright, 
-	java.lang.String licenceName, 
-	java.lang.String licenceText) {
-
+	public ProjectInfo(java.lang.String name, java.lang.String version, java.lang.String info, java.awt.Image logo, java.lang.String copyright, java.lang.String licenceName, java.lang.String licenceText) {
 		super(name, version, info, copyright, licenceName);
 		this.logo = logo;
 		this.licenceText = licenceText;
-
 	}
 
-
-
-
-
-
 	public java.awt.Image getLogo() {
 		return this.logo;
 	}
 
-
-
-
-
-
 	public void setLogo(final java.awt.Image logo) {
 		this.logo = logo;
 	}
 
-
-
-
-
-
 	public java.lang.String getLicenceText() {
 		return this.licenceText;
 	}
 
-
-
-
-
-
 	public void setLicenceText(final java.lang.String licenceText) {
 		this.licenceText = licenceText;
 	}
 
-
-
-
-
-
 	public java.util.List getContributors() {
 		return this.contributors;
 	}
 
-
-
-
-
-
 	public void setContributors(final java.util.List contributors) {
 		this.contributors = contributors;
 	}
 
-
-
-
-
-
 	public java.lang.String toString() {
-
 		final java.lang.StringBuffer result = new java.lang.StringBuffer();
 		result.append(getName());
 		result.append(" version ");
@@ -125,11 +62,9 @@
 				result.append(contributor.getEmail());
 				result.append(").");
 			} 
-		}else 
-		{
+		}else {
 			result.append("None");
 		}
-
 		result.append("\n");
 		result.append("OTHER LIBRARIES USED BY ");
 		result.append(getName());
@@ -145,8 +80,7 @@
 				result.append(lib.getInfo());
 				result.append(").");
 			}
-		}else 
-		{
+		}else {
 			result.append("None");
 		}
 		result.append("\n");
@@ -154,9 +88,6 @@
 		result.append(" LICENCE TERMS:");
 		result.append("\n");
 		result.append(getLicenceText());
-
 		return result.toString();
-
 	}
-
 }
\ No newline at end of file

[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.atEnd(AstorCoreEngine.java:168) - Time Repair Loop (s): 90.764
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.atEnd(AstorCoreEngine.java:170) - generationsexecuted: 243
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.printFinalStatus(AstorCoreEngine.java:234) - 
----SUMMARY_EXECUTION---
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.atEnd(AstorCoreEngine.java:184) - 
 --SOLUTIONS DESCRIPTION--

 ----
ProgramVariant 486
 
time(sec)= 90
operation: ReplaceOp
location= org.jfree.data.time.TimeSeries
line= 638
lineSuspiciousness= 0.123
lineSuspiciousness= 59
original statement= fireSeriesChanged()
buggy kind= CtInvocationImpl|CtBlockImpl
fixed statement= updateBoundsForRemovedItem(item)
Patch kind= CtInvocationImpl|CtBlockImpl
generation= 243
ingredientScope= LOCAL
validation=|true|0|4390|[]|
diffpatch=/var/lib/oar/.batch_job_bashrc: line 5: /home/tdurieux/.bashrc: No such file or directory
--- org/jfree/data/time/TimeSeries.java
+++ org/jfree/data/time/TimeSeries.java
@@ -243,7 +243,7 @@
 			}
 			removeAgedItems(false);
 			if (notify) {
-				fireSeriesChanged();
+				updateBoundsForRemovedItem(item);
 			}
 		}
 	}


diffpatchoriginal=/var/lib/oar/.batch_job_bashrc: line 5: /home/tdurieux/.bashrc: No such file or directory
--- org/jfree/data/time/TimeSeries.java
+++ org/jfree/data/time/TimeSeries.java
@@ -635,11 +635,7 @@
 
 
 			if (notify) {
-				fireSeriesChanged();
-			}
-		}
 
-	}
 
 
 
@@ -648,10 +644,7 @@
 
 
 
-	public void add(org.jfree.data.time.RegularTimePeriod period, double value) {
 
-		add(period, value, true);
-	}
 
 
 
@@ -661,11 +654,7 @@
 
 
 
-	public void add(org.jfree.data.time.RegularTimePeriod period, double value, boolean notify) {
 
-		org.jfree.data.time.TimeSeriesDataItem item = new org.jfree.data.time.TimeSeriesDataItem(period, value);
-		add(item, notify);
-	}
 
 
 
@@ -675,10 +664,7 @@
 
 
 
-	public void add(org.jfree.data.time.RegularTimePeriod period, java.lang.Number value) {
 
-		add(period, value, true);
-	}
 
 
 
@@ -688,11 +674,7 @@
 
 
 
-	public void add(org.jfree.data.time.RegularTimePeriod period, java.lang.Number value, boolean notify) {
 
-		org.jfree.data.time.TimeSeriesDataItem item = new org.jfree.data.time.TimeSeriesDataItem(period, value);
-		add(item, notify);
-	}
 
 
 
@@ -701,15 +683,6 @@
 
 
 
-	public void update(org.jfree.data.time.RegularTimePeriod period, java.lang.Number value) {
-		org.jfree.data.time.TimeSeriesDataItem temp = new org.jfree.data.time.TimeSeriesDataItem(period, value);
-		int index = java.util.Collections.binarySearch(this.data, temp);
-		if (index < 0) {
-			throw new org.jfree.data.general.SeriesException(("There is no existing value for the " + 
-			"specified 'period'."));
-		}
-		update(index, value);
-	}
 
 
 
@@ -717,27 +690,6 @@
 
 
 
-	public void update(int index, java.lang.Number value) {
-		org.jfree.data.time.TimeSeriesDataItem item = ((org.jfree.data.time.TimeSeriesDataItem) (this.data.get(index)));
-		boolean iterate = false;
-		java.lang.Number oldYN = item.getValue();
-		if (oldYN != null) {
-			double oldY = oldYN.doubleValue();
-			if (!(java.lang.Double.isNaN(oldY))) {
-				iterate = (oldY <= (this.minY)) || (oldY >= (this.maxY));
-			}
-		}
-		item.setValue(value);
-		if (iterate) {
-			findBoundsByIteration();
-		}else
-			if (value != null) {
-				double yy = value.doubleValue();
-				this.minY = minIgnoreNaN(this.minY, yy);
-				this.maxY = maxIgnoreNaN(this.maxY, yy);
-			}
-		fireSeriesChanged();
-	}
 
 
 
@@ -747,19 +699,6 @@
 
 
 
-	public org.jfree.data.time.TimeSeries addAndOrUpdate(org.jfree.data.time.TimeSeries series) {
-		org.jfree.data.time.TimeSeries overwritten = new org.jfree.data.time.TimeSeries(("Overwritten values from: " + 
-		(getKey())));
-		for (int i = 0; i < (series.getItemCount()); i++) {
-			org.jfree.data.time.TimeSeriesDataItem item = series.getRawDataItem(i);
-			org.jfree.data.time.TimeSeriesDataItem oldItem = addOrUpdate(item.getPeriod(), 
-			item.getValue());
-			if (oldItem != null) {
-				overwritten.add(oldItem);
-			}
-		}
-		return overwritten;
-	}
 
 
 
@@ -772,10 +711,6 @@
 
 
 
-	public org.jfree.data.time.TimeSeriesDataItem addOrUpdate(org.jfree.data.time.RegularTimePeriod period, 
-	double value) {
-		return addOrUpdate(period, new java.lang.Double(value));
-	}
 
 
 
@@ -788,10 +723,6 @@
 
 
 
-	public org.jfree.data.time.TimeSeriesDataItem addOrUpdate(org.jfree.data.time.RegularTimePeriod period, 
-	java.lang.Number value) {
-		return addOrUpdate(new org.jfree.data.time.TimeSeriesDataItem(period, value));
-	}
 
 
 
@@ -804,64 +735,14 @@
 
 
 
-	public org.jfree.data.time.TimeSeriesDataItem addOrUpdate(org.jfree.data.time.TimeSeriesDataItem item) {
 
-		if (item == null) {
-			throw new java.lang.IllegalArgumentException("Null 'period' argument.");
-		}
-		java.lang.Class periodClass = item.getPeriod().getClass();
-		if ((this.timePeriodClass) == null) {
-			this.timePeriodClass = periodClass;
-		}else
-			if (!(this.timePeriodClass.equals(periodClass))) {
-				java.lang.String msg = (((("You are trying to add data where the time " + 
-				"period class is ") + (periodClass.getName())) + 
-				", but the TimeSeries is expecting an instance of ") + 
-				(this.timePeriodClass.getName())) + ".";
-				throw new org.jfree.data.general.SeriesException(msg);
-			}
-		org.jfree.data.time.TimeSeriesDataItem overwritten = null;
-		int index = java.util.Collections.binarySearch(this.data, item);
-		if (index >= 0) {
-			org.jfree.data.time.TimeSeriesDataItem existing = 
-			((org.jfree.data.time.TimeSeriesDataItem) (this.data.get(index)));
-			overwritten = ((org.jfree.data.time.TimeSeriesDataItem) (existing.clone()));
 
 
-			boolean iterate = false;
-			java.lang.Number oldYN = existing.getValue();
-			double oldY = (oldYN != null) ? oldYN.doubleValue() : java.lang.Double.NaN;
-			if (!(java.lang.Double.isNaN(oldY))) {
-				iterate = (oldY <= (this.minY)) || (oldY >= (this.maxY));
-			}
-			existing.setValue(item.getValue());
-			if (iterate) {
-				findBoundsByIteration();
-			}else
-				if ((item.getValue()) != null) {
-					double yy = item.getValue().doubleValue();
-					this.minY = minIgnoreNaN(this.minY, yy);
-					this.maxY = minIgnoreNaN(this.maxY, yy);
-				}
-		}else 
-		{
-			item = ((org.jfree.data.time.TimeSeriesDataItem) (item.clone()));
-			this.data.add(((-index) - 1), item);
-			updateBoundsForAddedItem(item);
 
 
-			if ((getItemCount()) > (this.maximumItemCount)) {
-				org.jfree.data.time.TimeSeriesDataItem d = ((org.jfree.data.time.TimeSeriesDataItem) (this.data.remove(0)));
-				updateBoundsForRemovedItem(d);
-			}
-		}
-		removeAgedItems(false);
 
 
-		fireSeriesChanged();
-		return overwritten;
 
-	}
 
 
 
@@ -871,25 +752,8 @@
 
 
 
-	public void removeAgedItems(boolean notify) {
 
 
-		if ((getItemCount()) > 1) {
-			long latest = getTimePeriod(((getItemCount()) - 1)).getSerialIndex();
-			boolean removed = false;
-			while ((latest - (getTimePeriod(0).getSerialIndex())) > 
-			(this.maximumItemAge)) {
-				this.data.remove(0);
-				removed = true;
-			} 
-			if (removed) {
-				findBoundsByIteration();
-				if (notify) {
-					fireSeriesChanged();
-				}
-			}
-		}
-	}
 
 
 
@@ -901,60 +765,15 @@
 
 
 
-	public void removeAgedItems(long latest, boolean notify) {
-		if (this.data.isEmpty()) {
-			return;
-		}
 
-		long index = java.lang.Long.MAX_VALUE;
-		try {
-			java.lang.reflect.Method m = org.jfree.data.time.RegularTimePeriod.class.getDeclaredMethod(
-			"createInstance", new java.lang.Class[]{ java.lang.Class.class, java.util.Date.class, 
-			java.util.TimeZone.class });
-			org.jfree.data.time.RegularTimePeriod newest = ((org.jfree.data.time.RegularTimePeriod) (m.invoke(
-			this.timePeriodClass, new java.lang.Object[]{ this.timePeriodClass, 
-			new java.util.Date(latest), java.util.TimeZone.getDefault() })));
-			index = newest.getSerialIndex();
-		}
-		 catch (java.lang.NoSuchMethodException e) {
-			e.printStackTrace();
-		}
-		 catch (java.lang.IllegalAccessException e) {
-			e.printStackTrace();
-		}
-		 catch (java.lang.reflect.InvocationTargetException e) {
-			e.printStackTrace();
-		}
 
 
 
-		boolean removed = false;
-		while (((getItemCount()) > 0) && ((index - 
-		(getTimePeriod(0).getSerialIndex())) > (this.maximumItemAge))) {
-			this.data.remove(0);
-			removed = true;
-		} 
-		if (removed) {
-			findBoundsByIteration();
-			if (notify) {
-				fireSeriesChanged();
-			}
-		}
-	}
 
 
 
 
 
-	public void clear() {
-		if ((this.data.size()) > 0) {
-			this.data.clear();
-			this.timePeriodClass = null;
-			this.minY = java.lang.Double.NaN;
-			this.maxY = java.lang.Double.NaN;
-			fireSeriesChanged();
-		}
-	}
 
 
 
@@ -964,12 +783,193 @@
 
 
 
-	public void delete(org.jfree.data.time.RegularTimePeriod period) {
-		int index = getIndex(period);
-		if (index >= 0) {
-			org.jfree.data.time.TimeSeriesDataItem item = ((org.jfree.data.time.TimeSeriesDataItem) (this.data.remove(
-			index)));
-			updateBoundsForRemovedItem(item);
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+				updateBoundsForRemovedItem(item);}}} 	public void add(org.jfree.data.time.RegularTimePeriod period, double value) { 		add(period, value, true);} 	public void add(org.jfree.data.time.RegularTimePeriod period, double value, boolean notify) { 		org.jfree.data.time.TimeSeriesDataItem item = new org.jfree.data.time.TimeSeriesDataItem(period, value); 		add(item, notify);} 	public void add(org.jfree.data.time.RegularTimePeriod period, java.lang.Number value) { 		add(period, value, true);} 	public void add(org.jfree.data.time.RegularTimePeriod period, java.lang.Number value, boolean notify) { 		org.jfree.data.time.TimeSeriesDataItem item = new org.jfree.data.time.TimeSeriesDataItem(period, value); 		add(item, notify);} 	public void update(org.jfree.data.time.RegularTimePeriod period, java.lang.Number value) { 		org.jfree.data.time.TimeSeriesDataItem temp = new org.jfree.data.time.TimeSeriesDataItem(period, value); 		int index = java.util.Collections.binarySearch(this.data, temp); 		if (index < 0) { 			throw new org.jfree.data.general.SeriesException(("There is no existing value for the " + "specified 'period'."));} 		update(index, value);} 	public void update(int index, java.lang.Number value) { 		org.jfree.data.time.TimeSeriesDataItem item = ((org.jfree.data.time.TimeSeriesDataItem) (this.data.get(index))); 		boolean iterate = false; 		java.lang.Number oldYN = item.getValue(); 		if (oldYN != null) { 			double oldY = oldYN.doubleValue(); 			if (!(java.lang.Double.isNaN(oldY))) { 				iterate = (oldY <= (this.minY)) || (oldY >= (this.maxY));}} 		item.setValue(value); 		if (iterate) { 			findBoundsByIteration();}else 			if (value != null) { 				double yy = value.doubleValue(); 				this.minY = minIgnoreNaN(this.minY, yy); 				this.maxY = maxIgnoreNaN(this.maxY, yy);} 		fireSeriesChanged();} 	public org.jfree.data.time.TimeSeries addAndOrUpdate(org.jfree.data.time.TimeSeries series) { 		org.jfree.data.time.TimeSeries overwritten = new org.jfree.data.time.TimeSeries(("Overwritten values from: " + (getKey()))); 		for (int i = 0; i < (series.getItemCount()); i++) { 			org.jfree.data.time.TimeSeriesDataItem item = series.getRawDataItem(i); 			org.jfree.data.time.TimeSeriesDataItem oldItem = addOrUpdate(item.getPeriod(), item.getValue()); 			if (oldItem != null) { 				overwritten.add(oldItem);}} 		return overwritten;} 	public org.jfree.data.time.TimeSeriesDataItem addOrUpdate(org.jfree.data.time.RegularTimePeriod period, double value) { 		return addOrUpdate(period, new java.lang.Double(value));} 	public org.jfree.data.time.TimeSeriesDataItem addOrUpdate(org.jfree.data.time.RegularTimePeriod period, java.lang.Number value) { 		return addOrUpdate(new org.jfree.data.time.TimeSeriesDataItem(period, value));} 	public org.jfree.data.time.TimeSeriesDataItem addOrUpdate(org.jfree.data.time.TimeSeriesDataItem item) { 		if (item == null) { 			throw new java.lang.IllegalArgumentException("Null 'period' argument.");} 		java.lang.Class periodClass = item.getPeriod().getClass(); 		if ((this.timePeriodClass) == null) { 			this.timePeriodClass = periodClass;}else 			if (!(this.timePeriodClass.equals(periodClass))) { 				java.lang.String msg = (((("You are trying to add data where the time " + "period class is ") + (periodClass.getName())) + ", but the TimeSeries is expecting an instance of ") + (this.timePeriodClass.getName())) + "."; 				throw new org.jfree.data.general.SeriesException(msg);} 		org.jfree.data.time.TimeSeriesDataItem overwritten = null; 		int index = java.util.Collections.binarySearch(this.data, item); 		if (index >= 0) { 			org.jfree.data.time.TimeSeriesDataItem existing = ((org.jfree.data.time.TimeSeriesDataItem) (this.data.get(index))); 			overwritten = ((org.jfree.data.time.TimeSeriesDataItem) (existing.clone())); 			boolean iterate = false; 			java.lang.Number oldYN = existing.getValue(); 			double oldY = (oldYN != null) ? oldYN.doubleValue() : java.lang.Double.NaN; 			if (!(java.lang.Double.isNaN(oldY))) { 				iterate = (oldY <= (this.minY)) || (oldY >= (this.maxY));} 			existing.setValue(item.getValue()); 			if (iterate) { 				findBoundsByIteration();}else 				if ((item.getValue()) != null) { 					double yy = item.getValue().doubleValue(); 					this.minY = minIgnoreNaN(this.minY, yy); 					this.maxY = minIgnoreNaN(this.maxY, yy);}}else { 			item = ((org.jfree.data.time.TimeSeriesDataItem) (item.clone())); 			this.data.add(((-index) - 1), item); 			updateBoundsForAddedItem(item); 			if ((getItemCount()) > (this.maximumItemCount)) { 				org.jfree.data.time.TimeSeriesDataItem d = ((org.jfree.data.time.TimeSeriesDataItem) (this.data.remove(0))); 				updateBoundsForRemovedItem(d);}} 		removeAgedItems(false); 		fireSeriesChanged(); 		return overwritten;} 	public void removeAgedItems(boolean notify) { 		if ((getItemCount()) > 1) { 			long latest = getTimePeriod(((getItemCount()) - 1)).getSerialIndex(); 			boolean removed = false; 			while ((latest - (getTimePeriod(0).getSerialIndex())) > (this.maximumItemAge)) { 				this.data.remove(0); 				removed = true;} 			if (removed) { 				findBoundsByIteration(); 				if (notify) { 					fireSeriesChanged();}}}} 	public void removeAgedItems(long latest, boolean notify) { 		if (this.data.isEmpty()) { 			return;} 		long index = java.lang.Long.MAX_VALUE; 		try { 			java.lang.reflect.Method m = org.jfree.data.time.RegularTimePeriod.class.getDeclaredMethod("createInstance", new java.lang.Class[]{ java.lang.Class.class, java.util.Date.class, java.util.TimeZone.class }); 			org.jfree.data.time.RegularTimePeriod newest = ((org.jfree.data.time.RegularTimePeriod) (m.invoke(this.timePeriodClass, new java.lang.Object[]{ this.timePeriodClass, new java.util.Date(latest), java.util.TimeZone.getDefault() }))); 			index = newest.getSerialIndex();} catch (java.lang.NoSuchMethodException e) { 			e.printStackTrace();} catch (java.lang.IllegalAccessException e) { 			e.printStackTrace();} catch (java.lang.reflect.InvocationTargetException e) { 			e.printStackTrace();} 		boolean removed = false; 		while (((getItemCount()) > 0) && ((index - (getTimePeriod(0).getSerialIndex())) > (this.maximumItemAge))) { 			this.data.remove(0); 			removed = true;} 		if (removed) { 			findBoundsByIteration(); 			if (notify) { 				fireSeriesChanged();}}} 	public void clear() { 		if ((this.data.size()) > 0) { 			this.data.clear(); 			this.timePeriodClass = null; 			this.minY = java.lang.Double.NaN; 			this.maxY = java.lang.Double.NaN; 			fireSeriesChanged();}} 	public void delete(org.jfree.data.time.RegularTimePeriod period) { 		int index = getIndex(period); 		if (index >= 0) { 			org.jfree.data.time.TimeSeriesDataItem item = ((org.jfree.data.time.TimeSeriesDataItem) (this.data.remove(index))); 			updateBoundsForRemovedItem(item);
 			if (this.data.isEmpty()) {
 				this.timePeriodClass = null;
 			}



Astor Output:

General stats:
EXECUTION_IDENTIFIER=Chart-3
TOTAL_TIME=90.764
NR_GENERATIONS=243
NR_RIGHT_COMPILATIONS=152
NR_FAILLING_COMPILATIONS=91
NR_ERRONEOUS_VARIANCES=null
NR_FAILING_VALIDATION_PROCESS=null
OUTPUT_STATUS=STOP_BY_PATCH_FOUND

Patch stats:

Patch 1
VARIANT_ID=486
TIME=90
VALIDATION=|true|0|4390|[]|
GENERATION=243
FOLDER_SOLUTION_CODE=/tmp/jGenProg_Defects4J_Chart_3/./output_astor/AstorMain-Chart-3//bin//variant-486
--Patch Hunk #1
OPERATOR=ReplaceOp

LOCATION=org.jfree.data.time.TimeSeries

PATH=/tmp/jGenProg_Defects4J_Chart_3/output_astor/AstorMain-Chart-3/src/default/org/jfree/data/time/TimeSeries.java

MODIFIED_FILE_PATH=/tmp/jGenProg_Defects4J_Chart_3/./output_astor/AstorMain-Chart-3//src//variant-486_f/org/jfree/data/time/TimeSeries.java

LINE=638

SUSPICIOUNESS=0.123

MP_RANKING=59

ORIGINAL_CODE=fireSeriesChanged()

BUGGY_CODE_TYPE=CtInvocationImpl|CtBlockImpl

PATCH_HUNK_CODE=updateBoundsForRemovedItem(item)

PATCH_HUNK_TYPE=CtInvocationImpl|CtBlockImpl

INGREDIENT_SCOPE=LOCAL

INGREDIENT_PARENT=updateBoundsForRemovedItem(item)

PATCH_DIFF_ORIG=/var/lib/oar/.batch_job_bashrc: line 5: /home/tdurieux/.bashrc: No such file or directory
--- org/jfree/data/time/TimeSeries.java
+++ org/jfree/data/time/TimeSeries.java
@@ -635,11 +635,7 @@
 
 
 			if (notify) {
-				fireSeriesChanged();
-			}
-		}
 
-	}
 
 
 
@@ -648,10 +644,7 @@
 
 
 
-	public void add(org.jfree.data.time.RegularTimePeriod period, double value) {
 
-		add(period, value, true);
-	}
 
 
 
@@ -661,11 +654,7 @@
 
 
 
-	public void add(org.jfree.data.time.RegularTimePeriod period, double value, boolean notify) {
 
-		org.jfree.data.time.TimeSeriesDataItem item = new org.jfree.data.time.TimeSeriesDataItem(period, value);
-		add(item, notify);
-	}
 
 
 
@@ -675,10 +664,7 @@
 
 
 
-	public void add(org.jfree.data.time.RegularTimePeriod period, java.lang.Number value) {
 
-		add(period, value, true);
-	}
 
 
 
@@ -688,11 +674,7 @@
 
 
 
-	public void add(org.jfree.data.time.RegularTimePeriod period, java.lang.Number value, boolean notify) {
 
-		org.jfree.data.time.TimeSeriesDataItem item = new org.jfree.data.time.TimeSeriesDataItem(period, value);
-		add(item, notify);
-	}
 
 
 
@@ -701,15 +683,6 @@
 
 
 
-	public void update(org.jfree.data.time.RegularTimePeriod period, java.lang.Number value) {
-		org.jfree.data.time.TimeSeriesDataItem temp = new org.jfree.data.time.TimeSeriesDataItem(period, value);
-		int index = java.util.Collections.binarySearch(this.data, temp);
-		if (index < 0) {
-			throw new org.jfree.data.general.SeriesException(("There is no existing value for the " + 
-			"specified 'period'."));
-		}
-		update(index, value);
-	}
 
 
 
@@ -717,27 +690,6 @@
 
 
 
-	public void update(int index, java.lang.Number value) {
-		org.jfree.data.time.TimeSeriesDataItem item = ((org.jfree.data.time.TimeSeriesDataItem) (this.data.get(index)));
-		boolean iterate = false;
-		java.lang.Number oldYN = item.getValue();
-		if (oldYN != null) {
-			double oldY = oldYN.doubleValue();
-			if (!(java.lang.Double.isNaN(oldY))) {
-				iterate = (oldY <= (this.minY)) || (oldY >= (this.maxY));
-			}
-		}
-		item.setValue(value);
-		if (iterate) {
-			findBoundsByIteration();
-		}else
-			if (value != null) {
-				double yy = value.doubleValue();
-				this.minY = minIgnoreNaN(this.minY, yy);
-				this.maxY = maxIgnoreNaN(this.maxY, yy);
-			}
-		fireSeriesChanged();
-	}
 
 
 
@@ -747,19 +699,6 @@
 
 
 
-	public org.jfree.data.time.TimeSeries addAndOrUpdate(org.jfree.data.time.TimeSeries series) {
-		org.jfree.data.time.TimeSeries overwritten = new org.jfree.data.time.TimeSeries(("Overwritten values from: " + 
-		(getKey())));
-		for (int i = 0; i < (series.getItemCount()); i++) {
-			org.jfree.data.time.TimeSeriesDataItem item = series.getRawDataItem(i);
-			org.jfree.data.time.TimeSeriesDataItem oldItem = addOrUpdate(item.getPeriod(), 
-			item.getValue());
-			if (oldItem != null) {
-				overwritten.add(oldItem);
-			}
-		}
-		return overwritten;
-	}
 
 
 
@@ -772,10 +711,6 @@
 
 
 
-	public org.jfree.data.time.TimeSeriesDataItem addOrUpdate(org.jfree.data.time.RegularTimePeriod period, 
-	double value) {
-		return addOrUpdate(period, new java.lang.Double(value));
-	}
 
 
 
@@ -788,10 +723,6 @@
 
 
 
-	public org.jfree.data.time.TimeSeriesDataItem addOrUpdate(org.jfree.data.time.RegularTimePeriod period, 
-	java.lang.Number value) {
-		return addOrUpdate(new org.jfree.data.time.TimeSeriesDataItem(period, value));
-	}
 
 
 
@@ -804,64 +735,14 @@
 
 
 
-	public org.jfree.data.time.TimeSeriesDataItem addOrUpdate(org.jfree.data.time.TimeSeriesDataItem item) {
 
-		if (item == null) {
-			throw new java.lang.IllegalArgumentException("Null 'period' argument.");
-		}
-		java.lang.Class periodClass = item.getPeriod().getClass();
-		if ((this.timePeriodClass) == null) {
-			this.timePeriodClass = periodClass;
-		}else
-			if (!(this.timePeriodClass.equals(periodClass))) {
-				java.lang.String msg = (((("You are trying to add data where the time " + 
-				"period class is ") + (periodClass.getName())) + 
-				", but the TimeSeries is expecting an instance of ") + 
-				(this.timePeriodClass.getName())) + ".";
-				throw new org.jfree.data.general.SeriesException(msg);
-			}
-		org.jfree.data.time.TimeSeriesDataItem overwritten = null;
-		int index = java.util.Collections.binarySearch(this.data, item);
-		if (index >= 0) {
-			org.jfree.data.time.TimeSeriesDataItem existing = 
-			((org.jfree.data.time.TimeSeriesDataItem) (this.data.get(index)));
-			overwritten = ((org.jfree.data.time.TimeSeriesDataItem) (existing.clone()));
 
 
-			boolean iterate = false;
-			java.lang.Number oldYN = existing.getValue();
-			double oldY = (oldYN != null) ? oldYN.doubleValue() : java.lang.Double.NaN;
-			if (!(java.lang.Double.isNaN(oldY))) {
-				iterate = (oldY <= (this.minY)) || (oldY >= (this.maxY));
-			}
-			existing.setValue(item.getValue());
-			if (iterate) {
-				findBoundsByIteration();
-			}else
-				if ((item.getValue()) != null) {
-					double yy = item.getValue().doubleValue();
-					this.minY = minIgnoreNaN(this.minY, yy);
-					this.maxY = minIgnoreNaN(this.maxY, yy);
-				}
-		}else 
-		{
-			item = ((org.jfree.data.time.TimeSeriesDataItem) (item.clone()));
-			this.data.add(((-index) - 1), item);
-			updateBoundsForAddedItem(item);
 
 
-			if ((getItemCount()) > (this.maximumItemCount)) {
-				org.jfree.data.time.TimeSeriesDataItem d = ((org.jfree.data.time.TimeSeriesDataItem) (this.data.remove(0)));
-				updateBoundsForRemovedItem(d);
-			}
-		}
-		removeAgedItems(false);
 
 
-		fireSeriesChanged();
-		return overwritten;
 
-	}
 
 
 
@@ -871,25 +752,8 @@
 
 
 
-	public void removeAgedItems(boolean notify) {
 
 
-		if ((getItemCount()) > 1) {
-			long latest = getTimePeriod(((getItemCount()) - 1)).getSerialIndex();
-			boolean removed = false;
-			while ((latest - (getTimePeriod(0).getSerialIndex())) > 
-			(this.maximumItemAge)) {
-				this.data.remove(0);
-				removed = true;
-			} 
-			if (removed) {
-				findBoundsByIteration();
-				if (notify) {
-					fireSeriesChanged();
-				}
-			}
-		}
-	}
 
 
 
@@ -901,60 +765,15 @@
 
 
 
-	public void removeAgedItems(long latest, boolean notify) {
-		if (this.data.isEmpty()) {
-			return;
-		}
 
-		long index = java.lang.Long.MAX_VALUE;
-		try {
-			java.lang.reflect.Method m = org.jfree.data.time.RegularTimePeriod.class.getDeclaredMethod(
-			"createInstance", new java.lang.Class[]{ java.lang.Class.class, java.util.Date.class, 
-			java.util.TimeZone.class });
-			org.jfree.data.time.RegularTimePeriod newest = ((org.jfree.data.time.RegularTimePeriod) (m.invoke(
-			this.timePeriodClass, new java.lang.Object[]{ this.timePeriodClass, 
-			new java.util.Date(latest), java.util.TimeZone.getDefault() })));
-			index = newest.getSerialIndex();
-		}
-		 catch (java.lang.NoSuchMethodException e) {
-			e.printStackTrace();
-		}
-		 catch (java.lang.IllegalAccessException e) {
-			e.printStackTrace();
-		}
-		 catch (java.lang.reflect.InvocationTargetException e) {
-			e.printStackTrace();
-		}
 
 
 
-		boolean removed = false;
-		while (((getItemCount()) > 0) && ((index - 
-		(getTimePeriod(0).getSerialIndex())) > (this.maximumItemAge))) {
-			this.data.remove(0);
-			removed = true;
-		} 
-		if (removed) {
-			findBoundsByIteration();
-			if (notify) {
-				fireSeriesChanged();
-			}
-		}
-	}
 
 
 
 
 
-	public void clear() {
-		if ((this.data.size()) > 0) {
-			this.data.clear();
-			this.timePeriodClass = null;
-			this.minY = java.lang.Double.NaN;
-			this.maxY = java.lang.Double.NaN;
-			fireSeriesChanged();
-		}
-	}
 
 
 
@@ -964,12 +783,193 @@
 
 
 
-	public void delete(org.jfree.data.time.RegularTimePeriod period) {
-		int index = getIndex(period);
-		if (index >= 0) {
-			org.jfree.data.time.TimeSeriesDataItem item = ((org.jfree.data.time.TimeSeriesDataItem) (this.data.remove(
-			index)));
-			updateBoundsForRemovedItem(item);
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+				updateBoundsForRemovedItem(item);}}} 	public void add(org.jfree.data.time.RegularTimePeriod period, double value) { 		add(period, value, true);} 	public void add(org.jfree.data.time.RegularTimePeriod period, double value, boolean notify) { 		org.jfree.data.time.TimeSeriesDataItem item = new org.jfree.data.time.TimeSeriesDataItem(period, value); 		add(item, notify);} 	public void add(org.jfree.data.time.RegularTimePeriod period, java.lang.Number value) { 		add(period, value, true);} 	public void add(org.jfree.data.time.RegularTimePeriod period, java.lang.Number value, boolean notify) { 		org.jfree.data.time.TimeSeriesDataItem item = new org.jfree.data.time.TimeSeriesDataItem(period, value); 		add(item, notify);} 	public void update(org.jfree.data.time.RegularTimePeriod period, java.lang.Number value) { 		org.jfree.data.time.TimeSeriesDataItem temp = new org.jfree.data.time.TimeSeriesDataItem(period, value); 		int index = java.util.Collections.binarySearch(this.data, temp); 		if (index < 0) { 			throw new org.jfree.data.general.SeriesException(("There is no existing value for the " + "specified 'period'."));} 		update(index, value);} 	public void update(int index, java.lang.Number value) { 		org.jfree.data.time.TimeSeriesDataItem item = ((org.jfree.data.time.TimeSeriesDataItem) (this.data.get(index))); 		boolean iterate = false; 		java.lang.Number oldYN = item.getValue(); 		if (oldYN != null) { 			double oldY = oldYN.doubleValue(); 			if (!(java.lang.Double.isNaN(oldY))) { 				iterate = (oldY <= (this.minY)) || (oldY >= (this.maxY));}} 		item.setValue(value); 		if (iterate) { 			findBoundsByIteration();}else 			if (value != null) { 				double yy = value.doubleValue(); 				this.minY = minIgnoreNaN(this.minY, yy); 				this.maxY = maxIgnoreNaN(this.maxY, yy);} 		fireSeriesChanged();} 	public org.jfree.data.time.TimeSeries addAndOrUpdate(org.jfree.data.time.TimeSeries series) { 		org.jfree.data.time.TimeSeries overwritten = new org.jfree.data.time.TimeSeries(("Overwritten values from: " + (getKey()))); 		for (int i = 0; i < (series.getItemCount()); i++) { 			org.jfree.data.time.TimeSeriesDataItem item = series.getRawDataItem(i); 			org.jfree.data.time.TimeSeriesDataItem oldItem = addOrUpdate(item.getPeriod(), item.getValue()); 			if (oldItem != null) { 				overwritten.add(oldItem);}} 		return overwritten;} 	public org.jfree.data.time.TimeSeriesDataItem addOrUpdate(org.jfree.data.time.RegularTimePeriod period, double value) { 		return addOrUpdate(period, new java.lang.Double(value));} 	public org.jfree.data.time.TimeSeriesDataItem addOrUpdate(org.jfree.data.time.RegularTimePeriod period, java.lang.Number value) { 		return addOrUpdate(new org.jfree.data.time.TimeSeriesDataItem(period, value));} 	public org.jfree.data.time.TimeSeriesDataItem addOrUpdate(org.jfree.data.time.TimeSeriesDataItem item) { 		if (item == null) { 			throw new java.lang.IllegalArgumentException("Null 'period' argument.");} 		java.lang.Class periodClass = item.getPeriod().getClass(); 		if ((this.timePeriodClass) == null) { 			this.timePeriodClass = periodClass;}else 			if (!(this.timePeriodClass.equals(periodClass))) { 				java.lang.String msg = (((("You are trying to add data where the time " + "period class is ") + (periodClass.getName())) + ", but the TimeSeries is expecting an instance of ") + (this.timePeriodClass.getName())) + "."; 				throw new org.jfree.data.general.SeriesException(msg);} 		org.jfree.data.time.TimeSeriesDataItem overwritten = null; 		int index = java.util.Collections.binarySearch(this.data, item); 		if (index >= 0) { 			org.jfree.data.time.TimeSeriesDataItem existing = ((org.jfree.data.time.TimeSeriesDataItem) (this.data.get(index))); 			overwritten = ((org.jfree.data.time.TimeSeriesDataItem) (existing.clone())); 			boolean iterate = false; 			java.lang.Number oldYN = existing.getValue(); 			double oldY = (oldYN != null) ? oldYN.doubleValue() : java.lang.Double.NaN; 			if (!(java.lang.Double.isNaN(oldY))) { 				iterate = (oldY <= (this.minY)) || (oldY >= (this.maxY));} 			existing.setValue(item.getValue()); 			if (iterate) { 				findBoundsByIteration();}else 				if ((item.getValue()) != null) { 					double yy = item.getValue().doubleValue(); 					this.minY = minIgnoreNaN(this.minY, yy); 					this.maxY = minIgnoreNaN(this.maxY, yy);}}else { 			item = ((org.jfree.data.time.TimeSeriesDataItem) (item.clone())); 			this.data.add(((-index) - 1), item); 			updateBoundsForAddedItem(item); 			if ((getItemCount()) > (this.maximumItemCount)) { 				org.jfree.data.time.TimeSeriesDataItem d = ((org.jfree.data.time.TimeSeriesDataItem) (this.data.remove(0))); 				updateBoundsForRemovedItem(d);}} 		removeAgedItems(false); 		fireSeriesChanged(); 		return overwritten;} 	public void removeAgedItems(boolean notify) { 		if ((getItemCount()) > 1) { 			long latest = getTimePeriod(((getItemCount()) - 1)).getSerialIndex(); 			boolean removed = false; 			while ((latest - (getTimePeriod(0).getSerialIndex())) > (this.maximumItemAge)) { 				this.data.remove(0); 				removed = true;} 			if (removed) { 				findBoundsByIteration(); 				if (notify) { 					fireSeriesChanged();}}}} 	public void removeAgedItems(long latest, boolean notify) { 		if (this.data.isEmpty()) { 			return;} 		long index = java.lang.Long.MAX_VALUE; 		try { 			java.lang.reflect.Method m = org.jfree.data.time.RegularTimePeriod.class.getDeclaredMethod("createInstance", new java.lang.Class[]{ java.lang.Class.class, java.util.Date.class, java.util.TimeZone.class }); 			org.jfree.data.time.RegularTimePeriod newest = ((org.jfree.data.time.RegularTimePeriod) (m.invoke(this.timePeriodClass, new java.lang.Object[]{ this.timePeriodClass, new java.util.Date(latest), java.util.TimeZone.getDefault() }))); 			index = newest.getSerialIndex();} catch (java.lang.NoSuchMethodException e) { 			e.printStackTrace();} catch (java.lang.IllegalAccessException e) { 			e.printStackTrace();} catch (java.lang.reflect.InvocationTargetException e) { 			e.printStackTrace();} 		boolean removed = false; 		while (((getItemCount()) > 0) && ((index - (getTimePeriod(0).getSerialIndex())) > (this.maximumItemAge))) { 			this.data.remove(0); 			removed = true;} 		if (removed) { 			findBoundsByIteration(); 			if (notify) { 				fireSeriesChanged();}}} 	public void clear() { 		if ((this.data.size()) > 0) { 			this.data.clear(); 			this.timePeriodClass = null; 			this.minY = java.lang.Double.NaN; 			this.maxY = java.lang.Double.NaN; 			fireSeriesChanged();}} 	public void delete(org.jfree.data.time.RegularTimePeriod period) { 		int index = getIndex(period); 		if (index >= 0) { 			org.jfree.data.time.TimeSeriesDataItem item = ((org.jfree.data.time.TimeSeriesDataItem) (this.data.remove(index))); 			updateBoundsForRemovedItem(item);
 			if (this.data.isEmpty()) {
 				this.timePeriodClass = null;
 			}



[INFO ] fr.inria.astor.core.output.PatchJSONStandarOutput.produceOutput(PatchJSONStandarOutput.java:103) - Storing ing JSON at /tmp/jGenProg_Defects4J_Chart_3/./output_astor/AstorMain-Chart-3//astor_output.json
[INFO ] fr.inria.astor.core.output.PatchJSONStandarOutput.produceOutput(PatchJSONStandarOutput.java:104) - astor_output:
{"general":{"NR_RIGHT_COMPILATIONS":152,"NR_ERRONEOUS_VARIANCES":null,"EXECUTION_IDENTIFIER":"Chart-3","OUTPUT_STATUS":"STOP_BY_PATCH_FOUND","NR_FAILLING_COMPILATIONS":91,"NR_GENERATIONS":243,"TOTAL_TIME":90.764,"NR_FAILING_VALIDATION_PROCESS":null},"patches":[{"VARIANT_ID":"486","VALIDATION":"|true|0|4390|[]|","patchhunks":[{"LOCATION":"org.jfree.data.time.TimeSeries","PATH":"\\\/tmp\\\/jGenProg_Defects4J_Chart_3\\\/output_astor\\\/AstorMain-Chart-3\\\/src\\\/default\\\/org\\\/jfree\\\/data\\\/time\\\/TimeSeries.java","INGREDIENT_SCOPE":"LOCAL","SUSPICIOUNESS":"0.123","INGREDIENT_PARENT":"updateBoundsForRemovedItem(item)","PATCH_HUNK_TYPE":"CtInvocationImpl|CtBlockImpl","ORIGINAL_CODE":"fireSeriesChanged()","BUGGY_CODE_TYPE":"CtInvocationImpl|CtBlockImpl","OPERATOR":"ReplaceOp","MODIFIED_FILE_PATH":"\\\/tmp\\\/jGenProg_Defects4J_Chart_3\\\/.\\\/output_astor\\\/AstorMain-Chart-3\\\/\\\/src\\\/\\\/variant-486_f\\\/org\\\/jfree\\\/data\\\/time\\\/TimeSeries.java","LINE":"638","MP_RANKING":"59","PATCH_HUNK_CODE":"updateBoundsForRemovedItem(item)"}],"TIME":"90","GENERATION":"243","FOLDER_SOLUTION_CODE":"\\\/tmp\\\/jGenProg_Defects4J_Chart_3\\\/.\\\/output_astor\\\/AstorMain-Chart-3\\\/\\\/bin\\\/\\\/variant-486","PATCH_DIFF_ORIG":"\\\/var\\\/lib\\\/oar\\\/.batch_job_bashrc: line 5: \\\/home\\\/tdurieux\\\/.bashrc: No such file or directory\\n--- org\\\/jfree\\\/data\\\/time\\\/TimeSeries.java\\n+++ org\\\/jfree\\\/data\\\/time\\\/TimeSeries.java\\n@@ -635,11 +635,7 @@\\n \\n \\n \\t\\t\\tif (notify) {\\n-\\t\\t\\t\\tfireSeriesChanged();\\n-\\t\\t\\t}\\n-\\t\\t}\\n \\n-\\t}\\n \\n \\n \\n@@ -648,10 +644,7 @@\\n \\n \\n \\n-\\tpublic void add(org.jfree.data.time.RegularTimePeriod period, double value) {\\n \\n-\\t\\tadd(period, value, true);\\n-\\t}\\n \\n \\n \\n@@ -661,11 +654,7 @@\\n \\n \\n \\n-\\tpublic void add(org.jfree.data.time.RegularTimePeriod period, double value, boolean notify) {\\n \\n-\\t\\torg.jfree.data.time.TimeSeriesDataItem item = new org.jfree.data.time.TimeSeriesDataItem(period, value);\\n-\\t\\tadd(item, notify);\\n-\\t}\\n \\n \\n \\n@@ -675,10 +664,7 @@\\n \\n \\n \\n-\\tpublic void add(org.jfree.data.time.RegularTimePeriod period, java.lang.Number value) {\\n \\n-\\t\\tadd(period, value, true);\\n-\\t}\\n \\n \\n \\n@@ -688,11 +674,7 @@\\n \\n \\n \\n-\\tpublic void add(org.jfree.data.time.RegularTimePeriod period, java.lang.Number value, boolean notify) {\\n \\n-\\t\\torg.jfree.data.time.TimeSeriesDataItem item = new org.jfree.data.time.TimeSeriesDataItem(period, value);\\n-\\t\\tadd(item, notify);\\n-\\t}\\n \\n \\n \\n@@ -701,15 +683,6 @@\\n \\n \\n \\n-\\tpublic void update(org.jfree.data.time.RegularTimePeriod period, java.lang.Number value) {\\n-\\t\\torg.jfree.data.time.TimeSeriesDataItem temp = new org.jfree.data.time.TimeSeriesDataItem(period, value);\\n-\\t\\tint index = java.util.Collections.binarySearch(this.data, temp);\\n-\\t\\tif (index < 0) {\\n-\\t\\t\\tthrow new org.jfree.data.general.SeriesException((\\\"There is no existing value for the \\\" + \\n-\\t\\t\\t\\\"specified 'period'.\\\"));\\n-\\t\\t}\\n-\\t\\tupdate(index, value);\\n-\\t}\\n \\n \\n \\n@@ -717,27 +690,6 @@\\n \\n \\n \\n-\\tpublic void update(int index, java.lang.Number value) {\\n-\\t\\torg.jfree.data.time.TimeSeriesDataItem item = ((org.jfree.data.time.TimeSeriesDataItem) (this.data.get(index)));\\n-\\t\\tboolean iterate = false;\\n-\\t\\tjava.lang.Number oldYN = item.getValue();\\n-\\t\\tif (oldYN != null) {\\n-\\t\\t\\tdouble oldY = oldYN.doubleValue();\\n-\\t\\t\\tif (!(java.lang.Double.isNaN(oldY))) {\\n-\\t\\t\\t\\titerate = (oldY <= (this.minY)) || (oldY >= (this.maxY));\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\titem.setValue(value);\\n-\\t\\tif (iterate) {\\n-\\t\\t\\tfindBoundsByIteration();\\n-\\t\\t}else\\n-\\t\\t\\tif (value != null) {\\n-\\t\\t\\t\\tdouble yy = value.doubleValue();\\n-\\t\\t\\t\\tthis.minY = minIgnoreNaN(this.minY, yy);\\n-\\t\\t\\t\\tthis.maxY = maxIgnoreNaN(this.maxY, yy);\\n-\\t\\t\\t}\\n-\\t\\tfireSeriesChanged();\\n-\\t}\\n \\n \\n \\n@@ -747,19 +699,6 @@\\n \\n \\n \\n-\\tpublic org.jfree.data.time.TimeSeries addAndOrUpdate(org.jfree.data.time.TimeSeries series) {\\n-\\t\\torg.jfree.data.time.TimeSeries overwritten = new org.jfree.data.time.TimeSeries((\\\"Overwritten values from: \\\" + \\n-\\t\\t(getKey())));\\n-\\t\\tfor (int i = 0; i < (series.getItemCount()); i++) {\\n-\\t\\t\\torg.jfree.data.time.TimeSeriesDataItem item = series.getRawDataItem(i);\\n-\\t\\t\\torg.jfree.data.time.TimeSeriesDataItem oldItem = addOrUpdate(item.getPeriod(), \\n-\\t\\t\\titem.getValue());\\n-\\t\\t\\tif (oldItem != null) {\\n-\\t\\t\\t\\toverwritten.add(oldItem);\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn overwritten;\\n-\\t}\\n \\n \\n \\n@@ -772,10 +711,6 @@\\n \\n \\n \\n-\\tpublic org.jfree.data.time.TimeSeriesDataItem addOrUpdate(org.jfree.data.time.RegularTimePeriod period, \\n-\\tdouble value) {\\n-\\t\\treturn addOrUpdate(period, new java.lang.Double(value));\\n-\\t}\\n \\n \\n \\n@@ -788,10 +723,6 @@\\n \\n \\n \\n-\\tpublic org.jfree.data.time.TimeSeriesDataItem addOrUpdate(org.jfree.data.time.RegularTimePeriod period, \\n-\\tjava.lang.Number value) {\\n-\\t\\treturn addOrUpdate(new org.jfree.data.time.TimeSeriesDataItem(period, value));\\n-\\t}\\n \\n \\n \\n@@ -804,64 +735,14 @@\\n \\n \\n \\n-\\tpublic org.jfree.data.time.TimeSeriesDataItem addOrUpdate(org.jfree.data.time.TimeSeriesDataItem item) {\\n \\n-\\t\\tif (item == null) {\\n-\\t\\t\\tthrow new java.lang.IllegalArgumentException(\\\"Null 'period' argument.\\\");\\n-\\t\\t}\\n-\\t\\tjava.lang.Class periodClass = item.getPeriod().getClass();\\n-\\t\\tif ((this.timePeriodClass) == null) {\\n-\\t\\t\\tthis.timePeriodClass = periodClass;\\n-\\t\\t}else\\n-\\t\\t\\tif (!(this.timePeriodClass.equals(periodClass))) {\\n-\\t\\t\\t\\tjava.lang.String msg = ((((\\\"You are trying to add data where the time \\\" + \\n-\\t\\t\\t\\t\\\"period class is \\\") + (periodClass.getName())) + \\n-\\t\\t\\t\\t\\\", but the TimeSeries is expecting an instance of \\\") + \\n-\\t\\t\\t\\t(this.timePeriodClass.getName())) + \\\".\\\";\\n-\\t\\t\\t\\tthrow new org.jfree.data.general.SeriesException(msg);\\n-\\t\\t\\t}\\n-\\t\\torg.jfree.data.time.TimeSeriesDataItem overwritten = null;\\n-\\t\\tint index = java.util.Collections.binarySearch(this.data, item);\\n-\\t\\tif (index >= 0) {\\n-\\t\\t\\torg.jfree.data.time.TimeSeriesDataItem existing = \\n-\\t\\t\\t((org.jfree.data.time.TimeSeriesDataItem) (this.data.get(index)));\\n-\\t\\t\\toverwritten = ((org.jfree.data.time.TimeSeriesDataItem) (existing.clone()));\\n \\n \\n-\\t\\t\\tboolean iterate = false;\\n-\\t\\t\\tjava.lang.Number oldYN = existing.getValue();\\n-\\t\\t\\tdouble oldY = (oldYN != null) ? oldYN.doubleValue() : java.lang.Double.NaN;\\n-\\t\\t\\tif (!(java.lang.Double.isNaN(oldY))) {\\n-\\t\\t\\t\\titerate = (oldY <= (this.minY)) || (oldY >= (this.maxY));\\n-\\t\\t\\t}\\n-\\t\\t\\texisting.setValue(item.getValue());\\n-\\t\\t\\tif (iterate) {\\n-\\t\\t\\t\\tfindBoundsByIteration();\\n-\\t\\t\\t}else\\n-\\t\\t\\t\\tif ((item.getValue()) != null) {\\n-\\t\\t\\t\\t\\tdouble yy = item.getValue().doubleValue();\\n-\\t\\t\\t\\t\\tthis.minY = minIgnoreNaN(this.minY, yy);\\n-\\t\\t\\t\\t\\tthis.maxY = minIgnoreNaN(this.maxY, yy);\\n-\\t\\t\\t\\t}\\n-\\t\\t}else \\n-\\t\\t{\\n-\\t\\t\\titem = ((org.jfree.data.time.TimeSeriesDataItem) (item.clone()));\\n-\\t\\t\\tthis.data.add(((-index) - 1), item);\\n-\\t\\t\\tupdateBoundsForAddedItem(item);\\n \\n \\n-\\t\\t\\tif ((getItemCount()) > (this.maximumItemCount)) {\\n-\\t\\t\\t\\torg.jfree.data.time.TimeSeriesDataItem d = ((org.jfree.data.time.TimeSeriesDataItem) (this.data.remove(0)));\\n-\\t\\t\\t\\tupdateBoundsForRemovedItem(d);\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tremoveAgedItems(false);\\n \\n \\n-\\t\\tfireSeriesChanged();\\n-\\t\\treturn overwritten;\\n \\n-\\t}\\n \\n \\n \\n@@ -871,25 +752,8 @@\\n \\n \\n \\n-\\tpublic void removeAgedItems(boolean notify) {\\n \\n \\n-\\t\\tif ((getItemCount()) > 1) {\\n-\\t\\t\\tlong latest = getTimePeriod(((getItemCount()) - 1)).getSerialIndex();\\n-\\t\\t\\tboolean removed = false;\\n-\\t\\t\\twhile ((latest - (getTimePeriod(0).getSerialIndex())) > \\n-\\t\\t\\t(this.maximumItemAge)) {\\n-\\t\\t\\t\\tthis.data.remove(0);\\n-\\t\\t\\t\\tremoved = true;\\n-\\t\\t\\t} \\n-\\t\\t\\tif (removed) {\\n-\\t\\t\\t\\tfindBoundsByIteration();\\n-\\t\\t\\t\\tif (notify) {\\n-\\t\\t\\t\\t\\tfireSeriesChanged();\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t}\\n \\n \\n \\n@@ -901,60 +765,15 @@\\n \\n \\n \\n-\\tpublic void removeAgedItems(long latest, boolean notify) {\\n-\\t\\tif (this.data.isEmpty()) {\\n-\\t\\t\\treturn;\\n-\\t\\t}\\n \\n-\\t\\tlong index = java.lang.Long.MAX_VALUE;\\n-\\t\\ttry {\\n-\\t\\t\\tjava.lang.reflect.Method m = org.jfree.data.time.RegularTimePeriod.class.getDeclaredMethod(\\n-\\t\\t\\t\\\"createInstance\\\", new java.lang.Class[]{ java.lang.Class.class, java.util.Date.class, \\n-\\t\\t\\tjava.util.TimeZone.class });\\n-\\t\\t\\torg.jfree.data.time.RegularTimePeriod newest = ((org.jfree.data.time.RegularTimePeriod) (m.invoke(\\n-\\t\\t\\tthis.timePeriodClass, new java.lang.Object[]{ this.timePeriodClass, \\n-\\t\\t\\tnew java.util.Date(latest), java.util.TimeZone.getDefault() })));\\n-\\t\\t\\tindex = newest.getSerialIndex();\\n-\\t\\t}\\n-\\t\\t catch (java.lang.NoSuchMethodException e) {\\n-\\t\\t\\te.printStackTrace();\\n-\\t\\t}\\n-\\t\\t catch (java.lang.IllegalAccessException e) {\\n-\\t\\t\\te.printStackTrace();\\n-\\t\\t}\\n-\\t\\t catch (java.lang.reflect.InvocationTargetException e) {\\n-\\t\\t\\te.printStackTrace();\\n-\\t\\t}\\n \\n \\n \\n-\\t\\tboolean removed = false;\\n-\\t\\twhile (((getItemCount()) > 0) && ((index - \\n-\\t\\t(getTimePeriod(0).getSerialIndex())) > (this.maximumItemAge))) {\\n-\\t\\t\\tthis.data.remove(0);\\n-\\t\\t\\tremoved = true;\\n-\\t\\t} \\n-\\t\\tif (removed) {\\n-\\t\\t\\tfindBoundsByIteration();\\n-\\t\\t\\tif (notify) {\\n-\\t\\t\\t\\tfireSeriesChanged();\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t}\\n \\n \\n \\n \\n \\n-\\tpublic void clear() {\\n-\\t\\tif ((this.data.size()) > 0) {\\n-\\t\\t\\tthis.data.clear();\\n-\\t\\t\\tthis.timePeriodClass = null;\\n-\\t\\t\\tthis.minY = java.lang.Double.NaN;\\n-\\t\\t\\tthis.maxY = java.lang.Double.NaN;\\n-\\t\\t\\tfireSeriesChanged();\\n-\\t\\t}\\n-\\t}\\n \\n \\n \\n@@ -964,12 +783,193 @@\\n \\n \\n \\n-\\tpublic void delete(org.jfree.data.time.RegularTimePeriod period) {\\n-\\t\\tint index = getIndex(period);\\n-\\t\\tif (index >= 0) {\\n-\\t\\t\\torg.jfree.data.time.TimeSeriesDataItem item = ((org.jfree.data.time.TimeSeriesDataItem) (this.data.remove(\\n-\\t\\t\\tindex)));\\n-\\t\\t\\tupdateBoundsForRemovedItem(item);\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\tupdateBoundsForRemovedItem(item);}}} \\tpublic void add(org.jfree.data.time.RegularTimePeriod period, double value) { \\t\\tadd(period, value, true);} \\tpublic void add(org.jfree.data.time.RegularTimePeriod period, double value, boolean notify) { \\t\\torg.jfree.data.time.TimeSeriesDataItem item = new org.jfree.data.time.TimeSeriesDataItem(period, value); \\t\\tadd(item, notify);} \\tpublic void add(org.jfree.data.time.RegularTimePeriod period, java.lang.Number value) { \\t\\tadd(period, value, true);} \\tpublic void add(org.jfree.data.time.RegularTimePeriod period, java.lang.Number value, boolean notify) { \\t\\torg.jfree.data.time.TimeSeriesDataItem item = new org.jfree.data.time.TimeSeriesDataItem(period, value); \\t\\tadd(item, notify);} \\tpublic void update(org.jfree.data.time.RegularTimePeriod period, java.lang.Number value) { \\t\\torg.jfree.data.time.TimeSeriesDataItem temp = new org.jfree.data.time.TimeSeriesDataItem(period, value); \\t\\tint index = java.util.Collections.binarySearch(this.data, temp); \\t\\tif (index < 0) { \\t\\t\\tthrow new org.jfree.data.general.SeriesException((\\\"There is no existing value for the \\\" + \\\"specified 'period'.\\\"));} \\t\\tupdate(index, value);} \\tpublic void update(int index, java.lang.Number value) { \\t\\torg.jfree.data.time.TimeSeriesDataItem item = ((org.jfree.data.time.TimeSeriesDataItem) (this.data.get(index))); \\t\\tboolean iterate = false; \\t\\tjava.lang.Number oldYN = item.getValue(); \\t\\tif (oldYN != null) { \\t\\t\\tdouble oldY = oldYN.doubleValue(); \\t\\t\\tif (!(java.lang.Double.isNaN(oldY))) { \\t\\t\\t\\titerate = (oldY <= (this.minY)) || (oldY >= (this.maxY));}} \\t\\titem.setValue(value); \\t\\tif (iterate) { \\t\\t\\tfindBoundsByIteration();}else \\t\\t\\tif (value != null) { \\t\\t\\t\\tdouble yy = value.doubleValue(); \\t\\t\\t\\tthis.minY = minIgnoreNaN(this.minY, yy); \\t\\t\\t\\tthis.maxY = maxIgnoreNaN(this.maxY, yy);} \\t\\tfireSeriesChanged();} \\tpublic org.jfree.data.time.TimeSeries addAndOrUpdate(org.jfree.data.time.TimeSeries series) { \\t\\torg.jfree.data.time.TimeSeries overwritten = new org.jfree.data.time.TimeSeries((\\\"Overwritten values from: \\\" + (getKey()))); \\t\\tfor (int i = 0; i < (series.getItemCount()); i++) { \\t\\t\\torg.jfree.data.time.TimeSeriesDataItem item = series.getRawDataItem(i); \\t\\t\\torg.jfree.data.time.TimeSeriesDataItem oldItem = addOrUpdate(item.getPeriod(), item.getValue()); \\t\\t\\tif (oldItem != null) { \\t\\t\\t\\toverwritten.add(oldItem);}} \\t\\treturn overwritten;} \\tpublic org.jfree.data.time.TimeSeriesDataItem addOrUpdate(org.jfree.data.time.RegularTimePeriod period, double value) { \\t\\treturn addOrUpdate(period, new java.lang.Double(value));} \\tpublic org.jfree.data.time.TimeSeriesDataItem addOrUpdate(org.jfree.data.time.RegularTimePeriod period, java.lang.Number value) { \\t\\treturn addOrUpdate(new org.jfree.data.time.TimeSeriesDataItem(period, value));} \\tpublic org.jfree.data.time.TimeSeriesDataItem addOrUpdate(org.jfree.data.time.TimeSeriesDataItem item) { \\t\\tif (item == null) { \\t\\t\\tthrow new java.lang.IllegalArgumentException(\\\"Null 'period' argument.\\\");} \\t\\tjava.lang.Class periodClass = item.getPeriod().getClass(); \\t\\tif ((this.timePeriodClass) == null) { \\t\\t\\tthis.timePeriodClass = periodClass;}else \\t\\t\\tif (!(this.timePeriodClass.equals(periodClass))) { \\t\\t\\t\\tjava.lang.String msg = ((((\\\"You are trying to add data where the time \\\" + \\\"period class is \\\") + (periodClass.getName())) + \\\", but the TimeSeries is expecting an instance of \\\") + (this.timePeriodClass.getName())) + \\\".\\\"; \\t\\t\\t\\tthrow new org.jfree.data.general.SeriesException(msg);} \\t\\torg.jfree.data.time.TimeSeriesDataItem overwritten = null; \\t\\tint index = java.util.Collections.binarySearch(this.data, item); \\t\\tif (index >= 0) { \\t\\t\\torg.jfree.data.time.TimeSeriesDataItem existing = ((org.jfree.data.time.TimeSeriesDataItem) (this.data.get(index))); \\t\\t\\toverwritten = ((org.jfree.data.time.TimeSeriesDataItem) (existing.clone())); \\t\\t\\tboolean iterate = false; \\t\\t\\tjava.lang.Number oldYN = existing.getValue(); \\t\\t\\tdouble oldY = (oldYN != null) ? oldYN.doubleValue() : java.lang.Double.NaN; \\t\\t\\tif (!(java.lang.Double.isNaN(oldY))) { \\t\\t\\t\\titerate = (oldY <= (this.minY)) || (oldY >= (this.maxY));} \\t\\t\\texisting.setValue(item.getValue()); \\t\\t\\tif (iterate) { \\t\\t\\t\\tfindBoundsByIteration();}else \\t\\t\\t\\tif ((item.getValue()) != null) { \\t\\t\\t\\t\\tdouble yy = item.getValue().doubleValue(); \\t\\t\\t\\t\\tthis.minY = minIgnoreNaN(this.minY, yy); \\t\\t\\t\\t\\tthis.maxY = minIgnoreNaN(this.maxY, yy);}}else { \\t\\t\\titem = ((org.jfree.data.time.TimeSeriesDataItem) (item.clone())); \\t\\t\\tthis.data.add(((-index) - 1), item); \\t\\t\\tupdateBoundsForAddedItem(item); \\t\\t\\tif ((getItemCount()) > (this.maximumItemCount)) { \\t\\t\\t\\torg.jfree.data.time.TimeSeriesDataItem d = ((org.jfree.data.time.TimeSeriesDataItem) (this.data.remove(0))); \\t\\t\\t\\tupdateBoundsForRemovedItem(d);}} \\t\\tremoveAgedItems(false); \\t\\tfireSeriesChanged(); \\t\\treturn overwritten;} \\tpublic void removeAgedItems(boolean notify) { \\t\\tif ((getItemCount()) > 1) { \\t\\t\\tlong latest = getTimePeriod(((getItemCount()) - 1)).getSerialIndex(); \\t\\t\\tboolean removed = false; \\t\\t\\twhile ((latest - (getTimePeriod(0).getSerialIndex())) > (this.maximumItemAge)) { \\t\\t\\t\\tthis.data.remove(0); \\t\\t\\t\\tremoved = true;} \\t\\t\\tif (removed) { \\t\\t\\t\\tfindBoundsByIteration(); \\t\\t\\t\\tif (notify) { \\t\\t\\t\\t\\tfireSeriesChanged();}}}} \\tpublic void removeAgedItems(long latest, boolean notify) { \\t\\tif (this.data.isEmpty()) { \\t\\t\\treturn;} \\t\\tlong index = java.lang.Long.MAX_VALUE; \\t\\ttry { \\t\\t\\tjava.lang.reflect.Method m = org.jfree.data.time.RegularTimePeriod.class.getDeclaredMethod(\\\"createInstance\\\", new java.lang.Class[]{ java.lang.Class.class, java.util.Date.class, java.util.TimeZone.class }); \\t\\t\\torg.jfree.data.time.RegularTimePeriod newest = ((org.jfree.data.time.RegularTimePeriod) (m.invoke(this.timePeriodClass, new java.lang.Object[]{ this.timePeriodClass, new java.util.Date(latest), java.util.TimeZone.getDefault() }))); \\t\\t\\tindex = newest.getSerialIndex();} catch (java.lang.NoSuchMethodException e) { \\t\\t\\te.printStackTrace();} catch (java.lang.IllegalAccessException e) { \\t\\t\\te.printStackTrace();} catch (java.lang.reflect.InvocationTargetException e) { \\t\\t\\te.printStackTrace();} \\t\\tboolean removed = false; \\t\\twhile (((getItemCount()) > 0) && ((index - (getTimePeriod(0).getSerialIndex())) > (this.maximumItemAge))) { \\t\\t\\tthis.data.remove(0); \\t\\t\\tremoved = true;} \\t\\tif (removed) { \\t\\t\\tfindBoundsByIteration(); \\t\\t\\tif (notify) { \\t\\t\\t\\tfireSeriesChanged();}}} \\tpublic void clear() { \\t\\tif ((this.data.size()) > 0) { \\t\\t\\tthis.data.clear(); \\t\\t\\tthis.timePeriodClass = null; \\t\\t\\tthis.minY = java.lang.Double.NaN; \\t\\t\\tthis.maxY = java.lang.Double.NaN; \\t\\t\\tfireSeriesChanged();}} \\tpublic void delete(org.jfree.data.time.RegularTimePeriod period) { \\t\\tint index = getIndex(period); \\t\\tif (index >= 0) { \\t\\t\\torg.jfree.data.time.TimeSeriesDataItem item = ((org.jfree.data.time.TimeSeriesDataItem) (this.data.remove(index))); \\t\\t\\tupdateBoundsForRemovedItem(item);\\n \\t\\t\\tif (this.data.isEmpty()) {\\n \\t\\t\\t\\tthis.timePeriodClass = null;\\n \\t\\t\\t}\\n\\n"}]}
[INFO ] fr.inria.main.evolution.AstorMain.run(AstorMain.java:200) - Time Total(s): 143.972
273.91user 9.90system 2:25.09elapsed 195%CPU (0avgtext+0avgdata 1795512maxresident)k
146272inputs+61912outputs (87major+1557787minor)pagefaults 0swaps


Node: petitprince-1.luxembourg.grid5000.fr



Date: Fri Nov 30 16:17:26 EST 2018

