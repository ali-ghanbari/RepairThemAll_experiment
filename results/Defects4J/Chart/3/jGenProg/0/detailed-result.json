{"general":{"NR_RIGHT_COMPILATIONS":152,"NR_ERRONEOUS_VARIANCES":null,"EXECUTION_IDENTIFIER":"Chart-3","OUTPUT_STATUS":"STOP_BY_PATCH_FOUND","NR_FAILLING_COMPILATIONS":91,"NR_GENERATIONS":243,"TOTAL_TIME":87.044,"NR_FAILING_VALIDATION_PROCESS":null},"patches":[{"VARIANT_ID":"486","VALIDATION":"|true|0|4390|[]|","patchhunks":[{"LOCATION":"org.jfree.data.time.TimeSeries","PATH":"\\\/tmp\\\/jGenProg_Defects4J_Chart_3\\\/output_astor\\\/AstorMain-Chart-3\\\/src\\\/default\\\/org\\\/jfree\\\/data\\\/time\\\/TimeSeries.java","INGREDIENT_SCOPE":"LOCAL","SUSPICIOUNESS":"0.123","INGREDIENT_PARENT":"updateBoundsForRemovedItem(item)","PATCH_HUNK_TYPE":"CtInvocationImpl|CtBlockImpl","ORIGINAL_CODE":"fireSeriesChanged()","BUGGY_CODE_TYPE":"CtInvocationImpl|CtBlockImpl","OPERATOR":"ReplaceOp","MODIFIED_FILE_PATH":"\\\/tmp\\\/jGenProg_Defects4J_Chart_3\\\/.\\\/output_astor\\\/AstorMain-Chart-3\\\/\\\/src\\\/\\\/variant-486_f\\\/org\\\/jfree\\\/data\\\/time\\\/TimeSeries.java","LINE":"638","MP_RANKING":"59","PATCH_HUNK_CODE":"updateBoundsForRemovedItem(item)"}],"TIME":"87","GENERATION":"243","FOLDER_SOLUTION_CODE":"\\\/tmp\\\/jGenProg_Defects4J_Chart_3\\\/.\\\/output_astor\\\/AstorMain-Chart-3\\\/\\\/bin\\\/\\\/variant-486","PATCH_DIFF_ORIG":"\\\/var\\\/lib\\\/oar\\\/.batch_job_bashrc: line 5: \\\/home\\\/tdurieux\\\/.bashrc: No such file or directory\\n--- org\\\/jfree\\\/data\\\/time\\\/TimeSeries.java\\n+++ org\\\/jfree\\\/data\\\/time\\\/TimeSeries.java\\n@@ -635,11 +635,7 @@\\n \\n \\n \\t\\t\\tif (notify) {\\n-\\t\\t\\t\\tfireSeriesChanged();\\n-\\t\\t\\t}\\n-\\t\\t}\\n \\n-\\t}\\n \\n \\n \\n@@ -648,10 +644,7 @@\\n \\n \\n \\n-\\tpublic void add(org.jfree.data.time.RegularTimePeriod period, double value) {\\n \\n-\\t\\tadd(period, value, true);\\n-\\t}\\n \\n \\n \\n@@ -661,11 +654,7 @@\\n \\n \\n \\n-\\tpublic void add(org.jfree.data.time.RegularTimePeriod period, double value, boolean notify) {\\n \\n-\\t\\torg.jfree.data.time.TimeSeriesDataItem item = new org.jfree.data.time.TimeSeriesDataItem(period, value);\\n-\\t\\tadd(item, notify);\\n-\\t}\\n \\n \\n \\n@@ -675,10 +664,7 @@\\n \\n \\n \\n-\\tpublic void add(org.jfree.data.time.RegularTimePeriod period, java.lang.Number value) {\\n \\n-\\t\\tadd(period, value, true);\\n-\\t}\\n \\n \\n \\n@@ -688,11 +674,7 @@\\n \\n \\n \\n-\\tpublic void add(org.jfree.data.time.RegularTimePeriod period, java.lang.Number value, boolean notify) {\\n \\n-\\t\\torg.jfree.data.time.TimeSeriesDataItem item = new org.jfree.data.time.TimeSeriesDataItem(period, value);\\n-\\t\\tadd(item, notify);\\n-\\t}\\n \\n \\n \\n@@ -701,15 +683,6 @@\\n \\n \\n \\n-\\tpublic void update(org.jfree.data.time.RegularTimePeriod period, java.lang.Number value) {\\n-\\t\\torg.jfree.data.time.TimeSeriesDataItem temp = new org.jfree.data.time.TimeSeriesDataItem(period, value);\\n-\\t\\tint index = java.util.Collections.binarySearch(this.data, temp);\\n-\\t\\tif (index < 0) {\\n-\\t\\t\\tthrow new org.jfree.data.general.SeriesException((\\\"There is no existing value for the \\\" + \\n-\\t\\t\\t\\\"specified 'period'.\\\"));\\n-\\t\\t}\\n-\\t\\tupdate(index, value);\\n-\\t}\\n \\n \\n \\n@@ -717,27 +690,6 @@\\n \\n \\n \\n-\\tpublic void update(int index, java.lang.Number value) {\\n-\\t\\torg.jfree.data.time.TimeSeriesDataItem item = ((org.jfree.data.time.TimeSeriesDataItem) (this.data.get(index)));\\n-\\t\\tboolean iterate = false;\\n-\\t\\tjava.lang.Number oldYN = item.getValue();\\n-\\t\\tif (oldYN != null) {\\n-\\t\\t\\tdouble oldY = oldYN.doubleValue();\\n-\\t\\t\\tif (!(java.lang.Double.isNaN(oldY))) {\\n-\\t\\t\\t\\titerate = (oldY <= (this.minY)) || (oldY >= (this.maxY));\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\titem.setValue(value);\\n-\\t\\tif (iterate) {\\n-\\t\\t\\tfindBoundsByIteration();\\n-\\t\\t}else\\n-\\t\\t\\tif (value != null) {\\n-\\t\\t\\t\\tdouble yy = value.doubleValue();\\n-\\t\\t\\t\\tthis.minY = minIgnoreNaN(this.minY, yy);\\n-\\t\\t\\t\\tthis.maxY = maxIgnoreNaN(this.maxY, yy);\\n-\\t\\t\\t}\\n-\\t\\tfireSeriesChanged();\\n-\\t}\\n \\n \\n \\n@@ -747,19 +699,6 @@\\n \\n \\n \\n-\\tpublic org.jfree.data.time.TimeSeries addAndOrUpdate(org.jfree.data.time.TimeSeries series) {\\n-\\t\\torg.jfree.data.time.TimeSeries overwritten = new org.jfree.data.time.TimeSeries((\\\"Overwritten values from: \\\" + \\n-\\t\\t(getKey())));\\n-\\t\\tfor (int i = 0; i < (series.getItemCount()); i++) {\\n-\\t\\t\\torg.jfree.data.time.TimeSeriesDataItem item = series.getRawDataItem(i);\\n-\\t\\t\\torg.jfree.data.time.TimeSeriesDataItem oldItem = addOrUpdate(item.getPeriod(), \\n-\\t\\t\\titem.getValue());\\n-\\t\\t\\tif (oldItem != null) {\\n-\\t\\t\\t\\toverwritten.add(oldItem);\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn overwritten;\\n-\\t}\\n \\n \\n \\n@@ -772,10 +711,6 @@\\n \\n \\n \\n-\\tpublic org.jfree.data.time.TimeSeriesDataItem addOrUpdate(org.jfree.data.time.RegularTimePeriod period, \\n-\\tdouble value) {\\n-\\t\\treturn addOrUpdate(period, new java.lang.Double(value));\\n-\\t}\\n \\n \\n \\n@@ -788,10 +723,6 @@\\n \\n \\n \\n-\\tpublic org.jfree.data.time.TimeSeriesDataItem addOrUpdate(org.jfree.data.time.RegularTimePeriod period, \\n-\\tjava.lang.Number value) {\\n-\\t\\treturn addOrUpdate(new org.jfree.data.time.TimeSeriesDataItem(period, value));\\n-\\t}\\n \\n \\n \\n@@ -804,64 +735,14 @@\\n \\n \\n \\n-\\tpublic org.jfree.data.time.TimeSeriesDataItem addOrUpdate(org.jfree.data.time.TimeSeriesDataItem item) {\\n \\n-\\t\\tif (item == null) {\\n-\\t\\t\\tthrow new java.lang.IllegalArgumentException(\\\"Null 'period' argument.\\\");\\n-\\t\\t}\\n-\\t\\tjava.lang.Class periodClass = item.getPeriod().getClass();\\n-\\t\\tif ((this.timePeriodClass) == null) {\\n-\\t\\t\\tthis.timePeriodClass = periodClass;\\n-\\t\\t}else\\n-\\t\\t\\tif (!(this.timePeriodClass.equals(periodClass))) {\\n-\\t\\t\\t\\tjava.lang.String msg = ((((\\\"You are trying to add data where the time \\\" + \\n-\\t\\t\\t\\t\\\"period class is \\\") + (periodClass.getName())) + \\n-\\t\\t\\t\\t\\\", but the TimeSeries is expecting an instance of \\\") + \\n-\\t\\t\\t\\t(this.timePeriodClass.getName())) + \\\".\\\";\\n-\\t\\t\\t\\tthrow new org.jfree.data.general.SeriesException(msg);\\n-\\t\\t\\t}\\n-\\t\\torg.jfree.data.time.TimeSeriesDataItem overwritten = null;\\n-\\t\\tint index = java.util.Collections.binarySearch(this.data, item);\\n-\\t\\tif (index >= 0) {\\n-\\t\\t\\torg.jfree.data.time.TimeSeriesDataItem existing = \\n-\\t\\t\\t((org.jfree.data.time.TimeSeriesDataItem) (this.data.get(index)));\\n-\\t\\t\\toverwritten = ((org.jfree.data.time.TimeSeriesDataItem) (existing.clone()));\\n \\n \\n-\\t\\t\\tboolean iterate = false;\\n-\\t\\t\\tjava.lang.Number oldYN = existing.getValue();\\n-\\t\\t\\tdouble oldY = (oldYN != null) ? oldYN.doubleValue() : java.lang.Double.NaN;\\n-\\t\\t\\tif (!(java.lang.Double.isNaN(oldY))) {\\n-\\t\\t\\t\\titerate = (oldY <= (this.minY)) || (oldY >= (this.maxY));\\n-\\t\\t\\t}\\n-\\t\\t\\texisting.setValue(item.getValue());\\n-\\t\\t\\tif (iterate) {\\n-\\t\\t\\t\\tfindBoundsByIteration();\\n-\\t\\t\\t}else\\n-\\t\\t\\t\\tif ((item.getValue()) != null) {\\n-\\t\\t\\t\\t\\tdouble yy = item.getValue().doubleValue();\\n-\\t\\t\\t\\t\\tthis.minY = minIgnoreNaN(this.minY, yy);\\n-\\t\\t\\t\\t\\tthis.maxY = minIgnoreNaN(this.maxY, yy);\\n-\\t\\t\\t\\t}\\n-\\t\\t}else \\n-\\t\\t{\\n-\\t\\t\\titem = ((org.jfree.data.time.TimeSeriesDataItem) (item.clone()));\\n-\\t\\t\\tthis.data.add(((-index) - 1), item);\\n-\\t\\t\\tupdateBoundsForAddedItem(item);\\n \\n \\n-\\t\\t\\tif ((getItemCount()) > (this.maximumItemCount)) {\\n-\\t\\t\\t\\torg.jfree.data.time.TimeSeriesDataItem d = ((org.jfree.data.time.TimeSeriesDataItem) (this.data.remove(0)));\\n-\\t\\t\\t\\tupdateBoundsForRemovedItem(d);\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tremoveAgedItems(false);\\n \\n \\n-\\t\\tfireSeriesChanged();\\n-\\t\\treturn overwritten;\\n \\n-\\t}\\n \\n \\n \\n@@ -871,25 +752,8 @@\\n \\n \\n \\n-\\tpublic void removeAgedItems(boolean notify) {\\n \\n \\n-\\t\\tif ((getItemCount()) > 1) {\\n-\\t\\t\\tlong latest = getTimePeriod(((getItemCount()) - 1)).getSerialIndex();\\n-\\t\\t\\tboolean removed = false;\\n-\\t\\t\\twhile ((latest - (getTimePeriod(0).getSerialIndex())) > \\n-\\t\\t\\t(this.maximumItemAge)) {\\n-\\t\\t\\t\\tthis.data.remove(0);\\n-\\t\\t\\t\\tremoved = true;\\n-\\t\\t\\t} \\n-\\t\\t\\tif (removed) {\\n-\\t\\t\\t\\tfindBoundsByIteration();\\n-\\t\\t\\t\\tif (notify) {\\n-\\t\\t\\t\\t\\tfireSeriesChanged();\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t}\\n \\n \\n \\n@@ -901,60 +765,15 @@\\n \\n \\n \\n-\\tpublic void removeAgedItems(long latest, boolean notify) {\\n-\\t\\tif (this.data.isEmpty()) {\\n-\\t\\t\\treturn;\\n-\\t\\t}\\n \\n-\\t\\tlong index = java.lang.Long.MAX_VALUE;\\n-\\t\\ttry {\\n-\\t\\t\\tjava.lang.reflect.Method m = org.jfree.data.time.RegularTimePeriod.class.getDeclaredMethod(\\n-\\t\\t\\t\\\"createInstance\\\", new java.lang.Class[]{ java.lang.Class.class, java.util.Date.class, \\n-\\t\\t\\tjava.util.TimeZone.class });\\n-\\t\\t\\torg.jfree.data.time.RegularTimePeriod newest = ((org.jfree.data.time.RegularTimePeriod) (m.invoke(\\n-\\t\\t\\tthis.timePeriodClass, new java.lang.Object[]{ this.timePeriodClass, \\n-\\t\\t\\tnew java.util.Date(latest), java.util.TimeZone.getDefault() })));\\n-\\t\\t\\tindex = newest.getSerialIndex();\\n-\\t\\t}\\n-\\t\\t catch (java.lang.NoSuchMethodException e) {\\n-\\t\\t\\te.printStackTrace();\\n-\\t\\t}\\n-\\t\\t catch (java.lang.IllegalAccessException e) {\\n-\\t\\t\\te.printStackTrace();\\n-\\t\\t}\\n-\\t\\t catch (java.lang.reflect.InvocationTargetException e) {\\n-\\t\\t\\te.printStackTrace();\\n-\\t\\t}\\n \\n \\n \\n-\\t\\tboolean removed = false;\\n-\\t\\twhile (((getItemCount()) > 0) && ((index - \\n-\\t\\t(getTimePeriod(0).getSerialIndex())) > (this.maximumItemAge))) {\\n-\\t\\t\\tthis.data.remove(0);\\n-\\t\\t\\tremoved = true;\\n-\\t\\t} \\n-\\t\\tif (removed) {\\n-\\t\\t\\tfindBoundsByIteration();\\n-\\t\\t\\tif (notify) {\\n-\\t\\t\\t\\tfireSeriesChanged();\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t}\\n \\n \\n \\n \\n \\n-\\tpublic void clear() {\\n-\\t\\tif ((this.data.size()) > 0) {\\n-\\t\\t\\tthis.data.clear();\\n-\\t\\t\\tthis.timePeriodClass = null;\\n-\\t\\t\\tthis.minY = java.lang.Double.NaN;\\n-\\t\\t\\tthis.maxY = java.lang.Double.NaN;\\n-\\t\\t\\tfireSeriesChanged();\\n-\\t\\t}\\n-\\t}\\n \\n \\n \\n@@ -964,12 +783,193 @@\\n \\n \\n \\n-\\tpublic void delete(org.jfree.data.time.RegularTimePeriod period) {\\n-\\t\\tint index = getIndex(period);\\n-\\t\\tif (index >= 0) {\\n-\\t\\t\\torg.jfree.data.time.TimeSeriesDataItem item = ((org.jfree.data.time.TimeSeriesDataItem) (this.data.remove(\\n-\\t\\t\\tindex)));\\n-\\t\\t\\tupdateBoundsForRemovedItem(item);\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\tupdateBoundsForRemovedItem(item);}}} \\tpublic void add(org.jfree.data.time.RegularTimePeriod period, double value) { \\t\\tadd(period, value, true);} \\tpublic void add(org.jfree.data.time.RegularTimePeriod period, double value, boolean notify) { \\t\\torg.jfree.data.time.TimeSeriesDataItem item = new org.jfree.data.time.TimeSeriesDataItem(period, value); \\t\\tadd(item, notify);} \\tpublic void add(org.jfree.data.time.RegularTimePeriod period, java.lang.Number value) { \\t\\tadd(period, value, true);} \\tpublic void add(org.jfree.data.time.RegularTimePeriod period, java.lang.Number value, boolean notify) { \\t\\torg.jfree.data.time.TimeSeriesDataItem item = new org.jfree.data.time.TimeSeriesDataItem(period, value); \\t\\tadd(item, notify);} \\tpublic void update(org.jfree.data.time.RegularTimePeriod period, java.lang.Number value) { \\t\\torg.jfree.data.time.TimeSeriesDataItem temp = new org.jfree.data.time.TimeSeriesDataItem(period, value); \\t\\tint index = java.util.Collections.binarySearch(this.data, temp); \\t\\tif (index < 0) { \\t\\t\\tthrow new org.jfree.data.general.SeriesException((\\\"There is no existing value for the \\\" + \\\"specified 'period'.\\\"));} \\t\\tupdate(index, value);} \\tpublic void update(int index, java.lang.Number value) { \\t\\torg.jfree.data.time.TimeSeriesDataItem item = ((org.jfree.data.time.TimeSeriesDataItem) (this.data.get(index))); \\t\\tboolean iterate = false; \\t\\tjava.lang.Number oldYN = item.getValue(); \\t\\tif (oldYN != null) { \\t\\t\\tdouble oldY = oldYN.doubleValue(); \\t\\t\\tif (!(java.lang.Double.isNaN(oldY))) { \\t\\t\\t\\titerate = (oldY <= (this.minY)) || (oldY >= (this.maxY));}} \\t\\titem.setValue(value); \\t\\tif (iterate) { \\t\\t\\tfindBoundsByIteration();}else \\t\\t\\tif (value != null) { \\t\\t\\t\\tdouble yy = value.doubleValue(); \\t\\t\\t\\tthis.minY = minIgnoreNaN(this.minY, yy); \\t\\t\\t\\tthis.maxY = maxIgnoreNaN(this.maxY, yy);} \\t\\tfireSeriesChanged();} \\tpublic org.jfree.data.time.TimeSeries addAndOrUpdate(org.jfree.data.time.TimeSeries series) { \\t\\torg.jfree.data.time.TimeSeries overwritten = new org.jfree.data.time.TimeSeries((\\\"Overwritten values from: \\\" + (getKey()))); \\t\\tfor (int i = 0; i < (series.getItemCount()); i++) { \\t\\t\\torg.jfree.data.time.TimeSeriesDataItem item = series.getRawDataItem(i); \\t\\t\\torg.jfree.data.time.TimeSeriesDataItem oldItem = addOrUpdate(item.getPeriod(), item.getValue()); \\t\\t\\tif (oldItem != null) { \\t\\t\\t\\toverwritten.add(oldItem);}} \\t\\treturn overwritten;} \\tpublic org.jfree.data.time.TimeSeriesDataItem addOrUpdate(org.jfree.data.time.RegularTimePeriod period, double value) { \\t\\treturn addOrUpdate(period, new java.lang.Double(value));} \\tpublic org.jfree.data.time.TimeSeriesDataItem addOrUpdate(org.jfree.data.time.RegularTimePeriod period, java.lang.Number value) { \\t\\treturn addOrUpdate(new org.jfree.data.time.TimeSeriesDataItem(period, value));} \\tpublic org.jfree.data.time.TimeSeriesDataItem addOrUpdate(org.jfree.data.time.TimeSeriesDataItem item) { \\t\\tif (item == null) { \\t\\t\\tthrow new java.lang.IllegalArgumentException(\\\"Null 'period' argument.\\\");} \\t\\tjava.lang.Class periodClass = item.getPeriod().getClass(); \\t\\tif ((this.timePeriodClass) == null) { \\t\\t\\tthis.timePeriodClass = periodClass;}else \\t\\t\\tif (!(this.timePeriodClass.equals(periodClass))) { \\t\\t\\t\\tjava.lang.String msg = ((((\\\"You are trying to add data where the time \\\" + \\\"period class is \\\") + (periodClass.getName())) + \\\", but the TimeSeries is expecting an instance of \\\") + (this.timePeriodClass.getName())) + \\\".\\\"; \\t\\t\\t\\tthrow new org.jfree.data.general.SeriesException(msg);} \\t\\torg.jfree.data.time.TimeSeriesDataItem overwritten = null; \\t\\tint index = java.util.Collections.binarySearch(this.data, item); \\t\\tif (index >= 0) { \\t\\t\\torg.jfree.data.time.TimeSeriesDataItem existing = ((org.jfree.data.time.TimeSeriesDataItem) (this.data.get(index))); \\t\\t\\toverwritten = ((org.jfree.data.time.TimeSeriesDataItem) (existing.clone())); \\t\\t\\tboolean iterate = false; \\t\\t\\tjava.lang.Number oldYN = existing.getValue(); \\t\\t\\tdouble oldY = (oldYN != null) ? oldYN.doubleValue() : java.lang.Double.NaN; \\t\\t\\tif (!(java.lang.Double.isNaN(oldY))) { \\t\\t\\t\\titerate = (oldY <= (this.minY)) || (oldY >= (this.maxY));} \\t\\t\\texisting.setValue(item.getValue()); \\t\\t\\tif (iterate) { \\t\\t\\t\\tfindBoundsByIteration();}else \\t\\t\\t\\tif ((item.getValue()) != null) { \\t\\t\\t\\t\\tdouble yy = item.getValue().doubleValue(); \\t\\t\\t\\t\\tthis.minY = minIgnoreNaN(this.minY, yy); \\t\\t\\t\\t\\tthis.maxY = minIgnoreNaN(this.maxY, yy);}}else { \\t\\t\\titem = ((org.jfree.data.time.TimeSeriesDataItem) (item.clone())); \\t\\t\\tthis.data.add(((-index) - 1), item); \\t\\t\\tupdateBoundsForAddedItem(item); \\t\\t\\tif ((getItemCount()) > (this.maximumItemCount)) { \\t\\t\\t\\torg.jfree.data.time.TimeSeriesDataItem d = ((org.jfree.data.time.TimeSeriesDataItem) (this.data.remove(0))); \\t\\t\\t\\tupdateBoundsForRemovedItem(d);}} \\t\\tremoveAgedItems(false); \\t\\tfireSeriesChanged(); \\t\\treturn overwritten;} \\tpublic void removeAgedItems(boolean notify) { \\t\\tif ((getItemCount()) > 1) { \\t\\t\\tlong latest = getTimePeriod(((getItemCount()) - 1)).getSerialIndex(); \\t\\t\\tboolean removed = false; \\t\\t\\twhile ((latest - (getTimePeriod(0).getSerialIndex())) > (this.maximumItemAge)) { \\t\\t\\t\\tthis.data.remove(0); \\t\\t\\t\\tremoved = true;} \\t\\t\\tif (removed) { \\t\\t\\t\\tfindBoundsByIteration(); \\t\\t\\t\\tif (notify) { \\t\\t\\t\\t\\tfireSeriesChanged();}}}} \\tpublic void removeAgedItems(long latest, boolean notify) { \\t\\tif (this.data.isEmpty()) { \\t\\t\\treturn;} \\t\\tlong index = java.lang.Long.MAX_VALUE; \\t\\ttry { \\t\\t\\tjava.lang.reflect.Method m = org.jfree.data.time.RegularTimePeriod.class.getDeclaredMethod(\\\"createInstance\\\", new java.lang.Class[]{ java.lang.Class.class, java.util.Date.class, java.util.TimeZone.class }); \\t\\t\\torg.jfree.data.time.RegularTimePeriod newest = ((org.jfree.data.time.RegularTimePeriod) (m.invoke(this.timePeriodClass, new java.lang.Object[]{ this.timePeriodClass, new java.util.Date(latest), java.util.TimeZone.getDefault() }))); \\t\\t\\tindex = newest.getSerialIndex();} catch (java.lang.NoSuchMethodException e) { \\t\\t\\te.printStackTrace();} catch (java.lang.IllegalAccessException e) { \\t\\t\\te.printStackTrace();} catch (java.lang.reflect.InvocationTargetException e) { \\t\\t\\te.printStackTrace();} \\t\\tboolean removed = false; \\t\\twhile (((getItemCount()) > 0) && ((index - (getTimePeriod(0).getSerialIndex())) > (this.maximumItemAge))) { \\t\\t\\tthis.data.remove(0); \\t\\t\\tremoved = true;} \\t\\tif (removed) { \\t\\t\\tfindBoundsByIteration(); \\t\\t\\tif (notify) { \\t\\t\\t\\tfireSeriesChanged();}}} \\tpublic void clear() { \\t\\tif ((this.data.size()) > 0) { \\t\\t\\tthis.data.clear(); \\t\\t\\tthis.timePeriodClass = null; \\t\\t\\tthis.minY = java.lang.Double.NaN; \\t\\t\\tthis.maxY = java.lang.Double.NaN; \\t\\t\\tfireSeriesChanged();}} \\tpublic void delete(org.jfree.data.time.RegularTimePeriod period) { \\t\\tint index = getIndex(period); \\t\\tif (index >= 0) { \\t\\t\\torg.jfree.data.time.TimeSeriesDataItem item = ((org.jfree.data.time.TimeSeriesDataItem) (this.data.remove(index))); \\t\\t\\tupdateBoundsForRemovedItem(item);\\n \\t\\t\\tif (this.data.isEmpty()) {\\n \\t\\t\\t\\tthis.timePeriodClass = null;\\n \\t\\t\\t}\\n\\n"}]}