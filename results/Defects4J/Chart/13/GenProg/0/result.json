{
  "repair_end": "2018-12-02 08:39:28.249961", 
  "repair_begin": "2018-12-02 08:35:29.725524", 
  "patches": [
    {
      "diff": "--- /tmp/GenProg_Defects4J_Chart_13/source/org/jfree/chart/block/BorderArrangement.java\t2018-12-02 02:35:20.605941475 -0500\n+++ /tmp/GenProg_Defects4J_Chart_13/patches_7fn9/Patch_267/patched/tmp/GenProg_Defects4J_Chart_13/source/org/jfree/chart/block/BorderArrangement.java\t2018-12-02 02:38:43.610722509 -0500\n@@ -441,14 +441,6 @@\n             h[1] = size.height;\n         }\n         h[2] = constraint.getHeight() - h[1] - h[0];\n-        if (this.leftBlock != null) {\n-            RectangleConstraint c3 = new RectangleConstraint(0.0,\n-                    new Range(0.0, constraint.getWidth()),\n-                    LengthConstraintType.RANGE, h[2], null,\n-                    LengthConstraintType.FIXED);\n-            Size2D size = this.leftBlock.arrange(g2, c3);\n-            w[2] = size.width;\n-        }\n         h[3] = h[2];\n         if (this.rightBlock != null) {\n             RectangleConstraint c4 = new RectangleConstraint(0.0,\n\n\n", 
      "edits": [
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 444, 
          "faulty": "if (this.leftBlock != null) {\n  RectangleConstraint c3=new RectangleConstraint(0.0,new Range(0.0,constraint.getWidth()),LengthConstraintType.RANGE,h[2],null,LengthConstraintType.FIXED);\n  Size2D size=this.leftBlock.arrange(g2,c3);\n  w[2]=size.width;\n}", 
          "type": "Delete", 
          "seed": "Size2D size=this.topBlock.arrange(g2,RectangleConstraint.NONE);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Chart_13/source/org/jfree/chart/block/BorderArrangement.java\t2018-12-02 02:35:20.605941475 -0500\n+++ /tmp/GenProg_Defects4J_Chart_13/patches_7fn9/Patch_61/patched/tmp/GenProg_Defects4J_Chart_13/source/org/jfree/chart/block/BorderArrangement.java\t2018-12-02 02:37:43.554491532 -0500\n@@ -303,8 +303,15 @@\n                     new Range(Math.min(w[2], maxW), maxW),\n                     LengthConstraintType.RANGE, 0.0, null,\n                     LengthConstraintType.NONE);\n-            Size2D size = this.rightBlock.arrange(g2, c3);\n-            w[3] = size.width;\n+            if (this.centerBlock != null) {\n+\t\t\t\tthis.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0],\n+\t\t\t\t\t\tw[4], h[4]));\n+\t\t\t}\n+\t\t\tSize2D size = this.rightBlock.arrange(g2, c3);\n+            if (this.centerBlock != null) {\n+\t\t\t\tthis.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0],\n+\t\t\t\t\t\tw[4], h[4]));\n+\t\t\t}\n             h[3] = size.height;\n         }\n \n@@ -317,7 +324,8 @@\n                     LengthConstraintType.NONE);\n             Size2D size = this.centerBlock.arrange(g2, c4);\n             w[4] = size.width;\n-            h[4] = size.height;\n+            w[2] = size.width;\n+\t\t\th[4] = size.height;\n         }\n         double height = h[0] + h[1] + Math.max(h[2], Math.max(h[3], h[4]));\n         return arrange(container, g2, new RectangleConstraint(width, height));\n@@ -441,14 +449,6 @@\n             h[1] = size.height;\n         }\n         h[2] = constraint.getHeight() - h[1] - h[0];\n-        if (this.leftBlock != null) {\n-            RectangleConstraint c3 = new RectangleConstraint(0.0,\n-                    new Range(0.0, constraint.getWidth()),\n-                    LengthConstraintType.RANGE, h[2], null,\n-                    LengthConstraintType.FIXED);\n-            Size2D size = this.leftBlock.arrange(g2, c3);\n-            w[2] = size.width;\n-        }\n         h[3] = h[2];\n         if (this.rightBlock != null) {\n             RectangleConstraint c4 = new RectangleConstraint(0.0,\n\n\n", 
      "edits": [
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 444, 
          "faulty": "if (this.leftBlock != null) {\n  RectangleConstraint c3=new RectangleConstraint(0.0,new Range(0.0,constraint.getWidth()),LengthConstraintType.RANGE,h[2],null,LengthConstraintType.FIXED);\n  Size2D size=this.leftBlock.arrange(g2,c3);\n  w[2]=size.width;\n}", 
          "type": "Delete", 
          "seed": "this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4],h[0],w[3],h[3]));"
        }, 
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 320, 
          "faulty": "h[4]=size.height;", 
          "type": "InsertBefore", 
          "seed": "w[2]=size.width;"
        }, 
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 449, 
          "faulty": "Size2D size=this.leftBlock.arrange(g2,c3);", 
          "type": "InsertBefore", 
          "seed": "w[4]=constraint.getWidth() - w[3] - w[2];"
        }, 
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 307, 
          "faulty": "w[3]=size.width;", 
          "type": "Replace", 
          "seed": "if (this.centerBlock != null) {\n  this.centerBlock.setBounds(new Rectangle2D.Double(w[2],h[0],w[4],h[4]));\n}"
        }, 
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 306, 
          "faulty": "Size2D size=this.rightBlock.arrange(g2,c3);", 
          "type": "InsertBefore", 
          "seed": "if (this.centerBlock != null) {\n  this.centerBlock.setBounds(new Rectangle2D.Double(w[2],h[0],w[4],h[4]));\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Chart_13/source/org/jfree/chart/block/BorderArrangement.java\t2018-12-02 02:35:20.605941475 -0500\n+++ /tmp/GenProg_Defects4J_Chart_13/patches_7fn9/Patch_203/patched/tmp/GenProg_Defects4J_Chart_13/source/org/jfree/chart/block/BorderArrangement.java\t2018-12-02 02:38:25.138651472 -0500\n@@ -146,7 +146,26 @@\n         }\n         else if (w == LengthConstraintType.FIXED) {\n             if (h == LengthConstraintType.NONE) {\n-                contentSize = arrangeFN(container, g2, constraint.getWidth());\n+                if (w == LengthConstraintType.FIXED) {\n+\t\t\t\t\tif (h == LengthConstraintType.NONE) {\n+\t\t\t\t\t\tcontentSize = arrangeFN(container, g2,\n+\t\t\t\t\t\t\t\tconstraint.getWidth());\n+\t\t\t\t\t} else if (h == LengthConstraintType.FIXED) {\n+\t\t\t\t\t\tcontentSize = arrangeFF(container, g2, constraint);\n+\t\t\t\t\t} else if (h == LengthConstraintType.RANGE) {\n+\t\t\t\t\t\tcontentSize = arrangeFR(container, g2, constraint);\n+\t\t\t\t\t}\n+\t\t\t\t} else if (w == LengthConstraintType.RANGE) {\n+\t\t\t\t\tif (h == LengthConstraintType.NONE) {\n+\t\t\t\t\t\tthrow new RuntimeException(\"Not implemented.\");\n+\t\t\t\t\t} else if (h == LengthConstraintType.FIXED) {\n+\t\t\t\t\t\tthrow new RuntimeException(\"Not implemented.\");\n+\t\t\t\t\t} else if (h == LengthConstraintType.RANGE) {\n+\t\t\t\t\t\tcontentSize = arrangeRR(container,\n+\t\t\t\t\t\t\t\tconstraint.getWidthRange(),\n+\t\t\t\t\t\t\t\tconstraint.getHeightRange(), g2);\n+\t\t\t\t\t}\n+\t\t\t\t}\n             }\n             else if (h == LengthConstraintType.FIXED) {\n                 contentSize = arrangeFF(container, g2, constraint);\n@@ -289,7 +308,8 @@\n             w[1] = size.width;\n             h[1] = size.height;\n         }\n-        RectangleConstraint c2 = new RectangleConstraint(0.0,\n+        Size2D s1 = arrangeNN(container, g2);\n+\t\tRectangleConstraint c2 = new RectangleConstraint(0.0,\n                 new Range(0.0, width), LengthConstraintType.RANGE,\n                 0.0, null, LengthConstraintType.NONE);\n         if (this.leftBlock != null) {\n@@ -441,14 +461,6 @@\n             h[1] = size.height;\n         }\n         h[2] = constraint.getHeight() - h[1] - h[0];\n-        if (this.leftBlock != null) {\n-            RectangleConstraint c3 = new RectangleConstraint(0.0,\n-                    new Range(0.0, constraint.getWidth()),\n-                    LengthConstraintType.RANGE, h[2], null,\n-                    LengthConstraintType.FIXED);\n-            Size2D size = this.leftBlock.arrange(g2, c3);\n-            w[2] = size.width;\n-        }\n         h[3] = h[2];\n         if (this.rightBlock != null) {\n             RectangleConstraint c4 = new RectangleConstraint(0.0,\n\n\n", 
      "edits": [
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 292, 
          "faulty": "RectangleConstraint c2=new RectangleConstraint(0.0,new Range(0.0,width),LengthConstraintType.RANGE,0.0,null,LengthConstraintType.NONE);", 
          "type": "InsertBefore", 
          "seed": "Size2D s1=arrangeNN(container,g2);"
        }, 
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 444, 
          "faulty": "if (this.leftBlock != null) {\n  RectangleConstraint c3=new RectangleConstraint(0.0,new Range(0.0,constraint.getWidth()),LengthConstraintType.RANGE,h[2],null,LengthConstraintType.FIXED);\n  Size2D size=this.leftBlock.arrange(g2,c3);\n  w[2]=size.width;\n}", 
          "type": "Replace", 
          "seed": "h[2]=constraint.getHeight() - h[1] - h[0];"
        }, 
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 443, 
          "faulty": "h[2]=constraint.getHeight() - h[1] - h[0];", 
          "type": "Delete", 
          "seed": "RectangleConstraint contentConstraint=container.toContentConstraint(constraint);"
        }, 
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 149, 
          "faulty": "contentSize=arrangeFN(container,g2,constraint.getWidth());", 
          "type": "Replace", 
          "seed": "if (w == LengthConstraintType.FIXED) {\n  if (h == LengthConstraintType.NONE) {\n    contentSize=arrangeFN(container,g2,constraint.getWidth());\n  }\n else   if (h == LengthConstraintType.FIXED) {\n    contentSize=arrangeFF(container,g2,constraint);\n  }\n else   if (h == LengthConstraintType.RANGE) {\n    contentSize=arrangeFR(container,g2,constraint);\n  }\n}\n else if (w == LengthConstraintType.RANGE) {\n  if (h == LengthConstraintType.NONE) {\n    throw new RuntimeException(\"Not implemented.\");\n  }\n else   if (h == LengthConstraintType.FIXED) {\n    throw new RuntimeException(\"Not implemented.\");\n  }\n else   if (h == LengthConstraintType.RANGE) {\n    contentSize=arrangeRR(container,constraint.getWidthRange(),constraint.getHeightRange(),g2);\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Chart_13/source/org/jfree/chart/block/BorderArrangement.java\t2018-12-02 02:35:20.605941475 -0500\n+++ /tmp/GenProg_Defects4J_Chart_13/patches_7fn9/Patch_312/patched/tmp/GenProg_Defects4J_Chart_13/source/org/jfree/chart/block/BorderArrangement.java\t2018-12-02 02:38:55.766769253 -0500\n@@ -284,7 +284,8 @@\n             w[0] = size.width;\n             h[0] = size.height;\n         }\n-        if (this.bottomBlock != null) {\n+        Size2D s1 = arrangeNN(container, g2);\n+\t\tif (this.bottomBlock != null) {\n             Size2D size = this.bottomBlock.arrange(g2, c1);\n             w[1] = size.width;\n             h[1] = size.height;\n@@ -424,14 +425,6 @@\n         double[] w = new double[5];\n         double[] h = new double[5];\n         w[0] = constraint.getWidth();\n-        if (this.topBlock != null) {\n-            RectangleConstraint c1 = new RectangleConstraint(w[0], null,\n-                    LengthConstraintType.FIXED, 0.0,\n-                    new Range(0.0, constraint.getHeight()),\n-                    LengthConstraintType.RANGE);\n-            Size2D size = this.topBlock.arrange(g2, c1);\n-            h[0] = size.height;\n-        }\n         w[1] = w[0];\n         if (this.bottomBlock != null) {\n             RectangleConstraint c2 = new RectangleConstraint(w[0], null,\n@@ -441,14 +434,6 @@\n             h[1] = size.height;\n         }\n         h[2] = constraint.getHeight() - h[1] - h[0];\n-        if (this.leftBlock != null) {\n-            RectangleConstraint c3 = new RectangleConstraint(0.0,\n-                    new Range(0.0, constraint.getWidth()),\n-                    LengthConstraintType.RANGE, h[2], null,\n-                    LengthConstraintType.FIXED);\n-            Size2D size = this.leftBlock.arrange(g2, c3);\n-            w[2] = size.width;\n-        }\n         h[3] = h[2];\n         if (this.rightBlock != null) {\n             RectangleConstraint c4 = new RectangleConstraint(0.0,\n\n\n", 
      "edits": [
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 444, 
          "faulty": "if (this.leftBlock != null) {\n  RectangleConstraint c3=new RectangleConstraint(0.0,new Range(0.0,constraint.getWidth()),LengthConstraintType.RANGE,h[2],null,LengthConstraintType.FIXED);\n  Size2D size=this.leftBlock.arrange(g2,c3);\n  w[2]=size.width;\n}", 
          "type": "Delete", 
          "seed": "Size2D size=this.topBlock.arrange(g2,RectangleConstraint.NONE);"
        }, 
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 427, 
          "faulty": "if (this.topBlock != null) {\n  RectangleConstraint c1=new RectangleConstraint(w[0],null,LengthConstraintType.FIXED,0.0,new Range(0.0,constraint.getHeight()),LengthConstraintType.RANGE);\n  Size2D size=this.topBlock.arrange(g2,c1);\n  h[0]=size.height;\n}", 
          "type": "Delete", 
          "seed": "LengthConstraintType h=constraint.getHeightConstraintType();"
        }, 
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 287, 
          "faulty": "if (this.bottomBlock != null) {\n  Size2D size=this.bottomBlock.arrange(g2,c1);\n  w[1]=size.width;\n  h[1]=size.height;\n}", 
          "type": "InsertBefore", 
          "seed": "Size2D s1=arrangeNN(container,g2);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Chart_13/source/org/jfree/chart/block/BorderArrangement.java\t2018-12-02 02:35:20.605941475 -0500\n+++ /tmp/GenProg_Defects4J_Chart_13/patches_7fn9/Patch_91/patched/tmp/GenProg_Defects4J_Chart_13/source/org/jfree/chart/block/BorderArrangement.java\t2018-12-02 02:37:52.578526242 -0500\n@@ -309,7 +309,8 @@\n         }\n \n         h[2] = Math.max(h[2], h[3]);\n-        h[3] = h[2];\n+        this.rightBlock = null;\n+\t\th[3] = h[2];\n \n         if (this.centerBlock != null) {\n             RectangleConstraint c4 = new RectangleConstraint(width - w[2]\n@@ -317,7 +318,8 @@\n                     LengthConstraintType.NONE);\n             Size2D size = this.centerBlock.arrange(g2, c4);\n             w[4] = size.width;\n-            h[4] = size.height;\n+            w[2] = size.width;\n+\t\t\th[4] = size.height;\n         }\n         double height = h[0] + h[1] + Math.max(h[2], Math.max(h[3], h[4]));\n         return arrange(container, g2, new RectangleConstraint(width, height));\n@@ -441,14 +443,6 @@\n             h[1] = size.height;\n         }\n         h[2] = constraint.getHeight() - h[1] - h[0];\n-        if (this.leftBlock != null) {\n-            RectangleConstraint c3 = new RectangleConstraint(0.0,\n-                    new Range(0.0, constraint.getWidth()),\n-                    LengthConstraintType.RANGE, h[2], null,\n-                    LengthConstraintType.FIXED);\n-            Size2D size = this.leftBlock.arrange(g2, c3);\n-            w[2] = size.width;\n-        }\n         h[3] = h[2];\n         if (this.rightBlock != null) {\n             RectangleConstraint c4 = new RectangleConstraint(0.0,\n\n\n", 
      "edits": [
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 444, 
          "faulty": "if (this.leftBlock != null) {\n  RectangleConstraint c3=new RectangleConstraint(0.0,new Range(0.0,constraint.getWidth()),LengthConstraintType.RANGE,h[2],null,LengthConstraintType.FIXED);\n  Size2D size=this.leftBlock.arrange(g2,c3);\n  w[2]=size.width;\n}", 
          "type": "Delete", 
          "seed": "this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4],h[0],w[3],h[3]));"
        }, 
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 320, 
          "faulty": "h[4]=size.height;", 
          "type": "InsertBefore", 
          "seed": "w[2]=size.width;"
        }, 
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 312, 
          "faulty": "h[3]=h[2];", 
          "type": "InsertBefore", 
          "seed": "this.rightBlock=null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Chart_13/source/org/jfree/chart/block/BorderArrangement.java\t2018-12-02 02:35:20.605941475 -0500\n+++ /tmp/GenProg_Defects4J_Chart_13/patches_7fn9/Patch_213/patched/tmp/GenProg_Defects4J_Chart_13/source/org/jfree/chart/block/BorderArrangement.java\t2018-12-02 02:38:27.366660041 -0500\n@@ -146,7 +146,26 @@\n         }\n         else if (w == LengthConstraintType.FIXED) {\n             if (h == LengthConstraintType.NONE) {\n-                contentSize = arrangeFN(container, g2, constraint.getWidth());\n+                if (w == LengthConstraintType.FIXED) {\n+\t\t\t\t\tif (h == LengthConstraintType.NONE) {\n+\t\t\t\t\t\tcontentSize = arrangeFN(container, g2,\n+\t\t\t\t\t\t\t\tconstraint.getWidth());\n+\t\t\t\t\t} else if (h == LengthConstraintType.FIXED) {\n+\t\t\t\t\t\tcontentSize = arrangeFF(container, g2, constraint);\n+\t\t\t\t\t} else if (h == LengthConstraintType.RANGE) {\n+\t\t\t\t\t\tcontentSize = arrangeFR(container, g2, constraint);\n+\t\t\t\t\t}\n+\t\t\t\t} else if (w == LengthConstraintType.RANGE) {\n+\t\t\t\t\tif (h == LengthConstraintType.NONE) {\n+\t\t\t\t\t\tthrow new RuntimeException(\"Not implemented.\");\n+\t\t\t\t\t} else if (h == LengthConstraintType.FIXED) {\n+\t\t\t\t\t\tthrow new RuntimeException(\"Not implemented.\");\n+\t\t\t\t\t} else if (h == LengthConstraintType.RANGE) {\n+\t\t\t\t\t\tcontentSize = arrangeRR(container,\n+\t\t\t\t\t\t\t\tconstraint.getWidthRange(),\n+\t\t\t\t\t\t\t\tconstraint.getHeightRange(), g2);\n+\t\t\t\t\t}\n+\t\t\t\t}\n             }\n             else if (h == LengthConstraintType.FIXED) {\n                 contentSize = arrangeFF(container, g2, constraint);\n@@ -289,7 +308,8 @@\n             w[1] = size.width;\n             h[1] = size.height;\n         }\n-        RectangleConstraint c2 = new RectangleConstraint(0.0,\n+        Size2D s1 = arrangeNN(container, g2);\n+\t\tRectangleConstraint c2 = new RectangleConstraint(0.0,\n                 new Range(0.0, width), LengthConstraintType.RANGE,\n                 0.0, null, LengthConstraintType.NONE);\n         if (this.leftBlock != null) {\n@@ -441,14 +461,7 @@\n             h[1] = size.height;\n         }\n         h[2] = constraint.getHeight() - h[1] - h[0];\n-        if (this.leftBlock != null) {\n-            RectangleConstraint c3 = new RectangleConstraint(0.0,\n-                    new Range(0.0, constraint.getWidth()),\n-                    LengthConstraintType.RANGE, h[2], null,\n-                    LengthConstraintType.FIXED);\n-            Size2D size = this.leftBlock.arrange(g2, c3);\n-            w[2] = size.width;\n-        }\n+        h[2] = constraint.getHeight() - h[1] - h[0];\n         h[3] = h[2];\n         if (this.rightBlock != null) {\n             RectangleConstraint c4 = new RectangleConstraint(0.0,\n\n\n", 
      "edits": [
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 292, 
          "faulty": "RectangleConstraint c2=new RectangleConstraint(0.0,new Range(0.0,width),LengthConstraintType.RANGE,0.0,null,LengthConstraintType.NONE);", 
          "type": "InsertBefore", 
          "seed": "Size2D s1=arrangeNN(container,g2);"
        }, 
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 444, 
          "faulty": "if (this.leftBlock != null) {\n  RectangleConstraint c3=new RectangleConstraint(0.0,new Range(0.0,constraint.getWidth()),LengthConstraintType.RANGE,h[2],null,LengthConstraintType.FIXED);\n  Size2D size=this.leftBlock.arrange(g2,c3);\n  w[2]=size.width;\n}", 
          "type": "Replace", 
          "seed": "h[2]=constraint.getHeight() - h[1] - h[0];"
        }, 
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 149, 
          "faulty": "contentSize=arrangeFN(container,g2,constraint.getWidth());", 
          "type": "Replace", 
          "seed": "if (w == LengthConstraintType.FIXED) {\n  if (h == LengthConstraintType.NONE) {\n    contentSize=arrangeFN(container,g2,constraint.getWidth());\n  }\n else   if (h == LengthConstraintType.FIXED) {\n    contentSize=arrangeFF(container,g2,constraint);\n  }\n else   if (h == LengthConstraintType.RANGE) {\n    contentSize=arrangeFR(container,g2,constraint);\n  }\n}\n else if (w == LengthConstraintType.RANGE) {\n  if (h == LengthConstraintType.NONE) {\n    throw new RuntimeException(\"Not implemented.\");\n  }\n else   if (h == LengthConstraintType.FIXED) {\n    throw new RuntimeException(\"Not implemented.\");\n  }\n else   if (h == LengthConstraintType.RANGE) {\n    contentSize=arrangeRR(container,constraint.getWidthRange(),constraint.getHeightRange(),g2);\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Chart_13/source/org/jfree/chart/block/BorderArrangement.java\t2018-12-02 02:35:20.605941475 -0500\n+++ /tmp/GenProg_Defects4J_Chart_13/patches_7fn9/Patch_46/patched/tmp/GenProg_Defects4J_Chart_13/source/org/jfree/chart/block/BorderArrangement.java\t2018-12-02 02:37:38.366471575 -0500\n@@ -317,7 +317,8 @@\n                     LengthConstraintType.NONE);\n             Size2D size = this.centerBlock.arrange(g2, c4);\n             w[4] = size.width;\n-            h[4] = size.height;\n+            w[2] = size.width;\n+\t\t\th[4] = size.height;\n         }\n         double height = h[0] + h[1] + Math.max(h[2], Math.max(h[3], h[4]));\n         return arrange(container, g2, new RectangleConstraint(width, height));\n@@ -441,14 +442,7 @@\n             h[1] = size.height;\n         }\n         h[2] = constraint.getHeight() - h[1] - h[0];\n-        if (this.leftBlock != null) {\n-            RectangleConstraint c3 = new RectangleConstraint(0.0,\n-                    new Range(0.0, constraint.getWidth()),\n-                    LengthConstraintType.RANGE, h[2], null,\n-                    LengthConstraintType.FIXED);\n-            Size2D size = this.leftBlock.arrange(g2, c3);\n-            w[2] = size.width;\n-        }\n+        Rectangle2D rect = new Rectangle2D.Double();\n         h[3] = h[2];\n         if (this.rightBlock != null) {\n             RectangleConstraint c4 = new RectangleConstraint(0.0,\n\n\n", 
      "edits": [
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 444, 
          "faulty": "if (this.leftBlock != null) {\n  RectangleConstraint c3=new RectangleConstraint(0.0,new Range(0.0,constraint.getWidth()),LengthConstraintType.RANGE,h[2],null,LengthConstraintType.FIXED);\n  Size2D size=this.leftBlock.arrange(g2,c3);\n  w[2]=size.width;\n}", 
          "type": "Delete", 
          "seed": "this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4],h[0],w[3],h[3]));"
        }, 
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 445, 
          "faulty": "RectangleConstraint c3=new RectangleConstraint(0.0,new Range(0.0,constraint.getWidth()),LengthConstraintType.RANGE,h[2],null,LengthConstraintType.FIXED);", 
          "type": "Delete", 
          "seed": "if (this.topBlock != null) {\n  this.topBlock.setBounds(new Rectangle2D.Double(0.0,0.0,w[0],h[0]));\n}"
        }, 
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 320, 
          "faulty": "h[4]=size.height;", 
          "type": "InsertBefore", 
          "seed": "w[2]=size.width;"
        }, 
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 449, 
          "faulty": "Size2D size=this.leftBlock.arrange(g2,c3);", 
          "type": "InsertBefore", 
          "seed": "w[4]=constraint.getWidth() - w[3] - w[2];"
        }, 
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 444, 
          "faulty": "if (this.leftBlock != null) {\n  RectangleConstraint c3=new RectangleConstraint(0.0,new Range(0.0,constraint.getWidth()),LengthConstraintType.RANGE,h[2],null,LengthConstraintType.FIXED);\n  Size2D size=this.leftBlock.arrange(g2,c3);\n  w[2]=size.width;\n}", 
          "type": "Replace", 
          "seed": "Rectangle2D rect=new Rectangle2D.Double();"
        }, 
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 445, 
          "faulty": "RectangleConstraint c3=new RectangleConstraint(0.0,new Range(0.0,constraint.getWidth()),LengthConstraintType.RANGE,h[2],null,LengthConstraintType.FIXED);", 
          "type": "Replace", 
          "seed": "EntityBlockParams ebp=null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Chart_13/source/org/jfree/chart/block/BorderArrangement.java\t2018-12-02 02:35:20.605941475 -0500\n+++ /tmp/GenProg_Defects4J_Chart_13/patches_7fn9/Patch_40/patched/tmp/GenProg_Defects4J_Chart_13/source/org/jfree/chart/block/BorderArrangement.java\t2018-12-02 02:37:36.914465989 -0500\n@@ -317,7 +317,8 @@\n                     LengthConstraintType.NONE);\n             Size2D size = this.centerBlock.arrange(g2, c4);\n             w[4] = size.width;\n-            h[4] = size.height;\n+            w[2] = size.width;\n+\t\t\th[4] = size.height;\n         }\n         double height = h[0] + h[1] + Math.max(h[2], Math.max(h[3], h[4]));\n         return arrange(container, g2, new RectangleConstraint(width, height));\n@@ -441,14 +442,6 @@\n             h[1] = size.height;\n         }\n         h[2] = constraint.getHeight() - h[1] - h[0];\n-        if (this.leftBlock != null) {\n-            RectangleConstraint c3 = new RectangleConstraint(0.0,\n-                    new Range(0.0, constraint.getWidth()),\n-                    LengthConstraintType.RANGE, h[2], null,\n-                    LengthConstraintType.FIXED);\n-            Size2D size = this.leftBlock.arrange(g2, c3);\n-            w[2] = size.width;\n-        }\n         h[3] = h[2];\n         if (this.rightBlock != null) {\n             RectangleConstraint c4 = new RectangleConstraint(0.0,\n\n\n", 
      "edits": [
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 444, 
          "faulty": "if (this.leftBlock != null) {\n  RectangleConstraint c3=new RectangleConstraint(0.0,new Range(0.0,constraint.getWidth()),LengthConstraintType.RANGE,h[2],null,LengthConstraintType.FIXED);\n  Size2D size=this.leftBlock.arrange(g2,c3);\n  w[2]=size.width;\n}", 
          "type": "Delete", 
          "seed": "this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4],h[0],w[3],h[3]));"
        }, 
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 445, 
          "faulty": "RectangleConstraint c3=new RectangleConstraint(0.0,new Range(0.0,constraint.getWidth()),LengthConstraintType.RANGE,h[2],null,LengthConstraintType.FIXED);", 
          "type": "Delete", 
          "seed": "if (this.topBlock != null) {\n  this.topBlock.setBounds(new Rectangle2D.Double(0.0,0.0,w[0],h[0]));\n}"
        }, 
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 320, 
          "faulty": "h[4]=size.height;", 
          "type": "InsertBefore", 
          "seed": "w[2]=size.width;"
        }, 
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 449, 
          "faulty": "Size2D size=this.leftBlock.arrange(g2,c3);", 
          "type": "InsertBefore", 
          "seed": "w[4]=constraint.getWidth() - w[3] - w[2];"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Chart_13/source/org/jfree/chart/block/BorderArrangement.java\t2018-12-02 02:35:20.605941475 -0500\n+++ /tmp/GenProg_Defects4J_Chart_13/patches_7fn9/Patch_209/patched/tmp/GenProg_Defects4J_Chart_13/source/org/jfree/chart/block/BorderArrangement.java\t2018-12-02 02:38:26.270655825 -0500\n@@ -146,7 +146,26 @@\n         }\n         else if (w == LengthConstraintType.FIXED) {\n             if (h == LengthConstraintType.NONE) {\n-                contentSize = arrangeFN(container, g2, constraint.getWidth());\n+                if (w == LengthConstraintType.FIXED) {\n+\t\t\t\t\tif (h == LengthConstraintType.NONE) {\n+\t\t\t\t\t\tcontentSize = arrangeFN(container, g2,\n+\t\t\t\t\t\t\t\tconstraint.getWidth());\n+\t\t\t\t\t} else if (h == LengthConstraintType.FIXED) {\n+\t\t\t\t\t\tcontentSize = arrangeFF(container, g2, constraint);\n+\t\t\t\t\t} else if (h == LengthConstraintType.RANGE) {\n+\t\t\t\t\t\tcontentSize = arrangeFR(container, g2, constraint);\n+\t\t\t\t\t}\n+\t\t\t\t} else if (w == LengthConstraintType.RANGE) {\n+\t\t\t\t\tif (h == LengthConstraintType.NONE) {\n+\t\t\t\t\t\tthrow new RuntimeException(\"Not implemented.\");\n+\t\t\t\t\t} else if (h == LengthConstraintType.FIXED) {\n+\t\t\t\t\t\tthrow new RuntimeException(\"Not implemented.\");\n+\t\t\t\t\t} else if (h == LengthConstraintType.RANGE) {\n+\t\t\t\t\t\tcontentSize = arrangeRR(container,\n+\t\t\t\t\t\t\t\tconstraint.getWidthRange(),\n+\t\t\t\t\t\t\t\tconstraint.getHeightRange(), g2);\n+\t\t\t\t\t}\n+\t\t\t\t}\n             }\n             else if (h == LengthConstraintType.FIXED) {\n                 contentSize = arrangeFF(container, g2, constraint);\n@@ -422,8 +441,11 @@\n     protected Size2D arrangeFF(BlockContainer container, Graphics2D g2,\n                                RectangleConstraint constraint) {\n         double[] w = new double[5];\n-        double[] h = new double[5];\n-        w[0] = constraint.getWidth();\n+        EntityBlockParams ebp = null;\n+\t\tdouble[] h = new double[5];\n+        RectangleConstraint c3 = new RectangleConstraint(0.0, new Range(0.0,\n+\t\t\t\tconstraint.getWidth()), LengthConstraintType.RANGE, h[2], null,\n+\t\t\t\tLengthConstraintType.FIXED);\n         if (this.topBlock != null) {\n             RectangleConstraint c1 = new RectangleConstraint(w[0], null,\n                     LengthConstraintType.FIXED, 0.0,\n@@ -441,14 +463,6 @@\n             h[1] = size.height;\n         }\n         h[2] = constraint.getHeight() - h[1] - h[0];\n-        if (this.leftBlock != null) {\n-            RectangleConstraint c3 = new RectangleConstraint(0.0,\n-                    new Range(0.0, constraint.getWidth()),\n-                    LengthConstraintType.RANGE, h[2], null,\n-                    LengthConstraintType.FIXED);\n-            Size2D size = this.leftBlock.arrange(g2, c3);\n-            w[2] = size.width;\n-        }\n         h[3] = h[2];\n         if (this.rightBlock != null) {\n             RectangleConstraint c4 = new RectangleConstraint(0.0,\n\n\n", 
      "edits": [
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 444, 
          "faulty": "if (this.leftBlock != null) {\n  RectangleConstraint c3=new RectangleConstraint(0.0,new Range(0.0,constraint.getWidth()),LengthConstraintType.RANGE,h[2],null,LengthConstraintType.FIXED);\n  Size2D size=this.leftBlock.arrange(g2,c3);\n  w[2]=size.width;\n}", 
          "type": "Replace", 
          "seed": "h[2]=constraint.getHeight() - h[1] - h[0];"
        }, 
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 443, 
          "faulty": "h[2]=constraint.getHeight() - h[1] - h[0];", 
          "type": "Delete", 
          "seed": "RectangleConstraint contentConstraint=container.toContentConstraint(constraint);"
        }, 
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 149, 
          "faulty": "contentSize=arrangeFN(container,g2,constraint.getWidth());", 
          "type": "Replace", 
          "seed": "if (w == LengthConstraintType.FIXED) {\n  if (h == LengthConstraintType.NONE) {\n    contentSize=arrangeFN(container,g2,constraint.getWidth());\n  }\n else   if (h == LengthConstraintType.FIXED) {\n    contentSize=arrangeFF(container,g2,constraint);\n  }\n else   if (h == LengthConstraintType.RANGE) {\n    contentSize=arrangeFR(container,g2,constraint);\n  }\n}\n else if (w == LengthConstraintType.RANGE) {\n  if (h == LengthConstraintType.NONE) {\n    throw new RuntimeException(\"Not implemented.\");\n  }\n else   if (h == LengthConstraintType.FIXED) {\n    throw new RuntimeException(\"Not implemented.\");\n  }\n else   if (h == LengthConstraintType.RANGE) {\n    contentSize=arrangeRR(container,constraint.getWidthRange(),constraint.getHeightRange(),g2);\n  }\n}"
        }, 
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 426, 
          "faulty": "w[0]=constraint.getWidth();", 
          "type": "Replace", 
          "seed": "RectangleConstraint c3=new RectangleConstraint(0.0,new Range(0.0,constraint.getWidth()),LengthConstraintType.RANGE,h[2],null,LengthConstraintType.FIXED);"
        }, 
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 425, 
          "faulty": "double[] h=new double[5];", 
          "type": "InsertBefore", 
          "seed": "EntityBlockParams ebp=null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Chart_13/source/org/jfree/chart/block/BorderArrangement.java\t2018-12-02 02:35:20.605941475 -0500\n+++ /tmp/GenProg_Defects4J_Chart_13/patches_7fn9/Patch_197/patched/tmp/GenProg_Defects4J_Chart_13/source/org/jfree/chart/block/BorderArrangement.java\t2018-12-02 02:38:23.406644811 -0500\n@@ -289,7 +289,8 @@\n             w[1] = size.width;\n             h[1] = size.height;\n         }\n-        RectangleConstraint c2 = new RectangleConstraint(0.0,\n+        Size2D s1 = arrangeNN(container, g2);\n+\t\tRectangleConstraint c2 = new RectangleConstraint(0.0,\n                 new Range(0.0, width), LengthConstraintType.RANGE,\n                 0.0, null, LengthConstraintType.NONE);\n         if (this.leftBlock != null) {\n@@ -308,7 +309,8 @@\n             h[3] = size.height;\n         }\n \n-        h[2] = Math.max(h[2], h[3]);\n+        Rectangle2D rect = new Rectangle2D.Double();\n+\t\th[2] = Math.max(h[2], h[3]);\n         h[3] = h[2];\n \n         if (this.centerBlock != null) {\n@@ -441,14 +443,7 @@\n             h[1] = size.height;\n         }\n         h[2] = constraint.getHeight() - h[1] - h[0];\n-        if (this.leftBlock != null) {\n-            RectangleConstraint c3 = new RectangleConstraint(0.0,\n-                    new Range(0.0, constraint.getWidth()),\n-                    LengthConstraintType.RANGE, h[2], null,\n-                    LengthConstraintType.FIXED);\n-            Size2D size = this.leftBlock.arrange(g2, c3);\n-            w[2] = size.width;\n-        }\n+        h[2] = constraint.getHeight() - h[1] - h[0];\n         h[3] = h[2];\n         if (this.rightBlock != null) {\n             RectangleConstraint c4 = new RectangleConstraint(0.0,\n\n\n", 
      "edits": [
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 292, 
          "faulty": "RectangleConstraint c2=new RectangleConstraint(0.0,new Range(0.0,width),LengthConstraintType.RANGE,0.0,null,LengthConstraintType.NONE);", 
          "type": "InsertBefore", 
          "seed": "Size2D s1=arrangeNN(container,g2);"
        }, 
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 444, 
          "faulty": "if (this.leftBlock != null) {\n  RectangleConstraint c3=new RectangleConstraint(0.0,new Range(0.0,constraint.getWidth()),LengthConstraintType.RANGE,h[2],null,LengthConstraintType.FIXED);\n  Size2D size=this.leftBlock.arrange(g2,c3);\n  w[2]=size.width;\n}", 
          "type": "Replace", 
          "seed": "h[2]=constraint.getHeight() - h[1] - h[0];"
        }, 
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 311, 
          "faulty": "h[2]=Math.max(h[2],h[3]);", 
          "type": "InsertBefore", 
          "seed": "Rectangle2D rect=new Rectangle2D.Double();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Chart_13/source/org/jfree/chart/block/BorderArrangement.java\t2018-12-02 02:35:20.605941475 -0500\n+++ /tmp/GenProg_Defects4J_Chart_13/patches_7fn9/Patch_29/patched/tmp/GenProg_Defects4J_Chart_13/source/org/jfree/chart/block/BorderArrangement.java\t2018-12-02 02:37:33.126451418 -0500\n@@ -293,7 +293,8 @@\n                 new Range(0.0, width), LengthConstraintType.RANGE,\n                 0.0, null, LengthConstraintType.NONE);\n         if (this.leftBlock != null) {\n-            Size2D size = this.leftBlock.arrange(g2, c2);\n+            double upperBound = Double.POSITIVE_INFINITY;\n+\t\t\tSize2D size = this.leftBlock.arrange(g2, c2);\n             w[2] = size.width;\n             h[2] = size.height;\n         }\n@@ -441,14 +442,6 @@\n             h[1] = size.height;\n         }\n         h[2] = constraint.getHeight() - h[1] - h[0];\n-        if (this.leftBlock != null) {\n-            RectangleConstraint c3 = new RectangleConstraint(0.0,\n-                    new Range(0.0, constraint.getWidth()),\n-                    LengthConstraintType.RANGE, h[2], null,\n-                    LengthConstraintType.FIXED);\n-            Size2D size = this.leftBlock.arrange(g2, c3);\n-            w[2] = size.width;\n-        }\n         h[3] = h[2];\n         if (this.rightBlock != null) {\n             RectangleConstraint c4 = new RectangleConstraint(0.0,\n\n\n", 
      "edits": [
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 444, 
          "faulty": "if (this.leftBlock != null) {\n  RectangleConstraint c3=new RectangleConstraint(0.0,new Range(0.0,constraint.getWidth()),LengthConstraintType.RANGE,h[2],null,LengthConstraintType.FIXED);\n  Size2D size=this.leftBlock.arrange(g2,c3);\n  w[2]=size.width;\n}", 
          "type": "Delete", 
          "seed": "this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4],h[0],w[3],h[3]));"
        }, 
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 444, 
          "faulty": "if (this.leftBlock != null) {\n  RectangleConstraint c3=new RectangleConstraint(0.0,new Range(0.0,constraint.getWidth()),LengthConstraintType.RANGE,h[2],null,LengthConstraintType.FIXED);\n  Size2D size=this.leftBlock.arrange(g2,c3);\n  w[2]=size.width;\n}", 
          "type": "Delete", 
          "seed": "this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4],h[0],w[3],h[3]));"
        }, 
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 445, 
          "faulty": "RectangleConstraint c3=new RectangleConstraint(0.0,new Range(0.0,constraint.getWidth()),LengthConstraintType.RANGE,h[2],null,LengthConstraintType.FIXED);", 
          "type": "Delete", 
          "seed": "if (this.topBlock != null) {\n  this.topBlock.setBounds(new Rectangle2D.Double(0.0,0.0,w[0],h[0]));\n}"
        }, 
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 296, 
          "faulty": "Size2D size=this.leftBlock.arrange(g2,c2);", 
          "type": "InsertBefore", 
          "seed": "double upperBound=Double.POSITIVE_INFINITY;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Chart_13/source/org/jfree/chart/block/BorderArrangement.java\t2018-12-02 02:35:20.605941475 -0500\n+++ /tmp/GenProg_Defects4J_Chart_13/patches_7fn9/Patch_34/patched/tmp/GenProg_Defects4J_Chart_13/source/org/jfree/chart/block/BorderArrangement.java\t2018-12-02 02:37:34.606457112 -0500\n@@ -317,7 +317,8 @@\n                     LengthConstraintType.NONE);\n             Size2D size = this.centerBlock.arrange(g2, c4);\n             w[4] = size.width;\n-            h[4] = size.height;\n+            w[2] = size.width;\n+\t\t\th[4] = size.height;\n         }\n         double height = h[0] + h[1] + Math.max(h[2], Math.max(h[3], h[4]));\n         return arrange(container, g2, new RectangleConstraint(width, height));\n@@ -441,14 +442,6 @@\n             h[1] = size.height;\n         }\n         h[2] = constraint.getHeight() - h[1] - h[0];\n-        if (this.leftBlock != null) {\n-            RectangleConstraint c3 = new RectangleConstraint(0.0,\n-                    new Range(0.0, constraint.getWidth()),\n-                    LengthConstraintType.RANGE, h[2], null,\n-                    LengthConstraintType.FIXED);\n-            Size2D size = this.leftBlock.arrange(g2, c3);\n-            w[2] = size.width;\n-        }\n         h[3] = h[2];\n         if (this.rightBlock != null) {\n             RectangleConstraint c4 = new RectangleConstraint(0.0,\n\n\n", 
      "edits": [
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 444, 
          "faulty": "if (this.leftBlock != null) {\n  RectangleConstraint c3=new RectangleConstraint(0.0,new Range(0.0,constraint.getWidth()),LengthConstraintType.RANGE,h[2],null,LengthConstraintType.FIXED);\n  Size2D size=this.leftBlock.arrange(g2,c3);\n  w[2]=size.width;\n}", 
          "type": "Delete", 
          "seed": "this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4],h[0],w[3],h[3]));"
        }, 
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 445, 
          "faulty": "RectangleConstraint c3=new RectangleConstraint(0.0,new Range(0.0,constraint.getWidth()),LengthConstraintType.RANGE,h[2],null,LengthConstraintType.FIXED);", 
          "type": "Delete", 
          "seed": "if (this.topBlock != null) {\n  this.topBlock.setBounds(new Rectangle2D.Double(0.0,0.0,w[0],h[0]));\n}"
        }, 
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 320, 
          "faulty": "h[4]=size.height;", 
          "type": "InsertBefore", 
          "seed": "w[2]=size.width;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Chart_13/source/org/jfree/chart/block/BorderArrangement.java\t2018-12-02 02:35:20.605941475 -0500\n+++ /tmp/GenProg_Defects4J_Chart_13/patches_7fn9/Patch_406/patched/tmp/GenProg_Defects4J_Chart_13/source/org/jfree/chart/block/BorderArrangement.java\t2018-12-02 02:39:23.710876699 -0500\n@@ -309,7 +309,8 @@\n         }\n \n         h[2] = Math.max(h[2], h[3]);\n-        h[3] = h[2];\n+        this.rightBlock = null;\n+\t\th[3] = h[2];\n \n         if (this.centerBlock != null) {\n             RectangleConstraint c4 = new RectangleConstraint(width - w[2]\n@@ -424,7 +425,9 @@\n         double[] w = new double[5];\n         double[] h = new double[5];\n         w[0] = constraint.getWidth();\n-        if (this.topBlock != null) {\n+        RectangleConstraint contentConstraint = container\n+\t\t\t\t.toContentConstraint(constraint);\n+\t\tif (this.topBlock != null) {\n             RectangleConstraint c1 = new RectangleConstraint(w[0], null,\n                     LengthConstraintType.FIXED, 0.0,\n                     new Range(0.0, constraint.getHeight()),\n\n\n", 
      "edits": [
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 427, 
          "faulty": "if (this.topBlock != null) {\n  RectangleConstraint c1=new RectangleConstraint(w[0],null,LengthConstraintType.FIXED,0.0,new Range(0.0,constraint.getHeight()),LengthConstraintType.RANGE);\n  Size2D size=this.topBlock.arrange(g2,c1);\n  h[0]=size.height;\n}", 
          "type": "InsertBefore", 
          "seed": "RectangleConstraint contentConstraint=container.toContentConstraint(constraint);"
        }, 
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 312, 
          "faulty": "h[3]=h[2];", 
          "type": "InsertBefore", 
          "seed": "this.rightBlock=null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Chart_13/source/org/jfree/chart/block/BorderArrangement.java\t2018-12-02 02:35:20.605941475 -0500\n+++ /tmp/GenProg_Defects4J_Chart_13/patches_7fn9/Patch_323/patched/tmp/GenProg_Defects4J_Chart_13/source/org/jfree/chart/block/BorderArrangement.java\t2018-12-02 02:38:58.022777928 -0500\n@@ -295,7 +295,11 @@\n         if (this.leftBlock != null) {\n             Size2D size = this.leftBlock.arrange(g2, c2);\n             w[2] = size.width;\n-            h[2] = size.height;\n+            if (this.leftBlock != null) {\n+\t\t\t\tthis.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0],\n+\t\t\t\t\t\tw[2], h[2]));\n+\t\t\t}\n+\t\t\th[2] = size.height;\n         }\n         if (this.rightBlock != null) {\n             double maxW = Math.max(width - w[2], 0.0);\n@@ -424,15 +428,9 @@\n         double[] w = new double[5];\n         double[] h = new double[5];\n         w[0] = constraint.getWidth();\n-        if (this.topBlock != null) {\n-            RectangleConstraint c1 = new RectangleConstraint(w[0], null,\n-                    LengthConstraintType.FIXED, 0.0,\n-                    new Range(0.0, constraint.getHeight()),\n-                    LengthConstraintType.RANGE);\n-            Size2D size = this.topBlock.arrange(g2, c1);\n-            h[0] = size.height;\n-        }\n-        w[1] = w[0];\n+        RectangleConstraint contentConstraint = container\n+\t\t\t\t.toContentConstraint(constraint);\n+\t\tw[1] = w[0];\n         if (this.bottomBlock != null) {\n             RectangleConstraint c2 = new RectangleConstraint(w[0], null,\n                     LengthConstraintType.FIXED, 0.0, new Range(0.0,\n@@ -441,14 +439,6 @@\n             h[1] = size.height;\n         }\n         h[2] = constraint.getHeight() - h[1] - h[0];\n-        if (this.leftBlock != null) {\n-            RectangleConstraint c3 = new RectangleConstraint(0.0,\n-                    new Range(0.0, constraint.getWidth()),\n-                    LengthConstraintType.RANGE, h[2], null,\n-                    LengthConstraintType.FIXED);\n-            Size2D size = this.leftBlock.arrange(g2, c3);\n-            w[2] = size.width;\n-        }\n         h[3] = h[2];\n         if (this.rightBlock != null) {\n             RectangleConstraint c4 = new RectangleConstraint(0.0,\n\n\n", 
      "edits": [
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 444, 
          "faulty": "if (this.leftBlock != null) {\n  RectangleConstraint c3=new RectangleConstraint(0.0,new Range(0.0,constraint.getWidth()),LengthConstraintType.RANGE,h[2],null,LengthConstraintType.FIXED);\n  Size2D size=this.leftBlock.arrange(g2,c3);\n  w[2]=size.width;\n}", 
          "type": "Delete", 
          "seed": "Size2D size=this.topBlock.arrange(g2,RectangleConstraint.NONE);"
        }, 
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 444, 
          "faulty": "if (this.leftBlock != null) {\n  RectangleConstraint c3=new RectangleConstraint(0.0,new Range(0.0,constraint.getWidth()),LengthConstraintType.RANGE,h[2],null,LengthConstraintType.FIXED);\n  Size2D size=this.leftBlock.arrange(g2,c3);\n  w[2]=size.width;\n}", 
          "type": "Delete", 
          "seed": "Size2D size=this.topBlock.arrange(g2,RectangleConstraint.NONE);"
        }, 
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 427, 
          "faulty": "if (this.topBlock != null) {\n  RectangleConstraint c1=new RectangleConstraint(w[0],null,LengthConstraintType.FIXED,0.0,new Range(0.0,constraint.getHeight()),LengthConstraintType.RANGE);\n  Size2D size=this.topBlock.arrange(g2,c1);\n  h[0]=size.height;\n}", 
          "type": "Delete", 
          "seed": "LengthConstraintType h=constraint.getHeightConstraintType();"
        }, 
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 298, 
          "faulty": "h[2]=size.height;", 
          "type": "InsertBefore", 
          "seed": "if (this.leftBlock != null) {\n  this.leftBlock.setBounds(new Rectangle2D.Double(0.0,h[0],w[2],h[2]));\n}"
        }, 
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 444, 
          "faulty": "if (this.leftBlock != null) {\n  RectangleConstraint c3=new RectangleConstraint(0.0,new Range(0.0,constraint.getWidth()),LengthConstraintType.RANGE,h[2],null,LengthConstraintType.FIXED);\n  Size2D size=this.leftBlock.arrange(g2,c3);\n  w[2]=size.width;\n}", 
          "type": "Delete", 
          "seed": "Size2D size=this.topBlock.arrange(g2,RectangleConstraint.NONE);"
        }, 
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 427, 
          "faulty": "if (this.topBlock != null) {\n  RectangleConstraint c1=new RectangleConstraint(w[0],null,LengthConstraintType.FIXED,0.0,new Range(0.0,constraint.getHeight()),LengthConstraintType.RANGE);\n  Size2D size=this.topBlock.arrange(g2,c1);\n  h[0]=size.height;\n}", 
          "type": "Delete", 
          "seed": "LengthConstraintType h=constraint.getHeightConstraintType();"
        }, 
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 435, 
          "faulty": "w[1]=w[0];", 
          "type": "InsertBefore", 
          "seed": "RectangleConstraint contentConstraint=container.toContentConstraint(constraint);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Chart_13/source/org/jfree/chart/block/BorderArrangement.java\t2018-12-02 02:35:20.605941475 -0500\n+++ /tmp/GenProg_Defects4J_Chart_13/patches_7fn9/Patch_216/patched/tmp/GenProg_Defects4J_Chart_13/source/org/jfree/chart/block/BorderArrangement.java\t2018-12-02 02:38:27.886662040 -0500\n@@ -289,7 +289,8 @@\n             w[1] = size.width;\n             h[1] = size.height;\n         }\n-        RectangleConstraint c2 = new RectangleConstraint(0.0,\n+        Size2D s1 = arrangeNN(container, g2);\n+\t\tRectangleConstraint c2 = new RectangleConstraint(0.0,\n                 new Range(0.0, width), LengthConstraintType.RANGE,\n                 0.0, null, LengthConstraintType.NONE);\n         if (this.leftBlock != null) {\n@@ -309,7 +310,7 @@\n         }\n \n         h[2] = Math.max(h[2], h[3]);\n-        h[3] = h[2];\n+        this.rightBlock = null;\n \n         if (this.centerBlock != null) {\n             RectangleConstraint c4 = new RectangleConstraint(width - w[2]\n@@ -441,14 +442,7 @@\n             h[1] = size.height;\n         }\n         h[2] = constraint.getHeight() - h[1] - h[0];\n-        if (this.leftBlock != null) {\n-            RectangleConstraint c3 = new RectangleConstraint(0.0,\n-                    new Range(0.0, constraint.getWidth()),\n-                    LengthConstraintType.RANGE, h[2], null,\n-                    LengthConstraintType.FIXED);\n-            Size2D size = this.leftBlock.arrange(g2, c3);\n-            w[2] = size.width;\n-        }\n+        h[2] = constraint.getHeight() - h[1] - h[0];\n         h[3] = h[2];\n         if (this.rightBlock != null) {\n             RectangleConstraint c4 = new RectangleConstraint(0.0,\n\n\n", 
      "edits": [
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 292, 
          "faulty": "RectangleConstraint c2=new RectangleConstraint(0.0,new Range(0.0,width),LengthConstraintType.RANGE,0.0,null,LengthConstraintType.NONE);", 
          "type": "InsertBefore", 
          "seed": "Size2D s1=arrangeNN(container,g2);"
        }, 
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 444, 
          "faulty": "if (this.leftBlock != null) {\n  RectangleConstraint c3=new RectangleConstraint(0.0,new Range(0.0,constraint.getWidth()),LengthConstraintType.RANGE,h[2],null,LengthConstraintType.FIXED);\n  Size2D size=this.leftBlock.arrange(g2,c3);\n  w[2]=size.width;\n}", 
          "type": "Replace", 
          "seed": "h[2]=constraint.getHeight() - h[1] - h[0];"
        }, 
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 312, 
          "faulty": "h[3]=h[2];", 
          "type": "Replace", 
          "seed": "this.rightBlock=null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Chart_13/source/org/jfree/chart/block/BorderArrangement.java\t2018-12-02 02:35:20.605941475 -0500\n+++ /tmp/GenProg_Defects4J_Chart_13/patches_7fn9/Patch_81/patched/tmp/GenProg_Defects4J_Chart_13/source/org/jfree/chart/block/BorderArrangement.java\t2018-12-02 02:37:50.210517134 -0500\n@@ -303,8 +303,15 @@\n                     new Range(Math.min(w[2], maxW), maxW),\n                     LengthConstraintType.RANGE, 0.0, null,\n                     LengthConstraintType.NONE);\n-            Size2D size = this.rightBlock.arrange(g2, c3);\n-            w[3] = size.width;\n+            if (this.centerBlock != null) {\n+\t\t\t\tthis.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0],\n+\t\t\t\t\t\tw[4], h[4]));\n+\t\t\t}\n+\t\t\tSize2D size = this.rightBlock.arrange(g2, c3);\n+            if (this.centerBlock != null) {\n+\t\t\t\tthis.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0],\n+\t\t\t\t\t\tw[4], h[4]));\n+\t\t\t}\n             h[3] = size.height;\n         }\n \n@@ -317,7 +324,11 @@\n                     LengthConstraintType.NONE);\n             Size2D size = this.centerBlock.arrange(g2, c4);\n             w[4] = size.width;\n-            h[4] = size.height;\n+            w[2] = size.width;\n+\t\t\tw[2] = size.width;\n+\t\t\tw[2] = size.width;\n+\t\t\tw[2] = size.width;\n+\t\t\th[4] = size.height;\n         }\n         double height = h[0] + h[1] + Math.max(h[2], Math.max(h[3], h[4]));\n         return arrange(container, g2, new RectangleConstraint(width, height));\n@@ -433,22 +444,7 @@\n             h[0] = size.height;\n         }\n         w[1] = w[0];\n-        if (this.bottomBlock != null) {\n-            RectangleConstraint c2 = new RectangleConstraint(w[0], null,\n-                    LengthConstraintType.FIXED, 0.0, new Range(0.0,\n-                    constraint.getHeight() - h[0]), LengthConstraintType.RANGE);\n-            Size2D size = this.bottomBlock.arrange(g2, c2);\n-            h[1] = size.height;\n-        }\n         h[2] = constraint.getHeight() - h[1] - h[0];\n-        if (this.leftBlock != null) {\n-            RectangleConstraint c3 = new RectangleConstraint(0.0,\n-                    new Range(0.0, constraint.getWidth()),\n-                    LengthConstraintType.RANGE, h[2], null,\n-                    LengthConstraintType.FIXED);\n-            Size2D size = this.leftBlock.arrange(g2, c3);\n-            w[2] = size.width;\n-        }\n         h[3] = h[2];\n         if (this.rightBlock != null) {\n             RectangleConstraint c4 = new RectangleConstraint(0.0,\n\n\n", 
      "edits": [
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 444, 
          "faulty": "if (this.leftBlock != null) {\n  RectangleConstraint c3=new RectangleConstraint(0.0,new Range(0.0,constraint.getWidth()),LengthConstraintType.RANGE,h[2],null,LengthConstraintType.FIXED);\n  Size2D size=this.leftBlock.arrange(g2,c3);\n  w[2]=size.width;\n}", 
          "type": "Delete", 
          "seed": "this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4],h[0],w[3],h[3]));"
        }, 
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 320, 
          "faulty": "h[4]=size.height;", 
          "type": "InsertBefore", 
          "seed": "w[2]=size.width;"
        }, 
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 449, 
          "faulty": "Size2D size=this.leftBlock.arrange(g2,c3);", 
          "type": "InsertBefore", 
          "seed": "w[4]=constraint.getWidth() - w[3] - w[2];"
        }, 
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 320, 
          "faulty": "h[4]=size.height;", 
          "type": "InsertBefore", 
          "seed": "w[2]=size.width;"
        }, 
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 449, 
          "faulty": "Size2D size=this.leftBlock.arrange(g2,c3);", 
          "type": "InsertBefore", 
          "seed": "w[4]=constraint.getWidth() - w[3] - w[2];"
        }, 
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 444, 
          "faulty": "if (this.leftBlock != null) {\n  RectangleConstraint c3=new RectangleConstraint(0.0,new Range(0.0,constraint.getWidth()),LengthConstraintType.RANGE,h[2],null,LengthConstraintType.FIXED);\n  Size2D size=this.leftBlock.arrange(g2,c3);\n  w[2]=size.width;\n}", 
          "type": "Delete", 
          "seed": "this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4],h[0],w[3],h[3]));"
        }, 
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 320, 
          "faulty": "h[4]=size.height;", 
          "type": "InsertBefore", 
          "seed": "w[2]=size.width;"
        }, 
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 449, 
          "faulty": "Size2D size=this.leftBlock.arrange(g2,c3);", 
          "type": "InsertBefore", 
          "seed": "w[4]=constraint.getWidth() - w[3] - w[2];"
        }, 
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 320, 
          "faulty": "h[4]=size.height;", 
          "type": "InsertBefore", 
          "seed": "w[2]=size.width;"
        }, 
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 449, 
          "faulty": "Size2D size=this.leftBlock.arrange(g2,c3);", 
          "type": "InsertBefore", 
          "seed": "w[4]=constraint.getWidth() - w[3] - w[2];"
        }, 
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 307, 
          "faulty": "w[3]=size.width;", 
          "type": "Replace", 
          "seed": "if (this.centerBlock != null) {\n  this.centerBlock.setBounds(new Rectangle2D.Double(w[2],h[0],w[4],h[4]));\n}"
        }, 
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 306, 
          "faulty": "Size2D size=this.rightBlock.arrange(g2,c3);", 
          "type": "InsertBefore", 
          "seed": "if (this.centerBlock != null) {\n  this.centerBlock.setBounds(new Rectangle2D.Double(w[2],h[0],w[4],h[4]));\n}"
        }, 
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 436, 
          "faulty": "if (this.bottomBlock != null) {\n  RectangleConstraint c2=new RectangleConstraint(w[0],null,LengthConstraintType.FIXED,0.0,new Range(0.0,constraint.getHeight() - h[0]),LengthConstraintType.RANGE);\n  Size2D size=this.bottomBlock.arrange(g2,c2);\n  h[1]=size.height;\n}", 
          "type": "Delete", 
          "seed": "EntityBlockParams ebp=null;"
        }, 
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 445, 
          "faulty": "RectangleConstraint c3=new RectangleConstraint(0.0,new Range(0.0,constraint.getWidth()),LengthConstraintType.RANGE,h[2],null,LengthConstraintType.FIXED);", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Chart_13/source/org/jfree/chart/block/BorderArrangement.java\t2018-12-02 02:35:20.605941475 -0500\n+++ /tmp/GenProg_Defects4J_Chart_13/patches_7fn9/Patch_308/patched/tmp/GenProg_Defects4J_Chart_13/source/org/jfree/chart/block/BorderArrangement.java\t2018-12-02 02:38:55.170766962 -0500\n@@ -295,7 +295,11 @@\n         if (this.leftBlock != null) {\n             Size2D size = this.leftBlock.arrange(g2, c2);\n             w[2] = size.width;\n-            h[2] = size.height;\n+            if (this.leftBlock != null) {\n+\t\t\t\tthis.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0],\n+\t\t\t\t\t\tw[2], h[2]));\n+\t\t\t}\n+\t\t\th[2] = size.height;\n         }\n         if (this.rightBlock != null) {\n             double maxW = Math.max(width - w[2], 0.0);\n@@ -424,31 +428,9 @@\n         double[] w = new double[5];\n         double[] h = new double[5];\n         w[0] = constraint.getWidth();\n-        if (this.topBlock != null) {\n-            RectangleConstraint c1 = new RectangleConstraint(w[0], null,\n-                    LengthConstraintType.FIXED, 0.0,\n-                    new Range(0.0, constraint.getHeight()),\n-                    LengthConstraintType.RANGE);\n-            Size2D size = this.topBlock.arrange(g2, c1);\n-            h[0] = size.height;\n-        }\n         w[1] = w[0];\n-        if (this.bottomBlock != null) {\n-            RectangleConstraint c2 = new RectangleConstraint(w[0], null,\n-                    LengthConstraintType.FIXED, 0.0, new Range(0.0,\n-                    constraint.getHeight() - h[0]), LengthConstraintType.RANGE);\n-            Size2D size = this.bottomBlock.arrange(g2, c2);\n-            h[1] = size.height;\n-        }\n+        Size2D result = new Size2D();\n         h[2] = constraint.getHeight() - h[1] - h[0];\n-        if (this.leftBlock != null) {\n-            RectangleConstraint c3 = new RectangleConstraint(0.0,\n-                    new Range(0.0, constraint.getWidth()),\n-                    LengthConstraintType.RANGE, h[2], null,\n-                    LengthConstraintType.FIXED);\n-            Size2D size = this.leftBlock.arrange(g2, c3);\n-            w[2] = size.width;\n-        }\n         h[3] = h[2];\n         if (this.rightBlock != null) {\n             RectangleConstraint c4 = new RectangleConstraint(0.0,\n\n\n", 
      "edits": [
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 444, 
          "faulty": "if (this.leftBlock != null) {\n  RectangleConstraint c3=new RectangleConstraint(0.0,new Range(0.0,constraint.getWidth()),LengthConstraintType.RANGE,h[2],null,LengthConstraintType.FIXED);\n  Size2D size=this.leftBlock.arrange(g2,c3);\n  w[2]=size.width;\n}", 
          "type": "Delete", 
          "seed": "Size2D size=this.topBlock.arrange(g2,RectangleConstraint.NONE);"
        }, 
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 444, 
          "faulty": "if (this.leftBlock != null) {\n  RectangleConstraint c3=new RectangleConstraint(0.0,new Range(0.0,constraint.getWidth()),LengthConstraintType.RANGE,h[2],null,LengthConstraintType.FIXED);\n  Size2D size=this.leftBlock.arrange(g2,c3);\n  w[2]=size.width;\n}", 
          "type": "Delete", 
          "seed": "Size2D size=this.topBlock.arrange(g2,RectangleConstraint.NONE);"
        }, 
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 427, 
          "faulty": "if (this.topBlock != null) {\n  RectangleConstraint c1=new RectangleConstraint(w[0],null,LengthConstraintType.FIXED,0.0,new Range(0.0,constraint.getHeight()),LengthConstraintType.RANGE);\n  Size2D size=this.topBlock.arrange(g2,c1);\n  h[0]=size.height;\n}", 
          "type": "Delete", 
          "seed": "LengthConstraintType h=constraint.getHeightConstraintType();"
        }, 
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 298, 
          "faulty": "h[2]=size.height;", 
          "type": "InsertBefore", 
          "seed": "if (this.leftBlock != null) {\n  this.leftBlock.setBounds(new Rectangle2D.Double(0.0,h[0],w[2],h[2]));\n}"
        }, 
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 436, 
          "faulty": "if (this.bottomBlock != null) {\n  RectangleConstraint c2=new RectangleConstraint(w[0],null,LengthConstraintType.FIXED,0.0,new Range(0.0,constraint.getHeight() - h[0]),LengthConstraintType.RANGE);\n  Size2D size=this.bottomBlock.arrange(g2,c2);\n  h[1]=size.height;\n}", 
          "type": "Replace", 
          "seed": "Size2D result=new Size2D();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Chart_13/source/org/jfree/chart/block/BorderArrangement.java\t2018-12-02 02:35:20.605941475 -0500\n+++ /tmp/GenProg_Defects4J_Chart_13/patches_7fn9/Patch_283/patched/tmp/GenProg_Defects4J_Chart_13/source/org/jfree/chart/block/BorderArrangement.java\t2018-12-02 02:38:47.758738460 -0500\n@@ -432,7 +432,6 @@\n             Size2D size = this.topBlock.arrange(g2, c1);\n             h[0] = size.height;\n         }\n-        w[1] = w[0];\n         if (this.bottomBlock != null) {\n             RectangleConstraint c2 = new RectangleConstraint(w[0], null,\n                     LengthConstraintType.FIXED, 0.0, new Range(0.0,\n@@ -441,14 +440,6 @@\n             h[1] = size.height;\n         }\n         h[2] = constraint.getHeight() - h[1] - h[0];\n-        if (this.leftBlock != null) {\n-            RectangleConstraint c3 = new RectangleConstraint(0.0,\n-                    new Range(0.0, constraint.getWidth()),\n-                    LengthConstraintType.RANGE, h[2], null,\n-                    LengthConstraintType.FIXED);\n-            Size2D size = this.leftBlock.arrange(g2, c3);\n-            w[2] = size.width;\n-        }\n         h[3] = h[2];\n         if (this.rightBlock != null) {\n             RectangleConstraint c4 = new RectangleConstraint(0.0,\n\n\n", 
      "edits": [
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 444, 
          "faulty": "if (this.leftBlock != null) {\n  RectangleConstraint c3=new RectangleConstraint(0.0,new Range(0.0,constraint.getWidth()),LengthConstraintType.RANGE,h[2],null,LengthConstraintType.FIXED);\n  Size2D size=this.leftBlock.arrange(g2,c3);\n  w[2]=size.width;\n}", 
          "type": "Delete", 
          "seed": "Size2D size=this.topBlock.arrange(g2,RectangleConstraint.NONE);"
        }, 
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 435, 
          "faulty": "w[1]=w[0];", 
          "type": "Delete", 
          "seed": "EntityBlockParams ebp=null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Chart_13/source/org/jfree/chart/block/BorderArrangement.java\t2018-12-02 02:35:20.605941475 -0500\n+++ /tmp/GenProg_Defects4J_Chart_13/patches_7fn9/Patch_187/patched/tmp/GenProg_Defects4J_Chart_13/source/org/jfree/chart/block/BorderArrangement.java\t2018-12-02 02:38:21.090635904 -0500\n@@ -309,7 +309,7 @@\n         }\n \n         h[2] = Math.max(h[2], h[3]);\n-        h[3] = h[2];\n+        this.rightBlock = null;\n \n         if (this.centerBlock != null) {\n             RectangleConstraint c4 = new RectangleConstraint(width - w[2]\n\n\n", 
      "edits": [
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 312, 
          "faulty": "h[3]=h[2];", 
          "type": "Replace", 
          "seed": "this.rightBlock=null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Chart_13/source/org/jfree/chart/block/BorderArrangement.java\t2018-12-02 02:35:20.605941475 -0500\n+++ /tmp/GenProg_Defects4J_Chart_13/patches_7fn9/Patch_328/patched/tmp/GenProg_Defects4J_Chart_13/source/org/jfree/chart/block/BorderArrangement.java\t2018-12-02 02:38:59.538783758 -0500\n@@ -424,15 +424,9 @@\n         double[] w = new double[5];\n         double[] h = new double[5];\n         w[0] = constraint.getWidth();\n-        if (this.topBlock != null) {\n-            RectangleConstraint c1 = new RectangleConstraint(w[0], null,\n-                    LengthConstraintType.FIXED, 0.0,\n-                    new Range(0.0, constraint.getHeight()),\n-                    LengthConstraintType.RANGE);\n-            Size2D size = this.topBlock.arrange(g2, c1);\n-            h[0] = size.height;\n-        }\n-        w[1] = w[0];\n+        RectangleConstraint contentConstraint = container\n+\t\t\t\t.toContentConstraint(constraint);\n+\t\tw[1] = w[0];\n         if (this.bottomBlock != null) {\n             RectangleConstraint c2 = new RectangleConstraint(w[0], null,\n                     LengthConstraintType.FIXED, 0.0, new Range(0.0,\n@@ -440,15 +434,7 @@\n             Size2D size = this.bottomBlock.arrange(g2, c2);\n             h[1] = size.height;\n         }\n-        h[2] = constraint.getHeight() - h[1] - h[0];\n-        if (this.leftBlock != null) {\n-            RectangleConstraint c3 = new RectangleConstraint(0.0,\n-                    new Range(0.0, constraint.getWidth()),\n-                    LengthConstraintType.RANGE, h[2], null,\n-                    LengthConstraintType.FIXED);\n-            Size2D size = this.leftBlock.arrange(g2, c3);\n-            w[2] = size.width;\n-        }\n+        double maxH = 0.0;\n         h[3] = h[2];\n         if (this.rightBlock != null) {\n             RectangleConstraint c4 = new RectangleConstraint(0.0,\n\n\n", 
      "edits": [
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 444, 
          "faulty": "if (this.leftBlock != null) {\n  RectangleConstraint c3=new RectangleConstraint(0.0,new Range(0.0,constraint.getWidth()),LengthConstraintType.RANGE,h[2],null,LengthConstraintType.FIXED);\n  Size2D size=this.leftBlock.arrange(g2,c3);\n  w[2]=size.width;\n}", 
          "type": "Delete", 
          "seed": "Size2D size=this.topBlock.arrange(g2,RectangleConstraint.NONE);"
        }, 
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 444, 
          "faulty": "if (this.leftBlock != null) {\n  RectangleConstraint c3=new RectangleConstraint(0.0,new Range(0.0,constraint.getWidth()),LengthConstraintType.RANGE,h[2],null,LengthConstraintType.FIXED);\n  Size2D size=this.leftBlock.arrange(g2,c3);\n  w[2]=size.width;\n}", 
          "type": "Delete", 
          "seed": "Size2D size=this.topBlock.arrange(g2,RectangleConstraint.NONE);"
        }, 
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 427, 
          "faulty": "if (this.topBlock != null) {\n  RectangleConstraint c1=new RectangleConstraint(w[0],null,LengthConstraintType.FIXED,0.0,new Range(0.0,constraint.getHeight()),LengthConstraintType.RANGE);\n  Size2D size=this.topBlock.arrange(g2,c1);\n  h[0]=size.height;\n}", 
          "type": "Delete", 
          "seed": "LengthConstraintType h=constraint.getHeightConstraintType();"
        }, 
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 435, 
          "faulty": "w[1]=w[0];", 
          "type": "InsertBefore", 
          "seed": "RectangleConstraint contentConstraint=container.toContentConstraint(constraint);"
        }, 
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 443, 
          "faulty": "h[2]=constraint.getHeight() - h[1] - h[0];", 
          "type": "Replace", 
          "seed": "double maxH=0.0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Chart_13/source/org/jfree/chart/block/BorderArrangement.java\t2018-12-02 02:35:20.605941475 -0500\n+++ /tmp/GenProg_Defects4J_Chart_13/patches_7fn9/Patch_295/patched/tmp/GenProg_Defects4J_Chart_13/source/org/jfree/chart/block/BorderArrangement.java\t2018-12-02 02:38:50.854750365 -0500\n@@ -424,14 +424,6 @@\n         double[] w = new double[5];\n         double[] h = new double[5];\n         w[0] = constraint.getWidth();\n-        if (this.topBlock != null) {\n-            RectangleConstraint c1 = new RectangleConstraint(w[0], null,\n-                    LengthConstraintType.FIXED, 0.0,\n-                    new Range(0.0, constraint.getHeight()),\n-                    LengthConstraintType.RANGE);\n-            Size2D size = this.topBlock.arrange(g2, c1);\n-            h[0] = size.height;\n-        }\n         w[1] = w[0];\n         if (this.bottomBlock != null) {\n             RectangleConstraint c2 = new RectangleConstraint(w[0], null,\n@@ -441,14 +433,6 @@\n             h[1] = size.height;\n         }\n         h[2] = constraint.getHeight() - h[1] - h[0];\n-        if (this.leftBlock != null) {\n-            RectangleConstraint c3 = new RectangleConstraint(0.0,\n-                    new Range(0.0, constraint.getWidth()),\n-                    LengthConstraintType.RANGE, h[2], null,\n-                    LengthConstraintType.FIXED);\n-            Size2D size = this.leftBlock.arrange(g2, c3);\n-            w[2] = size.width;\n-        }\n         h[3] = h[2];\n         if (this.rightBlock != null) {\n             RectangleConstraint c4 = new RectangleConstraint(0.0,\n\n\n", 
      "edits": [
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 444, 
          "faulty": "if (this.leftBlock != null) {\n  RectangleConstraint c3=new RectangleConstraint(0.0,new Range(0.0,constraint.getWidth()),LengthConstraintType.RANGE,h[2],null,LengthConstraintType.FIXED);\n  Size2D size=this.leftBlock.arrange(g2,c3);\n  w[2]=size.width;\n}", 
          "type": "Delete", 
          "seed": "Size2D size=this.topBlock.arrange(g2,RectangleConstraint.NONE);"
        }, 
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 427, 
          "faulty": "if (this.topBlock != null) {\n  RectangleConstraint c1=new RectangleConstraint(w[0],null,LengthConstraintType.FIXED,0.0,new Range(0.0,constraint.getHeight()),LengthConstraintType.RANGE);\n  Size2D size=this.topBlock.arrange(g2,c1);\n  h[0]=size.height;\n}", 
          "type": "Delete", 
          "seed": "LengthConstraintType h=constraint.getHeightConstraintType();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Chart_13/source/org/jfree/chart/block/BorderArrangement.java\t2018-12-02 02:35:20.605941475 -0500\n+++ /tmp/GenProg_Defects4J_Chart_13/patches_7fn9/Patch_206/patched/tmp/GenProg_Defects4J_Chart_13/source/org/jfree/chart/block/BorderArrangement.java\t2018-12-02 02:38:25.646653426 -0500\n@@ -146,7 +146,26 @@\n         }\n         else if (w == LengthConstraintType.FIXED) {\n             if (h == LengthConstraintType.NONE) {\n-                contentSize = arrangeFN(container, g2, constraint.getWidth());\n+                if (w == LengthConstraintType.FIXED) {\n+\t\t\t\t\tif (h == LengthConstraintType.NONE) {\n+\t\t\t\t\t\tcontentSize = arrangeFN(container, g2,\n+\t\t\t\t\t\t\t\tconstraint.getWidth());\n+\t\t\t\t\t} else if (h == LengthConstraintType.FIXED) {\n+\t\t\t\t\t\tcontentSize = arrangeFF(container, g2, constraint);\n+\t\t\t\t\t} else if (h == LengthConstraintType.RANGE) {\n+\t\t\t\t\t\tcontentSize = arrangeFR(container, g2, constraint);\n+\t\t\t\t\t}\n+\t\t\t\t} else if (w == LengthConstraintType.RANGE) {\n+\t\t\t\t\tif (h == LengthConstraintType.NONE) {\n+\t\t\t\t\t\tthrow new RuntimeException(\"Not implemented.\");\n+\t\t\t\t\t} else if (h == LengthConstraintType.FIXED) {\n+\t\t\t\t\t\tthrow new RuntimeException(\"Not implemented.\");\n+\t\t\t\t\t} else if (h == LengthConstraintType.RANGE) {\n+\t\t\t\t\t\tcontentSize = arrangeRR(container,\n+\t\t\t\t\t\t\t\tconstraint.getWidthRange(),\n+\t\t\t\t\t\t\t\tconstraint.getHeightRange(), g2);\n+\t\t\t\t\t}\n+\t\t\t\t}\n             }\n             else if (h == LengthConstraintType.FIXED) {\n                 contentSize = arrangeFF(container, g2, constraint);\n@@ -289,7 +308,8 @@\n             w[1] = size.width;\n             h[1] = size.height;\n         }\n-        RectangleConstraint c2 = new RectangleConstraint(0.0,\n+        Size2D s1 = arrangeNN(container, g2);\n+\t\tRectangleConstraint c2 = new RectangleConstraint(0.0,\n                 new Range(0.0, width), LengthConstraintType.RANGE,\n                 0.0, null, LengthConstraintType.NONE);\n         if (this.leftBlock != null) {\n@@ -441,14 +461,6 @@\n             h[1] = size.height;\n         }\n         h[2] = constraint.getHeight() - h[1] - h[0];\n-        if (this.leftBlock != null) {\n-            RectangleConstraint c3 = new RectangleConstraint(0.0,\n-                    new Range(0.0, constraint.getWidth()),\n-                    LengthConstraintType.RANGE, h[2], null,\n-                    LengthConstraintType.FIXED);\n-            Size2D size = this.leftBlock.arrange(g2, c3);\n-            w[2] = size.width;\n-        }\n         h[3] = h[2];\n         if (this.rightBlock != null) {\n             RectangleConstraint c4 = new RectangleConstraint(0.0,\n\n\n", 
      "edits": [
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 292, 
          "faulty": "RectangleConstraint c2=new RectangleConstraint(0.0,new Range(0.0,width),LengthConstraintType.RANGE,0.0,null,LengthConstraintType.NONE);", 
          "type": "InsertBefore", 
          "seed": "Size2D s1=arrangeNN(container,g2);"
        }, 
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 444, 
          "faulty": "if (this.leftBlock != null) {\n  RectangleConstraint c3=new RectangleConstraint(0.0,new Range(0.0,constraint.getWidth()),LengthConstraintType.RANGE,h[2],null,LengthConstraintType.FIXED);\n  Size2D size=this.leftBlock.arrange(g2,c3);\n  w[2]=size.width;\n}", 
          "type": "Replace", 
          "seed": "h[2]=constraint.getHeight() - h[1] - h[0];"
        }, 
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 443, 
          "faulty": "h[2]=constraint.getHeight() - h[1] - h[0];", 
          "type": "Delete", 
          "seed": "RectangleConstraint contentConstraint=container.toContentConstraint(constraint);"
        }, 
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 443, 
          "faulty": "h[2]=constraint.getHeight() - h[1] - h[0];", 
          "type": "Delete", 
          "seed": "RectangleConstraint contentConstraint=container.toContentConstraint(constraint);"
        }, 
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 149, 
          "faulty": "contentSize=arrangeFN(container,g2,constraint.getWidth());", 
          "type": "Replace", 
          "seed": "if (w == LengthConstraintType.FIXED) {\n  if (h == LengthConstraintType.NONE) {\n    contentSize=arrangeFN(container,g2,constraint.getWidth());\n  }\n else   if (h == LengthConstraintType.FIXED) {\n    contentSize=arrangeFF(container,g2,constraint);\n  }\n else   if (h == LengthConstraintType.RANGE) {\n    contentSize=arrangeFR(container,g2,constraint);\n  }\n}\n else if (w == LengthConstraintType.RANGE) {\n  if (h == LengthConstraintType.NONE) {\n    throw new RuntimeException(\"Not implemented.\");\n  }\n else   if (h == LengthConstraintType.FIXED) {\n    throw new RuntimeException(\"Not implemented.\");\n  }\n else   if (h == LengthConstraintType.RANGE) {\n    contentSize=arrangeRR(container,constraint.getWidthRange(),constraint.getHeightRange(),g2);\n  }\n}"
        }, 
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 445, 
          "faulty": "RectangleConstraint c3=new RectangleConstraint(0.0,new Range(0.0,constraint.getWidth()),LengthConstraintType.RANGE,h[2],null,LengthConstraintType.FIXED);", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Chart_13/source/org/jfree/chart/block/BorderArrangement.java\t2018-12-02 02:35:20.605941475 -0500\n+++ /tmp/GenProg_Defects4J_Chart_13/patches_7fn9/Patch_36/patched/tmp/GenProg_Defects4J_Chart_13/source/org/jfree/chart/block/BorderArrangement.java\t2018-12-02 02:37:35.442460327 -0500\n@@ -149,7 +149,8 @@\n                 contentSize = arrangeFN(container, g2, constraint.getWidth());\n             }\n             else if (h == LengthConstraintType.FIXED) {\n-                contentSize = arrangeFF(container, g2, constraint);\n+                this.leftBlock = null;\n+\t\t\t\tcontentSize = arrangeFF(container, g2, constraint);\n             }\n             else if (h == LengthConstraintType.RANGE) {\n                 contentSize = arrangeFR(container, g2, constraint);\n@@ -293,7 +294,8 @@\n                 new Range(0.0, width), LengthConstraintType.RANGE,\n                 0.0, null, LengthConstraintType.NONE);\n         if (this.leftBlock != null) {\n-            Size2D size = this.leftBlock.arrange(g2, c2);\n+            double upperBound = Double.POSITIVE_INFINITY;\n+\t\t\tSize2D size = this.leftBlock.arrange(g2, c2);\n             w[2] = size.width;\n             h[2] = size.height;\n         }\n@@ -424,31 +426,8 @@\n         double[] w = new double[5];\n         double[] h = new double[5];\n         w[0] = constraint.getWidth();\n-        if (this.topBlock != null) {\n-            RectangleConstraint c1 = new RectangleConstraint(w[0], null,\n-                    LengthConstraintType.FIXED, 0.0,\n-                    new Range(0.0, constraint.getHeight()),\n-                    LengthConstraintType.RANGE);\n-            Size2D size = this.topBlock.arrange(g2, c1);\n-            h[0] = size.height;\n-        }\n         w[1] = w[0];\n-        if (this.bottomBlock != null) {\n-            RectangleConstraint c2 = new RectangleConstraint(w[0], null,\n-                    LengthConstraintType.FIXED, 0.0, new Range(0.0,\n-                    constraint.getHeight() - h[0]), LengthConstraintType.RANGE);\n-            Size2D size = this.bottomBlock.arrange(g2, c2);\n-            h[1] = size.height;\n-        }\n         h[2] = constraint.getHeight() - h[1] - h[0];\n-        if (this.leftBlock != null) {\n-            RectangleConstraint c3 = new RectangleConstraint(0.0,\n-                    new Range(0.0, constraint.getWidth()),\n-                    LengthConstraintType.RANGE, h[2], null,\n-                    LengthConstraintType.FIXED);\n-            Size2D size = this.leftBlock.arrange(g2, c3);\n-            w[2] = size.width;\n-        }\n         h[3] = h[2];\n         if (this.rightBlock != null) {\n             RectangleConstraint c4 = new RectangleConstraint(0.0,\n\n\n", 
      "edits": [
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 444, 
          "faulty": "if (this.leftBlock != null) {\n  RectangleConstraint c3=new RectangleConstraint(0.0,new Range(0.0,constraint.getWidth()),LengthConstraintType.RANGE,h[2],null,LengthConstraintType.FIXED);\n  Size2D size=this.leftBlock.arrange(g2,c3);\n  w[2]=size.width;\n}", 
          "type": "Delete", 
          "seed": "this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4],h[0],w[3],h[3]));"
        }, 
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 444, 
          "faulty": "if (this.leftBlock != null) {\n  RectangleConstraint c3=new RectangleConstraint(0.0,new Range(0.0,constraint.getWidth()),LengthConstraintType.RANGE,h[2],null,LengthConstraintType.FIXED);\n  Size2D size=this.leftBlock.arrange(g2,c3);\n  w[2]=size.width;\n}", 
          "type": "Delete", 
          "seed": "this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4],h[0],w[3],h[3]));"
        }, 
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 445, 
          "faulty": "RectangleConstraint c3=new RectangleConstraint(0.0,new Range(0.0,constraint.getWidth()),LengthConstraintType.RANGE,h[2],null,LengthConstraintType.FIXED);", 
          "type": "Delete", 
          "seed": "if (this.topBlock != null) {\n  this.topBlock.setBounds(new Rectangle2D.Double(0.0,0.0,w[0],h[0]));\n}"
        }, 
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 296, 
          "faulty": "Size2D size=this.leftBlock.arrange(g2,c2);", 
          "type": "InsertBefore", 
          "seed": "double upperBound=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 427, 
          "faulty": "if (this.topBlock != null) {\n  RectangleConstraint c1=new RectangleConstraint(w[0],null,LengthConstraintType.FIXED,0.0,new Range(0.0,constraint.getHeight()),LengthConstraintType.RANGE);\n  Size2D size=this.topBlock.arrange(g2,c1);\n  h[0]=size.height;\n}", 
          "type": "Delete", 
          "seed": "double maxHeight=0.0;"
        }, 
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 436, 
          "faulty": "if (this.bottomBlock != null) {\n  RectangleConstraint c2=new RectangleConstraint(w[0],null,LengthConstraintType.FIXED,0.0,new Range(0.0,constraint.getHeight() - h[0]),LengthConstraintType.RANGE);\n  Size2D size=this.bottomBlock.arrange(g2,c2);\n  h[1]=size.height;\n}", 
          "type": "Delete", 
          "seed": "Size2D size=this.rightBlock.arrange(g2,RectangleConstraint.NONE);"
        }, 
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 152, 
          "faulty": "contentSize=arrangeFF(container,g2,constraint);", 
          "type": "InsertBefore", 
          "seed": "this.leftBlock=null;"
        }, 
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 444, 
          "faulty": "if (this.leftBlock != null) {\n  RectangleConstraint c3=new RectangleConstraint(0.0,new Range(0.0,constraint.getWidth()),LengthConstraintType.RANGE,h[2],null,LengthConstraintType.FIXED);\n  Size2D size=this.leftBlock.arrange(g2,c3);\n  w[2]=size.width;\n}", 
          "type": "Delete", 
          "seed": "Size2D result=new Size2D();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Chart_13/source/org/jfree/chart/block/BorderArrangement.java\t2018-12-02 02:35:20.605941475 -0500\n+++ /tmp/GenProg_Defects4J_Chart_13/patches_7fn9/Patch_290/patched/tmp/GenProg_Defects4J_Chart_13/source/org/jfree/chart/block/BorderArrangement.java\t2018-12-02 02:38:49.510745197 -0500\n@@ -294,7 +294,7 @@\n                 0.0, null, LengthConstraintType.NONE);\n         if (this.leftBlock != null) {\n             Size2D size = this.leftBlock.arrange(g2, c2);\n-            w[2] = size.width;\n+            w[1] = size.width;\n             h[2] = size.height;\n         }\n         if (this.rightBlock != null) {\n@@ -309,8 +309,6 @@\n         }\n \n         h[2] = Math.max(h[2], h[3]);\n-        h[3] = h[2];\n-\n         if (this.centerBlock != null) {\n             RectangleConstraint c4 = new RectangleConstraint(width - w[2]\n                     - w[3], null, LengthConstraintType.FIXED, 0.0, null,\n@@ -441,14 +439,6 @@\n             h[1] = size.height;\n         }\n         h[2] = constraint.getHeight() - h[1] - h[0];\n-        if (this.leftBlock != null) {\n-            RectangleConstraint c3 = new RectangleConstraint(0.0,\n-                    new Range(0.0, constraint.getWidth()),\n-                    LengthConstraintType.RANGE, h[2], null,\n-                    LengthConstraintType.FIXED);\n-            Size2D size = this.leftBlock.arrange(g2, c3);\n-            w[2] = size.width;\n-        }\n         h[3] = h[2];\n         if (this.rightBlock != null) {\n             RectangleConstraint c4 = new RectangleConstraint(0.0,\n\n\n", 
      "edits": [
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 444, 
          "faulty": "if (this.leftBlock != null) {\n  RectangleConstraint c3=new RectangleConstraint(0.0,new Range(0.0,constraint.getWidth()),LengthConstraintType.RANGE,h[2],null,LengthConstraintType.FIXED);\n  Size2D size=this.leftBlock.arrange(g2,c3);\n  w[2]=size.width;\n}", 
          "type": "Delete", 
          "seed": "Size2D size=this.topBlock.arrange(g2,RectangleConstraint.NONE);"
        }, 
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 297, 
          "faulty": "w[2]=size.width;", 
          "type": "Replace", 
          "seed": "w[1]=size.width;"
        }, 
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 312, 
          "faulty": "h[3]=h[2];", 
          "type": "Delete", 
          "seed": "double height=h[0] + h[1] + Math.max(h[2],Math.max(h[3],h[4]));"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Chart_13/source/org/jfree/chart/block/BorderArrangement.java\t2018-12-02 02:35:20.605941475 -0500\n+++ /tmp/GenProg_Defects4J_Chart_13/patches_7fn9/Patch_16/patched/tmp/GenProg_Defects4J_Chart_13/source/org/jfree/chart/block/BorderArrangement.java\t2018-12-02 02:37:27.902431322 -0500\n@@ -441,14 +441,6 @@\n             h[1] = size.height;\n         }\n         h[2] = constraint.getHeight() - h[1] - h[0];\n-        if (this.leftBlock != null) {\n-            RectangleConstraint c3 = new RectangleConstraint(0.0,\n-                    new Range(0.0, constraint.getWidth()),\n-                    LengthConstraintType.RANGE, h[2], null,\n-                    LengthConstraintType.FIXED);\n-            Size2D size = this.leftBlock.arrange(g2, c3);\n-            w[2] = size.width;\n-        }\n         h[3] = h[2];\n         if (this.rightBlock != null) {\n             RectangleConstraint c4 = new RectangleConstraint(0.0,\n\n\n", 
      "edits": [
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 444, 
          "faulty": "if (this.leftBlock != null) {\n  RectangleConstraint c3=new RectangleConstraint(0.0,new Range(0.0,constraint.getWidth()),LengthConstraintType.RANGE,h[2],null,LengthConstraintType.FIXED);\n  Size2D size=this.leftBlock.arrange(g2,c3);\n  w[2]=size.width;\n}", 
          "type": "Delete", 
          "seed": "this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4],h[0],w[3],h[3]));"
        }, 
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 445, 
          "faulty": "RectangleConstraint c3=new RectangleConstraint(0.0,new Range(0.0,constraint.getWidth()),LengthConstraintType.RANGE,h[2],null,LengthConstraintType.FIXED);", 
          "type": "Delete", 
          "seed": "if (this.topBlock != null) {\n  this.topBlock.setBounds(new Rectangle2D.Double(0.0,0.0,w[0],h[0]));\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Chart_13/source/org/jfree/chart/block/BorderArrangement.java\t2018-12-02 02:35:20.605941475 -0500\n+++ /tmp/GenProg_Defects4J_Chart_13/patches_7fn9/Patch_87/patched/tmp/GenProg_Defects4J_Chart_13/source/org/jfree/chart/block/BorderArrangement.java\t2018-12-02 02:37:51.562522335 -0500\n@@ -147,13 +147,18 @@\n         else if (w == LengthConstraintType.FIXED) {\n             if (h == LengthConstraintType.NONE) {\n                 contentSize = arrangeFN(container, g2, constraint.getWidth());\n-            }\n-            else if (h == LengthConstraintType.FIXED) {\n-                contentSize = arrangeFF(container, g2, constraint);\n-            }\n-            else if (h == LengthConstraintType.RANGE) {\n-                contentSize = arrangeFR(container, g2, constraint);\n-            }\n+            } else {\n+\t\t\t\tif (h == LengthConstraintType.FIXED) {\n+\t\t\t\t\treturn arrangeFF(container, g2, constraint);\n+\t\t\t\t} else if (h == LengthConstraintType.RANGE) {\n+\t\t\t\t\treturn arrangeFR(container, g2, constraint);\n+\t\t\t\t}\n+\t\t\t\tif (h == LengthConstraintType.FIXED) {\n+\t\t\t\t\tcontentSize = arrangeFF(container, g2, constraint);\n+\t\t\t\t} else if (h == LengthConstraintType.RANGE) {\n+\t\t\t\t\tcontentSize = arrangeFR(container, g2, constraint);\n+\t\t\t\t}\n+\t\t\t}\n         }\n         else if (w == LengthConstraintType.RANGE) {\n             if (h == LengthConstraintType.NONE) {\n@@ -303,8 +308,15 @@\n                     new Range(Math.min(w[2], maxW), maxW),\n                     LengthConstraintType.RANGE, 0.0, null,\n                     LengthConstraintType.NONE);\n-            Size2D size = this.rightBlock.arrange(g2, c3);\n-            w[3] = size.width;\n+            if (this.centerBlock != null) {\n+\t\t\t\tthis.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0],\n+\t\t\t\t\t\tw[4], h[4]));\n+\t\t\t}\n+\t\t\tSize2D size = this.rightBlock.arrange(g2, c3);\n+            if (this.centerBlock != null) {\n+\t\t\t\tthis.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0],\n+\t\t\t\t\t\tw[4], h[4]));\n+\t\t\t}\n             h[3] = size.height;\n         }\n \n@@ -317,7 +329,8 @@\n                     LengthConstraintType.NONE);\n             Size2D size = this.centerBlock.arrange(g2, c4);\n             w[4] = size.width;\n-            h[4] = size.height;\n+            w[2] = size.width;\n+\t\t\th[4] = size.height;\n         }\n         double height = h[0] + h[1] + Math.max(h[2], Math.max(h[3], h[4]));\n         return arrange(container, g2, new RectangleConstraint(width, height));\n@@ -441,14 +454,6 @@\n             h[1] = size.height;\n         }\n         h[2] = constraint.getHeight() - h[1] - h[0];\n-        if (this.leftBlock != null) {\n-            RectangleConstraint c3 = new RectangleConstraint(0.0,\n-                    new Range(0.0, constraint.getWidth()),\n-                    LengthConstraintType.RANGE, h[2], null,\n-                    LengthConstraintType.FIXED);\n-            Size2D size = this.leftBlock.arrange(g2, c3);\n-            w[2] = size.width;\n-        }\n         h[3] = h[2];\n         if (this.rightBlock != null) {\n             RectangleConstraint c4 = new RectangleConstraint(0.0,\n\n\n", 
      "edits": [
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 444, 
          "faulty": "if (this.leftBlock != null) {\n  RectangleConstraint c3=new RectangleConstraint(0.0,new Range(0.0,constraint.getWidth()),LengthConstraintType.RANGE,h[2],null,LengthConstraintType.FIXED);\n  Size2D size=this.leftBlock.arrange(g2,c3);\n  w[2]=size.width;\n}", 
          "type": "Delete", 
          "seed": "this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4],h[0],w[3],h[3]));"
        }, 
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 320, 
          "faulty": "h[4]=size.height;", 
          "type": "InsertBefore", 
          "seed": "w[2]=size.width;"
        }, 
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 449, 
          "faulty": "Size2D size=this.leftBlock.arrange(g2,c3);", 
          "type": "InsertBefore", 
          "seed": "w[4]=constraint.getWidth() - w[3] - w[2];"
        }, 
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 449, 
          "faulty": "Size2D size=this.leftBlock.arrange(g2,c3);", 
          "type": "InsertBefore", 
          "seed": "w[4]=constraint.getWidth() - w[3] - w[2];"
        }, 
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 307, 
          "faulty": "w[3]=size.width;", 
          "type": "Replace", 
          "seed": "if (this.centerBlock != null) {\n  this.centerBlock.setBounds(new Rectangle2D.Double(w[2],h[0],w[4],h[4]));\n}"
        }, 
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 306, 
          "faulty": "Size2D size=this.rightBlock.arrange(g2,c3);", 
          "type": "InsertBefore", 
          "seed": "if (this.centerBlock != null) {\n  this.centerBlock.setBounds(new Rectangle2D.Double(w[2],h[0],w[4],h[4]));\n}"
        }, 
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 151, 
          "faulty": "if (h == LengthConstraintType.FIXED) {\n  contentSize=arrangeFF(container,g2,constraint);\n}\n else if (h == LengthConstraintType.RANGE) {\n  contentSize=arrangeFR(container,g2,constraint);\n}", 
          "type": "InsertBefore", 
          "seed": "if (h == LengthConstraintType.FIXED) {\n  return arrangeFF(container,g2,constraint);\n}\n else if (h == LengthConstraintType.RANGE) {\n  return arrangeFR(container,g2,constraint);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Chart_13/source/org/jfree/chart/block/BorderArrangement.java\t2018-12-02 02:35:20.605941475 -0500\n+++ /tmp/GenProg_Defects4J_Chart_13/patches_7fn9/Patch_223/patched/tmp/GenProg_Defects4J_Chart_13/source/org/jfree/chart/block/BorderArrangement.java\t2018-12-02 02:38:29.538668393 -0500\n@@ -146,7 +146,26 @@\n         }\n         else if (w == LengthConstraintType.FIXED) {\n             if (h == LengthConstraintType.NONE) {\n-                contentSize = arrangeFN(container, g2, constraint.getWidth());\n+                if (w == LengthConstraintType.FIXED) {\n+\t\t\t\t\tif (h == LengthConstraintType.NONE) {\n+\t\t\t\t\t\tcontentSize = arrangeFN(container, g2,\n+\t\t\t\t\t\t\t\tconstraint.getWidth());\n+\t\t\t\t\t} else if (h == LengthConstraintType.FIXED) {\n+\t\t\t\t\t\tcontentSize = arrangeFF(container, g2, constraint);\n+\t\t\t\t\t} else if (h == LengthConstraintType.RANGE) {\n+\t\t\t\t\t\tcontentSize = arrangeFR(container, g2, constraint);\n+\t\t\t\t\t}\n+\t\t\t\t} else if (w == LengthConstraintType.RANGE) {\n+\t\t\t\t\tif (h == LengthConstraintType.NONE) {\n+\t\t\t\t\t\tthrow new RuntimeException(\"Not implemented.\");\n+\t\t\t\t\t} else if (h == LengthConstraintType.FIXED) {\n+\t\t\t\t\t\tthrow new RuntimeException(\"Not implemented.\");\n+\t\t\t\t\t} else if (h == LengthConstraintType.RANGE) {\n+\t\t\t\t\t\tcontentSize = arrangeRR(container,\n+\t\t\t\t\t\t\t\tconstraint.getWidthRange(),\n+\t\t\t\t\t\t\t\tconstraint.getHeightRange(), g2);\n+\t\t\t\t\t}\n+\t\t\t\t}\n             }\n             else if (h == LengthConstraintType.FIXED) {\n                 contentSize = arrangeFF(container, g2, constraint);\n@@ -289,7 +308,8 @@\n             w[1] = size.width;\n             h[1] = size.height;\n         }\n-        RectangleConstraint c2 = new RectangleConstraint(0.0,\n+        Size2D s1 = arrangeNN(container, g2);\n+\t\tRectangleConstraint c2 = new RectangleConstraint(0.0,\n                 new Range(0.0, width), LengthConstraintType.RANGE,\n                 0.0, null, LengthConstraintType.NONE);\n         if (this.leftBlock != null) {\n@@ -422,8 +442,11 @@\n     protected Size2D arrangeFF(BlockContainer container, Graphics2D g2,\n                                RectangleConstraint constraint) {\n         double[] w = new double[5];\n-        double[] h = new double[5];\n-        w[0] = constraint.getWidth();\n+        EntityBlockParams ebp = null;\n+\t\tdouble[] h = new double[5];\n+        RectangleConstraint c3 = new RectangleConstraint(0.0, new Range(0.0,\n+\t\t\t\tconstraint.getWidth()), LengthConstraintType.RANGE, h[2], null,\n+\t\t\t\tLengthConstraintType.FIXED);\n         if (this.topBlock != null) {\n             RectangleConstraint c1 = new RectangleConstraint(w[0], null,\n                     LengthConstraintType.FIXED, 0.0,\n@@ -441,14 +464,7 @@\n             h[1] = size.height;\n         }\n         h[2] = constraint.getHeight() - h[1] - h[0];\n-        if (this.leftBlock != null) {\n-            RectangleConstraint c3 = new RectangleConstraint(0.0,\n-                    new Range(0.0, constraint.getWidth()),\n-                    LengthConstraintType.RANGE, h[2], null,\n-                    LengthConstraintType.FIXED);\n-            Size2D size = this.leftBlock.arrange(g2, c3);\n-            w[2] = size.width;\n-        }\n+        h[2] = constraint.getHeight() - h[1] - h[0];\n         h[3] = h[2];\n         if (this.rightBlock != null) {\n             RectangleConstraint c4 = new RectangleConstraint(0.0,\n\n\n", 
      "edits": [
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 292, 
          "faulty": "RectangleConstraint c2=new RectangleConstraint(0.0,new Range(0.0,width),LengthConstraintType.RANGE,0.0,null,LengthConstraintType.NONE);", 
          "type": "InsertBefore", 
          "seed": "Size2D s1=arrangeNN(container,g2);"
        }, 
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 444, 
          "faulty": "if (this.leftBlock != null) {\n  RectangleConstraint c3=new RectangleConstraint(0.0,new Range(0.0,constraint.getWidth()),LengthConstraintType.RANGE,h[2],null,LengthConstraintType.FIXED);\n  Size2D size=this.leftBlock.arrange(g2,c3);\n  w[2]=size.width;\n}", 
          "type": "Replace", 
          "seed": "h[2]=constraint.getHeight() - h[1] - h[0];"
        }, 
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 149, 
          "faulty": "contentSize=arrangeFN(container,g2,constraint.getWidth());", 
          "type": "Replace", 
          "seed": "if (w == LengthConstraintType.FIXED) {\n  if (h == LengthConstraintType.NONE) {\n    contentSize=arrangeFN(container,g2,constraint.getWidth());\n  }\n else   if (h == LengthConstraintType.FIXED) {\n    contentSize=arrangeFF(container,g2,constraint);\n  }\n else   if (h == LengthConstraintType.RANGE) {\n    contentSize=arrangeFR(container,g2,constraint);\n  }\n}\n else if (w == LengthConstraintType.RANGE) {\n  if (h == LengthConstraintType.NONE) {\n    throw new RuntimeException(\"Not implemented.\");\n  }\n else   if (h == LengthConstraintType.FIXED) {\n    throw new RuntimeException(\"Not implemented.\");\n  }\n else   if (h == LengthConstraintType.RANGE) {\n    contentSize=arrangeRR(container,constraint.getWidthRange(),constraint.getHeightRange(),g2);\n  }\n}"
        }, 
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 426, 
          "faulty": "w[0]=constraint.getWidth();", 
          "type": "Replace", 
          "seed": "RectangleConstraint c3=new RectangleConstraint(0.0,new Range(0.0,constraint.getWidth()),LengthConstraintType.RANGE,h[2],null,LengthConstraintType.FIXED);"
        }, 
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 425, 
          "faulty": "double[] h=new double[5];", 
          "type": "InsertBefore", 
          "seed": "EntityBlockParams ebp=null;"
        }, 
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 445, 
          "faulty": "RectangleConstraint c3=new RectangleConstraint(0.0,new Range(0.0,constraint.getWidth()),LengthConstraintType.RANGE,h[2],null,LengthConstraintType.FIXED);", 
          "type": "Delete", 
          "seed": "RectangleConstraint c3=new RectangleConstraint(0.0,new Range(0.0,constraint.getWidth()),LengthConstraintType.RANGE,h[2],null,LengthConstraintType.FIXED);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Chart_13/source/org/jfree/chart/block/BorderArrangement.java\t2018-12-02 02:35:20.605941475 -0500\n+++ /tmp/GenProg_Defects4J_Chart_13/patches_7fn9/Patch_219/patched/tmp/GenProg_Defects4J_Chart_13/source/org/jfree/chart/block/BorderArrangement.java\t2018-12-02 02:38:28.378663932 -0500\n@@ -146,7 +146,26 @@\n         }\n         else if (w == LengthConstraintType.FIXED) {\n             if (h == LengthConstraintType.NONE) {\n-                contentSize = arrangeFN(container, g2, constraint.getWidth());\n+                if (w == LengthConstraintType.FIXED) {\n+\t\t\t\t\tif (h == LengthConstraintType.NONE) {\n+\t\t\t\t\t\tcontentSize = arrangeFN(container, g2,\n+\t\t\t\t\t\t\t\tconstraint.getWidth());\n+\t\t\t\t\t} else if (h == LengthConstraintType.FIXED) {\n+\t\t\t\t\t\tcontentSize = arrangeFF(container, g2, constraint);\n+\t\t\t\t\t} else if (h == LengthConstraintType.RANGE) {\n+\t\t\t\t\t\tcontentSize = arrangeFR(container, g2, constraint);\n+\t\t\t\t\t}\n+\t\t\t\t} else if (w == LengthConstraintType.RANGE) {\n+\t\t\t\t\tif (h == LengthConstraintType.NONE) {\n+\t\t\t\t\t\tthrow new RuntimeException(\"Not implemented.\");\n+\t\t\t\t\t} else if (h == LengthConstraintType.FIXED) {\n+\t\t\t\t\t\tthrow new RuntimeException(\"Not implemented.\");\n+\t\t\t\t\t} else if (h == LengthConstraintType.RANGE) {\n+\t\t\t\t\t\tcontentSize = arrangeRR(container,\n+\t\t\t\t\t\t\t\tconstraint.getWidthRange(),\n+\t\t\t\t\t\t\t\tconstraint.getHeightRange(), g2);\n+\t\t\t\t\t}\n+\t\t\t\t}\n             }\n             else if (h == LengthConstraintType.FIXED) {\n                 contentSize = arrangeFF(container, g2, constraint);\n@@ -289,7 +308,8 @@\n             w[1] = size.width;\n             h[1] = size.height;\n         }\n-        RectangleConstraint c2 = new RectangleConstraint(0.0,\n+        Size2D s1 = arrangeNN(container, g2);\n+\t\tRectangleConstraint c2 = new RectangleConstraint(0.0,\n                 new Range(0.0, width), LengthConstraintType.RANGE,\n                 0.0, null, LengthConstraintType.NONE);\n         if (this.leftBlock != null) {\n@@ -432,7 +452,10 @@\n             Size2D size = this.topBlock.arrange(g2, c1);\n             h[0] = size.height;\n         }\n-        w[1] = w[0];\n+        RectangleConstraint c3 = new RectangleConstraint(0.0, new Range(0.0,\n+\t\t\t\tconstraint.getWidth()), LengthConstraintType.RANGE, h[2], null,\n+\t\t\t\tLengthConstraintType.FIXED);\n+\t\tw[1] = w[0];\n         if (this.bottomBlock != null) {\n             RectangleConstraint c2 = new RectangleConstraint(w[0], null,\n                     LengthConstraintType.FIXED, 0.0, new Range(0.0,\n@@ -441,14 +464,6 @@\n             h[1] = size.height;\n         }\n         h[2] = constraint.getHeight() - h[1] - h[0];\n-        if (this.leftBlock != null) {\n-            RectangleConstraint c3 = new RectangleConstraint(0.0,\n-                    new Range(0.0, constraint.getWidth()),\n-                    LengthConstraintType.RANGE, h[2], null,\n-                    LengthConstraintType.FIXED);\n-            Size2D size = this.leftBlock.arrange(g2, c3);\n-            w[2] = size.width;\n-        }\n         h[3] = h[2];\n         if (this.rightBlock != null) {\n             RectangleConstraint c4 = new RectangleConstraint(0.0,\n\n\n", 
      "edits": [
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 292, 
          "faulty": "RectangleConstraint c2=new RectangleConstraint(0.0,new Range(0.0,width),LengthConstraintType.RANGE,0.0,null,LengthConstraintType.NONE);", 
          "type": "InsertBefore", 
          "seed": "Size2D s1=arrangeNN(container,g2);"
        }, 
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 444, 
          "faulty": "if (this.leftBlock != null) {\n  RectangleConstraint c3=new RectangleConstraint(0.0,new Range(0.0,constraint.getWidth()),LengthConstraintType.RANGE,h[2],null,LengthConstraintType.FIXED);\n  Size2D size=this.leftBlock.arrange(g2,c3);\n  w[2]=size.width;\n}", 
          "type": "Replace", 
          "seed": "h[2]=constraint.getHeight() - h[1] - h[0];"
        }, 
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 443, 
          "faulty": "h[2]=constraint.getHeight() - h[1] - h[0];", 
          "type": "Delete", 
          "seed": "RectangleConstraint contentConstraint=container.toContentConstraint(constraint);"
        }, 
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 149, 
          "faulty": "contentSize=arrangeFN(container,g2,constraint.getWidth());", 
          "type": "Replace", 
          "seed": "if (w == LengthConstraintType.FIXED) {\n  if (h == LengthConstraintType.NONE) {\n    contentSize=arrangeFN(container,g2,constraint.getWidth());\n  }\n else   if (h == LengthConstraintType.FIXED) {\n    contentSize=arrangeFF(container,g2,constraint);\n  }\n else   if (h == LengthConstraintType.RANGE) {\n    contentSize=arrangeFR(container,g2,constraint);\n  }\n}\n else if (w == LengthConstraintType.RANGE) {\n  if (h == LengthConstraintType.NONE) {\n    throw new RuntimeException(\"Not implemented.\");\n  }\n else   if (h == LengthConstraintType.FIXED) {\n    throw new RuntimeException(\"Not implemented.\");\n  }\n else   if (h == LengthConstraintType.RANGE) {\n    contentSize=arrangeRR(container,constraint.getWidthRange(),constraint.getHeightRange(),g2);\n  }\n}"
        }, 
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 435, 
          "faulty": "w[1]=w[0];", 
          "type": "InsertBefore", 
          "seed": "RectangleConstraint c3=new RectangleConstraint(0.0,new Range(0.0,constraint.getWidth()),LengthConstraintType.RANGE,h[2],null,LengthConstraintType.FIXED);"
        }, 
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 449, 
          "faulty": "Size2D size=this.leftBlock.arrange(g2,c3);", 
          "type": "Replace", 
          "seed": "StandardEntityCollection sec=null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Chart_13/source/org/jfree/chart/block/BorderArrangement.java\t2018-12-02 02:35:20.605941475 -0500\n+++ /tmp/GenProg_Defects4J_Chart_13/patches_7fn9/Patch_369/patched/tmp/GenProg_Defects4J_Chart_13/source/org/jfree/chart/block/BorderArrangement.java\t2018-12-02 02:39:12.278832744 -0500\n@@ -309,7 +309,8 @@\n         }\n \n         h[2] = Math.max(h[2], h[3]);\n-        h[3] = h[2];\n+        Size2D contentSize = null;\n+\t\th[3] = h[2];\n \n         if (this.centerBlock != null) {\n             RectangleConstraint c4 = new RectangleConstraint(width - w[2]\n@@ -441,14 +442,6 @@\n             h[1] = size.height;\n         }\n         h[2] = constraint.getHeight() - h[1] - h[0];\n-        if (this.leftBlock != null) {\n-            RectangleConstraint c3 = new RectangleConstraint(0.0,\n-                    new Range(0.0, constraint.getWidth()),\n-                    LengthConstraintType.RANGE, h[2], null,\n-                    LengthConstraintType.FIXED);\n-            Size2D size = this.leftBlock.arrange(g2, c3);\n-            w[2] = size.width;\n-        }\n         h[3] = h[2];\n         if (this.rightBlock != null) {\n             RectangleConstraint c4 = new RectangleConstraint(0.0,\n\n\n", 
      "edits": [
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 312, 
          "faulty": "h[3]=h[2];", 
          "type": "InsertBefore", 
          "seed": "Size2D contentSize=null;"
        }, 
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 444, 
          "faulty": "if (this.leftBlock != null) {\n  RectangleConstraint c3=new RectangleConstraint(0.0,new Range(0.0,constraint.getWidth()),LengthConstraintType.RANGE,h[2],null,LengthConstraintType.FIXED);\n  Size2D size=this.leftBlock.arrange(g2,c3);\n  w[2]=size.width;\n}", 
          "type": "Delete", 
          "seed": "return arrange(g2,RectangleConstraint.NONE);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Chart_13/source/org/jfree/chart/block/BorderArrangement.java\t2018-12-02 02:35:20.605941475 -0500\n+++ /tmp/GenProg_Defects4J_Chart_13/patches_7fn9/Patch_310/patched/tmp/GenProg_Defects4J_Chart_13/source/org/jfree/chart/block/BorderArrangement.java\t2018-12-02 02:38:55.534768361 -0500\n@@ -149,7 +149,8 @@\n                 contentSize = arrangeFN(container, g2, constraint.getWidth());\n             }\n             else if (h == LengthConstraintType.FIXED) {\n-                contentSize = arrangeFF(container, g2, constraint);\n+                double maxW = 0.0;\n+\t\t\t\tcontentSize = arrangeFF(container, g2, constraint);\n             }\n             else if (h == LengthConstraintType.RANGE) {\n                 contentSize = arrangeFR(container, g2, constraint);\n@@ -424,14 +425,6 @@\n         double[] w = new double[5];\n         double[] h = new double[5];\n         w[0] = constraint.getWidth();\n-        if (this.topBlock != null) {\n-            RectangleConstraint c1 = new RectangleConstraint(w[0], null,\n-                    LengthConstraintType.FIXED, 0.0,\n-                    new Range(0.0, constraint.getHeight()),\n-                    LengthConstraintType.RANGE);\n-            Size2D size = this.topBlock.arrange(g2, c1);\n-            h[0] = size.height;\n-        }\n         w[1] = w[0];\n         if (this.bottomBlock != null) {\n             RectangleConstraint c2 = new RectangleConstraint(w[0], null,\n@@ -441,14 +434,6 @@\n             h[1] = size.height;\n         }\n         h[2] = constraint.getHeight() - h[1] - h[0];\n-        if (this.leftBlock != null) {\n-            RectangleConstraint c3 = new RectangleConstraint(0.0,\n-                    new Range(0.0, constraint.getWidth()),\n-                    LengthConstraintType.RANGE, h[2], null,\n-                    LengthConstraintType.FIXED);\n-            Size2D size = this.leftBlock.arrange(g2, c3);\n-            w[2] = size.width;\n-        }\n         h[3] = h[2];\n         if (this.rightBlock != null) {\n             RectangleConstraint c4 = new RectangleConstraint(0.0,\n\n\n", 
      "edits": [
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 444, 
          "faulty": "if (this.leftBlock != null) {\n  RectangleConstraint c3=new RectangleConstraint(0.0,new Range(0.0,constraint.getWidth()),LengthConstraintType.RANGE,h[2],null,LengthConstraintType.FIXED);\n  Size2D size=this.leftBlock.arrange(g2,c3);\n  w[2]=size.width;\n}", 
          "type": "Delete", 
          "seed": "Size2D size=this.topBlock.arrange(g2,RectangleConstraint.NONE);"
        }, 
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 427, 
          "faulty": "if (this.topBlock != null) {\n  RectangleConstraint c1=new RectangleConstraint(w[0],null,LengthConstraintType.FIXED,0.0,new Range(0.0,constraint.getHeight()),LengthConstraintType.RANGE);\n  Size2D size=this.topBlock.arrange(g2,c1);\n  h[0]=size.height;\n}", 
          "type": "Delete", 
          "seed": "LengthConstraintType h=constraint.getHeightConstraintType();"
        }, 
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 152, 
          "faulty": "contentSize=arrangeFF(container,g2,constraint);", 
          "type": "InsertBefore", 
          "seed": "double maxW=0.0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Chart_13/source/org/jfree/chart/block/BorderArrangement.java\t2018-12-02 02:35:20.605941475 -0500\n+++ /tmp/GenProg_Defects4J_Chart_13/patches_7fn9/Patch_189/patched/tmp/GenProg_Defects4J_Chart_13/source/org/jfree/chart/block/BorderArrangement.java\t2018-12-02 02:38:21.402637104 -0500\n@@ -289,7 +289,8 @@\n             w[1] = size.width;\n             h[1] = size.height;\n         }\n-        RectangleConstraint c2 = new RectangleConstraint(0.0,\n+        Size2D s1 = arrangeNN(container, g2);\n+\t\tRectangleConstraint c2 = new RectangleConstraint(0.0,\n                 new Range(0.0, width), LengthConstraintType.RANGE,\n                 0.0, null, LengthConstraintType.NONE);\n         if (this.leftBlock != null) {\n@@ -441,14 +442,7 @@\n             h[1] = size.height;\n         }\n         h[2] = constraint.getHeight() - h[1] - h[0];\n-        if (this.leftBlock != null) {\n-            RectangleConstraint c3 = new RectangleConstraint(0.0,\n-                    new Range(0.0, constraint.getWidth()),\n-                    LengthConstraintType.RANGE, h[2], null,\n-                    LengthConstraintType.FIXED);\n-            Size2D size = this.leftBlock.arrange(g2, c3);\n-            w[2] = size.width;\n-        }\n+        h[2] = constraint.getHeight() - h[1] - h[0];\n         h[3] = h[2];\n         if (this.rightBlock != null) {\n             RectangleConstraint c4 = new RectangleConstraint(0.0,\n\n\n", 
      "edits": [
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 292, 
          "faulty": "RectangleConstraint c2=new RectangleConstraint(0.0,new Range(0.0,width),LengthConstraintType.RANGE,0.0,null,LengthConstraintType.NONE);", 
          "type": "InsertBefore", 
          "seed": "Size2D s1=arrangeNN(container,g2);"
        }, 
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 444, 
          "faulty": "if (this.leftBlock != null) {\n  RectangleConstraint c3=new RectangleConstraint(0.0,new Range(0.0,constraint.getWidth()),LengthConstraintType.RANGE,h[2],null,LengthConstraintType.FIXED);\n  Size2D size=this.leftBlock.arrange(g2,c3);\n  w[2]=size.width;\n}", 
          "type": "Replace", 
          "seed": "h[2]=constraint.getHeight() - h[1] - h[0];"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Chart_13/source/org/jfree/chart/block/BorderArrangement.java\t2018-12-02 02:35:20.605941475 -0500\n+++ /tmp/GenProg_Defects4J_Chart_13/patches_7fn9/Patch_51/patched/tmp/GenProg_Defects4J_Chart_13/source/org/jfree/chart/block/BorderArrangement.java\t2018-12-02 02:37:39.974477760 -0500\n@@ -304,7 +304,10 @@\n                     LengthConstraintType.RANGE, 0.0, null,\n                     LengthConstraintType.NONE);\n             Size2D size = this.rightBlock.arrange(g2, c3);\n-            w[3] = size.width;\n+            if (this.centerBlock != null) {\n+\t\t\t\tthis.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0],\n+\t\t\t\t\t\tw[4], h[4]));\n+\t\t\t}\n             h[3] = size.height;\n         }\n \n@@ -317,7 +320,8 @@\n                     LengthConstraintType.NONE);\n             Size2D size = this.centerBlock.arrange(g2, c4);\n             w[4] = size.width;\n-            h[4] = size.height;\n+            w[2] = size.width;\n+\t\t\th[4] = size.height;\n         }\n         double height = h[0] + h[1] + Math.max(h[2], Math.max(h[3], h[4]));\n         return arrange(container, g2, new RectangleConstraint(width, height));\n@@ -441,14 +445,6 @@\n             h[1] = size.height;\n         }\n         h[2] = constraint.getHeight() - h[1] - h[0];\n-        if (this.leftBlock != null) {\n-            RectangleConstraint c3 = new RectangleConstraint(0.0,\n-                    new Range(0.0, constraint.getWidth()),\n-                    LengthConstraintType.RANGE, h[2], null,\n-                    LengthConstraintType.FIXED);\n-            Size2D size = this.leftBlock.arrange(g2, c3);\n-            w[2] = size.width;\n-        }\n         h[3] = h[2];\n         if (this.rightBlock != null) {\n             RectangleConstraint c4 = new RectangleConstraint(0.0,\n\n\n", 
      "edits": [
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 444, 
          "faulty": "if (this.leftBlock != null) {\n  RectangleConstraint c3=new RectangleConstraint(0.0,new Range(0.0,constraint.getWidth()),LengthConstraintType.RANGE,h[2],null,LengthConstraintType.FIXED);\n  Size2D size=this.leftBlock.arrange(g2,c3);\n  w[2]=size.width;\n}", 
          "type": "Delete", 
          "seed": "this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4],h[0],w[3],h[3]));"
        }, 
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 320, 
          "faulty": "h[4]=size.height;", 
          "type": "InsertBefore", 
          "seed": "w[2]=size.width;"
        }, 
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 449, 
          "faulty": "Size2D size=this.leftBlock.arrange(g2,c3);", 
          "type": "InsertBefore", 
          "seed": "w[4]=constraint.getWidth() - w[3] - w[2];"
        }, 
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 307, 
          "faulty": "w[3]=size.width;", 
          "type": "Replace", 
          "seed": "if (this.centerBlock != null) {\n  this.centerBlock.setBounds(new Rectangle2D.Double(w[2],h[0],w[4],h[4]));\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Chart_13/source/org/jfree/chart/block/BorderArrangement.java\t2018-12-02 02:35:20.605941475 -0500\n+++ /tmp/GenProg_Defects4J_Chart_13/patches_7fn9/Patch_73/patched/tmp/GenProg_Defects4J_Chart_13/source/org/jfree/chart/block/BorderArrangement.java\t2018-12-02 02:37:47.822507948 -0500\n@@ -303,13 +303,21 @@\n                     new Range(Math.min(w[2], maxW), maxW),\n                     LengthConstraintType.RANGE, 0.0, null,\n                     LengthConstraintType.NONE);\n-            Size2D size = this.rightBlock.arrange(g2, c3);\n-            w[3] = size.width;\n+            if (this.centerBlock != null) {\n+\t\t\t\tthis.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0],\n+\t\t\t\t\t\tw[4], h[4]));\n+\t\t\t}\n+\t\t\tSize2D size = this.rightBlock.arrange(g2, c3);\n+            if (this.centerBlock != null) {\n+\t\t\t\tthis.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0],\n+\t\t\t\t\t\tw[4], h[4]));\n+\t\t\t}\n             h[3] = size.height;\n         }\n \n         h[2] = Math.max(h[2], h[3]);\n-        h[3] = h[2];\n+        this.rightBlock = null;\n+\t\th[3] = h[2];\n \n         if (this.centerBlock != null) {\n             RectangleConstraint c4 = new RectangleConstraint(width - w[2]\n@@ -317,7 +325,8 @@\n                     LengthConstraintType.NONE);\n             Size2D size = this.centerBlock.arrange(g2, c4);\n             w[4] = size.width;\n-            h[4] = size.height;\n+            w[2] = size.width;\n+\t\t\th[4] = size.height;\n         }\n         double height = h[0] + h[1] + Math.max(h[2], Math.max(h[3], h[4]));\n         return arrange(container, g2, new RectangleConstraint(width, height));\n@@ -441,14 +450,6 @@\n             h[1] = size.height;\n         }\n         h[2] = constraint.getHeight() - h[1] - h[0];\n-        if (this.leftBlock != null) {\n-            RectangleConstraint c3 = new RectangleConstraint(0.0,\n-                    new Range(0.0, constraint.getWidth()),\n-                    LengthConstraintType.RANGE, h[2], null,\n-                    LengthConstraintType.FIXED);\n-            Size2D size = this.leftBlock.arrange(g2, c3);\n-            w[2] = size.width;\n-        }\n         h[3] = h[2];\n         if (this.rightBlock != null) {\n             RectangleConstraint c4 = new RectangleConstraint(0.0,\n\n\n", 
      "edits": [
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 444, 
          "faulty": "if (this.leftBlock != null) {\n  RectangleConstraint c3=new RectangleConstraint(0.0,new Range(0.0,constraint.getWidth()),LengthConstraintType.RANGE,h[2],null,LengthConstraintType.FIXED);\n  Size2D size=this.leftBlock.arrange(g2,c3);\n  w[2]=size.width;\n}", 
          "type": "Delete", 
          "seed": "this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4],h[0],w[3],h[3]));"
        }, 
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 320, 
          "faulty": "h[4]=size.height;", 
          "type": "InsertBefore", 
          "seed": "w[2]=size.width;"
        }, 
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 307, 
          "faulty": "w[3]=size.width;", 
          "type": "Replace", 
          "seed": "if (this.centerBlock != null) {\n  this.centerBlock.setBounds(new Rectangle2D.Double(w[2],h[0],w[4],h[4]));\n}"
        }, 
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 306, 
          "faulty": "Size2D size=this.rightBlock.arrange(g2,c3);", 
          "type": "InsertBefore", 
          "seed": "if (this.centerBlock != null) {\n  this.centerBlock.setBounds(new Rectangle2D.Double(w[2],h[0],w[4],h[4]));\n}"
        }, 
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 312, 
          "faulty": "h[3]=h[2];", 
          "type": "InsertBefore", 
          "seed": "this.rightBlock=null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Chart_13/source/org/jfree/chart/block/BorderArrangement.java\t2018-12-02 02:35:20.605941475 -0500\n+++ /tmp/GenProg_Defects4J_Chart_13/patches_7fn9/Patch_321/patched/tmp/GenProg_Defects4J_Chart_13/source/org/jfree/chart/block/BorderArrangement.java\t2018-12-02 02:38:57.774776975 -0500\n@@ -274,7 +274,8 @@\n      */\n     protected Size2D arrangeFN(BlockContainer container, Graphics2D g2,\n                                double width) {\n-        double[] w = new double[5];\n+        double upperBound = Double.POSITIVE_INFINITY;\n+\t\tdouble[] w = new double[5];\n         double[] h = new double[5];\n         RectangleConstraint c1 = new RectangleConstraint(width, null,\n                 LengthConstraintType.FIXED, 0.0, null,\n@@ -295,7 +296,11 @@\n         if (this.leftBlock != null) {\n             Size2D size = this.leftBlock.arrange(g2, c2);\n             w[2] = size.width;\n-            h[2] = size.height;\n+            if (this.leftBlock != null) {\n+\t\t\t\tthis.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0],\n+\t\t\t\t\t\tw[2], h[2]));\n+\t\t\t}\n+\t\t\th[2] = size.height;\n         }\n         if (this.rightBlock != null) {\n             double maxW = Math.max(width - w[2], 0.0);\n@@ -424,31 +429,9 @@\n         double[] w = new double[5];\n         double[] h = new double[5];\n         w[0] = constraint.getWidth();\n-        if (this.topBlock != null) {\n-            RectangleConstraint c1 = new RectangleConstraint(w[0], null,\n-                    LengthConstraintType.FIXED, 0.0,\n-                    new Range(0.0, constraint.getHeight()),\n-                    LengthConstraintType.RANGE);\n-            Size2D size = this.topBlock.arrange(g2, c1);\n-            h[0] = size.height;\n-        }\n         w[1] = w[0];\n-        if (this.bottomBlock != null) {\n-            RectangleConstraint c2 = new RectangleConstraint(w[0], null,\n-                    LengthConstraintType.FIXED, 0.0, new Range(0.0,\n-                    constraint.getHeight() - h[0]), LengthConstraintType.RANGE);\n-            Size2D size = this.bottomBlock.arrange(g2, c2);\n-            h[1] = size.height;\n-        }\n+        Size2D result = new Size2D();\n         h[2] = constraint.getHeight() - h[1] - h[0];\n-        if (this.leftBlock != null) {\n-            RectangleConstraint c3 = new RectangleConstraint(0.0,\n-                    new Range(0.0, constraint.getWidth()),\n-                    LengthConstraintType.RANGE, h[2], null,\n-                    LengthConstraintType.FIXED);\n-            Size2D size = this.leftBlock.arrange(g2, c3);\n-            w[2] = size.width;\n-        }\n         h[3] = h[2];\n         if (this.rightBlock != null) {\n             RectangleConstraint c4 = new RectangleConstraint(0.0,\n\n\n", 
      "edits": [
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 444, 
          "faulty": "if (this.leftBlock != null) {\n  RectangleConstraint c3=new RectangleConstraint(0.0,new Range(0.0,constraint.getWidth()),LengthConstraintType.RANGE,h[2],null,LengthConstraintType.FIXED);\n  Size2D size=this.leftBlock.arrange(g2,c3);\n  w[2]=size.width;\n}", 
          "type": "Delete", 
          "seed": "Size2D size=this.topBlock.arrange(g2,RectangleConstraint.NONE);"
        }, 
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 444, 
          "faulty": "if (this.leftBlock != null) {\n  RectangleConstraint c3=new RectangleConstraint(0.0,new Range(0.0,constraint.getWidth()),LengthConstraintType.RANGE,h[2],null,LengthConstraintType.FIXED);\n  Size2D size=this.leftBlock.arrange(g2,c3);\n  w[2]=size.width;\n}", 
          "type": "Delete", 
          "seed": "Size2D size=this.topBlock.arrange(g2,RectangleConstraint.NONE);"
        }, 
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 427, 
          "faulty": "if (this.topBlock != null) {\n  RectangleConstraint c1=new RectangleConstraint(w[0],null,LengthConstraintType.FIXED,0.0,new Range(0.0,constraint.getHeight()),LengthConstraintType.RANGE);\n  Size2D size=this.topBlock.arrange(g2,c1);\n  h[0]=size.height;\n}", 
          "type": "Delete", 
          "seed": "LengthConstraintType h=constraint.getHeightConstraintType();"
        }, 
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 298, 
          "faulty": "h[2]=size.height;", 
          "type": "InsertBefore", 
          "seed": "if (this.leftBlock != null) {\n  this.leftBlock.setBounds(new Rectangle2D.Double(0.0,h[0],w[2],h[2]));\n}"
        }, 
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 436, 
          "faulty": "if (this.bottomBlock != null) {\n  RectangleConstraint c2=new RectangleConstraint(w[0],null,LengthConstraintType.FIXED,0.0,new Range(0.0,constraint.getHeight() - h[0]),LengthConstraintType.RANGE);\n  Size2D size=this.bottomBlock.arrange(g2,c2);\n  h[1]=size.height;\n}", 
          "type": "Replace", 
          "seed": "Size2D result=new Size2D();"
        }, 
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 277, 
          "faulty": "double[] w=new double[5];", 
          "type": "InsertBefore", 
          "seed": "double upperBound=Double.POSITIVE_INFINITY;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Chart_13/source/org/jfree/chart/block/BorderArrangement.java\t2018-12-02 02:35:20.605941475 -0500\n+++ /tmp/GenProg_Defects4J_Chart_13/patches_7fn9/Patch_314/patched/tmp/GenProg_Defects4J_Chart_13/source/org/jfree/chart/block/BorderArrangement.java\t2018-12-02 02:38:56.058770376 -0500\n@@ -424,15 +424,9 @@\n         double[] w = new double[5];\n         double[] h = new double[5];\n         w[0] = constraint.getWidth();\n-        if (this.topBlock != null) {\n-            RectangleConstraint c1 = new RectangleConstraint(w[0], null,\n-                    LengthConstraintType.FIXED, 0.0,\n-                    new Range(0.0, constraint.getHeight()),\n-                    LengthConstraintType.RANGE);\n-            Size2D size = this.topBlock.arrange(g2, c1);\n-            h[0] = size.height;\n-        }\n-        w[1] = w[0];\n+        RectangleConstraint contentConstraint = container\n+\t\t\t\t.toContentConstraint(constraint);\n+\t\tw[1] = w[0];\n         if (this.bottomBlock != null) {\n             RectangleConstraint c2 = new RectangleConstraint(w[0], null,\n                     LengthConstraintType.FIXED, 0.0, new Range(0.0,\n@@ -441,14 +435,6 @@\n             h[1] = size.height;\n         }\n         h[2] = constraint.getHeight() - h[1] - h[0];\n-        if (this.leftBlock != null) {\n-            RectangleConstraint c3 = new RectangleConstraint(0.0,\n-                    new Range(0.0, constraint.getWidth()),\n-                    LengthConstraintType.RANGE, h[2], null,\n-                    LengthConstraintType.FIXED);\n-            Size2D size = this.leftBlock.arrange(g2, c3);\n-            w[2] = size.width;\n-        }\n         h[3] = h[2];\n         if (this.rightBlock != null) {\n             RectangleConstraint c4 = new RectangleConstraint(0.0,\n\n\n", 
      "edits": [
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 444, 
          "faulty": "if (this.leftBlock != null) {\n  RectangleConstraint c3=new RectangleConstraint(0.0,new Range(0.0,constraint.getWidth()),LengthConstraintType.RANGE,h[2],null,LengthConstraintType.FIXED);\n  Size2D size=this.leftBlock.arrange(g2,c3);\n  w[2]=size.width;\n}", 
          "type": "Delete", 
          "seed": "Size2D size=this.topBlock.arrange(g2,RectangleConstraint.NONE);"
        }, 
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 427, 
          "faulty": "if (this.topBlock != null) {\n  RectangleConstraint c1=new RectangleConstraint(w[0],null,LengthConstraintType.FIXED,0.0,new Range(0.0,constraint.getHeight()),LengthConstraintType.RANGE);\n  Size2D size=this.topBlock.arrange(g2,c1);\n  h[0]=size.height;\n}", 
          "type": "Delete", 
          "seed": "LengthConstraintType h=constraint.getHeightConstraintType();"
        }, 
        {
          "path": "source/org/jfree/chart/block/BorderArrangement.java", 
          "line": 435, 
          "faulty": "w[1]=w[0];", 
          "type": "InsertBefore", 
          "seed": "RectangleConstraint contentConstraint=container.toContentConstraint(constraint);"
        }
      ]
    }
  ]
}