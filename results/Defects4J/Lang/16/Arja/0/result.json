{
  "repair_end": "2018-12-01 11:22:31.432533", 
  "repair_begin": "2018-12-01 11:13:48.198411", 
  "patches": [
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 545, 
          "faulty": "throw new NumberFormatException(str + \" is not a valid number.\");", 
          "type": "Replace", 
          "seed": "return Integer.decode(str);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 480, 
          "faulty": "if (expPos > -1) {\n  if (expPos > str.length()) {\n    throw new NumberFormatException(str + \" is not a valid number.\");\n  }\n  mant=str.substring(0,expPos);\n}\n else {\n  mant=str;\n}", 
          "type": "InsertBefore", 
          "seed": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n  return createInteger(str);\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:13:40.712736534 -0500\n+++ /tmp/Arja_Defects4J_Lang_16/patches_of36/Patch_1215/patched/tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:20:31.303605453 -0500\n@@ -477,7 +477,10 @@\n             }\n             mant = str.substring(0, decPos);\n         } else {\n-            if (expPos > -1) {\n+            if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n+\t\t\t\treturn createInteger(str);\n+\t\t\t}\n+\t\t\tif (expPos > -1) {\n                 if (expPos > str.length()) {\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n                 }\n@@ -542,7 +545,7 @@\n                     }\n                     //$FALL-THROUGH$\n                 default :\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t\treturn Integer.decode(str);\n \n             }\n         } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 545, 
          "faulty": "throw new NumberFormatException(str + \" is not a valid number.\");", 
          "type": "Replace", 
          "seed": "return Integer.decode(str);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 480, 
          "faulty": "if (expPos > -1) {\n  if (expPos > str.length()) {\n    throw new NumberFormatException(str + \" is not a valid number.\");\n  }\n  mant=str.substring(0,expPos);\n}\n else {\n  mant=str;\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > -1 && expPos < str.length() - 1) {\n  exp=str.substring(expPos + 1,str.length());\n}\n else {\n  exp=null;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:13:40.712736534 -0500\n+++ /tmp/Arja_Defects4J_Lang_16/patches_of36/Patch_557/patched/tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:17:29.468104491 -0500\n@@ -477,7 +477,12 @@\n             }\n             mant = str.substring(0, decPos);\n         } else {\n-            if (expPos > -1) {\n+            if (expPos > -1 && expPos < str.length() - 1) {\n+\t\t\t\texp = str.substring(expPos + 1, str.length());\n+\t\t\t} else {\n+\t\t\t\texp = null;\n+\t\t\t}\n+\t\t\tif (expPos > -1) {\n                 if (expPos > str.length()) {\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n                 }\n@@ -542,7 +547,7 @@\n                     }\n                     //$FALL-THROUGH$\n                 default :\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t\treturn Integer.decode(str);\n \n             }\n         } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 545, 
          "faulty": "throw new NumberFormatException(str + \" is not a valid number.\");", 
          "type": "Replace", 
          "seed": "return Integer.decode(str);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 461, 
          "faulty": "char lastChar=str.charAt(str.length() - 1);", 
          "type": "InsertBefore", 
          "seed": "if (str == null) {\n  return null;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:13:40.712736534 -0500\n+++ /tmp/Arja_Defects4J_Lang_16/patches_of36/Patch_1102/patched/tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:20:02.219685084 -0500\n@@ -458,7 +458,10 @@\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n             return createInteger(str);\n         }   \n-        char lastChar = str.charAt(str.length() - 1);\n+        if (str == null) {\n+\t\t\treturn null;\n+\t\t}\n+\t\tchar lastChar = str.charAt(str.length() - 1);\n         String mant;\n         String dec;\n         String exp;\n@@ -542,7 +545,7 @@\n                     }\n                     //$FALL-THROUGH$\n                 default :\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t\treturn Integer.decode(str);\n \n             }\n         } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 545, 
          "faulty": "throw new NumberFormatException(str + \" is not a valid number.\");", 
          "type": "Replace", 
          "seed": "return Integer.decode(str);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 468, 
          "faulty": "if (decPos > -1) {\n  if (expPos > -1) {\n    if (expPos < decPos || expPos > str.length()) {\n      throw new NumberFormatException(str + \" is not a valid number.\");\n    }\n    dec=str.substring(decPos + 1,expPos);\n  }\n else {\n    dec=str.substring(decPos + 1);\n  }\n  mant=str.substring(0,decPos);\n}\n else {\n  if (expPos > -1) {\n    if (expPos > str.length()) {\n      throw new NumberFormatException(str + \" is not a valid number.\");\n    }\n    mant=str.substring(0,expPos);\n  }\n else {\n    mant=str;\n  }\n  dec=null;\n}", 
          "type": "InsertBefore", 
          "seed": "if (str == null) {\n  throw new IllegalArgumentException(\"The string must not be null\");\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:13:40.712736534 -0500\n+++ /tmp/Arja_Defects4J_Lang_16/patches_of36/Patch_1617/patched/tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:22:22.239302341 -0500\n@@ -465,7 +465,10 @@\n         int decPos = str.indexOf('.');\n         int expPos = str.indexOf('e') + str.indexOf('E') + 1;\n \n-        if (decPos > -1) {\n+        if (str == null) {\n+\t\t\tthrow new IllegalArgumentException(\"The string must not be null\");\n+\t\t}\n+\t\tif (decPos > -1) {\n \n             if (expPos > -1) {\n                 if (expPos < decPos || expPos > str.length()) {\n@@ -542,7 +545,7 @@\n                     }\n                     //$FALL-THROUGH$\n                 default :\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t\treturn Integer.decode(str);\n \n             }\n         } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 575, 
          "faulty": "if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n  return f;\n}", 
          "type": "InsertBefore", 
          "seed": "if (str == null) {\n  return null;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 545, 
          "faulty": "throw new NumberFormatException(str + \" is not a valid number.\");", 
          "type": "Replace", 
          "seed": "return Integer.decode(str);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:13:40.712736534 -0500\n+++ /tmp/Arja_Defects4J_Lang_16/patches_of36/Patch_1037/patched/tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:19:39.647746934 -0500\n@@ -542,7 +542,7 @@\n                     }\n                     //$FALL-THROUGH$\n                 default :\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t\treturn Integer.decode(str);\n \n             }\n         } else {\n@@ -572,7 +572,10 @@\n                 boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n                 try {\n                     Float f = createFloat(str);\n-                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n+                    if (str == null) {\n+\t\t\t\t\t\treturn null;\n+\t\t\t\t\t}\n+\t\t\t\t\tif (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                         return f;\n                     }\n                 } catch (NumberFormatException nfe) { // NOPMD\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 545, 
          "faulty": "throw new NumberFormatException(str + \" is not a valid number.\");", 
          "type": "Replace", 
          "seed": "return Integer.decode(str);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 451, 
          "faulty": "if (str.startsWith(\"--\")) {\n  return null;\n}", 
          "type": "InsertBefore", 
          "seed": "if (str == null) {\n  throw new IllegalArgumentException(\"The string must not be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 559, 
          "faulty": "return createInteger(str);", 
          "type": "InsertBefore", 
          "seed": "if (str == null) {\n  return null;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:13:40.712736534 -0500\n+++ /tmp/Arja_Defects4J_Lang_16/patches_of36/Patch_536/patched/tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:17:23.988119575 -0500\n@@ -448,7 +448,10 @@\n         if (StringUtils.isBlank(str)) {\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n-        if (str.startsWith(\"--\")) {\n+        if (str == null) {\n+\t\t\tthrow new IllegalArgumentException(\"The string must not be null\");\n+\t\t}\n+\t\tif (str.startsWith(\"--\")) {\n             // this is protection for poorness in java.lang.BigDecimal.\n             // it accepts this as a legal value, but it does not appear \n             // to be in specification of class. OS X Java parses it to \n@@ -542,7 +545,7 @@\n                     }\n                     //$FALL-THROUGH$\n                 default :\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t\treturn Integer.decode(str);\n \n             }\n         } else {\n@@ -556,7 +559,10 @@\n             if (dec == null && exp == null) {\n                 //Must be an int,long,bigint\n                 try {\n-                    return createInteger(str);\n+                    if (str == null) {\n+\t\t\t\t\t\treturn null;\n+\t\t\t\t\t}\n+\t\t\t\t\treturn createInteger(str);\n                 } catch (NumberFormatException nfe) { // NOPMD\n                     // ignore the bad number\n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 545, 
          "faulty": "throw new NumberFormatException(str + \" is not a valid number.\");", 
          "type": "Replace", 
          "seed": "return Integer.decode(str);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 521, 
          "faulty": "return f;", 
          "type": "InsertBefore", 
          "seed": "if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n  return f;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 451, 
          "faulty": "if (str.startsWith(\"--\")) {\n  return null;\n}", 
          "type": "InsertBefore", 
          "seed": "if (str.startsWith(\"--\")) {\n  return null;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 517, 
          "faulty": "Float f=NumberUtils.createFloat(numeric);", 
          "type": "Replace", 
          "seed": "Float f=createFloat(str);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:13:40.712736534 -0500\n+++ /tmp/Arja_Defects4J_Lang_16/patches_of36/Patch_738/patched/tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:18:17.559972228 -0500\n@@ -449,6 +449,9 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n+\t\t\treturn null;\n+\t\t}\n+\t\tif (str.startsWith(\"--\")) {\n             // this is protection for poorness in java.lang.BigDecimal.\n             // it accepts this as a legal value, but it does not appear \n             // to be in specification of class. OS X Java parses it to \n@@ -514,9 +517,12 @@\n                 case 'f' :\n                 case 'F' :\n                     try {\n-                        Float f = NumberUtils.createFloat(numeric);\n+                        Float f = createFloat(str);\n                         if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n-                            //If it's too big for a float or the float value = 0 and the string\n+                            if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n+\t\t\t\t\t\t\t\treturn f;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t//If it's too big for a float or the float value = 0 and the string\n                             //has non-zeros in it, then float does not have the precision we want\n                             return f;\n                         }\n@@ -542,7 +548,7 @@\n                     }\n                     //$FALL-THROUGH$\n                 default :\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t\treturn Integer.decode(str);\n \n             }\n         } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 545, 
          "faulty": "throw new NumberFormatException(str + \" is not a valid number.\");", 
          "type": "Replace", 
          "seed": "return Integer.decode(str);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 533, 
          "faulty": "return d;", 
          "type": "Replace", 
          "seed": "return Double.valueOf(str);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:13:40.712736534 -0500\n+++ /tmp/Arja_Defects4J_Lang_16/patches_of36/Patch_1635/patched/tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:22:29.679282047 -0500\n@@ -530,7 +530,7 @@\n                     try {\n                         Double d = NumberUtils.createDouble(numeric);\n                         if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {\n-                            return d;\n+                            return Double.valueOf(str);\n                         }\n                     } catch (NumberFormatException nfe) { // NOPMD\n                         // ignore the bad number\n@@ -542,7 +542,7 @@\n                     }\n                     //$FALL-THROUGH$\n                 default :\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t\treturn Integer.decode(str);\n \n             }\n         } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 545, 
          "faulty": "throw new NumberFormatException(str + \" is not a valid number.\");", 
          "type": "Replace", 
          "seed": "return Integer.decode(str);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 559, 
          "faulty": "return createInteger(str);", 
          "type": "Replace", 
          "seed": "return Integer.decode(str);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:13:40.712736534 -0500\n+++ /tmp/Arja_Defects4J_Lang_16/patches_of36/Patch_1060/patched/tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:19:45.415731125 -0500\n@@ -542,7 +542,7 @@\n                     }\n                     //$FALL-THROUGH$\n                 default :\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t\treturn Integer.decode(str);\n \n             }\n         } else {\n@@ -556,7 +556,7 @@\n             if (dec == null && exp == null) {\n                 //Must be an int,long,bigint\n                 try {\n-                    return createInteger(str);\n+                    return Integer.decode(str);\n                 } catch (NumberFormatException nfe) { // NOPMD\n                     // ignore the bad number\n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 545, 
          "faulty": "throw new NumberFormatException(str + \" is not a valid number.\");", 
          "type": "Replace", 
          "seed": "return Integer.decode(str);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 451, 
          "faulty": "if (str.startsWith(\"--\")) {\n  return null;\n}", 
          "type": "InsertBefore", 
          "seed": "if (StringUtils.isBlank(str)) {\n  throw new NumberFormatException(\"A blank string is not a valid number\");\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:13:40.712736534 -0500\n+++ /tmp/Arja_Defects4J_Lang_16/patches_of36/Patch_672/patched/tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:17:59.840020938 -0500\n@@ -448,7 +448,11 @@\n         if (StringUtils.isBlank(str)) {\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n-        if (str.startsWith(\"--\")) {\n+        if (StringUtils.isBlank(str)) {\n+\t\t\tthrow new NumberFormatException(\n+\t\t\t\t\t\"A blank string is not a valid number\");\n+\t\t}\n+\t\tif (str.startsWith(\"--\")) {\n             // this is protection for poorness in java.lang.BigDecimal.\n             // it accepts this as a legal value, but it does not appear \n             // to be in specification of class. OS X Java parses it to \n@@ -542,7 +546,7 @@\n                     }\n                     //$FALL-THROUGH$\n                 default :\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t\treturn Integer.decode(str);\n \n             }\n         } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 545, 
          "faulty": "throw new NumberFormatException(str + \" is not a valid number.\");", 
          "type": "Replace", 
          "seed": "return Integer.decode(str);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 574, 
          "faulty": "Float f=createFloat(str);", 
          "type": "InsertBefore", 
          "seed": "if (expPos > -1 && expPos < str.length() - 1) {\n  exp=str.substring(expPos + 1,str.length() - 1);\n}\n else {\n  exp=null;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 491, 
          "faulty": "if (expPos > -1 && expPos < str.length() - 1) {\n  exp=str.substring(expPos + 1,str.length() - 1);\n}\n else {\n  exp=null;\n}", 
          "type": "InsertBefore", 
          "seed": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n  return createInteger(str);\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:13:40.712736534 -0500\n+++ /tmp/Arja_Defects4J_Lang_16/patches_of36/Patch_1336/patched/tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:21:06.467509268 -0500\n@@ -488,7 +488,10 @@\n             dec = null;\n         }\n         if (!Character.isDigit(lastChar) && lastChar != '.') {\n-            if (expPos > -1 && expPos < str.length() - 1) {\n+            if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n+\t\t\t\treturn createInteger(str);\n+\t\t\t}\n+\t\t\tif (expPos > -1 && expPos < str.length() - 1) {\n                 exp = str.substring(expPos + 1, str.length() - 1);\n             } else {\n                 exp = null;\n@@ -542,7 +545,7 @@\n                     }\n                     //$FALL-THROUGH$\n                 default :\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t\treturn Integer.decode(str);\n \n             }\n         } else {\n@@ -571,7 +574,12 @@\n                 //Must be a float,double,BigDec\n                 boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n                 try {\n-                    Float f = createFloat(str);\n+                    if (expPos > -1 && expPos < str.length() - 1) {\n+\t\t\t\t\t\texp = str.substring(expPos + 1, str.length() - 1);\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\texp = null;\n+\t\t\t\t\t}\n+\t\t\t\t\tFloat f = createFloat(str);\n                     if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                         return f;\n                     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 545, 
          "faulty": "throw new NumberFormatException(str + \" is not a valid number.\");", 
          "type": "Replace", 
          "seed": "return Integer.decode(str);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 480, 
          "faulty": "if (expPos > -1) {\n  if (expPos > str.length()) {\n    throw new NumberFormatException(str + \" is not a valid number.\");\n  }\n  mant=str.substring(0,expPos);\n}\n else {\n  mant=str;\n}", 
          "type": "InsertBefore", 
          "seed": "mant=str;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 466, 
          "faulty": "int expPos=str.indexOf('e') + str.indexOf('E') + 1;", 
          "type": "InsertBefore", 
          "seed": "exp=null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:13:40.712736534 -0500\n+++ /tmp/Arja_Defects4J_Lang_16/patches_of36/Patch_1490/patched/tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:21:47.091398270 -0500\n@@ -463,7 +463,8 @@\n         String dec;\n         String exp;\n         int decPos = str.indexOf('.');\n-        int expPos = str.indexOf('e') + str.indexOf('E') + 1;\n+        exp = null;\n+\t\tint expPos = str.indexOf('e') + str.indexOf('E') + 1;\n \n         if (decPos > -1) {\n \n@@ -477,7 +478,8 @@\n             }\n             mant = str.substring(0, decPos);\n         } else {\n-            if (expPos > -1) {\n+            mant = str;\n+\t\t\tif (expPos > -1) {\n                 if (expPos > str.length()) {\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n                 }\n@@ -542,7 +544,7 @@\n                     }\n                     //$FALL-THROUGH$\n                 default :\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t\treturn Integer.decode(str);\n \n             }\n         } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 545, 
          "faulty": "throw new NumberFormatException(str + \" is not a valid number.\");", 
          "type": "Replace", 
          "seed": "return Integer.decode(str);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 448, 
          "faulty": "if (StringUtils.isBlank(str)) {\n  throw new NumberFormatException(\"A blank string is not a valid number\");\n}", 
          "type": "InsertBefore", 
          "seed": "if (str == null) {\n  return null;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 451, 
          "faulty": "if (str.startsWith(\"--\")) {\n  return null;\n}", 
          "type": "InsertBefore", 
          "seed": "if (str.startsWith(\"--\")) {\n  return null;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:13:40.712736534 -0500\n+++ /tmp/Arja_Defects4J_Lang_16/patches_of36/Patch_784/patched/tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:18:29.191940269 -0500\n@@ -445,10 +445,16 @@\n         if (str == null) {\n             return null;\n         }\n-        if (StringUtils.isBlank(str)) {\n+        if (str == null) {\n+\t\t\treturn null;\n+\t\t}\n+\t\tif (StringUtils.isBlank(str)) {\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n+\t\t\treturn null;\n+\t\t}\n+\t\tif (str.startsWith(\"--\")) {\n             // this is protection for poorness in java.lang.BigDecimal.\n             // it accepts this as a legal value, but it does not appear \n             // to be in specification of class. OS X Java parses it to \n@@ -542,7 +548,7 @@\n                     }\n                     //$FALL-THROUGH$\n                 default :\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t\treturn Integer.decode(str);\n \n             }\n         } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 545, 
          "faulty": "throw new NumberFormatException(str + \" is not a valid number.\");", 
          "type": "Replace", 
          "seed": "return Integer.decode(str);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 554, 
          "faulty": "exp=null;", 
          "type": "InsertBefore", 
          "seed": "if (expPos > -1 && expPos < str.length() - 1) {\n  exp=str.substring(expPos + 1,str.length());\n}\n else {\n  exp=null;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 458, 
          "faulty": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n  return createInteger(str);\n}", 
          "type": "Replace", 
          "seed": "if (str == null) {\n  throw new IllegalArgumentException(\"The string must not be null\");\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:13:40.712736534 -0500\n+++ /tmp/Arja_Defects4J_Lang_16/patches_of36/Patch_1119/patched/tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:20:06.299673909 -0500\n@@ -455,9 +455,9 @@\n             // a wrong value.\n             return null;\n         }\n-        if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n-            return createInteger(str);\n-        }   \n+        if (str == null) {\n+\t\t\tthrow new IllegalArgumentException(\"The string must not be null\");\n+\t\t}   \n         char lastChar = str.charAt(str.length() - 1);\n         String mant;\n         String dec;\n@@ -542,7 +542,7 @@\n                     }\n                     //$FALL-THROUGH$\n                 default :\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t\treturn Integer.decode(str);\n \n             }\n         } else {\n@@ -551,7 +551,12 @@\n             if (expPos > -1 && expPos < str.length() - 1) {\n                 exp = str.substring(expPos + 1, str.length());\n             } else {\n-                exp = null;\n+                if (expPos > -1 && expPos < str.length() - 1) {\n+\t\t\t\t\texp = str.substring(expPos + 1, str.length());\n+\t\t\t\t} else {\n+\t\t\t\t\texp = null;\n+\t\t\t\t}\n+\t\t\t\texp = null;\n             }\n             if (dec == null && exp == null) {\n                 //Must be an int,long,bigint\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 545, 
          "faulty": "throw new NumberFormatException(str + \" is not a valid number.\");", 
          "type": "Replace", 
          "seed": "return Integer.decode(str);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 517, 
          "faulty": "Float f=NumberUtils.createFloat(numeric);", 
          "type": "Replace", 
          "seed": "Float f=createFloat(str);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 461, 
          "faulty": "char lastChar=str.charAt(str.length() - 1);", 
          "type": "InsertBefore", 
          "seed": "if (str == null) {\n  return null;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:13:40.712736534 -0500\n+++ /tmp/Arja_Defects4J_Lang_16/patches_of36/Patch_1263/patched/tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:20:46.183564739 -0500\n@@ -458,7 +458,10 @@\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n             return createInteger(str);\n         }   \n-        char lastChar = str.charAt(str.length() - 1);\n+        if (str == null) {\n+\t\t\treturn null;\n+\t\t}\n+\t\tchar lastChar = str.charAt(str.length() - 1);\n         String mant;\n         String dec;\n         String exp;\n@@ -514,7 +517,7 @@\n                 case 'f' :\n                 case 'F' :\n                     try {\n-                        Float f = NumberUtils.createFloat(numeric);\n+                        Float f = createFloat(str);\n                         if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                             //If it's too big for a float or the float value = 0 and the string\n                             //has non-zeros in it, then float does not have the precision we want\n@@ -542,7 +545,7 @@\n                     }\n                     //$FALL-THROUGH$\n                 default :\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t\treturn Integer.decode(str);\n \n             }\n         } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 545, 
          "faulty": "throw new NumberFormatException(str + \" is not a valid number.\");", 
          "type": "Replace", 
          "seed": "return Integer.decode(str);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 451, 
          "faulty": "if (str.startsWith(\"--\")) {\n  return null;\n}", 
          "type": "InsertBefore", 
          "seed": "if (StringUtils.isBlank(str)) {\n  throw new NumberFormatException(\"A blank string is not a valid number\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 517, 
          "faulty": "Float f=NumberUtils.createFloat(numeric);", 
          "type": "Replace", 
          "seed": "Float f=createFloat(str);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:13:40.712736534 -0500\n+++ /tmp/Arja_Defects4J_Lang_16/patches_of36/Patch_622/patched/tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:17:46.860056635 -0500\n@@ -448,7 +448,11 @@\n         if (StringUtils.isBlank(str)) {\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n-        if (str.startsWith(\"--\")) {\n+        if (StringUtils.isBlank(str)) {\n+\t\t\tthrow new NumberFormatException(\n+\t\t\t\t\t\"A blank string is not a valid number\");\n+\t\t}\n+\t\tif (str.startsWith(\"--\")) {\n             // this is protection for poorness in java.lang.BigDecimal.\n             // it accepts this as a legal value, but it does not appear \n             // to be in specification of class. OS X Java parses it to \n@@ -514,7 +518,7 @@\n                 case 'f' :\n                 case 'F' :\n                     try {\n-                        Float f = NumberUtils.createFloat(numeric);\n+                        Float f = createFloat(str);\n                         if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                             //If it's too big for a float or the float value = 0 and the string\n                             //has non-zeros in it, then float does not have the precision we want\n@@ -542,7 +546,7 @@\n                     }\n                     //$FALL-THROUGH$\n                 default :\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t\treturn Integer.decode(str);\n \n             }\n         } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 465, 
          "faulty": "int decPos=str.indexOf('.');", 
          "type": "InsertBefore", 
          "seed": "mant=str;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 572, 
          "faulty": "boolean allZeros=isAllZeros(mant) && isAllZeros(exp);", 
          "type": "InsertBefore", 
          "seed": "if (str == null) {\n  throw new IllegalArgumentException(\"The string must not be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 545, 
          "faulty": "throw new NumberFormatException(str + \" is not a valid number.\");", 
          "type": "Replace", 
          "seed": "return Integer.decode(str);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:13:40.712736534 -0500\n+++ /tmp/Arja_Defects4J_Lang_16/patches_of36/Patch_1474/patched/tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:21:42.603410526 -0500\n@@ -462,7 +462,8 @@\n         String mant;\n         String dec;\n         String exp;\n-        int decPos = str.indexOf('.');\n+        mant = str;\n+\t\tint decPos = str.indexOf('.');\n         int expPos = str.indexOf('e') + str.indexOf('E') + 1;\n \n         if (decPos > -1) {\n@@ -542,7 +543,7 @@\n                     }\n                     //$FALL-THROUGH$\n                 default :\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t\treturn Integer.decode(str);\n \n             }\n         } else {\n@@ -568,7 +569,11 @@\n                 return createBigInteger(str);\n \n             } else {\n-                //Must be a float,double,BigDec\n+                if (str == null) {\n+\t\t\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\t\t\"The string must not be null\");\n+\t\t\t\t}\n+\t\t\t\t//Must be a float,double,BigDec\n                 boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n                 try {\n                     Float f = createFloat(str);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 545, 
          "faulty": "throw new NumberFormatException(str + \" is not a valid number.\");", 
          "type": "Replace", 
          "seed": "return Integer.decode(str);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 564, 
          "faulty": "return createLong(str);", 
          "type": "InsertBefore", 
          "seed": "if (str.startsWith(\"--\")) {\n  return null;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 461, 
          "faulty": "char lastChar=str.charAt(str.length() - 1);", 
          "type": "InsertBefore", 
          "seed": "if (str.startsWith(\"--\")) {\n  return null;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:13:40.712736534 -0500\n+++ /tmp/Arja_Defects4J_Lang_16/patches_of36/Patch_1606/patched/tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:22:19.559309652 -0500\n@@ -458,7 +458,10 @@\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n             return createInteger(str);\n         }   \n-        char lastChar = str.charAt(str.length() - 1);\n+        if (str.startsWith(\"--\")) {\n+\t\t\treturn null;\n+\t\t}\n+\t\tchar lastChar = str.charAt(str.length() - 1);\n         String mant;\n         String dec;\n         String exp;\n@@ -542,7 +545,7 @@\n                     }\n                     //$FALL-THROUGH$\n                 default :\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t\treturn Integer.decode(str);\n \n             }\n         } else {\n@@ -561,7 +564,10 @@\n                     // ignore the bad number\n                 }\n                 try {\n-                    return createLong(str);\n+                    if (str.startsWith(\"--\")) {\n+\t\t\t\t\t\treturn null;\n+\t\t\t\t\t}\n+\t\t\t\t\treturn createLong(str);\n                 } catch (NumberFormatException nfe) { // NOPMD\n                     // ignore the bad number\n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 545, 
          "faulty": "throw new NumberFormatException(str + \" is not a valid number.\");", 
          "type": "Replace", 
          "seed": "return Integer.decode(str);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 480, 
          "faulty": "if (expPos > -1) {\n  if (expPos > str.length()) {\n    throw new NumberFormatException(str + \" is not a valid number.\");\n  }\n  mant=str.substring(0,expPos);\n}\n else {\n  mant=str;\n}", 
          "type": "InsertBefore", 
          "seed": "mant=str;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:13:40.712736534 -0500\n+++ /tmp/Arja_Defects4J_Lang_16/patches_of36/Patch_812/patched/tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:18:36.195921030 -0500\n@@ -477,7 +477,8 @@\n             }\n             mant = str.substring(0, decPos);\n         } else {\n-            if (expPos > -1) {\n+            mant = str;\n+\t\t\tif (expPos > -1) {\n                 if (expPos > str.length()) {\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n                 }\n@@ -542,7 +543,7 @@\n                     }\n                     //$FALL-THROUGH$\n                 default :\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t\treturn Integer.decode(str);\n \n             }\n         } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 545, 
          "faulty": "throw new NumberFormatException(str + \" is not a valid number.\");", 
          "type": "Replace", 
          "seed": "return Integer.decode(str);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 564, 
          "faulty": "return createLong(str);", 
          "type": "InsertBefore", 
          "seed": "if (str.startsWith(\"--\")) {\n  return null;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:13:40.712736534 -0500\n+++ /tmp/Arja_Defects4J_Lang_16/patches_of36/Patch_1372/patched/tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:21:16.107482916 -0500\n@@ -542,7 +542,7 @@\n                     }\n                     //$FALL-THROUGH$\n                 default :\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t\treturn Integer.decode(str);\n \n             }\n         } else {\n@@ -561,7 +561,10 @@\n                     // ignore the bad number\n                 }\n                 try {\n-                    return createLong(str);\n+                    if (str.startsWith(\"--\")) {\n+\t\t\t\t\t\treturn null;\n+\t\t\t\t\t}\n+\t\t\t\t\treturn createLong(str);\n                 } catch (NumberFormatException nfe) { // NOPMD\n                     // ignore the bad number\n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 545, 
          "faulty": "throw new NumberFormatException(str + \" is not a valid number.\");", 
          "type": "Replace", 
          "seed": "return Integer.decode(str);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 451, 
          "faulty": "if (str.startsWith(\"--\")) {\n  return null;\n}", 
          "type": "InsertBefore", 
          "seed": "if (str.startsWith(\"--\")) {\n  return null;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:13:40.712736534 -0500\n+++ /tmp/Arja_Defects4J_Lang_16/patches_of36/Patch_1539/patched/tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:22:01.491358956 -0500\n@@ -449,6 +449,9 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n+\t\t\treturn null;\n+\t\t}\n+\t\tif (str.startsWith(\"--\")) {\n             // this is protection for poorness in java.lang.BigDecimal.\n             // it accepts this as a legal value, but it does not appear \n             // to be in specification of class. OS X Java parses it to \n@@ -542,7 +545,7 @@\n                     }\n                     //$FALL-THROUGH$\n                 default :\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t\treturn Integer.decode(str);\n \n             }\n         } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 545, 
          "faulty": "throw new NumberFormatException(str + \" is not a valid number.\");", 
          "type": "Replace", 
          "seed": "return Integer.decode(str);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 476, 
          "faulty": "dec=str.substring(decPos + 1);", 
          "type": "Replace", 
          "seed": "if (decPos > -1) {\n  if (expPos > -1) {\n    if (expPos < decPos || expPos > str.length()) {\n      throw new NumberFormatException(str + \" is not a valid number.\");\n    }\n    dec=str.substring(decPos + 1,expPos);\n  }\n else {\n    dec=str.substring(decPos + 1);\n  }\n  mant=str.substring(0,decPos);\n}\n else {\n  if (expPos > -1) {\n    if (expPos > str.length()) {\n      throw new NumberFormatException(str + \" is not a valid number.\");\n    }\n    mant=str.substring(0,expPos);\n  }\n else {\n    mant=str;\n  }\n  dec=null;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:13:40.712736534 -0500\n+++ /tmp/Arja_Defects4J_Lang_16/patches_of36/Patch_757/patched/tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:18:22.295959214 -0500\n@@ -473,7 +473,29 @@\n                 }\n                 dec = str.substring(decPos + 1, expPos);\n             } else {\n-                dec = str.substring(decPos + 1);\n+                if (decPos > -1) {\n+\t\t\t\t\tif (expPos > -1) {\n+\t\t\t\t\t\tif (expPos < decPos || expPos > str.length()) {\n+\t\t\t\t\t\t\tthrow new NumberFormatException(str\n+\t\t\t\t\t\t\t\t\t+ \" is not a valid number.\");\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tdec = str.substring(decPos + 1, expPos);\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tdec = str.substring(decPos + 1);\n+\t\t\t\t\t}\n+\t\t\t\t\tmant = str.substring(0, decPos);\n+\t\t\t\t} else {\n+\t\t\t\t\tif (expPos > -1) {\n+\t\t\t\t\t\tif (expPos > str.length()) {\n+\t\t\t\t\t\t\tthrow new NumberFormatException(str\n+\t\t\t\t\t\t\t\t\t+ \" is not a valid number.\");\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tmant = str.substring(0, expPos);\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tmant = str;\n+\t\t\t\t\t}\n+\t\t\t\t\tdec = null;\n+\t\t\t\t}\n             }\n             mant = str.substring(0, decPos);\n         } else {\n@@ -542,7 +564,7 @@\n                     }\n                     //$FALL-THROUGH$\n                 default :\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t\treturn Integer.decode(str);\n \n             }\n         } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 545, 
          "faulty": "throw new NumberFormatException(str + \" is not a valid number.\");", 
          "type": "Replace", 
          "seed": "return Integer.decode(str);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 491, 
          "faulty": "if (expPos > -1 && expPos < str.length() - 1) {\n  exp=str.substring(expPos + 1,str.length() - 1);\n}\n else {\n  exp=null;\n}", 
          "type": "InsertBefore", 
          "seed": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n  return createInteger(str);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 451, 
          "faulty": "if (str.startsWith(\"--\")) {\n  return null;\n}", 
          "type": "InsertBefore", 
          "seed": "if (str == null) {\n  throw new IllegalArgumentException(\"The string must not be null\");\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:13:40.712736534 -0500\n+++ /tmp/Arja_Defects4J_Lang_16/patches_of36/Patch_611/patched/tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:17:44.068064316 -0500\n@@ -448,7 +448,10 @@\n         if (StringUtils.isBlank(str)) {\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n-        if (str.startsWith(\"--\")) {\n+        if (str == null) {\n+\t\t\tthrow new IllegalArgumentException(\"The string must not be null\");\n+\t\t}\n+\t\tif (str.startsWith(\"--\")) {\n             // this is protection for poorness in java.lang.BigDecimal.\n             // it accepts this as a legal value, but it does not appear \n             // to be in specification of class. OS X Java parses it to \n@@ -488,7 +491,10 @@\n             dec = null;\n         }\n         if (!Character.isDigit(lastChar) && lastChar != '.') {\n-            if (expPos > -1 && expPos < str.length() - 1) {\n+            if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n+\t\t\t\treturn createInteger(str);\n+\t\t\t}\n+\t\t\tif (expPos > -1 && expPos < str.length() - 1) {\n                 exp = str.substring(expPos + 1, str.length() - 1);\n             } else {\n                 exp = null;\n@@ -542,7 +548,7 @@\n                     }\n                     //$FALL-THROUGH$\n                 default :\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t\treturn Integer.decode(str);\n \n             }\n         } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 545, 
          "faulty": "throw new NumberFormatException(str + \" is not a valid number.\");", 
          "type": "Replace", 
          "seed": "return Integer.decode(str);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 480, 
          "faulty": "if (expPos > -1) {\n  if (expPos > str.length()) {\n    throw new NumberFormatException(str + \" is not a valid number.\");\n  }\n  mant=str.substring(0,expPos);\n}\n else {\n  mant=str;\n}", 
          "type": "InsertBefore", 
          "seed": "if (decPos > -1) {\n  if (expPos > -1) {\n    if (expPos < decPos || expPos > str.length()) {\n      throw new NumberFormatException(str + \" is not a valid number.\");\n    }\n    dec=str.substring(decPos + 1,expPos);\n  }\n else {\n    dec=str.substring(decPos + 1);\n  }\n  mant=str.substring(0,decPos);\n}\n else {\n  if (expPos > -1) {\n    if (expPos > str.length()) {\n      throw new NumberFormatException(str + \" is not a valid number.\");\n    }\n    mant=str.substring(0,expPos);\n  }\n else {\n    mant=str;\n  }\n  dec=null;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:13:40.712736534 -0500\n+++ /tmp/Arja_Defects4J_Lang_16/patches_of36/Patch_1314/patched/tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:21:00.695525049 -0500\n@@ -477,7 +477,30 @@\n             }\n             mant = str.substring(0, decPos);\n         } else {\n-            if (expPos > -1) {\n+            if (decPos > -1) {\n+\t\t\t\tif (expPos > -1) {\n+\t\t\t\t\tif (expPos < decPos || expPos > str.length()) {\n+\t\t\t\t\t\tthrow new NumberFormatException(str\n+\t\t\t\t\t\t\t\t+ \" is not a valid number.\");\n+\t\t\t\t\t}\n+\t\t\t\t\tdec = str.substring(decPos + 1, expPos);\n+\t\t\t\t} else {\n+\t\t\t\t\tdec = str.substring(decPos + 1);\n+\t\t\t\t}\n+\t\t\t\tmant = str.substring(0, decPos);\n+\t\t\t} else {\n+\t\t\t\tif (expPos > -1) {\n+\t\t\t\t\tif (expPos > str.length()) {\n+\t\t\t\t\t\tthrow new NumberFormatException(str\n+\t\t\t\t\t\t\t\t+ \" is not a valid number.\");\n+\t\t\t\t\t}\n+\t\t\t\t\tmant = str.substring(0, expPos);\n+\t\t\t\t} else {\n+\t\t\t\t\tmant = str;\n+\t\t\t\t}\n+\t\t\t\tdec = null;\n+\t\t\t}\n+\t\t\tif (expPos > -1) {\n                 if (expPos > str.length()) {\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n                 }\n@@ -542,7 +565,7 @@\n                     }\n                     //$FALL-THROUGH$\n                 default :\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t\treturn Integer.decode(str);\n \n             }\n         } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 545, 
          "faulty": "throw new NumberFormatException(str + \" is not a valid number.\");", 
          "type": "Replace", 
          "seed": "return Integer.decode(str);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 491, 
          "faulty": "if (expPos > -1 && expPos < str.length() - 1) {\n  exp=str.substring(expPos + 1,str.length() - 1);\n}\n else {\n  exp=null;\n}", 
          "type": "InsertBefore", 
          "seed": "if (str.startsWith(\"--\")) {\n  return null;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 458, 
          "faulty": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n  return createInteger(str);\n}", 
          "type": "Replace", 
          "seed": "if (StringUtils.isBlank(str)) {\n  throw new NumberFormatException(\"A blank string is not a valid number\");\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:13:40.712736534 -0500\n+++ /tmp/Arja_Defects4J_Lang_16/patches_of36/Patch_1595/patched/tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:22:16.823317116 -0500\n@@ -455,9 +455,10 @@\n             // a wrong value.\n             return null;\n         }\n-        if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n-            return createInteger(str);\n-        }   \n+        if (StringUtils.isBlank(str)) {\n+\t\t\tthrow new NumberFormatException(\n+\t\t\t\t\t\"A blank string is not a valid number\");\n+\t\t}   \n         char lastChar = str.charAt(str.length() - 1);\n         String mant;\n         String dec;\n@@ -488,7 +489,10 @@\n             dec = null;\n         }\n         if (!Character.isDigit(lastChar) && lastChar != '.') {\n-            if (expPos > -1 && expPos < str.length() - 1) {\n+            if (str.startsWith(\"--\")) {\n+\t\t\t\treturn null;\n+\t\t\t}\n+\t\t\tif (expPos > -1 && expPos < str.length() - 1) {\n                 exp = str.substring(expPos + 1, str.length() - 1);\n             } else {\n                 exp = null;\n@@ -542,7 +546,7 @@\n                     }\n                     //$FALL-THROUGH$\n                 default :\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t\treturn Integer.decode(str);\n \n             }\n         } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 545, 
          "faulty": "throw new NumberFormatException(str + \" is not a valid number.\");", 
          "type": "Replace", 
          "seed": "return Integer.decode(str);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 491, 
          "faulty": "if (expPos > -1 && expPos < str.length() - 1) {\n  exp=str.substring(expPos + 1,str.length() - 1);\n}\n else {\n  exp=null;\n}", 
          "type": "InsertBefore", 
          "seed": "if (str == null) {\n  throw new IllegalArgumentException(\"The string must not be null\");\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:13:40.712736534 -0500\n+++ /tmp/Arja_Defects4J_Lang_16/patches_of36/Patch_973/patched/tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:19:20.535799337 -0500\n@@ -488,7 +488,11 @@\n             dec = null;\n         }\n         if (!Character.isDigit(lastChar) && lastChar != '.') {\n-            if (expPos > -1 && expPos < str.length() - 1) {\n+            if (str == null) {\n+\t\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\t\"The string must not be null\");\n+\t\t\t}\n+\t\t\tif (expPos > -1 && expPos < str.length() - 1) {\n                 exp = str.substring(expPos + 1, str.length() - 1);\n             } else {\n                 exp = null;\n@@ -542,7 +546,7 @@\n                     }\n                     //$FALL-THROUGH$\n                 default :\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t\treturn Integer.decode(str);\n \n             }\n         } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 545, 
          "faulty": "throw new NumberFormatException(str + \" is not a valid number.\");", 
          "type": "Replace", 
          "seed": "return Integer.decode(str);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 491, 
          "faulty": "if (expPos > -1 && expPos < str.length() - 1) {\n  exp=str.substring(expPos + 1,str.length() - 1);\n}\n else {\n  exp=null;\n}", 
          "type": "InsertBefore", 
          "seed": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n  return createInteger(str);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 521, 
          "faulty": "return f;", 
          "type": "InsertBefore", 
          "seed": "if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n  return f;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:13:40.712736534 -0500\n+++ /tmp/Arja_Defects4J_Lang_16/patches_of36/Patch_1196/patched/tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:20:27.251616543 -0500\n@@ -488,7 +488,10 @@\n             dec = null;\n         }\n         if (!Character.isDigit(lastChar) && lastChar != '.') {\n-            if (expPos > -1 && expPos < str.length() - 1) {\n+            if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n+\t\t\t\treturn createInteger(str);\n+\t\t\t}\n+\t\t\tif (expPos > -1 && expPos < str.length() - 1) {\n                 exp = str.substring(expPos + 1, str.length() - 1);\n             } else {\n                 exp = null;\n@@ -516,7 +519,10 @@\n                     try {\n                         Float f = NumberUtils.createFloat(numeric);\n                         if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n-                            //If it's too big for a float or the float value = 0 and the string\n+                            if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n+\t\t\t\t\t\t\t\treturn f;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t//If it's too big for a float or the float value = 0 and the string\n                             //has non-zeros in it, then float does not have the precision we want\n                             return f;\n                         }\n@@ -542,7 +548,7 @@\n                     }\n                     //$FALL-THROUGH$\n                 default :\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t\treturn Integer.decode(str);\n \n             }\n         } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 545, 
          "faulty": "throw new NumberFormatException(str + \" is not a valid number.\");", 
          "type": "Replace", 
          "seed": "return Integer.decode(str);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 521, 
          "faulty": "return f;", 
          "type": "InsertBefore", 
          "seed": "dec=null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:13:40.712736534 -0500\n+++ /tmp/Arja_Defects4J_Lang_16/patches_of36/Patch_1213/patched/tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:20:31.031606197 -0500\n@@ -516,7 +516,8 @@\n                     try {\n                         Float f = NumberUtils.createFloat(numeric);\n                         if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n-                            //If it's too big for a float or the float value = 0 and the string\n+                            dec = null;\n+\t\t\t\t\t\t\t//If it's too big for a float or the float value = 0 and the string\n                             //has non-zeros in it, then float does not have the precision we want\n                             return f;\n                         }\n@@ -542,7 +543,7 @@\n                     }\n                     //$FALL-THROUGH$\n                 default :\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t\treturn Integer.decode(str);\n \n             }\n         } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 545, 
          "faulty": "throw new NumberFormatException(str + \" is not a valid number.\");", 
          "type": "Replace", 
          "seed": "return Integer.decode(str);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 521, 
          "faulty": "return f;", 
          "type": "InsertBefore", 
          "seed": "if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n  return f;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:13:40.712736534 -0500\n+++ /tmp/Arja_Defects4J_Lang_16/patches_of36/Patch_445/patched/tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:16:59.712186429 -0500\n@@ -516,7 +516,10 @@\n                     try {\n                         Float f = NumberUtils.createFloat(numeric);\n                         if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n-                            //If it's too big for a float or the float value = 0 and the string\n+                            if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n+\t\t\t\t\t\t\t\treturn f;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t//If it's too big for a float or the float value = 0 and the string\n                             //has non-zeros in it, then float does not have the precision we want\n                             return f;\n                         }\n@@ -542,7 +545,7 @@\n                     }\n                     //$FALL-THROUGH$\n                 default :\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t\treturn Integer.decode(str);\n \n             }\n         } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 545, 
          "faulty": "throw new NumberFormatException(str + \" is not a valid number.\");", 
          "type": "Replace", 
          "seed": "return Integer.decode(str);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 451, 
          "faulty": "if (str.startsWith(\"--\")) {\n  return null;\n}", 
          "type": "Replace", 
          "seed": "if (str == null) {\n  return null;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:13:40.712736534 -0500\n+++ /tmp/Arja_Defects4J_Lang_16/patches_of36/Patch_1026/patched/tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:19:36.947754335 -0500\n@@ -448,13 +448,9 @@\n         if (StringUtils.isBlank(str)) {\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n-        if (str.startsWith(\"--\")) {\n-            // this is protection for poorness in java.lang.BigDecimal.\n-            // it accepts this as a legal value, but it does not appear \n-            // to be in specification of class. OS X Java parses it to \n-            // a wrong value.\n-            return null;\n-        }\n+        if (str == null) {\n+\t\t\treturn null;\n+\t\t}\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n             return createInteger(str);\n         }   \n@@ -542,7 +538,7 @@\n                     }\n                     //$FALL-THROUGH$\n                 default :\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t\treturn Integer.decode(str);\n \n             }\n         } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 545, 
          "faulty": "throw new NumberFormatException(str + \" is not a valid number.\");", 
          "type": "Replace", 
          "seed": "return Integer.decode(str);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 451, 
          "faulty": "if (str.startsWith(\"--\")) {\n  return null;\n}", 
          "type": "Replace", 
          "seed": "if (StringUtils.isBlank(str)) {\n  throw new NumberFormatException(\"A blank string is not a valid number\");\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:13:40.712736534 -0500\n+++ /tmp/Arja_Defects4J_Lang_16/patches_of36/Patch_867/patched/tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:18:50.011883093 -0500\n@@ -448,13 +448,10 @@\n         if (StringUtils.isBlank(str)) {\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n-        if (str.startsWith(\"--\")) {\n-            // this is protection for poorness in java.lang.BigDecimal.\n-            // it accepts this as a legal value, but it does not appear \n-            // to be in specification of class. OS X Java parses it to \n-            // a wrong value.\n-            return null;\n-        }\n+        if (StringUtils.isBlank(str)) {\n+\t\t\tthrow new NumberFormatException(\n+\t\t\t\t\t\"A blank string is not a valid number\");\n+\t\t}\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n             return createInteger(str);\n         }   \n@@ -542,7 +539,7 @@\n                     }\n                     //$FALL-THROUGH$\n                 default :\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t\treturn Integer.decode(str);\n \n             }\n         } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 545, 
          "faulty": "throw new NumberFormatException(str + \" is not a valid number.\");", 
          "type": "Replace", 
          "seed": "return Integer.decode(str);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 451, 
          "faulty": "if (str.startsWith(\"--\")) {\n  return null;\n}", 
          "type": "InsertBefore", 
          "seed": "if (StringUtils.isBlank(str)) {\n  throw new NumberFormatException(\"A blank string is not a valid number\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 559, 
          "faulty": "return createInteger(str);", 
          "type": "InsertBefore", 
          "seed": "if (StringUtils.isBlank(str)) {\n  throw new NumberFormatException(\"A blank string is not a valid number\");\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:13:40.712736534 -0500\n+++ /tmp/Arja_Defects4J_Lang_16/patches_of36/Patch_743/patched/tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:18:18.655969217 -0500\n@@ -448,7 +448,11 @@\n         if (StringUtils.isBlank(str)) {\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n-        if (str.startsWith(\"--\")) {\n+        if (StringUtils.isBlank(str)) {\n+\t\t\tthrow new NumberFormatException(\n+\t\t\t\t\t\"A blank string is not a valid number\");\n+\t\t}\n+\t\tif (str.startsWith(\"--\")) {\n             // this is protection for poorness in java.lang.BigDecimal.\n             // it accepts this as a legal value, but it does not appear \n             // to be in specification of class. OS X Java parses it to \n@@ -542,7 +546,7 @@\n                     }\n                     //$FALL-THROUGH$\n                 default :\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t\treturn Integer.decode(str);\n \n             }\n         } else {\n@@ -556,7 +560,11 @@\n             if (dec == null && exp == null) {\n                 //Must be an int,long,bigint\n                 try {\n-                    return createInteger(str);\n+                    if (StringUtils.isBlank(str)) {\n+\t\t\t\t\t\tthrow new NumberFormatException(\n+\t\t\t\t\t\t\t\t\"A blank string is not a valid number\");\n+\t\t\t\t\t}\n+\t\t\t\t\treturn createInteger(str);\n                 } catch (NumberFormatException nfe) { // NOPMD\n                     // ignore the bad number\n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 545, 
          "faulty": "throw new NumberFormatException(str + \" is not a valid number.\");", 
          "type": "Replace", 
          "seed": "return Integer.decode(str);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 494, 
          "faulty": "exp=null;", 
          "type": "InsertBefore", 
          "seed": "if (decPos > -1) {\n  if (expPos > -1) {\n    if (expPos < decPos || expPos > str.length()) {\n      throw new NumberFormatException(str + \" is not a valid number.\");\n    }\n    dec=str.substring(decPos + 1,expPos);\n  }\n else {\n    dec=str.substring(decPos + 1);\n  }\n  mant=str.substring(0,decPos);\n}\n else {\n  if (expPos > -1) {\n    if (expPos > str.length()) {\n      throw new NumberFormatException(str + \" is not a valid number.\");\n    }\n    mant=str.substring(0,expPos);\n  }\n else {\n    mant=str;\n  }\n  dec=null;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 559, 
          "faulty": "return createInteger(str);", 
          "type": "InsertBefore", 
          "seed": "if (str == null) {\n  return null;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:13:40.712736534 -0500\n+++ /tmp/Arja_Defects4J_Lang_16/patches_of36/Patch_517/patched/tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:17:18.972133384 -0500\n@@ -491,7 +491,30 @@\n             if (expPos > -1 && expPos < str.length() - 1) {\n                 exp = str.substring(expPos + 1, str.length() - 1);\n             } else {\n-                exp = null;\n+                if (decPos > -1) {\n+\t\t\t\t\tif (expPos > -1) {\n+\t\t\t\t\t\tif (expPos < decPos || expPos > str.length()) {\n+\t\t\t\t\t\t\tthrow new NumberFormatException(str\n+\t\t\t\t\t\t\t\t\t+ \" is not a valid number.\");\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tdec = str.substring(decPos + 1, expPos);\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tdec = str.substring(decPos + 1);\n+\t\t\t\t\t}\n+\t\t\t\t\tmant = str.substring(0, decPos);\n+\t\t\t\t} else {\n+\t\t\t\t\tif (expPos > -1) {\n+\t\t\t\t\t\tif (expPos > str.length()) {\n+\t\t\t\t\t\t\tthrow new NumberFormatException(str\n+\t\t\t\t\t\t\t\t\t+ \" is not a valid number.\");\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tmant = str.substring(0, expPos);\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tmant = str;\n+\t\t\t\t\t}\n+\t\t\t\t\tdec = null;\n+\t\t\t\t}\n+\t\t\t\texp = null;\n             }\n             //Requesting a specific type..\n             String numeric = str.substring(0, str.length() - 1);\n@@ -542,7 +565,7 @@\n                     }\n                     //$FALL-THROUGH$\n                 default :\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t\treturn Integer.decode(str);\n \n             }\n         } else {\n@@ -556,7 +579,10 @@\n             if (dec == null && exp == null) {\n                 //Must be an int,long,bigint\n                 try {\n-                    return createInteger(str);\n+                    if (str == null) {\n+\t\t\t\t\t\treturn null;\n+\t\t\t\t\t}\n+\t\t\t\t\treturn createInteger(str);\n                 } catch (NumberFormatException nfe) { // NOPMD\n                     // ignore the bad number\n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 545, 
          "faulty": "throw new NumberFormatException(str + \" is not a valid number.\");", 
          "type": "Replace", 
          "seed": "return Integer.decode(str);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 574, 
          "faulty": "Float f=createFloat(str);", 
          "type": "InsertBefore", 
          "seed": "if (expPos > -1 && expPos < str.length() - 1) {\n  exp=str.substring(expPos + 1,str.length() - 1);\n}\n else {\n  exp=null;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 451, 
          "faulty": "if (str.startsWith(\"--\")) {\n  return null;\n}", 
          "type": "InsertBefore", 
          "seed": "if (StringUtils.isBlank(str)) {\n  throw new NumberFormatException(\"A blank string is not a valid number\");\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:13:40.712736534 -0500\n+++ /tmp/Arja_Defects4J_Lang_16/patches_of36/Patch_1409/patched/tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:21:25.943456037 -0500\n@@ -448,7 +448,11 @@\n         if (StringUtils.isBlank(str)) {\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n-        if (str.startsWith(\"--\")) {\n+        if (StringUtils.isBlank(str)) {\n+\t\t\tthrow new NumberFormatException(\n+\t\t\t\t\t\"A blank string is not a valid number\");\n+\t\t}\n+\t\tif (str.startsWith(\"--\")) {\n             // this is protection for poorness in java.lang.BigDecimal.\n             // it accepts this as a legal value, but it does not appear \n             // to be in specification of class. OS X Java parses it to \n@@ -542,7 +546,7 @@\n                     }\n                     //$FALL-THROUGH$\n                 default :\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t\treturn Integer.decode(str);\n \n             }\n         } else {\n@@ -571,7 +575,12 @@\n                 //Must be a float,double,BigDec\n                 boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n                 try {\n-                    Float f = createFloat(str);\n+                    if (expPos > -1 && expPos < str.length() - 1) {\n+\t\t\t\t\t\texp = str.substring(expPos + 1, str.length() - 1);\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\texp = null;\n+\t\t\t\t\t}\n+\t\t\t\t\tFloat f = createFloat(str);\n                     if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                         return f;\n                     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 545, 
          "faulty": "throw new NumberFormatException(str + \" is not a valid number.\");", 
          "type": "Replace", 
          "seed": "return Integer.decode(str);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 521, 
          "faulty": "return f;", 
          "type": "InsertBefore", 
          "seed": "if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n  return f;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 451, 
          "faulty": "if (str.startsWith(\"--\")) {\n  return null;\n}", 
          "type": "Replace", 
          "seed": "if (str == null) {\n  throw new IllegalArgumentException(\"The string must not be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 458, 
          "faulty": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n  return createInteger(str);\n}", 
          "type": "Replace", 
          "seed": "if (StringUtils.isBlank(str)) {\n  throw new NumberFormatException(\"A blank string is not a valid number\");\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:13:40.712736534 -0500\n+++ /tmp/Arja_Defects4J_Lang_16/patches_of36/Patch_511/patched/tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:17:17.552137294 -0500\n@@ -448,16 +448,13 @@\n         if (StringUtils.isBlank(str)) {\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n-        if (str.startsWith(\"--\")) {\n-            // this is protection for poorness in java.lang.BigDecimal.\n-            // it accepts this as a legal value, but it does not appear \n-            // to be in specification of class. OS X Java parses it to \n-            // a wrong value.\n-            return null;\n-        }\n-        if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n-            return createInteger(str);\n-        }   \n+        if (str == null) {\n+\t\t\tthrow new IllegalArgumentException(\"The string must not be null\");\n+\t\t}\n+        if (StringUtils.isBlank(str)) {\n+\t\t\tthrow new NumberFormatException(\n+\t\t\t\t\t\"A blank string is not a valid number\");\n+\t\t}   \n         char lastChar = str.charAt(str.length() - 1);\n         String mant;\n         String dec;\n@@ -516,7 +513,10 @@\n                     try {\n                         Float f = NumberUtils.createFloat(numeric);\n                         if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n-                            //If it's too big for a float or the float value = 0 and the string\n+                            if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n+\t\t\t\t\t\t\t\treturn f;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t//If it's too big for a float or the float value = 0 and the string\n                             //has non-zeros in it, then float does not have the precision we want\n                             return f;\n                         }\n@@ -542,7 +542,7 @@\n                     }\n                     //$FALL-THROUGH$\n                 default :\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t\treturn Integer.decode(str);\n \n             }\n         } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 545, 
          "faulty": "throw new NumberFormatException(str + \" is not a valid number.\");", 
          "type": "Replace", 
          "seed": "return Integer.decode(str);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 559, 
          "faulty": "return createInteger(str);", 
          "type": "InsertBefore", 
          "seed": "if (StringUtils.isBlank(str)) {\n  throw new NumberFormatException(\"A blank string is not a valid number\");\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:13:40.712736534 -0500\n+++ /tmp/Arja_Defects4J_Lang_16/patches_of36/Patch_248/patched/tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:16:06.144334141 -0500\n@@ -542,7 +542,7 @@\n                     }\n                     //$FALL-THROUGH$\n                 default :\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t\treturn Integer.decode(str);\n \n             }\n         } else {\n@@ -556,7 +556,11 @@\n             if (dec == null && exp == null) {\n                 //Must be an int,long,bigint\n                 try {\n-                    return createInteger(str);\n+                    if (StringUtils.isBlank(str)) {\n+\t\t\t\t\t\tthrow new NumberFormatException(\n+\t\t\t\t\t\t\t\t\"A blank string is not a valid number\");\n+\t\t\t\t\t}\n+\t\t\t\t\treturn createInteger(str);\n                 } catch (NumberFormatException nfe) { // NOPMD\n                     // ignore the bad number\n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 545, 
          "faulty": "throw new NumberFormatException(str + \" is not a valid number.\");", 
          "type": "Replace", 
          "seed": "return Integer.decode(str);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 484, 
          "faulty": "mant=str.substring(0,expPos);", 
          "type": "Replace", 
          "seed": "if (decPos > -1) {\n  if (expPos > -1) {\n    if (expPos < decPos || expPos > str.length()) {\n      throw new NumberFormatException(str + \" is not a valid number.\");\n    }\n    dec=str.substring(decPos + 1,expPos);\n  }\n else {\n    dec=str.substring(decPos + 1);\n  }\n  mant=str.substring(0,decPos);\n}\n else {\n  if (expPos > -1) {\n    if (expPos > str.length()) {\n      throw new NumberFormatException(str + \" is not a valid number.\");\n    }\n    mant=str.substring(0,expPos);\n  }\n else {\n    mant=str;\n  }\n  dec=null;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:13:40.712736534 -0500\n+++ /tmp/Arja_Defects4J_Lang_16/patches_of36/Patch_885/patched/tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:18:54.131871783 -0500\n@@ -481,7 +481,29 @@\n                 if (expPos > str.length()) {\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n                 }\n-                mant = str.substring(0, expPos);\n+                if (decPos > -1) {\n+\t\t\t\t\tif (expPos > -1) {\n+\t\t\t\t\t\tif (expPos < decPos || expPos > str.length()) {\n+\t\t\t\t\t\t\tthrow new NumberFormatException(str\n+\t\t\t\t\t\t\t\t\t+ \" is not a valid number.\");\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tdec = str.substring(decPos + 1, expPos);\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tdec = str.substring(decPos + 1);\n+\t\t\t\t\t}\n+\t\t\t\t\tmant = str.substring(0, decPos);\n+\t\t\t\t} else {\n+\t\t\t\t\tif (expPos > -1) {\n+\t\t\t\t\t\tif (expPos > str.length()) {\n+\t\t\t\t\t\t\tthrow new NumberFormatException(str\n+\t\t\t\t\t\t\t\t\t+ \" is not a valid number.\");\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tmant = str.substring(0, expPos);\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tmant = str;\n+\t\t\t\t\t}\n+\t\t\t\t\tdec = null;\n+\t\t\t\t}\n             } else {\n                 mant = str;\n             }\n@@ -542,7 +564,7 @@\n                     }\n                     //$FALL-THROUGH$\n                 default :\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t\treturn Integer.decode(str);\n \n             }\n         } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 545, 
          "faulty": "throw new NumberFormatException(str + \" is not a valid number.\");", 
          "type": "Replace", 
          "seed": "return Integer.decode(str);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 486, 
          "faulty": "mant=str;", 
          "type": "InsertBefore", 
          "seed": "if (expPos > -1 && expPos < str.length() - 1) {\n  exp=str.substring(expPos + 1,str.length());\n}\n else {\n  exp=null;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:13:40.712736534 -0500\n+++ /tmp/Arja_Defects4J_Lang_16/patches_of36/Patch_1104/patched/tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:20:02.491684339 -0500\n@@ -483,7 +483,12 @@\n                 }\n                 mant = str.substring(0, expPos);\n             } else {\n-                mant = str;\n+                if (expPos > -1 && expPos < str.length() - 1) {\n+\t\t\t\t\texp = str.substring(expPos + 1, str.length());\n+\t\t\t\t} else {\n+\t\t\t\t\texp = null;\n+\t\t\t\t}\n+\t\t\t\tmant = str;\n             }\n             dec = null;\n         }\n@@ -542,7 +547,7 @@\n                     }\n                     //$FALL-THROUGH$\n                 default :\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t\treturn Integer.decode(str);\n \n             }\n         } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 465, 
          "faulty": "int decPos=str.indexOf('.');", 
          "type": "InsertBefore", 
          "seed": "if (str == null) {\n  throw new IllegalArgumentException(\"The string must not be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 545, 
          "faulty": "throw new NumberFormatException(str + \" is not a valid number.\");", 
          "type": "Replace", 
          "seed": "return Integer.decode(str);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:13:40.712736534 -0500\n+++ /tmp/Arja_Defects4J_Lang_16/patches_of36/Patch_846/patched/tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:18:44.595897963 -0500\n@@ -462,7 +462,10 @@\n         String mant;\n         String dec;\n         String exp;\n-        int decPos = str.indexOf('.');\n+        if (str == null) {\n+\t\t\tthrow new IllegalArgumentException(\"The string must not be null\");\n+\t\t}\n+\t\tint decPos = str.indexOf('.');\n         int expPos = str.indexOf('e') + str.indexOf('E') + 1;\n \n         if (decPos > -1) {\n@@ -542,7 +545,7 @@\n                     }\n                     //$FALL-THROUGH$\n                 default :\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t\treturn Integer.decode(str);\n \n             }\n         } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 459, 
          "faulty": "return createInteger(str);", 
          "type": "Delete", 
          "seed": "throw new ArithmeticException(\"Numerator too large to represent as an Integer.\");"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 545, 
          "faulty": "throw new NumberFormatException(str + \" is not a valid number.\");", 
          "type": "Replace", 
          "seed": "return Integer.decode(str);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:13:40.712736534 -0500\n+++ /tmp/Arja_Defects4J_Lang_16/patches_of36/Patch_908/patched/tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:19:00.155855250 -0500\n@@ -456,7 +456,6 @@\n             return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n-            return createInteger(str);\n         }   \n         char lastChar = str.charAt(str.length() - 1);\n         String mant;\n@@ -542,7 +541,7 @@\n                     }\n                     //$FALL-THROUGH$\n                 default :\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t\treturn Integer.decode(str);\n \n             }\n         } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 545, 
          "faulty": "throw new NumberFormatException(str + \" is not a valid number.\");", 
          "type": "Replace", 
          "seed": "return Integer.decode(str);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 517, 
          "faulty": "Float f=NumberUtils.createFloat(numeric);", 
          "type": "InsertBefore", 
          "seed": "if (expPos > -1) {\n  if (expPos > str.length()) {\n    throw new NumberFormatException(str + \" is not a valid number.\");\n  }\n  mant=str.substring(0,expPos);\n}\n else {\n  mant=str;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:13:40.712736534 -0500\n+++ /tmp/Arja_Defects4J_Lang_16/patches_of36/Patch_1123/patched/tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:20:07.107671696 -0500\n@@ -514,7 +514,16 @@\n                 case 'f' :\n                 case 'F' :\n                     try {\n-                        Float f = NumberUtils.createFloat(numeric);\n+                        if (expPos > -1) {\n+\t\t\t\t\t\t\tif (expPos > str.length()) {\n+\t\t\t\t\t\t\t\tthrow new NumberFormatException(str\n+\t\t\t\t\t\t\t\t\t\t+ \" is not a valid number.\");\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tmant = str.substring(0, expPos);\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tmant = str;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tFloat f = NumberUtils.createFloat(numeric);\n                         if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                             //If it's too big for a float or the float value = 0 and the string\n                             //has non-zeros in it, then float does not have the precision we want\n@@ -542,7 +551,7 @@\n                     }\n                     //$FALL-THROUGH$\n                 default :\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t\treturn Integer.decode(str);\n \n             }\n         } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 545, 
          "faulty": "throw new NumberFormatException(str + \" is not a valid number.\");", 
          "type": "Replace", 
          "seed": "return Integer.decode(str);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 533, 
          "faulty": "return d;", 
          "type": "InsertBefore", 
          "seed": "mant=str;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:13:40.712736534 -0500\n+++ /tmp/Arja_Defects4J_Lang_16/patches_of36/Patch_645/patched/tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:17:52.856040143 -0500\n@@ -530,7 +530,8 @@\n                     try {\n                         Double d = NumberUtils.createDouble(numeric);\n                         if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {\n-                            return d;\n+                            mant = str;\n+\t\t\t\t\t\t\treturn d;\n                         }\n                     } catch (NumberFormatException nfe) { // NOPMD\n                         // ignore the bad number\n@@ -542,7 +543,7 @@\n                     }\n                     //$FALL-THROUGH$\n                 default :\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t\treturn Integer.decode(str);\n \n             }\n         } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 545, 
          "faulty": "throw new NumberFormatException(str + \" is not a valid number.\");", 
          "type": "Replace", 
          "seed": "return Integer.decode(str);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 517, 
          "faulty": "Float f=NumberUtils.createFloat(numeric);", 
          "type": "Replace", 
          "seed": "Float f=createFloat(str);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:13:40.712736534 -0500\n+++ /tmp/Arja_Defects4J_Lang_16/patches_of36/Patch_697/patched/tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:18:06.628002276 -0500\n@@ -514,7 +514,7 @@\n                 case 'f' :\n                 case 'F' :\n                     try {\n-                        Float f = NumberUtils.createFloat(numeric);\n+                        Float f = createFloat(str);\n                         if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                             //If it's too big for a float or the float value = 0 and the string\n                             //has non-zeros in it, then float does not have the precision we want\n@@ -542,7 +542,7 @@\n                     }\n                     //$FALL-THROUGH$\n                 default :\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t\treturn Integer.decode(str);\n \n             }\n         } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 545, 
          "faulty": "throw new NumberFormatException(str + \" is not a valid number.\");", 
          "type": "Replace", 
          "seed": "return Integer.decode(str);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 491, 
          "faulty": "if (expPos > -1 && expPos < str.length() - 1) {\n  exp=str.substring(expPos + 1,str.length() - 1);\n}\n else {\n  exp=null;\n}", 
          "type": "InsertBefore", 
          "seed": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n  return createInteger(str);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 466, 
          "faulty": "int expPos=str.indexOf('e') + str.indexOf('E') + 1;", 
          "type": "InsertBefore", 
          "seed": "exp=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 559, 
          "faulty": "return createInteger(str);", 
          "type": "InsertBefore", 
          "seed": "if (StringUtils.isBlank(str)) {\n  throw new NumberFormatException(\"A blank string is not a valid number\");\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:13:40.712736534 -0500\n+++ /tmp/Arja_Defects4J_Lang_16/patches_of36/Patch_443/patched/tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:16:59.436187190 -0500\n@@ -463,7 +463,8 @@\n         String dec;\n         String exp;\n         int decPos = str.indexOf('.');\n-        int expPos = str.indexOf('e') + str.indexOf('E') + 1;\n+        exp = null;\n+\t\tint expPos = str.indexOf('e') + str.indexOf('E') + 1;\n \n         if (decPos > -1) {\n \n@@ -488,7 +489,10 @@\n             dec = null;\n         }\n         if (!Character.isDigit(lastChar) && lastChar != '.') {\n-            if (expPos > -1 && expPos < str.length() - 1) {\n+            if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n+\t\t\t\treturn createInteger(str);\n+\t\t\t}\n+\t\t\tif (expPos > -1 && expPos < str.length() - 1) {\n                 exp = str.substring(expPos + 1, str.length() - 1);\n             } else {\n                 exp = null;\n@@ -542,7 +546,7 @@\n                     }\n                     //$FALL-THROUGH$\n                 default :\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t\treturn Integer.decode(str);\n \n             }\n         } else {\n@@ -556,7 +560,11 @@\n             if (dec == null && exp == null) {\n                 //Must be an int,long,bigint\n                 try {\n-                    return createInteger(str);\n+                    if (StringUtils.isBlank(str)) {\n+\t\t\t\t\t\tthrow new NumberFormatException(\n+\t\t\t\t\t\t\t\t\"A blank string is not a valid number\");\n+\t\t\t\t\t}\n+\t\t\t\t\treturn createInteger(str);\n                 } catch (NumberFormatException nfe) { // NOPMD\n                     // ignore the bad number\n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 545, 
          "faulty": "throw new NumberFormatException(str + \" is not a valid number.\");", 
          "type": "Replace", 
          "seed": "return Integer.decode(str);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 559, 
          "faulty": "return createInteger(str);", 
          "type": "InsertBefore", 
          "seed": "if (str == null) {\n  return null;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:13:40.712736534 -0500\n+++ /tmp/Arja_Defects4J_Lang_16/patches_of36/Patch_1041/patched/tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:19:40.467744686 -0500\n@@ -542,7 +542,7 @@\n                     }\n                     //$FALL-THROUGH$\n                 default :\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t\treturn Integer.decode(str);\n \n             }\n         } else {\n@@ -556,7 +556,10 @@\n             if (dec == null && exp == null) {\n                 //Must be an int,long,bigint\n                 try {\n-                    return createInteger(str);\n+                    if (str == null) {\n+\t\t\t\t\t\treturn null;\n+\t\t\t\t\t}\n+\t\t\t\t\treturn createInteger(str);\n                 } catch (NumberFormatException nfe) { // NOPMD\n                     // ignore the bad number\n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 545, 
          "faulty": "throw new NumberFormatException(str + \" is not a valid number.\");", 
          "type": "Replace", 
          "seed": "return Integer.decode(str);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 451, 
          "faulty": "if (str.startsWith(\"--\")) {\n  return null;\n}", 
          "type": "InsertBefore", 
          "seed": "if (str == null) {\n  throw new IllegalArgumentException(\"The string must not be null\");\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:13:40.712736534 -0500\n+++ /tmp/Arja_Defects4J_Lang_16/patches_of36/Patch_419/patched/tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:16:53.084204691 -0500\n@@ -448,7 +448,10 @@\n         if (StringUtils.isBlank(str)) {\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n-        if (str.startsWith(\"--\")) {\n+        if (str == null) {\n+\t\t\tthrow new IllegalArgumentException(\"The string must not be null\");\n+\t\t}\n+\t\tif (str.startsWith(\"--\")) {\n             // this is protection for poorness in java.lang.BigDecimal.\n             // it accepts this as a legal value, but it does not appear \n             // to be in specification of class. OS X Java parses it to \n@@ -542,7 +545,7 @@\n                     }\n                     //$FALL-THROUGH$\n                 default :\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t\treturn Integer.decode(str);\n \n             }\n         } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 545, 
          "faulty": "throw new NumberFormatException(str + \" is not a valid number.\");", 
          "type": "Replace", 
          "seed": "return Integer.decode(str);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 480, 
          "faulty": "if (expPos > -1) {\n  if (expPos > str.length()) {\n    throw new NumberFormatException(str + \" is not a valid number.\");\n  }\n  mant=str.substring(0,expPos);\n}\n else {\n  mant=str;\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > -1) {\n  if (expPos > str.length()) {\n    throw new NumberFormatException(str + \" is not a valid number.\");\n  }\n  mant=str.substring(0,expPos);\n}\n else {\n  mant=str;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:13:40.712736534 -0500\n+++ /tmp/Arja_Defects4J_Lang_16/patches_of36/Patch_715/patched/tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:18:11.351989290 -0500\n@@ -478,6 +478,15 @@\n             mant = str.substring(0, decPos);\n         } else {\n             if (expPos > -1) {\n+\t\t\t\tif (expPos > str.length()) {\n+\t\t\t\t\tthrow new NumberFormatException(str\n+\t\t\t\t\t\t\t+ \" is not a valid number.\");\n+\t\t\t\t}\n+\t\t\t\tmant = str.substring(0, expPos);\n+\t\t\t} else {\n+\t\t\t\tmant = str;\n+\t\t\t}\n+\t\t\tif (expPos > -1) {\n                 if (expPos > str.length()) {\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n                 }\n@@ -542,7 +551,7 @@\n                     }\n                     //$FALL-THROUGH$\n                 default :\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t\treturn Integer.decode(str);\n \n             }\n         } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 545, 
          "faulty": "throw new NumberFormatException(str + \" is not a valid number.\");", 
          "type": "Replace", 
          "seed": "return Integer.decode(str);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:13:40.712736534 -0500\n+++ /tmp/Arja_Defects4J_Lang_16/patches_of36/Patch_391/patched/tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:16:45.604225306 -0500\n@@ -542,7 +542,7 @@\n                     }\n                     //$FALL-THROUGH$\n                 default :\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t\treturn Integer.decode(str);\n \n             }\n         } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 545, 
          "faulty": "throw new NumberFormatException(str + \" is not a valid number.\");", 
          "type": "Replace", 
          "seed": "return Integer.decode(str);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 574, 
          "faulty": "Float f=createFloat(str);", 
          "type": "InsertBefore", 
          "seed": "if (expPos > -1 && expPos < str.length() - 1) {\n  exp=str.substring(expPos + 1,str.length() - 1);\n}\n else {\n  exp=null;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 458, 
          "faulty": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n  return createInteger(str);\n}", 
          "type": "Replace", 
          "seed": "if (str == null) {\n  throw new IllegalArgumentException(\"The string must not be null\");\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:13:40.712736534 -0500\n+++ /tmp/Arja_Defects4J_Lang_16/patches_of36/Patch_1135/patched/tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:20:10.083663546 -0500\n@@ -455,9 +455,9 @@\n             // a wrong value.\n             return null;\n         }\n-        if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n-            return createInteger(str);\n-        }   \n+        if (str == null) {\n+\t\t\tthrow new IllegalArgumentException(\"The string must not be null\");\n+\t\t}   \n         char lastChar = str.charAt(str.length() - 1);\n         String mant;\n         String dec;\n@@ -542,7 +542,7 @@\n                     }\n                     //$FALL-THROUGH$\n                 default :\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t\treturn Integer.decode(str);\n \n             }\n         } else {\n@@ -571,7 +571,12 @@\n                 //Must be a float,double,BigDec\n                 boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n                 try {\n-                    Float f = createFloat(str);\n+                    if (expPos > -1 && expPos < str.length() - 1) {\n+\t\t\t\t\t\texp = str.substring(expPos + 1, str.length() - 1);\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\texp = null;\n+\t\t\t\t\t}\n+\t\t\t\t\tFloat f = createFloat(str);\n                     if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                         return f;\n                     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 572, 
          "faulty": "boolean allZeros=isAllZeros(mant) && isAllZeros(exp);", 
          "type": "InsertBefore", 
          "seed": "if (str == null) {\n  throw new IllegalArgumentException(\"The string must not be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 545, 
          "faulty": "throw new NumberFormatException(str + \" is not a valid number.\");", 
          "type": "Replace", 
          "seed": "return Integer.decode(str);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:13:40.712736534 -0500\n+++ /tmp/Arja_Defects4J_Lang_16/patches_of36/Patch_805/patched/tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:18:34.575925479 -0500\n@@ -542,7 +542,7 @@\n                     }\n                     //$FALL-THROUGH$\n                 default :\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t\treturn Integer.decode(str);\n \n             }\n         } else {\n@@ -568,7 +568,11 @@\n                 return createBigInteger(str);\n \n             } else {\n-                //Must be a float,double,BigDec\n+                if (str == null) {\n+\t\t\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\t\t\"The string must not be null\");\n+\t\t\t\t}\n+\t\t\t\t//Must be a float,double,BigDec\n                 boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n                 try {\n                     Float f = createFloat(str);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 470, 
          "faulty": "if (expPos > -1) {\n  if (expPos < decPos || expPos > str.length()) {\n    throw new NumberFormatException(str + \" is not a valid number.\");\n  }\n  dec=str.substring(decPos + 1,expPos);\n}\n else {\n  dec=str.substring(decPos + 1);\n}", 
          "type": "InsertBefore", 
          "seed": "if (StringUtils.isBlank(str)) {\n  throw new NumberFormatException(\"A blank string is not a valid number\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 545, 
          "faulty": "throw new NumberFormatException(str + \" is not a valid number.\");", 
          "type": "Replace", 
          "seed": "return Integer.decode(str);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 564, 
          "faulty": "return createLong(str);", 
          "type": "InsertBefore", 
          "seed": "exp=str.substring(expPos + 1,str.length());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 458, 
          "faulty": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n  return createInteger(str);\n}", 
          "type": "Replace", 
          "seed": "if (StringUtils.isBlank(str)) {\n  throw new NumberFormatException(\"A blank string is not a valid number\");\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:13:40.712736534 -0500\n+++ /tmp/Arja_Defects4J_Lang_16/patches_of36/Patch_1202/patched/tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:20:28.335613576 -0500\n@@ -455,9 +455,10 @@\n             // a wrong value.\n             return null;\n         }\n-        if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n-            return createInteger(str);\n-        }   \n+        if (StringUtils.isBlank(str)) {\n+\t\t\tthrow new NumberFormatException(\n+\t\t\t\t\t\"A blank string is not a valid number\");\n+\t\t}   \n         char lastChar = str.charAt(str.length() - 1);\n         String mant;\n         String dec;\n@@ -467,7 +468,11 @@\n \n         if (decPos > -1) {\n \n-            if (expPos > -1) {\n+            if (StringUtils.isBlank(str)) {\n+\t\t\t\tthrow new NumberFormatException(\n+\t\t\t\t\t\t\"A blank string is not a valid number\");\n+\t\t\t}\n+\t\t\tif (expPos > -1) {\n                 if (expPos < decPos || expPos > str.length()) {\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n                 }\n@@ -542,7 +547,7 @@\n                     }\n                     //$FALL-THROUGH$\n                 default :\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t\treturn Integer.decode(str);\n \n             }\n         } else {\n@@ -561,7 +566,8 @@\n                     // ignore the bad number\n                 }\n                 try {\n-                    return createLong(str);\n+                    exp = str.substring(expPos + 1, str.length());\n+\t\t\t\t\treturn createLong(str);\n                 } catch (NumberFormatException nfe) { // NOPMD\n                     // ignore the bad number\n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 545, 
          "faulty": "throw new NumberFormatException(str + \" is not a valid number.\");", 
          "type": "Replace", 
          "seed": "return Integer.decode(str);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 484, 
          "faulty": "mant=str.substring(0,expPos);", 
          "type": "InsertBefore", 
          "seed": "exp=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 448, 
          "faulty": "if (StringUtils.isBlank(str)) {\n  throw new NumberFormatException(\"A blank string is not a valid number\");\n}", 
          "type": "InsertBefore", 
          "seed": "if (StringUtils.isBlank(str)) {\n  throw new NumberFormatException(\"A blank string is not a valid number\");\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:13:40.712736534 -0500\n+++ /tmp/Arja_Defects4J_Lang_16/patches_of36/Patch_460/patched/tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:17:03.536175894 -0500\n@@ -446,6 +446,10 @@\n             return null;\n         }\n         if (StringUtils.isBlank(str)) {\n+\t\t\tthrow new NumberFormatException(\n+\t\t\t\t\t\"A blank string is not a valid number\");\n+\t\t}\n+\t\tif (StringUtils.isBlank(str)) {\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n@@ -481,7 +485,8 @@\n                 if (expPos > str.length()) {\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n                 }\n-                mant = str.substring(0, expPos);\n+                exp = null;\n+\t\t\t\tmant = str.substring(0, expPos);\n             } else {\n                 mant = str;\n             }\n@@ -542,7 +547,7 @@\n                     }\n                     //$FALL-THROUGH$\n                 default :\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t\treturn Integer.decode(str);\n \n             }\n         } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 545, 
          "faulty": "throw new NumberFormatException(str + \" is not a valid number.\");", 
          "type": "Replace", 
          "seed": "return Integer.decode(str);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 564, 
          "faulty": "return createLong(str);", 
          "type": "InsertBefore", 
          "seed": "exp=str.substring(expPos + 1,str.length());"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:13:40.712736534 -0500\n+++ /tmp/Arja_Defects4J_Lang_16/patches_of36/Patch_662/patched/tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:17:57.328027846 -0500\n@@ -542,7 +542,7 @@\n                     }\n                     //$FALL-THROUGH$\n                 default :\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t\treturn Integer.decode(str);\n \n             }\n         } else {\n@@ -561,7 +561,8 @@\n                     // ignore the bad number\n                 }\n                 try {\n-                    return createLong(str);\n+                    exp = str.substring(expPos + 1, str.length());\n+\t\t\t\t\treturn createLong(str);\n                 } catch (NumberFormatException nfe) { // NOPMD\n                     // ignore the bad number\n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 545, 
          "faulty": "throw new NumberFormatException(str + \" is not a valid number.\");", 
          "type": "Replace", 
          "seed": "return Integer.decode(str);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 448, 
          "faulty": "if (StringUtils.isBlank(str)) {\n  throw new NumberFormatException(\"A blank string is not a valid number\");\n}", 
          "type": "InsertBefore", 
          "seed": "if (StringUtils.isBlank(str)) {\n  throw new NumberFormatException(\"A blank string is not a valid number\");\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:13:40.712736534 -0500\n+++ /tmp/Arja_Defects4J_Lang_16/patches_of36/Patch_1258/patched/tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:20:45.099567705 -0500\n@@ -446,6 +446,10 @@\n             return null;\n         }\n         if (StringUtils.isBlank(str)) {\n+\t\t\tthrow new NumberFormatException(\n+\t\t\t\t\t\"A blank string is not a valid number\");\n+\t\t}\n+\t\tif (StringUtils.isBlank(str)) {\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n@@ -542,7 +546,7 @@\n                     }\n                     //$FALL-THROUGH$\n                 default :\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t\treturn Integer.decode(str);\n \n             }\n         } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 545, 
          "faulty": "throw new NumberFormatException(str + \" is not a valid number.\");", 
          "type": "Replace", 
          "seed": "return Integer.decode(str);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 551, 
          "faulty": "if (expPos > -1 && expPos < str.length() - 1) {\n  exp=str.substring(expPos + 1,str.length());\n}\n else {\n  exp=null;\n}", 
          "type": "InsertBefore", 
          "seed": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n  return createInteger(str);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 480, 
          "faulty": "if (expPos > -1) {\n  if (expPos > str.length()) {\n    throw new NumberFormatException(str + \" is not a valid number.\");\n  }\n  mant=str.substring(0,expPos);\n}\n else {\n  mant=str;\n}", 
          "type": "InsertBefore", 
          "seed": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n  return createInteger(str);\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:13:40.712736534 -0500\n+++ /tmp/Arja_Defects4J_Lang_16/patches_of36/Patch_1199/patched/tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:20:27.791615065 -0500\n@@ -477,7 +477,10 @@\n             }\n             mant = str.substring(0, decPos);\n         } else {\n-            if (expPos > -1) {\n+            if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n+\t\t\t\treturn createInteger(str);\n+\t\t\t}\n+\t\t\tif (expPos > -1) {\n                 if (expPos > str.length()) {\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n                 }\n@@ -542,11 +545,14 @@\n                     }\n                     //$FALL-THROUGH$\n                 default :\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t\treturn Integer.decode(str);\n \n             }\n         } else {\n-            //User doesn't have a preference on the return type, so let's start\n+            if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n+\t\t\t\treturn createInteger(str);\n+\t\t\t}\n+\t\t\t//User doesn't have a preference on the return type, so let's start\n             //small and go from there...\n             if (expPos > -1 && expPos < str.length() - 1) {\n                 exp = str.substring(expPos + 1, str.length());\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 545, 
          "faulty": "throw new NumberFormatException(str + \" is not a valid number.\");", 
          "type": "Replace", 
          "seed": "return Integer.decode(str);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 466, 
          "faulty": "int expPos=str.indexOf('e') + str.indexOf('E') + 1;", 
          "type": "InsertBefore", 
          "seed": "exp=null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:13:40.712736534 -0500\n+++ /tmp/Arja_Defects4J_Lang_16/patches_of36/Patch_1019/patched/tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:19:35.339758743 -0500\n@@ -463,7 +463,8 @@\n         String dec;\n         String exp;\n         int decPos = str.indexOf('.');\n-        int expPos = str.indexOf('e') + str.indexOf('E') + 1;\n+        exp = null;\n+\t\tint expPos = str.indexOf('e') + str.indexOf('E') + 1;\n \n         if (decPos > -1) {\n \n@@ -542,7 +543,7 @@\n                     }\n                     //$FALL-THROUGH$\n                 default :\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t\treturn Integer.decode(str);\n \n             }\n         } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 545, 
          "faulty": "throw new NumberFormatException(str + \" is not a valid number.\");", 
          "type": "Replace", 
          "seed": "return Integer.decode(str);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 461, 
          "faulty": "char lastChar=str.charAt(str.length() - 1);", 
          "type": "InsertBefore", 
          "seed": "if (str == null) {\n  throw new IllegalArgumentException(\"The string must not be null\");\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:13:40.712736534 -0500\n+++ /tmp/Arja_Defects4J_Lang_16/patches_of36/Patch_1440/patched/tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:21:34.223433416 -0500\n@@ -458,7 +458,10 @@\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n             return createInteger(str);\n         }   \n-        char lastChar = str.charAt(str.length() - 1);\n+        if (str == null) {\n+\t\t\tthrow new IllegalArgumentException(\"The string must not be null\");\n+\t\t}\n+\t\tchar lastChar = str.charAt(str.length() - 1);\n         String mant;\n         String dec;\n         String exp;\n@@ -542,7 +545,7 @@\n                     }\n                     //$FALL-THROUGH$\n                 default :\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t\treturn Integer.decode(str);\n \n             }\n         } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 545, 
          "faulty": "throw new NumberFormatException(str + \" is not a valid number.\");", 
          "type": "Replace", 
          "seed": "return Integer.decode(str);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 451, 
          "faulty": "if (str.startsWith(\"--\")) {\n  return null;\n}", 
          "type": "InsertBefore", 
          "seed": "if (str == null) {\n  throw new IllegalArgumentException(\"The string must not be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 533, 
          "faulty": "return d;", 
          "type": "InsertBefore", 
          "seed": "mant=str;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:13:40.712736534 -0500\n+++ /tmp/Arja_Defects4J_Lang_16/patches_of36/Patch_750/patched/tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:18:20.463964248 -0500\n@@ -448,7 +448,10 @@\n         if (StringUtils.isBlank(str)) {\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n-        if (str.startsWith(\"--\")) {\n+        if (str == null) {\n+\t\t\tthrow new IllegalArgumentException(\"The string must not be null\");\n+\t\t}\n+\t\tif (str.startsWith(\"--\")) {\n             // this is protection for poorness in java.lang.BigDecimal.\n             // it accepts this as a legal value, but it does not appear \n             // to be in specification of class. OS X Java parses it to \n@@ -530,7 +533,8 @@\n                     try {\n                         Double d = NumberUtils.createDouble(numeric);\n                         if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {\n-                            return d;\n+                            mant = str;\n+\t\t\t\t\t\t\treturn d;\n                         }\n                     } catch (NumberFormatException nfe) { // NOPMD\n                         // ignore the bad number\n@@ -542,7 +546,7 @@\n                     }\n                     //$FALL-THROUGH$\n                 default :\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t\treturn Integer.decode(str);\n \n             }\n         } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 465, 
          "faulty": "int decPos=str.indexOf('.');", 
          "type": "InsertBefore", 
          "seed": "if (str == null) {\n  throw new IllegalArgumentException(\"The string must not be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 545, 
          "faulty": "throw new NumberFormatException(str + \" is not a valid number.\");", 
          "type": "Replace", 
          "seed": "return Integer.decode(str);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 466, 
          "faulty": "int expPos=str.indexOf('e') + str.indexOf('E') + 1;", 
          "type": "InsertBefore", 
          "seed": "exp=null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:13:40.712736534 -0500\n+++ /tmp/Arja_Defects4J_Lang_16/patches_of36/Patch_1451/patched/tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:21:36.923426040 -0500\n@@ -462,8 +462,12 @@\n         String mant;\n         String dec;\n         String exp;\n-        int decPos = str.indexOf('.');\n-        int expPos = str.indexOf('e') + str.indexOf('E') + 1;\n+        if (str == null) {\n+\t\t\tthrow new IllegalArgumentException(\"The string must not be null\");\n+\t\t}\n+\t\tint decPos = str.indexOf('.');\n+        exp = null;\n+\t\tint expPos = str.indexOf('e') + str.indexOf('E') + 1;\n \n         if (decPos > -1) {\n \n@@ -542,7 +546,7 @@\n                     }\n                     //$FALL-THROUGH$\n                 default :\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t\treturn Integer.decode(str);\n \n             }\n         } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 545, 
          "faulty": "throw new NumberFormatException(str + \" is not a valid number.\");", 
          "type": "Replace", 
          "seed": "return Integer.decode(str);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 491, 
          "faulty": "if (expPos > -1 && expPos < str.length() - 1) {\n  exp=str.substring(expPos + 1,str.length() - 1);\n}\n else {\n  exp=null;\n}", 
          "type": "InsertBefore", 
          "seed": "if (str.startsWith(\"--\")) {\n  return null;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 517, 
          "faulty": "Float f=NumberUtils.createFloat(numeric);", 
          "type": "Replace", 
          "seed": "Float f=createFloat(str);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:13:40.712736534 -0500\n+++ /tmp/Arja_Defects4J_Lang_16/patches_of36/Patch_1000/patched/tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:19:30.427772210 -0500\n@@ -488,7 +488,10 @@\n             dec = null;\n         }\n         if (!Character.isDigit(lastChar) && lastChar != '.') {\n-            if (expPos > -1 && expPos < str.length() - 1) {\n+            if (str.startsWith(\"--\")) {\n+\t\t\t\treturn null;\n+\t\t\t}\n+\t\t\tif (expPos > -1 && expPos < str.length() - 1) {\n                 exp = str.substring(expPos + 1, str.length() - 1);\n             } else {\n                 exp = null;\n@@ -514,7 +517,7 @@\n                 case 'f' :\n                 case 'F' :\n                     try {\n-                        Float f = NumberUtils.createFloat(numeric);\n+                        Float f = createFloat(str);\n                         if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                             //If it's too big for a float or the float value = 0 and the string\n                             //has non-zeros in it, then float does not have the precision we want\n@@ -542,7 +545,7 @@\n                     }\n                     //$FALL-THROUGH$\n                 default :\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t\treturn Integer.decode(str);\n \n             }\n         } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 545, 
          "faulty": "throw new NumberFormatException(str + \" is not a valid number.\");", 
          "type": "Replace", 
          "seed": "return Integer.decode(str);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 451, 
          "faulty": "if (str.startsWith(\"--\")) {\n  return null;\n}", 
          "type": "InsertBefore", 
          "seed": "if (str == null) {\n  return null;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 461, 
          "faulty": "char lastChar=str.charAt(str.length() - 1);", 
          "type": "InsertBefore", 
          "seed": "if (str.startsWith(\"--\")) {\n  return null;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:13:40.712736534 -0500\n+++ /tmp/Arja_Defects4J_Lang_16/patches_of36/Patch_872/patched/tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:18:51.127880030 -0500\n@@ -448,7 +448,10 @@\n         if (StringUtils.isBlank(str)) {\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n-        if (str.startsWith(\"--\")) {\n+        if (str == null) {\n+\t\t\treturn null;\n+\t\t}\n+\t\tif (str.startsWith(\"--\")) {\n             // this is protection for poorness in java.lang.BigDecimal.\n             // it accepts this as a legal value, but it does not appear \n             // to be in specification of class. OS X Java parses it to \n@@ -458,7 +461,10 @@\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n             return createInteger(str);\n         }   \n-        char lastChar = str.charAt(str.length() - 1);\n+        if (str.startsWith(\"--\")) {\n+\t\t\treturn null;\n+\t\t}\n+\t\tchar lastChar = str.charAt(str.length() - 1);\n         String mant;\n         String dec;\n         String exp;\n@@ -542,7 +548,7 @@\n                     }\n                     //$FALL-THROUGH$\n                 default :\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t\treturn Integer.decode(str);\n \n             }\n         } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 545, 
          "faulty": "throw new NumberFormatException(str + \" is not a valid number.\");", 
          "type": "Replace", 
          "seed": "return Integer.decode(str);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 491, 
          "faulty": "if (expPos > -1 && expPos < str.length() - 1) {\n  exp=str.substring(expPos + 1,str.length() - 1);\n}\n else {\n  exp=null;\n}", 
          "type": "InsertBefore", 
          "seed": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n  return createInteger(str);\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:13:40.712736534 -0500\n+++ /tmp/Arja_Defects4J_Lang_16/patches_of36/Patch_816/patched/tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:18:37.031918734 -0500\n@@ -488,7 +488,10 @@\n             dec = null;\n         }\n         if (!Character.isDigit(lastChar) && lastChar != '.') {\n-            if (expPos > -1 && expPos < str.length() - 1) {\n+            if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n+\t\t\t\treturn createInteger(str);\n+\t\t\t}\n+\t\t\tif (expPos > -1 && expPos < str.length() - 1) {\n                 exp = str.substring(expPos + 1, str.length() - 1);\n             } else {\n                 exp = null;\n@@ -542,7 +545,7 @@\n                     }\n                     //$FALL-THROUGH$\n                 default :\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t\treturn Integer.decode(str);\n \n             }\n         } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 545, 
          "faulty": "throw new NumberFormatException(str + \" is not a valid number.\");", 
          "type": "Replace", 
          "seed": "return Integer.decode(str);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 574, 
          "faulty": "Float f=createFloat(str);", 
          "type": "InsertBefore", 
          "seed": "if (expPos > -1 && expPos < str.length() - 1) {\n  exp=str.substring(expPos + 1,str.length() - 1);\n}\n else {\n  exp=null;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:13:40.712736534 -0500\n+++ /tmp/Arja_Defects4J_Lang_16/patches_of36/Patch_765/patched/tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:18:24.243953862 -0500\n@@ -542,7 +542,7 @@\n                     }\n                     //$FALL-THROUGH$\n                 default :\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t\treturn Integer.decode(str);\n \n             }\n         } else {\n@@ -571,7 +571,12 @@\n                 //Must be a float,double,BigDec\n                 boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n                 try {\n-                    Float f = createFloat(str);\n+                    if (expPos > -1 && expPos < str.length() - 1) {\n+\t\t\t\t\t\texp = str.substring(expPos + 1, str.length() - 1);\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\texp = null;\n+\t\t\t\t\t}\n+\t\t\t\t\tFloat f = createFloat(str);\n                     if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                         return f;\n                     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 545, 
          "faulty": "throw new NumberFormatException(str + \" is not a valid number.\");", 
          "type": "Replace", 
          "seed": "return Integer.decode(str);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 564, 
          "faulty": "return createLong(str);", 
          "type": "InsertBefore", 
          "seed": "exp=str.substring(expPos + 1,str.length());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 461, 
          "faulty": "char lastChar=str.charAt(str.length() - 1);", 
          "type": "InsertBefore", 
          "seed": "if (str == null) {\n  return null;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:13:40.712736534 -0500\n+++ /tmp/Arja_Defects4J_Lang_16/patches_of36/Patch_1469/patched/tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:21:41.523413476 -0500\n@@ -458,7 +458,10 @@\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n             return createInteger(str);\n         }   \n-        char lastChar = str.charAt(str.length() - 1);\n+        if (str == null) {\n+\t\t\treturn null;\n+\t\t}\n+\t\tchar lastChar = str.charAt(str.length() - 1);\n         String mant;\n         String dec;\n         String exp;\n@@ -542,7 +545,7 @@\n                     }\n                     //$FALL-THROUGH$\n                 default :\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t\treturn Integer.decode(str);\n \n             }\n         } else {\n@@ -561,7 +564,8 @@\n                     // ignore the bad number\n                 }\n                 try {\n-                    return createLong(str);\n+                    exp = str.substring(expPos + 1, str.length());\n+\t\t\t\t\treturn createLong(str);\n                 } catch (NumberFormatException nfe) { // NOPMD\n                     // ignore the bad number\n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 545, 
          "faulty": "throw new NumberFormatException(str + \" is not a valid number.\");", 
          "type": "Replace", 
          "seed": "return Integer.decode(str);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 488, 
          "faulty": "dec=null;", 
          "type": "Delete", 
          "seed": "if (dec == null && exp == null) {\n  try {\n    return createInteger(str);\n  }\n catch (  NumberFormatException nfe) {\n  }\n  try {\n    return createLong(str);\n  }\n catch (  NumberFormatException nfe) {\n  }\n  return createBigInteger(str);\n}\n else {\n  boolean allZeros=isAllZeros(mant) && isAllZeros(exp);\n  try {\n    Float f=createFloat(str);\n    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n      return f;\n    }\n  }\n catch (  NumberFormatException nfe) {\n  }\n  try {\n    Double d=createDouble(str);\n    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n      return d;\n    }\n  }\n catch (  NumberFormatException nfe) {\n  }\n  return createBigDecimal(str);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 480, 
          "faulty": "if (expPos > -1) {\n  if (expPos > str.length()) {\n    throw new NumberFormatException(str + \" is not a valid number.\");\n  }\n  mant=str.substring(0,expPos);\n}\n else {\n  mant=str;\n}", 
          "type": "InsertBefore", 
          "seed": "if (decPos > -1) {\n  if (expPos > -1) {\n    if (expPos < decPos || expPos > str.length()) {\n      throw new NumberFormatException(str + \" is not a valid number.\");\n    }\n    dec=str.substring(decPos + 1,expPos);\n  }\n else {\n    dec=str.substring(decPos + 1);\n  }\n  mant=str.substring(0,decPos);\n}\n else {\n  if (expPos > -1) {\n    if (expPos > str.length()) {\n      throw new NumberFormatException(str + \" is not a valid number.\");\n    }\n    mant=str.substring(0,expPos);\n  }\n else {\n    mant=str;\n  }\n  dec=null;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:13:40.712736534 -0500\n+++ /tmp/Arja_Defects4J_Lang_16/patches_of36/Patch_1081/patched/tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:19:54.263706879 -0500\n@@ -477,7 +477,30 @@\n             }\n             mant = str.substring(0, decPos);\n         } else {\n-            if (expPos > -1) {\n+            if (decPos > -1) {\n+\t\t\t\tif (expPos > -1) {\n+\t\t\t\t\tif (expPos < decPos || expPos > str.length()) {\n+\t\t\t\t\t\tthrow new NumberFormatException(str\n+\t\t\t\t\t\t\t\t+ \" is not a valid number.\");\n+\t\t\t\t\t}\n+\t\t\t\t\tdec = str.substring(decPos + 1, expPos);\n+\t\t\t\t} else {\n+\t\t\t\t\tdec = str.substring(decPos + 1);\n+\t\t\t\t}\n+\t\t\t\tmant = str.substring(0, decPos);\n+\t\t\t} else {\n+\t\t\t\tif (expPos > -1) {\n+\t\t\t\t\tif (expPos > str.length()) {\n+\t\t\t\t\t\tthrow new NumberFormatException(str\n+\t\t\t\t\t\t\t\t+ \" is not a valid number.\");\n+\t\t\t\t\t}\n+\t\t\t\t\tmant = str.substring(0, expPos);\n+\t\t\t\t} else {\n+\t\t\t\t\tmant = str;\n+\t\t\t\t}\n+\t\t\t\tdec = null;\n+\t\t\t}\n+\t\t\tif (expPos > -1) {\n                 if (expPos > str.length()) {\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n                 }\n@@ -485,7 +508,6 @@\n             } else {\n                 mant = str;\n             }\n-            dec = null;\n         }\n         if (!Character.isDigit(lastChar) && lastChar != '.') {\n             if (expPos > -1 && expPos < str.length() - 1) {\n@@ -542,7 +564,7 @@\n                     }\n                     //$FALL-THROUGH$\n                 default :\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t\treturn Integer.decode(str);\n \n             }\n         } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 545, 
          "faulty": "throw new NumberFormatException(str + \" is not a valid number.\");", 
          "type": "Replace", 
          "seed": "return Integer.decode(str);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 458, 
          "faulty": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n  return createInteger(str);\n}", 
          "type": "Replace", 
          "seed": "if (str == null) {\n  throw new IllegalArgumentException(\"The string must not be null\");\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:13:40.712736534 -0500\n+++ /tmp/Arja_Defects4J_Lang_16/patches_of36/Patch_882/patched/tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:18:53.547873386 -0500\n@@ -455,9 +455,9 @@\n             // a wrong value.\n             return null;\n         }\n-        if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n-            return createInteger(str);\n-        }   \n+        if (str == null) {\n+\t\t\tthrow new IllegalArgumentException(\"The string must not be null\");\n+\t\t}   \n         char lastChar = str.charAt(str.length() - 1);\n         String mant;\n         String dec;\n@@ -542,7 +542,7 @@\n                     }\n                     //$FALL-THROUGH$\n                 default :\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t\treturn Integer.decode(str);\n \n             }\n         } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 545, 
          "faulty": "throw new NumberFormatException(str + \" is not a valid number.\");", 
          "type": "Replace", 
          "seed": "return Integer.decode(str);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 458, 
          "faulty": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n  return createInteger(str);\n}", 
          "type": "Replace", 
          "seed": "if (StringUtils.isBlank(str)) {\n  throw new NumberFormatException(\"A blank string is not a valid number\");\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:13:40.712736534 -0500\n+++ /tmp/Arja_Defects4J_Lang_16/patches_of36/Patch_828/patched/tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:18:40.003910572 -0500\n@@ -455,9 +455,10 @@\n             // a wrong value.\n             return null;\n         }\n-        if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n-            return createInteger(str);\n-        }   \n+        if (StringUtils.isBlank(str)) {\n+\t\t\tthrow new NumberFormatException(\n+\t\t\t\t\t\"A blank string is not a valid number\");\n+\t\t}   \n         char lastChar = str.charAt(str.length() - 1);\n         String mant;\n         String dec;\n@@ -542,7 +543,7 @@\n                     }\n                     //$FALL-THROUGH$\n                 default :\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t\treturn Integer.decode(str);\n \n             }\n         } else {\n\n\n"
    }
  ]
}