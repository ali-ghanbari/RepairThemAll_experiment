{
  "repair_end": "2018-12-01 11:52:42.272337", 
  "repair_begin": "2018-12-01 11:13:26.189604", 
  "patches": [
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:13:18.647839255 -0500\n+++ /tmp/Arja_Defects4J_Lang_22/patches_2h8q/Patch_817/patched/tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:32:07.856708265 -0500\n@@ -582,7 +582,6 @@\n         // From Commons Math:\n         //if either operand is abs 1, return 1:\n         if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n-            return 1;\n         }\n         // keep u and v negative, as negative integers range down to\n         // -2^31, while positive numbers can only be as large as 2^31-1\n@@ -593,7 +592,10 @@\n         // B1. [Find power of 2]\n         int k=0;\n         while ((u&1)==0 && (v&1)==0 && k<31) { // while u and v are both even...\n-            u/=2; v/=2; k++; // cast out twos.\n+            if (v > 0) {\n+\t\t\t\tv = -v;\n+\t\t\t}\n+\t\t\tu/=2; v/=2; k++; // cast out twos.\n         }\n         if (k==31) {\n             throw new ArithmeticException(\"overflow: gcd is 2^31\");\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 585, 
          "faulty": "return 1;", 
          "type": "Delete", 
          "seed": "u=-u;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 596, 
          "faulty": "u/=2;", 
          "type": "InsertBefore", 
          "seed": "if (v > 0) {\n  v=-v;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:13:18.647839255 -0500\n+++ /tmp/Arja_Defects4J_Lang_22/patches_2h8q/Patch_385/patched/tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:23:55.250575960 -0500\n@@ -472,7 +472,11 @@\n      * @return a new reduced fraction instance, or this if no simplification possible\n      */\n     public Fraction reduce() {\n-        if (numerator == 0) {\n+        if (denominator < 0) {\n+\t\t\tthrow new ArithmeticException(\n+\t\t\t\t\t\"The denominator must not be negative\");\n+\t\t}\n+\t\tif (numerator == 0) {\n             return equals(ZERO) ? this : ZERO;\n         }\n         int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\n@@ -582,7 +586,6 @@\n         // From Commons Math:\n         //if either operand is abs 1, return 1:\n         if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n-            return 1;\n         }\n         // keep u and v negative, as negative integers range down to\n         // -2^31, while positive numbers can only be as large as 2^31-1\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 585, 
          "faulty": "return 1;", 
          "type": "Delete", 
          "seed": "if (u > 0) {\n  u=-u;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 475, 
          "faulty": "if (numerator == 0) {\n  return equals(ZERO) ? this : ZERO;\n}", 
          "type": "InsertBefore", 
          "seed": "if (denominator < 0) {\n  throw new ArithmeticException(\"The denominator must not be negative\");\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:13:18.647839255 -0500\n+++ /tmp/Arja_Defects4J_Lang_22/patches_2h8q/Patch_414/patched/tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:24:09.874639302 -0500\n@@ -475,7 +475,7 @@\n         if (numerator == 0) {\n             return equals(ZERO) ? this : ZERO;\n         }\n-        int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\n+        int gcd = greatestCommonDivisor(numerator, denominator);\n         if (gcd == 1) {\n             return this;\n         }\n@@ -582,7 +582,7 @@\n         // From Commons Math:\n         //if either operand is abs 1, return 1:\n         if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n-            return 1;\n+            v = -v;\n         }\n         // keep u and v negative, as negative integers range down to\n         // -2^31, while positive numbers can only be as large as 2^31-1\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 585, 
          "faulty": "return 1;", 
          "type": "Replace", 
          "seed": "v=-v;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 478, 
          "faulty": "int gcd=greatestCommonDivisor(Math.abs(numerator),denominator);", 
          "type": "Replace", 
          "seed": "int gcd=greatestCommonDivisor(numerator,denominator);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:13:18.647839255 -0500\n+++ /tmp/Arja_Defects4J_Lang_22/patches_2h8q/Patch_478/patched/tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:25:31.650993457 -0500\n@@ -582,7 +582,6 @@\n         // From Commons Math:\n         //if either operand is abs 1, return 1:\n         if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n-            return 1;\n         }\n         // keep u and v negative, as negative integers range down to\n         // -2^31, while positive numbers can only be as large as 2^31-1\n@@ -598,7 +597,10 @@\n         if (k==31) {\n             throw new ArithmeticException(\"overflow: gcd is 2^31\");\n         }\n-        // B2. Initialize: u and v have been divided by 2^k and at least\n+        if (v > 0) {\n+\t\t\tv = -v;\n+\t\t}\n+\t\t// B2. Initialize: u and v have been divided by 2^k and at least\n         //     one is odd.\n         int t = ((u&1)==1) ? v : -(u/2)/*B3*/;\n         // t negative: u was odd, v may be even (t replaces v)\n@@ -841,9 +843,6 @@\n      */\n     @Override\n     public boolean equals(Object obj) {\n-        if (obj == this) {\n-            return true;\n-        }\n         if (obj instanceof Fraction == false) {\n             return false;\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 585, 
          "faulty": "return 1;", 
          "type": "Delete", 
          "seed": "v=-v;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 844, 
          "faulty": "if (obj == this) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "if (obj == this) {\n  return true;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 603, 
          "faulty": "int t=((u & 1) == 1) ? v : -(u / 2);", 
          "type": "InsertBefore", 
          "seed": "if (v > 0) {\n  v=-v;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:13:18.647839255 -0500\n+++ /tmp/Arja_Defects4J_Lang_22/patches_2h8q/Patch_1093/patched/tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:36:59.861971020 -0500\n@@ -213,7 +213,11 @@\n      */\n     public static Fraction getReducedFraction(int numerator, int denominator) {\n         if (denominator == 0) {\n-            throw new ArithmeticException(\"The denominator must not be zero\");\n+            if (numerator == Integer.MIN_VALUE\n+\t\t\t\t\t|| denominator == Integer.MIN_VALUE) {\n+\t\t\t\tthrow new ArithmeticException(\"overflow: can't negate\");\n+\t\t\t}\n+\t\t\tthrow new ArithmeticException(\"The denominator must not be zero\");\n         }\n         if (numerator==0) {\n             return ZERO; // normalize zero.\n@@ -582,7 +586,6 @@\n         // From Commons Math:\n         //if either operand is abs 1, return 1:\n         if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n-            return 1;\n         }\n         // keep u and v negative, as negative integers range down to\n         // -2^31, while positive numbers can only be as large as 2^31-1\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 585, 
          "faulty": "return 1;", 
          "type": "Delete", 
          "seed": "v=-v;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 216, 
          "faulty": "throw new ArithmeticException(\"The denominator must not be zero\");", 
          "type": "InsertBefore", 
          "seed": "if (numerator == Integer.MIN_VALUE || denominator == Integer.MIN_VALUE) {\n  throw new ArithmeticException(\"overflow: can't negate\");\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:13:18.647839255 -0500\n+++ /tmp/Arja_Defects4J_Lang_22/patches_2h8q/Patch_1002/patched/tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:35:12.973508889 -0500\n@@ -582,7 +582,6 @@\n         // From Commons Math:\n         //if either operand is abs 1, return 1:\n         if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n-            return 1;\n         }\n         // keep u and v negative, as negative integers range down to\n         // -2^31, while positive numbers can only be as large as 2^31-1\n@@ -590,7 +589,10 @@\n         // overflow)\n         if (u>0) { u=-u; } // make u negative\n         if (v>0) { v=-v; } // make v negative\n-        // B1. [Find power of 2]\n+        if (u > 0) {\n+\t\t\tu = -u;\n+\t\t}\n+\t\t// B1. [Find power of 2]\n         int k=0;\n         while ((u&1)==0 && (v&1)==0 && k<31) { // while u and v are both even...\n             u/=2; v/=2; k++; // cast out twos.\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 585, 
          "faulty": "return 1;", 
          "type": "Delete", 
          "seed": "u=-u;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 594, 
          "faulty": "int k=0;", 
          "type": "InsertBefore", 
          "seed": "if (u > 0) {\n  u=-u;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:13:18.647839255 -0500\n+++ /tmp/Arja_Defects4J_Lang_22/patches_2h8q/Patch_775/patched/tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:31:15.300480896 -0500\n@@ -582,7 +582,9 @@\n         // From Commons Math:\n         //if either operand is abs 1, return 1:\n         if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n-            return 1;\n+            if (v > 0) {\n+\t\t\t\tv = -v;\n+\t\t\t}\n         }\n         // keep u and v negative, as negative integers range down to\n         // -2^31, while positive numbers can only be as large as 2^31-1\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 585, 
          "faulty": "return 1;", 
          "type": "Replace", 
          "seed": "if (v > 0) {\n  v=-v;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:13:18.647839255 -0500\n+++ /tmp/Arja_Defects4J_Lang_22/patches_2h8q/Patch_822/patched/tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:32:14.856738547 -0500\n@@ -582,7 +582,7 @@\n         // From Commons Math:\n         //if either operand is abs 1, return 1:\n         if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n-            return 1;\n+            v = -v;\n         }\n         // keep u and v negative, as negative integers range down to\n         // -2^31, while positive numbers can only be as large as 2^31-1\n@@ -595,9 +595,6 @@\n         while ((u&1)==0 && (v&1)==0 && k<31) { // while u and v are both even...\n             u/=2; v/=2; k++; // cast out twos.\n         }\n-        if (k==31) {\n-            throw new ArithmeticException(\"overflow: gcd is 2^31\");\n-        }\n         // B2. Initialize: u and v have been divided by 2^k and at least\n         //     one is odd.\n         int t = ((u&1)==1) ? v : -(u/2)/*B3*/;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 585, 
          "faulty": "return 1;", 
          "type": "Replace", 
          "seed": "v=-v;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 598, 
          "faulty": "if (k == 31) {\n  throw new ArithmeticException(\"overflow: gcd is 2^31\");\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n  return 1;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:13:18.647839255 -0500\n+++ /tmp/Arja_Defects4J_Lang_22/patches_2h8q/Patch_932/patched/tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:33:55.697174714 -0500\n@@ -582,7 +582,7 @@\n         // From Commons Math:\n         //if either operand is abs 1, return 1:\n         if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n-            return 1;\n+            u = -u;\n         }\n         // keep u and v negative, as negative integers range down to\n         // -2^31, while positive numbers can only be as large as 2^31-1\n@@ -613,7 +613,12 @@\n             if (t>0) {\n                 u = -t;\n             } else {\n-                v = t;\n+                if (t > 0) {\n+\t\t\t\t\tu = -t;\n+\t\t\t\t} else {\n+\t\t\t\t\tv = t;\n+\t\t\t\t}\n+\t\t\t\tv = t;\n             }\n             // B6/B3. at this point both u and v should be odd.\n             t = (v - u)/2;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 616, 
          "faulty": "v=t;", 
          "type": "InsertBefore", 
          "seed": "if (t > 0) {\n  u=-t;\n}\n else {\n  v=t;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 585, 
          "faulty": "return 1;", 
          "type": "Replace", 
          "seed": "u=-u;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:13:18.647839255 -0500\n+++ /tmp/Arja_Defects4J_Lang_22/patches_2h8q/Patch_64/patched/tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:16:25.948643746 -0500\n@@ -472,7 +472,11 @@\n      * @return a new reduced fraction instance, or this if no simplification possible\n      */\n     public Fraction reduce() {\n-        if (numerator == 0) {\n+        if (toString == null) {\n+\t\t\ttoString = new StringBuilder(32).append(getNumerator()).append('/')\n+\t\t\t\t\t.append(getDenominator()).toString();\n+\t\t}\n+\t\tif (numerator == 0) {\n             return equals(ZERO) ? this : ZERO;\n         }\n         int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\n@@ -579,11 +583,9 @@\n      * @return the greatest common divisor, never zero\n      */\n     private static int greatestCommonDivisor(int u, int v) {\n-        // From Commons Math:\n-        //if either operand is abs 1, return 1:\n-        if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n-            return 1;\n-        }\n+        if (u > 0) {\n+\t\t\tu = -u;\n+\t\t}\n         // keep u and v negative, as negative integers range down to\n         // -2^31, while positive numbers can only be as large as 2^31-1\n         // (i.e. we can't necessarily negate a negative number without\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 584, 
          "faulty": "if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n  return 1;\n}", 
          "type": "Replace", 
          "seed": "if (u > 0) {\n  u=-u;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 475, 
          "faulty": "if (numerator == 0) {\n  return equals(ZERO) ? this : ZERO;\n}", 
          "type": "InsertBefore", 
          "seed": "if (toString == null) {\n  toString=new StringBuilder(32).append(getNumerator()).append('/').append(getDenominator()).toString();\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:13:18.647839255 -0500\n+++ /tmp/Arja_Defects4J_Lang_22/patches_2h8q/Patch_412/patched/tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:24:09.554637916 -0500\n@@ -582,7 +582,7 @@\n         // From Commons Math:\n         //if either operand is abs 1, return 1:\n         if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n-            return 1;\n+            v = -v;\n         }\n         // keep u and v negative, as negative integers range down to\n         // -2^31, while positive numbers can only be as large as 2^31-1\n@@ -593,7 +593,8 @@\n         // B1. [Find power of 2]\n         int k=0;\n         while ((u&1)==0 && (v&1)==0 && k<31) { // while u and v are both even...\n-            u/=2; v/=2; k++; // cast out twos.\n+            v /= 2;\n+\t\t\tu/=2; k++; // cast out twos.\n         }\n         if (k==31) {\n             throw new ArithmeticException(\"overflow: gcd is 2^31\");\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 596, 
          "faulty": "v/=2;", 
          "type": "Delete", 
          "seed": "u/=2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 585, 
          "faulty": "return 1;", 
          "type": "Replace", 
          "seed": "v=-v;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 596, 
          "faulty": "u/=2;", 
          "type": "InsertBefore", 
          "seed": "v/=2;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:13:18.647839255 -0500\n+++ /tmp/Arja_Defects4J_Lang_22/patches_2h8q/Patch_1073/patched/tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:36:37.449874131 -0500\n@@ -220,7 +220,10 @@\n         }\n         // allow 2^k/-2^31 as a valid fraction (where k>0)\n         if (denominator==Integer.MIN_VALUE && (numerator&1)==0) {\n-            numerator/=2; denominator/=2;\n+            numerator/=2; if (numerator == 0) {\n+\t\t\t\treturn ZERO;\n+\t\t\t}\n+\t\t\tdenominator/=2;\n         }\n         if (denominator < 0) {\n             if (numerator==Integer.MIN_VALUE ||\n@@ -582,7 +585,7 @@\n         // From Commons Math:\n         //if either operand is abs 1, return 1:\n         if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n-            return 1;\n+            u = -u;\n         }\n         // keep u and v negative, as negative integers range down to\n         // -2^31, while positive numbers can only be as large as 2^31-1\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 585, 
          "faulty": "return 1;", 
          "type": "Replace", 
          "seed": "u=-u;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 223, 
          "faulty": "denominator/=2;", 
          "type": "InsertBefore", 
          "seed": "if (numerator == 0) {\n  return ZERO;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:13:18.647839255 -0500\n+++ /tmp/Arja_Defects4J_Lang_22/patches_2h8q/Patch_220/patched/tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:20:13.993622508 -0500\n@@ -579,11 +579,9 @@\n      * @return the greatest common divisor, never zero\n      */\n     private static int greatestCommonDivisor(int u, int v) {\n-        // From Commons Math:\n-        //if either operand is abs 1, return 1:\n-        if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n-            return 1;\n-        }\n+        if (u > 0) {\n+\t\t\tu = -u;\n+\t\t}\n         // keep u and v negative, as negative integers range down to\n         // -2^31, while positive numbers can only be as large as 2^31-1\n         // (i.e. we can't necessarily negate a negative number without\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 584, 
          "faulty": "if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n  return 1;\n}", 
          "type": "Replace", 
          "seed": "if (u > 0) {\n  u=-u;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 585, 
          "faulty": "return 1;", 
          "type": "Delete", 
          "seed": "if (u > 0) {\n  u=-u;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:13:18.647839255 -0500\n+++ /tmp/Arja_Defects4J_Lang_22/patches_2h8q/Patch_1332/patched/tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:42:00.591270630 -0500\n@@ -579,11 +579,9 @@\n      * @return the greatest common divisor, never zero\n      */\n     private static int greatestCommonDivisor(int u, int v) {\n-        // From Commons Math:\n-        //if either operand is abs 1, return 1:\n-        if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n-            return 1;\n-        }\n+        if (u > 0) {\n+\t\t\tu = -u;\n+\t\t}\n         // keep u and v negative, as negative integers range down to\n         // -2^31, while positive numbers can only be as large as 2^31-1\n         // (i.e. we can't necessarily negate a negative number without\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 584, 
          "faulty": "if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n  return 1;\n}", 
          "type": "Replace", 
          "seed": "if (u > 0) {\n  u=-u;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 585, 
          "faulty": "return 1;", 
          "type": "Replace", 
          "seed": "v=-v;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:13:18.647839255 -0500\n+++ /tmp/Arja_Defects4J_Lang_22/patches_2h8q/Patch_548/patched/tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:26:54.859353734 -0500\n@@ -582,7 +582,7 @@\n         // From Commons Math:\n         //if either operand is abs 1, return 1:\n         if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n-            return 1;\n+            v = -v;\n         }\n         // keep u and v negative, as negative integers range down to\n         // -2^31, while positive numbers can only be as large as 2^31-1\n@@ -841,9 +841,6 @@\n      */\n     @Override\n     public boolean equals(Object obj) {\n-        if (obj == this) {\n-            return true;\n-        }\n         if (obj instanceof Fraction == false) {\n             return false;\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 585, 
          "faulty": "return 1;", 
          "type": "Replace", 
          "seed": "v=-v;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 844, 
          "faulty": "if (obj == this) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "if (obj == this) {\n  return true;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:13:18.647839255 -0500\n+++ /tmp/Arja_Defects4J_Lang_22/patches_2h8q/Patch_1339/patched/tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:42:02.195277559 -0500\n@@ -472,7 +472,8 @@\n      * @return a new reduced fraction instance, or this if no simplification possible\n      */\n     public Fraction reduce() {\n-        if (numerator == 0) {\n+        toProperString = \"1\";\n+\t\tif (numerator == 0) {\n             return equals(ZERO) ? this : ZERO;\n         }\n         int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\n@@ -582,7 +583,6 @@\n         // From Commons Math:\n         //if either operand is abs 1, return 1:\n         if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n-            return 1;\n         }\n         // keep u and v negative, as negative integers range down to\n         // -2^31, while positive numbers can only be as large as 2^31-1\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 585, 
          "faulty": "return 1;", 
          "type": "Delete", 
          "seed": "v=-v;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 475, 
          "faulty": "if (numerator == 0) {\n  return equals(ZERO) ? this : ZERO;\n}", 
          "type": "InsertBefore", 
          "seed": "toProperString=\"1\";"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:13:18.647839255 -0500\n+++ /tmp/Arja_Defects4J_Lang_22/patches_2h8q/Patch_154/patched/tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:18:30.837179858 -0500\n@@ -225,7 +225,12 @@\n         if (denominator < 0) {\n             if (numerator==Integer.MIN_VALUE ||\n                     denominator==Integer.MIN_VALUE) {\n-                throw new ArithmeticException(\"overflow: can't negate\");\n+                if (numerator == Integer.MIN_VALUE\n+\t\t\t\t\t\t\t\t|| denominator == Integer.MIN_VALUE) {\n+\t\t\t\t\t\t\tthrow new ArithmeticException(\n+\t\t\t\t\t\t\t\t\t\"overflow: can't negate\");\n+\t\t\t\t\t\t}\n+\t\t\t\tthrow new ArithmeticException(\"overflow: can't negate\");\n             }\n             numerator = -numerator;\n             denominator = -denominator;\n@@ -472,7 +477,11 @@\n      * @return a new reduced fraction instance, or this if no simplification possible\n      */\n     public Fraction reduce() {\n-        if (numerator == 0) {\n+        if (toString == null) {\n+\t\t\ttoString = new StringBuilder(32).append(getNumerator()).append('/')\n+\t\t\t\t\t.append(getDenominator()).toString();\n+\t\t}\n+\t\tif (numerator == 0) {\n             return equals(ZERO) ? this : ZERO;\n         }\n         int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\n@@ -579,18 +588,19 @@\n      * @return the greatest common divisor, never zero\n      */\n     private static int greatestCommonDivisor(int u, int v) {\n-        // From Commons Math:\n-        //if either operand is abs 1, return 1:\n-        if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n-            return 1;\n-        }\n+        if (u > 0) {\n+\t\t\tu = -u;\n+\t\t}\n         // keep u and v negative, as negative integers range down to\n         // -2^31, while positive numbers can only be as large as 2^31-1\n         // (i.e. we can't necessarily negate a negative number without\n         // overflow)\n         if (u>0) { u=-u; } // make u negative\n         if (v>0) { v=-v; } // make v negative\n-        // B1. [Find power of 2]\n+        if (u > 0) {\n+\t\t\tu = -u;\n+\t\t}\n+\t\t// B1. [Find power of 2]\n         int k=0;\n         while ((u&1)==0 && (v&1)==0 && k<31) { // while u and v are both even...\n             u/=2; v/=2; k++; // cast out twos.\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 584, 
          "faulty": "if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n  return 1;\n}", 
          "type": "Replace", 
          "seed": "if (u > 0) {\n  u=-u;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 228, 
          "faulty": "throw new ArithmeticException(\"overflow: can't negate\");", 
          "type": "InsertBefore", 
          "seed": "if (numerator == Integer.MIN_VALUE || denominator == Integer.MIN_VALUE) {\n  throw new ArithmeticException(\"overflow: can't negate\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 594, 
          "faulty": "int k=0;", 
          "type": "InsertBefore", 
          "seed": "if (u > 0) {\n  u=-u;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 475, 
          "faulty": "if (numerator == 0) {\n  return equals(ZERO) ? this : ZERO;\n}", 
          "type": "InsertBefore", 
          "seed": "if (toString == null) {\n  toString=new StringBuilder(32).append(getNumerator()).append('/').append(getDenominator()).toString();\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:13:18.647839255 -0500\n+++ /tmp/Arja_Defects4J_Lang_22/patches_2h8q/Patch_873/patched/tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:32:57.964925016 -0500\n@@ -582,14 +582,17 @@\n         // From Commons Math:\n         //if either operand is abs 1, return 1:\n         if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n-            return 1;\n+            v = -v;\n         }\n         // keep u and v negative, as negative integers range down to\n         // -2^31, while positive numbers can only be as large as 2^31-1\n         // (i.e. we can't necessarily negate a negative number without\n         // overflow)\n         if (u>0) { u=-u; } // make u negative\n-        if (v>0) { v=-v; } // make v negative\n+        if (v>0) { if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n+\t\t\t\treturn 1;\n+\t\t\t}\n+\t\tv=-v; } // make v negative\n         // B1. [Find power of 2]\n         int k=0;\n         while ((u&1)==0 && (v&1)==0 && k<31) { // while u and v are both even...\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 585, 
          "faulty": "return 1;", 
          "type": "Replace", 
          "seed": "v=-v;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 592, 
          "faulty": "v=-v;", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n  return 1;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:13:18.647839255 -0500\n+++ /tmp/Arja_Defects4J_Lang_22/patches_2h8q/Patch_833/patched/tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:32:23.536776094 -0500\n@@ -582,7 +582,7 @@\n         // From Commons Math:\n         //if either operand is abs 1, return 1:\n         if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n-            return 1;\n+            v = -v;\n         }\n         // keep u and v negative, as negative integers range down to\n         // -2^31, while positive numbers can only be as large as 2^31-1\n@@ -842,6 +842,9 @@\n     @Override\n     public boolean equals(Object obj) {\n         if (obj == this) {\n+\t\t\treturn true;\n+\t\t}\n+\t\tif (obj == this) {\n             return true;\n         }\n         if (obj instanceof Fraction == false) {\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 585, 
          "faulty": "return 1;", 
          "type": "Replace", 
          "seed": "v=-v;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 844, 
          "faulty": "if (obj == this) {\n  return true;\n}", 
          "type": "InsertBefore", 
          "seed": "if (obj == this) {\n  return true;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:13:18.647839255 -0500\n+++ /tmp/Arja_Defects4J_Lang_22/patches_2h8q/Patch_1693/patched/tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:48:21.584919003 -0500\n@@ -213,7 +213,11 @@\n      */\n     public static Fraction getReducedFraction(int numerator, int denominator) {\n         if (denominator == 0) {\n-            throw new ArithmeticException(\"The denominator must not be zero\");\n+            if (numerator < 0) {\n+\t\t\t\tthrow new ArithmeticException(\n+\t\t\t\t\t\t\"The numerator must not be negative\");\n+\t\t\t}\n+\t\t\tthrow new ArithmeticException(\"The denominator must not be zero\");\n         }\n         if (numerator==0) {\n             return ZERO; // normalize zero.\n@@ -582,7 +586,7 @@\n         // From Commons Math:\n         //if either operand is abs 1, return 1:\n         if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n-            return 1;\n+            u = -u;\n         }\n         // keep u and v negative, as negative integers range down to\n         // -2^31, while positive numbers can only be as large as 2^31-1\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 585, 
          "faulty": "return 1;", 
          "type": "Replace", 
          "seed": "u=-u;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 216, 
          "faulty": "throw new ArithmeticException(\"The denominator must not be zero\");", 
          "type": "InsertBefore", 
          "seed": "if (numerator < 0) {\n  throw new ArithmeticException(\"The numerator must not be negative\");\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:13:18.647839255 -0500\n+++ /tmp/Arja_Defects4J_Lang_22/patches_2h8q/Patch_438/patched/tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:25:02.862868791 -0500\n@@ -475,7 +475,7 @@\n         if (numerator == 0) {\n             return equals(ZERO) ? this : ZERO;\n         }\n-        int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\n+        int gcd = greatestCommonDivisor(numerator, denominator);\n         if (gcd == 1) {\n             return this;\n         }\n@@ -582,7 +582,6 @@\n         // From Commons Math:\n         //if either operand is abs 1, return 1:\n         if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n-            return 1;\n         }\n         // keep u and v negative, as negative integers range down to\n         // -2^31, while positive numbers can only be as large as 2^31-1\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 585, 
          "faulty": "return 1;", 
          "type": "Delete", 
          "seed": "throw new ArithmeticException(\"Numerator too large to represent as an Integer.\");"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 478, 
          "faulty": "int gcd=greatestCommonDivisor(Math.abs(numerator),denominator);", 
          "type": "Replace", 
          "seed": "int gcd=greatestCommonDivisor(numerator,denominator);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:13:18.647839255 -0500\n+++ /tmp/Arja_Defects4J_Lang_22/patches_2h8q/Patch_1378/patched/tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:42:24.659374604 -0500\n@@ -216,7 +216,11 @@\n             throw new ArithmeticException(\"The denominator must not be zero\");\n         }\n         if (numerator==0) {\n-            return ZERO; // normalize zero.\n+            if (denominator < 0) {\n+\t\t\t\tthrow new ArithmeticException(\n+\t\t\t\t\t\t\"The denominator must not be negative\");\n+\t\t\t}\n+\t\t\treturn ZERO; // normalize zero.\n         }\n         // allow 2^k/-2^31 as a valid fraction (where k>0)\n         if (denominator==Integer.MIN_VALUE && (numerator&1)==0) {\n@@ -582,7 +586,6 @@\n         // From Commons Math:\n         //if either operand is abs 1, return 1:\n         if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n-            return 1;\n         }\n         // keep u and v negative, as negative integers range down to\n         // -2^31, while positive numbers can only be as large as 2^31-1\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 585, 
          "faulty": "return 1;", 
          "type": "Delete", 
          "seed": "v=-v;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 219, 
          "faulty": "return ZERO;", 
          "type": "InsertBefore", 
          "seed": "if (denominator < 0) {\n  throw new ArithmeticException(\"The denominator must not be negative\");\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:13:18.647839255 -0500\n+++ /tmp/Arja_Defects4J_Lang_22/patches_2h8q/Patch_1158/patched/tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:38:22.254327166 -0500\n@@ -582,7 +582,9 @@\n         // From Commons Math:\n         //if either operand is abs 1, return 1:\n         if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n-            return 1;\n+            if (u > 0) {\n+\t\t\t\tu = -u;\n+\t\t\t}\n         }\n         // keep u and v negative, as negative integers range down to\n         // -2^31, while positive numbers can only be as large as 2^31-1\n@@ -841,9 +843,6 @@\n      */\n     @Override\n     public boolean equals(Object obj) {\n-        if (obj == this) {\n-            return true;\n-        }\n         if (obj instanceof Fraction == false) {\n             return false;\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 585, 
          "faulty": "return 1;", 
          "type": "Replace", 
          "seed": "if (u > 0) {\n  u=-u;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 844, 
          "faulty": "if (obj == this) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "if (obj == this) {\n  return true;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:13:18.647839255 -0500\n+++ /tmp/Arja_Defects4J_Lang_22/patches_2h8q/Patch_1534/patched/tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:45:28.636169215 -0500\n@@ -582,9 +582,10 @@\n         // From Commons Math:\n         //if either operand is abs 1, return 1:\n         if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n-            return 1;\n+            v = -v;\n         }\n-        // keep u and v negative, as negative integers range down to\n+        v = -v;\n+\t\t// keep u and v negative, as negative integers range down to\n         // -2^31, while positive numbers can only be as large as 2^31-1\n         // (i.e. we can't necessarily negate a negative number without\n         // overflow)\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 585, 
          "faulty": "return 1;", 
          "type": "Replace", 
          "seed": "v=-v;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 591, 
          "faulty": "if (u > 0) {\n  u=-u;\n}", 
          "type": "InsertBefore", 
          "seed": "v=-v;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:13:18.647839255 -0500\n+++ /tmp/Arja_Defects4J_Lang_22/patches_2h8q/Patch_1228/patched/tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:39:45.986689038 -0500\n@@ -579,11 +579,9 @@\n      * @return the greatest common divisor, never zero\n      */\n     private static int greatestCommonDivisor(int u, int v) {\n-        // From Commons Math:\n-        //if either operand is abs 1, return 1:\n-        if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n-            return 1;\n-        }\n+        if (u > 0) {\n+\t\t\tu = -u;\n+\t\t}\n         // keep u and v negative, as negative integers range down to\n         // -2^31, while positive numbers can only be as large as 2^31-1\n         // (i.e. we can't necessarily negate a negative number without\n@@ -615,7 +613,10 @@\n             } else {\n                 v = t;\n             }\n-            // B6/B3. at this point both u and v should be odd.\n+            if (k == 31) {\n+\t\t\t\tthrow new ArithmeticException(\"overflow: gcd is 2^31\");\n+\t\t\t}\n+\t\t\t// B6/B3. at this point both u and v should be odd.\n             t = (v - u)/2;\n             // |u| larger: t positive (replace u)\n             // |v| larger: t negative (replace v)\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 584, 
          "faulty": "if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n  return 1;\n}", 
          "type": "Replace", 
          "seed": "if (u > 0) {\n  u=-u;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 619, 
          "faulty": "t=(v - u) / 2;", 
          "type": "InsertBefore", 
          "seed": "if (k == 31) {\n  throw new ArithmeticException(\"overflow: gcd is 2^31\");\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:13:18.647839255 -0500\n+++ /tmp/Arja_Defects4J_Lang_22/patches_2h8q/Patch_759/patched/tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:31:05.180437112 -0500\n@@ -582,7 +582,9 @@\n         // From Commons Math:\n         //if either operand is abs 1, return 1:\n         if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n-            return 1;\n+            if (u > 0) {\n+\t\t\t\tu = -u;\n+\t\t\t}\n         }\n         // keep u and v negative, as negative integers range down to\n         // -2^31, while positive numbers can only be as large as 2^31-1\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 585, 
          "faulty": "return 1;", 
          "type": "Replace", 
          "seed": "if (u > 0) {\n  u=-u;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:13:18.647839255 -0500\n+++ /tmp/Arja_Defects4J_Lang_22/patches_2h8q/Patch_971/patched/tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:34:41.425372469 -0500\n@@ -220,7 +220,10 @@\n         }\n         // allow 2^k/-2^31 as a valid fraction (where k>0)\n         if (denominator==Integer.MIN_VALUE && (numerator&1)==0) {\n-            numerator/=2; denominator/=2;\n+            if (numerator == 0) {\n+\t\t\t\treturn ZERO;\n+\t\t\t}\n+\t\t\tnumerator/=2; denominator/=2;\n         }\n         if (denominator < 0) {\n             if (numerator==Integer.MIN_VALUE ||\n@@ -582,7 +585,6 @@\n         // From Commons Math:\n         //if either operand is abs 1, return 1:\n         if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n-            return 1;\n         }\n         // keep u and v negative, as negative integers range down to\n         // -2^31, while positive numbers can only be as large as 2^31-1\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 585, 
          "faulty": "return 1;", 
          "type": "Delete", 
          "seed": "throw new ArithmeticException(\"Numerator too large to represent as an Integer.\");"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 223, 
          "faulty": "numerator/=2;", 
          "type": "InsertBefore", 
          "seed": "if (numerator == 0) {\n  return ZERO;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:13:18.647839255 -0500\n+++ /tmp/Arja_Defects4J_Lang_22/patches_2h8q/Patch_653/patched/tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:28:57.015882508 -0500\n@@ -213,7 +213,11 @@\n      */\n     public static Fraction getReducedFraction(int numerator, int denominator) {\n         if (denominator == 0) {\n-            throw new ArithmeticException(\"The denominator must not be zero\");\n+            if (denominator == Integer.MIN_VALUE && (numerator & 1) == 0) {\n+\t\t\t\tnumerator /= 2;\n+\t\t\t\tdenominator /= 2;\n+\t\t\t}\n+\t\t\tthrow new ArithmeticException(\"The denominator must not be zero\");\n         }\n         if (numerator==0) {\n             return ZERO; // normalize zero.\n@@ -582,7 +586,6 @@\n         // From Commons Math:\n         //if either operand is abs 1, return 1:\n         if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n-            return 1;\n         }\n         // keep u and v negative, as negative integers range down to\n         // -2^31, while positive numbers can only be as large as 2^31-1\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 585, 
          "faulty": "return 1;", 
          "type": "Delete", 
          "seed": "throw new ArithmeticException(\"Numerator too large to represent as an Integer.\");"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 216, 
          "faulty": "throw new ArithmeticException(\"The denominator must not be zero\");", 
          "type": "InsertBefore", 
          "seed": "if (denominator == Integer.MIN_VALUE && (numerator & 1) == 0) {\n  numerator/=2;\n  denominator/=2;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:13:18.647839255 -0500\n+++ /tmp/Arja_Defects4J_Lang_22/patches_2h8q/Patch_339/patched/tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:22:44.982271569 -0500\n@@ -579,11 +579,7 @@\n      * @return the greatest common divisor, never zero\n      */\n     private static int greatestCommonDivisor(int u, int v) {\n-        // From Commons Math:\n-        //if either operand is abs 1, return 1:\n-        if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n-            return 1;\n-        }\n+        u = -u;\n         // keep u and v negative, as negative integers range down to\n         // -2^31, while positive numbers can only be as large as 2^31-1\n         // (i.e. we can't necessarily negate a negative number without\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 584, 
          "faulty": "if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n  return 1;\n}", 
          "type": "Replace", 
          "seed": "u=-u;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:13:18.647839255 -0500\n+++ /tmp/Arja_Defects4J_Lang_22/patches_2h8q/Patch_1068/patched/tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:36:36.181868649 -0500\n@@ -579,10 +579,12 @@\n      * @return the greatest common divisor, never zero\n      */\n     private static int greatestCommonDivisor(int u, int v) {\n-        // From Commons Math:\n+        if (u > 0) {\n+\t\t\tu = -u;\n+\t\t}\n+\t\t// From Commons Math:\n         //if either operand is abs 1, return 1:\n         if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n-            return 1;\n         }\n         // keep u and v negative, as negative integers range down to\n         // -2^31, while positive numbers can only be as large as 2^31-1\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 584, 
          "faulty": "if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n  return 1;\n}", 
          "type": "InsertBefore", 
          "seed": "if (u > 0) {\n  u=-u;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 585, 
          "faulty": "return 1;", 
          "type": "Delete", 
          "seed": "throw new ArithmeticException(\"Numerator too large to represent as an Integer.\");"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:13:18.647839255 -0500\n+++ /tmp/Arja_Defects4J_Lang_22/patches_2h8q/Patch_1257/patched/tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:40:34.650899322 -0500\n@@ -582,7 +582,7 @@\n         // From Commons Math:\n         //if either operand is abs 1, return 1:\n         if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n-            return 1;\n+            u = -u;\n         }\n         // keep u and v negative, as negative integers range down to\n         // -2^31, while positive numbers can only be as large as 2^31-1\n@@ -615,7 +615,12 @@\n             } else {\n                 v = t;\n             }\n-            // B6/B3. at this point both u and v should be odd.\n+            if (t > 0) {\n+\t\t\t\tu = -t;\n+\t\t\t} else {\n+\t\t\t\tv = t;\n+\t\t\t}\n+\t\t\t// B6/B3. at this point both u and v should be odd.\n             t = (v - u)/2;\n             // |u| larger: t positive (replace u)\n             // |v| larger: t negative (replace v)\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 585, 
          "faulty": "return 1;", 
          "type": "Replace", 
          "seed": "u=-u;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 619, 
          "faulty": "t=(v - u) / 2;", 
          "type": "InsertBefore", 
          "seed": "if (t > 0) {\n  u=-t;\n}\n else {\n  v=t;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:13:18.647839255 -0500\n+++ /tmp/Arja_Defects4J_Lang_22/patches_2h8q/Patch_1076/patched/tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:36:38.085876880 -0500\n@@ -582,7 +582,6 @@\n         // From Commons Math:\n         //if either operand is abs 1, return 1:\n         if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n-            return 1;\n         }\n         // keep u and v negative, as negative integers range down to\n         // -2^31, while positive numbers can only be as large as 2^31-1\n@@ -848,7 +847,10 @@\n             return false;\n         }\n         Fraction other = (Fraction) obj;\n-        return (getNumerator() == other.getNumerator() &&\n+        if (obj == this) {\n+\t\t\treturn true;\n+\t\t}\n+\t\treturn (getNumerator() == other.getNumerator() &&\n                 getDenominator() == other.getDenominator());\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 585, 
          "faulty": "return 1;", 
          "type": "Delete", 
          "seed": "throw new ArithmeticException(\"Numerator too large to represent as an Integer.\");"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 851, 
          "faulty": "return (getNumerator() == other.getNumerator() && getDenominator() == other.getDenominator());", 
          "type": "InsertBefore", 
          "seed": "if (obj == this) {\n  return true;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:13:18.647839255 -0500\n+++ /tmp/Arja_Defects4J_Lang_22/patches_2h8q/Patch_568/patched/tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:27:29.259502657 -0500\n@@ -582,7 +582,7 @@\n         // From Commons Math:\n         //if either operand is abs 1, return 1:\n         if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n-            return 1;\n+            v = -v;\n         }\n         // keep u and v negative, as negative integers range down to\n         // -2^31, while positive numbers can only be as large as 2^31-1\n@@ -847,7 +847,8 @@\n         if (obj instanceof Fraction == false) {\n             return false;\n         }\n-        Fraction other = (Fraction) obj;\n+        hashCode = 37 * (37 * 17 + getNumerator()) + getDenominator();\n+\t\tFraction other = (Fraction) obj;\n         return (getNumerator() == other.getNumerator() &&\n                 getDenominator() == other.getDenominator());\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 585, 
          "faulty": "return 1;", 
          "type": "Replace", 
          "seed": "v=-v;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 850, 
          "faulty": "Fraction other=(Fraction)obj;", 
          "type": "InsertBefore", 
          "seed": "hashCode=37 * (37 * 17 + getNumerator()) + getDenominator();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:13:18.647839255 -0500\n+++ /tmp/Arja_Defects4J_Lang_22/patches_2h8q/Patch_309/patched/tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:22:01.722084619 -0500\n@@ -216,7 +216,10 @@\n             throw new ArithmeticException(\"The denominator must not be zero\");\n         }\n         if (numerator==0) {\n-            return ZERO; // normalize zero.\n+            if (numerator == Integer.MIN_VALUE) {\n+\t\t\t\tthrow new ArithmeticException(\"overflow: too large to negate\");\n+\t\t\t}\n+\t\t\treturn ZERO; // normalize zero.\n         }\n         // allow 2^k/-2^31 as a valid fraction (where k>0)\n         if (denominator==Integer.MIN_VALUE && (numerator&1)==0) {\n@@ -582,7 +585,6 @@\n         // From Commons Math:\n         //if either operand is abs 1, return 1:\n         if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n-            return 1;\n         }\n         // keep u and v negative, as negative integers range down to\n         // -2^31, while positive numbers can only be as large as 2^31-1\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 585, 
          "faulty": "return 1;", 
          "type": "Delete", 
          "seed": "v/=2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 219, 
          "faulty": "return ZERO;", 
          "type": "InsertBefore", 
          "seed": "if (numerator == Integer.MIN_VALUE) {\n  throw new ArithmeticException(\"overflow: too large to negate\");\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:13:18.647839255 -0500\n+++ /tmp/Arja_Defects4J_Lang_22/patches_2h8q/Patch_527/patched/tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:26:31.975254658 -0500\n@@ -579,11 +579,7 @@\n      * @return the greatest common divisor, never zero\n      */\n     private static int greatestCommonDivisor(int u, int v) {\n-        // From Commons Math:\n-        //if either operand is abs 1, return 1:\n-        if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n-            return 1;\n-        }\n+        u = -u;\n         // keep u and v negative, as negative integers range down to\n         // -2^31, while positive numbers can only be as large as 2^31-1\n         // (i.e. we can't necessarily negate a negative number without\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 584, 
          "faulty": "if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n  return 1;\n}", 
          "type": "Replace", 
          "seed": "u=-u;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 585, 
          "faulty": "return 1;", 
          "type": "Delete", 
          "seed": "if (v > 0) {\n  v=-v;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:13:18.647839255 -0500\n+++ /tmp/Arja_Defects4J_Lang_22/patches_2h8q/Patch_1351/patched/tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:42:11.363317166 -0500\n@@ -579,11 +579,7 @@\n      * @return the greatest common divisor, never zero\n      */\n     private static int greatestCommonDivisor(int u, int v) {\n-        // From Commons Math:\n-        //if either operand is abs 1, return 1:\n-        if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n-            return 1;\n-        }\n+        u = -u;\n         // keep u and v negative, as negative integers range down to\n         // -2^31, while positive numbers can only be as large as 2^31-1\n         // (i.e. we can't necessarily negate a negative number without\n@@ -615,7 +611,12 @@\n             } else {\n                 v = t;\n             }\n-            // B6/B3. at this point both u and v should be odd.\n+            if (t > 0) {\n+\t\t\t\tu = -t;\n+\t\t\t} else {\n+\t\t\t\tv = t;\n+\t\t\t}\n+\t\t\t// B6/B3. at this point both u and v should be odd.\n             t = (v - u)/2;\n             // |u| larger: t positive (replace u)\n             // |v| larger: t negative (replace v)\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 584, 
          "faulty": "if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n  return 1;\n}", 
          "type": "Replace", 
          "seed": "u=-u;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 585, 
          "faulty": "return 1;", 
          "type": "Replace", 
          "seed": "u=-u;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 619, 
          "faulty": "t=(v - u) / 2;", 
          "type": "InsertBefore", 
          "seed": "if (t > 0) {\n  u=-t;\n}\n else {\n  v=t;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:13:18.647839255 -0500\n+++ /tmp/Arja_Defects4J_Lang_22/patches_2h8q/Patch_614/patched/tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:28:22.651733774 -0500\n@@ -216,7 +216,8 @@\n             throw new ArithmeticException(\"The denominator must not be zero\");\n         }\n         if (numerator==0) {\n-            return ZERO; // normalize zero.\n+            denominator /= 2;\n+\t\t\treturn ZERO; // normalize zero.\n         }\n         // allow 2^k/-2^31 as a valid fraction (where k>0)\n         if (denominator==Integer.MIN_VALUE && (numerator&1)==0) {\n@@ -582,7 +583,7 @@\n         // From Commons Math:\n         //if either operand is abs 1, return 1:\n         if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n-            return 1;\n+            u = -u;\n         }\n         // keep u and v negative, as negative integers range down to\n         // -2^31, while positive numbers can only be as large as 2^31-1\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 585, 
          "faulty": "return 1;", 
          "type": "Replace", 
          "seed": "u=-u;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 219, 
          "faulty": "return ZERO;", 
          "type": "InsertBefore", 
          "seed": "denominator/=2;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:13:18.647839255 -0500\n+++ /tmp/Arja_Defects4J_Lang_22/patches_2h8q/Patch_275/patched/tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:21:17.905896685 -0500\n@@ -472,7 +472,11 @@\n      * @return a new reduced fraction instance, or this if no simplification possible\n      */\n     public Fraction reduce() {\n-        if (numerator == 0) {\n+        if (toString == null) {\n+\t\t\ttoString = new StringBuilder(32).append(getNumerator()).append('/')\n+\t\t\t\t\t.append(getDenominator()).toString();\n+\t\t}\n+\t\tif (numerator == 0) {\n             return equals(ZERO) ? this : ZERO;\n         }\n         int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\n@@ -579,11 +583,9 @@\n      * @return the greatest common divisor, never zero\n      */\n     private static int greatestCommonDivisor(int u, int v) {\n-        // From Commons Math:\n-        //if either operand is abs 1, return 1:\n-        if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n-            return 1;\n-        }\n+        if (u > 0) {\n+\t\t\tu = -u;\n+\t\t}\n         // keep u and v negative, as negative integers range down to\n         // -2^31, while positive numbers can only be as large as 2^31-1\n         // (i.e. we can't necessarily negate a negative number without\n@@ -841,9 +843,9 @@\n      */\n     @Override\n     public boolean equals(Object obj) {\n-        if (obj == this) {\n-            return true;\n-        }\n+        if (numerator == Integer.MIN_VALUE) {\n+\t\t\tthrow new ArithmeticException(\"overflow: too large to negate\");\n+\t\t}\n         if (obj instanceof Fraction == false) {\n             return false;\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 584, 
          "faulty": "if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n  return 1;\n}", 
          "type": "Replace", 
          "seed": "if (u > 0) {\n  u=-u;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 844, 
          "faulty": "if (obj == this) {\n  return true;\n}", 
          "type": "Replace", 
          "seed": "if (numerator == Integer.MIN_VALUE) {\n  throw new ArithmeticException(\"overflow: too large to negate\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 475, 
          "faulty": "if (numerator == 0) {\n  return equals(ZERO) ? this : ZERO;\n}", 
          "type": "InsertBefore", 
          "seed": "if (toString == null) {\n  toString=new StringBuilder(32).append(getNumerator()).append('/').append(getDenominator()).toString();\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:13:18.647839255 -0500\n+++ /tmp/Arja_Defects4J_Lang_22/patches_2h8q/Patch_700/patched/tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:29:38.788063287 -0500\n@@ -582,7 +582,6 @@\n         // From Commons Math:\n         //if either operand is abs 1, return 1:\n         if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n-            return 1;\n         }\n         // keep u and v negative, as negative integers range down to\n         // -2^31, while positive numbers can only be as large as 2^31-1\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 585, 
          "faulty": "return 1;", 
          "type": "Delete", 
          "seed": "throw new ArithmeticException(\"Numerator too large to represent as an Integer.\");"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 482, 
          "faulty": "return Fraction.getFraction(numerator / gcd,denominator / gcd);", 
          "type": "Replace", 
          "seed": "return Fraction.getFraction(numerator / gcd,denominator / gcd);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:13:18.647839255 -0500\n+++ /tmp/Arja_Defects4J_Lang_22/patches_2h8q/Patch_462/patched/tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:25:21.158948022 -0500\n@@ -582,7 +582,7 @@\n         // From Commons Math:\n         //if either operand is abs 1, return 1:\n         if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n-            return 1;\n+            u = -u;\n         }\n         // keep u and v negative, as negative integers range down to\n         // -2^31, while positive numbers can only be as large as 2^31-1\n@@ -847,7 +847,8 @@\n         if (obj instanceof Fraction == false) {\n             return false;\n         }\n-        Fraction other = (Fraction) obj;\n+        hashCode = 37 * (37 * 17 + getNumerator()) + getDenominator();\n+\t\tFraction other = (Fraction) obj;\n         return (getNumerator() == other.getNumerator() &&\n                 getDenominator() == other.getDenominator());\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 585, 
          "faulty": "return 1;", 
          "type": "Replace", 
          "seed": "u=-u;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 850, 
          "faulty": "Fraction other=(Fraction)obj;", 
          "type": "InsertBefore", 
          "seed": "hashCode=37 * (37 * 17 + getNumerator()) + getDenominator();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:13:18.647839255 -0500\n+++ /tmp/Arja_Defects4J_Lang_22/patches_2h8q/Patch_621/patched/tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:28:30.203766462 -0500\n@@ -582,7 +582,7 @@\n         // From Commons Math:\n         //if either operand is abs 1, return 1:\n         if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n-            return 1;\n+            v = -v;\n         }\n         // keep u and v negative, as negative integers range down to\n         // -2^31, while positive numbers can only be as large as 2^31-1\n@@ -595,9 +595,11 @@\n         while ((u&1)==0 && (v&1)==0 && k<31) { // while u and v are both even...\n             u/=2; v/=2; k++; // cast out twos.\n         }\n-        if (k==31) {\n-            throw new ArithmeticException(\"overflow: gcd is 2^31\");\n-        }\n+        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) {\n+\t\t\tu /= 2;\n+\t\t\tv /= 2;\n+\t\t\tk++;\n+\t\t}\n         // B2. Initialize: u and v have been divided by 2^k and at least\n         //     one is odd.\n         int t = ((u&1)==1) ? v : -(u/2)/*B3*/;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 585, 
          "faulty": "return 1;", 
          "type": "Replace", 
          "seed": "v=-v;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 598, 
          "faulty": "if (k == 31) {\n  throw new ArithmeticException(\"overflow: gcd is 2^31\");\n}", 
          "type": "Replace", 
          "seed": "while ((u & 1) == 0 && (v & 1) == 0 && k < 31) {\n  u/=2;\n  v/=2;\n  k++;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:13:18.647839255 -0500\n+++ /tmp/Arja_Defects4J_Lang_22/patches_2h8q/Patch_165/patched/tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:18:45.481242707 -0500\n@@ -582,7 +582,7 @@\n         // From Commons Math:\n         //if either operand is abs 1, return 1:\n         if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n-            return 1;\n+            v = -v;\n         }\n         // keep u and v negative, as negative integers range down to\n         // -2^31, while positive numbers can only be as large as 2^31-1\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 585, 
          "faulty": "return 1;", 
          "type": "Replace", 
          "seed": "v=-v;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:13:18.647839255 -0500\n+++ /tmp/Arja_Defects4J_Lang_22/patches_2h8q/Patch_1335/patched/tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:42:01.231273394 -0500\n@@ -579,11 +579,7 @@\n      * @return the greatest common divisor, never zero\n      */\n     private static int greatestCommonDivisor(int u, int v) {\n-        // From Commons Math:\n-        //if either operand is abs 1, return 1:\n-        if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n-            return 1;\n-        }\n+        u = -u;\n         // keep u and v negative, as negative integers range down to\n         // -2^31, while positive numbers can only be as large as 2^31-1\n         // (i.e. we can't necessarily negate a negative number without\n@@ -613,7 +609,12 @@\n             if (t>0) {\n                 u = -t;\n             } else {\n-                v = t;\n+                if (t > 0) {\n+\t\t\t\t\tu = -t;\n+\t\t\t\t} else {\n+\t\t\t\t\tv = t;\n+\t\t\t\t}\n+\t\t\t\tv = t;\n             }\n             // B6/B3. at this point both u and v should be odd.\n             t = (v - u)/2;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 584, 
          "faulty": "if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n  return 1;\n}", 
          "type": "Replace", 
          "seed": "u=-u;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 616, 
          "faulty": "v=t;", 
          "type": "InsertBefore", 
          "seed": "if (t > 0) {\n  u=-t;\n}\n else {\n  v=t;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 585, 
          "faulty": "return 1;", 
          "type": "Replace", 
          "seed": "if (v > 0) {\n  v=-v;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:13:18.647839255 -0500\n+++ /tmp/Arja_Defects4J_Lang_22/patches_2h8q/Patch_529/patched/tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:26:32.299256061 -0500\n@@ -582,7 +582,6 @@\n         // From Commons Math:\n         //if either operand is abs 1, return 1:\n         if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n-            return 1;\n         }\n         // keep u and v negative, as negative integers range down to\n         // -2^31, while positive numbers can only be as large as 2^31-1\n@@ -847,7 +846,10 @@\n         if (obj instanceof Fraction == false) {\n             return false;\n         }\n-        Fraction other = (Fraction) obj;\n+        if (denominator == 0) {\n+\t\t\tthrow new ArithmeticException(\"The denominator must not be zero\");\n+\t\t}\n+\t\tFraction other = (Fraction) obj;\n         return (getNumerator() == other.getNumerator() &&\n                 getDenominator() == other.getDenominator());\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 585, 
          "faulty": "return 1;", 
          "type": "Delete", 
          "seed": "v/=2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 850, 
          "faulty": "Fraction other=(Fraction)obj;", 
          "type": "InsertBefore", 
          "seed": "if (denominator == 0) {\n  throw new ArithmeticException(\"The denominator must not be zero\");\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:13:18.647839255 -0500\n+++ /tmp/Arja_Defects4J_Lang_22/patches_2h8q/Patch_943/patched/tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:34:04.605213240 -0500\n@@ -582,7 +582,7 @@\n         // From Commons Math:\n         //if either operand is abs 1, return 1:\n         if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n-            return 1;\n+            v = -v;\n         }\n         // keep u and v negative, as negative integers range down to\n         // -2^31, while positive numbers can only be as large as 2^31-1\n@@ -593,7 +593,10 @@\n         // B1. [Find power of 2]\n         int k=0;\n         while ((u&1)==0 && (v&1)==0 && k<31) { // while u and v are both even...\n-            u/=2; v/=2; k++; // cast out twos.\n+            if (v > 0) {\n+\t\t\t\tv = -v;\n+\t\t\t}\n+\t\t\tu/=2; v/=2; k++; // cast out twos.\n         }\n         if (k==31) {\n             throw new ArithmeticException(\"overflow: gcd is 2^31\");\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 585, 
          "faulty": "return 1;", 
          "type": "Replace", 
          "seed": "v=-v;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 596, 
          "faulty": "u/=2;", 
          "type": "InsertBefore", 
          "seed": "if (v > 0) {\n  v=-v;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:13:18.647839255 -0500\n+++ /tmp/Arja_Defects4J_Lang_22/patches_2h8q/Patch_1183/patched/tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:38:40.938407920 -0500\n@@ -475,7 +475,10 @@\n         if (numerator == 0) {\n             return equals(ZERO) ? this : ZERO;\n         }\n-        int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\n+        if (hashCode == 0) {\n+\t\t\thashCode = 37 * (37 * 17 + getNumerator()) + getDenominator();\n+\t\t}\n+\t\tint gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\n         if (gcd == 1) {\n             return this;\n         }\n@@ -582,7 +585,7 @@\n         // From Commons Math:\n         //if either operand is abs 1, return 1:\n         if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n-            return 1;\n+            u = -u;\n         }\n         // keep u and v negative, as negative integers range down to\n         // -2^31, while positive numbers can only be as large as 2^31-1\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 585, 
          "faulty": "return 1;", 
          "type": "Replace", 
          "seed": "u=-u;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 478, 
          "faulty": "int gcd=greatestCommonDivisor(Math.abs(numerator),denominator);", 
          "type": "InsertBefore", 
          "seed": "if (hashCode == 0) {\n  hashCode=37 * (37 * 17 + getNumerator()) + getDenominator();\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:13:18.647839255 -0500\n+++ /tmp/Arja_Defects4J_Lang_22/patches_2h8q/Patch_400/patched/tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:24:05.274619378 -0500\n@@ -475,7 +475,22 @@\n         if (numerator == 0) {\n             return equals(ZERO) ? this : ZERO;\n         }\n-        int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\n+        if (numerator == -1 * denominator) {\n+\t\t\ttoProperString = \"-1\";\n+\t\t} else if ((numerator > 0 ? -numerator : numerator) < -denominator) {\n+\t\t\tint properNumerator = getProperNumerator();\n+\t\t\tif (properNumerator == 0) {\n+\t\t\t\ttoProperString = Integer.toString(getProperWhole());\n+\t\t\t} else {\n+\t\t\t\ttoProperString = new StringBuilder(32).append(getProperWhole())\n+\t\t\t\t\t\t.append(' ').append(properNumerator).append('/')\n+\t\t\t\t\t\t.append(getDenominator()).toString();\n+\t\t\t}\n+\t\t} else {\n+\t\t\ttoProperString = new StringBuilder(32).append(getNumerator())\n+\t\t\t\t\t.append('/').append(getDenominator()).toString();\n+\t\t}\n+\t\tint gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\n         if (gcd == 1) {\n             return this;\n         }\n@@ -582,7 +597,6 @@\n         // From Commons Math:\n         //if either operand is abs 1, return 1:\n         if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n-            return 1;\n         }\n         // keep u and v negative, as negative integers range down to\n         // -2^31, while positive numbers can only be as large as 2^31-1\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 585, 
          "faulty": "return 1;", 
          "type": "Delete", 
          "seed": "throw new ArithmeticException(\"Numerator too large to represent as an Integer.\");"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 478, 
          "faulty": "int gcd=greatestCommonDivisor(Math.abs(numerator),denominator);", 
          "type": "InsertBefore", 
          "seed": "if (numerator == -1 * denominator) {\n  toProperString=\"-1\";\n}\n else if ((numerator > 0 ? -numerator : numerator) < -denominator) {\n  int properNumerator=getProperNumerator();\n  if (properNumerator == 0) {\n    toProperString=Integer.toString(getProperWhole());\n  }\n else {\n    toProperString=new StringBuilder(32).append(getProperWhole()).append(' ').append(properNumerator).append('/').append(getDenominator()).toString();\n  }\n}\n else {\n  toProperString=new StringBuilder(32).append(getNumerator()).append('/').append(getDenominator()).toString();\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:13:18.647839255 -0500\n+++ /tmp/Arja_Defects4J_Lang_22/patches_2h8q/Patch_375/patched/tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:23:46.586538432 -0500\n@@ -582,7 +582,7 @@\n         // From Commons Math:\n         //if either operand is abs 1, return 1:\n         if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n-            return 1;\n+            v = -v;\n         }\n         // keep u and v negative, as negative integers range down to\n         // -2^31, while positive numbers can only be as large as 2^31-1\n@@ -598,7 +598,10 @@\n         if (k==31) {\n             throw new ArithmeticException(\"overflow: gcd is 2^31\");\n         }\n-        // B2. Initialize: u and v have been divided by 2^k and at least\n+        if (v > 0) {\n+\t\t\tv = -v;\n+\t\t}\n+\t\t// B2. Initialize: u and v have been divided by 2^k and at least\n         //     one is odd.\n         int t = ((u&1)==1) ? v : -(u/2)/*B3*/;\n         // t negative: u was odd, v may be even (t replaces v)\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 585, 
          "faulty": "return 1;", 
          "type": "Replace", 
          "seed": "v=-v;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 603, 
          "faulty": "int t=((u & 1) == 1) ? v : -(u / 2);", 
          "type": "InsertBefore", 
          "seed": "if (v > 0) {\n  v=-v;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:13:18.647839255 -0500\n+++ /tmp/Arja_Defects4J_Lang_22/patches_2h8q/Patch_484/patched/tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:25:33.255000403 -0500\n@@ -213,7 +213,11 @@\n      */\n     public static Fraction getReducedFraction(int numerator, int denominator) {\n         if (denominator == 0) {\n-            throw new ArithmeticException(\"The denominator must not be zero\");\n+            if (numerator == Integer.MIN_VALUE\n+\t\t\t\t\t|| denominator == Integer.MIN_VALUE) {\n+\t\t\t\tthrow new ArithmeticException(\"overflow: can't negate\");\n+\t\t\t}\n+\t\t\tthrow new ArithmeticException(\"The denominator must not be zero\");\n         }\n         if (numerator==0) {\n             return ZERO; // normalize zero.\n@@ -582,7 +586,7 @@\n         // From Commons Math:\n         //if either operand is abs 1, return 1:\n         if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n-            return 1;\n+            v = -v;\n         }\n         // keep u and v negative, as negative integers range down to\n         // -2^31, while positive numbers can only be as large as 2^31-1\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 585, 
          "faulty": "return 1;", 
          "type": "Replace", 
          "seed": "v=-v;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 216, 
          "faulty": "throw new ArithmeticException(\"The denominator must not be zero\");", 
          "type": "InsertBefore", 
          "seed": "if (numerator == Integer.MIN_VALUE || denominator == Integer.MIN_VALUE) {\n  throw new ArithmeticException(\"overflow: can't negate\");\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:13:18.647839255 -0500\n+++ /tmp/Arja_Defects4J_Lang_22/patches_2h8q/Patch_1843/patched/tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:51:35.917764197 -0500\n@@ -582,7 +582,6 @@\n         // From Commons Math:\n         //if either operand is abs 1, return 1:\n         if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n-            return 1;\n         }\n         // keep u and v negative, as negative integers range down to\n         // -2^31, while positive numbers can only be as large as 2^31-1\n@@ -595,9 +594,6 @@\n         while ((u&1)==0 && (v&1)==0 && k<31) { // while u and v are both even...\n             u/=2; v/=2; k++; // cast out twos.\n         }\n-        if (k==31) {\n-            throw new ArithmeticException(\"overflow: gcd is 2^31\");\n-        }\n         // B2. Initialize: u and v have been divided by 2^k and at least\n         //     one is odd.\n         int t = ((u&1)==1) ? v : -(u/2)/*B3*/;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 585, 
          "faulty": "return 1;", 
          "type": "Delete", 
          "seed": "v/=2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 598, 
          "faulty": "if (k == 31) {\n  throw new ArithmeticException(\"overflow: gcd is 2^31\");\n}", 
          "type": "Delete", 
          "seed": "while ((u & 1) == 0 && (v & 1) == 0 && k < 31) {\n  u/=2;\n  v/=2;\n  k++;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:13:18.647839255 -0500\n+++ /tmp/Arja_Defects4J_Lang_22/patches_2h8q/Patch_1369/patched/tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:42:22.347364616 -0500\n@@ -582,7 +582,6 @@\n         // From Commons Math:\n         //if either operand is abs 1, return 1:\n         if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n-            return 1;\n         }\n         // keep u and v negative, as negative integers range down to\n         // -2^31, while positive numbers can only be as large as 2^31-1\n@@ -841,7 +840,8 @@\n      */\n     @Override\n     public boolean equals(Object obj) {\n-        if (obj == this) {\n+        toProperString = \"-1\";\n+\t\tif (obj == this) {\n             return true;\n         }\n         if (obj instanceof Fraction == false) {\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 585, 
          "faulty": "return 1;", 
          "type": "Delete", 
          "seed": "v=-v;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 844, 
          "faulty": "if (obj == this) {\n  return true;\n}", 
          "type": "InsertBefore", 
          "seed": "toProperString=\"-1\";"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:13:18.647839255 -0500\n+++ /tmp/Arja_Defects4J_Lang_22/patches_2h8q/Patch_768/patched/tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:31:07.668447876 -0500\n@@ -582,7 +582,6 @@\n         // From Commons Math:\n         //if either operand is abs 1, return 1:\n         if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n-            return 1;\n         }\n         // keep u and v negative, as negative integers range down to\n         // -2^31, while positive numbers can only be as large as 2^31-1\n@@ -611,7 +610,10 @@\n             }\n             // B5 [reset max(u,v)]\n             if (t>0) {\n-                u = -t;\n+                if (v > 0) {\n+\t\t\t\t\tv = -v;\n+\t\t\t\t}\n+\t\t\t\tu = -t;\n             } else {\n                 v = t;\n             }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 614, 
          "faulty": "u=-t;", 
          "type": "InsertBefore", 
          "seed": "if (v > 0) {\n  v=-v;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 585, 
          "faulty": "return 1;", 
          "type": "Delete", 
          "seed": "if (u > 0) {\n  u=-u;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:13:18.647839255 -0500\n+++ /tmp/Arja_Defects4J_Lang_22/patches_2h8q/Patch_171/patched/tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:18:52.853274344 -0500\n@@ -582,7 +582,7 @@\n         // From Commons Math:\n         //if either operand is abs 1, return 1:\n         if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n-            return 1;\n+            u = -u;\n         }\n         // keep u and v negative, as negative integers range down to\n         // -2^31, while positive numbers can only be as large as 2^31-1\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 585, 
          "faulty": "return 1;", 
          "type": "Replace", 
          "seed": "u=-u;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:13:18.647839255 -0500\n+++ /tmp/Arja_Defects4J_Lang_22/patches_2h8q/Patch_349/patched/tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:22:53.506308496 -0500\n@@ -582,7 +582,6 @@\n         // From Commons Math:\n         //if either operand is abs 1, return 1:\n         if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n-            return 1;\n         }\n         // keep u and v negative, as negative integers range down to\n         // -2^31, while positive numbers can only be as large as 2^31-1\n@@ -847,7 +846,8 @@\n         if (obj instanceof Fraction == false) {\n             return false;\n         }\n-        Fraction other = (Fraction) obj;\n+        hashCode = 37 * (37 * 17 + getNumerator()) + getDenominator();\n+\t\tFraction other = (Fraction) obj;\n         return (getNumerator() == other.getNumerator() &&\n                 getDenominator() == other.getDenominator());\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 585, 
          "faulty": "return 1;", 
          "type": "Delete", 
          "seed": "throw new ArithmeticException(\"Numerator too large to represent as an Integer.\");"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 850, 
          "faulty": "Fraction other=(Fraction)obj;", 
          "type": "InsertBefore", 
          "seed": "hashCode=37 * (37 * 17 + getNumerator()) + getDenominator();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:13:18.647839255 -0500\n+++ /tmp/Arja_Defects4J_Lang_22/patches_2h8q/Patch_369/patched/tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:23:44.930531259 -0500\n@@ -582,7 +582,6 @@\n         // From Commons Math:\n         //if either operand is abs 1, return 1:\n         if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n-            return 1;\n         }\n         // keep u and v negative, as negative integers range down to\n         // -2^31, while positive numbers can only be as large as 2^31-1\n@@ -841,9 +840,6 @@\n      */\n     @Override\n     public boolean equals(Object obj) {\n-        if (obj == this) {\n-            return true;\n-        }\n         if (obj instanceof Fraction == false) {\n             return false;\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 585, 
          "faulty": "return 1;", 
          "type": "Delete", 
          "seed": "v=-v;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 844, 
          "faulty": "if (obj == this) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "if (numerator == Integer.MIN_VALUE) {\n  throw new ArithmeticException(\"overflow: too large to negate\");\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:13:18.647839255 -0500\n+++ /tmp/Arja_Defects4J_Lang_22/patches_2h8q/Patch_1480/patched/tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:44:21.407878886 -0500\n@@ -472,7 +472,11 @@\n      * @return a new reduced fraction instance, or this if no simplification possible\n      */\n     public Fraction reduce() {\n-        if (numerator == 0) {\n+        if (toString == null) {\n+\t\t\ttoString = new StringBuilder(32).append(getNumerator()).append('/')\n+\t\t\t\t\t.append(getDenominator()).toString();\n+\t\t}\n+\t\tif (numerator == 0) {\n             return equals(ZERO) ? this : ZERO;\n         }\n         int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\n@@ -582,7 +586,6 @@\n         // From Commons Math:\n         //if either operand is abs 1, return 1:\n         if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n-            return 1;\n         }\n         // keep u and v negative, as negative integers range down to\n         // -2^31, while positive numbers can only be as large as 2^31-1\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 585, 
          "faulty": "return 1;", 
          "type": "Delete", 
          "seed": "if (u > 0) {\n  u=-u;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 475, 
          "faulty": "if (numerator == 0) {\n  return equals(ZERO) ? this : ZERO;\n}", 
          "type": "InsertBefore", 
          "seed": "if (toString == null) {\n  toString=new StringBuilder(32).append(getNumerator()).append('/').append(getDenominator()).toString();\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:13:18.647839255 -0500\n+++ /tmp/Arja_Defects4J_Lang_22/patches_2h8q/Patch_691/patched/tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:29:30.576027749 -0500\n@@ -582,7 +582,7 @@\n         // From Commons Math:\n         //if either operand is abs 1, return 1:\n         if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n-            return 1;\n+            u = -u;\n         }\n         // keep u and v negative, as negative integers range down to\n         // -2^31, while positive numbers can only be as large as 2^31-1\n@@ -609,7 +609,8 @@\n             while ((t&1)==0) { // while t is even..\n                 t/=2; // cast out twos\n             }\n-            // B5 [reset max(u,v)]\n+            v = -v;\n+\t\t\t// B5 [reset max(u,v)]\n             if (t>0) {\n                 u = -t;\n             } else {\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 585, 
          "faulty": "return 1;", 
          "type": "Replace", 
          "seed": "u=-u;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 613, 
          "faulty": "if (t > 0) {\n  u=-t;\n}\n else {\n  v=t;\n}", 
          "type": "InsertBefore", 
          "seed": "v=-v;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:13:18.647839255 -0500\n+++ /tmp/Arja_Defects4J_Lang_22/patches_2h8q/Patch_358/patched/tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:23:24.594443170 -0500\n@@ -579,11 +579,9 @@\n      * @return the greatest common divisor, never zero\n      */\n     private static int greatestCommonDivisor(int u, int v) {\n-        // From Commons Math:\n-        //if either operand is abs 1, return 1:\n-        if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n-            return 1;\n-        }\n+        if (u > 0) {\n+\t\t\tu = -u;\n+\t\t}\n         // keep u and v negative, as negative integers range down to\n         // -2^31, while positive numbers can only be as large as 2^31-1\n         // (i.e. we can't necessarily negate a negative number without\n@@ -841,9 +839,6 @@\n      */\n     @Override\n     public boolean equals(Object obj) {\n-        if (obj == this) {\n-            return true;\n-        }\n         if (obj instanceof Fraction == false) {\n             return false;\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 584, 
          "faulty": "if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n  return 1;\n}", 
          "type": "Replace", 
          "seed": "if (u > 0) {\n  u=-u;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 585, 
          "faulty": "return 1;", 
          "type": "Delete", 
          "seed": "if (u > 0) {\n  u=-u;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 844, 
          "faulty": "if (obj == this) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "if (numerator == 0) {\n  toProperString=\"0\";\n}\n else if (numerator == denominator) {\n  toProperString=\"1\";\n}\n else if (numerator == -1 * denominator) {\n  toProperString=\"-1\";\n}\n else if ((numerator > 0 ? -numerator : numerator) < -denominator) {\n  int properNumerator=getProperNumerator();\n  if (properNumerator == 0) {\n    toProperString=Integer.toString(getProperWhole());\n  }\n else {\n    toProperString=new StringBuilder(32).append(getProperWhole()).append(' ').append(properNumerator).append('/').append(getDenominator()).toString();\n  }\n}\n else {\n  toProperString=new StringBuilder(32).append(getNumerator()).append('/').append(getDenominator()).toString();\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:13:18.647839255 -0500\n+++ /tmp/Arja_Defects4J_Lang_22/patches_2h8q/Patch_330/patched/tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:22:37.062237256 -0500\n@@ -579,11 +579,9 @@\n      * @return the greatest common divisor, never zero\n      */\n     private static int greatestCommonDivisor(int u, int v) {\n-        // From Commons Math:\n-        //if either operand is abs 1, return 1:\n-        if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n-            return 1;\n-        }\n+        if (u > 0) {\n+\t\t\tu = -u;\n+\t\t}\n         // keep u and v negative, as negative integers range down to\n         // -2^31, while positive numbers can only be as large as 2^31-1\n         // (i.e. we can't necessarily negate a negative number without\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 584, 
          "faulty": "if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n  return 1;\n}", 
          "type": "Replace", 
          "seed": "if (u > 0) {\n  u=-u;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 585, 
          "faulty": "return 1;", 
          "type": "Replace", 
          "seed": "u=-u;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:13:18.647839255 -0500\n+++ /tmp/Arja_Defects4J_Lang_22/patches_2h8q/Patch_1516/patched/tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:45:11.796096495 -0500\n@@ -579,11 +579,9 @@\n      * @return the greatest common divisor, never zero\n      */\n     private static int greatestCommonDivisor(int u, int v) {\n-        // From Commons Math:\n-        //if either operand is abs 1, return 1:\n-        if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n-            return 1;\n-        }\n+        if (u > 0) {\n+\t\t\tu = -u;\n+\t\t}\n         // keep u and v negative, as negative integers range down to\n         // -2^31, while positive numbers can only be as large as 2^31-1\n         // (i.e. we can't necessarily negate a negative number without\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 584, 
          "faulty": "if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n  return 1;\n}", 
          "type": "Replace", 
          "seed": "if (u > 0) {\n  u=-u;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:13:18.647839255 -0500\n+++ /tmp/Arja_Defects4J_Lang_22/patches_2h8q/Patch_1493/patched/tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:44:42.295969097 -0500\n@@ -582,7 +582,6 @@\n         // From Commons Math:\n         //if either operand is abs 1, return 1:\n         if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n-            return 1;\n         }\n         // keep u and v negative, as negative integers range down to\n         // -2^31, while positive numbers can only be as large as 2^31-1\n@@ -841,7 +840,10 @@\n      */\n     @Override\n     public boolean equals(Object obj) {\n-        if (obj == this) {\n+        if (numerator == Integer.MIN_VALUE) {\n+\t\t\tthrow new ArithmeticException(\"overflow: too large to negate\");\n+\t\t}\n+\t\tif (obj == this) {\n             return true;\n         }\n         if (obj instanceof Fraction == false) {\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 585, 
          "faulty": "return 1;", 
          "type": "Delete", 
          "seed": "v=-v;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 844, 
          "faulty": "if (obj == this) {\n  return true;\n}", 
          "type": "InsertBefore", 
          "seed": "if (numerator == Integer.MIN_VALUE) {\n  throw new ArithmeticException(\"overflow: too large to negate\");\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:13:18.647839255 -0500\n+++ /tmp/Arja_Defects4J_Lang_22/patches_2h8q/Patch_981/patched/tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:34:55.441433078 -0500\n@@ -582,7 +582,7 @@\n         // From Commons Math:\n         //if either operand is abs 1, return 1:\n         if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n-            return 1;\n+            u = -u;\n         }\n         // keep u and v negative, as negative integers range down to\n         // -2^31, while positive numbers can only be as large as 2^31-1\n@@ -611,7 +611,10 @@\n             }\n             // B5 [reset max(u,v)]\n             if (t>0) {\n-                u = -t;\n+                if (v > 0) {\n+\t\t\t\t\tv = -v;\n+\t\t\t\t}\n+\t\t\t\tu = -t;\n             } else {\n                 v = t;\n             }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 614, 
          "faulty": "u=-t;", 
          "type": "InsertBefore", 
          "seed": "if (v > 0) {\n  v=-v;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 585, 
          "faulty": "return 1;", 
          "type": "Replace", 
          "seed": "u=-u;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:13:18.647839255 -0500\n+++ /tmp/Arja_Defects4J_Lang_22/patches_2h8q/Patch_814/patched/tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:32:07.216705496 -0500\n@@ -477,7 +477,9 @@\n         }\n         int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\n         if (gcd == 1) {\n-            return this;\n+            toString = new StringBuilder(32).append(getNumerator()).append('/')\n+\t\t\t\t\t.append(getDenominator()).toString();\n+\t\t\treturn this;\n         }\n         return Fraction.getFraction(numerator / gcd, denominator / gcd);\n     }\n@@ -582,7 +584,7 @@\n         // From Commons Math:\n         //if either operand is abs 1, return 1:\n         if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n-            return 1;\n+            v = -v;\n         }\n         // keep u and v negative, as negative integers range down to\n         // -2^31, while positive numbers can only be as large as 2^31-1\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 480, 
          "faulty": "return this;", 
          "type": "InsertBefore", 
          "seed": "toString=new StringBuilder(32).append(getNumerator()).append('/').append(getDenominator()).toString();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 585, 
          "faulty": "return 1;", 
          "type": "Replace", 
          "seed": "v=-v;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:13:18.647839255 -0500\n+++ /tmp/Arja_Defects4J_Lang_22/patches_2h8q/Patch_1177/patched/tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:38:39.314400901 -0500\n@@ -476,7 +476,24 @@\n             return equals(ZERO) ? this : ZERO;\n         }\n         int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\n-        if (gcd == 1) {\n+        if (numerator == denominator) {\n+\t\t\ttoProperString = \"1\";\n+\t\t} else if (numerator == -1 * denominator) {\n+\t\t\ttoProperString = \"-1\";\n+\t\t} else if ((numerator > 0 ? -numerator : numerator) < -denominator) {\n+\t\t\tint properNumerator = getProperNumerator();\n+\t\t\tif (properNumerator == 0) {\n+\t\t\t\ttoProperString = Integer.toString(getProperWhole());\n+\t\t\t} else {\n+\t\t\t\ttoProperString = new StringBuilder(32).append(getProperWhole())\n+\t\t\t\t\t\t.append(' ').append(properNumerator).append('/')\n+\t\t\t\t\t\t.append(getDenominator()).toString();\n+\t\t\t}\n+\t\t} else {\n+\t\t\ttoProperString = new StringBuilder(32).append(getNumerator())\n+\t\t\t\t\t.append('/').append(getDenominator()).toString();\n+\t\t}\n+\t\tif (gcd == 1) {\n             return this;\n         }\n         return Fraction.getFraction(numerator / gcd, denominator / gcd);\n@@ -582,7 +599,7 @@\n         // From Commons Math:\n         //if either operand is abs 1, return 1:\n         if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n-            return 1;\n+            v = -v;\n         }\n         // keep u and v negative, as negative integers range down to\n         // -2^31, while positive numbers can only be as large as 2^31-1\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 585, 
          "faulty": "return 1;", 
          "type": "Replace", 
          "seed": "v=-v;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 479, 
          "faulty": "if (gcd == 1) {\n  return this;\n}", 
          "type": "InsertBefore", 
          "seed": "if (numerator == denominator) {\n  toProperString=\"1\";\n}\n else if (numerator == -1 * denominator) {\n  toProperString=\"-1\";\n}\n else if ((numerator > 0 ? -numerator : numerator) < -denominator) {\n  int properNumerator=getProperNumerator();\n  if (properNumerator == 0) {\n    toProperString=Integer.toString(getProperWhole());\n  }\n else {\n    toProperString=new StringBuilder(32).append(getProperWhole()).append(' ').append(properNumerator).append('/').append(getDenominator()).toString();\n  }\n}\n else {\n  toProperString=new StringBuilder(32).append(getNumerator()).append('/').append(getDenominator()).toString();\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:13:18.647839255 -0500\n+++ /tmp/Arja_Defects4J_Lang_22/patches_2h8q/Patch_851/patched/tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:32:34.180822138 -0500\n@@ -153,7 +153,11 @@\n                 throw new ArithmeticException(\"overflow: can't negate\");\n             }\n             numerator = -numerator;\n-            denominator = -denominator;\n+            if (numerator == Integer.MIN_VALUE\n+\t\t\t\t\t|| denominator == Integer.MIN_VALUE) {\n+\t\t\t\tthrow new ArithmeticException(\"overflow: can't negate\");\n+\t\t\t}\n+\t\t\tdenominator = -denominator;\n         }\n         return new Fraction(numerator, denominator);\n     }\n@@ -582,7 +586,7 @@\n         // From Commons Math:\n         //if either operand is abs 1, return 1:\n         if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n-            return 1;\n+            v = -v;\n         }\n         // keep u and v negative, as negative integers range down to\n         // -2^31, while positive numbers can only be as large as 2^31-1\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 156, 
          "faulty": "denominator=-denominator;", 
          "type": "InsertBefore", 
          "seed": "if (numerator == Integer.MIN_VALUE || denominator == Integer.MIN_VALUE) {\n  throw new ArithmeticException(\"overflow: can't negate\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 585, 
          "faulty": "return 1;", 
          "type": "Replace", 
          "seed": "v=-v;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:13:18.647839255 -0500\n+++ /tmp/Arja_Defects4J_Lang_22/patches_2h8q/Patch_1803/patched/tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:50:38.133512944 -0500\n@@ -579,11 +579,7 @@\n      * @return the greatest common divisor, never zero\n      */\n     private static int greatestCommonDivisor(int u, int v) {\n-        // From Commons Math:\n-        //if either operand is abs 1, return 1:\n-        if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n-            return 1;\n-        }\n+        u = -u;\n         // keep u and v negative, as negative integers range down to\n         // -2^31, while positive numbers can only be as large as 2^31-1\n         // (i.e. we can't necessarily negate a negative number without\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 584, 
          "faulty": "if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n  return 1;\n}", 
          "type": "Replace", 
          "seed": "u=-u;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 585, 
          "faulty": "return 1;", 
          "type": "Replace", 
          "seed": "v=-v;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:13:18.647839255 -0500\n+++ /tmp/Arja_Defects4J_Lang_22/patches_2h8q/Patch_1567/patched/tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:45:55.872286826 -0500\n@@ -582,7 +582,6 @@\n         // From Commons Math:\n         //if either operand is abs 1, return 1:\n         if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n-            return 1;\n         }\n         // keep u and v negative, as negative integers range down to\n         // -2^31, while positive numbers can only be as large as 2^31-1\n@@ -842,6 +841,9 @@\n     @Override\n     public boolean equals(Object obj) {\n         if (obj == this) {\n+\t\t\treturn true;\n+\t\t}\n+\t\tif (obj == this) {\n             return true;\n         }\n         if (obj instanceof Fraction == false) {\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 585, 
          "faulty": "return 1;", 
          "type": "Delete", 
          "seed": "throw new ArithmeticException(\"Numerator too large to represent as an Integer.\");"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 844, 
          "faulty": "if (obj == this) {\n  return true;\n}", 
          "type": "InsertBefore", 
          "seed": "if (obj == this) {\n  return true;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:13:18.647839255 -0500\n+++ /tmp/Arja_Defects4J_Lang_22/patches_2h8q/Patch_661/patched/tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:28:59.227892081 -0500\n@@ -220,7 +220,10 @@\n         }\n         // allow 2^k/-2^31 as a valid fraction (where k>0)\n         if (denominator==Integer.MIN_VALUE && (numerator&1)==0) {\n-            numerator/=2; denominator/=2;\n+            numerator/=2; if (numerator == 0) {\n+\t\t\t\treturn ZERO;\n+\t\t\t}\n+\t\t\tdenominator/=2;\n         }\n         if (denominator < 0) {\n             if (numerator==Integer.MIN_VALUE ||\n@@ -582,7 +585,6 @@\n         // From Commons Math:\n         //if either operand is abs 1, return 1:\n         if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n-            return 1;\n         }\n         // keep u and v negative, as negative integers range down to\n         // -2^31, while positive numbers can only be as large as 2^31-1\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 585, 
          "faulty": "return 1;", 
          "type": "Delete", 
          "seed": "v=-v;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 223, 
          "faulty": "denominator/=2;", 
          "type": "InsertBefore", 
          "seed": "if (numerator == 0) {\n  return ZERO;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:13:18.647839255 -0500\n+++ /tmp/Arja_Defects4J_Lang_22/patches_2h8q/Patch_878/patched/tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:32:59.132930069 -0500\n@@ -475,7 +475,24 @@\n         if (numerator == 0) {\n             return equals(ZERO) ? this : ZERO;\n         }\n-        int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\n+        if (numerator == denominator) {\n+\t\t\ttoProperString = \"1\";\n+\t\t} else if (numerator == -1 * denominator) {\n+\t\t\ttoProperString = \"-1\";\n+\t\t} else if ((numerator > 0 ? -numerator : numerator) < -denominator) {\n+\t\t\tint properNumerator = getProperNumerator();\n+\t\t\tif (properNumerator == 0) {\n+\t\t\t\ttoProperString = Integer.toString(getProperWhole());\n+\t\t\t} else {\n+\t\t\t\ttoProperString = new StringBuilder(32).append(getProperWhole())\n+\t\t\t\t\t\t.append(' ').append(properNumerator).append('/')\n+\t\t\t\t\t\t.append(getDenominator()).toString();\n+\t\t\t}\n+\t\t} else {\n+\t\t\ttoProperString = new StringBuilder(32).append(getNumerator())\n+\t\t\t\t\t.append('/').append(getDenominator()).toString();\n+\t\t}\n+\t\tint gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\n         if (gcd == 1) {\n             return this;\n         }\n@@ -582,7 +599,7 @@\n         // From Commons Math:\n         //if either operand is abs 1, return 1:\n         if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n-            return 1;\n+            v = -v;\n         }\n         // keep u and v negative, as negative integers range down to\n         // -2^31, while positive numbers can only be as large as 2^31-1\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 585, 
          "faulty": "return 1;", 
          "type": "Replace", 
          "seed": "v=-v;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 478, 
          "faulty": "int gcd=greatestCommonDivisor(Math.abs(numerator),denominator);", 
          "type": "InsertBefore", 
          "seed": "if (numerator == denominator) {\n  toProperString=\"1\";\n}\n else if (numerator == -1 * denominator) {\n  toProperString=\"-1\";\n}\n else if ((numerator > 0 ? -numerator : numerator) < -denominator) {\n  int properNumerator=getProperNumerator();\n  if (properNumerator == 0) {\n    toProperString=Integer.toString(getProperWhole());\n  }\n else {\n    toProperString=new StringBuilder(32).append(getProperWhole()).append(' ').append(properNumerator).append('/').append(getDenominator()).toString();\n  }\n}\n else {\n  toProperString=new StringBuilder(32).append(getNumerator()).append('/').append(getDenominator()).toString();\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:13:18.647839255 -0500\n+++ /tmp/Arja_Defects4J_Lang_22/patches_2h8q/Patch_1590/patched/tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:46:42.760489282 -0500\n@@ -216,7 +216,11 @@\n             throw new ArithmeticException(\"The denominator must not be zero\");\n         }\n         if (numerator==0) {\n-            return ZERO; // normalize zero.\n+            if (numerator == Integer.MIN_VALUE\n+\t\t\t\t\t|| denominator == Integer.MIN_VALUE) {\n+\t\t\t\tthrow new ArithmeticException(\"overflow: can't negate\");\n+\t\t\t}\n+\t\t\treturn ZERO; // normalize zero.\n         }\n         // allow 2^k/-2^31 as a valid fraction (where k>0)\n         if (denominator==Integer.MIN_VALUE && (numerator&1)==0) {\n@@ -582,7 +586,6 @@\n         // From Commons Math:\n         //if either operand is abs 1, return 1:\n         if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n-            return 1;\n         }\n         // keep u and v negative, as negative integers range down to\n         // -2^31, while positive numbers can only be as large as 2^31-1\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 585, 
          "faulty": "return 1;", 
          "type": "Delete", 
          "seed": "v=-v;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 219, 
          "faulty": "return ZERO;", 
          "type": "InsertBefore", 
          "seed": "if (numerator == Integer.MIN_VALUE || denominator == Integer.MIN_VALUE) {\n  throw new ArithmeticException(\"overflow: can't negate\");\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:13:18.647839255 -0500\n+++ /tmp/Arja_Defects4J_Lang_22/patches_2h8q/Patch_455/patched/tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:25:19.358940228 -0500\n@@ -213,7 +213,8 @@\n      */\n     public static Fraction getReducedFraction(int numerator, int denominator) {\n         if (denominator == 0) {\n-            throw new ArithmeticException(\"The denominator must not be zero\");\n+            denominator = -denominator;\n+\t\t\tthrow new ArithmeticException(\"The denominator must not be zero\");\n         }\n         if (numerator==0) {\n             return ZERO; // normalize zero.\n@@ -582,7 +583,6 @@\n         // From Commons Math:\n         //if either operand is abs 1, return 1:\n         if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n-            return 1;\n         }\n         // keep u and v negative, as negative integers range down to\n         // -2^31, while positive numbers can only be as large as 2^31-1\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 585, 
          "faulty": "return 1;", 
          "type": "Delete", 
          "seed": "if (u > 0) {\n  u=-u;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 216, 
          "faulty": "throw new ArithmeticException(\"The denominator must not be zero\");", 
          "type": "InsertBefore", 
          "seed": "denominator=-denominator;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:13:18.647839255 -0500\n+++ /tmp/Arja_Defects4J_Lang_22/patches_2h8q/Patch_337/patched/tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:22:44.642270096 -0500\n@@ -472,7 +472,8 @@\n      * @return a new reduced fraction instance, or this if no simplification possible\n      */\n     public Fraction reduce() {\n-        if (numerator == 0) {\n+        toProperString = \"1\";\n+\t\tif (numerator == 0) {\n             return equals(ZERO) ? this : ZERO;\n         }\n         int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\n@@ -582,7 +583,7 @@\n         // From Commons Math:\n         //if either operand is abs 1, return 1:\n         if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n-            return 1;\n+            u = -u;\n         }\n         // keep u and v negative, as negative integers range down to\n         // -2^31, while positive numbers can only be as large as 2^31-1\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 585, 
          "faulty": "return 1;", 
          "type": "Replace", 
          "seed": "u=-u;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 475, 
          "faulty": "if (numerator == 0) {\n  return equals(ZERO) ? this : ZERO;\n}", 
          "type": "InsertBefore", 
          "seed": "toProperString=\"1\";"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:13:18.647839255 -0500\n+++ /tmp/Arja_Defects4J_Lang_22/patches_2h8q/Patch_272/patched/tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:21:17.261893922 -0500\n@@ -579,11 +579,6 @@\n      * @return the greatest common divisor, never zero\n      */\n     private static int greatestCommonDivisor(int u, int v) {\n-        // From Commons Math:\n-        //if either operand is abs 1, return 1:\n-        if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n-            return 1;\n-        }\n         // keep u and v negative, as negative integers range down to\n         // -2^31, while positive numbers can only be as large as 2^31-1\n         // (i.e. we can't necessarily negate a negative number without\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 584, 
          "faulty": "if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n  return 1;\n}", 
          "type": "Delete", 
          "seed": "v=-v;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 585, 
          "faulty": "return 1;", 
          "type": "Delete", 
          "seed": "v/=2;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:13:18.647839255 -0500\n+++ /tmp/Arja_Defects4J_Lang_22/patches_2h8q/Patch_102/patched/tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:17:11.880840948 -0500\n@@ -582,7 +582,6 @@\n         // From Commons Math:\n         //if either operand is abs 1, return 1:\n         if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n-            return 1;\n         }\n         // keep u and v negative, as negative integers range down to\n         // -2^31, while positive numbers can only be as large as 2^31-1\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 585, 
          "faulty": "return 1;", 
          "type": "Delete", 
          "seed": "if (u > 0) {\n  u=-u;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:13:18.647839255 -0500\n+++ /tmp/Arja_Defects4J_Lang_22/patches_2h8q/Patch_1728/patched/tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:49:12.173139080 -0500\n@@ -582,7 +582,7 @@\n         // From Commons Math:\n         //if either operand is abs 1, return 1:\n         if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n-            return 1;\n+            u = -u;\n         }\n         // keep u and v negative, as negative integers range down to\n         // -2^31, while positive numbers can only be as large as 2^31-1\n@@ -847,7 +847,10 @@\n         if (obj instanceof Fraction == false) {\n             return false;\n         }\n-        Fraction other = (Fraction) obj;\n+        if (denominator == 0) {\n+\t\t\tthrow new ArithmeticException(\"The denominator must not be zero\");\n+\t\t}\n+\t\tFraction other = (Fraction) obj;\n         return (getNumerator() == other.getNumerator() &&\n                 getDenominator() == other.getDenominator());\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 585, 
          "faulty": "return 1;", 
          "type": "Replace", 
          "seed": "u=-u;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 850, 
          "faulty": "Fraction other=(Fraction)obj;", 
          "type": "InsertBefore", 
          "seed": "if (denominator == 0) {\n  throw new ArithmeticException(\"The denominator must not be zero\");\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:13:18.647839255 -0500\n+++ /tmp/Arja_Defects4J_Lang_22/patches_2h8q/Patch_689/patched/tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:29:30.248026330 -0500\n@@ -473,6 +473,9 @@\n      */\n     public Fraction reduce() {\n         if (numerator == 0) {\n+\t\t\treturn equals(ZERO) ? this : ZERO;\n+\t\t}\n+\t\tif (numerator == 0) {\n             return equals(ZERO) ? this : ZERO;\n         }\n         int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\n@@ -582,7 +585,6 @@\n         // From Commons Math:\n         //if either operand is abs 1, return 1:\n         if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n-            return 1;\n         }\n         // keep u and v negative, as negative integers range down to\n         // -2^31, while positive numbers can only be as large as 2^31-1\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 585, 
          "faulty": "return 1;", 
          "type": "Delete", 
          "seed": "if (v > 0) {\n  v=-v;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 475, 
          "faulty": "if (numerator == 0) {\n  return equals(ZERO) ? this : ZERO;\n}", 
          "type": "InsertBefore", 
          "seed": "if (numerator == 0) {\n  return equals(ZERO) ? this : ZERO;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:13:18.647839255 -0500\n+++ /tmp/Arja_Defects4J_Lang_22/patches_2h8q/Patch_292/patched/tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:21:34.369967304 -0500\n@@ -213,7 +213,11 @@\n      */\n     public static Fraction getReducedFraction(int numerator, int denominator) {\n         if (denominator == 0) {\n-            throw new ArithmeticException(\"The denominator must not be zero\");\n+            if (denominator == Integer.MIN_VALUE && (numerator & 1) == 0) {\n+\t\t\t\tnumerator /= 2;\n+\t\t\t\tdenominator /= 2;\n+\t\t\t}\n+\t\t\tthrow new ArithmeticException(\"The denominator must not be zero\");\n         }\n         if (numerator==0) {\n             return ZERO; // normalize zero.\n@@ -582,7 +586,7 @@\n         // From Commons Math:\n         //if either operand is abs 1, return 1:\n         if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n-            return 1;\n+            u = -u;\n         }\n         // keep u and v negative, as negative integers range down to\n         // -2^31, while positive numbers can only be as large as 2^31-1\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 585, 
          "faulty": "return 1;", 
          "type": "Replace", 
          "seed": "u=-u;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 216, 
          "faulty": "throw new ArithmeticException(\"The denominator must not be zero\");", 
          "type": "InsertBefore", 
          "seed": "if (denominator == Integer.MIN_VALUE && (numerator & 1) == 0) {\n  numerator/=2;\n  denominator/=2;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:13:18.647839255 -0500\n+++ /tmp/Arja_Defects4J_Lang_22/patches_2h8q/Patch_837/patched/tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:32:24.488780212 -0500\n@@ -579,11 +579,7 @@\n      * @return the greatest common divisor, never zero\n      */\n     private static int greatestCommonDivisor(int u, int v) {\n-        // From Commons Math:\n-        //if either operand is abs 1, return 1:\n-        if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n-            return 1;\n-        }\n+        u = -u;\n         // keep u and v negative, as negative integers range down to\n         // -2^31, while positive numbers can only be as large as 2^31-1\n         // (i.e. we can't necessarily negate a negative number without\n@@ -841,9 +837,21 @@\n      */\n     @Override\n     public boolean equals(Object obj) {\n-        if (obj == this) {\n-            return true;\n-        }\n+        if (numerator == -1 * denominator) {\n+\t\t\ttoProperString = \"-1\";\n+\t\t} else if ((numerator > 0 ? -numerator : numerator) < -denominator) {\n+\t\t\tint properNumerator = getProperNumerator();\n+\t\t\tif (properNumerator == 0) {\n+\t\t\t\ttoProperString = Integer.toString(getProperWhole());\n+\t\t\t} else {\n+\t\t\t\ttoProperString = new StringBuilder(32).append(getProperWhole())\n+\t\t\t\t\t\t.append(' ').append(properNumerator).append('/')\n+\t\t\t\t\t\t.append(getDenominator()).toString();\n+\t\t\t}\n+\t\t} else {\n+\t\t\ttoProperString = new StringBuilder(32).append(getNumerator())\n+\t\t\t\t\t.append('/').append(getDenominator()).toString();\n+\t\t}\n         if (obj instanceof Fraction == false) {\n             return false;\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 584, 
          "faulty": "if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n  return 1;\n}", 
          "type": "Replace", 
          "seed": "u=-u;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 585, 
          "faulty": "return 1;", 
          "type": "Delete", 
          "seed": "u=-u;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 844, 
          "faulty": "if (obj == this) {\n  return true;\n}", 
          "type": "Replace", 
          "seed": "if (numerator == -1 * denominator) {\n  toProperString=\"-1\";\n}\n else if ((numerator > 0 ? -numerator : numerator) < -denominator) {\n  int properNumerator=getProperNumerator();\n  if (properNumerator == 0) {\n    toProperString=Integer.toString(getProperWhole());\n  }\n else {\n    toProperString=new StringBuilder(32).append(getProperWhole()).append(' ').append(properNumerator).append('/').append(getDenominator()).toString();\n  }\n}\n else {\n  toProperString=new StringBuilder(32).append(getNumerator()).append('/').append(getDenominator()).toString();\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:13:18.647839255 -0500\n+++ /tmp/Arja_Defects4J_Lang_22/patches_2h8q/Patch_671/patched/tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:29:13.511953900 -0500\n@@ -216,7 +216,10 @@\n             throw new ArithmeticException(\"The denominator must not be zero\");\n         }\n         if (numerator==0) {\n-            return ZERO; // normalize zero.\n+            if (numerator == Integer.MIN_VALUE) {\n+\t\t\t\tthrow new ArithmeticException(\"overflow: too large to negate\");\n+\t\t\t}\n+\t\t\treturn ZERO; // normalize zero.\n         }\n         // allow 2^k/-2^31 as a valid fraction (where k>0)\n         if (denominator==Integer.MIN_VALUE && (numerator&1)==0) {\n@@ -582,7 +585,7 @@\n         // From Commons Math:\n         //if either operand is abs 1, return 1:\n         if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n-            return 1;\n+            u = -u;\n         }\n         // keep u and v negative, as negative integers range down to\n         // -2^31, while positive numbers can only be as large as 2^31-1\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 585, 
          "faulty": "return 1;", 
          "type": "Replace", 
          "seed": "u=-u;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 219, 
          "faulty": "return ZERO;", 
          "type": "InsertBefore", 
          "seed": "if (numerator == Integer.MIN_VALUE) {\n  throw new ArithmeticException(\"overflow: too large to negate\");\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:13:18.647839255 -0500\n+++ /tmp/Arja_Defects4J_Lang_22/patches_2h8q/Patch_391/patched/tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:23:56.986583479 -0500\n@@ -582,14 +582,13 @@\n         // From Commons Math:\n         //if either operand is abs 1, return 1:\n         if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n-            return 1;\n         }\n         // keep u and v negative, as negative integers range down to\n         // -2^31, while positive numbers can only be as large as 2^31-1\n         // (i.e. we can't necessarily negate a negative number without\n         // overflow)\n         if (u>0) { u=-u; } // make u negative\n-        if (v>0) { v=-v; } // make v negative\n+        v = -v;\n         // B1. [Find power of 2]\n         int k=0;\n         while ((u&1)==0 && (v&1)==0 && k<31) { // while u and v are both even...\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 592, 
          "faulty": "if (v > 0) {\n  v=-v;\n}", 
          "type": "Replace", 
          "seed": "v=-v;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 585, 
          "faulty": "return 1;", 
          "type": "Delete", 
          "seed": "if (u > 0) {\n  u=-u;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:13:18.647839255 -0500\n+++ /tmp/Arja_Defects4J_Lang_22/patches_2h8q/Patch_1670/patched/tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:47:46.248765255 -0500\n@@ -479,7 +479,8 @@\n         if (gcd == 1) {\n             return this;\n         }\n-        return Fraction.getFraction(numerator / gcd, denominator / gcd);\n+        hashCode = 37 * (37 * 17 + getNumerator()) + getDenominator();\n+\t\treturn Fraction.getFraction(numerator / gcd, denominator / gcd);\n     }\n \n     /**\n@@ -582,7 +583,7 @@\n         // From Commons Math:\n         //if either operand is abs 1, return 1:\n         if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n-            return 1;\n+            u = -u;\n         }\n         // keep u and v negative, as negative integers range down to\n         // -2^31, while positive numbers can only be as large as 2^31-1\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 585, 
          "faulty": "return 1;", 
          "type": "Replace", 
          "seed": "u=-u;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 482, 
          "faulty": "return Fraction.getFraction(numerator / gcd,denominator / gcd);", 
          "type": "InsertBefore", 
          "seed": "hashCode=37 * (37 * 17 + getNumerator()) + getDenominator();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:13:18.647839255 -0500\n+++ /tmp/Arja_Defects4J_Lang_22/patches_2h8q/Patch_1628/patched/tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:47:05.468587792 -0500\n@@ -582,7 +582,6 @@\n         // From Commons Math:\n         //if either operand is abs 1, return 1:\n         if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n-            return 1;\n         }\n         // keep u and v negative, as negative integers range down to\n         // -2^31, while positive numbers can only be as large as 2^31-1\n@@ -847,7 +846,20 @@\n         if (obj instanceof Fraction == false) {\n             return false;\n         }\n-        Fraction other = (Fraction) obj;\n+        if ((numerator > 0 ? -numerator : numerator) < -denominator) {\n+\t\t\tint properNumerator = getProperNumerator();\n+\t\t\tif (properNumerator == 0) {\n+\t\t\t\ttoProperString = Integer.toString(getProperWhole());\n+\t\t\t} else {\n+\t\t\t\ttoProperString = new StringBuilder(32).append(getProperWhole())\n+\t\t\t\t\t\t.append(' ').append(properNumerator).append('/')\n+\t\t\t\t\t\t.append(getDenominator()).toString();\n+\t\t\t}\n+\t\t} else {\n+\t\t\ttoProperString = new StringBuilder(32).append(getNumerator())\n+\t\t\t\t\t.append('/').append(getDenominator()).toString();\n+\t\t}\n+\t\tFraction other = (Fraction) obj;\n         return (getNumerator() == other.getNumerator() &&\n                 getDenominator() == other.getDenominator());\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 585, 
          "faulty": "return 1;", 
          "type": "Delete", 
          "seed": "if (u > 0) {\n  u=-u;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 850, 
          "faulty": "Fraction other=(Fraction)obj;", 
          "type": "InsertBefore", 
          "seed": "if ((numerator > 0 ? -numerator : numerator) < -denominator) {\n  int properNumerator=getProperNumerator();\n  if (properNumerator == 0) {\n    toProperString=Integer.toString(getProperWhole());\n  }\n else {\n    toProperString=new StringBuilder(32).append(getProperWhole()).append(' ').append(properNumerator).append('/').append(getDenominator()).toString();\n  }\n}\n else {\n  toProperString=new StringBuilder(32).append(getNumerator()).append('/').append(getDenominator()).toString();\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:13:18.647839255 -0500\n+++ /tmp/Arja_Defects4J_Lang_22/patches_2h8q/Patch_297/patched/tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:21:41.049995957 -0500\n@@ -582,7 +582,7 @@\n         // From Commons Math:\n         //if either operand is abs 1, return 1:\n         if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n-            return 1;\n+            u = -u;\n         }\n         // keep u and v negative, as negative integers range down to\n         // -2^31, while positive numbers can only be as large as 2^31-1\n@@ -595,9 +595,11 @@\n         while ((u&1)==0 && (v&1)==0 && k<31) { // while u and v are both even...\n             u/=2; v/=2; k++; // cast out twos.\n         }\n-        if (k==31) {\n-            throw new ArithmeticException(\"overflow: gcd is 2^31\");\n-        }\n+        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) {\n+\t\t\tu /= 2;\n+\t\t\tv /= 2;\n+\t\t\tk++;\n+\t\t}\n         // B2. Initialize: u and v have been divided by 2^k and at least\n         //     one is odd.\n         int t = ((u&1)==1) ? v : -(u/2)/*B3*/;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 585, 
          "faulty": "return 1;", 
          "type": "Replace", 
          "seed": "u=-u;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 598, 
          "faulty": "if (k == 31) {\n  throw new ArithmeticException(\"overflow: gcd is 2^31\");\n}", 
          "type": "Replace", 
          "seed": "while ((u & 1) == 0 && (v & 1) == 0 && k < 31) {\n  u/=2;\n  v/=2;\n  k++;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:13:18.647839255 -0500\n+++ /tmp/Arja_Defects4J_Lang_22/patches_2h8q/Patch_978/patched/tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:34:54.797430293 -0500\n@@ -582,7 +582,6 @@\n         // From Commons Math:\n         //if either operand is abs 1, return 1:\n         if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n-            return 1;\n         }\n         // keep u and v negative, as negative integers range down to\n         // -2^31, while positive numbers can only be as large as 2^31-1\n@@ -842,12 +841,16 @@\n     @Override\n     public boolean equals(Object obj) {\n         if (obj == this) {\n+\t\t\treturn true;\n+\t\t}\n+\t\tif (obj == this) {\n             return true;\n         }\n         if (obj instanceof Fraction == false) {\n             return false;\n         }\n-        Fraction other = (Fraction) obj;\n+        hashCode = 37 * (37 * 17 + getNumerator()) + getDenominator();\n+\t\tFraction other = (Fraction) obj;\n         return (getNumerator() == other.getNumerator() &&\n                 getDenominator() == other.getDenominator());\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 585, 
          "faulty": "return 1;", 
          "type": "Delete", 
          "seed": "v=-v;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 844, 
          "faulty": "if (obj == this) {\n  return true;\n}", 
          "type": "InsertBefore", 
          "seed": "if (obj == this) {\n  return true;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 850, 
          "faulty": "Fraction other=(Fraction)obj;", 
          "type": "InsertBefore", 
          "seed": "hashCode=37 * (37 * 17 + getNumerator()) + getDenominator();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:13:18.647839255 -0500\n+++ /tmp/Arja_Defects4J_Lang_22/patches_2h8q/Patch_1611/patched/tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:47:00.436565892 -0500\n@@ -476,7 +476,24 @@\n             return equals(ZERO) ? this : ZERO;\n         }\n         int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\n-        if (gcd == 1) {\n+        if (numerator == denominator) {\n+\t\t\ttoProperString = \"1\";\n+\t\t} else if (numerator == -1 * denominator) {\n+\t\t\ttoProperString = \"-1\";\n+\t\t} else if ((numerator > 0 ? -numerator : numerator) < -denominator) {\n+\t\t\tint properNumerator = getProperNumerator();\n+\t\t\tif (properNumerator == 0) {\n+\t\t\t\ttoProperString = Integer.toString(getProperWhole());\n+\t\t\t} else {\n+\t\t\t\ttoProperString = new StringBuilder(32).append(getProperWhole())\n+\t\t\t\t\t\t.append(' ').append(properNumerator).append('/')\n+\t\t\t\t\t\t.append(getDenominator()).toString();\n+\t\t\t}\n+\t\t} else {\n+\t\t\ttoProperString = new StringBuilder(32).append(getNumerator())\n+\t\t\t\t\t.append('/').append(getDenominator()).toString();\n+\t\t}\n+\t\tif (gcd == 1) {\n             return this;\n         }\n         return Fraction.getFraction(numerator / gcd, denominator / gcd);\n@@ -582,7 +599,6 @@\n         // From Commons Math:\n         //if either operand is abs 1, return 1:\n         if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n-            return 1;\n         }\n         // keep u and v negative, as negative integers range down to\n         // -2^31, while positive numbers can only be as large as 2^31-1\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 585, 
          "faulty": "return 1;", 
          "type": "Delete", 
          "seed": "throw new ArithmeticException(\"Numerator too large to represent as an Integer.\");"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 479, 
          "faulty": "if (gcd == 1) {\n  return this;\n}", 
          "type": "InsertBefore", 
          "seed": "if (numerator == denominator) {\n  toProperString=\"1\";\n}\n else if (numerator == -1 * denominator) {\n  toProperString=\"-1\";\n}\n else if ((numerator > 0 ? -numerator : numerator) < -denominator) {\n  int properNumerator=getProperNumerator();\n  if (properNumerator == 0) {\n    toProperString=Integer.toString(getProperWhole());\n  }\n else {\n    toProperString=new StringBuilder(32).append(getProperWhole()).append(' ').append(properNumerator).append('/').append(getDenominator()).toString();\n  }\n}\n else {\n  toProperString=new StringBuilder(32).append(getNumerator()).append('/').append(getDenominator()).toString();\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:13:18.647839255 -0500\n+++ /tmp/Arja_Defects4J_Lang_22/patches_2h8q/Patch_740/patched/tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:30:36.648313661 -0500\n@@ -582,7 +582,7 @@\n         // From Commons Math:\n         //if either operand is abs 1, return 1:\n         if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n-            return 1;\n+            u = -u;\n         }\n         // keep u and v negative, as negative integers range down to\n         // -2^31, while positive numbers can only be as large as 2^31-1\n@@ -848,7 +848,10 @@\n             return false;\n         }\n         Fraction other = (Fraction) obj;\n-        return (getNumerator() == other.getNumerator() &&\n+        if (obj == this) {\n+\t\t\treturn true;\n+\t\t}\n+\t\treturn (getNumerator() == other.getNumerator() &&\n                 getDenominator() == other.getDenominator());\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 585, 
          "faulty": "return 1;", 
          "type": "Replace", 
          "seed": "u=-u;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 851, 
          "faulty": "return (getNumerator() == other.getNumerator() && getDenominator() == other.getDenominator());", 
          "type": "InsertBefore", 
          "seed": "if (obj == this) {\n  return true;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:13:18.647839255 -0500\n+++ /tmp/Arja_Defects4J_Lang_22/patches_2h8q/Patch_1078/patched/tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:36:38.409878281 -0500\n@@ -582,7 +582,7 @@\n         // From Commons Math:\n         //if either operand is abs 1, return 1:\n         if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n-            return 1;\n+            v = -v;\n         }\n         // keep u and v negative, as negative integers range down to\n         // -2^31, while positive numbers can only be as large as 2^31-1\n@@ -841,7 +841,24 @@\n      */\n     @Override\n     public boolean equals(Object obj) {\n-        if (obj == this) {\n+        if (numerator == denominator) {\n+\t\t\ttoProperString = \"1\";\n+\t\t} else if (numerator == -1 * denominator) {\n+\t\t\ttoProperString = \"-1\";\n+\t\t} else if ((numerator > 0 ? -numerator : numerator) < -denominator) {\n+\t\t\tint properNumerator = getProperNumerator();\n+\t\t\tif (properNumerator == 0) {\n+\t\t\t\ttoProperString = Integer.toString(getProperWhole());\n+\t\t\t} else {\n+\t\t\t\ttoProperString = new StringBuilder(32).append(getProperWhole())\n+\t\t\t\t\t\t.append(' ').append(properNumerator).append('/')\n+\t\t\t\t\t\t.append(getDenominator()).toString();\n+\t\t\t}\n+\t\t} else {\n+\t\t\ttoProperString = new StringBuilder(32).append(getNumerator())\n+\t\t\t\t\t.append('/').append(getDenominator()).toString();\n+\t\t}\n+\t\tif (obj == this) {\n             return true;\n         }\n         if (obj instanceof Fraction == false) {\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 585, 
          "faulty": "return 1;", 
          "type": "Replace", 
          "seed": "v=-v;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 844, 
          "faulty": "if (obj == this) {\n  return true;\n}", 
          "type": "InsertBefore", 
          "seed": "if (numerator == denominator) {\n  toProperString=\"1\";\n}\n else if (numerator == -1 * denominator) {\n  toProperString=\"-1\";\n}\n else if ((numerator > 0 ? -numerator : numerator) < -denominator) {\n  int properNumerator=getProperNumerator();\n  if (properNumerator == 0) {\n    toProperString=Integer.toString(getProperWhole());\n  }\n else {\n    toProperString=new StringBuilder(32).append(getProperWhole()).append(' ').append(properNumerator).append('/').append(getDenominator()).toString();\n  }\n}\n else {\n  toProperString=new StringBuilder(32).append(getNumerator()).append('/').append(getDenominator()).toString();\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:13:18.647839255 -0500\n+++ /tmp/Arja_Defects4J_Lang_22/patches_2h8q/Patch_1640/patched/tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:47:25.972677023 -0500\n@@ -220,7 +220,10 @@\n         }\n         // allow 2^k/-2^31 as a valid fraction (where k>0)\n         if (denominator==Integer.MIN_VALUE && (numerator&1)==0) {\n-            numerator/=2; denominator/=2;\n+            if (numerator == 0) {\n+\t\t\t\treturn ZERO;\n+\t\t\t}\n+\t\t\tnumerator/=2; denominator/=2;\n         }\n         if (denominator < 0) {\n             if (numerator==Integer.MIN_VALUE ||\n@@ -582,7 +585,7 @@\n         // From Commons Math:\n         //if either operand is abs 1, return 1:\n         if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n-            return 1;\n+            v = -v;\n         }\n         // keep u and v negative, as negative integers range down to\n         // -2^31, while positive numbers can only be as large as 2^31-1\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 585, 
          "faulty": "return 1;", 
          "type": "Replace", 
          "seed": "v=-v;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 223, 
          "faulty": "numerator/=2;", 
          "type": "InsertBefore", 
          "seed": "if (numerator == 0) {\n  return ZERO;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:13:18.647839255 -0500\n+++ /tmp/Arja_Defects4J_Lang_22/patches_2h8q/Patch_444/patched/tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:25:04.490875841 -0500\n@@ -582,7 +582,7 @@\n         // From Commons Math:\n         //if either operand is abs 1, return 1:\n         if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n-            return 1;\n+            v = -v;\n         }\n         // keep u and v negative, as negative integers range down to\n         // -2^31, while positive numbers can only be as large as 2^31-1\n@@ -611,7 +611,11 @@\n             }\n             // B5 [reset max(u,v)]\n             if (t>0) {\n-                u = -t;\n+                if (t > 0) {\n+\t\t\t\t\tu = -t;\n+\t\t\t\t} else {\n+\t\t\t\t\tv = t;\n+\t\t\t\t}\n             } else {\n                 v = t;\n             }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 614, 
          "faulty": "u=-t;", 
          "type": "Replace", 
          "seed": "if (t > 0) {\n  u=-t;\n}\n else {\n  v=t;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 585, 
          "faulty": "return 1;", 
          "type": "Replace", 
          "seed": "v=-v;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:13:18.647839255 -0500\n+++ /tmp/Arja_Defects4J_Lang_22/patches_2h8q/Patch_1463/patched/tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:43:42.131709250 -0500\n@@ -582,7 +582,7 @@\n         // From Commons Math:\n         //if either operand is abs 1, return 1:\n         if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n-            return 1;\n+            u = -u;\n         }\n         // keep u and v negative, as negative integers range down to\n         // -2^31, while positive numbers can only be as large as 2^31-1\n@@ -842,6 +842,9 @@\n     @Override\n     public boolean equals(Object obj) {\n         if (obj == this) {\n+\t\t\treturn true;\n+\t\t}\n+\t\tif (obj == this) {\n             return true;\n         }\n         if (obj instanceof Fraction == false) {\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 585, 
          "faulty": "return 1;", 
          "type": "Replace", 
          "seed": "u=-u;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 844, 
          "faulty": "if (obj == this) {\n  return true;\n}", 
          "type": "InsertBefore", 
          "seed": "if (obj == this) {\n  return true;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:13:18.647839255 -0500\n+++ /tmp/Arja_Defects4J_Lang_22/patches_2h8q/Patch_295/patched/tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:21:40.725994567 -0500\n@@ -225,7 +225,8 @@\n         if (denominator < 0) {\n             if (numerator==Integer.MIN_VALUE ||\n                     denominator==Integer.MIN_VALUE) {\n-                throw new ArithmeticException(\"overflow: can't negate\");\n+                denominator = -denominator;\n+\t\t\t\tthrow new ArithmeticException(\"overflow: can't negate\");\n             }\n             numerator = -numerator;\n             denominator = -denominator;\n@@ -582,7 +583,6 @@\n         // From Commons Math:\n         //if either operand is abs 1, return 1:\n         if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n-            return 1;\n         }\n         // keep u and v negative, as negative integers range down to\n         // -2^31, while positive numbers can only be as large as 2^31-1\n@@ -595,9 +595,11 @@\n         while ((u&1)==0 && (v&1)==0 && k<31) { // while u and v are both even...\n             u/=2; v/=2; k++; // cast out twos.\n         }\n-        if (k==31) {\n-            throw new ArithmeticException(\"overflow: gcd is 2^31\");\n-        }\n+        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) {\n+\t\t\tu /= 2;\n+\t\t\tv /= 2;\n+\t\t\tk++;\n+\t\t}\n         // B2. Initialize: u and v have been divided by 2^k and at least\n         //     one is odd.\n         int t = ((u&1)==1) ? v : -(u/2)/*B3*/;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 228, 
          "faulty": "throw new ArithmeticException(\"overflow: can't negate\");", 
          "type": "InsertBefore", 
          "seed": "denominator=-denominator;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 585, 
          "faulty": "return 1;", 
          "type": "Delete", 
          "seed": "if (u > 0) {\n  u=-u;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 598, 
          "faulty": "if (k == 31) {\n  throw new ArithmeticException(\"overflow: gcd is 2^31\");\n}", 
          "type": "Replace", 
          "seed": "while ((u & 1) == 0 && (v & 1) == 0 && k < 31) {\n  u/=2;\n  v/=2;\n  k++;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:13:18.647839255 -0500\n+++ /tmp/Arja_Defects4J_Lang_22/patches_2h8q/Patch_1156/patched/tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:38:21.934325783 -0500\n@@ -479,7 +479,8 @@\n         if (gcd == 1) {\n             return this;\n         }\n-        return Fraction.getFraction(numerator / gcd, denominator / gcd);\n+        hashCode = 37 * (37 * 17 + getNumerator()) + getDenominator();\n+\t\treturn Fraction.getFraction(numerator / gcd, denominator / gcd);\n     }\n \n     /**\n@@ -582,7 +583,7 @@\n         // From Commons Math:\n         //if either operand is abs 1, return 1:\n         if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n-            return 1;\n+            v = -v;\n         }\n         // keep u and v negative, as negative integers range down to\n         // -2^31, while positive numbers can only be as large as 2^31-1\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 585, 
          "faulty": "return 1;", 
          "type": "Replace", 
          "seed": "v=-v;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 482, 
          "faulty": "return Fraction.getFraction(numerator / gcd,denominator / gcd);", 
          "type": "InsertBefore", 
          "seed": "hashCode=37 * (37 * 17 + getNumerator()) + getDenominator();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:13:18.647839255 -0500\n+++ /tmp/Arja_Defects4J_Lang_22/patches_2h8q/Patch_588/patched/tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:27:57.975626964 -0500\n@@ -582,7 +582,7 @@\n         // From Commons Math:\n         //if either operand is abs 1, return 1:\n         if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n-            return 1;\n+            v = -v;\n         }\n         // keep u and v negative, as negative integers range down to\n         // -2^31, while positive numbers can only be as large as 2^31-1\n@@ -620,7 +620,10 @@\n             // |u| larger: t positive (replace u)\n             // |v| larger: t negative (replace v)\n         } while (t!=0);\n-        return -u*(1<<k); // gcd is u*2^k\n+        if (k == 31) {\n+\t\t\tthrow new ArithmeticException(\"overflow: gcd is 2^31\");\n+\t\t}\n+\t\treturn -u*(1<<k); // gcd is u*2^k\n     }\n \n     // Arithmetic\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 585, 
          "faulty": "return 1;", 
          "type": "Replace", 
          "seed": "v=-v;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 623, 
          "faulty": "return -u * (1 << k);", 
          "type": "InsertBefore", 
          "seed": "if (k == 31) {\n  throw new ArithmeticException(\"overflow: gcd is 2^31\");\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:13:18.647839255 -0500\n+++ /tmp/Arja_Defects4J_Lang_22/patches_2h8q/Patch_533/patched/tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:26:33.287260339 -0500\n@@ -153,7 +153,11 @@\n                 throw new ArithmeticException(\"overflow: can't negate\");\n             }\n             numerator = -numerator;\n-            denominator = -denominator;\n+            if (numerator == Integer.MIN_VALUE\n+\t\t\t\t\t|| denominator == Integer.MIN_VALUE) {\n+\t\t\t\tthrow new ArithmeticException(\"overflow: can't negate\");\n+\t\t\t}\n+\t\t\tdenominator = -denominator;\n         }\n         return new Fraction(numerator, denominator);\n     }\n@@ -582,7 +586,6 @@\n         // From Commons Math:\n         //if either operand is abs 1, return 1:\n         if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n-            return 1;\n         }\n         // keep u and v negative, as negative integers range down to\n         // -2^31, while positive numbers can only be as large as 2^31-1\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 156, 
          "faulty": "denominator=-denominator;", 
          "type": "InsertBefore", 
          "seed": "if (numerator == Integer.MIN_VALUE || denominator == Integer.MIN_VALUE) {\n  throw new ArithmeticException(\"overflow: can't negate\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 585, 
          "faulty": "return 1;", 
          "type": "Delete", 
          "seed": "if (u > 0) {\n  u=-u;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:13:18.647839255 -0500\n+++ /tmp/Arja_Defects4J_Lang_22/patches_2h8q/Patch_138/patched/tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:18:20.389135017 -0500\n@@ -225,7 +225,8 @@\n         if (denominator < 0) {\n             if (numerator==Integer.MIN_VALUE ||\n                     denominator==Integer.MIN_VALUE) {\n-                throw new ArithmeticException(\"overflow: can't negate\");\n+                denominator = -denominator;\n+\t\t\t\tthrow new ArithmeticException(\"overflow: can't negate\");\n             }\n             numerator = -numerator;\n             denominator = -denominator;\n@@ -582,7 +583,6 @@\n         // From Commons Math:\n         //if either operand is abs 1, return 1:\n         if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n-            return 1;\n         }\n         // keep u and v negative, as negative integers range down to\n         // -2^31, while positive numbers can only be as large as 2^31-1\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 228, 
          "faulty": "throw new ArithmeticException(\"overflow: can't negate\");", 
          "type": "InsertBefore", 
          "seed": "denominator=-denominator;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 585, 
          "faulty": "return 1;", 
          "type": "Delete", 
          "seed": "if (u > 0) {\n  u=-u;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:13:18.647839255 -0500\n+++ /tmp/Arja_Defects4J_Lang_22/patches_2h8q/Patch_789/patched/tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:31:31.216549756 -0500\n@@ -579,10 +579,13 @@\n      * @return the greatest common divisor, never zero\n      */\n     private static int greatestCommonDivisor(int u, int v) {\n-        // From Commons Math:\n+        if (u > 0) {\n+\t\t\tu = -u;\n+\t\t}\n+\t\t// From Commons Math:\n         //if either operand is abs 1, return 1:\n         if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n-            return 1;\n+            v = -v;\n         }\n         // keep u and v negative, as negative integers range down to\n         // -2^31, while positive numbers can only be as large as 2^31-1\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 584, 
          "faulty": "if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n  return 1;\n}", 
          "type": "InsertBefore", 
          "seed": "if (u > 0) {\n  u=-u;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 585, 
          "faulty": "return 1;", 
          "type": "Replace", 
          "seed": "v=-v;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:13:18.647839255 -0500\n+++ /tmp/Arja_Defects4J_Lang_22/patches_2h8q/Patch_1860/patched/tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:52:03.749885197 -0500\n@@ -582,9 +582,10 @@\n         // From Commons Math:\n         //if either operand is abs 1, return 1:\n         if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n-            return 1;\n+            u = -u;\n         }\n-        // keep u and v negative, as negative integers range down to\n+        v = -v;\n+\t\t// keep u and v negative, as negative integers range down to\n         // -2^31, while positive numbers can only be as large as 2^31-1\n         // (i.e. we can't necessarily negate a negative number without\n         // overflow)\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 585, 
          "faulty": "return 1;", 
          "type": "Replace", 
          "seed": "u=-u;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 591, 
          "faulty": "if (u > 0) {\n  u=-u;\n}", 
          "type": "InsertBefore", 
          "seed": "v=-v;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:13:18.647839255 -0500\n+++ /tmp/Arja_Defects4J_Lang_22/patches_2h8q/Patch_1168/patched/tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:38:36.490388696 -0500\n@@ -582,7 +582,6 @@\n         // From Commons Math:\n         //if either operand is abs 1, return 1:\n         if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n-            return 1;\n         }\n         // keep u and v negative, as negative integers range down to\n         // -2^31, while positive numbers can only be as large as 2^31-1\n@@ -595,9 +594,11 @@\n         while ((u&1)==0 && (v&1)==0 && k<31) { // while u and v are both even...\n             u/=2; v/=2; k++; // cast out twos.\n         }\n-        if (k==31) {\n-            throw new ArithmeticException(\"overflow: gcd is 2^31\");\n-        }\n+        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) {\n+\t\t\tu /= 2;\n+\t\t\tv /= 2;\n+\t\t\tk++;\n+\t\t}\n         // B2. Initialize: u and v have been divided by 2^k and at least\n         //     one is odd.\n         int t = ((u&1)==1) ? v : -(u/2)/*B3*/;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 585, 
          "faulty": "return 1;", 
          "type": "Delete", 
          "seed": "u=-u;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 598, 
          "faulty": "if (k == 31) {\n  throw new ArithmeticException(\"overflow: gcd is 2^31\");\n}", 
          "type": "Replace", 
          "seed": "while ((u & 1) == 0 && (v & 1) == 0 && k < 31) {\n  u/=2;\n  v/=2;\n  k++;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:13:18.647839255 -0500\n+++ /tmp/Arja_Defects4J_Lang_22/patches_2h8q/Patch_605/patched/tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:28:14.347697831 -0500\n@@ -225,7 +225,11 @@\n         if (denominator < 0) {\n             if (numerator==Integer.MIN_VALUE ||\n                     denominator==Integer.MIN_VALUE) {\n-                throw new ArithmeticException(\"overflow: can't negate\");\n+                if (numerator == 0) {\n+\t\t\t\t\t\t\tthrow new ArithmeticException(\n+\t\t\t\t\t\t\t\t\t\"Unable to invert zero.\");\n+\t\t\t\t\t\t}\n+\t\t\t\tthrow new ArithmeticException(\"overflow: can't negate\");\n             }\n             numerator = -numerator;\n             denominator = -denominator;\n@@ -582,7 +586,7 @@\n         // From Commons Math:\n         //if either operand is abs 1, return 1:\n         if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n-            return 1;\n+            v = -v;\n         }\n         // keep u and v negative, as negative integers range down to\n         // -2^31, while positive numbers can only be as large as 2^31-1\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 228, 
          "faulty": "throw new ArithmeticException(\"overflow: can't negate\");", 
          "type": "InsertBefore", 
          "seed": "if (numerator == 0) {\n  throw new ArithmeticException(\"Unable to invert zero.\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", 
          "line": 585, 
          "faulty": "return 1;", 
          "type": "Replace", 
          "seed": "v=-v;"
        }
      ]
    }
  ]
}