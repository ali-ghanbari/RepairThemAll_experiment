{
  "repair_end": "2018-12-01 11:24:18.541850", 
  "repair_begin": "2018-12-01 11:12:56.967569", 
  "patches": [
    {
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3675, 
          "faulty": "for (int i=0; i < searchList.length; i++) {\n  int greater=replacementList[i].length() - searchList[i].length();\n  if (greater > 0) {\n    increase+=3 * greater;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (searchLength != replacementLength) {\n  throw new IllegalArgumentException(\"Search and Replace array lengths don't match: \" + searchLength + \" vs \"+ replacementLength);\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3502, 
          "faulty": "return replaceEach(text,searchList,replacementList,false,0);", 
          "type": "InsertBefore", 
          "seed": "if (text == null || text.length() == 0 || searchList == null || searchList.length == 0 || replacementList == null || replacementList.length == 0) {\n  return text;\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3623, 
          "faulty": "int searchLength=searchList.length;", 
          "type": "InsertBefore", 
          "seed": "if (text == null || text.length() == 0 || searchList == null || searchList.length == 0 || replacementList == null || replacementList.length == 0) {\n  return text;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:12:49.793754110 -0500\n+++ /tmp/Arja_Defects4J_Lang_39/patches_x7iw/Patch_1001/patched/tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:18:59.909593377 -0500\n@@ -3499,7 +3499,12 @@\n      * @since 2.4\n      */\n     public static String replaceEach(String text, String[] searchList, String[] replacementList) {\n-        return replaceEach(text, searchList, replacementList, false, 0);\n+        if (text == null || text.length() == 0 || searchList == null\n+\t\t\t\t|| searchList.length == 0 || replacementList == null\n+\t\t\t\t|| replacementList.length == 0) {\n+\t\t\treturn text;\n+\t\t}\n+\t\treturn replaceEach(text, searchList, replacementList, false, 0);\n     }\n \n     /**\n@@ -3620,7 +3625,12 @@\n             throw new IllegalStateException(\"TimeToLive of \" + timeToLive + \" is less than 0: \" + text);\n         }\n \n-        int searchLength = searchList.length;\n+        if (text == null || text.length() == 0 || searchList == null\n+\t\t\t\t|| searchList.length == 0 || replacementList == null\n+\t\t\t\t|| replacementList.length == 0) {\n+\t\t\treturn text;\n+\t\t}\n+\t\tint searchLength = searchList.length;\n         int replacementLength = replacementList.length;\n \n         // make sure lengths are ok, these need to be equal\n@@ -3671,13 +3681,6 @@\n         // get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n         int increase = 0;\n \n-        // count the replacement text elements that are larger than their corresponding text being replaced\n-        for (int i = 0; i < searchList.length; i++) {\n-            int greater = replacementList[i].length() - searchList[i].length();\n-            if (greater > 0) {\n-                increase += 3 * greater; // assume 3 matches\n-            }\n-        }\n         // have upper-bound at 20% increase, then let Java take over\n         increase = Math.min(increase, text.length() / 5);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3675, 
          "faulty": "for (int i=0; i < searchList.length; i++) {\n  int greater=replacementList[i].length() - searchList[i].length();\n  if (greater > 0) {\n    increase+=3 * greater;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (searchLength != replacementLength) {\n  throw new IllegalArgumentException(\"Search and Replace array lengths don't match: \" + searchLength + \" vs \"+ replacementLength);\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3639, 
          "faulty": "int replaceIndex=-1;", 
          "type": "InsertBefore", 
          "seed": "if (timeToLive < 0) {\n  throw new IllegalStateException(\"TimeToLive of \" + timeToLive + \" is less than 0: \"+ text);\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3727, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "while (textIndex != -1) {\n  for (int i=start; i < textIndex; i++) {\n    buf.append(text.charAt(i));\n  }\n  buf.append(replacementList[replaceIndex]);\n  start=textIndex + searchList[replaceIndex].length();\n  textIndex=-1;\n  replaceIndex=-1;\n  tempIndex=-1;\n  for (int i=0; i < searchLength; i++) {\n    if (noMoreMatchesForReplIndex[i] || searchList[i] == null || searchList[i].length() == 0 || replacementList[i] == null) {\n      continue;\n    }\n    tempIndex=text.indexOf(searchList[i],start);\n    if (tempIndex == -1) {\n      noMoreMatchesForReplIndex[i]=true;\n    }\n else {\n      if (textIndex == -1 || tempIndex < textIndex) {\n        textIndex=tempIndex;\n        replaceIndex=i;\n      }\n    }\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:12:49.793754110 -0500\n+++ /tmp/Arja_Defects4J_Lang_39/patches_x7iw/Patch_1847/patched/tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:23:50.497468917 -0500\n@@ -3636,7 +3636,11 @@\n \n         // index on index that the match was found\n         int textIndex = -1;\n-        int replaceIndex = -1;\n+        if (timeToLive < 0) {\n+\t\t\tthrow new IllegalStateException(\"TimeToLive of \" + timeToLive\n+\t\t\t\t\t+ \" is less than 0: \" + text);\n+\t\t}\n+\t\tint replaceIndex = -1;\n         int tempIndex = -1;\n \n         // index of replace array that will replace the search string found\n@@ -3671,13 +3675,6 @@\n         // get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n         int increase = 0;\n \n-        // count the replacement text elements that are larger than their corresponding text being replaced\n-        for (int i = 0; i < searchList.length; i++) {\n-            int greater = replacementList[i].length() - searchList[i].length();\n-            if (greater > 0) {\n-                increase += 3 * greater; // assume 3 matches\n-            }\n-        }\n         // have upper-bound at 20% increase, then let Java take over\n         increase = Math.min(increase, text.length() / 5);\n \n@@ -3724,7 +3721,33 @@\n         }\n         String result = buf.toString();\n         if (!repeat) {\n-            return result;\n+            while (textIndex != -1) {\n+\t\t\t\tfor (int i = start; i < textIndex; i++) {\n+\t\t\t\t\tbuf.append(text.charAt(i));\n+\t\t\t\t}\n+\t\t\t\tbuf.append(replacementList[replaceIndex]);\n+\t\t\t\tstart = textIndex + searchList[replaceIndex].length();\n+\t\t\t\ttextIndex = -1;\n+\t\t\t\treplaceIndex = -1;\n+\t\t\t\ttempIndex = -1;\n+\t\t\t\tfor (int i = 0; i < searchLength; i++) {\n+\t\t\t\t\tif (noMoreMatchesForReplIndex[i] || searchList[i] == null\n+\t\t\t\t\t\t\t|| searchList[i].length() == 0\n+\t\t\t\t\t\t\t|| replacementList[i] == null) {\n+\t\t\t\t\t\tcontinue;\n+\t\t\t\t\t}\n+\t\t\t\t\ttempIndex = text.indexOf(searchList[i], start);\n+\t\t\t\t\tif (tempIndex == -1) {\n+\t\t\t\t\t\tnoMoreMatchesForReplIndex[i] = true;\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tif (textIndex == -1 || tempIndex < textIndex) {\n+\t\t\t\t\t\t\ttextIndex = tempIndex;\n+\t\t\t\t\t\t\treplaceIndex = i;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\treturn result;\n         }\n \n         return replaceEach(result, searchList, replacementList, repeat, timeToLive - 1);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3675, 
          "faulty": "for (int i=0; i < searchList.length; i++) {\n  int greater=replacementList[i].length() - searchList[i].length();\n  if (greater > 0) {\n    increase+=3 * greater;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (searchLength != replacementLength) {\n  throw new IllegalArgumentException(\"Search and Replace array lengths don't match: \" + searchLength + \" vs \"+ replacementLength);\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3701, 
          "faulty": "if (noMoreMatchesForReplIndex[i] || searchList[i] == null || searchList[i].length() == 0 || replacementList[i] == null) {\n  continue;\n}", 
          "type": "InsertBefore", 
          "seed": "if (start < 0) {\n  start=0;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:12:49.793754110 -0500\n+++ /tmp/Arja_Defects4J_Lang_39/patches_x7iw/Patch_667/patched/tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:17:45.001625696 -0500\n@@ -3671,13 +3671,6 @@\n         // get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n         int increase = 0;\n \n-        // count the replacement text elements that are larger than their corresponding text being replaced\n-        for (int i = 0; i < searchList.length; i++) {\n-            int greater = replacementList[i].length() - searchList[i].length();\n-            if (greater > 0) {\n-                increase += 3 * greater; // assume 3 matches\n-            }\n-        }\n         // have upper-bound at 20% increase, then let Java take over\n         increase = Math.min(increase, text.length() / 5);\n \n@@ -3698,7 +3691,10 @@\n             // find the next earliest match\n             // NOTE: logic mostly duplicated above START\n             for (int i = 0; i < searchLength; i++) {\n-                if (noMoreMatchesForReplIndex[i] || searchList[i] == null || \n+                if (start < 0) {\n+\t\t\t\t\tstart = 0;\n+\t\t\t\t}\n+\t\t\t\tif (noMoreMatchesForReplIndex[i] || searchList[i] == null || \n                     searchList[i].length() == 0 || replacementList[i] == null) \n                 {\n                     continue;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3675, 
          "faulty": "for (int i=0; i < searchList.length; i++) {\n  int greater=replacementList[i].length() - searchList[i].length();\n  if (greater > 0) {\n    increase+=3 * greater;\n  }\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < searchLength; i++) {\n  if (noMoreMatchesForReplIndex[i] || searchList[i] == null || searchList[i].length() == 0 || replacementList[i] == null) {\n    continue;\n  }\n  tempIndex=text.indexOf(searchList[i]);\n  if (tempIndex == -1) {\n    noMoreMatchesForReplIndex[i]=true;\n  }\n else {\n    if (textIndex == -1 || tempIndex < textIndex) {\n      textIndex=tempIndex;\n      replaceIndex=i;\n    }\n  }\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3697, 
          "faulty": "tempIndex=-1;", 
          "type": "InsertBefore", 
          "seed": "if (searchLength != replacementLength) {\n  throw new IllegalArgumentException(\"Search and Replace array lengths don't match: \" + searchLength + \" vs \"+ replacementLength);\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:12:49.793754110 -0500\n+++ /tmp/Arja_Defects4J_Lang_39/patches_x7iw/Patch_1602/patched/tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:22:26.705504663 -0500\n@@ -3671,13 +3671,6 @@\n         // get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n         int increase = 0;\n \n-        // count the replacement text elements that are larger than their corresponding text being replaced\n-        for (int i = 0; i < searchList.length; i++) {\n-            int greater = replacementList[i].length() - searchList[i].length();\n-            if (greater > 0) {\n-                increase += 3 * greater; // assume 3 matches\n-            }\n-        }\n         // have upper-bound at 20% increase, then let Java take over\n         increase = Math.min(increase, text.length() / 5);\n \n@@ -3694,7 +3687,12 @@\n \n             textIndex = -1;\n             replaceIndex = -1;\n-            tempIndex = -1;\n+            if (searchLength != replacementLength) {\n+\t\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\t\"Search and Replace array lengths don't match: \"\n+\t\t\t\t\t\t\t\t+ searchLength + \" vs \" + replacementLength);\n+\t\t\t}\n+\t\t\ttempIndex = -1;\n             // find the next earliest match\n             // NOTE: logic mostly duplicated above START\n             for (int i = 0; i < searchLength; i++) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3675, 
          "faulty": "for (int i=0; i < searchList.length; i++) {\n  int greater=replacementList[i].length() - searchList[i].length();\n  if (greater > 0) {\n    increase+=3 * greater;\n  }\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < searchLength; i++) {\n  if (noMoreMatchesForReplIndex[i] || searchList[i] == null || searchList[i].length() == 0 || replacementList[i] == null) {\n    continue;\n  }\n  tempIndex=text.indexOf(searchList[i]);\n  if (tempIndex == -1) {\n    noMoreMatchesForReplIndex[i]=true;\n  }\n else {\n    if (textIndex == -1 || tempIndex < textIndex) {\n      textIndex=tempIndex;\n      replaceIndex=i;\n    }\n  }\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3638, 
          "faulty": "int textIndex=-1;", 
          "type": "InsertBefore", 
          "seed": "if (text == null || text.length() == 0 || searchList == null || searchList.length == 0 || replacementList == null || replacementList.length == 0) {\n  return text;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:12:49.793754110 -0500\n+++ /tmp/Arja_Defects4J_Lang_39/patches_x7iw/Patch_400/patched/tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:16:35.581655740 -0500\n@@ -3634,7 +3634,12 @@\n         // keep track of which still have matches\n         boolean[] noMoreMatchesForReplIndex = new boolean[searchLength];\n \n-        // index on index that the match was found\n+        if (text == null || text.length() == 0 || searchList == null\n+\t\t\t\t|| searchList.length == 0 || replacementList == null\n+\t\t\t\t|| replacementList.length == 0) {\n+\t\t\treturn text;\n+\t\t}\n+\t\t// index on index that the match was found\n         int textIndex = -1;\n         int replaceIndex = -1;\n         int tempIndex = -1;\n@@ -3671,13 +3676,6 @@\n         // get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n         int increase = 0;\n \n-        // count the replacement text elements that are larger than their corresponding text being replaced\n-        for (int i = 0; i < searchList.length; i++) {\n-            int greater = replacementList[i].length() - searchList[i].length();\n-            if (greater > 0) {\n-                increase += 3 * greater; // assume 3 matches\n-            }\n-        }\n         // have upper-bound at 20% increase, then let Java take over\n         increase = Math.min(increase, text.length() / 5);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3675, 
          "faulty": "for (int i=0; i < searchList.length; i++) {\n  int greater=replacementList[i].length() - searchList[i].length();\n  if (greater > 0) {\n    increase+=3 * greater;\n  }\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < searchLength; i++) {\n  if (noMoreMatchesForReplIndex[i] || searchList[i] == null || searchList[i].length() == 0 || replacementList[i] == null) {\n    continue;\n  }\n  tempIndex=text.indexOf(searchList[i]);\n  if (tempIndex == -1) {\n    noMoreMatchesForReplIndex[i]=true;\n  }\n else {\n    if (textIndex == -1 || tempIndex < textIndex) {\n      textIndex=tempIndex;\n      replaceIndex=i;\n    }\n  }\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3665, 
          "faulty": "if (textIndex == -1) {\n  return text;\n}", 
          "type": "InsertBefore", 
          "seed": "for (int i=0; i < searchLength; i++) {\n  if (noMoreMatchesForReplIndex[i] || searchList[i] == null || searchList[i].length() == 0 || replacementList[i] == null) {\n    continue;\n  }\n  tempIndex=text.indexOf(searchList[i]);\n  if (tempIndex == -1) {\n    noMoreMatchesForReplIndex[i]=true;\n  }\n else {\n    if (textIndex == -1 || tempIndex < textIndex) {\n      textIndex=tempIndex;\n      replaceIndex=i;\n    }\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:12:49.793754110 -0500\n+++ /tmp/Arja_Defects4J_Lang_39/patches_x7iw/Patch_1497/patched/tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:21:26.105530586 -0500\n@@ -3661,7 +3661,23 @@\n         }\n         // NOTE: logic mostly below END\n \n-        // no search strings found, we are done\n+        for (int i = 0; i < searchLength; i++) {\n+\t\t\tif (noMoreMatchesForReplIndex[i] || searchList[i] == null\n+\t\t\t\t\t|| searchList[i].length() == 0\n+\t\t\t\t\t|| replacementList[i] == null) {\n+\t\t\t\tcontinue;\n+\t\t\t}\n+\t\t\ttempIndex = text.indexOf(searchList[i]);\n+\t\t\tif (tempIndex == -1) {\n+\t\t\t\tnoMoreMatchesForReplIndex[i] = true;\n+\t\t\t} else {\n+\t\t\t\tif (textIndex == -1 || tempIndex < textIndex) {\n+\t\t\t\t\ttextIndex = tempIndex;\n+\t\t\t\t\treplaceIndex = i;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\t// no search strings found, we are done\n         if (textIndex == -1) {\n             return text;\n         }\n@@ -3671,13 +3687,6 @@\n         // get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n         int increase = 0;\n \n-        // count the replacement text elements that are larger than their corresponding text being replaced\n-        for (int i = 0; i < searchList.length; i++) {\n-            int greater = replacementList[i].length() - searchList[i].length();\n-            if (greater > 0) {\n-                increase += 3 * greater; // assume 3 matches\n-            }\n-        }\n         // have upper-bound at 20% increase, then let Java take over\n         increase = Math.min(increase, text.length() / 5);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3675, 
          "faulty": "for (int i=0; i < searchList.length; i++) {\n  int greater=replacementList[i].length() - searchList[i].length();\n  if (greater > 0) {\n    increase+=3 * greater;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (searchLength != replacementLength) {\n  throw new IllegalArgumentException(\"Search and Replace array lengths don't match: \" + searchLength + \" vs \"+ replacementLength);\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3684, 
          "faulty": "StringBuilder buf=new StringBuilder(text.length() + increase);", 
          "type": "Replace", 
          "seed": "StringBuilder buf=new StringBuilder(32);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3627, 
          "faulty": "if (searchLength != replacementLength) {\n  throw new IllegalArgumentException(\"Search and Replace array lengths don't match: \" + searchLength + \" vs \"+ replacementLength);\n}", 
          "type": "Replace", 
          "seed": "if (text == null || text.length() == 0 || searchList == null || searchList.length == 0 || replacementList == null || replacementList.length == 0) {\n  return text;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:12:49.793754110 -0500\n+++ /tmp/Arja_Defects4J_Lang_39/patches_x7iw/Patch_362/patched/tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:16:16.121664178 -0500\n@@ -3623,13 +3623,11 @@\n         int searchLength = searchList.length;\n         int replacementLength = replacementList.length;\n \n-        // make sure lengths are ok, these need to be equal\n-        if (searchLength != replacementLength) {\n-            throw new IllegalArgumentException(\"Search and Replace array lengths don't match: \"\n-                + searchLength\n-                + \" vs \"\n-                + replacementLength);\n-        }\n+        if (text == null || text.length() == 0 || searchList == null\n+\t\t\t\t|| searchList.length == 0 || replacementList == null\n+\t\t\t\t|| replacementList.length == 0) {\n+\t\t\treturn text;\n+\t\t}\n \n         // keep track of which still have matches\n         boolean[] noMoreMatchesForReplIndex = new boolean[searchLength];\n@@ -3671,17 +3669,10 @@\n         // get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n         int increase = 0;\n \n-        // count the replacement text elements that are larger than their corresponding text being replaced\n-        for (int i = 0; i < searchList.length; i++) {\n-            int greater = replacementList[i].length() - searchList[i].length();\n-            if (greater > 0) {\n-                increase += 3 * greater; // assume 3 matches\n-            }\n-        }\n         // have upper-bound at 20% increase, then let Java take over\n         increase = Math.min(increase, text.length() / 5);\n \n-        StringBuilder buf = new StringBuilder(text.length() + increase);\n+        StringBuilder buf = new StringBuilder(32);\n \n         while (textIndex != -1) {\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3675, 
          "faulty": "for (int i=0; i < searchList.length; i++) {\n  int greater=replacementList[i].length() - searchList[i].length();\n  if (greater > 0) {\n    increase+=3 * greater;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (searchLength != replacementLength) {\n  throw new IllegalArgumentException(\"Search and Replace array lengths don't match: \" + searchLength + \" vs \"+ replacementLength);\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3693, 
          "faulty": "start=textIndex + searchList[replaceIndex].length();", 
          "type": "InsertBefore", 
          "seed": "if (start < 0) {\n  start=0;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:12:49.793754110 -0500\n+++ /tmp/Arja_Defects4J_Lang_39/patches_x7iw/Patch_449/patched/tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:16:57.061646434 -0500\n@@ -3671,13 +3671,6 @@\n         // get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n         int increase = 0;\n \n-        // count the replacement text elements that are larger than their corresponding text being replaced\n-        for (int i = 0; i < searchList.length; i++) {\n-            int greater = replacementList[i].length() - searchList[i].length();\n-            if (greater > 0) {\n-                increase += 3 * greater; // assume 3 matches\n-            }\n-        }\n         // have upper-bound at 20% increase, then let Java take over\n         increase = Math.min(increase, text.length() / 5);\n \n@@ -3690,7 +3683,10 @@\n             }\n             buf.append(replacementList[replaceIndex]);\n \n-            start = textIndex + searchList[replaceIndex].length();\n+            if (start < 0) {\n+\t\t\t\tstart = 0;\n+\t\t\t}\n+\t\t\tstart = textIndex + searchList[replaceIndex].length();\n \n             textIndex = -1;\n             replaceIndex = -1;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3669, 
          "faulty": "int start=0;", 
          "type": "InsertBefore", 
          "seed": "if (timeToLive < 0) {\n  throw new IllegalStateException(\"TimeToLive of \" + timeToLive + \" is less than 0: \"+ text);\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3675, 
          "faulty": "for (int i=0; i < searchList.length; i++) {\n  int greater=replacementList[i].length() - searchList[i].length();\n  if (greater > 0) {\n    increase+=3 * greater;\n  }\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < searchLength; i++) {\n  if (noMoreMatchesForReplIndex[i] || searchList[i] == null || searchList[i].length() == 0 || replacementList[i] == null) {\n    continue;\n  }\n  tempIndex=text.indexOf(searchList[i]);\n  if (tempIndex == -1) {\n    noMoreMatchesForReplIndex[i]=true;\n  }\n else {\n    if (textIndex == -1 || tempIndex < textIndex) {\n      textIndex=tempIndex;\n      replaceIndex=i;\n    }\n  }\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3627, 
          "faulty": "if (searchLength != replacementLength) {\n  throw new IllegalArgumentException(\"Search and Replace array lengths don't match: \" + searchLength + \" vs \"+ replacementLength);\n}", 
          "type": "Replace", 
          "seed": "if (text == null || text.length() == 0 || searchList == null || searchList.length == 0 || replacementList == null || replacementList.length == 0) {\n  return text;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:12:49.793754110 -0500\n+++ /tmp/Arja_Defects4J_Lang_39/patches_x7iw/Patch_725/patched/tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:17:58.017620073 -0500\n@@ -3623,13 +3623,11 @@\n         int searchLength = searchList.length;\n         int replacementLength = replacementList.length;\n \n-        // make sure lengths are ok, these need to be equal\n-        if (searchLength != replacementLength) {\n-            throw new IllegalArgumentException(\"Search and Replace array lengths don't match: \"\n-                + searchLength\n-                + \" vs \"\n-                + replacementLength);\n-        }\n+        if (text == null || text.length() == 0 || searchList == null\n+\t\t\t\t|| searchList.length == 0 || replacementList == null\n+\t\t\t\t|| replacementList.length == 0) {\n+\t\t\treturn text;\n+\t\t}\n \n         // keep track of which still have matches\n         boolean[] noMoreMatchesForReplIndex = new boolean[searchLength];\n@@ -3666,18 +3664,15 @@\n             return text;\n         }\n \n-        int start = 0;\n+        if (timeToLive < 0) {\n+\t\t\tthrow new IllegalStateException(\"TimeToLive of \" + timeToLive\n+\t\t\t\t\t+ \" is less than 0: \" + text);\n+\t\t}\n+\t\tint start = 0;\n \n         // get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n         int increase = 0;\n \n-        // count the replacement text elements that are larger than their corresponding text being replaced\n-        for (int i = 0; i < searchList.length; i++) {\n-            int greater = replacementList[i].length() - searchList[i].length();\n-            if (greater > 0) {\n-                increase += 3 * greater; // assume 3 matches\n-            }\n-        }\n         // have upper-bound at 20% increase, then let Java take over\n         increase = Math.min(increase, text.length() / 5);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3675, 
          "faulty": "for (int i=0; i < searchList.length; i++) {\n  int greater=replacementList[i].length() - searchList[i].length();\n  if (greater > 0) {\n    increase+=3 * greater;\n  }\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < searchLength; i++) {\n  if (noMoreMatchesForReplIndex[i] || searchList[i] == null || searchList[i].length() == 0 || replacementList[i] == null) {\n    continue;\n  }\n  tempIndex=text.indexOf(searchList[i]);\n  if (tempIndex == -1) {\n    noMoreMatchesForReplIndex[i]=true;\n  }\n else {\n    if (textIndex == -1 || tempIndex < textIndex) {\n      textIndex=tempIndex;\n      replaceIndex=i;\n    }\n  }\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3635, 
          "faulty": "boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];", 
          "type": "InsertBefore", 
          "seed": "if (searchLength != replacementLength) {\n  throw new IllegalArgumentException(\"Search and Replace array lengths don't match: \" + searchLength + \" vs \"+ replacementLength);\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:12:49.793754110 -0500\n+++ /tmp/Arja_Defects4J_Lang_39/patches_x7iw/Patch_414/patched/tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:16:44.069652061 -0500\n@@ -3631,7 +3631,12 @@\n                 + replacementLength);\n         }\n \n-        // keep track of which still have matches\n+        if (searchLength != replacementLength) {\n+\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\"Search and Replace array lengths don't match: \"\n+\t\t\t\t\t\t\t+ searchLength + \" vs \" + replacementLength);\n+\t\t}\n+\t\t// keep track of which still have matches\n         boolean[] noMoreMatchesForReplIndex = new boolean[searchLength];\n \n         // index on index that the match was found\n@@ -3671,13 +3676,6 @@\n         // get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n         int increase = 0;\n \n-        // count the replacement text elements that are larger than their corresponding text being replaced\n-        for (int i = 0; i < searchList.length; i++) {\n-            int greater = replacementList[i].length() - searchList[i].length();\n-            if (greater > 0) {\n-                increase += 3 * greater; // assume 3 matches\n-            }\n-        }\n         // have upper-bound at 20% increase, then let Java take over\n         increase = Math.min(increase, text.length() / 5);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3675, 
          "faulty": "for (int i=0; i < searchList.length; i++) {\n  int greater=replacementList[i].length() - searchList[i].length();\n  if (greater > 0) {\n    increase+=3 * greater;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (searchLength != replacementLength) {\n  throw new IllegalArgumentException(\"Search and Replace array lengths don't match: \" + searchLength + \" vs \"+ replacementLength);\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3639, 
          "faulty": "int replaceIndex=-1;", 
          "type": "InsertBefore", 
          "seed": "if (timeToLive < 0) {\n  throw new IllegalStateException(\"TimeToLive of \" + timeToLive + \" is less than 0: \"+ text);\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:12:49.793754110 -0500\n+++ /tmp/Arja_Defects4J_Lang_39/patches_x7iw/Patch_479/patched/tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:17:03.365643704 -0500\n@@ -3636,7 +3636,11 @@\n \n         // index on index that the match was found\n         int textIndex = -1;\n-        int replaceIndex = -1;\n+        if (timeToLive < 0) {\n+\t\t\tthrow new IllegalStateException(\"TimeToLive of \" + timeToLive\n+\t\t\t\t\t+ \" is less than 0: \" + text);\n+\t\t}\n+\t\tint replaceIndex = -1;\n         int tempIndex = -1;\n \n         // index of replace array that will replace the search string found\n@@ -3671,13 +3675,6 @@\n         // get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n         int increase = 0;\n \n-        // count the replacement text elements that are larger than their corresponding text being replaced\n-        for (int i = 0; i < searchList.length; i++) {\n-            int greater = replacementList[i].length() - searchList[i].length();\n-            if (greater > 0) {\n-                increase += 3 * greater; // assume 3 matches\n-            }\n-        }\n         // have upper-bound at 20% increase, then let Java take over\n         increase = Math.min(increase, text.length() / 5);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3624, 
          "faulty": "int replacementLength=replacementList.length;", 
          "type": "InsertBefore", 
          "seed": "if (timeToLive < 0) {\n  throw new IllegalStateException(\"TimeToLive of \" + timeToLive + \" is less than 0: \"+ text);\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3675, 
          "faulty": "for (int i=0; i < searchList.length; i++) {\n  int greater=replacementList[i].length() - searchList[i].length();\n  if (greater > 0) {\n    increase+=3 * greater;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (searchLength != replacementLength) {\n  throw new IllegalArgumentException(\"Search and Replace array lengths don't match: \" + searchLength + \" vs \"+ replacementLength);\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3640, 
          "faulty": "int tempIndex=-1;", 
          "type": "InsertBefore", 
          "seed": "if (searchLength != replacementLength) {\n  throw new IllegalArgumentException(\"Search and Replace array lengths don't match: \" + searchLength + \" vs \"+ replacementLength);\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:12:49.793754110 -0500\n+++ /tmp/Arja_Defects4J_Lang_39/patches_x7iw/Patch_778/patched/tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:18:10.293614772 -0500\n@@ -3621,7 +3621,11 @@\n         }\n \n         int searchLength = searchList.length;\n-        int replacementLength = replacementList.length;\n+        if (timeToLive < 0) {\n+\t\t\tthrow new IllegalStateException(\"TimeToLive of \" + timeToLive\n+\t\t\t\t\t+ \" is less than 0: \" + text);\n+\t\t}\n+\t\tint replacementLength = replacementList.length;\n \n         // make sure lengths are ok, these need to be equal\n         if (searchLength != replacementLength) {\n@@ -3637,7 +3641,12 @@\n         // index on index that the match was found\n         int textIndex = -1;\n         int replaceIndex = -1;\n-        int tempIndex = -1;\n+        if (searchLength != replacementLength) {\n+\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\"Search and Replace array lengths don't match: \"\n+\t\t\t\t\t\t\t+ searchLength + \" vs \" + replacementLength);\n+\t\t}\n+\t\tint tempIndex = -1;\n \n         // index of replace array that will replace the search string found\n         // NOTE: logic duplicated below START\n@@ -3671,13 +3680,6 @@\n         // get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n         int increase = 0;\n \n-        // count the replacement text elements that are larger than their corresponding text being replaced\n-        for (int i = 0; i < searchList.length; i++) {\n-            int greater = replacementList[i].length() - searchList[i].length();\n-            if (greater > 0) {\n-                increase += 3 * greater; // assume 3 matches\n-            }\n-        }\n         // have upper-bound at 20% increase, then let Java take over\n         increase = Math.min(increase, text.length() / 5);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3675, 
          "faulty": "for (int i=0; i < searchList.length; i++) {\n  int greater=replacementList[i].length() - searchList[i].length();\n  if (greater > 0) {\n    increase+=3 * greater;\n  }\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < searchLength; i++) {\n  if (noMoreMatchesForReplIndex[i] || searchList[i] == null || searchList[i].length() == 0 || replacementList[i] == null) {\n    continue;\n  }\n  tempIndex=text.indexOf(searchList[i]);\n  if (tempIndex == -1) {\n    noMoreMatchesForReplIndex[i]=true;\n  }\n else {\n    if (textIndex == -1 || tempIndex < textIndex) {\n      textIndex=tempIndex;\n      replaceIndex=i;\n    }\n  }\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3684, 
          "faulty": "StringBuilder buf=new StringBuilder(text.length() + increase);", 
          "type": "Replace", 
          "seed": "StringBuilder buf=new StringBuilder(4);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:12:49.793754110 -0500\n+++ /tmp/Arja_Defects4J_Lang_39/patches_x7iw/Patch_652/patched/tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:17:41.833627065 -0500\n@@ -3671,17 +3671,10 @@\n         // get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n         int increase = 0;\n \n-        // count the replacement text elements that are larger than their corresponding text being replaced\n-        for (int i = 0; i < searchList.length; i++) {\n-            int greater = replacementList[i].length() - searchList[i].length();\n-            if (greater > 0) {\n-                increase += 3 * greater; // assume 3 matches\n-            }\n-        }\n         // have upper-bound at 20% increase, then let Java take over\n         increase = Math.min(increase, text.length() / 5);\n \n-        StringBuilder buf = new StringBuilder(text.length() + increase);\n+        StringBuilder buf = new StringBuilder(4);\n \n         while (textIndex != -1) {\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3675, 
          "faulty": "for (int i=0; i < searchList.length; i++) {\n  int greater=replacementList[i].length() - searchList[i].length();\n  if (greater > 0) {\n    increase+=3 * greater;\n  }\n}", 
          "type": "Delete", 
          "seed": "replaceIndex=-1;"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3688, 
          "faulty": "for (int i=start; i < textIndex; i++) {\n  buf.append(text.charAt(i));\n}", 
          "type": "InsertBefore", 
          "seed": "if (textIndex == -1) {\n  return text;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:12:49.793754110 -0500\n+++ /tmp/Arja_Defects4J_Lang_39/patches_x7iw/Patch_1309/patched/tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:20:24.133557158 -0500\n@@ -3671,13 +3671,6 @@\n         // get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n         int increase = 0;\n \n-        // count the replacement text elements that are larger than their corresponding text being replaced\n-        for (int i = 0; i < searchList.length; i++) {\n-            int greater = replacementList[i].length() - searchList[i].length();\n-            if (greater > 0) {\n-                increase += 3 * greater; // assume 3 matches\n-            }\n-        }\n         // have upper-bound at 20% increase, then let Java take over\n         increase = Math.min(increase, text.length() / 5);\n \n@@ -3685,7 +3678,10 @@\n \n         while (textIndex != -1) {\n \n-            for (int i = start; i < textIndex; i++) {\n+            if (textIndex == -1) {\n+\t\t\t\treturn text;\n+\t\t\t}\n+\t\t\tfor (int i = start; i < textIndex; i++) {\n                 buf.append(text.charAt(i));\n             }\n             buf.append(replacementList[replaceIndex]);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3675, 
          "faulty": "for (int i=0; i < searchList.length; i++) {\n  int greater=replacementList[i].length() - searchList[i].length();\n  if (greater > 0) {\n    increase+=3 * greater;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (timeToLive < 0) {\n  throw new IllegalStateException(\"TimeToLive of \" + timeToLive + \" is less than 0: \"+ text);\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3684, 
          "faulty": "StringBuilder buf=new StringBuilder(text.length() + increase);", 
          "type": "InsertBefore", 
          "seed": "start=' ';"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:12:49.793754110 -0500\n+++ /tmp/Arja_Defects4J_Lang_39/patches_x7iw/Patch_1850/patched/tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:23:50.977468713 -0500\n@@ -3671,17 +3671,11 @@\n         // get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n         int increase = 0;\n \n-        // count the replacement text elements that are larger than their corresponding text being replaced\n-        for (int i = 0; i < searchList.length; i++) {\n-            int greater = replacementList[i].length() - searchList[i].length();\n-            if (greater > 0) {\n-                increase += 3 * greater; // assume 3 matches\n-            }\n-        }\n         // have upper-bound at 20% increase, then let Java take over\n         increase = Math.min(increase, text.length() / 5);\n \n-        StringBuilder buf = new StringBuilder(text.length() + increase);\n+        start = ' ';\n+\t\tStringBuilder buf = new StringBuilder(text.length() + increase);\n \n         while (textIndex != -1) {\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3675, 
          "faulty": "for (int i=0; i < searchList.length; i++) {\n  int greater=replacementList[i].length() - searchList[i].length();\n  if (greater > 0) {\n    increase+=3 * greater;\n  }\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < searchLength; i++) {\n  if (noMoreMatchesForReplIndex[i] || searchList[i] == null || searchList[i].length() == 0 || replacementList[i] == null) {\n    continue;\n  }\n  tempIndex=text.indexOf(searchList[i]);\n  if (tempIndex == -1) {\n    noMoreMatchesForReplIndex[i]=true;\n  }\n else {\n    if (textIndex == -1 || tempIndex < textIndex) {\n      textIndex=tempIndex;\n      replaceIndex=i;\n    }\n  }\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3697, 
          "faulty": "tempIndex=-1;", 
          "type": "InsertBefore", 
          "seed": "replaceIndex=-1;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:12:49.793754110 -0500\n+++ /tmp/Arja_Defects4J_Lang_39/patches_x7iw/Patch_1339/patched/tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:20:30.797554297 -0500\n@@ -3671,13 +3671,6 @@\n         // get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n         int increase = 0;\n \n-        // count the replacement text elements that are larger than their corresponding text being replaced\n-        for (int i = 0; i < searchList.length; i++) {\n-            int greater = replacementList[i].length() - searchList[i].length();\n-            if (greater > 0) {\n-                increase += 3 * greater; // assume 3 matches\n-            }\n-        }\n         // have upper-bound at 20% increase, then let Java take over\n         increase = Math.min(increase, text.length() / 5);\n \n@@ -3694,7 +3687,8 @@\n \n             textIndex = -1;\n             replaceIndex = -1;\n-            tempIndex = -1;\n+            replaceIndex = -1;\n+\t\t\ttempIndex = -1;\n             // find the next earliest match\n             // NOTE: logic mostly duplicated above START\n             for (int i = 0; i < searchLength; i++) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3669, 
          "faulty": "int start=0;", 
          "type": "InsertBefore", 
          "seed": "if (text == null || text.length() == 0 || searchList == null || searchList.length == 0 || replacementList == null || replacementList.length == 0) {\n  return text;\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3675, 
          "faulty": "for (int i=0; i < searchList.length; i++) {\n  int greater=replacementList[i].length() - searchList[i].length();\n  if (greater > 0) {\n    increase+=3 * greater;\n  }\n}", 
          "type": "Delete", 
          "seed": "start=0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:12:49.793754110 -0500\n+++ /tmp/Arja_Defects4J_Lang_39/patches_x7iw/Patch_1404/patched/tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:20:47.833546989 -0500\n@@ -3666,18 +3666,16 @@\n             return text;\n         }\n \n-        int start = 0;\n+        if (text == null || text.length() == 0 || searchList == null\n+\t\t\t\t|| searchList.length == 0 || replacementList == null\n+\t\t\t\t|| replacementList.length == 0) {\n+\t\t\treturn text;\n+\t\t}\n+\t\tint start = 0;\n \n         // get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n         int increase = 0;\n \n-        // count the replacement text elements that are larger than their corresponding text being replaced\n-        for (int i = 0; i < searchList.length; i++) {\n-            int greater = replacementList[i].length() - searchList[i].length();\n-            if (greater > 0) {\n-                increase += 3 * greater; // assume 3 matches\n-            }\n-        }\n         // have upper-bound at 20% increase, then let Java take over\n         increase = Math.min(increase, text.length() / 5);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3612, 
          "faulty": "if (text == null || text.length() == 0 || searchList == null || searchList.length == 0 || replacementList == null || replacementList.length == 0) {\n  return text;\n}", 
          "type": "InsertBefore", 
          "seed": "if (timeToLive < 0) {\n  throw new IllegalStateException(\"TimeToLive of \" + timeToLive + \" is less than 0: \"+ text);\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3675, 
          "faulty": "for (int i=0; i < searchList.length; i++) {\n  int greater=replacementList[i].length() - searchList[i].length();\n  if (greater > 0) {\n    increase+=3 * greater;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (searchLength != replacementLength) {\n  throw new IllegalArgumentException(\"Search and Replace array lengths don't match: \" + searchLength + \" vs \"+ replacementLength);\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3672, 
          "faulty": "int increase=0;", 
          "type": "InsertBefore", 
          "seed": "for (int i=0; i < searchLength; i++) {\n  if (noMoreMatchesForReplIndex[i] || searchList[i] == null || searchList[i].length() == 0 || replacementList[i] == null) {\n    continue;\n  }\n  tempIndex=text.indexOf(searchList[i]);\n  if (tempIndex == -1) {\n    noMoreMatchesForReplIndex[i]=true;\n  }\n else {\n    if (textIndex == -1 || tempIndex < textIndex) {\n      textIndex=tempIndex;\n      replaceIndex=i;\n    }\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:12:49.793754110 -0500\n+++ /tmp/Arja_Defects4J_Lang_39/patches_x7iw/Patch_266/patched/tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:15:42.513678769 -0500\n@@ -3609,7 +3609,11 @@\n         // mchyzer Performance note: This creates very few new objects (one major goal)\n         // let me know if there are performance requests, we can create a harness to measure\n \n-        if (text == null || text.length() == 0 || searchList == null || \n+        if (timeToLive < 0) {\n+\t\t\tthrow new IllegalStateException(\"TimeToLive of \" + timeToLive\n+\t\t\t\t\t+ \" is less than 0: \" + text);\n+\t\t}\n+\t\tif (text == null || text.length() == 0 || searchList == null || \n             searchList.length == 0 || replacementList == null || replacementList.length == 0) \n         {\n             return text;\n@@ -3668,16 +3672,25 @@\n \n         int start = 0;\n \n-        // get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n+        for (int i = 0; i < searchLength; i++) {\n+\t\t\tif (noMoreMatchesForReplIndex[i] || searchList[i] == null\n+\t\t\t\t\t|| searchList[i].length() == 0\n+\t\t\t\t\t|| replacementList[i] == null) {\n+\t\t\t\tcontinue;\n+\t\t\t}\n+\t\t\ttempIndex = text.indexOf(searchList[i]);\n+\t\t\tif (tempIndex == -1) {\n+\t\t\t\tnoMoreMatchesForReplIndex[i] = true;\n+\t\t\t} else {\n+\t\t\t\tif (textIndex == -1 || tempIndex < textIndex) {\n+\t\t\t\t\ttextIndex = tempIndex;\n+\t\t\t\t\treplaceIndex = i;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\t// get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n         int increase = 0;\n \n-        // count the replacement text elements that are larger than their corresponding text being replaced\n-        for (int i = 0; i < searchList.length; i++) {\n-            int greater = replacementList[i].length() - searchList[i].length();\n-            if (greater > 0) {\n-                increase += 3 * greater; // assume 3 matches\n-            }\n-        }\n         // have upper-bound at 20% increase, then let Java take over\n         increase = Math.min(increase, text.length() / 5);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3624, 
          "faulty": "int replacementLength=replacementList.length;", 
          "type": "InsertBefore", 
          "seed": "if (text == null || text.length() == 0 || searchList == null || searchList.length == 0 || replacementList == null || replacementList.length == 0) {\n  return text;\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3675, 
          "faulty": "for (int i=0; i < searchList.length; i++) {\n  int greater=replacementList[i].length() - searchList[i].length();\n  if (greater > 0) {\n    increase+=3 * greater;\n  }\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < searchLength; i++) {\n  if (noMoreMatchesForReplIndex[i] || searchList[i] == null || searchList[i].length() == 0 || replacementList[i] == null) {\n    continue;\n  }\n  tempIndex=text.indexOf(searchList[i]);\n  if (tempIndex == -1) {\n    noMoreMatchesForReplIndex[i]=true;\n  }\n else {\n    if (textIndex == -1 || tempIndex < textIndex) {\n      textIndex=tempIndex;\n      replaceIndex=i;\n    }\n  }\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3623, 
          "faulty": "int searchLength=searchList.length;", 
          "type": "InsertBefore", 
          "seed": "if (timeToLive < 0) {\n  throw new IllegalStateException(\"TimeToLive of \" + timeToLive + \" is less than 0: \"+ text);\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:12:49.793754110 -0500\n+++ /tmp/Arja_Defects4J_Lang_39/patches_x7iw/Patch_1220/patched/tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:20:01.897566708 -0500\n@@ -3620,8 +3620,17 @@\n             throw new IllegalStateException(\"TimeToLive of \" + timeToLive + \" is less than 0: \" + text);\n         }\n \n-        int searchLength = searchList.length;\n-        int replacementLength = replacementList.length;\n+        if (timeToLive < 0) {\n+\t\t\tthrow new IllegalStateException(\"TimeToLive of \" + timeToLive\n+\t\t\t\t\t+ \" is less than 0: \" + text);\n+\t\t}\n+\t\tint searchLength = searchList.length;\n+        if (text == null || text.length() == 0 || searchList == null\n+\t\t\t\t|| searchList.length == 0 || replacementList == null\n+\t\t\t\t|| replacementList.length == 0) {\n+\t\t\treturn text;\n+\t\t}\n+\t\tint replacementLength = replacementList.length;\n \n         // make sure lengths are ok, these need to be equal\n         if (searchLength != replacementLength) {\n@@ -3671,13 +3680,6 @@\n         // get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n         int increase = 0;\n \n-        // count the replacement text elements that are larger than their corresponding text being replaced\n-        for (int i = 0; i < searchList.length; i++) {\n-            int greater = replacementList[i].length() - searchList[i].length();\n-            if (greater > 0) {\n-                increase += 3 * greater; // assume 3 matches\n-            }\n-        }\n         // have upper-bound at 20% increase, then let Java take over\n         increase = Math.min(increase, text.length() / 5);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3677, 
          "faulty": "if (greater > 0) {\n  increase+=3 * greater;\n}", 
          "type": "Replace", 
          "seed": "replaceIndex=-1;"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3675, 
          "faulty": "for (int i=0; i < searchList.length; i++) {\n  int greater=replacementList[i].length() - searchList[i].length();\n  if (greater > 0) {\n    increase+=3 * greater;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (searchLength != replacementLength) {\n  throw new IllegalArgumentException(\"Search and Replace array lengths don't match: \" + searchLength + \" vs \"+ replacementLength);\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:12:49.793754110 -0500\n+++ /tmp/Arja_Defects4J_Lang_39/patches_x7iw/Patch_507/patched/tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:17:09.585641012 -0500\n@@ -3671,13 +3671,6 @@\n         // get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n         int increase = 0;\n \n-        // count the replacement text elements that are larger than their corresponding text being replaced\n-        for (int i = 0; i < searchList.length; i++) {\n-            int greater = replacementList[i].length() - searchList[i].length();\n-            if (greater > 0) {\n-                increase += 3 * greater; // assume 3 matches\n-            }\n-        }\n         // have upper-bound at 20% increase, then let Java take over\n         increase = Math.min(increase, text.length() / 5);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3675, 
          "faulty": "for (int i=0; i < searchList.length; i++) {\n  int greater=replacementList[i].length() - searchList[i].length();\n  if (greater > 0) {\n    increase+=3 * greater;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (searchLength != replacementLength) {\n  throw new IllegalArgumentException(\"Search and Replace array lengths don't match: \" + searchLength + \" vs \"+ replacementLength);\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3672, 
          "faulty": "int increase=0;", 
          "type": "InsertBefore", 
          "seed": "for (int i=0; i < searchLength; i++) {\n  if (noMoreMatchesForReplIndex[i] || searchList[i] == null || searchList[i].length() == 0 || replacementList[i] == null) {\n    continue;\n  }\n  tempIndex=text.indexOf(searchList[i]);\n  if (tempIndex == -1) {\n    noMoreMatchesForReplIndex[i]=true;\n  }\n else {\n    if (textIndex == -1 || tempIndex < textIndex) {\n      textIndex=tempIndex;\n      replaceIndex=i;\n    }\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:12:49.793754110 -0500\n+++ /tmp/Arja_Defects4J_Lang_39/patches_x7iw/Patch_78/patched/tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:14:38.141706777 -0500\n@@ -3668,16 +3668,25 @@\n \n         int start = 0;\n \n-        // get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n+        for (int i = 0; i < searchLength; i++) {\n+\t\t\tif (noMoreMatchesForReplIndex[i] || searchList[i] == null\n+\t\t\t\t\t|| searchList[i].length() == 0\n+\t\t\t\t\t|| replacementList[i] == null) {\n+\t\t\t\tcontinue;\n+\t\t\t}\n+\t\t\ttempIndex = text.indexOf(searchList[i]);\n+\t\t\tif (tempIndex == -1) {\n+\t\t\t\tnoMoreMatchesForReplIndex[i] = true;\n+\t\t\t} else {\n+\t\t\t\tif (textIndex == -1 || tempIndex < textIndex) {\n+\t\t\t\t\ttextIndex = tempIndex;\n+\t\t\t\t\treplaceIndex = i;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\t// get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n         int increase = 0;\n \n-        // count the replacement text elements that are larger than their corresponding text being replaced\n-        for (int i = 0; i < searchList.length; i++) {\n-            int greater = replacementList[i].length() - searchList[i].length();\n-            if (greater > 0) {\n-                increase += 3 * greater; // assume 3 matches\n-            }\n-        }\n         // have upper-bound at 20% increase, then let Java take over\n         increase = Math.min(increase, text.length() / 5);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3624, 
          "faulty": "int replacementLength=replacementList.length;", 
          "type": "InsertBefore", 
          "seed": "if (text == null || text.length() == 0 || searchList == null || searchList.length == 0 || replacementList == null || replacementList.length == 0) {\n  return text;\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3675, 
          "faulty": "for (int i=0; i < searchList.length; i++) {\n  int greater=replacementList[i].length() - searchList[i].length();\n  if (greater > 0) {\n    increase+=3 * greater;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (searchLength != replacementLength) {\n  throw new IllegalArgumentException(\"Search and Replace array lengths don't match: \" + searchLength + \" vs \"+ replacementLength);\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3696, 
          "faulty": "replaceIndex=-1;", 
          "type": "Delete", 
          "seed": "start=0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:12:49.793754110 -0500\n+++ /tmp/Arja_Defects4J_Lang_39/patches_x7iw/Patch_798/patched/tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:18:14.949612762 -0500\n@@ -3621,7 +3621,12 @@\n         }\n \n         int searchLength = searchList.length;\n-        int replacementLength = replacementList.length;\n+        if (text == null || text.length() == 0 || searchList == null\n+\t\t\t\t|| searchList.length == 0 || replacementList == null\n+\t\t\t\t|| replacementList.length == 0) {\n+\t\t\treturn text;\n+\t\t}\n+\t\tint replacementLength = replacementList.length;\n \n         // make sure lengths are ok, these need to be equal\n         if (searchLength != replacementLength) {\n@@ -3671,13 +3676,6 @@\n         // get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n         int increase = 0;\n \n-        // count the replacement text elements that are larger than their corresponding text being replaced\n-        for (int i = 0; i < searchList.length; i++) {\n-            int greater = replacementList[i].length() - searchList[i].length();\n-            if (greater > 0) {\n-                increase += 3 * greater; // assume 3 matches\n-            }\n-        }\n         // have upper-bound at 20% increase, then let Java take over\n         increase = Math.min(increase, text.length() / 5);\n \n@@ -3693,7 +3691,6 @@\n             start = textIndex + searchList[replaceIndex].length();\n \n             textIndex = -1;\n-            replaceIndex = -1;\n             tempIndex = -1;\n             // find the next earliest match\n             // NOTE: logic mostly duplicated above START\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3677, 
          "faulty": "if (greater > 0) {\n  increase+=3 * greater;\n}", 
          "type": "InsertBefore", 
          "seed": "if (textIndex == -1 || tempIndex < textIndex) {\n  textIndex=tempIndex;\n  replaceIndex=i;\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3675, 
          "faulty": "for (int i=0; i < searchList.length; i++) {\n  int greater=replacementList[i].length() - searchList[i].length();\n  if (greater > 0) {\n    increase+=3 * greater;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (timeToLive < 0) {\n  throw new IllegalStateException(\"TimeToLive of \" + timeToLive + \" is less than 0: \"+ text);\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:12:49.793754110 -0500\n+++ /tmp/Arja_Defects4J_Lang_39/patches_x7iw/Patch_455/patched/tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:16:58.253645918 -0500\n@@ -3671,13 +3671,6 @@\n         // get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n         int increase = 0;\n \n-        // count the replacement text elements that are larger than their corresponding text being replaced\n-        for (int i = 0; i < searchList.length; i++) {\n-            int greater = replacementList[i].length() - searchList[i].length();\n-            if (greater > 0) {\n-                increase += 3 * greater; // assume 3 matches\n-            }\n-        }\n         // have upper-bound at 20% increase, then let Java take over\n         increase = Math.min(increase, text.length() / 5);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3675, 
          "faulty": "for (int i=0; i < searchList.length; i++) {\n  int greater=replacementList[i].length() - searchList[i].length();\n  if (greater > 0) {\n    increase+=3 * greater;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (timeToLive < 0) {\n  throw new IllegalStateException(\"TimeToLive of \" + timeToLive + \" is less than 0: \"+ text);\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3697, 
          "faulty": "tempIndex=-1;", 
          "type": "Replace", 
          "seed": "if (timeToLive < 0) {\n  throw new IllegalStateException(\"TimeToLive of \" + timeToLive + \" is less than 0: \"+ text);\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:12:49.793754110 -0500\n+++ /tmp/Arja_Defects4J_Lang_39/patches_x7iw/Patch_1011/patched/tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:19:02.029592464 -0500\n@@ -3671,13 +3671,6 @@\n         // get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n         int increase = 0;\n \n-        // count the replacement text elements that are larger than their corresponding text being replaced\n-        for (int i = 0; i < searchList.length; i++) {\n-            int greater = replacementList[i].length() - searchList[i].length();\n-            if (greater > 0) {\n-                increase += 3 * greater; // assume 3 matches\n-            }\n-        }\n         // have upper-bound at 20% increase, then let Java take over\n         increase = Math.min(increase, text.length() / 5);\n \n@@ -3694,7 +3687,10 @@\n \n             textIndex = -1;\n             replaceIndex = -1;\n-            tempIndex = -1;\n+            if (timeToLive < 0) {\n+\t\t\t\tthrow new IllegalStateException(\"TimeToLive of \" + timeToLive\n+\t\t\t\t\t\t+ \" is less than 0: \" + text);\n+\t\t\t}\n             // find the next earliest match\n             // NOTE: logic mostly duplicated above START\n             for (int i = 0; i < searchLength; i++) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3675, 
          "faulty": "for (int i=0; i < searchList.length; i++) {\n  int greater=replacementList[i].length() - searchList[i].length();\n  if (greater > 0) {\n    increase+=3 * greater;\n  }\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < searchLength; i++) {\n  if (noMoreMatchesForReplIndex[i] || searchList[i] == null || searchList[i].length() == 0 || replacementList[i] == null) {\n    continue;\n  }\n  tempIndex=text.indexOf(searchList[i]);\n  if (tempIndex == -1) {\n    noMoreMatchesForReplIndex[i]=true;\n  }\n else {\n    if (textIndex == -1 || tempIndex < textIndex) {\n      textIndex=tempIndex;\n      replaceIndex=i;\n    }\n  }\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3682, 
          "faulty": "increase=Math.min(increase,text.length() / 5);", 
          "type": "Delete", 
          "seed": "start=0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:12:49.793754110 -0500\n+++ /tmp/Arja_Defects4J_Lang_39/patches_x7iw/Patch_398/patched/tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:16:35.345655842 -0500\n@@ -3671,16 +3671,6 @@\n         // get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n         int increase = 0;\n \n-        // count the replacement text elements that are larger than their corresponding text being replaced\n-        for (int i = 0; i < searchList.length; i++) {\n-            int greater = replacementList[i].length() - searchList[i].length();\n-            if (greater > 0) {\n-                increase += 3 * greater; // assume 3 matches\n-            }\n-        }\n-        // have upper-bound at 20% increase, then let Java take over\n-        increase = Math.min(increase, text.length() / 5);\n-\n         StringBuilder buf = new StringBuilder(text.length() + increase);\n \n         while (textIndex != -1) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3677, 
          "faulty": "if (greater > 0) {\n  increase+=3 * greater;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3624, 
          "faulty": "int replacementLength=replacementList.length;", 
          "type": "InsertBefore", 
          "seed": "if (timeToLive < 0) {\n  throw new IllegalStateException(\"TimeToLive of \" + timeToLive + \" is less than 0: \"+ text);\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3675, 
          "faulty": "for (int i=0; i < searchList.length; i++) {\n  int greater=replacementList[i].length() - searchList[i].length();\n  if (greater > 0) {\n    increase+=3 * greater;\n  }\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < searchLength; i++) {\n  if (noMoreMatchesForReplIndex[i] || searchList[i] == null || searchList[i].length() == 0 || replacementList[i] == null) {\n    continue;\n  }\n  tempIndex=text.indexOf(searchList[i]);\n  if (tempIndex == -1) {\n    noMoreMatchesForReplIndex[i]=true;\n  }\n else {\n    if (textIndex == -1 || tempIndex < textIndex) {\n      textIndex=tempIndex;\n      replaceIndex=i;\n    }\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:12:49.793754110 -0500\n+++ /tmp/Arja_Defects4J_Lang_39/patches_x7iw/Patch_925/patched/tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:18:43.009600660 -0500\n@@ -3621,7 +3621,11 @@\n         }\n \n         int searchLength = searchList.length;\n-        int replacementLength = replacementList.length;\n+        if (timeToLive < 0) {\n+\t\t\tthrow new IllegalStateException(\"TimeToLive of \" + timeToLive\n+\t\t\t\t\t+ \" is less than 0: \" + text);\n+\t\t}\n+\t\tint replacementLength = replacementList.length;\n \n         // make sure lengths are ok, these need to be equal\n         if (searchLength != replacementLength) {\n@@ -3671,13 +3675,6 @@\n         // get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n         int increase = 0;\n \n-        // count the replacement text elements that are larger than their corresponding text being replaced\n-        for (int i = 0; i < searchList.length; i++) {\n-            int greater = replacementList[i].length() - searchList[i].length();\n-            if (greater > 0) {\n-                increase += 3 * greater; // assume 3 matches\n-            }\n-        }\n         // have upper-bound at 20% increase, then let Java take over\n         increase = Math.min(increase, text.length() / 5);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3648, 
          "faulty": "continue;", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3675, 
          "faulty": "for (int i=0; i < searchList.length; i++) {\n  int greater=replacementList[i].length() - searchList[i].length();\n  if (greater > 0) {\n    increase+=3 * greater;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (searchLength != replacementLength) {\n  throw new IllegalArgumentException(\"Search and Replace array lengths don't match: \" + searchLength + \" vs \"+ replacementLength);\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:12:49.793754110 -0500\n+++ /tmp/Arja_Defects4J_Lang_39/patches_x7iw/Patch_821/patched/tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:18:19.845610650 -0500\n@@ -3645,7 +3645,7 @@\n             if (noMoreMatchesForReplIndex[i] || searchList[i] == null || \n                 searchList[i].length() == 0 || replacementList[i] == null) \n             {\n-                continue;\n+                break;\n             }\n             tempIndex = text.indexOf(searchList[i]);\n \n@@ -3671,13 +3671,6 @@\n         // get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n         int increase = 0;\n \n-        // count the replacement text elements that are larger than their corresponding text being replaced\n-        for (int i = 0; i < searchList.length; i++) {\n-            int greater = replacementList[i].length() - searchList[i].length();\n-            if (greater > 0) {\n-                increase += 3 * greater; // assume 3 matches\n-            }\n-        }\n         // have upper-bound at 20% increase, then let Java take over\n         increase = Math.min(increase, text.length() / 5);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3657, 
          "faulty": "textIndex=tempIndex;", 
          "type": "InsertBefore", 
          "seed": "if (tempIndex == -1) {\n  noMoreMatchesForReplIndex[i]=true;\n}\n else {\n  if (textIndex == -1 || tempIndex < textIndex) {\n    textIndex=tempIndex;\n    replaceIndex=i;\n  }\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3675, 
          "faulty": "for (int i=0; i < searchList.length; i++) {\n  int greater=replacementList[i].length() - searchList[i].length();\n  if (greater > 0) {\n    increase+=3 * greater;\n  }\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < searchLength; i++) {\n  if (noMoreMatchesForReplIndex[i] || searchList[i] == null || searchList[i].length() == 0 || replacementList[i] == null) {\n    continue;\n  }\n  tempIndex=text.indexOf(searchList[i]);\n  if (tempIndex == -1) {\n    noMoreMatchesForReplIndex[i]=true;\n  }\n else {\n    if (textIndex == -1 || tempIndex < textIndex) {\n      textIndex=tempIndex;\n      replaceIndex=i;\n    }\n  }\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3672, 
          "faulty": "int increase=0;", 
          "type": "InsertBefore", 
          "seed": "for (int i=0; i < searchLength; i++) {\n  if (noMoreMatchesForReplIndex[i] || searchList[i] == null || searchList[i].length() == 0 || replacementList[i] == null) {\n    continue;\n  }\n  tempIndex=text.indexOf(searchList[i]);\n  if (tempIndex == -1) {\n    noMoreMatchesForReplIndex[i]=true;\n  }\n else {\n    if (textIndex == -1 || tempIndex < textIndex) {\n      textIndex=tempIndex;\n      replaceIndex=i;\n    }\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:12:49.793754110 -0500\n+++ /tmp/Arja_Defects4J_Lang_39/patches_x7iw/Patch_675/patched/tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:17:46.693624965 -0500\n@@ -3654,7 +3654,15 @@\n                 noMoreMatchesForReplIndex[i] = true;\n             } else {\n                 if (textIndex == -1 || tempIndex < textIndex) {\n-                    textIndex = tempIndex;\n+                    if (tempIndex == -1) {\n+\t\t\t\t\t\tnoMoreMatchesForReplIndex[i] = true;\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tif (textIndex == -1 || tempIndex < textIndex) {\n+\t\t\t\t\t\t\ttextIndex = tempIndex;\n+\t\t\t\t\t\t\treplaceIndex = i;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\ttextIndex = tempIndex;\n                     replaceIndex = i;\n                 }\n             }\n@@ -3668,16 +3676,25 @@\n \n         int start = 0;\n \n-        // get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n+        for (int i = 0; i < searchLength; i++) {\n+\t\t\tif (noMoreMatchesForReplIndex[i] || searchList[i] == null\n+\t\t\t\t\t|| searchList[i].length() == 0\n+\t\t\t\t\t|| replacementList[i] == null) {\n+\t\t\t\tcontinue;\n+\t\t\t}\n+\t\t\ttempIndex = text.indexOf(searchList[i]);\n+\t\t\tif (tempIndex == -1) {\n+\t\t\t\tnoMoreMatchesForReplIndex[i] = true;\n+\t\t\t} else {\n+\t\t\t\tif (textIndex == -1 || tempIndex < textIndex) {\n+\t\t\t\t\ttextIndex = tempIndex;\n+\t\t\t\t\treplaceIndex = i;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\t// get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n         int increase = 0;\n \n-        // count the replacement text elements that are larger than their corresponding text being replaced\n-        for (int i = 0; i < searchList.length; i++) {\n-            int greater = replacementList[i].length() - searchList[i].length();\n-            if (greater > 0) {\n-                increase += 3 * greater; // assume 3 matches\n-            }\n-        }\n         // have upper-bound at 20% increase, then let Java take over\n         increase = Math.min(increase, text.length() / 5);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3657, 
          "faulty": "textIndex=tempIndex;", 
          "type": "Replace", 
          "seed": "if (tempIndex == -1) {\n  noMoreMatchesForReplIndex[i]=true;\n}\n else {\n  if (textIndex == -1 || tempIndex < textIndex) {\n    textIndex=tempIndex;\n    replaceIndex=i;\n  }\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3654, 
          "faulty": "noMoreMatchesForReplIndex[i]=true;", 
          "type": "Delete", 
          "seed": "tempIndex=text.indexOf(searchList[i]);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3675, 
          "faulty": "for (int i=0; i < searchList.length; i++) {\n  int greater=replacementList[i].length() - searchList[i].length();\n  if (greater > 0) {\n    increase+=3 * greater;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (textIndex == -1) {\n  return text;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:12:49.793754110 -0500\n+++ /tmp/Arja_Defects4J_Lang_39/patches_x7iw/Patch_329/patched/tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:16:02.713669997 -0500\n@@ -3651,10 +3651,16 @@\n \n             // see if we need to keep searching for this\n             if (tempIndex == -1) {\n-                noMoreMatchesForReplIndex[i] = true;\n             } else {\n                 if (textIndex == -1 || tempIndex < textIndex) {\n-                    textIndex = tempIndex;\n+                    if (tempIndex == -1) {\n+\t\t\t\t\t\tnoMoreMatchesForReplIndex[i] = true;\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tif (textIndex == -1 || tempIndex < textIndex) {\n+\t\t\t\t\t\t\ttextIndex = tempIndex;\n+\t\t\t\t\t\t\treplaceIndex = i;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n                     replaceIndex = i;\n                 }\n             }\n@@ -3671,13 +3677,6 @@\n         // get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n         int increase = 0;\n \n-        // count the replacement text elements that are larger than their corresponding text being replaced\n-        for (int i = 0; i < searchList.length; i++) {\n-            int greater = replacementList[i].length() - searchList[i].length();\n-            if (greater > 0) {\n-                increase += 3 * greater; // assume 3 matches\n-            }\n-        }\n         // have upper-bound at 20% increase, then let Java take over\n         increase = Math.min(increase, text.length() / 5);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3648, 
          "faulty": "continue;", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3675, 
          "faulty": "for (int i=0; i < searchList.length; i++) {\n  int greater=replacementList[i].length() - searchList[i].length();\n  if (greater > 0) {\n    increase+=3 * greater;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (timeToLive < 0) {\n  throw new IllegalStateException(\"TimeToLive of \" + timeToLive + \" is less than 0: \"+ text);\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3639, 
          "faulty": "int replaceIndex=-1;", 
          "type": "InsertBefore", 
          "seed": "if (searchLength != replacementLength) {\n  throw new IllegalArgumentException(\"Search and Replace array lengths don't match: \" + searchLength + \" vs \"+ replacementLength);\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:12:49.793754110 -0500\n+++ /tmp/Arja_Defects4J_Lang_39/patches_x7iw/Patch_1480/patched/tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:21:16.617534650 -0500\n@@ -3636,7 +3636,12 @@\n \n         // index on index that the match was found\n         int textIndex = -1;\n-        int replaceIndex = -1;\n+        if (searchLength != replacementLength) {\n+\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\"Search and Replace array lengths don't match: \"\n+\t\t\t\t\t\t\t+ searchLength + \" vs \" + replacementLength);\n+\t\t}\n+\t\tint replaceIndex = -1;\n         int tempIndex = -1;\n \n         // index of replace array that will replace the search string found\n@@ -3645,7 +3650,7 @@\n             if (noMoreMatchesForReplIndex[i] || searchList[i] == null || \n                 searchList[i].length() == 0 || replacementList[i] == null) \n             {\n-                continue;\n+                break;\n             }\n             tempIndex = text.indexOf(searchList[i]);\n \n@@ -3671,13 +3676,6 @@\n         // get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n         int increase = 0;\n \n-        // count the replacement text elements that are larger than their corresponding text being replaced\n-        for (int i = 0; i < searchList.length; i++) {\n-            int greater = replacementList[i].length() - searchList[i].length();\n-            if (greater > 0) {\n-                increase += 3 * greater; // assume 3 matches\n-            }\n-        }\n         // have upper-bound at 20% increase, then let Java take over\n         increase = Math.min(increase, text.length() / 5);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3675, 
          "faulty": "for (int i=0; i < searchList.length; i++) {\n  int greater=replacementList[i].length() - searchList[i].length();\n  if (greater > 0) {\n    increase+=3 * greater;\n  }\n}", 
          "type": "Delete", 
          "seed": "replaceIndex=-1;"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3640, 
          "faulty": "int tempIndex=-1;", 
          "type": "InsertBefore", 
          "seed": "if (searchLength != replacementLength) {\n  throw new IllegalArgumentException(\"Search and Replace array lengths don't match: \" + searchLength + \" vs \"+ replacementLength);\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3696, 
          "faulty": "replaceIndex=-1;", 
          "type": "Delete", 
          "seed": "buf.append('-');"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:12:49.793754110 -0500\n+++ /tmp/Arja_Defects4J_Lang_39/patches_x7iw/Patch_495/patched/tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:17:07.121642079 -0500\n@@ -3637,7 +3637,12 @@\n         // index on index that the match was found\n         int textIndex = -1;\n         int replaceIndex = -1;\n-        int tempIndex = -1;\n+        if (searchLength != replacementLength) {\n+\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\"Search and Replace array lengths don't match: \"\n+\t\t\t\t\t\t\t+ searchLength + \" vs \" + replacementLength);\n+\t\t}\n+\t\tint tempIndex = -1;\n \n         // index of replace array that will replace the search string found\n         // NOTE: logic duplicated below START\n@@ -3671,13 +3676,6 @@\n         // get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n         int increase = 0;\n \n-        // count the replacement text elements that are larger than their corresponding text being replaced\n-        for (int i = 0; i < searchList.length; i++) {\n-            int greater = replacementList[i].length() - searchList[i].length();\n-            if (greater > 0) {\n-                increase += 3 * greater; // assume 3 matches\n-            }\n-        }\n         // have upper-bound at 20% increase, then let Java take over\n         increase = Math.min(increase, text.length() / 5);\n \n@@ -3693,7 +3691,6 @@\n             start = textIndex + searchList[replaceIndex].length();\n \n             textIndex = -1;\n-            replaceIndex = -1;\n             tempIndex = -1;\n             // find the next earliest match\n             // NOTE: logic mostly duplicated above START\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3612, 
          "faulty": "if (text == null || text.length() == 0 || searchList == null || searchList.length == 0 || replacementList == null || replacementList.length == 0) {\n  return text;\n}", 
          "type": "InsertBefore", 
          "seed": "if (timeToLive < 0) {\n  throw new IllegalStateException(\"TimeToLive of \" + timeToLive + \" is less than 0: \"+ text);\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3675, 
          "faulty": "for (int i=0; i < searchList.length; i++) {\n  int greater=replacementList[i].length() - searchList[i].length();\n  if (greater > 0) {\n    increase+=3 * greater;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (searchLength != replacementLength) {\n  throw new IllegalArgumentException(\"Search and Replace array lengths don't match: \" + searchLength + \" vs \"+ replacementLength);\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:12:49.793754110 -0500\n+++ /tmp/Arja_Defects4J_Lang_39/patches_x7iw/Patch_366/patched/tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:16:16.833663869 -0500\n@@ -3609,7 +3609,11 @@\n         // mchyzer Performance note: This creates very few new objects (one major goal)\n         // let me know if there are performance requests, we can create a harness to measure\n \n-        if (text == null || text.length() == 0 || searchList == null || \n+        if (timeToLive < 0) {\n+\t\t\tthrow new IllegalStateException(\"TimeToLive of \" + timeToLive\n+\t\t\t\t\t+ \" is less than 0: \" + text);\n+\t\t}\n+\t\tif (text == null || text.length() == 0 || searchList == null || \n             searchList.length == 0 || replacementList == null || replacementList.length == 0) \n         {\n             return text;\n@@ -3671,13 +3675,6 @@\n         // get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n         int increase = 0;\n \n-        // count the replacement text elements that are larger than their corresponding text being replaced\n-        for (int i = 0; i < searchList.length; i++) {\n-            int greater = replacementList[i].length() - searchList[i].length();\n-            if (greater > 0) {\n-                increase += 3 * greater; // assume 3 matches\n-            }\n-        }\n         // have upper-bound at 20% increase, then let Java take over\n         increase = Math.min(increase, text.length() / 5);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3675, 
          "faulty": "for (int i=0; i < searchList.length; i++) {\n  int greater=replacementList[i].length() - searchList[i].length();\n  if (greater > 0) {\n    increase+=3 * greater;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (searchLength != replacementLength) {\n  throw new IllegalArgumentException(\"Search and Replace array lengths don't match: \" + searchLength + \" vs \"+ replacementLength);\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3653, 
          "faulty": "if (tempIndex == -1) {\n  noMoreMatchesForReplIndex[i]=true;\n}\n else {\n  if (textIndex == -1 || tempIndex < textIndex) {\n    textIndex=tempIndex;\n    replaceIndex=i;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "if (noMoreMatchesForReplIndex[i] || searchList[i] == null || searchList[i].length() == 0 || replacementList[i] == null) {\n  continue;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:12:49.793754110 -0500\n+++ /tmp/Arja_Defects4J_Lang_39/patches_x7iw/Patch_1441/patched/tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:21:02.229540816 -0500\n@@ -3649,7 +3649,12 @@\n             }\n             tempIndex = text.indexOf(searchList[i]);\n \n-            // see if we need to keep searching for this\n+            if (noMoreMatchesForReplIndex[i] || searchList[i] == null\n+\t\t\t\t\t|| searchList[i].length() == 0\n+\t\t\t\t\t|| replacementList[i] == null) {\n+\t\t\t\tcontinue;\n+\t\t\t}\n+\t\t\t// see if we need to keep searching for this\n             if (tempIndex == -1) {\n                 noMoreMatchesForReplIndex[i] = true;\n             } else {\n@@ -3671,13 +3676,6 @@\n         // get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n         int increase = 0;\n \n-        // count the replacement text elements that are larger than their corresponding text being replaced\n-        for (int i = 0; i < searchList.length; i++) {\n-            int greater = replacementList[i].length() - searchList[i].length();\n-            if (greater > 0) {\n-                increase += 3 * greater; // assume 3 matches\n-            }\n-        }\n         // have upper-bound at 20% increase, then let Java take over\n         increase = Math.min(increase, text.length() / 5);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3612, 
          "faulty": "if (text == null || text.length() == 0 || searchList == null || searchList.length == 0 || replacementList == null || replacementList.length == 0) {\n  return text;\n}", 
          "type": "InsertBefore", 
          "seed": "if (timeToLive < 0) {\n  throw new IllegalStateException(\"TimeToLive of \" + timeToLive + \" is less than 0: \"+ text);\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3654, 
          "faulty": "noMoreMatchesForReplIndex[i]=true;", 
          "type": "Delete", 
          "seed": "return text;"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3675, 
          "faulty": "for (int i=0; i < searchList.length; i++) {\n  int greater=replacementList[i].length() - searchList[i].length();\n  if (greater > 0) {\n    increase+=3 * greater;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (searchLength != replacementLength) {\n  throw new IllegalArgumentException(\"Search and Replace array lengths don't match: \" + searchLength + \" vs \"+ replacementLength);\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:12:49.793754110 -0500\n+++ /tmp/Arja_Defects4J_Lang_39/patches_x7iw/Patch_527/patched/tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:17:14.189639020 -0500\n@@ -3609,7 +3609,11 @@\n         // mchyzer Performance note: This creates very few new objects (one major goal)\n         // let me know if there are performance requests, we can create a harness to measure\n \n-        if (text == null || text.length() == 0 || searchList == null || \n+        if (timeToLive < 0) {\n+\t\t\tthrow new IllegalStateException(\"TimeToLive of \" + timeToLive\n+\t\t\t\t\t+ \" is less than 0: \" + text);\n+\t\t}\n+\t\tif (text == null || text.length() == 0 || searchList == null || \n             searchList.length == 0 || replacementList == null || replacementList.length == 0) \n         {\n             return text;\n@@ -3651,7 +3655,6 @@\n \n             // see if we need to keep searching for this\n             if (tempIndex == -1) {\n-                noMoreMatchesForReplIndex[i] = true;\n             } else {\n                 if (textIndex == -1 || tempIndex < textIndex) {\n                     textIndex = tempIndex;\n@@ -3671,13 +3674,6 @@\n         // get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n         int increase = 0;\n \n-        // count the replacement text elements that are larger than their corresponding text being replaced\n-        for (int i = 0; i < searchList.length; i++) {\n-            int greater = replacementList[i].length() - searchList[i].length();\n-            if (greater > 0) {\n-                increase += 3 * greater; // assume 3 matches\n-            }\n-        }\n         // have upper-bound at 20% increase, then let Java take over\n         increase = Math.min(increase, text.length() / 5);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3675, 
          "faulty": "for (int i=0; i < searchList.length; i++) {\n  int greater=replacementList[i].length() - searchList[i].length();\n  if (greater > 0) {\n    increase+=3 * greater;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (searchLength != replacementLength) {\n  throw new IllegalArgumentException(\"Search and Replace array lengths don't match: \" + searchLength + \" vs \"+ replacementLength);\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3619, 
          "faulty": "if (timeToLive < 0) {\n  throw new IllegalStateException(\"TimeToLive of \" + timeToLive + \" is less than 0: \"+ text);\n}", 
          "type": "Delete", 
          "seed": "if (text == null || text.length() == 0 || searchList == null || searchList.length == 0 || replacementList == null || replacementList.length == 0) {\n  return text;\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3627, 
          "faulty": "if (searchLength != replacementLength) {\n  throw new IllegalArgumentException(\"Search and Replace array lengths don't match: \" + searchLength + \" vs \"+ replacementLength);\n}", 
          "type": "InsertBefore", 
          "seed": "if (timeToLive < 0) {\n  throw new IllegalStateException(\"TimeToLive of \" + timeToLive + \" is less than 0: \"+ text);\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:12:49.793754110 -0500\n+++ /tmp/Arja_Defects4J_Lang_39/patches_x7iw/Patch_469/patched/tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:17:01.401644555 -0500\n@@ -3615,15 +3615,14 @@\n             return text;\n         }\n \n-        // if recursing, this shouldnt be less than 0\n-        if (timeToLive < 0) {\n-            throw new IllegalStateException(\"TimeToLive of \" + timeToLive + \" is less than 0: \" + text);\n-        }\n-\n         int searchLength = searchList.length;\n         int replacementLength = replacementList.length;\n \n-        // make sure lengths are ok, these need to be equal\n+        if (timeToLive < 0) {\n+\t\t\tthrow new IllegalStateException(\"TimeToLive of \" + timeToLive\n+\t\t\t\t\t+ \" is less than 0: \" + text);\n+\t\t}\n+\t\t// make sure lengths are ok, these need to be equal\n         if (searchLength != replacementLength) {\n             throw new IllegalArgumentException(\"Search and Replace array lengths don't match: \"\n                 + searchLength\n@@ -3671,13 +3670,6 @@\n         // get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n         int increase = 0;\n \n-        // count the replacement text elements that are larger than their corresponding text being replaced\n-        for (int i = 0; i < searchList.length; i++) {\n-            int greater = replacementList[i].length() - searchList[i].length();\n-            if (greater > 0) {\n-                increase += 3 * greater; // assume 3 matches\n-            }\n-        }\n         // have upper-bound at 20% increase, then let Java take over\n         increase = Math.min(increase, text.length() / 5);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3677, 
          "faulty": "if (greater > 0) {\n  increase+=3 * greater;\n}", 
          "type": "InsertBefore", 
          "seed": "break;"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3675, 
          "faulty": "for (int i=0; i < searchList.length; i++) {\n  int greater=replacementList[i].length() - searchList[i].length();\n  if (greater > 0) {\n    increase+=3 * greater;\n  }\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < searchLength; i++) {\n  if (noMoreMatchesForReplIndex[i] || searchList[i] == null || searchList[i].length() == 0 || replacementList[i] == null) {\n    continue;\n  }\n  tempIndex=text.indexOf(searchList[i]);\n  if (tempIndex == -1) {\n    noMoreMatchesForReplIndex[i]=true;\n  }\n else {\n    if (textIndex == -1 || tempIndex < textIndex) {\n      textIndex=tempIndex;\n      replaceIndex=i;\n    }\n  }\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3691, 
          "faulty": "buf.append(replacementList[replaceIndex]);", 
          "type": "InsertBefore", 
          "seed": "start=' ';"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:12:49.793754110 -0500\n+++ /tmp/Arja_Defects4J_Lang_39/patches_x7iw/Patch_1169/patched/tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:19:46.653573260 -0500\n@@ -3671,13 +3671,6 @@\n         // get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n         int increase = 0;\n \n-        // count the replacement text elements that are larger than their corresponding text being replaced\n-        for (int i = 0; i < searchList.length; i++) {\n-            int greater = replacementList[i].length() - searchList[i].length();\n-            if (greater > 0) {\n-                increase += 3 * greater; // assume 3 matches\n-            }\n-        }\n         // have upper-bound at 20% increase, then let Java take over\n         increase = Math.min(increase, text.length() / 5);\n \n@@ -3688,7 +3681,8 @@\n             for (int i = start; i < textIndex; i++) {\n                 buf.append(text.charAt(i));\n             }\n-            buf.append(replacementList[replaceIndex]);\n+            start = ' ';\n+\t\t\tbuf.append(replacementList[replaceIndex]);\n \n             start = textIndex + searchList[replaceIndex].length();\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3612, 
          "faulty": "if (text == null || text.length() == 0 || searchList == null || searchList.length == 0 || replacementList == null || replacementList.length == 0) {\n  return text;\n}", 
          "type": "InsertBefore", 
          "seed": "if (text == null || text.length() == 0 || searchList == null || searchList.length == 0 || replacementList == null || replacementList.length == 0) {\n  return text;\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3675, 
          "faulty": "for (int i=0; i < searchList.length; i++) {\n  int greater=replacementList[i].length() - searchList[i].length();\n  if (greater > 0) {\n    increase+=3 * greater;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (textIndex == -1) {\n  return text;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:12:49.793754110 -0500\n+++ /tmp/Arja_Defects4J_Lang_39/patches_x7iw/Patch_1708/patched/tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:23:09.777486275 -0500\n@@ -3609,7 +3609,12 @@\n         // mchyzer Performance note: This creates very few new objects (one major goal)\n         // let me know if there are performance requests, we can create a harness to measure\n \n-        if (text == null || text.length() == 0 || searchList == null || \n+        if (text == null || text.length() == 0 || searchList == null\n+\t\t\t\t|| searchList.length == 0 || replacementList == null\n+\t\t\t\t|| replacementList.length == 0) {\n+\t\t\treturn text;\n+\t\t}\n+\t\tif (text == null || text.length() == 0 || searchList == null || \n             searchList.length == 0 || replacementList == null || replacementList.length == 0) \n         {\n             return text;\n@@ -3671,13 +3676,6 @@\n         // get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n         int increase = 0;\n \n-        // count the replacement text elements that are larger than their corresponding text being replaced\n-        for (int i = 0; i < searchList.length; i++) {\n-            int greater = replacementList[i].length() - searchList[i].length();\n-            if (greater > 0) {\n-                increase += 3 * greater; // assume 3 matches\n-            }\n-        }\n         // have upper-bound at 20% increase, then let Java take over\n         increase = Math.min(increase, text.length() / 5);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3677, 
          "faulty": "if (greater > 0) {\n  increase+=3 * greater;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3675, 
          "faulty": "for (int i=0; i < searchList.length; i++) {\n  int greater=replacementList[i].length() - searchList[i].length();\n  if (greater > 0) {\n    increase+=3 * greater;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (searchLength != replacementLength) {\n  throw new IllegalArgumentException(\"Search and Replace array lengths don't match: \" + searchLength + \" vs \"+ replacementLength);\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3639, 
          "faulty": "int replaceIndex=-1;", 
          "type": "InsertBefore", 
          "seed": "if (timeToLive < 0) {\n  throw new IllegalStateException(\"TimeToLive of \" + timeToLive + \" is less than 0: \"+ text);\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:12:49.793754110 -0500\n+++ /tmp/Arja_Defects4J_Lang_39/patches_x7iw/Patch_1817/patched/tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:23:43.201472025 -0500\n@@ -3636,7 +3636,11 @@\n \n         // index on index that the match was found\n         int textIndex = -1;\n-        int replaceIndex = -1;\n+        if (timeToLive < 0) {\n+\t\t\tthrow new IllegalStateException(\"TimeToLive of \" + timeToLive\n+\t\t\t\t\t+ \" is less than 0: \" + text);\n+\t\t}\n+\t\tint replaceIndex = -1;\n         int tempIndex = -1;\n \n         // index of replace array that will replace the search string found\n@@ -3671,13 +3675,6 @@\n         // get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n         int increase = 0;\n \n-        // count the replacement text elements that are larger than their corresponding text being replaced\n-        for (int i = 0; i < searchList.length; i++) {\n-            int greater = replacementList[i].length() - searchList[i].length();\n-            if (greater > 0) {\n-                increase += 3 * greater; // assume 3 matches\n-            }\n-        }\n         // have upper-bound at 20% increase, then let Java take over\n         increase = Math.min(increase, text.length() / 5);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3669, 
          "faulty": "int start=0;", 
          "type": "InsertBefore", 
          "seed": "if (timeToLive < 0) {\n  throw new IllegalStateException(\"TimeToLive of \" + timeToLive + \" is less than 0: \"+ text);\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3675, 
          "faulty": "for (int i=0; i < searchList.length; i++) {\n  int greater=replacementList[i].length() - searchList[i].length();\n  if (greater > 0) {\n    increase+=3 * greater;\n  }\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < searchLength; i++) {\n  if (noMoreMatchesForReplIndex[i] || searchList[i] == null || searchList[i].length() == 0 || replacementList[i] == null) {\n    continue;\n  }\n  tempIndex=text.indexOf(searchList[i]);\n  if (tempIndex == -1) {\n    noMoreMatchesForReplIndex[i]=true;\n  }\n else {\n    if (textIndex == -1 || tempIndex < textIndex) {\n      textIndex=tempIndex;\n      replaceIndex=i;\n    }\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:12:49.793754110 -0500\n+++ /tmp/Arja_Defects4J_Lang_39/patches_x7iw/Patch_576/patched/tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:17:25.229634244 -0500\n@@ -3666,18 +3666,15 @@\n             return text;\n         }\n \n-        int start = 0;\n+        if (timeToLive < 0) {\n+\t\t\tthrow new IllegalStateException(\"TimeToLive of \" + timeToLive\n+\t\t\t\t\t+ \" is less than 0: \" + text);\n+\t\t}\n+\t\tint start = 0;\n \n         // get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n         int increase = 0;\n \n-        // count the replacement text elements that are larger than their corresponding text being replaced\n-        for (int i = 0; i < searchList.length; i++) {\n-            int greater = replacementList[i].length() - searchList[i].length();\n-            if (greater > 0) {\n-                increase += 3 * greater; // assume 3 matches\n-            }\n-        }\n         // have upper-bound at 20% increase, then let Java take over\n         increase = Math.min(increase, text.length() / 5);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3677, 
          "faulty": "if (greater > 0) {\n  increase+=3 * greater;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3675, 
          "faulty": "for (int i=0; i < searchList.length; i++) {\n  int greater=replacementList[i].length() - searchList[i].length();\n  if (greater > 0) {\n    increase+=3 * greater;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (searchLength != replacementLength) {\n  throw new IllegalArgumentException(\"Search and Replace array lengths don't match: \" + searchLength + \" vs \"+ replacementLength);\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:12:49.793754110 -0500\n+++ /tmp/Arja_Defects4J_Lang_39/patches_x7iw/Patch_475/patched/tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:17:02.629644023 -0500\n@@ -3671,13 +3671,6 @@\n         // get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n         int increase = 0;\n \n-        // count the replacement text elements that are larger than their corresponding text being replaced\n-        for (int i = 0; i < searchList.length; i++) {\n-            int greater = replacementList[i].length() - searchList[i].length();\n-            if (greater > 0) {\n-                increase += 3 * greater; // assume 3 matches\n-            }\n-        }\n         // have upper-bound at 20% increase, then let Java take over\n         increase = Math.min(increase, text.length() / 5);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3675, 
          "faulty": "for (int i=0; i < searchList.length; i++) {\n  int greater=replacementList[i].length() - searchList[i].length();\n  if (greater > 0) {\n    increase+=3 * greater;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (searchLength != replacementLength) {\n  throw new IllegalArgumentException(\"Search and Replace array lengths don't match: \" + searchLength + \" vs \"+ replacementLength);\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3727, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "start=' ';"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:12:49.793754110 -0500\n+++ /tmp/Arja_Defects4J_Lang_39/patches_x7iw/Patch_641/patched/tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:17:39.365628132 -0500\n@@ -3671,13 +3671,6 @@\n         // get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n         int increase = 0;\n \n-        // count the replacement text elements that are larger than their corresponding text being replaced\n-        for (int i = 0; i < searchList.length; i++) {\n-            int greater = replacementList[i].length() - searchList[i].length();\n-            if (greater > 0) {\n-                increase += 3 * greater; // assume 3 matches\n-            }\n-        }\n         // have upper-bound at 20% increase, then let Java take over\n         increase = Math.min(increase, text.length() / 5);\n \n@@ -3724,7 +3717,8 @@\n         }\n         String result = buf.toString();\n         if (!repeat) {\n-            return result;\n+            start = ' ';\n+\t\t\treturn result;\n         }\n \n         return replaceEach(result, searchList, replacementList, repeat, timeToLive - 1);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3675, 
          "faulty": "for (int i=0; i < searchList.length; i++) {\n  int greater=replacementList[i].length() - searchList[i].length();\n  if (greater > 0) {\n    increase+=3 * greater;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (timeToLive < 0) {\n  throw new IllegalStateException(\"TimeToLive of \" + timeToLive + \" is less than 0: \"+ text);\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3627, 
          "faulty": "if (searchLength != replacementLength) {\n  throw new IllegalArgumentException(\"Search and Replace array lengths don't match: \" + searchLength + \" vs \"+ replacementLength);\n}", 
          "type": "InsertBefore", 
          "seed": "if (text == null || text.length() == 0 || searchList == null || searchList.length == 0 || replacementList == null || replacementList.length == 0) {\n  return text;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:12:49.793754110 -0500\n+++ /tmp/Arja_Defects4J_Lang_39/patches_x7iw/Patch_530/patched/tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:17:14.665638814 -0500\n@@ -3623,7 +3623,12 @@\n         int searchLength = searchList.length;\n         int replacementLength = replacementList.length;\n \n-        // make sure lengths are ok, these need to be equal\n+        if (text == null || text.length() == 0 || searchList == null\n+\t\t\t\t|| searchList.length == 0 || replacementList == null\n+\t\t\t\t|| replacementList.length == 0) {\n+\t\t\treturn text;\n+\t\t}\n+\t\t// make sure lengths are ok, these need to be equal\n         if (searchLength != replacementLength) {\n             throw new IllegalArgumentException(\"Search and Replace array lengths don't match: \"\n                 + searchLength\n@@ -3671,13 +3676,6 @@\n         // get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n         int increase = 0;\n \n-        // count the replacement text elements that are larger than their corresponding text being replaced\n-        for (int i = 0; i < searchList.length; i++) {\n-            int greater = replacementList[i].length() - searchList[i].length();\n-            if (greater > 0) {\n-                increase += 3 * greater; // assume 3 matches\n-            }\n-        }\n         // have upper-bound at 20% increase, then let Java take over\n         increase = Math.min(increase, text.length() / 5);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3677, 
          "faulty": "if (greater > 0) {\n  increase+=3 * greater;\n}", 
          "type": "InsertBefore", 
          "seed": "start=++i;"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3675, 
          "faulty": "for (int i=0; i < searchList.length; i++) {\n  int greater=replacementList[i].length() - searchList[i].length();\n  if (greater > 0) {\n    increase+=3 * greater;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (searchLength != replacementLength) {\n  throw new IllegalArgumentException(\"Search and Replace array lengths don't match: \" + searchLength + \" vs \"+ replacementLength);\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:12:49.793754110 -0500\n+++ /tmp/Arja_Defects4J_Lang_39/patches_x7iw/Patch_1369/patched/tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:20:39.837550419 -0500\n@@ -3671,13 +3671,6 @@\n         // get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n         int increase = 0;\n \n-        // count the replacement text elements that are larger than their corresponding text being replaced\n-        for (int i = 0; i < searchList.length; i++) {\n-            int greater = replacementList[i].length() - searchList[i].length();\n-            if (greater > 0) {\n-                increase += 3 * greater; // assume 3 matches\n-            }\n-        }\n         // have upper-bound at 20% increase, then let Java take over\n         increase = Math.min(increase, text.length() / 5);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3675, 
          "faulty": "for (int i=0; i < searchList.length; i++) {\n  int greater=replacementList[i].length() - searchList[i].length();\n  if (greater > 0) {\n    increase+=3 * greater;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (searchLength != replacementLength) {\n  throw new IllegalArgumentException(\"Search and Replace array lengths don't match: \" + searchLength + \" vs \"+ replacementLength);\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3695, 
          "faulty": "textIndex=-1;", 
          "type": "InsertBefore", 
          "seed": "increase=Math.min(increase,text.length() / 5);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3644, 
          "faulty": "for (int i=0; i < searchLength; i++) {\n  if (noMoreMatchesForReplIndex[i] || searchList[i] == null || searchList[i].length() == 0 || replacementList[i] == null) {\n    continue;\n  }\n  tempIndex=text.indexOf(searchList[i]);\n  if (tempIndex == -1) {\n    noMoreMatchesForReplIndex[i]=true;\n  }\n else {\n    if (textIndex == -1 || tempIndex < textIndex) {\n      textIndex=tempIndex;\n      replaceIndex=i;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "if (text == null || text.length() == 0 || searchList == null || searchList.length == 0 || replacementList == null || replacementList.length == 0) {\n  return text;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:12:49.793754110 -0500\n+++ /tmp/Arja_Defects4J_Lang_39/patches_x7iw/Patch_883/patched/tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:18:33.269604859 -0500\n@@ -3639,7 +3639,12 @@\n         int replaceIndex = -1;\n         int tempIndex = -1;\n \n-        // index of replace array that will replace the search string found\n+        if (text == null || text.length() == 0 || searchList == null\n+\t\t\t\t|| searchList.length == 0 || replacementList == null\n+\t\t\t\t|| replacementList.length == 0) {\n+\t\t\treturn text;\n+\t\t}\n+\t\t// index of replace array that will replace the search string found\n         // NOTE: logic duplicated below START\n         for (int i = 0; i < searchLength; i++) {\n             if (noMoreMatchesForReplIndex[i] || searchList[i] == null || \n@@ -3671,13 +3676,6 @@\n         // get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n         int increase = 0;\n \n-        // count the replacement text elements that are larger than their corresponding text being replaced\n-        for (int i = 0; i < searchList.length; i++) {\n-            int greater = replacementList[i].length() - searchList[i].length();\n-            if (greater > 0) {\n-                increase += 3 * greater; // assume 3 matches\n-            }\n-        }\n         // have upper-bound at 20% increase, then let Java take over\n         increase = Math.min(increase, text.length() / 5);\n \n@@ -3692,7 +3690,8 @@\n \n             start = textIndex + searchList[replaceIndex].length();\n \n-            textIndex = -1;\n+            increase = Math.min(increase, text.length() / 5);\n+\t\t\ttextIndex = -1;\n             replaceIndex = -1;\n             tempIndex = -1;\n             // find the next earliest match\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3675, 
          "faulty": "for (int i=0; i < searchList.length; i++) {\n  int greater=replacementList[i].length() - searchList[i].length();\n  if (greater > 0) {\n    increase+=3 * greater;\n  }\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < searchLength; i++) {\n  if (noMoreMatchesForReplIndex[i] || searchList[i] == null || searchList[i].length() == 0 || replacementList[i] == null) {\n    continue;\n  }\n  tempIndex=text.indexOf(searchList[i]);\n  if (tempIndex == -1) {\n    noMoreMatchesForReplIndex[i]=true;\n  }\n else {\n    if (textIndex == -1 || tempIndex < textIndex) {\n      textIndex=tempIndex;\n      replaceIndex=i;\n    }\n  }\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3644, 
          "faulty": "for (int i=0; i < searchLength; i++) {\n  if (noMoreMatchesForReplIndex[i] || searchList[i] == null || searchList[i].length() == 0 || replacementList[i] == null) {\n    continue;\n  }\n  tempIndex=text.indexOf(searchList[i]);\n  if (tempIndex == -1) {\n    noMoreMatchesForReplIndex[i]=true;\n  }\n else {\n    if (textIndex == -1 || tempIndex < textIndex) {\n      textIndex=tempIndex;\n      replaceIndex=i;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "replaceIndex=-1;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:12:49.793754110 -0500\n+++ /tmp/Arja_Defects4J_Lang_39/patches_x7iw/Patch_405/patched/tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:16:42.381652793 -0500\n@@ -3639,7 +3639,8 @@\n         int replaceIndex = -1;\n         int tempIndex = -1;\n \n-        // index of replace array that will replace the search string found\n+        replaceIndex = -1;\n+\t\t// index of replace array that will replace the search string found\n         // NOTE: logic duplicated below START\n         for (int i = 0; i < searchLength; i++) {\n             if (noMoreMatchesForReplIndex[i] || searchList[i] == null || \n@@ -3671,13 +3672,6 @@\n         // get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n         int increase = 0;\n \n-        // count the replacement text elements that are larger than their corresponding text being replaced\n-        for (int i = 0; i < searchList.length; i++) {\n-            int greater = replacementList[i].length() - searchList[i].length();\n-            if (greater > 0) {\n-                increase += 3 * greater; // assume 3 matches\n-            }\n-        }\n         // have upper-bound at 20% increase, then let Java take over\n         increase = Math.min(increase, text.length() / 5);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3612, 
          "faulty": "if (text == null || text.length() == 0 || searchList == null || searchList.length == 0 || replacementList == null || replacementList.length == 0) {\n  return text;\n}", 
          "type": "InsertBefore", 
          "seed": "if (timeToLive < 0) {\n  throw new IllegalStateException(\"TimeToLive of \" + timeToLive + \" is less than 0: \"+ text);\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3675, 
          "faulty": "for (int i=0; i < searchList.length; i++) {\n  int greater=replacementList[i].length() - searchList[i].length();\n  if (greater > 0) {\n    increase+=3 * greater;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (searchLength != replacementLength) {\n  throw new IllegalArgumentException(\"Search and Replace array lengths don't match: \" + searchLength + \" vs \"+ replacementLength);\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3693, 
          "faulty": "start=textIndex + searchList[replaceIndex].length();", 
          "type": "InsertBefore", 
          "seed": "if (start < 0) {\n  start=0;\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3697, 
          "faulty": "tempIndex=-1;", 
          "type": "Replace", 
          "seed": "if (timeToLive < 0) {\n  throw new IllegalStateException(\"TimeToLive of \" + timeToLive + \" is less than 0: \"+ text);\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:12:49.793754110 -0500\n+++ /tmp/Arja_Defects4J_Lang_39/patches_x7iw/Patch_1829/patched/tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:23:45.905470873 -0500\n@@ -3609,7 +3609,11 @@\n         // mchyzer Performance note: This creates very few new objects (one major goal)\n         // let me know if there are performance requests, we can create a harness to measure\n \n-        if (text == null || text.length() == 0 || searchList == null || \n+        if (timeToLive < 0) {\n+\t\t\tthrow new IllegalStateException(\"TimeToLive of \" + timeToLive\n+\t\t\t\t\t+ \" is less than 0: \" + text);\n+\t\t}\n+\t\tif (text == null || text.length() == 0 || searchList == null || \n             searchList.length == 0 || replacementList == null || replacementList.length == 0) \n         {\n             return text;\n@@ -3671,13 +3675,6 @@\n         // get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n         int increase = 0;\n \n-        // count the replacement text elements that are larger than their corresponding text being replaced\n-        for (int i = 0; i < searchList.length; i++) {\n-            int greater = replacementList[i].length() - searchList[i].length();\n-            if (greater > 0) {\n-                increase += 3 * greater; // assume 3 matches\n-            }\n-        }\n         // have upper-bound at 20% increase, then let Java take over\n         increase = Math.min(increase, text.length() / 5);\n \n@@ -3690,11 +3687,17 @@\n             }\n             buf.append(replacementList[replaceIndex]);\n \n-            start = textIndex + searchList[replaceIndex].length();\n+            if (start < 0) {\n+\t\t\t\tstart = 0;\n+\t\t\t}\n+\t\t\tstart = textIndex + searchList[replaceIndex].length();\n \n             textIndex = -1;\n             replaceIndex = -1;\n-            tempIndex = -1;\n+            if (timeToLive < 0) {\n+\t\t\t\tthrow new IllegalStateException(\"TimeToLive of \" + timeToLive\n+\t\t\t\t\t\t+ \" is less than 0: \" + text);\n+\t\t\t}\n             // find the next earliest match\n             // NOTE: logic mostly duplicated above START\n             for (int i = 0; i < searchLength; i++) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3675, 
          "faulty": "for (int i=0; i < searchList.length; i++) {\n  int greater=replacementList[i].length() - searchList[i].length();\n  if (greater > 0) {\n    increase+=3 * greater;\n  }\n}", 
          "type": "Replace", 
          "seed": "start++;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:12:49.793754110 -0500\n+++ /tmp/Arja_Defects4J_Lang_39/patches_x7iw/Patch_1659/patched/tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:22:58.493491090 -0500\n@@ -3671,13 +3671,7 @@\n         // get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n         int increase = 0;\n \n-        // count the replacement text elements that are larger than their corresponding text being replaced\n-        for (int i = 0; i < searchList.length; i++) {\n-            int greater = replacementList[i].length() - searchList[i].length();\n-            if (greater > 0) {\n-                increase += 3 * greater; // assume 3 matches\n-            }\n-        }\n+        start++;\n         // have upper-bound at 20% increase, then let Java take over\n         increase = Math.min(increase, text.length() / 5);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3675, 
          "faulty": "for (int i=0; i < searchList.length; i++) {\n  int greater=replacementList[i].length() - searchList[i].length();\n  if (greater > 0) {\n    increase+=3 * greater;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (searchLength != replacementLength) {\n  throw new IllegalArgumentException(\"Search and Replace array lengths don't match: \" + searchLength + \" vs \"+ replacementLength);\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3627, 
          "faulty": "if (searchLength != replacementLength) {\n  throw new IllegalArgumentException(\"Search and Replace array lengths don't match: \" + searchLength + \" vs \"+ replacementLength);\n}", 
          "type": "Replace", 
          "seed": "if (text == null || text.length() == 0 || searchList == null || searchList.length == 0 || replacementList == null || replacementList.length == 0) {\n  return text;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:12:49.793754110 -0500\n+++ /tmp/Arja_Defects4J_Lang_39/patches_x7iw/Patch_222/patched/tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:15:32.361683180 -0500\n@@ -3623,13 +3623,11 @@\n         int searchLength = searchList.length;\n         int replacementLength = replacementList.length;\n \n-        // make sure lengths are ok, these need to be equal\n-        if (searchLength != replacementLength) {\n-            throw new IllegalArgumentException(\"Search and Replace array lengths don't match: \"\n-                + searchLength\n-                + \" vs \"\n-                + replacementLength);\n-        }\n+        if (text == null || text.length() == 0 || searchList == null\n+\t\t\t\t|| searchList.length == 0 || replacementList == null\n+\t\t\t\t|| replacementList.length == 0) {\n+\t\t\treturn text;\n+\t\t}\n \n         // keep track of which still have matches\n         boolean[] noMoreMatchesForReplIndex = new boolean[searchLength];\n@@ -3671,13 +3669,6 @@\n         // get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n         int increase = 0;\n \n-        // count the replacement text elements that are larger than their corresponding text being replaced\n-        for (int i = 0; i < searchList.length; i++) {\n-            int greater = replacementList[i].length() - searchList[i].length();\n-            if (greater > 0) {\n-                increase += 3 * greater; // assume 3 matches\n-            }\n-        }\n         // have upper-bound at 20% increase, then let Java take over\n         increase = Math.min(increase, text.length() / 5);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3675, 
          "faulty": "for (int i=0; i < searchList.length; i++) {\n  int greater=replacementList[i].length() - searchList[i].length();\n  if (greater > 0) {\n    increase+=3 * greater;\n  }\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < searchLength; i++) {\n  if (noMoreMatchesForReplIndex[i] || searchList[i] == null || searchList[i].length() == 0 || replacementList[i] == null) {\n    continue;\n  }\n  tempIndex=text.indexOf(searchList[i]);\n  if (tempIndex == -1) {\n    noMoreMatchesForReplIndex[i]=true;\n  }\n else {\n    if (textIndex == -1 || tempIndex < textIndex) {\n      textIndex=tempIndex;\n      replaceIndex=i;\n    }\n  }\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3635, 
          "faulty": "boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];", 
          "type": "InsertBefore", 
          "seed": "if (searchLength != replacementLength) {\n  throw new IllegalArgumentException(\"Search and Replace array lengths don't match: \" + searchLength + \" vs \"+ replacementLength);\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3672, 
          "faulty": "int increase=0;", 
          "type": "InsertBefore", 
          "seed": "for (int i=0; i < searchLength; i++) {\n  if (noMoreMatchesForReplIndex[i] || searchList[i] == null || searchList[i].length() == 0 || replacementList[i] == null) {\n    continue;\n  }\n  tempIndex=text.indexOf(searchList[i]);\n  if (tempIndex == -1) {\n    noMoreMatchesForReplIndex[i]=true;\n  }\n else {\n    if (textIndex == -1 || tempIndex < textIndex) {\n      textIndex=tempIndex;\n      replaceIndex=i;\n    }\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:12:49.793754110 -0500\n+++ /tmp/Arja_Defects4J_Lang_39/patches_x7iw/Patch_1148/patched/tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:19:42.469575059 -0500\n@@ -3631,7 +3631,12 @@\n                 + replacementLength);\n         }\n \n-        // keep track of which still have matches\n+        if (searchLength != replacementLength) {\n+\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\"Search and Replace array lengths don't match: \"\n+\t\t\t\t\t\t\t+ searchLength + \" vs \" + replacementLength);\n+\t\t}\n+\t\t// keep track of which still have matches\n         boolean[] noMoreMatchesForReplIndex = new boolean[searchLength];\n \n         // index on index that the match was found\n@@ -3668,16 +3673,25 @@\n \n         int start = 0;\n \n-        // get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n+        for (int i = 0; i < searchLength; i++) {\n+\t\t\tif (noMoreMatchesForReplIndex[i] || searchList[i] == null\n+\t\t\t\t\t|| searchList[i].length() == 0\n+\t\t\t\t\t|| replacementList[i] == null) {\n+\t\t\t\tcontinue;\n+\t\t\t}\n+\t\t\ttempIndex = text.indexOf(searchList[i]);\n+\t\t\tif (tempIndex == -1) {\n+\t\t\t\tnoMoreMatchesForReplIndex[i] = true;\n+\t\t\t} else {\n+\t\t\t\tif (textIndex == -1 || tempIndex < textIndex) {\n+\t\t\t\t\ttextIndex = tempIndex;\n+\t\t\t\t\treplaceIndex = i;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\t// get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n         int increase = 0;\n \n-        // count the replacement text elements that are larger than their corresponding text being replaced\n-        for (int i = 0; i < searchList.length; i++) {\n-            int greater = replacementList[i].length() - searchList[i].length();\n-            if (greater > 0) {\n-                increase += 3 * greater; // assume 3 matches\n-            }\n-        }\n         // have upper-bound at 20% increase, then let Java take over\n         increase = Math.min(increase, text.length() / 5);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3624, 
          "faulty": "int replacementLength=replacementList.length;", 
          "type": "InsertBefore", 
          "seed": "if (text == null || text.length() == 0 || searchList == null || searchList.length == 0 || replacementList == null || replacementList.length == 0) {\n  return text;\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3675, 
          "faulty": "for (int i=0; i < searchList.length; i++) {\n  int greater=replacementList[i].length() - searchList[i].length();\n  if (greater > 0) {\n    increase+=3 * greater;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (searchLength != replacementLength) {\n  throw new IllegalArgumentException(\"Search and Replace array lengths don't match: \" + searchLength + \" vs \"+ replacementLength);\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:12:49.793754110 -0500\n+++ /tmp/Arja_Defects4J_Lang_39/patches_x7iw/Patch_636/patched/tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:17:38.437628533 -0500\n@@ -3621,7 +3621,12 @@\n         }\n \n         int searchLength = searchList.length;\n-        int replacementLength = replacementList.length;\n+        if (text == null || text.length() == 0 || searchList == null\n+\t\t\t\t|| searchList.length == 0 || replacementList == null\n+\t\t\t\t|| replacementList.length == 0) {\n+\t\t\treturn text;\n+\t\t}\n+\t\tint replacementLength = replacementList.length;\n \n         // make sure lengths are ok, these need to be equal\n         if (searchLength != replacementLength) {\n@@ -3671,13 +3676,6 @@\n         // get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n         int increase = 0;\n \n-        // count the replacement text elements that are larger than their corresponding text being replaced\n-        for (int i = 0; i < searchList.length; i++) {\n-            int greater = replacementList[i].length() - searchList[i].length();\n-            if (greater > 0) {\n-                increase += 3 * greater; // assume 3 matches\n-            }\n-        }\n         // have upper-bound at 20% increase, then let Java take over\n         increase = Math.min(increase, text.length() / 5);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3675, 
          "faulty": "for (int i=0; i < searchList.length; i++) {\n  int greater=replacementList[i].length() - searchList[i].length();\n  if (greater > 0) {\n    increase+=3 * greater;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (searchLength != replacementLength) {\n  throw new IllegalArgumentException(\"Search and Replace array lengths don't match: \" + searchLength + \" vs \"+ replacementLength);\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3682, 
          "faulty": "increase=Math.min(increase,text.length() / 5);", 
          "type": "InsertBefore", 
          "seed": "if (text == null || text.length() == 0 || searchList == null || searchList.length == 0 || replacementList == null || replacementList.length == 0) {\n  return text;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:12:49.793754110 -0500\n+++ /tmp/Arja_Defects4J_Lang_39/patches_x7iw/Patch_600/patched/tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:17:30.553631942 -0500\n@@ -3671,14 +3671,12 @@\n         // get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n         int increase = 0;\n \n-        // count the replacement text elements that are larger than their corresponding text being replaced\n-        for (int i = 0; i < searchList.length; i++) {\n-            int greater = replacementList[i].length() - searchList[i].length();\n-            if (greater > 0) {\n-                increase += 3 * greater; // assume 3 matches\n-            }\n-        }\n-        // have upper-bound at 20% increase, then let Java take over\n+        if (text == null || text.length() == 0 || searchList == null\n+\t\t\t\t|| searchList.length == 0 || replacementList == null\n+\t\t\t\t|| replacementList.length == 0) {\n+\t\t\treturn text;\n+\t\t}\n+\t\t// have upper-bound at 20% increase, then let Java take over\n         increase = Math.min(increase, text.length() / 5);\n \n         StringBuilder buf = new StringBuilder(text.length() + increase);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3675, 
          "faulty": "for (int i=0; i < searchList.length; i++) {\n  int greater=replacementList[i].length() - searchList[i].length();\n  if (greater > 0) {\n    increase+=3 * greater;\n  }\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < searchLength; i++) {\n  if (noMoreMatchesForReplIndex[i] || searchList[i] == null || searchList[i].length() == 0 || replacementList[i] == null) {\n    continue;\n  }\n  tempIndex=text.indexOf(searchList[i]);\n  if (tempIndex == -1) {\n    noMoreMatchesForReplIndex[i]=true;\n  }\n else {\n    if (textIndex == -1 || tempIndex < textIndex) {\n      textIndex=tempIndex;\n      replaceIndex=i;\n    }\n  }\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3684, 
          "faulty": "StringBuilder buf=new StringBuilder(text.length() + increase);", 
          "type": "Replace", 
          "seed": "StringBuilder buf=new StringBuilder(32);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:12:49.793754110 -0500\n+++ /tmp/Arja_Defects4J_Lang_39/patches_x7iw/Patch_1451/patched/tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:21:04.401539885 -0500\n@@ -3671,17 +3671,10 @@\n         // get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n         int increase = 0;\n \n-        // count the replacement text elements that are larger than their corresponding text being replaced\n-        for (int i = 0; i < searchList.length; i++) {\n-            int greater = replacementList[i].length() - searchList[i].length();\n-            if (greater > 0) {\n-                increase += 3 * greater; // assume 3 matches\n-            }\n-        }\n         // have upper-bound at 20% increase, then let Java take over\n         increase = Math.min(increase, text.length() / 5);\n \n-        StringBuilder buf = new StringBuilder(text.length() + increase);\n+        StringBuilder buf = new StringBuilder(32);\n \n         while (textIndex != -1) {\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3669, 
          "faulty": "int start=0;", 
          "type": "InsertBefore", 
          "seed": "if (timeToLive < 0) {\n  throw new IllegalStateException(\"TimeToLive of \" + timeToLive + \" is less than 0: \"+ text);\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3675, 
          "faulty": "for (int i=0; i < searchList.length; i++) {\n  int greater=replacementList[i].length() - searchList[i].length();\n  if (greater > 0) {\n    increase+=3 * greater;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (searchLength != replacementLength) {\n  throw new IllegalArgumentException(\"Search and Replace array lengths don't match: \" + searchLength + \" vs \"+ replacementLength);\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3672, 
          "faulty": "int increase=0;", 
          "type": "InsertBefore", 
          "seed": "for (int i=0; i < searchLength; i++) {\n  if (noMoreMatchesForReplIndex[i] || searchList[i] == null || searchList[i].length() == 0 || replacementList[i] == null) {\n    continue;\n  }\n  tempIndex=text.indexOf(searchList[i]);\n  if (tempIndex == -1) {\n    noMoreMatchesForReplIndex[i]=true;\n  }\n else {\n    if (textIndex == -1 || tempIndex < textIndex) {\n      textIndex=tempIndex;\n      replaceIndex=i;\n    }\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:12:49.793754110 -0500\n+++ /tmp/Arja_Defects4J_Lang_39/patches_x7iw/Patch_249/patched/tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:15:38.781680390 -0500\n@@ -3666,18 +3666,31 @@\n             return text;\n         }\n \n-        int start = 0;\n+        if (timeToLive < 0) {\n+\t\t\tthrow new IllegalStateException(\"TimeToLive of \" + timeToLive\n+\t\t\t\t\t+ \" is less than 0: \" + text);\n+\t\t}\n+\t\tint start = 0;\n \n-        // get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n+        for (int i = 0; i < searchLength; i++) {\n+\t\t\tif (noMoreMatchesForReplIndex[i] || searchList[i] == null\n+\t\t\t\t\t|| searchList[i].length() == 0\n+\t\t\t\t\t|| replacementList[i] == null) {\n+\t\t\t\tcontinue;\n+\t\t\t}\n+\t\t\ttempIndex = text.indexOf(searchList[i]);\n+\t\t\tif (tempIndex == -1) {\n+\t\t\t\tnoMoreMatchesForReplIndex[i] = true;\n+\t\t\t} else {\n+\t\t\t\tif (textIndex == -1 || tempIndex < textIndex) {\n+\t\t\t\t\ttextIndex = tempIndex;\n+\t\t\t\t\treplaceIndex = i;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\t// get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n         int increase = 0;\n \n-        // count the replacement text elements that are larger than their corresponding text being replaced\n-        for (int i = 0; i < searchList.length; i++) {\n-            int greater = replacementList[i].length() - searchList[i].length();\n-            if (greater > 0) {\n-                increase += 3 * greater; // assume 3 matches\n-            }\n-        }\n         // have upper-bound at 20% increase, then let Java take over\n         increase = Math.min(increase, text.length() / 5);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3654, 
          "faulty": "noMoreMatchesForReplIndex[i]=true;", 
          "type": "Replace", 
          "seed": "if (timeToLive < 0) {\n  throw new IllegalStateException(\"TimeToLive of \" + timeToLive + \" is less than 0: \"+ text);\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3675, 
          "faulty": "for (int i=0; i < searchList.length; i++) {\n  int greater=replacementList[i].length() - searchList[i].length();\n  if (greater > 0) {\n    increase+=3 * greater;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (timeToLive < 0) {\n  throw new IllegalStateException(\"TimeToLive of \" + timeToLive + \" is less than 0: \"+ text);\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:12:49.793754110 -0500\n+++ /tmp/Arja_Defects4J_Lang_39/patches_x7iw/Patch_1400/patched/tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:20:47.097547304 -0500\n@@ -3651,7 +3651,10 @@\n \n             // see if we need to keep searching for this\n             if (tempIndex == -1) {\n-                noMoreMatchesForReplIndex[i] = true;\n+                if (timeToLive < 0) {\n+\t\t\t\t\tthrow new IllegalStateException(\"TimeToLive of \"\n+\t\t\t\t\t\t\t+ timeToLive + \" is less than 0: \" + text);\n+\t\t\t\t}\n             } else {\n                 if (textIndex == -1 || tempIndex < textIndex) {\n                     textIndex = tempIndex;\n@@ -3671,13 +3674,6 @@\n         // get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n         int increase = 0;\n \n-        // count the replacement text elements that are larger than their corresponding text being replaced\n-        for (int i = 0; i < searchList.length; i++) {\n-            int greater = replacementList[i].length() - searchList[i].length();\n-            if (greater > 0) {\n-                increase += 3 * greater; // assume 3 matches\n-            }\n-        }\n         // have upper-bound at 20% increase, then let Java take over\n         increase = Math.min(increase, text.length() / 5);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3675, 
          "faulty": "for (int i=0; i < searchList.length; i++) {\n  int greater=replacementList[i].length() - searchList[i].length();\n  if (greater > 0) {\n    increase+=3 * greater;\n  }\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < searchLength; i++) {\n  if (noMoreMatchesForReplIndex[i] || searchList[i] == null || searchList[i].length() == 0 || replacementList[i] == null) {\n    continue;\n  }\n  tempIndex=text.indexOf(searchList[i]);\n  if (tempIndex == -1) {\n    noMoreMatchesForReplIndex[i]=true;\n  }\n else {\n    if (textIndex == -1 || tempIndex < textIndex) {\n      textIndex=tempIndex;\n      replaceIndex=i;\n    }\n  }\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3727, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "if (searchLength != replacementLength) {\n  throw new IllegalArgumentException(\"Search and Replace array lengths don't match: \" + searchLength + \" vs \"+ replacementLength);\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:12:49.793754110 -0500\n+++ /tmp/Arja_Defects4J_Lang_39/patches_x7iw/Patch_679/patched/tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:17:47.445624640 -0500\n@@ -3671,13 +3671,6 @@\n         // get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n         int increase = 0;\n \n-        // count the replacement text elements that are larger than their corresponding text being replaced\n-        for (int i = 0; i < searchList.length; i++) {\n-            int greater = replacementList[i].length() - searchList[i].length();\n-            if (greater > 0) {\n-                increase += 3 * greater; // assume 3 matches\n-            }\n-        }\n         // have upper-bound at 20% increase, then let Java take over\n         increase = Math.min(increase, text.length() / 5);\n \n@@ -3724,7 +3717,12 @@\n         }\n         String result = buf.toString();\n         if (!repeat) {\n-            return result;\n+            if (searchLength != replacementLength) {\n+\t\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\t\"Search and Replace array lengths don't match: \"\n+\t\t\t\t\t\t\t\t+ searchLength + \" vs \" + replacementLength);\n+\t\t\t}\n+\t\t\treturn result;\n         }\n \n         return replaceEach(result, searchList, replacementList, repeat, timeToLive - 1);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3675, 
          "faulty": "for (int i=0; i < searchList.length; i++) {\n  int greater=replacementList[i].length() - searchList[i].length();\n  if (greater > 0) {\n    increase+=3 * greater;\n  }\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < searchLength; i++) {\n  if (noMoreMatchesForReplIndex[i] || searchList[i] == null || searchList[i].length() == 0 || replacementList[i] == null) {\n    continue;\n  }\n  tempIndex=text.indexOf(searchList[i]);\n  if (tempIndex == -1) {\n    noMoreMatchesForReplIndex[i]=true;\n  }\n else {\n    if (textIndex == -1 || tempIndex < textIndex) {\n      textIndex=tempIndex;\n      replaceIndex=i;\n    }\n  }\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3627, 
          "faulty": "if (searchLength != replacementLength) {\n  throw new IllegalArgumentException(\"Search and Replace array lengths don't match: \" + searchLength + \" vs \"+ replacementLength);\n}", 
          "type": "Delete", 
          "seed": "if (text == null || text.length() == 0 || searchList == null || searchList.length == 0 || replacementList == null || replacementList.length == 0) {\n  return text;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:12:49.793754110 -0500\n+++ /tmp/Arja_Defects4J_Lang_39/patches_x7iw/Patch_501/patched/tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:17:08.333641554 -0500\n@@ -3623,14 +3623,6 @@\n         int searchLength = searchList.length;\n         int replacementLength = replacementList.length;\n \n-        // make sure lengths are ok, these need to be equal\n-        if (searchLength != replacementLength) {\n-            throw new IllegalArgumentException(\"Search and Replace array lengths don't match: \"\n-                + searchLength\n-                + \" vs \"\n-                + replacementLength);\n-        }\n-\n         // keep track of which still have matches\n         boolean[] noMoreMatchesForReplIndex = new boolean[searchLength];\n \n@@ -3671,13 +3663,6 @@\n         // get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n         int increase = 0;\n \n-        // count the replacement text elements that are larger than their corresponding text being replaced\n-        for (int i = 0; i < searchList.length; i++) {\n-            int greater = replacementList[i].length() - searchList[i].length();\n-            if (greater > 0) {\n-                increase += 3 * greater; // assume 3 matches\n-            }\n-        }\n         // have upper-bound at 20% increase, then let Java take over\n         increase = Math.min(increase, text.length() / 5);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3675, 
          "faulty": "for (int i=0; i < searchList.length; i++) {\n  int greater=replacementList[i].length() - searchList[i].length();\n  if (greater > 0) {\n    increase+=3 * greater;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (searchLength != replacementLength) {\n  throw new IllegalArgumentException(\"Search and Replace array lengths don't match: \" + searchLength + \" vs \"+ replacementLength);\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3727, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "increase=(increase < 0 ? 0 : increase);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3672, 
          "faulty": "int increase=0;", 
          "type": "InsertBefore", 
          "seed": "for (int i=0; i < searchLength; i++) {\n  if (noMoreMatchesForReplIndex[i] || searchList[i] == null || searchList[i].length() == 0 || replacementList[i] == null) {\n    continue;\n  }\n  tempIndex=text.indexOf(searchList[i]);\n  if (tempIndex == -1) {\n    noMoreMatchesForReplIndex[i]=true;\n  }\n else {\n    if (textIndex == -1 || tempIndex < textIndex) {\n      textIndex=tempIndex;\n      replaceIndex=i;\n    }\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:12:49.793754110 -0500\n+++ /tmp/Arja_Defects4J_Lang_39/patches_x7iw/Patch_294/patched/tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:15:54.877673398 -0500\n@@ -3668,16 +3668,25 @@\n \n         int start = 0;\n \n-        // get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n+        for (int i = 0; i < searchLength; i++) {\n+\t\t\tif (noMoreMatchesForReplIndex[i] || searchList[i] == null\n+\t\t\t\t\t|| searchList[i].length() == 0\n+\t\t\t\t\t|| replacementList[i] == null) {\n+\t\t\t\tcontinue;\n+\t\t\t}\n+\t\t\ttempIndex = text.indexOf(searchList[i]);\n+\t\t\tif (tempIndex == -1) {\n+\t\t\t\tnoMoreMatchesForReplIndex[i] = true;\n+\t\t\t} else {\n+\t\t\t\tif (textIndex == -1 || tempIndex < textIndex) {\n+\t\t\t\t\ttextIndex = tempIndex;\n+\t\t\t\t\treplaceIndex = i;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\t// get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n         int increase = 0;\n \n-        // count the replacement text elements that are larger than their corresponding text being replaced\n-        for (int i = 0; i < searchList.length; i++) {\n-            int greater = replacementList[i].length() - searchList[i].length();\n-            if (greater > 0) {\n-                increase += 3 * greater; // assume 3 matches\n-            }\n-        }\n         // have upper-bound at 20% increase, then let Java take over\n         increase = Math.min(increase, text.length() / 5);\n \n@@ -3724,7 +3733,8 @@\n         }\n         String result = buf.toString();\n         if (!repeat) {\n-            return result;\n+            increase = (increase < 0 ? 0 : increase);\n+\t\t\treturn result;\n         }\n \n         return replaceEach(result, searchList, replacementList, repeat, timeToLive - 1);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3675, 
          "faulty": "for (int i=0; i < searchList.length; i++) {\n  int greater=replacementList[i].length() - searchList[i].length();\n  if (greater > 0) {\n    increase+=3 * greater;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (searchLength != replacementLength) {\n  throw new IllegalArgumentException(\"Search and Replace array lengths don't match: \" + searchLength + \" vs \"+ replacementLength);\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3672, 
          "faulty": "int increase=0;", 
          "type": "InsertBefore", 
          "seed": "if (text == null || text.length() == 0 || searchList == null || searchList.length == 0 || replacementList == null || replacementList.length == 0) {\n  return text;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:12:49.793754110 -0500\n+++ /tmp/Arja_Defects4J_Lang_39/patches_x7iw/Patch_312/patched/tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:15:59.025671598 -0500\n@@ -3668,16 +3668,14 @@\n \n         int start = 0;\n \n-        // get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n+        if (text == null || text.length() == 0 || searchList == null\n+\t\t\t\t|| searchList.length == 0 || replacementList == null\n+\t\t\t\t|| replacementList.length == 0) {\n+\t\t\treturn text;\n+\t\t}\n+\t\t// get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n         int increase = 0;\n \n-        // count the replacement text elements that are larger than their corresponding text being replaced\n-        for (int i = 0; i < searchList.length; i++) {\n-            int greater = replacementList[i].length() - searchList[i].length();\n-            if (greater > 0) {\n-                increase += 3 * greater; // assume 3 matches\n-            }\n-        }\n         // have upper-bound at 20% increase, then let Java take over\n         increase = Math.min(increase, text.length() / 5);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3675, 
          "faulty": "for (int i=0; i < searchList.length; i++) {\n  int greater=replacementList[i].length() - searchList[i].length();\n  if (greater > 0) {\n    increase+=3 * greater;\n  }\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < searchLength; i++) {\n  if (noMoreMatchesForReplIndex[i] || searchList[i] == null || searchList[i].length() == 0 || replacementList[i] == null) {\n    continue;\n  }\n  tempIndex=text.indexOf(searchList[i]);\n  if (tempIndex == -1) {\n    noMoreMatchesForReplIndex[i]=true;\n  }\n else {\n    if (textIndex == -1 || tempIndex < textIndex) {\n      textIndex=tempIndex;\n      replaceIndex=i;\n    }\n  }\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3619, 
          "faulty": "if (timeToLive < 0) {\n  throw new IllegalStateException(\"TimeToLive of \" + timeToLive + \" is less than 0: \"+ text);\n}", 
          "type": "InsertBefore", 
          "seed": "if (timeToLive < 0) {\n  throw new IllegalStateException(\"TimeToLive of \" + timeToLive + \" is less than 0: \"+ text);\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3672, 
          "faulty": "int increase=0;", 
          "type": "InsertBefore", 
          "seed": "for (int i=0; i < searchLength; i++) {\n  if (noMoreMatchesForReplIndex[i] || searchList[i] == null || searchList[i].length() == 0 || replacementList[i] == null) {\n    continue;\n  }\n  tempIndex=text.indexOf(searchList[i]);\n  if (tempIndex == -1) {\n    noMoreMatchesForReplIndex[i]=true;\n  }\n else {\n    if (textIndex == -1 || tempIndex < textIndex) {\n      textIndex=tempIndex;\n      replaceIndex=i;\n    }\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:12:49.793754110 -0500\n+++ /tmp/Arja_Defects4J_Lang_39/patches_x7iw/Patch_858/patched/tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:18:28.145607069 -0500\n@@ -3615,7 +3615,11 @@\n             return text;\n         }\n \n-        // if recursing, this shouldnt be less than 0\n+        if (timeToLive < 0) {\n+\t\t\tthrow new IllegalStateException(\"TimeToLive of \" + timeToLive\n+\t\t\t\t\t+ \" is less than 0: \" + text);\n+\t\t}\n+\t\t// if recursing, this shouldnt be less than 0\n         if (timeToLive < 0) {\n             throw new IllegalStateException(\"TimeToLive of \" + timeToLive + \" is less than 0: \" + text);\n         }\n@@ -3668,16 +3672,25 @@\n \n         int start = 0;\n \n-        // get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n+        for (int i = 0; i < searchLength; i++) {\n+\t\t\tif (noMoreMatchesForReplIndex[i] || searchList[i] == null\n+\t\t\t\t\t|| searchList[i].length() == 0\n+\t\t\t\t\t|| replacementList[i] == null) {\n+\t\t\t\tcontinue;\n+\t\t\t}\n+\t\t\ttempIndex = text.indexOf(searchList[i]);\n+\t\t\tif (tempIndex == -1) {\n+\t\t\t\tnoMoreMatchesForReplIndex[i] = true;\n+\t\t\t} else {\n+\t\t\t\tif (textIndex == -1 || tempIndex < textIndex) {\n+\t\t\t\t\ttextIndex = tempIndex;\n+\t\t\t\t\treplaceIndex = i;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\t// get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n         int increase = 0;\n \n-        // count the replacement text elements that are larger than their corresponding text being replaced\n-        for (int i = 0; i < searchList.length; i++) {\n-            int greater = replacementList[i].length() - searchList[i].length();\n-            if (greater > 0) {\n-                increase += 3 * greater; // assume 3 matches\n-            }\n-        }\n         // have upper-bound at 20% increase, then let Java take over\n         increase = Math.min(increase, text.length() / 5);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3675, 
          "faulty": "for (int i=0; i < searchList.length; i++) {\n  int greater=replacementList[i].length() - searchList[i].length();\n  if (greater > 0) {\n    increase+=3 * greater;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (searchLength != replacementLength) {\n  throw new IllegalArgumentException(\"Search and Replace array lengths don't match: \" + searchLength + \" vs \"+ replacementLength);\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:12:49.793754110 -0500\n+++ /tmp/Arja_Defects4J_Lang_39/patches_x7iw/Patch_116/patched/tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:14:53.633700028 -0500\n@@ -3671,13 +3671,6 @@\n         // get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n         int increase = 0;\n \n-        // count the replacement text elements that are larger than their corresponding text being replaced\n-        for (int i = 0; i < searchList.length; i++) {\n-            int greater = replacementList[i].length() - searchList[i].length();\n-            if (greater > 0) {\n-                increase += 3 * greater; // assume 3 matches\n-            }\n-        }\n         // have upper-bound at 20% increase, then let Java take over\n         increase = Math.min(increase, text.length() / 5);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3675, 
          "faulty": "for (int i=0; i < searchList.length; i++) {\n  int greater=replacementList[i].length() - searchList[i].length();\n  if (greater > 0) {\n    increase+=3 * greater;\n  }\n}", 
          "type": "Replace", 
          "seed": "increase=Math.min(increase,text.length() / 5);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3619, 
          "faulty": "if (timeToLive < 0) {\n  throw new IllegalStateException(\"TimeToLive of \" + timeToLive + \" is less than 0: \"+ text);\n}", 
          "type": "InsertBefore", 
          "seed": "if (timeToLive < 0) {\n  throw new IllegalStateException(\"TimeToLive of \" + timeToLive + \" is less than 0: \"+ text);\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:12:49.793754110 -0500\n+++ /tmp/Arja_Defects4J_Lang_39/patches_x7iw/Patch_933/patched/tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:18:44.733599916 -0500\n@@ -3615,7 +3615,11 @@\n             return text;\n         }\n \n-        // if recursing, this shouldnt be less than 0\n+        if (timeToLive < 0) {\n+\t\t\tthrow new IllegalStateException(\"TimeToLive of \" + timeToLive\n+\t\t\t\t\t+ \" is less than 0: \" + text);\n+\t\t}\n+\t\t// if recursing, this shouldnt be less than 0\n         if (timeToLive < 0) {\n             throw new IllegalStateException(\"TimeToLive of \" + timeToLive + \" is less than 0: \" + text);\n         }\n@@ -3671,13 +3675,7 @@\n         // get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n         int increase = 0;\n \n-        // count the replacement text elements that are larger than their corresponding text being replaced\n-        for (int i = 0; i < searchList.length; i++) {\n-            int greater = replacementList[i].length() - searchList[i].length();\n-            if (greater > 0) {\n-                increase += 3 * greater; // assume 3 matches\n-            }\n-        }\n+        increase = Math.min(increase, text.length() / 5);\n         // have upper-bound at 20% increase, then let Java take over\n         increase = Math.min(increase, text.length() / 5);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3675, 
          "faulty": "for (int i=0; i < searchList.length; i++) {\n  int greater=replacementList[i].length() - searchList[i].length();\n  if (greater > 0) {\n    increase+=3 * greater;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (searchLength != replacementLength) {\n  throw new IllegalArgumentException(\"Search and Replace array lengths don't match: \" + searchLength + \" vs \"+ replacementLength);\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3682, 
          "faulty": "increase=Math.min(increase,text.length() / 5);", 
          "type": "Replace", 
          "seed": "if (text == null || text.length() == 0 || searchList == null || searchList.length == 0 || replacementList == null || replacementList.length == 0) {\n  return text;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:12:49.793754110 -0500\n+++ /tmp/Arja_Defects4J_Lang_39/patches_x7iw/Patch_737/patched/tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:18:00.457619019 -0500\n@@ -3671,15 +3671,11 @@\n         // get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n         int increase = 0;\n \n-        // count the replacement text elements that are larger than their corresponding text being replaced\n-        for (int i = 0; i < searchList.length; i++) {\n-            int greater = replacementList[i].length() - searchList[i].length();\n-            if (greater > 0) {\n-                increase += 3 * greater; // assume 3 matches\n-            }\n-        }\n-        // have upper-bound at 20% increase, then let Java take over\n-        increase = Math.min(increase, text.length() / 5);\n+        if (text == null || text.length() == 0 || searchList == null\n+\t\t\t\t|| searchList.length == 0 || replacementList == null\n+\t\t\t\t|| replacementList.length == 0) {\n+\t\t\treturn text;\n+\t\t}\n \n         StringBuilder buf = new StringBuilder(text.length() + increase);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3648, 
          "faulty": "continue;", 
          "type": "InsertBefore", 
          "seed": "tempIndex=-1;"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3675, 
          "faulty": "for (int i=0; i < searchList.length; i++) {\n  int greater=replacementList[i].length() - searchList[i].length();\n  if (greater > 0) {\n    increase+=3 * greater;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (searchLength != replacementLength) {\n  throw new IllegalArgumentException(\"Search and Replace array lengths don't match: \" + searchLength + \" vs \"+ replacementLength);\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:12:49.793754110 -0500\n+++ /tmp/Arja_Defects4J_Lang_39/patches_x7iw/Patch_1291/patched/tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:20:19.709559057 -0500\n@@ -3645,7 +3645,8 @@\n             if (noMoreMatchesForReplIndex[i] || searchList[i] == null || \n                 searchList[i].length() == 0 || replacementList[i] == null) \n             {\n-                continue;\n+                tempIndex = -1;\n+\t\t\t\tcontinue;\n             }\n             tempIndex = text.indexOf(searchList[i]);\n \n@@ -3671,13 +3672,6 @@\n         // get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n         int increase = 0;\n \n-        // count the replacement text elements that are larger than their corresponding text being replaced\n-        for (int i = 0; i < searchList.length; i++) {\n-            int greater = replacementList[i].length() - searchList[i].length();\n-            if (greater > 0) {\n-                increase += 3 * greater; // assume 3 matches\n-            }\n-        }\n         // have upper-bound at 20% increase, then let Java take over\n         increase = Math.min(increase, text.length() / 5);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3675, 
          "faulty": "for (int i=0; i < searchList.length; i++) {\n  int greater=replacementList[i].length() - searchList[i].length();\n  if (greater > 0) {\n    increase+=3 * greater;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (timeToLive < 0) {\n  throw new IllegalStateException(\"TimeToLive of \" + timeToLive + \" is less than 0: \"+ text);\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3644, 
          "faulty": "for (int i=0; i < searchLength; i++) {\n  if (noMoreMatchesForReplIndex[i] || searchList[i] == null || searchList[i].length() == 0 || replacementList[i] == null) {\n    continue;\n  }\n  tempIndex=text.indexOf(searchList[i]);\n  if (tempIndex == -1) {\n    noMoreMatchesForReplIndex[i]=true;\n  }\n else {\n    if (textIndex == -1 || tempIndex < textIndex) {\n      textIndex=tempIndex;\n      replaceIndex=i;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "tempIndex=-1;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:12:49.793754110 -0500\n+++ /tmp/Arja_Defects4J_Lang_39/patches_x7iw/Patch_335/patched/tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:16:03.929669468 -0500\n@@ -3639,7 +3639,8 @@\n         int replaceIndex = -1;\n         int tempIndex = -1;\n \n-        // index of replace array that will replace the search string found\n+        tempIndex = -1;\n+\t\t// index of replace array that will replace the search string found\n         // NOTE: logic duplicated below START\n         for (int i = 0; i < searchLength; i++) {\n             if (noMoreMatchesForReplIndex[i] || searchList[i] == null || \n@@ -3671,13 +3672,6 @@\n         // get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n         int increase = 0;\n \n-        // count the replacement text elements that are larger than their corresponding text being replaced\n-        for (int i = 0; i < searchList.length; i++) {\n-            int greater = replacementList[i].length() - searchList[i].length();\n-            if (greater > 0) {\n-                increase += 3 * greater; // assume 3 matches\n-            }\n-        }\n         // have upper-bound at 20% increase, then let Java take over\n         increase = Math.min(increase, text.length() / 5);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3648, 
          "faulty": "continue;", 
          "type": "InsertBefore", 
          "seed": "if (i == -1) {\n  return StringUtils.EMPTY;\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3675, 
          "faulty": "for (int i=0; i < searchList.length; i++) {\n  int greater=replacementList[i].length() - searchList[i].length();\n  if (greater > 0) {\n    increase+=3 * greater;\n  }\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < searchLength; i++) {\n  if (noMoreMatchesForReplIndex[i] || searchList[i] == null || searchList[i].length() == 0 || replacementList[i] == null) {\n    continue;\n  }\n  tempIndex=text.indexOf(searchList[i]);\n  if (tempIndex == -1) {\n    noMoreMatchesForReplIndex[i]=true;\n  }\n else {\n    if (textIndex == -1 || tempIndex < textIndex) {\n      textIndex=tempIndex;\n      replaceIndex=i;\n    }\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:12:49.793754110 -0500\n+++ /tmp/Arja_Defects4J_Lang_39/patches_x7iw/Patch_1330/patched/tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:20:28.797555156 -0500\n@@ -3645,7 +3645,10 @@\n             if (noMoreMatchesForReplIndex[i] || searchList[i] == null || \n                 searchList[i].length() == 0 || replacementList[i] == null) \n             {\n-                continue;\n+                if (i == -1) {\n+\t\t\t\t\treturn StringUtils.EMPTY;\n+\t\t\t\t}\n+\t\t\t\tcontinue;\n             }\n             tempIndex = text.indexOf(searchList[i]);\n \n@@ -3671,13 +3674,6 @@\n         // get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n         int increase = 0;\n \n-        // count the replacement text elements that are larger than their corresponding text being replaced\n-        for (int i = 0; i < searchList.length; i++) {\n-            int greater = replacementList[i].length() - searchList[i].length();\n-            if (greater > 0) {\n-                increase += 3 * greater; // assume 3 matches\n-            }\n-        }\n         // have upper-bound at 20% increase, then let Java take over\n         increase = Math.min(increase, text.length() / 5);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3675, 
          "faulty": "for (int i=0; i < searchList.length; i++) {\n  int greater=replacementList[i].length() - searchList[i].length();\n  if (greater > 0) {\n    increase+=3 * greater;\n  }\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < searchLength; i++) {\n  if (noMoreMatchesForReplIndex[i] || searchList[i] == null || searchList[i].length() == 0 || replacementList[i] == null) {\n    continue;\n  }\n  tempIndex=text.indexOf(searchList[i]);\n  if (tempIndex == -1) {\n    noMoreMatchesForReplIndex[i]=true;\n  }\n else {\n    if (textIndex == -1 || tempIndex < textIndex) {\n      textIndex=tempIndex;\n      replaceIndex=i;\n    }\n  }\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3727, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "while (textIndex != -1) {\n  for (int i=start; i < textIndex; i++) {\n    buf.append(text.charAt(i));\n  }\n  buf.append(replacementList[replaceIndex]);\n  start=textIndex + searchList[replaceIndex].length();\n  textIndex=-1;\n  replaceIndex=-1;\n  tempIndex=-1;\n  for (int i=0; i < searchLength; i++) {\n    if (noMoreMatchesForReplIndex[i] || searchList[i] == null || searchList[i].length() == 0 || replacementList[i] == null) {\n      continue;\n    }\n    tempIndex=text.indexOf(searchList[i],start);\n    if (tempIndex == -1) {\n      noMoreMatchesForReplIndex[i]=true;\n    }\n else {\n      if (textIndex == -1 || tempIndex < textIndex) {\n        textIndex=tempIndex;\n        replaceIndex=i;\n      }\n    }\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:12:49.793754110 -0500\n+++ /tmp/Arja_Defects4J_Lang_39/patches_x7iw/Patch_937/patched/tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:18:45.429599617 -0500\n@@ -3671,13 +3671,6 @@\n         // get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n         int increase = 0;\n \n-        // count the replacement text elements that are larger than their corresponding text being replaced\n-        for (int i = 0; i < searchList.length; i++) {\n-            int greater = replacementList[i].length() - searchList[i].length();\n-            if (greater > 0) {\n-                increase += 3 * greater; // assume 3 matches\n-            }\n-        }\n         // have upper-bound at 20% increase, then let Java take over\n         increase = Math.min(increase, text.length() / 5);\n \n@@ -3724,7 +3717,33 @@\n         }\n         String result = buf.toString();\n         if (!repeat) {\n-            return result;\n+            while (textIndex != -1) {\n+\t\t\t\tfor (int i = start; i < textIndex; i++) {\n+\t\t\t\t\tbuf.append(text.charAt(i));\n+\t\t\t\t}\n+\t\t\t\tbuf.append(replacementList[replaceIndex]);\n+\t\t\t\tstart = textIndex + searchList[replaceIndex].length();\n+\t\t\t\ttextIndex = -1;\n+\t\t\t\treplaceIndex = -1;\n+\t\t\t\ttempIndex = -1;\n+\t\t\t\tfor (int i = 0; i < searchLength; i++) {\n+\t\t\t\t\tif (noMoreMatchesForReplIndex[i] || searchList[i] == null\n+\t\t\t\t\t\t\t|| searchList[i].length() == 0\n+\t\t\t\t\t\t\t|| replacementList[i] == null) {\n+\t\t\t\t\t\tcontinue;\n+\t\t\t\t\t}\n+\t\t\t\t\ttempIndex = text.indexOf(searchList[i], start);\n+\t\t\t\t\tif (tempIndex == -1) {\n+\t\t\t\t\t\tnoMoreMatchesForReplIndex[i] = true;\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tif (textIndex == -1 || tempIndex < textIndex) {\n+\t\t\t\t\t\t\ttextIndex = tempIndex;\n+\t\t\t\t\t\t\treplaceIndex = i;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\treturn result;\n         }\n \n         return replaceEach(result, searchList, replacementList, repeat, timeToLive - 1);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3675, 
          "faulty": "for (int i=0; i < searchList.length; i++) {\n  int greater=replacementList[i].length() - searchList[i].length();\n  if (greater > 0) {\n    increase+=3 * greater;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (textIndex == -1) {\n  return text;\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3635, 
          "faulty": "boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];", 
          "type": "InsertBefore", 
          "seed": "if (text == null || text.length() == 0 || searchList == null || searchList.length == 0 || replacementList == null || replacementList.length == 0) {\n  return text;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:12:49.793754110 -0500\n+++ /tmp/Arja_Defects4J_Lang_39/patches_x7iw/Patch_849/patched/tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:18:26.217607901 -0500\n@@ -3631,7 +3631,12 @@\n                 + replacementLength);\n         }\n \n-        // keep track of which still have matches\n+        if (text == null || text.length() == 0 || searchList == null\n+\t\t\t\t|| searchList.length == 0 || replacementList == null\n+\t\t\t\t|| replacementList.length == 0) {\n+\t\t\treturn text;\n+\t\t}\n+\t\t// keep track of which still have matches\n         boolean[] noMoreMatchesForReplIndex = new boolean[searchLength];\n \n         // index on index that the match was found\n@@ -3671,13 +3676,6 @@\n         // get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n         int increase = 0;\n \n-        // count the replacement text elements that are larger than their corresponding text being replaced\n-        for (int i = 0; i < searchList.length; i++) {\n-            int greater = replacementList[i].length() - searchList[i].length();\n-            if (greater > 0) {\n-                increase += 3 * greater; // assume 3 matches\n-            }\n-        }\n         // have upper-bound at 20% increase, then let Java take over\n         increase = Math.min(increase, text.length() / 5);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3612, 
          "faulty": "if (text == null || text.length() == 0 || searchList == null || searchList.length == 0 || replacementList == null || replacementList.length == 0) {\n  return text;\n}", 
          "type": "Replace", 
          "seed": "if (timeToLive < 0) {\n  throw new IllegalStateException(\"TimeToLive of \" + timeToLive + \" is less than 0: \"+ text);\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3675, 
          "faulty": "for (int i=0; i < searchList.length; i++) {\n  int greater=replacementList[i].length() - searchList[i].length();\n  if (greater > 0) {\n    increase+=3 * greater;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (searchLength != replacementLength) {\n  throw new IllegalArgumentException(\"Search and Replace array lengths don't match: \" + searchLength + \" vs \"+ replacementLength);\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3619, 
          "faulty": "if (timeToLive < 0) {\n  throw new IllegalStateException(\"TimeToLive of \" + timeToLive + \" is less than 0: \"+ text);\n}", 
          "type": "InsertBefore", 
          "seed": "if (text == null || text.length() == 0 || searchList == null || searchList.length == 0 || replacementList == null || replacementList.length == 0) {\n  return text;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:12:49.793754110 -0500\n+++ /tmp/Arja_Defects4J_Lang_39/patches_x7iw/Patch_833/patched/tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:18:22.577609471 -0500\n@@ -3609,13 +3609,17 @@\n         // mchyzer Performance note: This creates very few new objects (one major goal)\n         // let me know if there are performance requests, we can create a harness to measure\n \n-        if (text == null || text.length() == 0 || searchList == null || \n-            searchList.length == 0 || replacementList == null || replacementList.length == 0) \n-        {\n-            return text;\n-        }\n-\n-        // if recursing, this shouldnt be less than 0\n+        if (timeToLive < 0) {\n+\t\t\tthrow new IllegalStateException(\"TimeToLive of \" + timeToLive\n+\t\t\t\t\t+ \" is less than 0: \" + text);\n+\t\t}\n+\n+        if (text == null || text.length() == 0 || searchList == null\n+\t\t\t\t|| searchList.length == 0 || replacementList == null\n+\t\t\t\t|| replacementList.length == 0) {\n+\t\t\treturn text;\n+\t\t}\n+\t\t// if recursing, this shouldnt be less than 0\n         if (timeToLive < 0) {\n             throw new IllegalStateException(\"TimeToLive of \" + timeToLive + \" is less than 0: \" + text);\n         }\n@@ -3671,13 +3675,6 @@\n         // get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n         int increase = 0;\n \n-        // count the replacement text elements that are larger than their corresponding text being replaced\n-        for (int i = 0; i < searchList.length; i++) {\n-            int greater = replacementList[i].length() - searchList[i].length();\n-            if (greater > 0) {\n-                increase += 3 * greater; // assume 3 matches\n-            }\n-        }\n         // have upper-bound at 20% increase, then let Java take over\n         increase = Math.min(increase, text.length() / 5);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3656, 
          "faulty": "if (textIndex == -1 || tempIndex < textIndex) {\n  textIndex=tempIndex;\n  replaceIndex=i;\n}", 
          "type": "InsertBefore", 
          "seed": "if (searchLength != replacementLength) {\n  throw new IllegalArgumentException(\"Search and Replace array lengths don't match: \" + searchLength + \" vs \"+ replacementLength);\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3675, 
          "faulty": "for (int i=0; i < searchList.length; i++) {\n  int greater=replacementList[i].length() - searchList[i].length();\n  if (greater > 0) {\n    increase+=3 * greater;\n  }\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < searchLength; i++) {\n  if (noMoreMatchesForReplIndex[i] || searchList[i] == null || searchList[i].length() == 0 || replacementList[i] == null) {\n    continue;\n  }\n  tempIndex=text.indexOf(searchList[i]);\n  if (tempIndex == -1) {\n    noMoreMatchesForReplIndex[i]=true;\n  }\n else {\n    if (textIndex == -1 || tempIndex < textIndex) {\n      textIndex=tempIndex;\n      replaceIndex=i;\n    }\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:12:49.793754110 -0500\n+++ /tmp/Arja_Defects4J_Lang_39/patches_x7iw/Patch_1298/patched/tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:20:21.413558325 -0500\n@@ -3653,7 +3653,12 @@\n             if (tempIndex == -1) {\n                 noMoreMatchesForReplIndex[i] = true;\n             } else {\n-                if (textIndex == -1 || tempIndex < textIndex) {\n+                if (searchLength != replacementLength) {\n+\t\t\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\t\t\"Search and Replace array lengths don't match: \"\n+\t\t\t\t\t\t\t\t\t+ searchLength + \" vs \" + replacementLength);\n+\t\t\t\t}\n+\t\t\t\tif (textIndex == -1 || tempIndex < textIndex) {\n                     textIndex = tempIndex;\n                     replaceIndex = i;\n                 }\n@@ -3671,13 +3676,6 @@\n         // get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n         int increase = 0;\n \n-        // count the replacement text elements that are larger than their corresponding text being replaced\n-        for (int i = 0; i < searchList.length; i++) {\n-            int greater = replacementList[i].length() - searchList[i].length();\n-            if (greater > 0) {\n-                increase += 3 * greater; // assume 3 matches\n-            }\n-        }\n         // have upper-bound at 20% increase, then let Java take over\n         increase = Math.min(increase, text.length() / 5);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3675, 
          "faulty": "for (int i=0; i < searchList.length; i++) {\n  int greater=replacementList[i].length() - searchList[i].length();\n  if (greater > 0) {\n    increase+=3 * greater;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (searchLength != replacementLength) {\n  throw new IllegalArgumentException(\"Search and Replace array lengths don't match: \" + searchLength + \" vs \"+ replacementLength);\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3684, 
          "faulty": "StringBuilder buf=new StringBuilder(text.length() + increase);", 
          "type": "InsertBefore", 
          "seed": "increase=(increase < 0 ? 0 : increase);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:12:49.793754110 -0500\n+++ /tmp/Arja_Defects4J_Lang_39/patches_x7iw/Patch_1128/patched/tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:19:37.885577031 -0500\n@@ -3671,17 +3671,11 @@\n         // get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n         int increase = 0;\n \n-        // count the replacement text elements that are larger than their corresponding text being replaced\n-        for (int i = 0; i < searchList.length; i++) {\n-            int greater = replacementList[i].length() - searchList[i].length();\n-            if (greater > 0) {\n-                increase += 3 * greater; // assume 3 matches\n-            }\n-        }\n         // have upper-bound at 20% increase, then let Java take over\n         increase = Math.min(increase, text.length() / 5);\n \n-        StringBuilder buf = new StringBuilder(text.length() + increase);\n+        increase = (increase < 0 ? 0 : increase);\n+\t\tStringBuilder buf = new StringBuilder(text.length() + increase);\n \n         while (textIndex != -1) {\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3675, 
          "faulty": "for (int i=0; i < searchList.length; i++) {\n  int greater=replacementList[i].length() - searchList[i].length();\n  if (greater > 0) {\n    increase+=3 * greater;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (textIndex == -1) {\n  return text;\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3640, 
          "faulty": "int tempIndex=-1;", 
          "type": "InsertBefore", 
          "seed": "if (searchLength != replacementLength) {\n  throw new IllegalArgumentException(\"Search and Replace array lengths don't match: \" + searchLength + \" vs \"+ replacementLength);\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:12:49.793754110 -0500\n+++ /tmp/Arja_Defects4J_Lang_39/patches_x7iw/Patch_325/patched/tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:16:01.981670314 -0500\n@@ -3637,7 +3637,12 @@\n         // index on index that the match was found\n         int textIndex = -1;\n         int replaceIndex = -1;\n-        int tempIndex = -1;\n+        if (searchLength != replacementLength) {\n+\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\"Search and Replace array lengths don't match: \"\n+\t\t\t\t\t\t\t+ searchLength + \" vs \" + replacementLength);\n+\t\t}\n+\t\tint tempIndex = -1;\n \n         // index of replace array that will replace the search string found\n         // NOTE: logic duplicated below START\n@@ -3671,13 +3676,6 @@\n         // get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n         int increase = 0;\n \n-        // count the replacement text elements that are larger than their corresponding text being replaced\n-        for (int i = 0; i < searchList.length; i++) {\n-            int greater = replacementList[i].length() - searchList[i].length();\n-            if (greater > 0) {\n-                increase += 3 * greater; // assume 3 matches\n-            }\n-        }\n         // have upper-bound at 20% increase, then let Java take over\n         increase = Math.min(increase, text.length() / 5);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3675, 
          "faulty": "for (int i=0; i < searchList.length; i++) {\n  int greater=replacementList[i].length() - searchList[i].length();\n  if (greater > 0) {\n    increase+=3 * greater;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (timeToLive < 0) {\n  throw new IllegalStateException(\"TimeToLive of \" + timeToLive + \" is less than 0: \"+ text);\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3644, 
          "faulty": "for (int i=0; i < searchLength; i++) {\n  if (noMoreMatchesForReplIndex[i] || searchList[i] == null || searchList[i].length() == 0 || replacementList[i] == null) {\n    continue;\n  }\n  tempIndex=text.indexOf(searchList[i]);\n  if (tempIndex == -1) {\n    noMoreMatchesForReplIndex[i]=true;\n  }\n else {\n    if (textIndex == -1 || tempIndex < textIndex) {\n      textIndex=tempIndex;\n      replaceIndex=i;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "if (text == null || text.length() == 0 || searchList == null || searchList.length == 0 || replacementList == null || replacementList.length == 0) {\n  return text;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:12:49.793754110 -0500\n+++ /tmp/Arja_Defects4J_Lang_39/patches_x7iw/Patch_386/patched/tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:16:32.625657021 -0500\n@@ -3639,7 +3639,12 @@\n         int replaceIndex = -1;\n         int tempIndex = -1;\n \n-        // index of replace array that will replace the search string found\n+        if (text == null || text.length() == 0 || searchList == null\n+\t\t\t\t|| searchList.length == 0 || replacementList == null\n+\t\t\t\t|| replacementList.length == 0) {\n+\t\t\treturn text;\n+\t\t}\n+\t\t// index of replace array that will replace the search string found\n         // NOTE: logic duplicated below START\n         for (int i = 0; i < searchLength; i++) {\n             if (noMoreMatchesForReplIndex[i] || searchList[i] == null || \n@@ -3671,13 +3676,6 @@\n         // get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n         int increase = 0;\n \n-        // count the replacement text elements that are larger than their corresponding text being replaced\n-        for (int i = 0; i < searchList.length; i++) {\n-            int greater = replacementList[i].length() - searchList[i].length();\n-            if (greater > 0) {\n-                increase += 3 * greater; // assume 3 matches\n-            }\n-        }\n         // have upper-bound at 20% increase, then let Java take over\n         increase = Math.min(increase, text.length() / 5);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3650, 
          "faulty": "tempIndex=text.indexOf(searchList[i]);", 
          "type": "InsertBefore", 
          "seed": "if (searchLength != replacementLength) {\n  throw new IllegalArgumentException(\"Search and Replace array lengths don't match: \" + searchLength + \" vs \"+ replacementLength);\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3675, 
          "faulty": "for (int i=0; i < searchList.length; i++) {\n  int greater=replacementList[i].length() - searchList[i].length();\n  if (greater > 0) {\n    increase+=3 * greater;\n  }\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < searchLength; i++) {\n  if (noMoreMatchesForReplIndex[i] || searchList[i] == null || searchList[i].length() == 0 || replacementList[i] == null) {\n    continue;\n  }\n  tempIndex=text.indexOf(searchList[i]);\n  if (tempIndex == -1) {\n    noMoreMatchesForReplIndex[i]=true;\n  }\n else {\n    if (textIndex == -1 || tempIndex < textIndex) {\n      textIndex=tempIndex;\n      replaceIndex=i;\n    }\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:12:49.793754110 -0500\n+++ /tmp/Arja_Defects4J_Lang_39/patches_x7iw/Patch_1910/patched/tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:24:07.505461675 -0500\n@@ -3647,7 +3647,12 @@\n             {\n                 continue;\n             }\n-            tempIndex = text.indexOf(searchList[i]);\n+            if (searchLength != replacementLength) {\n+\t\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\t\"Search and Replace array lengths don't match: \"\n+\t\t\t\t\t\t\t\t+ searchLength + \" vs \" + replacementLength);\n+\t\t\t}\n+\t\t\ttempIndex = text.indexOf(searchList[i]);\n \n             // see if we need to keep searching for this\n             if (tempIndex == -1) {\n@@ -3671,13 +3676,6 @@\n         // get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n         int increase = 0;\n \n-        // count the replacement text elements that are larger than their corresponding text being replaced\n-        for (int i = 0; i < searchList.length; i++) {\n-            int greater = replacementList[i].length() - searchList[i].length();\n-            if (greater > 0) {\n-                increase += 3 * greater; // assume 3 matches\n-            }\n-        }\n         // have upper-bound at 20% increase, then let Java take over\n         increase = Math.min(increase, text.length() / 5);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3657, 
          "faulty": "textIndex=tempIndex;", 
          "type": "Delete", 
          "seed": "textIndex=-1;"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3675, 
          "faulty": "for (int i=0; i < searchList.length; i++) {\n  int greater=replacementList[i].length() - searchList[i].length();\n  if (greater > 0) {\n    increase+=3 * greater;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (textIndex == -1) {\n  return text;\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3665, 
          "faulty": "if (textIndex == -1) {\n  return text;\n}", 
          "type": "InsertBefore", 
          "seed": "for (int i=0; i < searchLength; i++) {\n  if (noMoreMatchesForReplIndex[i] || searchList[i] == null || searchList[i].length() == 0 || replacementList[i] == null) {\n    continue;\n  }\n  tempIndex=text.indexOf(searchList[i]);\n  if (tempIndex == -1) {\n    noMoreMatchesForReplIndex[i]=true;\n  }\n else {\n    if (textIndex == -1 || tempIndex < textIndex) {\n      textIndex=tempIndex;\n      replaceIndex=i;\n    }\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:12:49.793754110 -0500\n+++ /tmp/Arja_Defects4J_Lang_39/patches_x7iw/Patch_418/patched/tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:16:44.793651748 -0500\n@@ -3654,14 +3654,29 @@\n                 noMoreMatchesForReplIndex[i] = true;\n             } else {\n                 if (textIndex == -1 || tempIndex < textIndex) {\n-                    textIndex = tempIndex;\n                     replaceIndex = i;\n                 }\n             }\n         }\n         // NOTE: logic mostly below END\n \n-        // no search strings found, we are done\n+        for (int i = 0; i < searchLength; i++) {\n+\t\t\tif (noMoreMatchesForReplIndex[i] || searchList[i] == null\n+\t\t\t\t\t|| searchList[i].length() == 0\n+\t\t\t\t\t|| replacementList[i] == null) {\n+\t\t\t\tcontinue;\n+\t\t\t}\n+\t\t\ttempIndex = text.indexOf(searchList[i]);\n+\t\t\tif (tempIndex == -1) {\n+\t\t\t\tnoMoreMatchesForReplIndex[i] = true;\n+\t\t\t} else {\n+\t\t\t\tif (textIndex == -1 || tempIndex < textIndex) {\n+\t\t\t\t\ttextIndex = tempIndex;\n+\t\t\t\t\treplaceIndex = i;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\t// no search strings found, we are done\n         if (textIndex == -1) {\n             return text;\n         }\n@@ -3671,13 +3686,6 @@\n         // get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n         int increase = 0;\n \n-        // count the replacement text elements that are larger than their corresponding text being replaced\n-        for (int i = 0; i < searchList.length; i++) {\n-            int greater = replacementList[i].length() - searchList[i].length();\n-            if (greater > 0) {\n-                increase += 3 * greater; // assume 3 matches\n-            }\n-        }\n         // have upper-bound at 20% increase, then let Java take over\n         increase = Math.min(increase, text.length() / 5);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3677, 
          "faulty": "if (greater > 0) {\n  increase+=3 * greater;\n}", 
          "type": "InsertBefore", 
          "seed": "break;"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3648, 
          "faulty": "continue;", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3675, 
          "faulty": "for (int i=0; i < searchList.length; i++) {\n  int greater=replacementList[i].length() - searchList[i].length();\n  if (greater > 0) {\n    increase+=3 * greater;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (searchLength != replacementLength) {\n  throw new IllegalArgumentException(\"Search and Replace array lengths don't match: \" + searchLength + \" vs \"+ replacementLength);\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:12:49.793754110 -0500\n+++ /tmp/Arja_Defects4J_Lang_39/patches_x7iw/Patch_431/patched/tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:16:47.785650451 -0500\n@@ -3645,7 +3645,7 @@\n             if (noMoreMatchesForReplIndex[i] || searchList[i] == null || \n                 searchList[i].length() == 0 || replacementList[i] == null) \n             {\n-                continue;\n+                break;\n             }\n             tempIndex = text.indexOf(searchList[i]);\n \n@@ -3671,13 +3671,6 @@\n         // get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n         int increase = 0;\n \n-        // count the replacement text elements that are larger than their corresponding text being replaced\n-        for (int i = 0; i < searchList.length; i++) {\n-            int greater = replacementList[i].length() - searchList[i].length();\n-            if (greater > 0) {\n-                increase += 3 * greater; // assume 3 matches\n-            }\n-        }\n         // have upper-bound at 20% increase, then let Java take over\n         increase = Math.min(increase, text.length() / 5);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3675, 
          "faulty": "for (int i=0; i < searchList.length; i++) {\n  int greater=replacementList[i].length() - searchList[i].length();\n  if (greater > 0) {\n    increase+=3 * greater;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (searchLength != replacementLength) {\n  throw new IllegalArgumentException(\"Search and Replace array lengths don't match: \" + searchLength + \" vs \"+ replacementLength);\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3696, 
          "faulty": "replaceIndex=-1;", 
          "type": "Delete", 
          "seed": "buf.append(\"Range[\");"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3691, 
          "faulty": "buf.append(replacementList[replaceIndex]);", 
          "type": "InsertBefore", 
          "seed": "start=' ';"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:12:49.793754110 -0500\n+++ /tmp/Arja_Defects4J_Lang_39/patches_x7iw/Patch_1472/patched/tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:21:14.933535371 -0500\n@@ -3671,13 +3671,6 @@\n         // get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n         int increase = 0;\n \n-        // count the replacement text elements that are larger than their corresponding text being replaced\n-        for (int i = 0; i < searchList.length; i++) {\n-            int greater = replacementList[i].length() - searchList[i].length();\n-            if (greater > 0) {\n-                increase += 3 * greater; // assume 3 matches\n-            }\n-        }\n         // have upper-bound at 20% increase, then let Java take over\n         increase = Math.min(increase, text.length() / 5);\n \n@@ -3688,12 +3681,12 @@\n             for (int i = start; i < textIndex; i++) {\n                 buf.append(text.charAt(i));\n             }\n-            buf.append(replacementList[replaceIndex]);\n+            start = ' ';\n+\t\t\tbuf.append(replacementList[replaceIndex]);\n \n             start = textIndex + searchList[replaceIndex].length();\n \n             textIndex = -1;\n-            replaceIndex = -1;\n             tempIndex = -1;\n             // find the next earliest match\n             // NOTE: logic mostly duplicated above START\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3666, 
          "faulty": "return text;", 
          "type": "InsertBefore", 
          "seed": "for (int i=0; i < searchLength; i++) {\n  if (noMoreMatchesForReplIndex[i] || searchList[i] == null || searchList[i].length() == 0 || replacementList[i] == null) {\n    continue;\n  }\n  tempIndex=text.indexOf(searchList[i]);\n  if (tempIndex == -1) {\n    noMoreMatchesForReplIndex[i]=true;\n  }\n else {\n    if (textIndex == -1 || tempIndex < textIndex) {\n      textIndex=tempIndex;\n      replaceIndex=i;\n    }\n  }\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3675, 
          "faulty": "for (int i=0; i < searchList.length; i++) {\n  int greater=replacementList[i].length() - searchList[i].length();\n  if (greater > 0) {\n    increase+=3 * greater;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (searchLength != replacementLength) {\n  throw new IllegalArgumentException(\"Search and Replace array lengths don't match: \" + searchLength + \" vs \"+ replacementLength);\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:12:49.793754110 -0500\n+++ /tmp/Arja_Defects4J_Lang_39/patches_x7iw/Patch_555/patched/tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:17:20.749636182 -0500\n@@ -3663,7 +3663,23 @@\n \n         // no search strings found, we are done\n         if (textIndex == -1) {\n-            return text;\n+            for (int i = 0; i < searchLength; i++) {\n+\t\t\t\tif (noMoreMatchesForReplIndex[i] || searchList[i] == null\n+\t\t\t\t\t\t|| searchList[i].length() == 0\n+\t\t\t\t\t\t|| replacementList[i] == null) {\n+\t\t\t\t\tcontinue;\n+\t\t\t\t}\n+\t\t\t\ttempIndex = text.indexOf(searchList[i]);\n+\t\t\t\tif (tempIndex == -1) {\n+\t\t\t\t\tnoMoreMatchesForReplIndex[i] = true;\n+\t\t\t\t} else {\n+\t\t\t\t\tif (textIndex == -1 || tempIndex < textIndex) {\n+\t\t\t\t\t\ttextIndex = tempIndex;\n+\t\t\t\t\t\treplaceIndex = i;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\treturn text;\n         }\n \n         int start = 0;\n@@ -3671,13 +3687,6 @@\n         // get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n         int increase = 0;\n \n-        // count the replacement text elements that are larger than their corresponding text being replaced\n-        for (int i = 0; i < searchList.length; i++) {\n-            int greater = replacementList[i].length() - searchList[i].length();\n-            if (greater > 0) {\n-                increase += 3 * greater; // assume 3 matches\n-            }\n-        }\n         // have upper-bound at 20% increase, then let Java take over\n         increase = Math.min(increase, text.length() / 5);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3675, 
          "faulty": "for (int i=0; i < searchList.length; i++) {\n  int greater=replacementList[i].length() - searchList[i].length();\n  if (greater > 0) {\n    increase+=3 * greater;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (start < 0) {\n  break;\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3672, 
          "faulty": "int increase=0;", 
          "type": "InsertBefore", 
          "seed": "if (timeToLive < 0) {\n  throw new IllegalStateException(\"TimeToLive of \" + timeToLive + \" is less than 0: \"+ text);\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:12:49.793754110 -0500\n+++ /tmp/Arja_Defects4J_Lang_39/patches_x7iw/Patch_340/patched/tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:16:04.881669056 -0500\n@@ -3668,16 +3668,13 @@\n \n         int start = 0;\n \n-        // get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n+        if (timeToLive < 0) {\n+\t\t\tthrow new IllegalStateException(\"TimeToLive of \" + timeToLive\n+\t\t\t\t\t+ \" is less than 0: \" + text);\n+\t\t}\n+\t\t// get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n         int increase = 0;\n \n-        // count the replacement text elements that are larger than their corresponding text being replaced\n-        for (int i = 0; i < searchList.length; i++) {\n-            int greater = replacementList[i].length() - searchList[i].length();\n-            if (greater > 0) {\n-                increase += 3 * greater; // assume 3 matches\n-            }\n-        }\n         // have upper-bound at 20% increase, then let Java take over\n         increase = Math.min(increase, text.length() / 5);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3666, 
          "faulty": "return text;", 
          "type": "InsertBefore", 
          "seed": "replaceIndex=-1;"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3675, 
          "faulty": "for (int i=0; i < searchList.length; i++) {\n  int greater=replacementList[i].length() - searchList[i].length();\n  if (greater > 0) {\n    increase+=3 * greater;\n  }\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < searchLength; i++) {\n  if (noMoreMatchesForReplIndex[i] || searchList[i] == null || searchList[i].length() == 0 || replacementList[i] == null) {\n    continue;\n  }\n  tempIndex=text.indexOf(searchList[i]);\n  if (tempIndex == -1) {\n    noMoreMatchesForReplIndex[i]=true;\n  }\n else {\n    if (textIndex == -1 || tempIndex < textIndex) {\n      textIndex=tempIndex;\n      replaceIndex=i;\n    }\n  }\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3696, 
          "faulty": "replaceIndex=-1;", 
          "type": "InsertBefore", 
          "seed": "if (text == null || text.length() == 0 || searchList == null || searchList.length == 0 || replacementList == null || replacementList.length == 0) {\n  return text;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:12:49.793754110 -0500\n+++ /tmp/Arja_Defects4J_Lang_39/patches_x7iw/Patch_1027/patched/tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:19:05.689590887 -0500\n@@ -3663,7 +3663,8 @@\n \n         // no search strings found, we are done\n         if (textIndex == -1) {\n-            return text;\n+            replaceIndex = -1;\n+\t\t\treturn text;\n         }\n \n         int start = 0;\n@@ -3671,13 +3672,6 @@\n         // get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n         int increase = 0;\n \n-        // count the replacement text elements that are larger than their corresponding text being replaced\n-        for (int i = 0; i < searchList.length; i++) {\n-            int greater = replacementList[i].length() - searchList[i].length();\n-            if (greater > 0) {\n-                increase += 3 * greater; // assume 3 matches\n-            }\n-        }\n         // have upper-bound at 20% increase, then let Java take over\n         increase = Math.min(increase, text.length() / 5);\n \n@@ -3693,7 +3687,12 @@\n             start = textIndex + searchList[replaceIndex].length();\n \n             textIndex = -1;\n-            replaceIndex = -1;\n+            if (text == null || text.length() == 0 || searchList == null\n+\t\t\t\t\t|| searchList.length == 0 || replacementList == null\n+\t\t\t\t\t|| replacementList.length == 0) {\n+\t\t\t\treturn text;\n+\t\t\t}\n+\t\t\treplaceIndex = -1;\n             tempIndex = -1;\n             // find the next earliest match\n             // NOTE: logic mostly duplicated above START\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3675, 
          "faulty": "for (int i=0; i < searchList.length; i++) {\n  int greater=replacementList[i].length() - searchList[i].length();\n  if (greater > 0) {\n    increase+=3 * greater;\n  }\n}", 
          "type": "Replace", 
          "seed": "tempIndex=-1;"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3619, 
          "faulty": "if (timeToLive < 0) {\n  throw new IllegalStateException(\"TimeToLive of \" + timeToLive + \" is less than 0: \"+ text);\n}", 
          "type": "InsertBefore", 
          "seed": "if (text == null || text.length() == 0 || searchList == null || searchList.length == 0 || replacementList == null || replacementList.length == 0) {\n  return text;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:12:49.793754110 -0500\n+++ /tmp/Arja_Defects4J_Lang_39/patches_x7iw/Patch_616/patched/tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:17:33.873630506 -0500\n@@ -3615,7 +3615,12 @@\n             return text;\n         }\n \n-        // if recursing, this shouldnt be less than 0\n+        if (text == null || text.length() == 0 || searchList == null\n+\t\t\t\t|| searchList.length == 0 || replacementList == null\n+\t\t\t\t|| replacementList.length == 0) {\n+\t\t\treturn text;\n+\t\t}\n+\t\t// if recursing, this shouldnt be less than 0\n         if (timeToLive < 0) {\n             throw new IllegalStateException(\"TimeToLive of \" + timeToLive + \" is less than 0: \" + text);\n         }\n@@ -3671,13 +3676,7 @@\n         // get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n         int increase = 0;\n \n-        // count the replacement text elements that are larger than their corresponding text being replaced\n-        for (int i = 0; i < searchList.length; i++) {\n-            int greater = replacementList[i].length() - searchList[i].length();\n-            if (greater > 0) {\n-                increase += 3 * greater; // assume 3 matches\n-            }\n-        }\n+        tempIndex = -1;\n         // have upper-bound at 20% increase, then let Java take over\n         increase = Math.min(increase, text.length() / 5);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3675, 
          "faulty": "for (int i=0; i < searchList.length; i++) {\n  int greater=replacementList[i].length() - searchList[i].length();\n  if (greater > 0) {\n    increase+=3 * greater;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (searchLength != replacementLength) {\n  throw new IllegalArgumentException(\"Search and Replace array lengths don't match: \" + searchLength + \" vs \"+ replacementLength);\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3502, 
          "faulty": "return replaceEach(text,searchList,replacementList,false,0);", 
          "type": "InsertBefore", 
          "seed": "if (text == null || text.length() == 0 || searchList == null || searchList.length == 0 || replacementList == null || replacementList.length == 0) {\n  return text;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:12:49.793754110 -0500\n+++ /tmp/Arja_Defects4J_Lang_39/patches_x7iw/Patch_442/patched/tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:16:50.005649490 -0500\n@@ -3499,7 +3499,12 @@\n      * @since 2.4\n      */\n     public static String replaceEach(String text, String[] searchList, String[] replacementList) {\n-        return replaceEach(text, searchList, replacementList, false, 0);\n+        if (text == null || text.length() == 0 || searchList == null\n+\t\t\t\t|| searchList.length == 0 || replacementList == null\n+\t\t\t\t|| replacementList.length == 0) {\n+\t\t\treturn text;\n+\t\t}\n+\t\treturn replaceEach(text, searchList, replacementList, false, 0);\n     }\n \n     /**\n@@ -3671,13 +3676,6 @@\n         // get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n         int increase = 0;\n \n-        // count the replacement text elements that are larger than their corresponding text being replaced\n-        for (int i = 0; i < searchList.length; i++) {\n-            int greater = replacementList[i].length() - searchList[i].length();\n-            if (greater > 0) {\n-                increase += 3 * greater; // assume 3 matches\n-            }\n-        }\n         // have upper-bound at 20% increase, then let Java take over\n         increase = Math.min(increase, text.length() / 5);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3675, 
          "faulty": "for (int i=0; i < searchList.length; i++) {\n  int greater=replacementList[i].length() - searchList[i].length();\n  if (greater > 0) {\n    increase+=3 * greater;\n  }\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < searchLength; i++) {\n  if (noMoreMatchesForReplIndex[i] || searchList[i] == null || searchList[i].length() == 0 || replacementList[i] == null) {\n    continue;\n  }\n  tempIndex=text.indexOf(searchList[i]);\n  if (tempIndex == -1) {\n    noMoreMatchesForReplIndex[i]=true;\n  }\n else {\n    if (textIndex == -1 || tempIndex < textIndex) {\n      textIndex=tempIndex;\n      replaceIndex=i;\n    }\n  }\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3502, 
          "faulty": "return replaceEach(text,searchList,replacementList,false,0);", 
          "type": "Replace", 
          "seed": "return replaceEach(text,searchList,replacementList,false,0);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:12:49.793754110 -0500\n+++ /tmp/Arja_Defects4J_Lang_39/patches_x7iw/Patch_811/patched/tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:18:17.881611497 -0500\n@@ -3671,13 +3671,6 @@\n         // get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n         int increase = 0;\n \n-        // count the replacement text elements that are larger than their corresponding text being replaced\n-        for (int i = 0; i < searchList.length; i++) {\n-            int greater = replacementList[i].length() - searchList[i].length();\n-            if (greater > 0) {\n-                increase += 3 * greater; // assume 3 matches\n-            }\n-        }\n         // have upper-bound at 20% increase, then let Java take over\n         increase = Math.min(increase, text.length() / 5);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3675, 
          "faulty": "for (int i=0; i < searchList.length; i++) {\n  int greater=replacementList[i].length() - searchList[i].length();\n  if (greater > 0) {\n    increase+=3 * greater;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (searchLength != replacementLength) {\n  throw new IllegalArgumentException(\"Search and Replace array lengths don't match: \" + searchLength + \" vs \"+ replacementLength);\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3627, 
          "faulty": "if (searchLength != replacementLength) {\n  throw new IllegalArgumentException(\"Search and Replace array lengths don't match: \" + searchLength + \" vs \"+ replacementLength);\n}", 
          "type": "InsertBefore", 
          "seed": "if (searchLength != replacementLength) {\n  throw new IllegalArgumentException(\"Search and Replace array lengths don't match: \" + searchLength + \" vs \"+ replacementLength);\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:12:49.793754110 -0500\n+++ /tmp/Arja_Defects4J_Lang_39/patches_x7iw/Patch_1322/patched/tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:20:27.105555882 -0500\n@@ -3623,7 +3623,12 @@\n         int searchLength = searchList.length;\n         int replacementLength = replacementList.length;\n \n-        // make sure lengths are ok, these need to be equal\n+        if (searchLength != replacementLength) {\n+\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\"Search and Replace array lengths don't match: \"\n+\t\t\t\t\t\t\t+ searchLength + \" vs \" + replacementLength);\n+\t\t}\n+\t\t// make sure lengths are ok, these need to be equal\n         if (searchLength != replacementLength) {\n             throw new IllegalArgumentException(\"Search and Replace array lengths don't match: \"\n                 + searchLength\n@@ -3671,13 +3676,6 @@\n         // get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n         int increase = 0;\n \n-        // count the replacement text elements that are larger than their corresponding text being replaced\n-        for (int i = 0; i < searchList.length; i++) {\n-            int greater = replacementList[i].length() - searchList[i].length();\n-            if (greater > 0) {\n-                increase += 3 * greater; // assume 3 matches\n-            }\n-        }\n         // have upper-bound at 20% increase, then let Java take over\n         increase = Math.min(increase, text.length() / 5);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3654, 
          "faulty": "noMoreMatchesForReplIndex[i]=true;", 
          "type": "Delete", 
          "seed": "if (timeToLive < 0) {\n  throw new IllegalStateException(\"TimeToLive of \" + timeToLive + \" is less than 0: \"+ text);\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3675, 
          "faulty": "for (int i=0; i < searchList.length; i++) {\n  int greater=replacementList[i].length() - searchList[i].length();\n  if (greater > 0) {\n    increase+=3 * greater;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (timeToLive < 0) {\n  throw new IllegalStateException(\"TimeToLive of \" + timeToLive + \" is less than 0: \"+ text);\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:12:49.793754110 -0500\n+++ /tmp/Arja_Defects4J_Lang_39/patches_x7iw/Patch_342/patched/tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:16:05.129668947 -0500\n@@ -3651,7 +3651,6 @@\n \n             // see if we need to keep searching for this\n             if (tempIndex == -1) {\n-                noMoreMatchesForReplIndex[i] = true;\n             } else {\n                 if (textIndex == -1 || tempIndex < textIndex) {\n                     textIndex = tempIndex;\n@@ -3671,13 +3670,6 @@\n         // get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n         int increase = 0;\n \n-        // count the replacement text elements that are larger than their corresponding text being replaced\n-        for (int i = 0; i < searchList.length; i++) {\n-            int greater = replacementList[i].length() - searchList[i].length();\n-            if (greater > 0) {\n-                increase += 3 * greater; // assume 3 matches\n-            }\n-        }\n         // have upper-bound at 20% increase, then let Java take over\n         increase = Math.min(increase, text.length() / 5);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3645, 
          "faulty": "if (noMoreMatchesForReplIndex[i] || searchList[i] == null || searchList[i].length() == 0 || replacementList[i] == null) {\n  continue;\n}", 
          "type": "InsertBefore", 
          "seed": "if (searchLength != replacementLength) {\n  throw new IllegalArgumentException(\"Search and Replace array lengths don't match: \" + searchLength + \" vs \"+ replacementLength);\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3675, 
          "faulty": "for (int i=0; i < searchList.length; i++) {\n  int greater=replacementList[i].length() - searchList[i].length();\n  if (greater > 0) {\n    increase+=3 * greater;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (searchLength != replacementLength) {\n  throw new IllegalArgumentException(\"Search and Replace array lengths don't match: \" + searchLength + \" vs \"+ replacementLength);\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:12:49.793754110 -0500\n+++ /tmp/Arja_Defects4J_Lang_39/patches_x7iw/Patch_262/patched/tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:15:41.745679103 -0500\n@@ -3642,7 +3642,12 @@\n         // index of replace array that will replace the search string found\n         // NOTE: logic duplicated below START\n         for (int i = 0; i < searchLength; i++) {\n-            if (noMoreMatchesForReplIndex[i] || searchList[i] == null || \n+            if (searchLength != replacementLength) {\n+\t\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\t\"Search and Replace array lengths don't match: \"\n+\t\t\t\t\t\t\t\t+ searchLength + \" vs \" + replacementLength);\n+\t\t\t}\n+\t\t\tif (noMoreMatchesForReplIndex[i] || searchList[i] == null || \n                 searchList[i].length() == 0 || replacementList[i] == null) \n             {\n                 continue;\n@@ -3671,13 +3676,6 @@\n         // get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n         int increase = 0;\n \n-        // count the replacement text elements that are larger than their corresponding text being replaced\n-        for (int i = 0; i < searchList.length; i++) {\n-            int greater = replacementList[i].length() - searchList[i].length();\n-            if (greater > 0) {\n-                increase += 3 * greater; // assume 3 matches\n-            }\n-        }\n         // have upper-bound at 20% increase, then let Java take over\n         increase = Math.min(increase, text.length() / 5);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3666, 
          "faulty": "return text;", 
          "type": "InsertBefore", 
          "seed": "replaceIndex=-1;"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3675, 
          "faulty": "for (int i=0; i < searchList.length; i++) {\n  int greater=replacementList[i].length() - searchList[i].length();\n  if (greater > 0) {\n    increase+=3 * greater;\n  }\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < searchLength; i++) {\n  if (noMoreMatchesForReplIndex[i] || searchList[i] == null || searchList[i].length() == 0 || replacementList[i] == null) {\n    continue;\n  }\n  tempIndex=text.indexOf(searchList[i]);\n  if (tempIndex == -1) {\n    noMoreMatchesForReplIndex[i]=true;\n  }\n else {\n    if (textIndex == -1 || tempIndex < textIndex) {\n      textIndex=tempIndex;\n      replaceIndex=i;\n    }\n  }\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3627, 
          "faulty": "if (searchLength != replacementLength) {\n  throw new IllegalArgumentException(\"Search and Replace array lengths don't match: \" + searchLength + \" vs \"+ replacementLength);\n}", 
          "type": "Replace", 
          "seed": "if (text == null || text.length() == 0 || searchList == null || searchList.length == 0 || replacementList == null || replacementList.length == 0) {\n  return text;\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3696, 
          "faulty": "replaceIndex=-1;", 
          "type": "InsertBefore", 
          "seed": "if (text == null || text.length() == 0 || searchList == null || searchList.length == 0 || replacementList == null || replacementList.length == 0) {\n  return text;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:12:49.793754110 -0500\n+++ /tmp/Arja_Defects4J_Lang_39/patches_x7iw/Patch_1163/patched/tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:19:45.421573790 -0500\n@@ -3623,13 +3623,11 @@\n         int searchLength = searchList.length;\n         int replacementLength = replacementList.length;\n \n-        // make sure lengths are ok, these need to be equal\n-        if (searchLength != replacementLength) {\n-            throw new IllegalArgumentException(\"Search and Replace array lengths don't match: \"\n-                + searchLength\n-                + \" vs \"\n-                + replacementLength);\n-        }\n+        if (text == null || text.length() == 0 || searchList == null\n+\t\t\t\t|| searchList.length == 0 || replacementList == null\n+\t\t\t\t|| replacementList.length == 0) {\n+\t\t\treturn text;\n+\t\t}\n \n         // keep track of which still have matches\n         boolean[] noMoreMatchesForReplIndex = new boolean[searchLength];\n@@ -3663,7 +3661,8 @@\n \n         // no search strings found, we are done\n         if (textIndex == -1) {\n-            return text;\n+            replaceIndex = -1;\n+\t\t\treturn text;\n         }\n \n         int start = 0;\n@@ -3671,13 +3670,6 @@\n         // get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n         int increase = 0;\n \n-        // count the replacement text elements that are larger than their corresponding text being replaced\n-        for (int i = 0; i < searchList.length; i++) {\n-            int greater = replacementList[i].length() - searchList[i].length();\n-            if (greater > 0) {\n-                increase += 3 * greater; // assume 3 matches\n-            }\n-        }\n         // have upper-bound at 20% increase, then let Java take over\n         increase = Math.min(increase, text.length() / 5);\n \n@@ -3693,7 +3685,12 @@\n             start = textIndex + searchList[replaceIndex].length();\n \n             textIndex = -1;\n-            replaceIndex = -1;\n+            if (text == null || text.length() == 0 || searchList == null\n+\t\t\t\t\t|| searchList.length == 0 || replacementList == null\n+\t\t\t\t\t|| replacementList.length == 0) {\n+\t\t\t\treturn text;\n+\t\t\t}\n+\t\t\treplaceIndex = -1;\n             tempIndex = -1;\n             // find the next earliest match\n             // NOTE: logic mostly duplicated above START\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3624, 
          "faulty": "int replacementLength=replacementList.length;", 
          "type": "InsertBefore", 
          "seed": "if (timeToLive < 0) {\n  throw new IllegalStateException(\"TimeToLive of \" + timeToLive + \" is less than 0: \"+ text);\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3675, 
          "faulty": "for (int i=0; i < searchList.length; i++) {\n  int greater=replacementList[i].length() - searchList[i].length();\n  if (greater > 0) {\n    increase+=3 * greater;\n  }\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < searchLength; i++) {\n  if (noMoreMatchesForReplIndex[i] || searchList[i] == null || searchList[i].length() == 0 || replacementList[i] == null) {\n    continue;\n  }\n  tempIndex=text.indexOf(searchList[i]);\n  if (tempIndex == -1) {\n    noMoreMatchesForReplIndex[i]=true;\n  }\n else {\n    if (textIndex == -1 || tempIndex < textIndex) {\n      textIndex=tempIndex;\n      replaceIndex=i;\n    }\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:12:49.793754110 -0500\n+++ /tmp/Arja_Defects4J_Lang_39/patches_x7iw/Patch_440/patched/tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:16:49.737649606 -0500\n@@ -3621,7 +3621,11 @@\n         }\n \n         int searchLength = searchList.length;\n-        int replacementLength = replacementList.length;\n+        if (timeToLive < 0) {\n+\t\t\tthrow new IllegalStateException(\"TimeToLive of \" + timeToLive\n+\t\t\t\t\t+ \" is less than 0: \" + text);\n+\t\t}\n+\t\tint replacementLength = replacementList.length;\n \n         // make sure lengths are ok, these need to be equal\n         if (searchLength != replacementLength) {\n@@ -3671,13 +3675,6 @@\n         // get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n         int increase = 0;\n \n-        // count the replacement text elements that are larger than their corresponding text being replaced\n-        for (int i = 0; i < searchList.length; i++) {\n-            int greater = replacementList[i].length() - searchList[i].length();\n-            if (greater > 0) {\n-                increase += 3 * greater; // assume 3 matches\n-            }\n-        }\n         // have upper-bound at 20% increase, then let Java take over\n         increase = Math.min(increase, text.length() / 5);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3675, 
          "faulty": "for (int i=0; i < searchList.length; i++) {\n  int greater=replacementList[i].length() - searchList[i].length();\n  if (greater > 0) {\n    increase+=3 * greater;\n  }\n}", 
          "type": "Delete", 
          "seed": "start=0;"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3696, 
          "faulty": "replaceIndex=-1;", 
          "type": "Delete", 
          "seed": "buf.append(\"Range[\");"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:12:49.793754110 -0500\n+++ /tmp/Arja_Defects4J_Lang_39/patches_x7iw/Patch_603/patched/tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:17:31.021631739 -0500\n@@ -3671,13 +3671,6 @@\n         // get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n         int increase = 0;\n \n-        // count the replacement text elements that are larger than their corresponding text being replaced\n-        for (int i = 0; i < searchList.length; i++) {\n-            int greater = replacementList[i].length() - searchList[i].length();\n-            if (greater > 0) {\n-                increase += 3 * greater; // assume 3 matches\n-            }\n-        }\n         // have upper-bound at 20% increase, then let Java take over\n         increase = Math.min(increase, text.length() / 5);\n \n@@ -3693,7 +3686,6 @@\n             start = textIndex + searchList[replaceIndex].length();\n \n             textIndex = -1;\n-            replaceIndex = -1;\n             tempIndex = -1;\n             // find the next earliest match\n             // NOTE: logic mostly duplicated above START\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3675, 
          "faulty": "for (int i=0; i < searchList.length; i++) {\n  int greater=replacementList[i].length() - searchList[i].length();\n  if (greater > 0) {\n    increase+=3 * greater;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (searchLength != replacementLength) {\n  throw new IllegalArgumentException(\"Search and Replace array lengths don't match: \" + searchLength + \" vs \"+ replacementLength);\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3696, 
          "faulty": "replaceIndex=-1;", 
          "type": "Replace", 
          "seed": "if (text == null || text.length() == 0 || searchList == null || searchList.length == 0 || replacementList == null || replacementList.length == 0) {\n  return text;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:12:49.793754110 -0500\n+++ /tmp/Arja_Defects4J_Lang_39/patches_x7iw/Patch_591/patched/tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:17:28.681632751 -0500\n@@ -3671,13 +3671,6 @@\n         // get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n         int increase = 0;\n \n-        // count the replacement text elements that are larger than their corresponding text being replaced\n-        for (int i = 0; i < searchList.length; i++) {\n-            int greater = replacementList[i].length() - searchList[i].length();\n-            if (greater > 0) {\n-                increase += 3 * greater; // assume 3 matches\n-            }\n-        }\n         // have upper-bound at 20% increase, then let Java take over\n         increase = Math.min(increase, text.length() / 5);\n \n@@ -3693,7 +3686,11 @@\n             start = textIndex + searchList[replaceIndex].length();\n \n             textIndex = -1;\n-            replaceIndex = -1;\n+            if (text == null || text.length() == 0 || searchList == null\n+\t\t\t\t\t|| searchList.length == 0 || replacementList == null\n+\t\t\t\t\t|| replacementList.length == 0) {\n+\t\t\t\treturn text;\n+\t\t\t}\n             tempIndex = -1;\n             // find the next earliest match\n             // NOTE: logic mostly duplicated above START\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3675, 
          "faulty": "for (int i=0; i < searchList.length; i++) {\n  int greater=replacementList[i].length() - searchList[i].length();\n  if (greater > 0) {\n    increase+=3 * greater;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (searchLength != replacementLength) {\n  throw new IllegalArgumentException(\"Search and Replace array lengths don't match: \" + searchLength + \" vs \"+ replacementLength);\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3623, 
          "faulty": "int searchLength=searchList.length;", 
          "type": "InsertBefore", 
          "seed": "if (text == null || text.length() == 0 || searchList == null || searchList.length == 0 || replacementList == null || replacementList.length == 0) {\n  return text;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:12:49.793754110 -0500\n+++ /tmp/Arja_Defects4J_Lang_39/patches_x7iw/Patch_709/patched/tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:17:54.477621602 -0500\n@@ -3620,7 +3620,12 @@\n             throw new IllegalStateException(\"TimeToLive of \" + timeToLive + \" is less than 0: \" + text);\n         }\n \n-        int searchLength = searchList.length;\n+        if (text == null || text.length() == 0 || searchList == null\n+\t\t\t\t|| searchList.length == 0 || replacementList == null\n+\t\t\t\t|| replacementList.length == 0) {\n+\t\t\treturn text;\n+\t\t}\n+\t\tint searchLength = searchList.length;\n         int replacementLength = replacementList.length;\n \n         // make sure lengths are ok, these need to be equal\n@@ -3671,13 +3676,6 @@\n         // get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n         int increase = 0;\n \n-        // count the replacement text elements that are larger than their corresponding text being replaced\n-        for (int i = 0; i < searchList.length; i++) {\n-            int greater = replacementList[i].length() - searchList[i].length();\n-            if (greater > 0) {\n-                increase += 3 * greater; // assume 3 matches\n-            }\n-        }\n         // have upper-bound at 20% increase, then let Java take over\n         increase = Math.min(increase, text.length() / 5);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3677, 
          "faulty": "if (greater > 0) {\n  increase+=3 * greater;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3675, 
          "faulty": "for (int i=0; i < searchList.length; i++) {\n  int greater=replacementList[i].length() - searchList[i].length();\n  if (greater > 0) {\n    increase+=3 * greater;\n  }\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < searchLength; i++) {\n  if (noMoreMatchesForReplIndex[i] || searchList[i] == null || searchList[i].length() == 0 || replacementList[i] == null) {\n    continue;\n  }\n  tempIndex=text.indexOf(searchList[i]);\n  if (tempIndex == -1) {\n    noMoreMatchesForReplIndex[i]=true;\n  }\n else {\n    if (textIndex == -1 || tempIndex < textIndex) {\n      textIndex=tempIndex;\n      replaceIndex=i;\n    }\n  }\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3623, 
          "faulty": "int searchLength=searchList.length;", 
          "type": "InsertBefore", 
          "seed": "if (text == null || text.length() == 0 || searchList == null || searchList.length == 0 || replacementList == null || replacementList.length == 0) {\n  return text;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:12:49.793754110 -0500\n+++ /tmp/Arja_Defects4J_Lang_39/patches_x7iw/Patch_1864/patched/tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:23:54.133467369 -0500\n@@ -3620,7 +3620,12 @@\n             throw new IllegalStateException(\"TimeToLive of \" + timeToLive + \" is less than 0: \" + text);\n         }\n \n-        int searchLength = searchList.length;\n+        if (text == null || text.length() == 0 || searchList == null\n+\t\t\t\t|| searchList.length == 0 || replacementList == null\n+\t\t\t\t|| replacementList.length == 0) {\n+\t\t\treturn text;\n+\t\t}\n+\t\tint searchLength = searchList.length;\n         int replacementLength = replacementList.length;\n \n         // make sure lengths are ok, these need to be equal\n@@ -3671,13 +3676,6 @@\n         // get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n         int increase = 0;\n \n-        // count the replacement text elements that are larger than their corresponding text being replaced\n-        for (int i = 0; i < searchList.length; i++) {\n-            int greater = replacementList[i].length() - searchList[i].length();\n-            if (greater > 0) {\n-                increase += 3 * greater; // assume 3 matches\n-            }\n-        }\n         // have upper-bound at 20% increase, then let Java take over\n         increase = Math.min(increase, text.length() / 5);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3675, 
          "faulty": "for (int i=0; i < searchList.length; i++) {\n  int greater=replacementList[i].length() - searchList[i].length();\n  if (greater > 0) {\n    increase+=3 * greater;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (searchLength != replacementLength) {\n  throw new IllegalArgumentException(\"Search and Replace array lengths don't match: \" + searchLength + \" vs \"+ replacementLength);\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3502, 
          "faulty": "return replaceEach(text,searchList,replacementList,false,0);", 
          "type": "InsertBefore", 
          "seed": "if (text == null || text.length() == 0 || searchList == null || searchList.length == 0 || replacementList == null || replacementList.length == 0) {\n  return text;\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3697, 
          "faulty": "tempIndex=-1;", 
          "type": "Replace", 
          "seed": "replaceIndex=-1;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:12:49.793754110 -0500\n+++ /tmp/Arja_Defects4J_Lang_39/patches_x7iw/Patch_1678/patched/tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:23:02.773489263 -0500\n@@ -3499,7 +3499,12 @@\n      * @since 2.4\n      */\n     public static String replaceEach(String text, String[] searchList, String[] replacementList) {\n-        return replaceEach(text, searchList, replacementList, false, 0);\n+        if (text == null || text.length() == 0 || searchList == null\n+\t\t\t\t|| searchList.length == 0 || replacementList == null\n+\t\t\t\t|| replacementList.length == 0) {\n+\t\t\treturn text;\n+\t\t}\n+\t\treturn replaceEach(text, searchList, replacementList, false, 0);\n     }\n \n     /**\n@@ -3671,13 +3676,6 @@\n         // get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n         int increase = 0;\n \n-        // count the replacement text elements that are larger than their corresponding text being replaced\n-        for (int i = 0; i < searchList.length; i++) {\n-            int greater = replacementList[i].length() - searchList[i].length();\n-            if (greater > 0) {\n-                increase += 3 * greater; // assume 3 matches\n-            }\n-        }\n         // have upper-bound at 20% increase, then let Java take over\n         increase = Math.min(increase, text.length() / 5);\n \n@@ -3694,7 +3692,7 @@\n \n             textIndex = -1;\n             replaceIndex = -1;\n-            tempIndex = -1;\n+            replaceIndex = -1;\n             // find the next earliest match\n             // NOTE: logic mostly duplicated above START\n             for (int i = 0; i < searchLength; i++) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3677, 
          "faulty": "if (greater > 0) {\n  increase+=3 * greater;\n}", 
          "type": "Replace", 
          "seed": "replaceIndex=-1;"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3675, 
          "faulty": "for (int i=0; i < searchList.length; i++) {\n  int greater=replacementList[i].length() - searchList[i].length();\n  if (greater > 0) {\n    increase+=3 * greater;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (searchLength != replacementLength) {\n  throw new IllegalArgumentException(\"Search and Replace array lengths don't match: \" + searchLength + \" vs \"+ replacementLength);\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3502, 
          "faulty": "return replaceEach(text,searchList,replacementList,false,0);", 
          "type": "Replace", 
          "seed": "return replaceEach(text,searchList,replacementList,false,0);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:12:49.793754110 -0500\n+++ /tmp/Arja_Defects4J_Lang_39/patches_x7iw/Patch_1276/patched/tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:20:15.517560858 -0500\n@@ -3671,13 +3671,6 @@\n         // get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n         int increase = 0;\n \n-        // count the replacement text elements that are larger than their corresponding text being replaced\n-        for (int i = 0; i < searchList.length; i++) {\n-            int greater = replacementList[i].length() - searchList[i].length();\n-            if (greater > 0) {\n-                increase += 3 * greater; // assume 3 matches\n-            }\n-        }\n         // have upper-bound at 20% increase, then let Java take over\n         increase = Math.min(increase, text.length() / 5);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3612, 
          "faulty": "if (text == null || text.length() == 0 || searchList == null || searchList.length == 0 || replacementList == null || replacementList.length == 0) {\n  return text;\n}", 
          "type": "InsertBefore", 
          "seed": "if (timeToLive < 0) {\n  throw new IllegalStateException(\"TimeToLive of \" + timeToLive + \" is less than 0: \"+ text);\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3675, 
          "faulty": "for (int i=0; i < searchList.length; i++) {\n  int greater=replacementList[i].length() - searchList[i].length();\n  if (greater > 0) {\n    increase+=3 * greater;\n  }\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < searchLength; i++) {\n  if (noMoreMatchesForReplIndex[i] || searchList[i] == null || searchList[i].length() == 0 || replacementList[i] == null) {\n    continue;\n  }\n  tempIndex=text.indexOf(searchList[i]);\n  if (tempIndex == -1) {\n    noMoreMatchesForReplIndex[i]=true;\n  }\n else {\n    if (textIndex == -1 || tempIndex < textIndex) {\n      textIndex=tempIndex;\n      replaceIndex=i;\n    }\n  }\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3691, 
          "faulty": "buf.append(replacementList[replaceIndex]);", 
          "type": "InsertBefore", 
          "seed": "start=' ';"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:12:49.793754110 -0500\n+++ /tmp/Arja_Defects4J_Lang_39/patches_x7iw/Patch_1156/patched/tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:19:44.177574325 -0500\n@@ -3609,7 +3609,11 @@\n         // mchyzer Performance note: This creates very few new objects (one major goal)\n         // let me know if there are performance requests, we can create a harness to measure\n \n-        if (text == null || text.length() == 0 || searchList == null || \n+        if (timeToLive < 0) {\n+\t\t\tthrow new IllegalStateException(\"TimeToLive of \" + timeToLive\n+\t\t\t\t\t+ \" is less than 0: \" + text);\n+\t\t}\n+\t\tif (text == null || text.length() == 0 || searchList == null || \n             searchList.length == 0 || replacementList == null || replacementList.length == 0) \n         {\n             return text;\n@@ -3671,13 +3675,6 @@\n         // get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n         int increase = 0;\n \n-        // count the replacement text elements that are larger than their corresponding text being replaced\n-        for (int i = 0; i < searchList.length; i++) {\n-            int greater = replacementList[i].length() - searchList[i].length();\n-            if (greater > 0) {\n-                increase += 3 * greater; // assume 3 matches\n-            }\n-        }\n         // have upper-bound at 20% increase, then let Java take over\n         increase = Math.min(increase, text.length() / 5);\n \n@@ -3688,7 +3685,8 @@\n             for (int i = start; i < textIndex; i++) {\n                 buf.append(text.charAt(i));\n             }\n-            buf.append(replacementList[replaceIndex]);\n+            start = ' ';\n+\t\t\tbuf.append(replacementList[replaceIndex]);\n \n             start = textIndex + searchList[replaceIndex].length();\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3675, 
          "faulty": "for (int i=0; i < searchList.length; i++) {\n  int greater=replacementList[i].length() - searchList[i].length();\n  if (greater > 0) {\n    increase+=3 * greater;\n  }\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < searchLength; i++) {\n  if (noMoreMatchesForReplIndex[i] || searchList[i] == null || searchList[i].length() == 0 || replacementList[i] == null) {\n    continue;\n  }\n  tempIndex=text.indexOf(searchList[i]);\n  if (tempIndex == -1) {\n    noMoreMatchesForReplIndex[i]=true;\n  }\n else {\n    if (textIndex == -1 || tempIndex < textIndex) {\n      textIndex=tempIndex;\n      replaceIndex=i;\n    }\n  }\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3684, 
          "faulty": "StringBuilder buf=new StringBuilder(text.length() + increase);", 
          "type": "InsertBefore", 
          "seed": "if (text == null || text.length() == 0 || searchList == null || searchList.length == 0 || replacementList == null || replacementList.length == 0) {\n  return text;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:12:49.793754110 -0500\n+++ /tmp/Arja_Defects4J_Lang_39/patches_x7iw/Patch_656/patched/tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:17:42.553626754 -0500\n@@ -3671,17 +3671,15 @@\n         // get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n         int increase = 0;\n \n-        // count the replacement text elements that are larger than their corresponding text being replaced\n-        for (int i = 0; i < searchList.length; i++) {\n-            int greater = replacementList[i].length() - searchList[i].length();\n-            if (greater > 0) {\n-                increase += 3 * greater; // assume 3 matches\n-            }\n-        }\n         // have upper-bound at 20% increase, then let Java take over\n         increase = Math.min(increase, text.length() / 5);\n \n-        StringBuilder buf = new StringBuilder(text.length() + increase);\n+        if (text == null || text.length() == 0 || searchList == null\n+\t\t\t\t|| searchList.length == 0 || replacementList == null\n+\t\t\t\t|| replacementList.length == 0) {\n+\t\t\treturn text;\n+\t\t}\n+\t\tStringBuilder buf = new StringBuilder(text.length() + increase);\n \n         while (textIndex != -1) {\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3675, 
          "faulty": "for (int i=0; i < searchList.length; i++) {\n  int greater=replacementList[i].length() - searchList[i].length();\n  if (greater > 0) {\n    increase+=3 * greater;\n  }\n}", 
          "type": "Replace", 
          "seed": "increase=Math.min(increase,text.length() / 5);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:12:49.793754110 -0500\n+++ /tmp/Arja_Defects4J_Lang_39/patches_x7iw/Patch_379/patched/tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:16:31.205657637 -0500\n@@ -3671,13 +3671,7 @@\n         // get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n         int increase = 0;\n \n-        // count the replacement text elements that are larger than their corresponding text being replaced\n-        for (int i = 0; i < searchList.length; i++) {\n-            int greater = replacementList[i].length() - searchList[i].length();\n-            if (greater > 0) {\n-                increase += 3 * greater; // assume 3 matches\n-            }\n-        }\n+        increase = Math.min(increase, text.length() / 5);\n         // have upper-bound at 20% increase, then let Java take over\n         increase = Math.min(increase, text.length() / 5);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3700, 
          "faulty": "for (int i=0; i < searchLength; i++) {\n  if (noMoreMatchesForReplIndex[i] || searchList[i] == null || searchList[i].length() == 0 || replacementList[i] == null) {\n    continue;\n  }\n  tempIndex=text.indexOf(searchList[i],start);\n  if (tempIndex == -1) {\n    noMoreMatchesForReplIndex[i]=true;\n  }\n else {\n    if (textIndex == -1 || tempIndex < textIndex) {\n      textIndex=tempIndex;\n      replaceIndex=i;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "while (textIndex != -1) {\n  for (int i=start; i < textIndex; i++) {\n    buf.append(text.charAt(i));\n  }\n  buf.append(replacementList[replaceIndex]);\n  start=textIndex + searchList[replaceIndex].length();\n  textIndex=-1;\n  replaceIndex=-1;\n  tempIndex=-1;\n  for (int i=0; i < searchLength; i++) {\n    if (noMoreMatchesForReplIndex[i] || searchList[i] == null || searchList[i].length() == 0 || replacementList[i] == null) {\n      continue;\n    }\n    tempIndex=text.indexOf(searchList[i],start);\n    if (tempIndex == -1) {\n      noMoreMatchesForReplIndex[i]=true;\n    }\n else {\n      if (textIndex == -1 || tempIndex < textIndex) {\n        textIndex=tempIndex;\n        replaceIndex=i;\n      }\n    }\n  }\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3675, 
          "faulty": "for (int i=0; i < searchList.length; i++) {\n  int greater=replacementList[i].length() - searchList[i].length();\n  if (greater > 0) {\n    increase+=3 * greater;\n  }\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < searchLength; i++) {\n  if (noMoreMatchesForReplIndex[i] || searchList[i] == null || searchList[i].length() == 0 || replacementList[i] == null) {\n    continue;\n  }\n  tempIndex=text.indexOf(searchList[i]);\n  if (tempIndex == -1) {\n    noMoreMatchesForReplIndex[i]=true;\n  }\n else {\n    if (textIndex == -1 || tempIndex < textIndex) {\n      textIndex=tempIndex;\n      replaceIndex=i;\n    }\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:12:49.793754110 -0500\n+++ /tmp/Arja_Defects4J_Lang_39/patches_x7iw/Patch_1578/patched/tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:22:20.633507258 -0500\n@@ -3671,13 +3671,6 @@\n         // get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n         int increase = 0;\n \n-        // count the replacement text elements that are larger than their corresponding text being replaced\n-        for (int i = 0; i < searchList.length; i++) {\n-            int greater = replacementList[i].length() - searchList[i].length();\n-            if (greater > 0) {\n-                increase += 3 * greater; // assume 3 matches\n-            }\n-        }\n         // have upper-bound at 20% increase, then let Java take over\n         increase = Math.min(increase, text.length() / 5);\n \n@@ -3695,7 +3688,33 @@\n             textIndex = -1;\n             replaceIndex = -1;\n             tempIndex = -1;\n-            // find the next earliest match\n+            while (textIndex != -1) {\n+\t\t\t\tfor (int i = start; i < textIndex; i++) {\n+\t\t\t\t\tbuf.append(text.charAt(i));\n+\t\t\t\t}\n+\t\t\t\tbuf.append(replacementList[replaceIndex]);\n+\t\t\t\tstart = textIndex + searchList[replaceIndex].length();\n+\t\t\t\ttextIndex = -1;\n+\t\t\t\treplaceIndex = -1;\n+\t\t\t\ttempIndex = -1;\n+\t\t\t\tfor (int i = 0; i < searchLength; i++) {\n+\t\t\t\t\tif (noMoreMatchesForReplIndex[i] || searchList[i] == null\n+\t\t\t\t\t\t\t|| searchList[i].length() == 0\n+\t\t\t\t\t\t\t|| replacementList[i] == null) {\n+\t\t\t\t\t\tcontinue;\n+\t\t\t\t\t}\n+\t\t\t\t\ttempIndex = text.indexOf(searchList[i], start);\n+\t\t\t\t\tif (tempIndex == -1) {\n+\t\t\t\t\t\tnoMoreMatchesForReplIndex[i] = true;\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tif (textIndex == -1 || tempIndex < textIndex) {\n+\t\t\t\t\t\t\ttextIndex = tempIndex;\n+\t\t\t\t\t\t\treplaceIndex = i;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\t// find the next earliest match\n             // NOTE: logic mostly duplicated above START\n             for (int i = 0; i < searchLength; i++) {\n                 if (noMoreMatchesForReplIndex[i] || searchList[i] == null || \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3677, 
          "faulty": "if (greater > 0) {\n  increase+=3 * greater;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3675, 
          "faulty": "for (int i=0; i < searchList.length; i++) {\n  int greater=replacementList[i].length() - searchList[i].length();\n  if (greater > 0) {\n    increase+=3 * greater;\n  }\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < searchLength; i++) {\n  if (noMoreMatchesForReplIndex[i] || searchList[i] == null || searchList[i].length() == 0 || replacementList[i] == null) {\n    continue;\n  }\n  tempIndex=text.indexOf(searchList[i]);\n  if (tempIndex == -1) {\n    noMoreMatchesForReplIndex[i]=true;\n  }\n else {\n    if (textIndex == -1 || tempIndex < textIndex) {\n      textIndex=tempIndex;\n      replaceIndex=i;\n    }\n  }\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3672, 
          "faulty": "int increase=0;", 
          "type": "InsertBefore", 
          "seed": "for (int i=0; i < searchLength; i++) {\n  if (noMoreMatchesForReplIndex[i] || searchList[i] == null || searchList[i].length() == 0 || replacementList[i] == null) {\n    continue;\n  }\n  tempIndex=text.indexOf(searchList[i]);\n  if (tempIndex == -1) {\n    noMoreMatchesForReplIndex[i]=true;\n  }\n else {\n    if (textIndex == -1 || tempIndex < textIndex) {\n      textIndex=tempIndex;\n      replaceIndex=i;\n    }\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:12:49.793754110 -0500\n+++ /tmp/Arja_Defects4J_Lang_39/patches_x7iw/Patch_1159/patched/tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:19:44.681574108 -0500\n@@ -3668,16 +3668,25 @@\n \n         int start = 0;\n \n-        // get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n+        for (int i = 0; i < searchLength; i++) {\n+\t\t\tif (noMoreMatchesForReplIndex[i] || searchList[i] == null\n+\t\t\t\t\t|| searchList[i].length() == 0\n+\t\t\t\t\t|| replacementList[i] == null) {\n+\t\t\t\tcontinue;\n+\t\t\t}\n+\t\t\ttempIndex = text.indexOf(searchList[i]);\n+\t\t\tif (tempIndex == -1) {\n+\t\t\t\tnoMoreMatchesForReplIndex[i] = true;\n+\t\t\t} else {\n+\t\t\t\tif (textIndex == -1 || tempIndex < textIndex) {\n+\t\t\t\t\ttextIndex = tempIndex;\n+\t\t\t\t\treplaceIndex = i;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\t// get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n         int increase = 0;\n \n-        // count the replacement text elements that are larger than their corresponding text being replaced\n-        for (int i = 0; i < searchList.length; i++) {\n-            int greater = replacementList[i].length() - searchList[i].length();\n-            if (greater > 0) {\n-                increase += 3 * greater; // assume 3 matches\n-            }\n-        }\n         // have upper-bound at 20% increase, then let Java take over\n         increase = Math.min(increase, text.length() / 5);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3669, 
          "faulty": "int start=0;", 
          "type": "InsertBefore", 
          "seed": "textIndex=tempIndex;"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3675, 
          "faulty": "for (int i=0; i < searchList.length; i++) {\n  int greater=replacementList[i].length() - searchList[i].length();\n  if (greater > 0) {\n    increase+=3 * greater;\n  }\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < searchLength; i++) {\n  if (noMoreMatchesForReplIndex[i] || searchList[i] == null || searchList[i].length() == 0 || replacementList[i] == null) {\n    continue;\n  }\n  tempIndex=text.indexOf(searchList[i]);\n  if (tempIndex == -1) {\n    noMoreMatchesForReplIndex[i]=true;\n  }\n else {\n    if (textIndex == -1 || tempIndex < textIndex) {\n      textIndex=tempIndex;\n      replaceIndex=i;\n    }\n  }\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3672, 
          "faulty": "int increase=0;", 
          "type": "InsertBefore", 
          "seed": "for (int i=0; i < searchLength; i++) {\n  if (noMoreMatchesForReplIndex[i] || searchList[i] == null || searchList[i].length() == 0 || replacementList[i] == null) {\n    continue;\n  }\n  tempIndex=text.indexOf(searchList[i]);\n  if (tempIndex == -1) {\n    noMoreMatchesForReplIndex[i]=true;\n  }\n else {\n    if (textIndex == -1 || tempIndex < textIndex) {\n      textIndex=tempIndex;\n      replaceIndex=i;\n    }\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:12:49.793754110 -0500\n+++ /tmp/Arja_Defects4J_Lang_39/patches_x7iw/Patch_981/patched/tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:18:55.581595242 -0500\n@@ -3666,18 +3666,28 @@\n             return text;\n         }\n \n-        int start = 0;\n+        textIndex = tempIndex;\n+\t\tint start = 0;\n \n-        // get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n+        for (int i = 0; i < searchLength; i++) {\n+\t\t\tif (noMoreMatchesForReplIndex[i] || searchList[i] == null\n+\t\t\t\t\t|| searchList[i].length() == 0\n+\t\t\t\t\t|| replacementList[i] == null) {\n+\t\t\t\tcontinue;\n+\t\t\t}\n+\t\t\ttempIndex = text.indexOf(searchList[i]);\n+\t\t\tif (tempIndex == -1) {\n+\t\t\t\tnoMoreMatchesForReplIndex[i] = true;\n+\t\t\t} else {\n+\t\t\t\tif (textIndex == -1 || tempIndex < textIndex) {\n+\t\t\t\t\ttextIndex = tempIndex;\n+\t\t\t\t\treplaceIndex = i;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\t// get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n         int increase = 0;\n \n-        // count the replacement text elements that are larger than their corresponding text being replaced\n-        for (int i = 0; i < searchList.length; i++) {\n-            int greater = replacementList[i].length() - searchList[i].length();\n-            if (greater > 0) {\n-                increase += 3 * greater; // assume 3 matches\n-            }\n-        }\n         // have upper-bound at 20% increase, then let Java take over\n         increase = Math.min(increase, text.length() / 5);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3675, 
          "faulty": "for (int i=0; i < searchList.length; i++) {\n  int greater=replacementList[i].length() - searchList[i].length();\n  if (greater > 0) {\n    increase+=3 * greater;\n  }\n}", 
          "type": "Replace", 
          "seed": "increase=Math.min(increase,text.length() / 5);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3639, 
          "faulty": "int replaceIndex=-1;", 
          "type": "InsertBefore", 
          "seed": "if (searchLength != replacementLength) {\n  throw new IllegalArgumentException(\"Search and Replace array lengths don't match: \" + searchLength + \" vs \"+ replacementLength);\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:12:49.793754110 -0500\n+++ /tmp/Arja_Defects4J_Lang_39/patches_x7iw/Patch_1580/patched/tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:22:20.885507150 -0500\n@@ -3636,7 +3636,12 @@\n \n         // index on index that the match was found\n         int textIndex = -1;\n-        int replaceIndex = -1;\n+        if (searchLength != replacementLength) {\n+\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\"Search and Replace array lengths don't match: \"\n+\t\t\t\t\t\t\t+ searchLength + \" vs \" + replacementLength);\n+\t\t}\n+\t\tint replaceIndex = -1;\n         int tempIndex = -1;\n \n         // index of replace array that will replace the search string found\n@@ -3671,13 +3676,7 @@\n         // get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n         int increase = 0;\n \n-        // count the replacement text elements that are larger than their corresponding text being replaced\n-        for (int i = 0; i < searchList.length; i++) {\n-            int greater = replacementList[i].length() - searchList[i].length();\n-            if (greater > 0) {\n-                increase += 3 * greater; // assume 3 matches\n-            }\n-        }\n+        increase = Math.min(increase, text.length() / 5);\n         // have upper-bound at 20% increase, then let Java take over\n         increase = Math.min(increase, text.length() / 5);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3675, 
          "faulty": "for (int i=0; i < searchList.length; i++) {\n  int greater=replacementList[i].length() - searchList[i].length();\n  if (greater > 0) {\n    increase+=3 * greater;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (searchLength != replacementLength) {\n  throw new IllegalArgumentException(\"Search and Replace array lengths don't match: \" + searchLength + \" vs \"+ replacementLength);\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3619, 
          "faulty": "if (timeToLive < 0) {\n  throw new IllegalStateException(\"TimeToLive of \" + timeToLive + \" is less than 0: \"+ text);\n}", 
          "type": "InsertBefore", 
          "seed": "if (text == null || text.length() == 0 || searchList == null || searchList.length == 0 || replacementList == null || replacementList.length == 0) {\n  return text;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:12:49.793754110 -0500\n+++ /tmp/Arja_Defects4J_Lang_39/patches_x7iw/Patch_873/patched/tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:18:31.285605715 -0500\n@@ -3615,7 +3615,12 @@\n             return text;\n         }\n \n-        // if recursing, this shouldnt be less than 0\n+        if (text == null || text.length() == 0 || searchList == null\n+\t\t\t\t|| searchList.length == 0 || replacementList == null\n+\t\t\t\t|| replacementList.length == 0) {\n+\t\t\treturn text;\n+\t\t}\n+\t\t// if recursing, this shouldnt be less than 0\n         if (timeToLive < 0) {\n             throw new IllegalStateException(\"TimeToLive of \" + timeToLive + \" is less than 0: \" + text);\n         }\n@@ -3671,13 +3676,6 @@\n         // get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n         int increase = 0;\n \n-        // count the replacement text elements that are larger than their corresponding text being replaced\n-        for (int i = 0; i < searchList.length; i++) {\n-            int greater = replacementList[i].length() - searchList[i].length();\n-            if (greater > 0) {\n-                increase += 3 * greater; // assume 3 matches\n-            }\n-        }\n         // have upper-bound at 20% increase, then let Java take over\n         increase = Math.min(increase, text.length() / 5);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3666, 
          "faulty": "return text;", 
          "type": "InsertBefore", 
          "seed": "replaceIndex=-1;"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3675, 
          "faulty": "for (int i=0; i < searchList.length; i++) {\n  int greater=replacementList[i].length() - searchList[i].length();\n  if (greater > 0) {\n    increase+=3 * greater;\n  }\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < searchLength; i++) {\n  if (noMoreMatchesForReplIndex[i] || searchList[i] == null || searchList[i].length() == 0 || replacementList[i] == null) {\n    continue;\n  }\n  tempIndex=text.indexOf(searchList[i]);\n  if (tempIndex == -1) {\n    noMoreMatchesForReplIndex[i]=true;\n  }\n else {\n    if (textIndex == -1 || tempIndex < textIndex) {\n      textIndex=tempIndex;\n      replaceIndex=i;\n    }\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:12:49.793754110 -0500\n+++ /tmp/Arja_Defects4J_Lang_39/patches_x7iw/Patch_409/patched/tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:16:43.125652471 -0500\n@@ -3663,7 +3663,8 @@\n \n         // no search strings found, we are done\n         if (textIndex == -1) {\n-            return text;\n+            replaceIndex = -1;\n+\t\t\treturn text;\n         }\n \n         int start = 0;\n@@ -3671,13 +3672,6 @@\n         // get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n         int increase = 0;\n \n-        // count the replacement text elements that are larger than their corresponding text being replaced\n-        for (int i = 0; i < searchList.length; i++) {\n-            int greater = replacementList[i].length() - searchList[i].length();\n-            if (greater > 0) {\n-                increase += 3 * greater; // assume 3 matches\n-            }\n-        }\n         // have upper-bound at 20% increase, then let Java take over\n         increase = Math.min(increase, text.length() / 5);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3677, 
          "faulty": "if (greater > 0) {\n  increase+=3 * greater;\n}", 
          "type": "InsertBefore", 
          "seed": "break;"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3675, 
          "faulty": "for (int i=0; i < searchList.length; i++) {\n  int greater=replacementList[i].length() - searchList[i].length();\n  if (greater > 0) {\n    increase+=3 * greater;\n  }\n}", 
          "type": "Delete", 
          "seed": "start=' ';"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3627, 
          "faulty": "if (searchLength != replacementLength) {\n  throw new IllegalArgumentException(\"Search and Replace array lengths don't match: \" + searchLength + \" vs \"+ replacementLength);\n}", 
          "type": "InsertBefore", 
          "seed": "if (searchLength != replacementLength) {\n  throw new IllegalArgumentException(\"Search and Replace array lengths don't match: \" + searchLength + \" vs \"+ replacementLength);\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:12:49.793754110 -0500\n+++ /tmp/Arja_Defects4J_Lang_39/patches_x7iw/Patch_1197/patched/tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:19:56.289569118 -0500\n@@ -3623,7 +3623,12 @@\n         int searchLength = searchList.length;\n         int replacementLength = replacementList.length;\n \n-        // make sure lengths are ok, these need to be equal\n+        if (searchLength != replacementLength) {\n+\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\"Search and Replace array lengths don't match: \"\n+\t\t\t\t\t\t\t+ searchLength + \" vs \" + replacementLength);\n+\t\t}\n+\t\t// make sure lengths are ok, these need to be equal\n         if (searchLength != replacementLength) {\n             throw new IllegalArgumentException(\"Search and Replace array lengths don't match: \"\n                 + searchLength\n@@ -3671,13 +3676,6 @@\n         // get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n         int increase = 0;\n \n-        // count the replacement text elements that are larger than their corresponding text being replaced\n-        for (int i = 0; i < searchList.length; i++) {\n-            int greater = replacementList[i].length() - searchList[i].length();\n-            if (greater > 0) {\n-                increase += 3 * greater; // assume 3 matches\n-            }\n-        }\n         // have upper-bound at 20% increase, then let Java take over\n         increase = Math.min(increase, text.length() / 5);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3675, 
          "faulty": "for (int i=0; i < searchList.length; i++) {\n  int greater=replacementList[i].length() - searchList[i].length();\n  if (greater > 0) {\n    increase+=3 * greater;\n  }\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < searchLength; i++) {\n  if (noMoreMatchesForReplIndex[i] || searchList[i] == null || searchList[i].length() == 0 || replacementList[i] == null) {\n    continue;\n  }\n  tempIndex=text.indexOf(searchList[i]);\n  if (tempIndex == -1) {\n    noMoreMatchesForReplIndex[i]=true;\n  }\n else {\n    if (textIndex == -1 || tempIndex < textIndex) {\n      textIndex=tempIndex;\n      replaceIndex=i;\n    }\n  }\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3697, 
          "faulty": "tempIndex=-1;", 
          "type": "InsertBefore", 
          "seed": "if (timeToLive < 0) {\n  throw new IllegalStateException(\"TimeToLive of \" + timeToLive + \" is less than 0: \"+ text);\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:12:49.793754110 -0500\n+++ /tmp/Arja_Defects4J_Lang_39/patches_x7iw/Patch_1250/patched/tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:20:09.137563598 -0500\n@@ -3671,13 +3671,6 @@\n         // get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n         int increase = 0;\n \n-        // count the replacement text elements that are larger than their corresponding text being replaced\n-        for (int i = 0; i < searchList.length; i++) {\n-            int greater = replacementList[i].length() - searchList[i].length();\n-            if (greater > 0) {\n-                increase += 3 * greater; // assume 3 matches\n-            }\n-        }\n         // have upper-bound at 20% increase, then let Java take over\n         increase = Math.min(increase, text.length() / 5);\n \n@@ -3694,7 +3687,11 @@\n \n             textIndex = -1;\n             replaceIndex = -1;\n-            tempIndex = -1;\n+            if (timeToLive < 0) {\n+\t\t\t\tthrow new IllegalStateException(\"TimeToLive of \" + timeToLive\n+\t\t\t\t\t\t+ \" is less than 0: \" + text);\n+\t\t\t}\n+\t\t\ttempIndex = -1;\n             // find the next earliest match\n             // NOTE: logic mostly duplicated above START\n             for (int i = 0; i < searchLength; i++) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3675, 
          "faulty": "for (int i=0; i < searchList.length; i++) {\n  int greater=replacementList[i].length() - searchList[i].length();\n  if (greater > 0) {\n    increase+=3 * greater;\n  }\n}", 
          "type": "Delete", 
          "seed": "increase=(increase < 0 ? 0 : increase);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3672, 
          "faulty": "int increase=0;", 
          "type": "InsertBefore", 
          "seed": "start=0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:12:49.793754110 -0500\n+++ /tmp/Arja_Defects4J_Lang_39/patches_x7iw/Patch_238/patched/tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:15:36.169681525 -0500\n@@ -3668,16 +3668,10 @@\n \n         int start = 0;\n \n-        // get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n+        start = 0;\n+\t\t// get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n         int increase = 0;\n \n-        // count the replacement text elements that are larger than their corresponding text being replaced\n-        for (int i = 0; i < searchList.length; i++) {\n-            int greater = replacementList[i].length() - searchList[i].length();\n-            if (greater > 0) {\n-                increase += 3 * greater; // assume 3 matches\n-            }\n-        }\n         // have upper-bound at 20% increase, then let Java take over\n         increase = Math.min(increase, text.length() / 5);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3675, 
          "faulty": "for (int i=0; i < searchList.length; i++) {\n  int greater=replacementList[i].length() - searchList[i].length();\n  if (greater > 0) {\n    increase+=3 * greater;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (textIndex == -1) {\n  return text;\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3635, 
          "faulty": "boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];", 
          "type": "InsertBefore", 
          "seed": "if (timeToLive < 0) {\n  throw new IllegalStateException(\"TimeToLive of \" + timeToLive + \" is less than 0: \"+ text);\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3682, 
          "faulty": "increase=Math.min(increase,text.length() / 5);", 
          "type": "Delete", 
          "seed": "for (int i=0; i < searchList.length; i++) {\n  int greater=replacementList[i].length() - searchList[i].length();\n  if (greater > 0) {\n    increase+=3 * greater;\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:12:49.793754110 -0500\n+++ /tmp/Arja_Defects4J_Lang_39/patches_x7iw/Patch_563/patched/tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:17:22.465635440 -0500\n@@ -3631,7 +3631,11 @@\n                 + replacementLength);\n         }\n \n-        // keep track of which still have matches\n+        if (timeToLive < 0) {\n+\t\t\tthrow new IllegalStateException(\"TimeToLive of \" + timeToLive\n+\t\t\t\t\t+ \" is less than 0: \" + text);\n+\t\t}\n+\t\t// keep track of which still have matches\n         boolean[] noMoreMatchesForReplIndex = new boolean[searchLength];\n \n         // index on index that the match was found\n@@ -3671,16 +3675,6 @@\n         // get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n         int increase = 0;\n \n-        // count the replacement text elements that are larger than their corresponding text being replaced\n-        for (int i = 0; i < searchList.length; i++) {\n-            int greater = replacementList[i].length() - searchList[i].length();\n-            if (greater > 0) {\n-                increase += 3 * greater; // assume 3 matches\n-            }\n-        }\n-        // have upper-bound at 20% increase, then let Java take over\n-        increase = Math.min(increase, text.length() / 5);\n-\n         StringBuilder buf = new StringBuilder(text.length() + increase);\n \n         while (textIndex != -1) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3675, 
          "faulty": "for (int i=0; i < searchList.length; i++) {\n  int greater=replacementList[i].length() - searchList[i].length();\n  if (greater > 0) {\n    increase+=3 * greater;\n  }\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < searchLength; i++) {\n  if (noMoreMatchesForReplIndex[i] || searchList[i] == null || searchList[i].length() == 0 || replacementList[i] == null) {\n    continue;\n  }\n  tempIndex=text.indexOf(searchList[i]);\n  if (tempIndex == -1) {\n    noMoreMatchesForReplIndex[i]=true;\n  }\n else {\n    if (textIndex == -1 || tempIndex < textIndex) {\n      textIndex=tempIndex;\n      replaceIndex=i;\n    }\n  }\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3697, 
          "faulty": "tempIndex=-1;", 
          "type": "Delete", 
          "seed": "continue;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:12:49.793754110 -0500\n+++ /tmp/Arja_Defects4J_Lang_39/patches_x7iw/Patch_961/patched/tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:18:51.021597206 -0500\n@@ -3671,13 +3671,6 @@\n         // get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n         int increase = 0;\n \n-        // count the replacement text elements that are larger than their corresponding text being replaced\n-        for (int i = 0; i < searchList.length; i++) {\n-            int greater = replacementList[i].length() - searchList[i].length();\n-            if (greater > 0) {\n-                increase += 3 * greater; // assume 3 matches\n-            }\n-        }\n         // have upper-bound at 20% increase, then let Java take over\n         increase = Math.min(increase, text.length() / 5);\n \n@@ -3694,7 +3687,6 @@\n \n             textIndex = -1;\n             replaceIndex = -1;\n-            tempIndex = -1;\n             // find the next earliest match\n             // NOTE: logic mostly duplicated above START\n             for (int i = 0; i < searchLength; i++) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3677, 
          "faulty": "if (greater > 0) {\n  increase+=3 * greater;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3675, 
          "faulty": "for (int i=0; i < searchList.length; i++) {\n  int greater=replacementList[i].length() - searchList[i].length();\n  if (greater > 0) {\n    increase+=3 * greater;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (searchLength != replacementLength) {\n  throw new IllegalArgumentException(\"Search and Replace array lengths don't match: \" + searchLength + \" vs \"+ replacementLength);\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3696, 
          "faulty": "replaceIndex=-1;", 
          "type": "Delete", 
          "seed": "if (textIndex == -1) {\n  return text;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:12:49.793754110 -0500\n+++ /tmp/Arja_Defects4J_Lang_39/patches_x7iw/Patch_1088/patched/tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:19:27.673581424 -0500\n@@ -3671,13 +3671,6 @@\n         // get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n         int increase = 0;\n \n-        // count the replacement text elements that are larger than their corresponding text being replaced\n-        for (int i = 0; i < searchList.length; i++) {\n-            int greater = replacementList[i].length() - searchList[i].length();\n-            if (greater > 0) {\n-                increase += 3 * greater; // assume 3 matches\n-            }\n-        }\n         // have upper-bound at 20% increase, then let Java take over\n         increase = Math.min(increase, text.length() / 5);\n \n@@ -3693,7 +3686,6 @@\n             start = textIndex + searchList[replaceIndex].length();\n \n             textIndex = -1;\n-            replaceIndex = -1;\n             tempIndex = -1;\n             // find the next earliest match\n             // NOTE: logic mostly duplicated above START\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3675, 
          "faulty": "for (int i=0; i < searchList.length; i++) {\n  int greater=replacementList[i].length() - searchList[i].length();\n  if (greater > 0) {\n    increase+=3 * greater;\n  }\n}", 
          "type": "Delete", 
          "seed": "start=0;"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3684, 
          "faulty": "StringBuilder buf=new StringBuilder(text.length() + increase);", 
          "type": "Replace", 
          "seed": "StringBuilder buf=new StringBuilder(256);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:12:49.793754110 -0500\n+++ /tmp/Arja_Defects4J_Lang_39/patches_x7iw/Patch_903/patched/tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:18:37.921602853 -0500\n@@ -3671,17 +3671,10 @@\n         // get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n         int increase = 0;\n \n-        // count the replacement text elements that are larger than their corresponding text being replaced\n-        for (int i = 0; i < searchList.length; i++) {\n-            int greater = replacementList[i].length() - searchList[i].length();\n-            if (greater > 0) {\n-                increase += 3 * greater; // assume 3 matches\n-            }\n-        }\n         // have upper-bound at 20% increase, then let Java take over\n         increase = Math.min(increase, text.length() / 5);\n \n-        StringBuilder buf = new StringBuilder(text.length() + increase);\n+        StringBuilder buf = new StringBuilder(256);\n \n         while (textIndex != -1) {\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3675, 
          "faulty": "for (int i=0; i < searchList.length; i++) {\n  int greater=replacementList[i].length() - searchList[i].length();\n  if (greater > 0) {\n    increase+=3 * greater;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (searchLength != replacementLength) {\n  throw new IllegalArgumentException(\"Search and Replace array lengths don't match: \" + searchLength + \" vs \"+ replacementLength);\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3696, 
          "faulty": "replaceIndex=-1;", 
          "type": "InsertBefore", 
          "seed": "for (int i=start; i < textIndex; i++) {\n  buf.append(text.charAt(i));\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:12:49.793754110 -0500\n+++ /tmp/Arja_Defects4J_Lang_39/patches_x7iw/Patch_863/patched/tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:18:29.097606659 -0500\n@@ -3671,13 +3671,6 @@\n         // get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n         int increase = 0;\n \n-        // count the replacement text elements that are larger than their corresponding text being replaced\n-        for (int i = 0; i < searchList.length; i++) {\n-            int greater = replacementList[i].length() - searchList[i].length();\n-            if (greater > 0) {\n-                increase += 3 * greater; // assume 3 matches\n-            }\n-        }\n         // have upper-bound at 20% increase, then let Java take over\n         increase = Math.min(increase, text.length() / 5);\n \n@@ -3693,7 +3686,10 @@\n             start = textIndex + searchList[replaceIndex].length();\n \n             textIndex = -1;\n-            replaceIndex = -1;\n+            for (int i = start; i < textIndex; i++) {\n+\t\t\t\tbuf.append(text.charAt(i));\n+\t\t\t}\n+\t\t\treplaceIndex = -1;\n             tempIndex = -1;\n             // find the next earliest match\n             // NOTE: logic mostly duplicated above START\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3675, 
          "faulty": "for (int i=0; i < searchList.length; i++) {\n  int greater=replacementList[i].length() - searchList[i].length();\n  if (greater > 0) {\n    increase+=3 * greater;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (searchLength != replacementLength) {\n  throw new IllegalArgumentException(\"Search and Replace array lengths don't match: \" + searchLength + \" vs \"+ replacementLength);\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3623, 
          "faulty": "int searchLength=searchList.length;", 
          "type": "InsertBefore", 
          "seed": "if (timeToLive < 0) {\n  throw new IllegalStateException(\"TimeToLive of \" + timeToLive + \" is less than 0: \"+ text);\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:12:49.793754110 -0500\n+++ /tmp/Arja_Defects4J_Lang_39/patches_x7iw/Patch_818/patched/tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:18:19.365610857 -0500\n@@ -3620,7 +3620,11 @@\n             throw new IllegalStateException(\"TimeToLive of \" + timeToLive + \" is less than 0: \" + text);\n         }\n \n-        int searchLength = searchList.length;\n+        if (timeToLive < 0) {\n+\t\t\tthrow new IllegalStateException(\"TimeToLive of \" + timeToLive\n+\t\t\t\t\t+ \" is less than 0: \" + text);\n+\t\t}\n+\t\tint searchLength = searchList.length;\n         int replacementLength = replacementList.length;\n \n         // make sure lengths are ok, these need to be equal\n@@ -3671,13 +3675,6 @@\n         // get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n         int increase = 0;\n \n-        // count the replacement text elements that are larger than their corresponding text being replaced\n-        for (int i = 0; i < searchList.length; i++) {\n-            int greater = replacementList[i].length() - searchList[i].length();\n-            if (greater > 0) {\n-                increase += 3 * greater; // assume 3 matches\n-            }\n-        }\n         // have upper-bound at 20% increase, then let Java take over\n         increase = Math.min(increase, text.length() / 5);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3645, 
          "faulty": "if (noMoreMatchesForReplIndex[i] || searchList[i] == null || searchList[i].length() == 0 || replacementList[i] == null) {\n  continue;\n}", 
          "type": "InsertBefore", 
          "seed": "tempIndex=-1;"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3675, 
          "faulty": "for (int i=0; i < searchList.length; i++) {\n  int greater=replacementList[i].length() - searchList[i].length();\n  if (greater > 0) {\n    increase+=3 * greater;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (searchLength != replacementLength) {\n  throw new IllegalArgumentException(\"Search and Replace array lengths don't match: \" + searchLength + \" vs \"+ replacementLength);\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:12:49.793754110 -0500\n+++ /tmp/Arja_Defects4J_Lang_39/patches_x7iw/Patch_285/patched/tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:15:52.829674288 -0500\n@@ -3642,7 +3642,8 @@\n         // index of replace array that will replace the search string found\n         // NOTE: logic duplicated below START\n         for (int i = 0; i < searchLength; i++) {\n-            if (noMoreMatchesForReplIndex[i] || searchList[i] == null || \n+            tempIndex = -1;\n+\t\t\tif (noMoreMatchesForReplIndex[i] || searchList[i] == null || \n                 searchList[i].length() == 0 || replacementList[i] == null) \n             {\n                 continue;\n@@ -3671,13 +3672,6 @@\n         // get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n         int increase = 0;\n \n-        // count the replacement text elements that are larger than their corresponding text being replaced\n-        for (int i = 0; i < searchList.length; i++) {\n-            int greater = replacementList[i].length() - searchList[i].length();\n-            if (greater > 0) {\n-                increase += 3 * greater; // assume 3 matches\n-            }\n-        }\n         // have upper-bound at 20% increase, then let Java take over\n         increase = Math.min(increase, text.length() / 5);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3675, 
          "faulty": "for (int i=0; i < searchList.length; i++) {\n  int greater=replacementList[i].length() - searchList[i].length();\n  if (greater > 0) {\n    increase+=3 * greater;\n  }\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < searchLength; i++) {\n  if (noMoreMatchesForReplIndex[i] || searchList[i] == null || searchList[i].length() == 0 || replacementList[i] == null) {\n    continue;\n  }\n  tempIndex=text.indexOf(searchList[i]);\n  if (tempIndex == -1) {\n    noMoreMatchesForReplIndex[i]=true;\n  }\n else {\n    if (textIndex == -1 || tempIndex < textIndex) {\n      textIndex=tempIndex;\n      replaceIndex=i;\n    }\n  }\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3696, 
          "faulty": "replaceIndex=-1;", 
          "type": "InsertBefore", 
          "seed": "if (text == null || text.length() == 0 || searchList == null || searchList.length == 0 || replacementList == null || replacementList.length == 0) {\n  return text;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:12:49.793754110 -0500\n+++ /tmp/Arja_Defects4J_Lang_39/patches_x7iw/Patch_728/patched/tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:17:58.489619869 -0500\n@@ -3671,13 +3671,6 @@\n         // get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n         int increase = 0;\n \n-        // count the replacement text elements that are larger than their corresponding text being replaced\n-        for (int i = 0; i < searchList.length; i++) {\n-            int greater = replacementList[i].length() - searchList[i].length();\n-            if (greater > 0) {\n-                increase += 3 * greater; // assume 3 matches\n-            }\n-        }\n         // have upper-bound at 20% increase, then let Java take over\n         increase = Math.min(increase, text.length() / 5);\n \n@@ -3693,7 +3686,12 @@\n             start = textIndex + searchList[replaceIndex].length();\n \n             textIndex = -1;\n-            replaceIndex = -1;\n+            if (text == null || text.length() == 0 || searchList == null\n+\t\t\t\t\t|| searchList.length == 0 || replacementList == null\n+\t\t\t\t\t|| replacementList.length == 0) {\n+\t\t\t\treturn text;\n+\t\t\t}\n+\t\t\treplaceIndex = -1;\n             tempIndex = -1;\n             // find the next earliest match\n             // NOTE: logic mostly duplicated above START\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3675, 
          "faulty": "for (int i=0; i < searchList.length; i++) {\n  int greater=replacementList[i].length() - searchList[i].length();\n  if (greater > 0) {\n    increase+=3 * greater;\n  }\n}", 
          "type": "Replace", 
          "seed": "if (searchLength != replacementLength) {\n  throw new IllegalArgumentException(\"Search and Replace array lengths don't match: \" + searchLength + \" vs \"+ replacementLength);\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:12:49.793754110 -0500\n+++ /tmp/Arja_Defects4J_Lang_39/patches_x7iw/Patch_1416/patched/tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:20:56.537543256 -0500\n@@ -3671,13 +3671,11 @@\n         // get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n         int increase = 0;\n \n-        // count the replacement text elements that are larger than their corresponding text being replaced\n-        for (int i = 0; i < searchList.length; i++) {\n-            int greater = replacementList[i].length() - searchList[i].length();\n-            if (greater > 0) {\n-                increase += 3 * greater; // assume 3 matches\n-            }\n-        }\n+        if (searchLength != replacementLength) {\n+\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\"Search and Replace array lengths don't match: \"\n+\t\t\t\t\t\t\t+ searchLength + \" vs \" + replacementLength);\n+\t\t}\n         // have upper-bound at 20% increase, then let Java take over\n         increase = Math.min(increase, text.length() / 5);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3612, 
          "faulty": "if (text == null || text.length() == 0 || searchList == null || searchList.length == 0 || replacementList == null || replacementList.length == 0) {\n  return text;\n}", 
          "type": "InsertBefore", 
          "seed": "if (timeToLive < 0) {\n  throw new IllegalStateException(\"TimeToLive of \" + timeToLive + \" is less than 0: \"+ text);\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3645, 
          "faulty": "if (noMoreMatchesForReplIndex[i] || searchList[i] == null || searchList[i].length() == 0 || replacementList[i] == null) {\n  continue;\n}", 
          "type": "InsertBefore", 
          "seed": "tempIndex=-1;"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3675, 
          "faulty": "for (int i=0; i < searchList.length; i++) {\n  int greater=replacementList[i].length() - searchList[i].length();\n  if (greater > 0) {\n    increase+=3 * greater;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (searchLength != replacementLength) {\n  throw new IllegalArgumentException(\"Search and Replace array lengths don't match: \" + searchLength + \" vs \"+ replacementLength);\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3627, 
          "faulty": "if (searchLength != replacementLength) {\n  throw new IllegalArgumentException(\"Search and Replace array lengths don't match: \" + searchLength + \" vs \"+ replacementLength);\n}", 
          "type": "InsertBefore", 
          "seed": "if (text == null || text.length() == 0 || searchList == null || searchList.length == 0 || replacementList == null || replacementList.length == 0) {\n  return text;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:12:49.793754110 -0500\n+++ /tmp/Arja_Defects4J_Lang_39/patches_x7iw/Patch_374/patched/tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:16:18.605663100 -0500\n@@ -3609,7 +3609,11 @@\n         // mchyzer Performance note: This creates very few new objects (one major goal)\n         // let me know if there are performance requests, we can create a harness to measure\n \n-        if (text == null || text.length() == 0 || searchList == null || \n+        if (timeToLive < 0) {\n+\t\t\tthrow new IllegalStateException(\"TimeToLive of \" + timeToLive\n+\t\t\t\t\t+ \" is less than 0: \" + text);\n+\t\t}\n+\t\tif (text == null || text.length() == 0 || searchList == null || \n             searchList.length == 0 || replacementList == null || replacementList.length == 0) \n         {\n             return text;\n@@ -3623,7 +3627,12 @@\n         int searchLength = searchList.length;\n         int replacementLength = replacementList.length;\n \n-        // make sure lengths are ok, these need to be equal\n+        if (text == null || text.length() == 0 || searchList == null\n+\t\t\t\t|| searchList.length == 0 || replacementList == null\n+\t\t\t\t|| replacementList.length == 0) {\n+\t\t\treturn text;\n+\t\t}\n+\t\t// make sure lengths are ok, these need to be equal\n         if (searchLength != replacementLength) {\n             throw new IllegalArgumentException(\"Search and Replace array lengths don't match: \"\n                 + searchLength\n@@ -3642,7 +3651,8 @@\n         // index of replace array that will replace the search string found\n         // NOTE: logic duplicated below START\n         for (int i = 0; i < searchLength; i++) {\n-            if (noMoreMatchesForReplIndex[i] || searchList[i] == null || \n+            tempIndex = -1;\n+\t\t\tif (noMoreMatchesForReplIndex[i] || searchList[i] == null || \n                 searchList[i].length() == 0 || replacementList[i] == null) \n             {\n                 continue;\n@@ -3671,13 +3681,6 @@\n         // get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n         int increase = 0;\n \n-        // count the replacement text elements that are larger than their corresponding text being replaced\n-        for (int i = 0; i < searchList.length; i++) {\n-            int greater = replacementList[i].length() - searchList[i].length();\n-            if (greater > 0) {\n-                increase += 3 * greater; // assume 3 matches\n-            }\n-        }\n         // have upper-bound at 20% increase, then let Java take over\n         increase = Math.min(increase, text.length() / 5);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3624, 
          "faulty": "int replacementLength=replacementList.length;", 
          "type": "InsertBefore", 
          "seed": "if (timeToLive < 0) {\n  throw new IllegalStateException(\"TimeToLive of \" + timeToLive + \" is less than 0: \"+ text);\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3675, 
          "faulty": "for (int i=0; i < searchList.length; i++) {\n  int greater=replacementList[i].length() - searchList[i].length();\n  if (greater > 0) {\n    increase+=3 * greater;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (searchLength != replacementLength) {\n  throw new IllegalArgumentException(\"Search and Replace array lengths don't match: \" + searchLength + \" vs \"+ replacementLength);\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3697, 
          "faulty": "tempIndex=-1;", 
          "type": "InsertBefore", 
          "seed": "replaceIndex=-1;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:12:49.793754110 -0500\n+++ /tmp/Arja_Defects4J_Lang_39/patches_x7iw/Patch_880/patched/tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:18:32.797605063 -0500\n@@ -3621,7 +3621,11 @@\n         }\n \n         int searchLength = searchList.length;\n-        int replacementLength = replacementList.length;\n+        if (timeToLive < 0) {\n+\t\t\tthrow new IllegalStateException(\"TimeToLive of \" + timeToLive\n+\t\t\t\t\t+ \" is less than 0: \" + text);\n+\t\t}\n+\t\tint replacementLength = replacementList.length;\n \n         // make sure lengths are ok, these need to be equal\n         if (searchLength != replacementLength) {\n@@ -3671,13 +3675,6 @@\n         // get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n         int increase = 0;\n \n-        // count the replacement text elements that are larger than their corresponding text being replaced\n-        for (int i = 0; i < searchList.length; i++) {\n-            int greater = replacementList[i].length() - searchList[i].length();\n-            if (greater > 0) {\n-                increase += 3 * greater; // assume 3 matches\n-            }\n-        }\n         // have upper-bound at 20% increase, then let Java take over\n         increase = Math.min(increase, text.length() / 5);\n \n@@ -3694,7 +3691,8 @@\n \n             textIndex = -1;\n             replaceIndex = -1;\n-            tempIndex = -1;\n+            replaceIndex = -1;\n+\t\t\ttempIndex = -1;\n             // find the next earliest match\n             // NOTE: logic mostly duplicated above START\n             for (int i = 0; i < searchLength; i++) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3677, 
          "faulty": "if (greater > 0) {\n  increase+=3 * greater;\n}", 
          "type": "InsertBefore", 
          "seed": "break;"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3675, 
          "faulty": "for (int i=0; i < searchList.length; i++) {\n  int greater=replacementList[i].length() - searchList[i].length();\n  if (greater > 0) {\n    increase+=3 * greater;\n  }\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < searchLength; i++) {\n  if (noMoreMatchesForReplIndex[i] || searchList[i] == null || searchList[i].length() == 0 || replacementList[i] == null) {\n    continue;\n  }\n  tempIndex=text.indexOf(searchList[i]);\n  if (tempIndex == -1) {\n    noMoreMatchesForReplIndex[i]=true;\n  }\n else {\n    if (textIndex == -1 || tempIndex < textIndex) {\n      textIndex=tempIndex;\n      replaceIndex=i;\n    }\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:12:49.793754110 -0500\n+++ /tmp/Arja_Defects4J_Lang_39/patches_x7iw/Patch_572/patched/tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:17:24.489634564 -0500\n@@ -3671,13 +3671,6 @@\n         // get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n         int increase = 0;\n \n-        // count the replacement text elements that are larger than their corresponding text being replaced\n-        for (int i = 0; i < searchList.length; i++) {\n-            int greater = replacementList[i].length() - searchList[i].length();\n-            if (greater > 0) {\n-                increase += 3 * greater; // assume 3 matches\n-            }\n-        }\n         // have upper-bound at 20% increase, then let Java take over\n         increase = Math.min(increase, text.length() / 5);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3700, 
          "faulty": "for (int i=0; i < searchLength; i++) {\n  if (noMoreMatchesForReplIndex[i] || searchList[i] == null || searchList[i].length() == 0 || replacementList[i] == null) {\n    continue;\n  }\n  tempIndex=text.indexOf(searchList[i],start);\n  if (tempIndex == -1) {\n    noMoreMatchesForReplIndex[i]=true;\n  }\n else {\n    if (textIndex == -1 || tempIndex < textIndex) {\n      textIndex=tempIndex;\n      replaceIndex=i;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "textIndex=-1;"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3675, 
          "faulty": "for (int i=0; i < searchList.length; i++) {\n  int greater=replacementList[i].length() - searchList[i].length();\n  if (greater > 0) {\n    increase+=3 * greater;\n  }\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < searchLength; i++) {\n  if (noMoreMatchesForReplIndex[i] || searchList[i] == null || searchList[i].length() == 0 || replacementList[i] == null) {\n    continue;\n  }\n  tempIndex=text.indexOf(searchList[i]);\n  if (tempIndex == -1) {\n    noMoreMatchesForReplIndex[i]=true;\n  }\n else {\n    if (textIndex == -1 || tempIndex < textIndex) {\n      textIndex=tempIndex;\n      replaceIndex=i;\n    }\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:12:49.793754110 -0500\n+++ /tmp/Arja_Defects4J_Lang_39/patches_x7iw/Patch_1489/patched/tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:21:18.621533791 -0500\n@@ -3671,13 +3671,6 @@\n         // get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n         int increase = 0;\n \n-        // count the replacement text elements that are larger than their corresponding text being replaced\n-        for (int i = 0; i < searchList.length; i++) {\n-            int greater = replacementList[i].length() - searchList[i].length();\n-            if (greater > 0) {\n-                increase += 3 * greater; // assume 3 matches\n-            }\n-        }\n         // have upper-bound at 20% increase, then let Java take over\n         increase = Math.min(increase, text.length() / 5);\n \n@@ -3695,7 +3688,8 @@\n             textIndex = -1;\n             replaceIndex = -1;\n             tempIndex = -1;\n-            // find the next earliest match\n+            textIndex = -1;\n+\t\t\t// find the next earliest match\n             // NOTE: logic mostly duplicated above START\n             for (int i = 0; i < searchLength; i++) {\n                 if (noMoreMatchesForReplIndex[i] || searchList[i] == null || \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3675, 
          "faulty": "for (int i=0; i < searchList.length; i++) {\n  int greater=replacementList[i].length() - searchList[i].length();\n  if (greater > 0) {\n    increase+=3 * greater;\n  }\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < searchLength; i++) {\n  if (noMoreMatchesForReplIndex[i] || searchList[i] == null || searchList[i].length() == 0 || replacementList[i] == null) {\n    continue;\n  }\n  tempIndex=text.indexOf(searchList[i]);\n  if (tempIndex == -1) {\n    noMoreMatchesForReplIndex[i]=true;\n  }\n else {\n    if (textIndex == -1 || tempIndex < textIndex) {\n      textIndex=tempIndex;\n      replaceIndex=i;\n    }\n  }\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3691, 
          "faulty": "buf.append(replacementList[replaceIndex]);", 
          "type": "InsertBefore", 
          "seed": "start=' ';"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:12:49.793754110 -0500\n+++ /tmp/Arja_Defects4J_Lang_39/patches_x7iw/Patch_1037/patched/tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:19:08.497589678 -0500\n@@ -3671,13 +3671,6 @@\n         // get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n         int increase = 0;\n \n-        // count the replacement text elements that are larger than their corresponding text being replaced\n-        for (int i = 0; i < searchList.length; i++) {\n-            int greater = replacementList[i].length() - searchList[i].length();\n-            if (greater > 0) {\n-                increase += 3 * greater; // assume 3 matches\n-            }\n-        }\n         // have upper-bound at 20% increase, then let Java take over\n         increase = Math.min(increase, text.length() / 5);\n \n@@ -3688,7 +3681,8 @@\n             for (int i = start; i < textIndex; i++) {\n                 buf.append(text.charAt(i));\n             }\n-            buf.append(replacementList[replaceIndex]);\n+            start = ' ';\n+\t\t\tbuf.append(replacementList[replaceIndex]);\n \n             start = textIndex + searchList[replaceIndex].length();\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3675, 
          "faulty": "for (int i=0; i < searchList.length; i++) {\n  int greater=replacementList[i].length() - searchList[i].length();\n  if (greater > 0) {\n    increase+=3 * greater;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (textIndex == -1) {\n  return text;\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3691, 
          "faulty": "buf.append(replacementList[replaceIndex]);", 
          "type": "InsertBefore", 
          "seed": "start=textIndex + searchList[replaceIndex].length();"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:12:49.793754110 -0500\n+++ /tmp/Arja_Defects4J_Lang_39/patches_x7iw/Patch_1760/patched/tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:23:23.837480279 -0500\n@@ -3671,13 +3671,6 @@\n         // get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n         int increase = 0;\n \n-        // count the replacement text elements that are larger than their corresponding text being replaced\n-        for (int i = 0; i < searchList.length; i++) {\n-            int greater = replacementList[i].length() - searchList[i].length();\n-            if (greater > 0) {\n-                increase += 3 * greater; // assume 3 matches\n-            }\n-        }\n         // have upper-bound at 20% increase, then let Java take over\n         increase = Math.min(increase, text.length() / 5);\n \n@@ -3688,7 +3681,8 @@\n             for (int i = start; i < textIndex; i++) {\n                 buf.append(text.charAt(i));\n             }\n-            buf.append(replacementList[replaceIndex]);\n+            start = textIndex + searchList[replaceIndex].length();\n+\t\t\tbuf.append(replacementList[replaceIndex]);\n \n             start = textIndex + searchList[replaceIndex].length();\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3675, 
          "faulty": "for (int i=0; i < searchList.length; i++) {\n  int greater=replacementList[i].length() - searchList[i].length();\n  if (greater > 0) {\n    increase+=3 * greater;\n  }\n}", 
          "type": "Replace", 
          "seed": "increase=Math.min(increase,text.length() / 5);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3619, 
          "faulty": "if (timeToLive < 0) {\n  throw new IllegalStateException(\"TimeToLive of \" + timeToLive + \" is less than 0: \"+ text);\n}", 
          "type": "InsertBefore", 
          "seed": "if (text == null || text.length() == 0 || searchList == null || searchList.length == 0 || replacementList == null || replacementList.length == 0) {\n  return text;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:12:49.793754110 -0500\n+++ /tmp/Arja_Defects4J_Lang_39/patches_x7iw/Patch_1423/patched/tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:20:58.133542572 -0500\n@@ -3615,7 +3615,12 @@\n             return text;\n         }\n \n-        // if recursing, this shouldnt be less than 0\n+        if (text == null || text.length() == 0 || searchList == null\n+\t\t\t\t|| searchList.length == 0 || replacementList == null\n+\t\t\t\t|| replacementList.length == 0) {\n+\t\t\treturn text;\n+\t\t}\n+\t\t// if recursing, this shouldnt be less than 0\n         if (timeToLive < 0) {\n             throw new IllegalStateException(\"TimeToLive of \" + timeToLive + \" is less than 0: \" + text);\n         }\n@@ -3671,13 +3676,7 @@\n         // get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n         int increase = 0;\n \n-        // count the replacement text elements that are larger than their corresponding text being replaced\n-        for (int i = 0; i < searchList.length; i++) {\n-            int greater = replacementList[i].length() - searchList[i].length();\n-            if (greater > 0) {\n-                increase += 3 * greater; // assume 3 matches\n-            }\n-        }\n+        increase = Math.min(increase, text.length() / 5);\n         // have upper-bound at 20% increase, then let Java take over\n         increase = Math.min(increase, text.length() / 5);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3666, 
          "faulty": "return text;", 
          "type": "InsertBefore", 
          "seed": "if (text == null || text.length() == 0 || searchList == null || searchList.length == 0 || replacementList == null || replacementList.length == 0) {\n  return text;\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3675, 
          "faulty": "for (int i=0; i < searchList.length; i++) {\n  int greater=replacementList[i].length() - searchList[i].length();\n  if (greater > 0) {\n    increase+=3 * greater;\n  }\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < searchLength; i++) {\n  if (noMoreMatchesForReplIndex[i] || searchList[i] == null || searchList[i].length() == 0 || replacementList[i] == null) {\n    continue;\n  }\n  tempIndex=text.indexOf(searchList[i]);\n  if (tempIndex == -1) {\n    noMoreMatchesForReplIndex[i]=true;\n  }\n else {\n    if (textIndex == -1 || tempIndex < textIndex) {\n      textIndex=tempIndex;\n      replaceIndex=i;\n    }\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:12:49.793754110 -0500\n+++ /tmp/Arja_Defects4J_Lang_39/patches_x7iw/Patch_984/patched/tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:18:56.045595042 -0500\n@@ -3663,7 +3663,12 @@\n \n         // no search strings found, we are done\n         if (textIndex == -1) {\n-            return text;\n+            if (text == null || text.length() == 0 || searchList == null\n+\t\t\t\t\t|| searchList.length == 0 || replacementList == null\n+\t\t\t\t\t|| replacementList.length == 0) {\n+\t\t\t\treturn text;\n+\t\t\t}\n+\t\t\treturn text;\n         }\n \n         int start = 0;\n@@ -3671,13 +3676,6 @@\n         // get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n         int increase = 0;\n \n-        // count the replacement text elements that are larger than their corresponding text being replaced\n-        for (int i = 0; i < searchList.length; i++) {\n-            int greater = replacementList[i].length() - searchList[i].length();\n-            if (greater > 0) {\n-                increase += 3 * greater; // assume 3 matches\n-            }\n-        }\n         // have upper-bound at 20% increase, then let Java take over\n         increase = Math.min(increase, text.length() / 5);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3675, 
          "faulty": "for (int i=0; i < searchList.length; i++) {\n  int greater=replacementList[i].length() - searchList[i].length();\n  if (greater > 0) {\n    increase+=3 * greater;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (searchLength != replacementLength) {\n  throw new IllegalArgumentException(\"Search and Replace array lengths don't match: \" + searchLength + \" vs \"+ replacementLength);\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang3/StringUtils.java", 
          "line": 3627, 
          "faulty": "if (searchLength != replacementLength) {\n  throw new IllegalArgumentException(\"Search and Replace array lengths don't match: \" + searchLength + \" vs \"+ replacementLength);\n}", 
          "type": "Replace", 
          "seed": "if (timeToLive < 0) {\n  throw new IllegalStateException(\"TimeToLive of \" + timeToLive + \" is less than 0: \"+ text);\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:12:49.793754110 -0500\n+++ /tmp/Arja_Defects4J_Lang_39/patches_x7iw/Patch_446/patched/tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:16:50.713649183 -0500\n@@ -3623,13 +3623,10 @@\n         int searchLength = searchList.length;\n         int replacementLength = replacementList.length;\n \n-        // make sure lengths are ok, these need to be equal\n-        if (searchLength != replacementLength) {\n-            throw new IllegalArgumentException(\"Search and Replace array lengths don't match: \"\n-                + searchLength\n-                + \" vs \"\n-                + replacementLength);\n-        }\n+        if (timeToLive < 0) {\n+\t\t\tthrow new IllegalStateException(\"TimeToLive of \" + timeToLive\n+\t\t\t\t\t+ \" is less than 0: \" + text);\n+\t\t}\n \n         // keep track of which still have matches\n         boolean[] noMoreMatchesForReplIndex = new boolean[searchLength];\n@@ -3671,13 +3668,6 @@\n         // get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n         int increase = 0;\n \n-        // count the replacement text elements that are larger than their corresponding text being replaced\n-        for (int i = 0; i < searchList.length; i++) {\n-            int greater = replacementList[i].length() - searchList[i].length();\n-            if (greater > 0) {\n-                increase += 3 * greater; // assume 3 matches\n-            }\n-        }\n         // have upper-bound at 20% increase, then let Java take over\n         increase = Math.min(increase, text.length() / 5);\n \n\n\n"
    }
  ]
}