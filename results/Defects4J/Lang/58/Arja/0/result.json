{
  "repair_end": "2018-12-01 11:28:10.570185", 
  "repair_begin": "2018-12-01 11:16:06.544700", 
  "patches": [
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_58/src/java/org/apache/commons/lang/math/NumberUtils.java\t2018-12-01 05:15:58.998758820 -0500\n+++ /tmp/Arja_Defects4J_Lang_58/patches_nhyd/Patch_568/patched/tmp/Arja_Defects4J_Lang_58/src/java/org/apache/commons/lang/math/NumberUtils.java\t2018-12-01 05:21:26.276897955 -0500\n@@ -411,7 +411,10 @@\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n             return createInteger(str);\n         }   \n-        char lastChar = str.charAt(str.length() - 1);\n+        if (str == null) {\n+\t\t\tthrow new IllegalArgumentException(\"The string must not be null\");\n+\t\t}\n+\t\tchar lastChar = str.charAt(str.length() - 1);\n         String mant;\n         String dec;\n         String exp;\n@@ -461,7 +464,7 @@\n                         return createBigInteger(numeric);\n \n                     }\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t\treturn null;\n                 case 'f' :\n                 case 'F' :\n                     try {\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/math/NumberUtils.java", 
          "line": 464, 
          "faulty": "throw new NumberFormatException(str + \" is not a valid number.\");", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/math/NumberUtils.java", 
          "line": 414, 
          "faulty": "char lastChar=str.charAt(str.length() - 1);", 
          "type": "InsertBefore", 
          "seed": "if (str == null) {\n  throw new IllegalArgumentException(\"The string must not be null\");\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_58/src/java/org/apache/commons/lang/math/NumberUtils.java\t2018-12-01 05:15:58.998758820 -0500\n+++ /tmp/Arja_Defects4J_Lang_58/patches_nhyd/Patch_971/patched/tmp/Arja_Defects4J_Lang_58/src/java/org/apache/commons/lang/math/NumberUtils.java\t2018-12-01 05:23:51.349846073 -0500\n@@ -445,7 +445,8 @@\n             }\n             //Requesting a specific type..\n             String numeric = str.substring(0, str.length() - 1);\n-            boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n+            dec = null;\n+\t\t\tboolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n             switch (lastChar) {\n                 case 'l' :\n                 case 'L' :\n@@ -461,7 +462,7 @@\n                         return createBigInteger(numeric);\n \n                     }\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t\treturn null;\n                 case 'f' :\n                 case 'F' :\n                     try {\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/math/NumberUtils.java", 
          "line": 464, 
          "faulty": "throw new NumberFormatException(str + \" is not a valid number.\");", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/math/NumberUtils.java", 
          "line": 448, 
          "faulty": "boolean allZeros=isAllZeros(mant) && isAllZeros(exp);", 
          "type": "InsertBefore", 
          "seed": "dec=null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_58/src/java/org/apache/commons/lang/StringUtils.java\t2018-12-01 05:15:55.598736595 -0500\n+++ /tmp/Arja_Defects4J_Lang_58/patches_nhyd/Patch_790/patched/tmp/Arja_Defects4J_Lang_58/src/java/org/apache/commons/lang/StringUtils.java\t2018-12-01 05:22:45.665416803 -0500\n@@ -220,7 +220,12 @@\n      */\n     public static boolean isBlank(String str) {\n         int strLen;\n-        if (str == null || (strLen = str.length()) == 0) {\n+        if (\"yes\".equalsIgnoreCase(str)) {\n+\t\t\treturn Boolean.TRUE;\n+\t\t} else if (\"no\".equalsIgnoreCase(str)) {\n+\t\t\treturn Boolean.FALSE;\n+\t\t}\n+\t\tif (str == null || (strLen = str.length()) == 0) {\n             return true;\n         }\n         for (int i = 0; i < strLen; i++) {\n\n\n--- /tmp/Arja_Defects4J_Lang_58/src/java/org/apache/commons/lang/math/NumberUtils.java\t2018-12-01 05:15:58.998758820 -0500\n+++ /tmp/Arja_Defects4J_Lang_58/patches_nhyd/Patch_790/patched/tmp/Arja_Defects4J_Lang_58/src/java/org/apache/commons/lang/math/NumberUtils.java\t2018-12-01 05:22:45.665416803 -0500\n@@ -438,7 +438,8 @@\n             dec = null;\n         }\n         if (!Character.isDigit(lastChar)) {\n-            if (expPos > -1 && expPos < str.length() - 1) {\n+            exp = null;\n+\t\t\tif (expPos > -1 && expPos < str.length() - 1) {\n                 exp = str.substring(expPos + 1, str.length() - 1);\n             } else {\n                 exp = null;\n@@ -461,7 +462,7 @@\n                         return createBigInteger(numeric);\n \n                     }\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t\treturn null;\n                 case 'f' :\n                 case 'F' :\n                     try {\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/math/NumberUtils.java", 
          "line": 464, 
          "faulty": "throw new NumberFormatException(str + \" is not a valid number.\");", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/math/NumberUtils.java", 
          "line": 441, 
          "faulty": "if (expPos > -1 && expPos < str.length() - 1) {\n  exp=str.substring(expPos + 1,str.length() - 1);\n}\n else {\n  exp=null;\n}", 
          "type": "InsertBefore", 
          "seed": "exp=null;"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/StringUtils.java", 
          "line": 223, 
          "faulty": "if (str == null || (strLen=str.length()) == 0) {\n  return true;\n}", 
          "type": "InsertBefore", 
          "seed": "if (\"yes\".equalsIgnoreCase(str)) {\n  return Boolean.TRUE;\n}\n else if (\"no\".equalsIgnoreCase(str)) {\n  return Boolean.FALSE;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_58/src/java/org/apache/commons/lang/math/NumberUtils.java\t2018-12-01 05:15:58.998758820 -0500\n+++ /tmp/Arja_Defects4J_Lang_58/patches_nhyd/Patch_663/patched/tmp/Arja_Defects4J_Lang_58/src/java/org/apache/commons/lang/math/NumberUtils.java\t2018-12-01 05:22:00.585122180 -0500\n@@ -438,7 +438,8 @@\n             dec = null;\n         }\n         if (!Character.isDigit(lastChar)) {\n-            if (expPos > -1 && expPos < str.length() - 1) {\n+            exp = null;\n+\t\t\tif (expPos > -1 && expPos < str.length() - 1) {\n                 exp = str.substring(expPos + 1, str.length() - 1);\n             } else {\n                 exp = null;\n@@ -461,7 +462,7 @@\n                         return createBigInteger(numeric);\n \n                     }\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t\treturn null;\n                 case 'f' :\n                 case 'F' :\n                     try {\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/math/NumberUtils.java", 
          "line": 464, 
          "faulty": "throw new NumberFormatException(str + \" is not a valid number.\");", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/math/NumberUtils.java", 
          "line": 441, 
          "faulty": "if (expPos > -1 && expPos < str.length() - 1) {\n  exp=str.substring(expPos + 1,str.length() - 1);\n}\n else {\n  exp=null;\n}", 
          "type": "InsertBefore", 
          "seed": "exp=null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_58/src/java/org/apache/commons/lang/math/NumberUtils.java\t2018-12-01 05:15:58.998758820 -0500\n+++ /tmp/Arja_Defects4J_Lang_58/patches_nhyd/Patch_1032/patched/tmp/Arja_Defects4J_Lang_58/src/java/org/apache/commons/lang/math/NumberUtils.java\t2018-12-01 05:24:14.717998789 -0500\n@@ -418,7 +418,11 @@\n         int decPos = str.indexOf('.');\n         int expPos = str.indexOf('e') + str.indexOf('E') + 1;\n \n-        if (decPos > -1) {\n+        if (StringUtils.isBlank(str)) {\n+\t\t\tthrow new NumberFormatException(\n+\t\t\t\t\t\"A blank string is not a valid number\");\n+\t\t}\n+\t\tif (decPos > -1) {\n \n             if (expPos > -1) {\n                 if (expPos < decPos) {\n@@ -431,6 +435,15 @@\n             mant = str.substring(0, decPos);\n         } else {\n             if (expPos > -1) {\n+\t\t\t\tif (expPos < decPos) {\n+\t\t\t\t\tthrow new NumberFormatException(str\n+\t\t\t\t\t\t\t+ \" is not a valid number.\");\n+\t\t\t\t}\n+\t\t\t\tdec = str.substring(decPos + 1, expPos);\n+\t\t\t} else {\n+\t\t\t\tdec = str.substring(decPos + 1);\n+\t\t\t}\n+\t\t\tif (expPos > -1) {\n                 mant = str.substring(0, expPos);\n             } else {\n                 mant = str;\n@@ -461,7 +474,7 @@\n                         return createBigInteger(numeric);\n \n                     }\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t\treturn null;\n                 case 'f' :\n                 case 'F' :\n                     try {\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/math/NumberUtils.java", 
          "line": 464, 
          "faulty": "throw new NumberFormatException(str + \" is not a valid number.\");", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/math/NumberUtils.java", 
          "line": 421, 
          "faulty": "if (decPos > -1) {\n  if (expPos > -1) {\n    if (expPos < decPos) {\n      throw new NumberFormatException(str + \" is not a valid number.\");\n    }\n    dec=str.substring(decPos + 1,expPos);\n  }\n else {\n    dec=str.substring(decPos + 1);\n  }\n  mant=str.substring(0,decPos);\n}\n else {\n  if (expPos > -1) {\n    mant=str.substring(0,expPos);\n  }\n else {\n    mant=str;\n  }\n  dec=null;\n}", 
          "type": "InsertBefore", 
          "seed": "if (StringUtils.isBlank(str)) {\n  throw new NumberFormatException(\"A blank string is not a valid number\");\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/math/NumberUtils.java", 
          "line": 433, 
          "faulty": "if (expPos > -1) {\n  mant=str.substring(0,expPos);\n}\n else {\n  mant=str;\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > -1) {\n  if (expPos < decPos) {\n    throw new NumberFormatException(str + \" is not a valid number.\");\n  }\n  dec=str.substring(decPos + 1,expPos);\n}\n else {\n  dec=str.substring(decPos + 1);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_58/src/java/org/apache/commons/lang/math/NumberUtils.java\t2018-12-01 05:15:58.998758820 -0500\n+++ /tmp/Arja_Defects4J_Lang_58/patches_nhyd/Patch_681/patched/tmp/Arja_Defects4J_Lang_58/src/java/org/apache/commons/lang/math/NumberUtils.java\t2018-12-01 05:22:06.589161420 -0500\n@@ -398,7 +398,10 @@\n         if (str == null) {\n             return null;\n         }\n-        if (StringUtils.isBlank(str)) {\n+        if (str == null) {\n+\t\t\tthrow new IllegalArgumentException(\"The string must not be null\");\n+\t\t}\n+\t\tif (StringUtils.isBlank(str)) {\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n@@ -461,7 +464,7 @@\n                         return createBigInteger(numeric);\n \n                     }\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t\treturn null;\n                 case 'f' :\n                 case 'F' :\n                     try {\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/math/NumberUtils.java", 
          "line": 401, 
          "faulty": "if (StringUtils.isBlank(str)) {\n  throw new NumberFormatException(\"A blank string is not a valid number\");\n}", 
          "type": "InsertBefore", 
          "seed": "if (str == null) {\n  throw new IllegalArgumentException(\"The string must not be null\");\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/math/NumberUtils.java", 
          "line": 464, 
          "faulty": "throw new NumberFormatException(str + \" is not a valid number.\");", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_58/src/java/org/apache/commons/lang/math/NumberUtils.java\t2018-12-01 05:15:58.998758820 -0500\n+++ /tmp/Arja_Defects4J_Lang_58/patches_nhyd/Patch_928/patched/tmp/Arja_Defects4J_Lang_58/src/java/org/apache/commons/lang/math/NumberUtils.java\t2018-12-01 05:23:34.457735678 -0500\n@@ -461,7 +461,7 @@\n                         return createBigInteger(numeric);\n \n                     }\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t\treturn null;\n                 case 'f' :\n                 case 'F' :\n                     try {\n@@ -557,9 +557,7 @@\n             return true;\n         }\n         for (int i = str.length() - 1; i >= 0; i--) {\n-            if (str.charAt(i) != '0') {\n-                return false;\n-            }\n+            return false;\n         }\n         return str.length() > 0;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/math/NumberUtils.java", 
          "line": 464, 
          "faulty": "throw new NumberFormatException(str + \" is not a valid number.\");", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/math/NumberUtils.java", 
          "line": 560, 
          "faulty": "if (str.charAt(i) != '0') {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_58/src/java/org/apache/commons/lang/math/NumberUtils.java\t2018-12-01 05:15:58.998758820 -0500\n+++ /tmp/Arja_Defects4J_Lang_58/patches_nhyd/Patch_583/patched/tmp/Arja_Defects4J_Lang_58/src/java/org/apache/commons/lang/math/NumberUtils.java\t2018-12-01 05:21:31.600932751 -0500\n@@ -415,7 +415,8 @@\n         String mant;\n         String dec;\n         String exp;\n-        int decPos = str.indexOf('.');\n+        exp = null;\n+\t\tint decPos = str.indexOf('.');\n         int expPos = str.indexOf('e') + str.indexOf('E') + 1;\n \n         if (decPos > -1) {\n@@ -461,7 +462,7 @@\n                         return createBigInteger(numeric);\n \n                     }\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t\treturn null;\n                 case 'f' :\n                 case 'F' :\n                     try {\n@@ -553,9 +554,11 @@\n      * @return if it is all zeros or <code>null</code>\n      */\n     private static boolean isAllZeros(String str) {\n-        if (str == null) {\n-            return true;\n-        }\n+        for (int i = str.length() - 1; i >= 0; i--) {\n+\t\t\tif (str.charAt(i) != '0') {\n+\t\t\t\treturn false;\n+\t\t\t}\n+\t\t}\n         for (int i = str.length() - 1; i >= 0; i--) {\n             if (str.charAt(i) != '0') {\n                 return false;\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/math/NumberUtils.java", 
          "line": 464, 
          "faulty": "throw new NumberFormatException(str + \" is not a valid number.\");", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/math/NumberUtils.java", 
          "line": 556, 
          "faulty": "if (str == null) {\n  return true;\n}", 
          "type": "Replace", 
          "seed": "for (int i=str.length() - 1; i >= 0; i--) {\n  if (str.charAt(i) != '0') {\n    return false;\n  }\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/math/NumberUtils.java", 
          "line": 418, 
          "faulty": "int decPos=str.indexOf('.');", 
          "type": "InsertBefore", 
          "seed": "exp=null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_58/src/java/org/apache/commons/lang/math/NumberUtils.java\t2018-12-01 05:15:58.998758820 -0500\n+++ /tmp/Arja_Defects4J_Lang_58/patches_nhyd/Patch_882/patched/tmp/Arja_Defects4J_Lang_58/src/java/org/apache/commons/lang/math/NumberUtils.java\t2018-12-01 05:23:18.693632655 -0500\n@@ -401,7 +401,10 @@\n         if (StringUtils.isBlank(str)) {\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n-        if (str.startsWith(\"--\")) {\n+        if (str == null) {\n+\t\t\tthrow new IllegalArgumentException(\"The string must not be null\");\n+\t\t}\n+\t\tif (str.startsWith(\"--\")) {\n             // this is protection for poorness in java.lang.BigDecimal.\n             // it accepts this as a legal value, but it does not appear \n             // to be in specification of class. OS X Java parses it to \n@@ -461,7 +464,7 @@\n                         return createBigInteger(numeric);\n \n                     }\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t\treturn null;\n                 case 'f' :\n                 case 'F' :\n                     try {\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/math/NumberUtils.java", 
          "line": 464, 
          "faulty": "throw new NumberFormatException(str + \" is not a valid number.\");", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/math/NumberUtils.java", 
          "line": 404, 
          "faulty": "if (str.startsWith(\"--\")) {\n  return null;\n}", 
          "type": "InsertBefore", 
          "seed": "if (str == null) {\n  throw new IllegalArgumentException(\"The string must not be null\");\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_58/src/java/org/apache/commons/lang/math/NumberUtils.java\t2018-12-01 05:15:58.998758820 -0500\n+++ /tmp/Arja_Defects4J_Lang_58/patches_nhyd/Patch_1228/patched/tmp/Arja_Defects4J_Lang_58/src/java/org/apache/commons/lang/math/NumberUtils.java\t2018-12-01 05:25:30.022491187 -0500\n@@ -461,7 +461,7 @@\n                         return createBigInteger(numeric);\n \n                     }\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t\treturn null;\n                 case 'f' :\n                 case 'F' :\n                     try {\n@@ -1508,11 +1508,13 @@\n             return false;\n         }\n         for (int i = 0; i < str.length(); i++) {\n-            if (!Character.isDigit(str.charAt(i))) {\n-                return false;\n-            }\n         }\n-        return true;\n+        for (int i = 0; i < str.length(); i++) {\n+\t\t\tif (!Character.isDigit(str.charAt(i))) {\n+\t\t\t\treturn false;\n+\t\t\t}\n+\t\t}\n+\t\treturn true;\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/math/NumberUtils.java", 
          "line": 464, 
          "faulty": "throw new NumberFormatException(str + \" is not a valid number.\");", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/math/NumberUtils.java", 
          "line": 1511, 
          "faulty": "if (!Character.isDigit(str.charAt(i))) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "throw new ArithmeticException(\"Numerator too large to represent as an Integer.\");"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/math/NumberUtils.java", 
          "line": 1515, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "for (int i=0; i < str.length(); i++) {\n  if (!Character.isDigit(str.charAt(i))) {\n    return false;\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_58/src/java/org/apache/commons/lang/math/NumberUtils.java\t2018-12-01 05:15:58.998758820 -0500\n+++ /tmp/Arja_Defects4J_Lang_58/patches_nhyd/Patch_1235/patched/tmp/Arja_Defects4J_Lang_58/src/java/org/apache/commons/lang/math/NumberUtils.java\t2018-12-01 05:25:32.314506193 -0500\n@@ -433,7 +433,11 @@\n             if (expPos > -1) {\n                 mant = str.substring(0, expPos);\n             } else {\n-                mant = str;\n+                if (StringUtils.isBlank(str)) {\n+\t\t\t\t\tthrow new NumberFormatException(\n+\t\t\t\t\t\t\t\"A blank string is not a valid number\");\n+\t\t\t\t}\n+\t\t\t\tmant = str;\n             }\n             dec = null;\n         }\n@@ -461,7 +465,7 @@\n                         return createBigInteger(numeric);\n \n                     }\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t\treturn null;\n                 case 'f' :\n                 case 'F' :\n                     try {\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/math/NumberUtils.java", 
          "line": 464, 
          "faulty": "throw new NumberFormatException(str + \" is not a valid number.\");", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/math/NumberUtils.java", 
          "line": 436, 
          "faulty": "mant=str;", 
          "type": "InsertBefore", 
          "seed": "if (StringUtils.isBlank(str)) {\n  throw new NumberFormatException(\"A blank string is not a valid number\");\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_58/src/java/org/apache/commons/lang/math/NumberUtils.java\t2018-12-01 05:15:58.998758820 -0500\n+++ /tmp/Arja_Defects4J_Lang_58/patches_nhyd/Patch_912/patched/tmp/Arja_Defects4J_Lang_58/src/java/org/apache/commons/lang/math/NumberUtils.java\t2018-12-01 05:23:28.905699393 -0500\n@@ -461,7 +461,7 @@\n                         return createBigInteger(numeric);\n \n                     }\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t\treturn null;\n                 case 'f' :\n                 case 'F' :\n                     try {\n@@ -1508,7 +1508,10 @@\n             return false;\n         }\n         for (int i = 0; i < str.length(); i++) {\n-            if (!Character.isDigit(str.charAt(i))) {\n+            if (StringUtils.isEmpty(str)) {\n+\t\t\t\treturn false;\n+\t\t\t}\n+\t\t\tif (!Character.isDigit(str.charAt(i))) {\n                 return false;\n             }\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/math/NumberUtils.java", 
          "line": 464, 
          "faulty": "throw new NumberFormatException(str + \" is not a valid number.\");", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/math/NumberUtils.java", 
          "line": 1511, 
          "faulty": "if (!Character.isDigit(str.charAt(i))) {\n  return false;\n}", 
          "type": "InsertBefore", 
          "seed": "if (StringUtils.isEmpty(str)) {\n  return false;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_58/src/java/org/apache/commons/lang/math/NumberUtils.java\t2018-12-01 05:15:58.998758820 -0500\n+++ /tmp/Arja_Defects4J_Lang_58/patches_nhyd/Patch_815/patched/tmp/Arja_Defects4J_Lang_58/src/java/org/apache/commons/lang/math/NumberUtils.java\t2018-12-01 05:22:54.429474078 -0500\n@@ -401,13 +401,9 @@\n         if (StringUtils.isBlank(str)) {\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n-        if (str.startsWith(\"--\")) {\n-            // this is protection for poorness in java.lang.BigDecimal.\n-            // it accepts this as a legal value, but it does not appear \n-            // to be in specification of class. OS X Java parses it to \n-            // a wrong value.\n-            return null;\n-        }\n+        if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n+\t\t\treturn createInteger(str);\n+\t\t}\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n             return createInteger(str);\n         }   \n@@ -461,7 +457,7 @@\n                         return createBigInteger(numeric);\n \n                     }\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t\treturn null;\n                 case 'f' :\n                 case 'F' :\n                     try {\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/math/NumberUtils.java", 
          "line": 464, 
          "faulty": "throw new NumberFormatException(str + \" is not a valid number.\");", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/math/NumberUtils.java", 
          "line": 404, 
          "faulty": "if (str.startsWith(\"--\")) {\n  return null;\n}", 
          "type": "Replace", 
          "seed": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n  return createInteger(str);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_58/src/java/org/apache/commons/lang/StringUtils.java\t2018-12-01 05:15:55.598736595 -0500\n+++ /tmp/Arja_Defects4J_Lang_58/patches_nhyd/Patch_1196/patched/tmp/Arja_Defects4J_Lang_58/src/java/org/apache/commons/lang/StringUtils.java\t2018-12-01 05:25:18.482415633 -0500\n@@ -225,7 +225,10 @@\n         }\n         for (int i = 0; i < strLen; i++) {\n             if ((Character.isWhitespace(str.charAt(i)) == false)) {\n-                return false;\n+                if (Character.isDigit(str.charAt(i)) == false) {\n+\t\t\t\t\treturn false;\n+\t\t\t\t}\n+\t\t\t\treturn false;\n             }\n         }\n         return true;\n\n\n--- /tmp/Arja_Defects4J_Lang_58/src/java/org/apache/commons/lang/math/NumberUtils.java\t2018-12-01 05:15:58.998758820 -0500\n+++ /tmp/Arja_Defects4J_Lang_58/patches_nhyd/Patch_1196/patched/tmp/Arja_Defects4J_Lang_58/src/java/org/apache/commons/lang/math/NumberUtils.java\t2018-12-01 05:25:18.482415633 -0500\n@@ -461,7 +461,7 @@\n                         return createBigInteger(numeric);\n \n                     }\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t\treturn null;\n                 case 'f' :\n                 case 'F' :\n                     try {\n@@ -557,7 +557,10 @@\n             return true;\n         }\n         for (int i = str.length() - 1; i >= 0; i--) {\n-            if (str.charAt(i) != '0') {\n+            if (str == null) {\n+\t\t\t\treturn true;\n+\t\t\t}\n+\t\t\tif (str.charAt(i) != '0') {\n                 return false;\n             }\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/StringUtils.java", 
          "line": 228, 
          "faulty": "return false;", 
          "type": "InsertBefore", 
          "seed": "if (Character.isDigit(str.charAt(i)) == false) {\n  return false;\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/math/NumberUtils.java", 
          "line": 464, 
          "faulty": "throw new NumberFormatException(str + \" is not a valid number.\");", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/math/NumberUtils.java", 
          "line": 560, 
          "faulty": "if (str.charAt(i) != '0') {\n  return false;\n}", 
          "type": "InsertBefore", 
          "seed": "if (str == null) {\n  return true;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_58/src/java/org/apache/commons/lang/math/NumberUtils.java\t2018-12-01 05:15:58.998758820 -0500\n+++ /tmp/Arja_Defects4J_Lang_58/patches_nhyd/Patch_885/patched/tmp/Arja_Defects4J_Lang_58/src/java/org/apache/commons/lang/math/NumberUtils.java\t2018-12-01 05:23:19.441637543 -0500\n@@ -454,14 +454,15 @@\n                         && isDigits(numeric.substring(1))\n                         && (numeric.charAt(0) == '-' || Character.isDigit(numeric.charAt(0)))) {\n                         try {\n-                            return createLong(numeric);\n+                            mant = str;\n+\t\t\t\t\t\t\treturn createLong(numeric);\n                         } catch (NumberFormatException nfe) {\n                             //Too big for a long\n                         }\n                         return createBigInteger(numeric);\n \n                     }\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t\treturn null;\n                 case 'f' :\n                 case 'F' :\n                     try {\n@@ -556,7 +557,10 @@\n         if (str == null) {\n             return true;\n         }\n-        for (int i = str.length() - 1; i >= 0; i--) {\n+        if (StringUtils.isEmpty(str)) {\n+\t\t\treturn false;\n+\t\t}\n+\t\tfor (int i = str.length() - 1; i >= 0; i--) {\n             if (str.charAt(i) != '0') {\n                 return false;\n             }\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/math/NumberUtils.java", 
          "line": 464, 
          "faulty": "throw new NumberFormatException(str + \" is not a valid number.\");", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/math/NumberUtils.java", 
          "line": 457, 
          "faulty": "return createLong(numeric);", 
          "type": "InsertBefore", 
          "seed": "mant=str;"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/math/NumberUtils.java", 
          "line": 559, 
          "faulty": "for (int i=str.length() - 1; i >= 0; i--) {\n  if (str.charAt(i) != '0') {\n    return false;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "if (StringUtils.isEmpty(str)) {\n  return false;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_58/src/java/org/apache/commons/lang/math/NumberUtils.java\t2018-12-01 05:15:58.998758820 -0500\n+++ /tmp/Arja_Defects4J_Lang_58/patches_nhyd/Patch_707/patched/tmp/Arja_Defects4J_Lang_58/src/java/org/apache/commons/lang/math/NumberUtils.java\t2018-12-01 05:22:14.869215534 -0500\n@@ -415,7 +415,10 @@\n         String mant;\n         String dec;\n         String exp;\n-        int decPos = str.indexOf('.');\n+        if (str == null) {\n+\t\t\tthrow new IllegalArgumentException(\"The string must not be null\");\n+\t\t}\n+\t\tint decPos = str.indexOf('.');\n         int expPos = str.indexOf('e') + str.indexOf('E') + 1;\n \n         if (decPos > -1) {\n@@ -461,7 +464,7 @@\n                         return createBigInteger(numeric);\n \n                     }\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t\treturn null;\n                 case 'f' :\n                 case 'F' :\n                     try {\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/math/NumberUtils.java", 
          "line": 464, 
          "faulty": "throw new NumberFormatException(str + \" is not a valid number.\");", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/math/NumberUtils.java", 
          "line": 418, 
          "faulty": "int decPos=str.indexOf('.');", 
          "type": "InsertBefore", 
          "seed": "if (str == null) {\n  throw new IllegalArgumentException(\"The string must not be null\");\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_58/src/java/org/apache/commons/lang/math/NumberUtils.java\t2018-12-01 05:15:58.998758820 -0500\n+++ /tmp/Arja_Defects4J_Lang_58/patches_nhyd/Patch_1470/patched/tmp/Arja_Defects4J_Lang_58/src/java/org/apache/commons/lang/math/NumberUtils.java\t2018-12-01 05:26:57.595064504 -0500\n@@ -401,13 +401,6 @@\n         if (StringUtils.isBlank(str)) {\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n-        if (str.startsWith(\"--\")) {\n-            // this is protection for poorness in java.lang.BigDecimal.\n-            // it accepts this as a legal value, but it does not appear \n-            // to be in specification of class. OS X Java parses it to \n-            // a wrong value.\n-            return null;\n-        }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n             return createInteger(str);\n         }   \n@@ -461,7 +454,7 @@\n                         return createBigInteger(numeric);\n \n                     }\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t\treturn null;\n                 case 'f' :\n                 case 'F' :\n                     try {\n@@ -628,7 +621,10 @@\n         if (str == null) {\n             return null;\n         }\n-        return Long.valueOf(str);\n+        if (str.startsWith(\"--\")) {\n+\t\t\treturn null;\n+\t\t}\n+\t\treturn Long.valueOf(str);\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/math/NumberUtils.java", 
          "line": 464, 
          "faulty": "throw new NumberFormatException(str + \" is not a valid number.\");", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/math/NumberUtils.java", 
          "line": 404, 
          "faulty": "if (str.startsWith(\"--\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n  return createInteger(str);\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/math/NumberUtils.java", 
          "line": 631, 
          "faulty": "return Long.valueOf(str);", 
          "type": "InsertBefore", 
          "seed": "if (str.startsWith(\"--\")) {\n  return null;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_58/src/java/org/apache/commons/lang/math/NumberUtils.java\t2018-12-01 05:15:58.998758820 -0500\n+++ /tmp/Arja_Defects4J_Lang_58/patches_nhyd/Patch_1313/patched/tmp/Arja_Defects4J_Lang_58/src/java/org/apache/commons/lang/math/NumberUtils.java\t2018-12-01 05:25:59.762685894 -0500\n@@ -399,6 +399,10 @@\n             return null;\n         }\n         if (StringUtils.isBlank(str)) {\n+\t\t\tthrow new NumberFormatException(\n+\t\t\t\t\t\"A blank string is not a valid number\");\n+\t\t}\n+\t\tif (StringUtils.isBlank(str)) {\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n@@ -461,7 +465,7 @@\n                         return createBigInteger(numeric);\n \n                     }\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t\treturn null;\n                 case 'f' :\n                 case 'F' :\n                     try {\n@@ -1507,7 +1511,11 @@\n         if (StringUtils.isEmpty(str)) {\n             return false;\n         }\n-        for (int i = 0; i < str.length(); i++) {\n+        if (StringUtils.isBlank(str)) {\n+\t\t\tthrow new NumberFormatException(\n+\t\t\t\t\t\"A blank string is not a valid number\");\n+\t\t}\n+\t\tfor (int i = 0; i < str.length(); i++) {\n             if (!Character.isDigit(str.charAt(i))) {\n                 return false;\n             }\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/math/NumberUtils.java", 
          "line": 401, 
          "faulty": "if (StringUtils.isBlank(str)) {\n  throw new NumberFormatException(\"A blank string is not a valid number\");\n}", 
          "type": "InsertBefore", 
          "seed": "if (StringUtils.isBlank(str)) {\n  throw new NumberFormatException(\"A blank string is not a valid number\");\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/math/NumberUtils.java", 
          "line": 464, 
          "faulty": "throw new NumberFormatException(str + \" is not a valid number.\");", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/math/NumberUtils.java", 
          "line": 1510, 
          "faulty": "for (int i=0; i < str.length(); i++) {\n  if (!Character.isDigit(str.charAt(i))) {\n    return false;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "if (StringUtils.isBlank(str)) {\n  throw new NumberFormatException(\"A blank string is not a valid number\");\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_58/src/java/org/apache/commons/lang/math/NumberUtils.java\t2018-12-01 05:15:58.998758820 -0500\n+++ /tmp/Arja_Defects4J_Lang_58/patches_nhyd/Patch_1004/patched/tmp/Arja_Defects4J_Lang_58/src/java/org/apache/commons/lang/math/NumberUtils.java\t2018-12-01 05:24:03.569925934 -0500\n@@ -461,7 +461,7 @@\n                         return createBigInteger(numeric);\n \n                     }\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t\treturn createLong(numeric);\n                 case 'f' :\n                 case 'F' :\n                     try {\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/math/NumberUtils.java", 
          "line": 464, 
          "faulty": "throw new NumberFormatException(str + \" is not a valid number.\");", 
          "type": "Replace", 
          "seed": "return createLong(numeric);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_58/src/java/org/apache/commons/lang/math/NumberUtils.java\t2018-12-01 05:15:58.998758820 -0500\n+++ /tmp/Arja_Defects4J_Lang_58/patches_nhyd/Patch_769/patched/tmp/Arja_Defects4J_Lang_58/src/java/org/apache/commons/lang/math/NumberUtils.java\t2018-12-01 05:22:37.609364153 -0500\n@@ -439,6 +439,11 @@\n         }\n         if (!Character.isDigit(lastChar)) {\n             if (expPos > -1 && expPos < str.length() - 1) {\n+\t\t\t\texp = str.substring(expPos + 1, str.length() - 1);\n+\t\t\t} else {\n+\t\t\t\texp = null;\n+\t\t\t}\n+\t\t\tif (expPos > -1 && expPos < str.length() - 1) {\n                 exp = str.substring(expPos + 1, str.length() - 1);\n             } else {\n                 exp = null;\n@@ -461,7 +466,7 @@\n                         return createBigInteger(numeric);\n \n                     }\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t\treturn null;\n                 case 'f' :\n                 case 'F' :\n                     try {\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/math/NumberUtils.java", 
          "line": 464, 
          "faulty": "throw new NumberFormatException(str + \" is not a valid number.\");", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/math/NumberUtils.java", 
          "line": 441, 
          "faulty": "if (expPos > -1 && expPos < str.length() - 1) {\n  exp=str.substring(expPos + 1,str.length() - 1);\n}\n else {\n  exp=null;\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > -1 && expPos < str.length() - 1) {\n  exp=str.substring(expPos + 1,str.length() - 1);\n}\n else {\n  exp=null;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_58/src/java/org/apache/commons/lang/math/NumberUtils.java\t2018-12-01 05:15:58.998758820 -0500\n+++ /tmp/Arja_Defects4J_Lang_58/patches_nhyd/Patch_1299/patched/tmp/Arja_Defects4J_Lang_58/src/java/org/apache/commons/lang/math/NumberUtils.java\t2018-12-01 05:25:54.926654233 -0500\n@@ -418,7 +418,11 @@\n         int decPos = str.indexOf('.');\n         int expPos = str.indexOf('e') + str.indexOf('E') + 1;\n \n-        if (decPos > -1) {\n+        if (StringUtils.isBlank(str)) {\n+\t\t\tthrow new NumberFormatException(\n+\t\t\t\t\t\"A blank string is not a valid number\");\n+\t\t}\n+\t\tif (decPos > -1) {\n \n             if (expPos > -1) {\n                 if (expPos < decPos) {\n@@ -461,7 +465,7 @@\n                         return createBigInteger(numeric);\n \n                     }\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t\treturn null;\n                 case 'f' :\n                 case 'F' :\n                     try {\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/math/NumberUtils.java", 
          "line": 464, 
          "faulty": "throw new NumberFormatException(str + \" is not a valid number.\");", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/math/NumberUtils.java", 
          "line": 421, 
          "faulty": "if (decPos > -1) {\n  if (expPos > -1) {\n    if (expPos < decPos) {\n      throw new NumberFormatException(str + \" is not a valid number.\");\n    }\n    dec=str.substring(decPos + 1,expPos);\n  }\n else {\n    dec=str.substring(decPos + 1);\n  }\n  mant=str.substring(0,decPos);\n}\n else {\n  if (expPos > -1) {\n    mant=str.substring(0,expPos);\n  }\n else {\n    mant=str;\n  }\n  dec=null;\n}", 
          "type": "InsertBefore", 
          "seed": "if (StringUtils.isBlank(str)) {\n  throw new NumberFormatException(\"A blank string is not a valid number\");\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_58/src/java/org/apache/commons/lang/math/NumberUtils.java\t2018-12-01 05:15:58.998758820 -0500\n+++ /tmp/Arja_Defects4J_Lang_58/patches_nhyd/Patch_1000/patched/tmp/Arja_Defects4J_Lang_58/src/java/org/apache/commons/lang/math/NumberUtils.java\t2018-12-01 05:24:02.433918510 -0500\n@@ -461,7 +461,7 @@\n                         return createBigInteger(numeric);\n \n                     }\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t\treturn null;\n                 case 'f' :\n                 case 'F' :\n                     try {\n@@ -556,7 +556,10 @@\n         if (str == null) {\n             return true;\n         }\n-        for (int i = str.length() - 1; i >= 0; i--) {\n+        if (StringUtils.isEmpty(str)) {\n+\t\t\treturn false;\n+\t\t}\n+\t\tfor (int i = str.length() - 1; i >= 0; i--) {\n             if (str.charAt(i) != '0') {\n                 return false;\n             }\n@@ -1507,7 +1510,11 @@\n         if (StringUtils.isEmpty(str)) {\n             return false;\n         }\n-        for (int i = 0; i < str.length(); i++) {\n+        if (StringUtils.isBlank(str)) {\n+\t\t\tthrow new NumberFormatException(\n+\t\t\t\t\t\"A blank string is not a valid number\");\n+\t\t}\n+\t\tfor (int i = 0; i < str.length(); i++) {\n             if (!Character.isDigit(str.charAt(i))) {\n                 return false;\n             }\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/math/NumberUtils.java", 
          "line": 464, 
          "faulty": "throw new NumberFormatException(str + \" is not a valid number.\");", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/math/NumberUtils.java", 
          "line": 559, 
          "faulty": "for (int i=str.length() - 1; i >= 0; i--) {\n  if (str.charAt(i) != '0') {\n    return false;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "if (StringUtils.isEmpty(str)) {\n  return false;\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/math/NumberUtils.java", 
          "line": 1510, 
          "faulty": "for (int i=0; i < str.length(); i++) {\n  if (!Character.isDigit(str.charAt(i))) {\n    return false;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "if (StringUtils.isBlank(str)) {\n  throw new NumberFormatException(\"A blank string is not a valid number\");\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_58/src/java/org/apache/commons/lang/math/NumberUtils.java\t2018-12-01 05:15:58.998758820 -0500\n+++ /tmp/Arja_Defects4J_Lang_58/patches_nhyd/Patch_824/patched/tmp/Arja_Defects4J_Lang_58/src/java/org/apache/commons/lang/math/NumberUtils.java\t2018-12-01 05:22:57.013490967 -0500\n@@ -443,7 +443,10 @@\n             } else {\n                 exp = null;\n             }\n-            //Requesting a specific type..\n+            if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n+\t\t\t\treturn createInteger(str);\n+\t\t\t}\n+\t\t\t//Requesting a specific type..\n             String numeric = str.substring(0, str.length() - 1);\n             boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n             switch (lastChar) {\n@@ -461,7 +464,7 @@\n                         return createBigInteger(numeric);\n \n                     }\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t\treturn null;\n                 case 'f' :\n                 case 'F' :\n                     try {\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/math/NumberUtils.java", 
          "line": 464, 
          "faulty": "throw new NumberFormatException(str + \" is not a valid number.\");", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/math/NumberUtils.java", 
          "line": 447, 
          "faulty": "String numeric=str.substring(0,str.length() - 1);", 
          "type": "InsertBefore", 
          "seed": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n  return createInteger(str);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_58/src/java/org/apache/commons/lang/StringUtils.java\t2018-12-01 05:15:55.598736595 -0500\n+++ /tmp/Arja_Defects4J_Lang_58/patches_nhyd/Patch_598/patched/tmp/Arja_Defects4J_Lang_58/src/java/org/apache/commons/lang/StringUtils.java\t2018-12-01 05:21:36.856967103 -0500\n@@ -220,7 +220,12 @@\n      */\n     public static boolean isBlank(String str) {\n         int strLen;\n-        if (str == null || (strLen = str.length()) == 0) {\n+        if (\"yes\".equalsIgnoreCase(str)) {\n+\t\t\treturn Boolean.TRUE;\n+\t\t} else if (\"no\".equalsIgnoreCase(str)) {\n+\t\t\treturn Boolean.FALSE;\n+\t\t}\n+\t\tif (str == null || (strLen = str.length()) == 0) {\n             return true;\n         }\n         for (int i = 0; i < strLen; i++) {\n\n\n--- /tmp/Arja_Defects4J_Lang_58/src/java/org/apache/commons/lang/math/NumberUtils.java\t2018-12-01 05:15:58.998758820 -0500\n+++ /tmp/Arja_Defects4J_Lang_58/patches_nhyd/Patch_598/patched/tmp/Arja_Defects4J_Lang_58/src/java/org/apache/commons/lang/math/NumberUtils.java\t2018-12-01 05:21:36.860967129 -0500\n@@ -399,6 +399,10 @@\n             return null;\n         }\n         if (StringUtils.isBlank(str)) {\n+\t\t\tthrow new NumberFormatException(\n+\t\t\t\t\t\"A blank string is not a valid number\");\n+\t\t}\n+\t\tif (StringUtils.isBlank(str)) {\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n@@ -461,7 +465,7 @@\n                         return createBigInteger(numeric);\n \n                     }\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t\treturn null;\n                 case 'f' :\n                 case 'F' :\n                     try {\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/math/NumberUtils.java", 
          "line": 401, 
          "faulty": "if (StringUtils.isBlank(str)) {\n  throw new NumberFormatException(\"A blank string is not a valid number\");\n}", 
          "type": "InsertBefore", 
          "seed": "if (StringUtils.isBlank(str)) {\n  throw new NumberFormatException(\"A blank string is not a valid number\");\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/math/NumberUtils.java", 
          "line": 464, 
          "faulty": "throw new NumberFormatException(str + \" is not a valid number.\");", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/StringUtils.java", 
          "line": 223, 
          "faulty": "if (str == null || (strLen=str.length()) == 0) {\n  return true;\n}", 
          "type": "InsertBefore", 
          "seed": "if (\"yes\".equalsIgnoreCase(str)) {\n  return Boolean.TRUE;\n}\n else if (\"no\".equalsIgnoreCase(str)) {\n  return Boolean.FALSE;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_58/src/java/org/apache/commons/lang/math/NumberUtils.java\t2018-12-01 05:15:58.998758820 -0500\n+++ /tmp/Arja_Defects4J_Lang_58/patches_nhyd/Patch_848/patched/tmp/Arja_Defects4J_Lang_58/src/java/org/apache/commons/lang/math/NumberUtils.java\t2018-12-01 05:23:05.561546832 -0500\n@@ -401,13 +401,6 @@\n         if (StringUtils.isBlank(str)) {\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n-        if (str.startsWith(\"--\")) {\n-            // this is protection for poorness in java.lang.BigDecimal.\n-            // it accepts this as a legal value, but it does not appear \n-            // to be in specification of class. OS X Java parses it to \n-            // a wrong value.\n-            return null;\n-        }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n             return createInteger(str);\n         }   \n@@ -461,7 +454,7 @@\n                         return createBigInteger(numeric);\n \n                     }\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t\treturn null;\n                 case 'f' :\n                 case 'F' :\n                     try {\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/math/NumberUtils.java", 
          "line": 464, 
          "faulty": "throw new NumberFormatException(str + \" is not a valid number.\");", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/math/NumberUtils.java", 
          "line": 404, 
          "faulty": "if (str.startsWith(\"--\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n  return createInteger(str);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_58/src/java/org/apache/commons/lang/math/NumberUtils.java\t2018-12-01 05:15:58.998758820 -0500\n+++ /tmp/Arja_Defects4J_Lang_58/patches_nhyd/Patch_459/patched/tmp/Arja_Defects4J_Lang_58/src/java/org/apache/commons/lang/math/NumberUtils.java\t2018-12-01 05:20:45.640632368 -0500\n@@ -461,7 +461,7 @@\n                         return createBigInteger(numeric);\n \n                     }\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t\treturn null;\n                 case 'f' :\n                 case 'F' :\n                     try {\n@@ -553,9 +553,11 @@\n      * @return if it is all zeros or <code>null</code>\n      */\n     private static boolean isAllZeros(String str) {\n-        if (str == null) {\n-            return true;\n-        }\n+        for (int i = str.length() - 1; i >= 0; i--) {\n+\t\t\tif (str.charAt(i) != '0') {\n+\t\t\t\treturn false;\n+\t\t\t}\n+\t\t}\n         for (int i = str.length() - 1; i >= 0; i--) {\n             if (str.charAt(i) != '0') {\n                 return false;\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/math/NumberUtils.java", 
          "line": 464, 
          "faulty": "throw new NumberFormatException(str + \" is not a valid number.\");", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/math/NumberUtils.java", 
          "line": 556, 
          "faulty": "if (str == null) {\n  return true;\n}", 
          "type": "Replace", 
          "seed": "for (int i=str.length() - 1; i >= 0; i--) {\n  if (str.charAt(i) != '0') {\n    return false;\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_58/src/java/org/apache/commons/lang/math/NumberUtils.java\t2018-12-01 05:15:58.998758820 -0500\n+++ /tmp/Arja_Defects4J_Lang_58/patches_nhyd/Patch_1255/patched/tmp/Arja_Defects4J_Lang_58/src/java/org/apache/commons/lang/math/NumberUtils.java\t2018-12-01 05:25:39.386552494 -0500\n@@ -461,7 +461,7 @@\n                         return createBigInteger(numeric);\n \n                     }\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t\treturn null;\n                 case 'f' :\n                 case 'F' :\n                     try {\n@@ -1505,9 +1505,9 @@\n      */\n     public static boolean isDigits(String str) {\n         if (StringUtils.isEmpty(str)) {\n-            return false;\n-        }\n-        for (int i = 0; i < str.length(); i++) {\n+\t\t\treturn false;\n+\t\t}\n+\t\tfor (int i = 0; i < str.length(); i++) {\n             if (!Character.isDigit(str.charAt(i))) {\n                 return false;\n             }\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/math/NumberUtils.java", 
          "line": 464, 
          "faulty": "throw new NumberFormatException(str + \" is not a valid number.\");", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/math/NumberUtils.java", 
          "line": 1507, 
          "faulty": "if (StringUtils.isEmpty(str)) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "if (StringUtils.isBlank(str)) {\n  throw new NumberFormatException(\"A blank string is not a valid number\");\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/math/NumberUtils.java", 
          "line": 1510, 
          "faulty": "for (int i=0; i < str.length(); i++) {\n  if (!Character.isDigit(str.charAt(i))) {\n    return false;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "if (StringUtils.isEmpty(str)) {\n  return false;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_58/src/java/org/apache/commons/lang/math/NumberUtils.java\t2018-12-01 05:15:58.998758820 -0500\n+++ /tmp/Arja_Defects4J_Lang_58/patches_nhyd/Patch_1477/patched/tmp/Arja_Defects4J_Lang_58/src/java/org/apache/commons/lang/math/NumberUtils.java\t2018-12-01 05:26:59.831079142 -0500\n@@ -461,7 +461,7 @@\n                         return createBigInteger(numeric);\n \n                     }\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t\treturn createBigInteger(numeric);\n                 case 'f' :\n                 case 'F' :\n                     try {\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/math/NumberUtils.java", 
          "line": 464, 
          "faulty": "throw new NumberFormatException(str + \" is not a valid number.\");", 
          "type": "Replace", 
          "seed": "return createBigInteger(numeric);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_58/src/java/org/apache/commons/lang/math/NumberUtils.java\t2018-12-01 05:15:58.998758820 -0500\n+++ /tmp/Arja_Defects4J_Lang_58/patches_nhyd/Patch_453/patched/tmp/Arja_Defects4J_Lang_58/src/java/org/apache/commons/lang/math/NumberUtils.java\t2018-12-01 05:20:43.756620055 -0500\n@@ -461,7 +461,7 @@\n                         return createBigInteger(numeric);\n \n                     }\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t\treturn null;\n                 case 'f' :\n                 case 'F' :\n                     try {\n@@ -553,14 +553,17 @@\n      * @return if it is all zeros or <code>null</code>\n      */\n     private static boolean isAllZeros(String str) {\n-        if (str == null) {\n-            return true;\n-        }\n         for (int i = str.length() - 1; i >= 0; i--) {\n-            if (str.charAt(i) != '0') {\n-                return false;\n-            }\n+\t\t\tif (str.charAt(i) != '0') {\n+\t\t\t\treturn false;\n+\t\t\t}\n+\t\t}\n+\t\tif (str == null) {\n+            return true;\n         }\n+        if (StringUtils.isEmpty(str)) {\n+\t\t\treturn false;\n+\t\t}\n         return str.length() > 0;\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/math/NumberUtils.java", 
          "line": 464, 
          "faulty": "throw new NumberFormatException(str + \" is not a valid number.\");", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/math/NumberUtils.java", 
          "line": 559, 
          "faulty": "for (int i=str.length() - 1; i >= 0; i--) {\n  if (str.charAt(i) != '0') {\n    return false;\n  }\n}", 
          "type": "Replace", 
          "seed": "if (StringUtils.isEmpty(str)) {\n  return false;\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/math/NumberUtils.java", 
          "line": 556, 
          "faulty": "if (str == null) {\n  return true;\n}", 
          "type": "InsertBefore", 
          "seed": "for (int i=str.length() - 1; i >= 0; i--) {\n  if (str.charAt(i) != '0') {\n    return false;\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_58/src/java/org/apache/commons/lang/math/NumberUtils.java\t2018-12-01 05:15:58.998758820 -0500\n+++ /tmp/Arja_Defects4J_Lang_58/patches_nhyd/Patch_615/patched/tmp/Arja_Defects4J_Lang_58/src/java/org/apache/commons/lang/math/NumberUtils.java\t2018-12-01 05:21:42.465003755 -0500\n@@ -399,6 +399,10 @@\n             return null;\n         }\n         if (StringUtils.isBlank(str)) {\n+\t\t\tthrow new NumberFormatException(\n+\t\t\t\t\t\"A blank string is not a valid number\");\n+\t\t}\n+\t\tif (StringUtils.isBlank(str)) {\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n@@ -461,7 +465,7 @@\n                         return createBigInteger(numeric);\n \n                     }\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t\treturn null;\n                 case 'f' :\n                 case 'F' :\n                     try {\n@@ -1507,7 +1511,10 @@\n         if (StringUtils.isEmpty(str)) {\n             return false;\n         }\n-        for (int i = 0; i < str.length(); i++) {\n+        if (StringUtils.isEmpty(str)) {\n+\t\t\treturn false;\n+\t\t}\n+\t\tfor (int i = 0; i < str.length(); i++) {\n             if (!Character.isDigit(str.charAt(i))) {\n                 return false;\n             }\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/math/NumberUtils.java", 
          "line": 401, 
          "faulty": "if (StringUtils.isBlank(str)) {\n  throw new NumberFormatException(\"A blank string is not a valid number\");\n}", 
          "type": "InsertBefore", 
          "seed": "if (StringUtils.isBlank(str)) {\n  throw new NumberFormatException(\"A blank string is not a valid number\");\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/math/NumberUtils.java", 
          "line": 464, 
          "faulty": "throw new NumberFormatException(str + \" is not a valid number.\");", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/math/NumberUtils.java", 
          "line": 1510, 
          "faulty": "for (int i=0; i < str.length(); i++) {\n  if (!Character.isDigit(str.charAt(i))) {\n    return false;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "if (StringUtils.isEmpty(str)) {\n  return false;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_58/src/java/org/apache/commons/lang/math/NumberUtils.java\t2018-12-01 05:15:58.998758820 -0500\n+++ /tmp/Arja_Defects4J_Lang_58/patches_nhyd/Patch_750/patched/tmp/Arja_Defects4J_Lang_58/src/java/org/apache/commons/lang/math/NumberUtils.java\t2018-12-01 05:22:30.817319763 -0500\n@@ -401,7 +401,10 @@\n         if (StringUtils.isBlank(str)) {\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n-        if (str.startsWith(\"--\")) {\n+        if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n+\t\t\treturn createInteger(str);\n+\t\t}\n+\t\tif (str.startsWith(\"--\")) {\n             // this is protection for poorness in java.lang.BigDecimal.\n             // it accepts this as a legal value, but it does not appear \n             // to be in specification of class. OS X Java parses it to \n@@ -461,7 +464,7 @@\n                         return createBigInteger(numeric);\n \n                     }\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t\treturn null;\n                 case 'f' :\n                 case 'F' :\n                     try {\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/math/NumberUtils.java", 
          "line": 464, 
          "faulty": "throw new NumberFormatException(str + \" is not a valid number.\");", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/math/NumberUtils.java", 
          "line": 404, 
          "faulty": "if (str.startsWith(\"--\")) {\n  return null;\n}", 
          "type": "InsertBefore", 
          "seed": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n  return createInteger(str);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_58/src/java/org/apache/commons/lang/StringUtils.java\t2018-12-01 05:15:55.598736595 -0500\n+++ /tmp/Arja_Defects4J_Lang_58/patches_nhyd/Patch_277/patched/tmp/Arja_Defects4J_Lang_58/src/java/org/apache/commons/lang/StringUtils.java\t2018-12-01 05:19:31.500147795 -0500\n@@ -220,7 +220,12 @@\n      */\n     public static boolean isBlank(String str) {\n         int strLen;\n-        if (str == null || (strLen = str.length()) == 0) {\n+        if (\"yes\".equalsIgnoreCase(str)) {\n+\t\t\treturn Boolean.TRUE;\n+\t\t} else if (\"no\".equalsIgnoreCase(str)) {\n+\t\t\treturn Boolean.FALSE;\n+\t\t}\n+\t\tif (str == null || (strLen = str.length()) == 0) {\n             return true;\n         }\n         for (int i = 0; i < strLen; i++) {\n\n\n--- /tmp/Arja_Defects4J_Lang_58/src/java/org/apache/commons/lang/math/NumberUtils.java\t2018-12-01 05:15:58.998758820 -0500\n+++ /tmp/Arja_Defects4J_Lang_58/patches_nhyd/Patch_277/patched/tmp/Arja_Defects4J_Lang_58/src/java/org/apache/commons/lang/math/NumberUtils.java\t2018-12-01 05:19:31.544148082 -0500\n@@ -461,7 +461,7 @@\n                         return createBigInteger(numeric);\n \n                     }\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t\treturn null;\n                 case 'f' :\n                 case 'F' :\n                     try {\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/math/NumberUtils.java", 
          "line": 464, 
          "faulty": "throw new NumberFormatException(str + \" is not a valid number.\");", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/StringUtils.java", 
          "line": 223, 
          "faulty": "if (str == null || (strLen=str.length()) == 0) {\n  return true;\n}", 
          "type": "InsertBefore", 
          "seed": "if (\"yes\".equalsIgnoreCase(str)) {\n  return Boolean.TRUE;\n}\n else if (\"no\".equalsIgnoreCase(str)) {\n  return Boolean.FALSE;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_58/src/java/org/apache/commons/lang/math/NumberUtils.java\t2018-12-01 05:15:58.998758820 -0500\n+++ /tmp/Arja_Defects4J_Lang_58/patches_nhyd/Patch_374/patched/tmp/Arja_Defects4J_Lang_58/src/java/org/apache/commons/lang/math/NumberUtils.java\t2018-12-01 05:20:11.136406855 -0500\n@@ -461,7 +461,7 @@\n                         return createBigInteger(numeric);\n \n                     }\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t\treturn null;\n                 case 'f' :\n                 case 'F' :\n                     try {\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/math/NumberUtils.java", 
          "line": 464, 
          "faulty": "throw new NumberFormatException(str + \" is not a valid number.\");", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_58/src/java/org/apache/commons/lang/math/NumberUtils.java\t2018-12-01 05:15:58.998758820 -0500\n+++ /tmp/Arja_Defects4J_Lang_58/patches_nhyd/Patch_818/patched/tmp/Arja_Defects4J_Lang_58/src/java/org/apache/commons/lang/math/NumberUtils.java\t2018-12-01 05:22:55.185479020 -0500\n@@ -461,7 +461,7 @@\n                         return createBigInteger(numeric);\n \n                     }\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t\treturn null;\n                 case 'f' :\n                 case 'F' :\n                     try {\n@@ -557,7 +557,10 @@\n             return true;\n         }\n         for (int i = str.length() - 1; i >= 0; i--) {\n-            if (str.charAt(i) != '0') {\n+            if (str == null) {\n+\t\t\t\treturn true;\n+\t\t\t}\n+\t\t\tif (str.charAt(i) != '0') {\n                 return false;\n             }\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/math/NumberUtils.java", 
          "line": 464, 
          "faulty": "throw new NumberFormatException(str + \" is not a valid number.\");", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/math/NumberUtils.java", 
          "line": 560, 
          "faulty": "if (str.charAt(i) != '0') {\n  return false;\n}", 
          "type": "InsertBefore", 
          "seed": "if (str == null) {\n  return true;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_58/src/java/org/apache/commons/lang/math/NumberUtils.java\t2018-12-01 05:15:58.998758820 -0500\n+++ /tmp/Arja_Defects4J_Lang_58/patches_nhyd/Patch_704/patched/tmp/Arja_Defects4J_Lang_58/src/java/org/apache/commons/lang/math/NumberUtils.java\t2018-12-01 05:22:14.141210778 -0500\n@@ -461,7 +461,7 @@\n                         return createBigInteger(numeric);\n \n                     }\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t\treturn null;\n                 case 'f' :\n                 case 'F' :\n                     try {\n@@ -553,9 +553,9 @@\n      * @return if it is all zeros or <code>null</code>\n      */\n     private static boolean isAllZeros(String str) {\n-        if (str == null) {\n-            return true;\n-        }\n+        if (StringUtils.isEmpty(str)) {\n+\t\t\treturn false;\n+\t\t}\n         for (int i = str.length() - 1; i >= 0; i--) {\n             if (str.charAt(i) != '0') {\n                 return false;\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/math/NumberUtils.java", 
          "line": 464, 
          "faulty": "throw new NumberFormatException(str + \" is not a valid number.\");", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/math/NumberUtils.java", 
          "line": 556, 
          "faulty": "if (str == null) {\n  return true;\n}", 
          "type": "Replace", 
          "seed": "if (StringUtils.isEmpty(str)) {\n  return false;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_58/src/java/org/apache/commons/lang/StringUtils.java\t2018-12-01 05:15:55.598736595 -0500\n+++ /tmp/Arja_Defects4J_Lang_58/patches_nhyd/Patch_889/patched/tmp/Arja_Defects4J_Lang_58/src/java/org/apache/commons/lang/StringUtils.java\t2018-12-01 05:23:20.573644941 -0500\n@@ -225,7 +225,10 @@\n         }\n         for (int i = 0; i < strLen; i++) {\n             if ((Character.isWhitespace(str.charAt(i)) == false)) {\n-                return false;\n+                if (Character.isDigit(str.charAt(i)) == false) {\n+\t\t\t\t\treturn false;\n+\t\t\t\t}\n+\t\t\t\treturn false;\n             }\n         }\n         return true;\n\n\n--- /tmp/Arja_Defects4J_Lang_58/src/java/org/apache/commons/lang/math/NumberUtils.java\t2018-12-01 05:15:58.998758820 -0500\n+++ /tmp/Arja_Defects4J_Lang_58/patches_nhyd/Patch_889/patched/tmp/Arja_Defects4J_Lang_58/src/java/org/apache/commons/lang/math/NumberUtils.java\t2018-12-01 05:23:20.577644967 -0500\n@@ -461,7 +461,7 @@\n                         return createBigInteger(numeric);\n \n                     }\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t\treturn null;\n                 case 'f' :\n                 case 'F' :\n                     try {\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/StringUtils.java", 
          "line": 228, 
          "faulty": "return false;", 
          "type": "InsertBefore", 
          "seed": "if (Character.isDigit(str.charAt(i)) == false) {\n  return false;\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/math/NumberUtils.java", 
          "line": 464, 
          "faulty": "throw new NumberFormatException(str + \" is not a valid number.\");", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_58/src/java/org/apache/commons/lang/math/NumberUtils.java\t2018-12-01 05:15:58.998758820 -0500\n+++ /tmp/Arja_Defects4J_Lang_58/patches_nhyd/Patch_798/patched/tmp/Arja_Defects4J_Lang_58/src/java/org/apache/commons/lang/math/NumberUtils.java\t2018-12-01 05:22:48.557435703 -0500\n@@ -461,7 +461,7 @@\n                         return createBigInteger(numeric);\n \n                     }\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t\treturn null;\n                 case 'f' :\n                 case 'F' :\n                     try {\n@@ -556,7 +556,10 @@\n         if (str == null) {\n             return true;\n         }\n-        for (int i = str.length() - 1; i >= 0; i--) {\n+        if (StringUtils.isEmpty(str)) {\n+\t\t\treturn false;\n+\t\t}\n+\t\tfor (int i = str.length() - 1; i >= 0; i--) {\n             if (str.charAt(i) != '0') {\n                 return false;\n             }\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/math/NumberUtils.java", 
          "line": 464, 
          "faulty": "throw new NumberFormatException(str + \" is not a valid number.\");", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/math/NumberUtils.java", 
          "line": 559, 
          "faulty": "for (int i=str.length() - 1; i >= 0; i--) {\n  if (str.charAt(i) != '0') {\n    return false;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "if (StringUtils.isEmpty(str)) {\n  return false;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_58/src/java/org/apache/commons/lang/math/NumberUtils.java\t2018-12-01 05:15:58.998758820 -0500\n+++ /tmp/Arja_Defects4J_Lang_58/patches_nhyd/Patch_1212/patched/tmp/Arja_Defects4J_Lang_58/src/java/org/apache/commons/lang/math/NumberUtils.java\t2018-12-01 05:25:24.174452900 -0500\n@@ -431,6 +431,15 @@\n             mant = str.substring(0, decPos);\n         } else {\n             if (expPos > -1) {\n+\t\t\t\tif (expPos < decPos) {\n+\t\t\t\t\tthrow new NumberFormatException(str\n+\t\t\t\t\t\t\t+ \" is not a valid number.\");\n+\t\t\t\t}\n+\t\t\t\tdec = str.substring(decPos + 1, expPos);\n+\t\t\t} else {\n+\t\t\t\tdec = str.substring(decPos + 1);\n+\t\t\t}\n+\t\t\tif (expPos > -1) {\n                 mant = str.substring(0, expPos);\n             } else {\n                 mant = str;\n@@ -461,7 +470,7 @@\n                         return createBigInteger(numeric);\n \n                     }\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t\treturn null;\n                 case 'f' :\n                 case 'F' :\n                     try {\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/math/NumberUtils.java", 
          "line": 464, 
          "faulty": "throw new NumberFormatException(str + \" is not a valid number.\");", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/math/NumberUtils.java", 
          "line": 433, 
          "faulty": "if (expPos > -1) {\n  mant=str.substring(0,expPos);\n}\n else {\n  mant=str;\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > -1) {\n  if (expPos < decPos) {\n    throw new NumberFormatException(str + \" is not a valid number.\");\n  }\n  dec=str.substring(decPos + 1,expPos);\n}\n else {\n  dec=str.substring(decPos + 1);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_58/src/java/org/apache/commons/lang/math/NumberUtils.java\t2018-12-01 05:15:58.998758820 -0500\n+++ /tmp/Arja_Defects4J_Lang_58/patches_nhyd/Patch_611/patched/tmp/Arja_Defects4J_Lang_58/src/java/org/apache/commons/lang/math/NumberUtils.java\t2018-12-01 05:21:41.340996409 -0500\n@@ -461,7 +461,7 @@\n                         return createBigInteger(numeric);\n \n                     }\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t\treturn null;\n                 case 'f' :\n                 case 'F' :\n                     try {\n@@ -628,7 +628,10 @@\n         if (str == null) {\n             return null;\n         }\n-        return Long.valueOf(str);\n+        if (str.startsWith(\"--\")) {\n+\t\t\treturn null;\n+\t\t}\n+\t\treturn Long.valueOf(str);\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/math/NumberUtils.java", 
          "line": 464, 
          "faulty": "throw new NumberFormatException(str + \" is not a valid number.\");", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/math/NumberUtils.java", 
          "line": 631, 
          "faulty": "return Long.valueOf(str);", 
          "type": "InsertBefore", 
          "seed": "if (str.startsWith(\"--\")) {\n  return null;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_58/src/java/org/apache/commons/lang/math/NumberUtils.java\t2018-12-01 05:15:58.998758820 -0500\n+++ /tmp/Arja_Defects4J_Lang_58/patches_nhyd/Patch_1263/patched/tmp/Arja_Defects4J_Lang_58/src/java/org/apache/commons/lang/math/NumberUtils.java\t2018-12-01 05:25:41.994569568 -0500\n@@ -430,7 +430,11 @@\n             }\n             mant = str.substring(0, decPos);\n         } else {\n-            if (expPos > -1) {\n+            if (str == null) {\n+\t\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\t\"The string must not be null\");\n+\t\t\t}\n+\t\t\tif (expPos > -1) {\n                 mant = str.substring(0, expPos);\n             } else {\n                 mant = str;\n@@ -461,7 +465,7 @@\n                         return createBigInteger(numeric);\n \n                     }\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t\treturn null;\n                 case 'f' :\n                 case 'F' :\n                     try {\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/math/NumberUtils.java", 
          "line": 464, 
          "faulty": "throw new NumberFormatException(str + \" is not a valid number.\");", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/math/NumberUtils.java", 
          "line": 433, 
          "faulty": "if (expPos > -1) {\n  mant=str.substring(0,expPos);\n}\n else {\n  mant=str;\n}", 
          "type": "InsertBefore", 
          "seed": "if (str == null) {\n  throw new IllegalArgumentException(\"The string must not be null\");\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_58/src/java/org/apache/commons/lang/math/NumberUtils.java\t2018-12-01 05:15:58.998758820 -0500\n+++ /tmp/Arja_Defects4J_Lang_58/patches_nhyd/Patch_691/patched/tmp/Arja_Defects4J_Lang_58/src/java/org/apache/commons/lang/math/NumberUtils.java\t2018-12-01 05:22:10.049184033 -0500\n@@ -415,7 +415,8 @@\n         String mant;\n         String dec;\n         String exp;\n-        int decPos = str.indexOf('.');\n+        exp = null;\n+\t\tint decPos = str.indexOf('.');\n         int expPos = str.indexOf('e') + str.indexOf('E') + 1;\n \n         if (decPos > -1) {\n@@ -461,7 +462,7 @@\n                         return createBigInteger(numeric);\n \n                     }\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t\treturn null;\n                 case 'f' :\n                 case 'F' :\n                     try {\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/math/NumberUtils.java", 
          "line": 464, 
          "faulty": "throw new NumberFormatException(str + \" is not a valid number.\");", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/math/NumberUtils.java", 
          "line": 418, 
          "faulty": "int decPos=str.indexOf('.');", 
          "type": "InsertBefore", 
          "seed": "exp=null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_58/src/java/org/apache/commons/lang/math/NumberUtils.java\t2018-12-01 05:15:58.998758820 -0500\n+++ /tmp/Arja_Defects4J_Lang_58/patches_nhyd/Patch_1096/patched/tmp/Arja_Defects4J_Lang_58/src/java/org/apache/commons/lang/math/NumberUtils.java\t2018-12-01 05:24:39.354159789 -0500\n@@ -401,13 +401,6 @@\n         if (StringUtils.isBlank(str)) {\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n-        if (str.startsWith(\"--\")) {\n-            // this is protection for poorness in java.lang.BigDecimal.\n-            // it accepts this as a legal value, but it does not appear \n-            // to be in specification of class. OS X Java parses it to \n-            // a wrong value.\n-            return null;\n-        }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n             return createInteger(str);\n         }   \n@@ -461,7 +454,7 @@\n                         return createBigInteger(numeric);\n \n                     }\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t\treturn null;\n                 case 'f' :\n                 case 'F' :\n                     try {\n@@ -553,9 +546,11 @@\n      * @return if it is all zeros or <code>null</code>\n      */\n     private static boolean isAllZeros(String str) {\n-        if (str == null) {\n-            return true;\n-        }\n+        for (int i = str.length() - 1; i >= 0; i--) {\n+\t\t\tif (str.charAt(i) != '0') {\n+\t\t\t\treturn false;\n+\t\t\t}\n+\t\t}\n         for (int i = str.length() - 1; i >= 0; i--) {\n             if (str.charAt(i) != '0') {\n                 return false;\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/math/NumberUtils.java", 
          "line": 464, 
          "faulty": "throw new NumberFormatException(str + \" is not a valid number.\");", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/math/NumberUtils.java", 
          "line": 404, 
          "faulty": "if (str.startsWith(\"--\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n  return createInteger(str);\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/math/NumberUtils.java", 
          "line": 556, 
          "faulty": "if (str == null) {\n  return true;\n}", 
          "type": "Replace", 
          "seed": "for (int i=str.length() - 1; i >= 0; i--) {\n  if (str.charAt(i) != '0') {\n    return false;\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_58/src/java/org/apache/commons/lang/math/NumberUtils.java\t2018-12-01 05:15:58.998758820 -0500\n+++ /tmp/Arja_Defects4J_Lang_58/patches_nhyd/Patch_673/patched/tmp/Arja_Defects4J_Lang_58/src/java/org/apache/commons/lang/math/NumberUtils.java\t2018-12-01 05:22:03.933144062 -0500\n@@ -411,7 +411,10 @@\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n             return createInteger(str);\n         }   \n-        char lastChar = str.charAt(str.length() - 1);\n+        if (str == null) {\n+\t\t\treturn null;\n+\t\t}\n+\t\tchar lastChar = str.charAt(str.length() - 1);\n         String mant;\n         String dec;\n         String exp;\n@@ -461,7 +464,7 @@\n                         return createBigInteger(numeric);\n \n                     }\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t\treturn null;\n                 case 'f' :\n                 case 'F' :\n                     try {\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/math/NumberUtils.java", 
          "line": 464, 
          "faulty": "throw new NumberFormatException(str + \" is not a valid number.\");", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/math/NumberUtils.java", 
          "line": 414, 
          "faulty": "char lastChar=str.charAt(str.length() - 1);", 
          "type": "InsertBefore", 
          "seed": "if (str == null) {\n  return null;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_58/src/java/org/apache/commons/lang/math/NumberUtils.java\t2018-12-01 05:15:58.998758820 -0500\n+++ /tmp/Arja_Defects4J_Lang_58/patches_nhyd/Patch_1505/patched/tmp/Arja_Defects4J_Lang_58/src/java/org/apache/commons/lang/math/NumberUtils.java\t2018-12-01 05:27:09.851144737 -0500\n@@ -401,7 +401,10 @@\n         if (StringUtils.isBlank(str)) {\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n-        if (str.startsWith(\"--\")) {\n+        if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n+\t\t\treturn createInteger(str);\n+\t\t}\n+\t\tif (str.startsWith(\"--\")) {\n             // this is protection for poorness in java.lang.BigDecimal.\n             // it accepts this as a legal value, but it does not appear \n             // to be in specification of class. OS X Java parses it to \n@@ -438,7 +441,8 @@\n             dec = null;\n         }\n         if (!Character.isDigit(lastChar)) {\n-            if (expPos > -1 && expPos < str.length() - 1) {\n+            exp = null;\n+\t\t\tif (expPos > -1 && expPos < str.length() - 1) {\n                 exp = str.substring(expPos + 1, str.length() - 1);\n             } else {\n                 exp = null;\n@@ -461,7 +465,7 @@\n                         return createBigInteger(numeric);\n \n                     }\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t\treturn null;\n                 case 'f' :\n                 case 'F' :\n                     try {\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/math/NumberUtils.java", 
          "line": 464, 
          "faulty": "throw new NumberFormatException(str + \" is not a valid number.\");", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/math/NumberUtils.java", 
          "line": 404, 
          "faulty": "if (str.startsWith(\"--\")) {\n  return null;\n}", 
          "type": "InsertBefore", 
          "seed": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n  return createInteger(str);\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/math/NumberUtils.java", 
          "line": 441, 
          "faulty": "if (expPos > -1 && expPos < str.length() - 1) {\n  exp=str.substring(expPos + 1,str.length() - 1);\n}\n else {\n  exp=null;\n}", 
          "type": "InsertBefore", 
          "seed": "exp=null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_58/src/java/org/apache/commons/lang/math/NumberUtils.java\t2018-12-01 05:15:58.998758820 -0500\n+++ /tmp/Arja_Defects4J_Lang_58/patches_nhyd/Patch_696/patched/tmp/Arja_Defects4J_Lang_58/src/java/org/apache/commons/lang/math/NumberUtils.java\t2018-12-01 05:22:11.573193993 -0500\n@@ -461,7 +461,7 @@\n                         return createBigInteger(numeric);\n \n                     }\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t\treturn null;\n                 case 'f' :\n                 case 'F' :\n                     try {\n@@ -1507,7 +1507,11 @@\n         if (StringUtils.isEmpty(str)) {\n             return false;\n         }\n-        for (int i = 0; i < str.length(); i++) {\n+        if (StringUtils.isBlank(str)) {\n+\t\t\tthrow new NumberFormatException(\n+\t\t\t\t\t\"A blank string is not a valid number\");\n+\t\t}\n+\t\tfor (int i = 0; i < str.length(); i++) {\n             if (!Character.isDigit(str.charAt(i))) {\n                 return false;\n             }\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/math/NumberUtils.java", 
          "line": 464, 
          "faulty": "throw new NumberFormatException(str + \" is not a valid number.\");", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/math/NumberUtils.java", 
          "line": 1510, 
          "faulty": "for (int i=0; i < str.length(); i++) {\n  if (!Character.isDigit(str.charAt(i))) {\n    return false;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "if (StringUtils.isBlank(str)) {\n  throw new NumberFormatException(\"A blank string is not a valid number\");\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_58/src/java/org/apache/commons/lang/math/NumberUtils.java\t2018-12-01 05:15:58.998758820 -0500\n+++ /tmp/Arja_Defects4J_Lang_58/patches_nhyd/Patch_536/patched/tmp/Arja_Defects4J_Lang_58/src/java/org/apache/commons/lang/math/NumberUtils.java\t2018-12-01 05:21:14.720822428 -0500\n@@ -401,7 +401,10 @@\n         if (StringUtils.isBlank(str)) {\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n-        if (str.startsWith(\"--\")) {\n+        if (str == null) {\n+\t\t\tthrow new IllegalArgumentException(\"The string must not be null\");\n+\t\t}\n+\t\tif (str.startsWith(\"--\")) {\n             // this is protection for poorness in java.lang.BigDecimal.\n             // it accepts this as a legal value, but it does not appear \n             // to be in specification of class. OS X Java parses it to \n@@ -415,7 +418,11 @@\n         String mant;\n         String dec;\n         String exp;\n-        int decPos = str.indexOf('.');\n+        if (StringUtils.isBlank(str)) {\n+\t\t\tthrow new NumberFormatException(\n+\t\t\t\t\t\"A blank string is not a valid number\");\n+\t\t}\n+\t\tint decPos = str.indexOf('.');\n         int expPos = str.indexOf('e') + str.indexOf('E') + 1;\n \n         if (decPos > -1) {\n@@ -461,7 +468,7 @@\n                         return createBigInteger(numeric);\n \n                     }\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t\treturn null;\n                 case 'f' :\n                 case 'F' :\n                     try {\n@@ -553,9 +560,11 @@\n      * @return if it is all zeros or <code>null</code>\n      */\n     private static boolean isAllZeros(String str) {\n-        if (str == null) {\n-            return true;\n-        }\n+        for (int i = str.length() - 1; i >= 0; i--) {\n+\t\t\tif (str.charAt(i) != '0') {\n+\t\t\t\treturn false;\n+\t\t\t}\n+\t\t}\n         for (int i = str.length() - 1; i >= 0; i--) {\n             if (str.charAt(i) != '0') {\n                 return false;\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/math/NumberUtils.java", 
          "line": 464, 
          "faulty": "throw new NumberFormatException(str + \" is not a valid number.\");", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/math/NumberUtils.java", 
          "line": 404, 
          "faulty": "if (str.startsWith(\"--\")) {\n  return null;\n}", 
          "type": "InsertBefore", 
          "seed": "if (str == null) {\n  throw new IllegalArgumentException(\"The string must not be null\");\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/math/NumberUtils.java", 
          "line": 556, 
          "faulty": "if (str == null) {\n  return true;\n}", 
          "type": "Replace", 
          "seed": "for (int i=str.length() - 1; i >= 0; i--) {\n  if (str.charAt(i) != '0') {\n    return false;\n  }\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/math/NumberUtils.java", 
          "line": 418, 
          "faulty": "int decPos=str.indexOf('.');", 
          "type": "InsertBefore", 
          "seed": "if (StringUtils.isBlank(str)) {\n  throw new NumberFormatException(\"A blank string is not a valid number\");\n}"
        }
      ]
    }
  ]
}