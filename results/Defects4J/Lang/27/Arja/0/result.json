{
  "repair_end": "2018-12-01 11:23:39.145305", 
  "repair_begin": "2018-12-01 11:16:14.621983", 
  "patches": [
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 489, 
          "faulty": "mant=str.substring(0,expPos);", 
          "type": "Replace", 
          "seed": "mant=str;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 569, 
          "faulty": "return createLong(str);", 
          "type": "InsertBefore", 
          "seed": "dec=str.substring(decPos + 1);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:16:07.026060969 -0500\n+++ /tmp/Arja_Defects4J_Lang_27/patches_whwa/Patch_451/patched/tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:18:55.291315477 -0500\n@@ -486,7 +486,7 @@\n             mant = str.substring(0, decPos);\n         } else {\n             if (expPos > -1) {\n-                mant = str.substring(0, expPos);\n+                mant = str;\n             } else {\n                 mant = str;\n             }\n@@ -566,7 +566,8 @@\n                     // ignore the bad number\n                 }\n                 try {\n-                    return createLong(str);\n+                    dec = str.substring(decPos + 1);\n+\t\t\t\t\treturn createLong(str);\n                 } catch (NumberFormatException nfe) {\n                     // ignore the bad number\n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 489, 
          "faulty": "mant=str.substring(0,expPos);", 
          "type": "Replace", 
          "seed": "mant=str;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 488, 
          "faulty": "if (expPos > -1) {\n  mant=str.substring(0,expPos);\n}\n else {\n  mant=str;\n}", 
          "type": "InsertBefore", 
          "seed": "dec=str.substring(decPos + 1);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:16:07.026060969 -0500\n+++ /tmp/Arja_Defects4J_Lang_27/patches_whwa/Patch_438/patched/tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:18:52.803296927 -0500\n@@ -485,8 +485,9 @@\n             }\n             mant = str.substring(0, decPos);\n         } else {\n-            if (expPos > -1) {\n-                mant = str.substring(0, expPos);\n+            dec = str.substring(decPos + 1);\n+\t\t\tif (expPos > -1) {\n+                mant = str;\n             } else {\n                 mant = str;\n             }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 522, 
          "faulty": "Float f=NumberUtils.createFloat(numeric);", 
          "type": "Replace", 
          "seed": "Float f=createFloat(str);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 489, 
          "faulty": "mant=str.substring(0,expPos);", 
          "type": "Replace", 
          "seed": "mant=str;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:16:07.026060969 -0500\n+++ /tmp/Arja_Defects4J_Lang_27/patches_whwa/Patch_477/patched/tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:19:00.743356128 -0500\n@@ -486,7 +486,7 @@\n             mant = str.substring(0, decPos);\n         } else {\n             if (expPos > -1) {\n-                mant = str.substring(0, expPos);\n+                mant = str;\n             } else {\n                 mant = str;\n             }\n@@ -519,7 +519,7 @@\n                 case 'f' :\n                 case 'F' :\n                     try {\n-                        Float f = NumberUtils.createFloat(numeric);\n+                        Float f = createFloat(str);\n                         if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                             //If it's too big for a float or the float value = 0 and the string\n                             //has non-zeros in it, then float does not have the precision we want\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 478, 
          "faulty": "if (expPos > -1) {\n  if (expPos < decPos) {\n    throw new NumberFormatException(str + \" is not a valid number.\");\n  }\n  dec=str.substring(decPos + 1,expPos);\n}\n else {\n  dec=str.substring(decPos + 1);\n}", 
          "type": "Delete", 
          "seed": "exp=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 489, 
          "faulty": "mant=str.substring(0,expPos);", 
          "type": "Replace", 
          "seed": "mant=str;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 474, 
          "faulty": "int expPos=str.indexOf('e') + str.indexOf('E') + 1;", 
          "type": "InsertBefore", 
          "seed": "dec=str.substring(decPos + 1);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:16:07.026060969 -0500\n+++ /tmp/Arja_Defects4J_Lang_27/patches_whwa/Patch_1249/patched/tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:22:01.712705555 -0500\n@@ -471,22 +471,15 @@\n         String dec;\n         String exp;\n         int decPos = str.indexOf('.');\n-        int expPos = str.indexOf('e') + str.indexOf('E') + 1;\n+        dec = str.substring(decPos + 1);\n+\t\tint expPos = str.indexOf('e') + str.indexOf('E') + 1;\n \n         if (decPos > -1) {\n \n-            if (expPos > -1) {\n-                if (expPos < decPos) {\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n-                }\n-                dec = str.substring(decPos + 1, expPos);\n-            } else {\n-                dec = str.substring(decPos + 1);\n-            }\n             mant = str.substring(0, decPos);\n         } else {\n             if (expPos > -1) {\n-                mant = str.substring(0, expPos);\n+                mant = str;\n             } else {\n                 mant = str;\n             }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 536, 
          "faulty": "Double d=NumberUtils.createDouble(numeric);", 
          "type": "InsertBefore", 
          "seed": "exp=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 489, 
          "faulty": "mant=str.substring(0,expPos);", 
          "type": "Replace", 
          "seed": "mant=str;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 456, 
          "faulty": "if (StringUtils.isBlank(str)) {\n  throw new NumberFormatException(\"A blank string is not a valid number\");\n}", 
          "type": "InsertBefore", 
          "seed": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n  return createInteger(str);\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:16:07.026060969 -0500\n+++ /tmp/Arja_Defects4J_Lang_27/patches_whwa/Patch_345/patched/tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:18:34.503160481 -0500\n@@ -453,7 +453,10 @@\n         if (str == null) {\n             return null;\n         }\n-        if (StringUtils.isBlank(str)) {\n+        if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n+\t\t\treturn createInteger(str);\n+\t\t}\n+\t\tif (StringUtils.isBlank(str)) {\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n@@ -486,7 +489,7 @@\n             mant = str.substring(0, decPos);\n         } else {\n             if (expPos > -1) {\n-                mant = str.substring(0, expPos);\n+                mant = str;\n             } else {\n                 mant = str;\n             }\n@@ -533,7 +536,8 @@\n                 case 'd' :\n                 case 'D' :\n                     try {\n-                        Double d = NumberUtils.createDouble(numeric);\n+                        exp = null;\n+\t\t\t\t\t\tDouble d = NumberUtils.createDouble(numeric);\n                         if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {\n                             return d;\n                         }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 538, 
          "faulty": "return d;", 
          "type": "InsertBefore", 
          "seed": "if (expPos > -1) {\n  mant=str.substring(0,expPos);\n}\n else {\n  mant=str;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 489, 
          "faulty": "mant=str.substring(0,expPos);", 
          "type": "Replace", 
          "seed": "mant=str;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:16:07.026060969 -0500\n+++ /tmp/Arja_Defects4J_Lang_27/patches_whwa/Patch_305/patched/tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:18:26.403100088 -0500\n@@ -486,7 +486,7 @@\n             mant = str.substring(0, decPos);\n         } else {\n             if (expPos > -1) {\n-                mant = str.substring(0, expPos);\n+                mant = str;\n             } else {\n                 mant = str;\n             }\n@@ -535,7 +535,12 @@\n                     try {\n                         Double d = NumberUtils.createDouble(numeric);\n                         if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {\n-                            return d;\n+                            if (expPos > -1) {\n+\t\t\t\t\t\t\t\tmant = str.substring(0, expPos);\n+\t\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\t\tmant = str;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\treturn d;\n                         }\n                     } catch (NumberFormatException nfe) {\n                         // ignore the bad number\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 544, 
          "faulty": "return createBigDecimal(numeric);", 
          "type": "InsertBefore", 
          "seed": "if (str == null) {\n  return null;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 489, 
          "faulty": "mant=str.substring(0,expPos);", 
          "type": "Replace", 
          "seed": "mant=str;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:16:07.026060969 -0500\n+++ /tmp/Arja_Defects4J_Lang_27/patches_whwa/Patch_414/patched/tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:18:48.411264180 -0500\n@@ -486,7 +486,7 @@\n             mant = str.substring(0, decPos);\n         } else {\n             if (expPos > -1) {\n-                mant = str.substring(0, expPos);\n+                mant = str;\n             } else {\n                 mant = str;\n             }\n@@ -541,7 +541,10 @@\n                         // ignore the bad number\n                     }\n                     try {\n-                        return createBigDecimal(numeric);\n+                        if (str == null) {\n+\t\t\t\t\t\t\treturn null;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\treturn createBigDecimal(numeric);\n                     } catch (NumberFormatException e) {\n                         // ignore the bad number\n                     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 489, 
          "faulty": "mant=str.substring(0,expPos);", 
          "type": "Replace", 
          "seed": "mant=str;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 557, 
          "faulty": "exp=str.substring(expPos + 1,str.length());", 
          "type": "InsertBefore", 
          "seed": "if (expPos > -1 && expPos < str.length() - 1) {\n  exp=str.substring(expPos + 1,str.length() - 1);\n}\n else {\n  exp=null;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:16:07.026060969 -0500\n+++ /tmp/Arja_Defects4J_Lang_27/patches_whwa/Patch_1033/patched/tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:21:14.204351283 -0500\n@@ -486,7 +486,7 @@\n             mant = str.substring(0, decPos);\n         } else {\n             if (expPos > -1) {\n-                mant = str.substring(0, expPos);\n+                mant = str;\n             } else {\n                 mant = str;\n             }\n@@ -554,7 +554,12 @@\n             //User doesn't have a preference on the return type, so let's start\n             //small and go from there...\n             if (expPos > -1 && expPos < str.length() - 1) {\n-                exp = str.substring(expPos + 1, str.length());\n+                if (expPos > -1 && expPos < str.length() - 1) {\n+\t\t\t\t\texp = str.substring(expPos + 1, str.length() - 1);\n+\t\t\t\t} else {\n+\t\t\t\t\texp = null;\n+\t\t\t\t}\n+\t\t\t\texp = str.substring(expPos + 1, str.length());\n             } else {\n                 exp = null;\n             }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 489, 
          "faulty": "mant=str.substring(0,expPos);", 
          "type": "Replace", 
          "seed": "mant=str;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 456, 
          "faulty": "if (StringUtils.isBlank(str)) {\n  throw new NumberFormatException(\"A blank string is not a valid number\");\n}", 
          "type": "InsertBefore", 
          "seed": "if (str.startsWith(\"--\")) {\n  return null;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:16:07.026060969 -0500\n+++ /tmp/Arja_Defects4J_Lang_27/patches_whwa/Patch_943/patched/tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:20:53.760198833 -0500\n@@ -453,7 +453,10 @@\n         if (str == null) {\n             return null;\n         }\n-        if (StringUtils.isBlank(str)) {\n+        if (str.startsWith(\"--\")) {\n+\t\t\treturn null;\n+\t\t}\n+\t\tif (StringUtils.isBlank(str)) {\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n@@ -486,7 +489,7 @@\n             mant = str.substring(0, decPos);\n         } else {\n             if (expPos > -1) {\n-                mant = str.substring(0, expPos);\n+                mant = str;\n             } else {\n                 mant = str;\n             }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 489, 
          "faulty": "mant=str.substring(0,expPos);", 
          "type": "Replace", 
          "seed": "mant=str;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 456, 
          "faulty": "if (StringUtils.isBlank(str)) {\n  throw new NumberFormatException(\"A blank string is not a valid number\");\n}", 
          "type": "InsertBefore", 
          "seed": "if (str == null) {\n  return null;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:16:07.026060969 -0500\n+++ /tmp/Arja_Defects4J_Lang_27/patches_whwa/Patch_364/patched/tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:18:38.199188038 -0500\n@@ -453,7 +453,10 @@\n         if (str == null) {\n             return null;\n         }\n-        if (StringUtils.isBlank(str)) {\n+        if (str == null) {\n+\t\t\treturn null;\n+\t\t}\n+\t\tif (StringUtils.isBlank(str)) {\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n@@ -486,7 +489,7 @@\n             mant = str.substring(0, decPos);\n         } else {\n             if (expPos > -1) {\n-                mant = str.substring(0, expPos);\n+                mant = str;\n             } else {\n                 mant = str;\n             }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 564, 
          "faulty": "return createInteger(str);", 
          "type": "InsertBefore", 
          "seed": "if (expPos > -1) {\n  mant=str.substring(0,expPos);\n}\n else {\n  mant=str;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 489, 
          "faulty": "mant=str.substring(0,expPos);", 
          "type": "Replace", 
          "seed": "mant=str;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:16:07.026060969 -0500\n+++ /tmp/Arja_Defects4J_Lang_27/patches_whwa/Patch_1593/patched/tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:23:23.001311761 -0500\n@@ -486,7 +486,7 @@\n             mant = str.substring(0, decPos);\n         } else {\n             if (expPos > -1) {\n-                mant = str.substring(0, expPos);\n+                mant = str;\n             } else {\n                 mant = str;\n             }\n@@ -561,7 +561,12 @@\n             if (dec == null && exp == null) {\n                 //Must be an int,long,bigint\n                 try {\n-                    return createInteger(str);\n+                    if (expPos > -1) {\n+\t\t\t\t\t\tmant = str.substring(0, expPos);\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tmant = str;\n+\t\t\t\t\t}\n+\t\t\t\t\treturn createInteger(str);\n                 } catch (NumberFormatException nfe) {\n                     // ignore the bad number\n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 489, 
          "faulty": "mant=str.substring(0,expPos);", 
          "type": "Replace", 
          "seed": "mant=str;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 469, 
          "faulty": "char lastChar=str.charAt(str.length() - 1);", 
          "type": "InsertBefore", 
          "seed": "if (str == null) {\n  throw new IllegalArgumentException(\"The string must not be null\");\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:16:07.026060969 -0500\n+++ /tmp/Arja_Defects4J_Lang_27/patches_whwa/Patch_418/patched/tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:18:49.059269011 -0500\n@@ -466,7 +466,10 @@\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n             return createInteger(str);\n         }   \n-        char lastChar = str.charAt(str.length() - 1);\n+        if (str == null) {\n+\t\t\tthrow new IllegalArgumentException(\"The string must not be null\");\n+\t\t}\n+\t\tchar lastChar = str.charAt(str.length() - 1);\n         String mant;\n         String dec;\n         String exp;\n@@ -486,7 +489,7 @@\n             mant = str.substring(0, decPos);\n         } else {\n             if (expPos > -1) {\n-                mant = str.substring(0, expPos);\n+                mant = str;\n             } else {\n                 mant = str;\n             }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 536, 
          "faulty": "Double d=NumberUtils.createDouble(numeric);", 
          "type": "Replace", 
          "seed": "Double d=createDouble(str);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 489, 
          "faulty": "mant=str.substring(0,expPos);", 
          "type": "Replace", 
          "seed": "mant=str;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 469, 
          "faulty": "char lastChar=str.charAt(str.length() - 1);", 
          "type": "InsertBefore", 
          "seed": "if (str == null) {\n  throw new IllegalArgumentException(\"The string must not be null\");\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:16:07.026060969 -0500\n+++ /tmp/Arja_Defects4J_Lang_27/patches_whwa/Patch_1019/patched/tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:21:11.584331745 -0500\n@@ -466,7 +466,10 @@\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n             return createInteger(str);\n         }   \n-        char lastChar = str.charAt(str.length() - 1);\n+        if (str == null) {\n+\t\t\tthrow new IllegalArgumentException(\"The string must not be null\");\n+\t\t}\n+\t\tchar lastChar = str.charAt(str.length() - 1);\n         String mant;\n         String dec;\n         String exp;\n@@ -486,7 +489,7 @@\n             mant = str.substring(0, decPos);\n         } else {\n             if (expPos > -1) {\n-                mant = str.substring(0, expPos);\n+                mant = str;\n             } else {\n                 mant = str;\n             }\n@@ -533,7 +536,7 @@\n                 case 'd' :\n                 case 'D' :\n                     try {\n-                        Double d = NumberUtils.createDouble(numeric);\n+                        Double d = createDouble(str);\n                         if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {\n                             return d;\n                         }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 454, 
          "faulty": "return null;", 
          "type": "Replace", 
          "seed": "if (str == null) {\n  return null;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 489, 
          "faulty": "mant=str.substring(0,expPos);", 
          "type": "Replace", 
          "seed": "mant=str;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:16:07.026060969 -0500\n+++ /tmp/Arja_Defects4J_Lang_27/patches_whwa/Patch_1154/patched/tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:21:39.976543466 -0500\n@@ -451,7 +451,9 @@\n      */\n     public static Number createNumber(String str) throws NumberFormatException {\n         if (str == null) {\n-            return null;\n+            if (str == null) {\n+\t\t\t\treturn null;\n+\t\t\t}\n         }\n         if (StringUtils.isBlank(str)) {\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n@@ -486,7 +488,7 @@\n             mant = str.substring(0, decPos);\n         } else {\n             if (expPos > -1) {\n-                mant = str.substring(0, expPos);\n+                mant = str;\n             } else {\n                 mant = str;\n             }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 478, 
          "faulty": "if (expPos > -1) {\n  if (expPos < decPos) {\n    throw new NumberFormatException(str + \" is not a valid number.\");\n  }\n  dec=str.substring(decPos + 1,expPos);\n}\n else {\n  dec=str.substring(decPos + 1);\n}", 
          "type": "Replace", 
          "seed": "dec=str.substring(decPos + 1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 489, 
          "faulty": "mant=str.substring(0,expPos);", 
          "type": "Replace", 
          "seed": "mant=str;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:16:07.026060969 -0500\n+++ /tmp/Arja_Defects4J_Lang_27/patches_whwa/Patch_894/patched/tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:20:43.560122774 -0500\n@@ -475,18 +475,11 @@\n \n         if (decPos > -1) {\n \n-            if (expPos > -1) {\n-                if (expPos < decPos) {\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n-                }\n-                dec = str.substring(decPos + 1, expPos);\n-            } else {\n-                dec = str.substring(decPos + 1);\n-            }\n+            dec = str.substring(decPos + 1);\n             mant = str.substring(0, decPos);\n         } else {\n             if (expPos > -1) {\n-                mant = str.substring(0, expPos);\n+                mant = str;\n             } else {\n                 mant = str;\n             }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 589, 
          "faulty": "return d;", 
          "type": "InsertBefore", 
          "seed": "if (expPos > -1) {\n  if (expPos < decPos) {\n    throw new NumberFormatException(str + \" is not a valid number.\");\n  }\n  dec=str.substring(decPos + 1,expPos);\n}\n else {\n  dec=str.substring(decPos + 1);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 489, 
          "faulty": "mant=str.substring(0,expPos);", 
          "type": "Replace", 
          "seed": "mant=str;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:16:07.026060969 -0500\n+++ /tmp/Arja_Defects4J_Lang_27/patches_whwa/Patch_584/patched/tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:19:29.359569496 -0500\n@@ -486,7 +486,7 @@\n             mant = str.substring(0, decPos);\n         } else {\n             if (expPos > -1) {\n-                mant = str.substring(0, expPos);\n+                mant = str;\n             } else {\n                 mant = str;\n             }\n@@ -586,7 +586,16 @@\n                 try {\n                     Double d = createDouble(str);\n                     if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n-                        return d;\n+                        if (expPos > -1) {\n+\t\t\t\t\t\t\tif (expPos < decPos) {\n+\t\t\t\t\t\t\t\tthrow new NumberFormatException(str\n+\t\t\t\t\t\t\t\t\t\t+ \" is not a valid number.\");\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tdec = str.substring(decPos + 1, expPos);\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tdec = str.substring(decPos + 1);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\treturn d;\n                     }\n                 } catch (NumberFormatException nfe) {\n                     // ignore the bad number\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 484, 
          "faulty": "dec=str.substring(decPos + 1);", 
          "type": "InsertBefore", 
          "seed": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n  return createInteger(str);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 489, 
          "faulty": "mant=str.substring(0,expPos);", 
          "type": "Replace", 
          "seed": "mant=str;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 515, 
          "faulty": "return createBigInteger(numeric);", 
          "type": "InsertBefore", 
          "seed": "if (expPos > -1) {\n  if (expPos < decPos) {\n    throw new NumberFormatException(str + \" is not a valid number.\");\n  }\n  dec=str.substring(decPos + 1,expPos);\n}\n else {\n  dec=str.substring(decPos + 1);\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:16:07.026060969 -0500\n+++ /tmp/Arja_Defects4J_Lang_27/patches_whwa/Patch_326/patched/tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:18:30.515130746 -0500\n@@ -481,12 +481,15 @@\n                 }\n                 dec = str.substring(decPos + 1, expPos);\n             } else {\n-                dec = str.substring(decPos + 1);\n+                if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n+\t\t\t\t\treturn createInteger(str);\n+\t\t\t\t}\n+\t\t\t\tdec = str.substring(decPos + 1);\n             }\n             mant = str.substring(0, decPos);\n         } else {\n             if (expPos > -1) {\n-                mant = str.substring(0, expPos);\n+                mant = str;\n             } else {\n                 mant = str;\n             }\n@@ -512,7 +515,16 @@\n                         } catch (NumberFormatException nfe) {\n                             //Too big for a long\n                         }\n-                        return createBigInteger(numeric);\n+                        if (expPos > -1) {\n+\t\t\t\t\t\t\tif (expPos < decPos) {\n+\t\t\t\t\t\t\t\tthrow new NumberFormatException(str\n+\t\t\t\t\t\t\t\t\t\t+ \" is not a valid number.\");\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tdec = str.substring(decPos + 1, expPos);\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tdec = str.substring(decPos + 1);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\treturn createBigInteger(numeric);\n \n                     }\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 538, 
          "faulty": "return d;", 
          "type": "InsertBefore", 
          "seed": "if (expPos > -1) {\n  mant=str.substring(0,expPos);\n}\n else {\n  mant=str;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 522, 
          "faulty": "Float f=NumberUtils.createFloat(numeric);", 
          "type": "InsertBefore", 
          "seed": "dec=str.substring(decPos + 1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 536, 
          "faulty": "Double d=NumberUtils.createDouble(numeric);", 
          "type": "InsertBefore", 
          "seed": "exp=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 489, 
          "faulty": "mant=str.substring(0,expPos);", 
          "type": "Replace", 
          "seed": "mant=str;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:16:07.026060969 -0500\n+++ /tmp/Arja_Defects4J_Lang_27/patches_whwa/Patch_1417/patched/tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:22:40.444994394 -0500\n@@ -486,7 +486,7 @@\n             mant = str.substring(0, decPos);\n         } else {\n             if (expPos > -1) {\n-                mant = str.substring(0, expPos);\n+                mant = str;\n             } else {\n                 mant = str;\n             }\n@@ -519,7 +519,8 @@\n                 case 'f' :\n                 case 'F' :\n                     try {\n-                        Float f = NumberUtils.createFloat(numeric);\n+                        dec = str.substring(decPos + 1);\n+\t\t\t\t\t\tFloat f = NumberUtils.createFloat(numeric);\n                         if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                             //If it's too big for a float or the float value = 0 and the string\n                             //has non-zeros in it, then float does not have the precision we want\n@@ -533,9 +534,15 @@\n                 case 'd' :\n                 case 'D' :\n                     try {\n-                        Double d = NumberUtils.createDouble(numeric);\n+                        exp = null;\n+\t\t\t\t\t\tDouble d = NumberUtils.createDouble(numeric);\n                         if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {\n-                            return d;\n+                            if (expPos > -1) {\n+\t\t\t\t\t\t\t\tmant = str.substring(0, expPos);\n+\t\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\t\tmant = str;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\treturn d;\n                         }\n                     } catch (NumberFormatException nfe) {\n                         // ignore the bad number\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 479, 
          "faulty": "if (expPos < decPos) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > -1 && expPos < str.length() - 1) {\n  exp=str.substring(expPos + 1,str.length());\n}\n else {\n  exp=null;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 489, 
          "faulty": "mant=str.substring(0,expPos);", 
          "type": "Replace", 
          "seed": "mant=str;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:16:07.026060969 -0500\n+++ /tmp/Arja_Defects4J_Lang_27/patches_whwa/Patch_811/patched/tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:20:24.367979665 -0500\n@@ -476,7 +476,12 @@\n         if (decPos > -1) {\n \n             if (expPos > -1) {\n-                if (expPos < decPos) {\n+                if (expPos > -1 && expPos < str.length() - 1) {\n+\t\t\t\t\texp = str.substring(expPos + 1, str.length());\n+\t\t\t\t} else {\n+\t\t\t\t\texp = null;\n+\t\t\t\t}\n+\t\t\t\tif (expPos < decPos) {\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n                 }\n                 dec = str.substring(decPos + 1, expPos);\n@@ -486,7 +491,7 @@\n             mant = str.substring(0, decPos);\n         } else {\n             if (expPos > -1) {\n-                mant = str.substring(0, expPos);\n+                mant = str;\n             } else {\n                 mant = str;\n             }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 489, 
          "faulty": "mant=str.substring(0,expPos);", 
          "type": "Replace", 
          "seed": "mant=str;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 581, 
          "faulty": "return f;", 
          "type": "InsertBefore", 
          "seed": "exp=null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:16:07.026060969 -0500\n+++ /tmp/Arja_Defects4J_Lang_27/patches_whwa/Patch_1506/patched/tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:23:00.961147394 -0500\n@@ -486,7 +486,7 @@\n             mant = str.substring(0, decPos);\n         } else {\n             if (expPos > -1) {\n-                mant = str.substring(0, expPos);\n+                mant = str;\n             } else {\n                 mant = str;\n             }\n@@ -578,7 +578,8 @@\n                 try {\n                     Float f = createFloat(str);\n                     if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n-                        return f;\n+                        exp = null;\n+\t\t\t\t\t\treturn f;\n                     }\n                 } catch (NumberFormatException nfe) {\n                     // ignore the bad number\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 484, 
          "faulty": "dec=str.substring(decPos + 1);", 
          "type": "InsertBefore", 
          "seed": "mant=str.substring(0,decPos);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 489, 
          "faulty": "mant=str.substring(0,expPos);", 
          "type": "Replace", 
          "seed": "mant=str;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:16:07.026060969 -0500\n+++ /tmp/Arja_Defects4J_Lang_27/patches_whwa/Patch_1344/patched/tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:22:22.712862159 -0500\n@@ -481,12 +481,13 @@\n                 }\n                 dec = str.substring(decPos + 1, expPos);\n             } else {\n-                dec = str.substring(decPos + 1);\n+                mant = str.substring(0, decPos);\n+\t\t\t\tdec = str.substring(decPos + 1);\n             }\n             mant = str.substring(0, decPos);\n         } else {\n             if (expPos > -1) {\n-                mant = str.substring(0, expPos);\n+                mant = str;\n             } else {\n                 mant = str;\n             }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 537, 
          "faulty": "if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {\n  return d;\n}", 
          "type": "InsertBefore", 
          "seed": "if (decPos > -1) {\n  if (expPos > -1) {\n    if (expPos < decPos) {\n      throw new NumberFormatException(str + \" is not a valid number.\");\n    }\n    dec=str.substring(decPos + 1,expPos);\n  }\n else {\n    dec=str.substring(decPos + 1);\n  }\n  mant=str.substring(0,decPos);\n}\n else {\n  if (expPos > -1) {\n    mant=str.substring(0,expPos);\n  }\n else {\n    mant=str;\n  }\n  dec=null;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 489, 
          "faulty": "mant=str.substring(0,expPos);", 
          "type": "Replace", 
          "seed": "mant=str;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:16:07.026060969 -0500\n+++ /tmp/Arja_Defects4J_Lang_27/patches_whwa/Patch_679/patched/tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:19:52.607742843 -0500\n@@ -486,7 +486,7 @@\n             mant = str.substring(0, decPos);\n         } else {\n             if (expPos > -1) {\n-                mant = str.substring(0, expPos);\n+                mant = str;\n             } else {\n                 mant = str;\n             }\n@@ -534,7 +534,26 @@\n                 case 'D' :\n                     try {\n                         Double d = NumberUtils.createDouble(numeric);\n-                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {\n+                        if (decPos > -1) {\n+\t\t\t\t\t\t\tif (expPos > -1) {\n+\t\t\t\t\t\t\t\tif (expPos < decPos) {\n+\t\t\t\t\t\t\t\t\tthrow new NumberFormatException(str\n+\t\t\t\t\t\t\t\t\t\t\t+ \" is not a valid number.\");\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\tdec = str.substring(decPos + 1, expPos);\n+\t\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\t\tdec = str.substring(decPos + 1);\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tmant = str.substring(0, decPos);\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tif (expPos > -1) {\n+\t\t\t\t\t\t\t\tmant = str.substring(0, expPos);\n+\t\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\t\tmant = str;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tdec = null;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tif (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {\n                             return d;\n                         }\n                     } catch (NumberFormatException nfe) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 589, 
          "faulty": "return d;", 
          "type": "InsertBefore", 
          "seed": "dec=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 489, 
          "faulty": "mant=str.substring(0,expPos);", 
          "type": "Replace", 
          "seed": "mant=str;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:16:07.026060969 -0500\n+++ /tmp/Arja_Defects4J_Lang_27/patches_whwa/Patch_1565/patched/tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:23:16.345262123 -0500\n@@ -486,7 +486,7 @@\n             mant = str.substring(0, decPos);\n         } else {\n             if (expPos > -1) {\n-                mant = str.substring(0, expPos);\n+                mant = str;\n             } else {\n                 mant = str;\n             }\n@@ -586,7 +586,8 @@\n                 try {\n                     Double d = createDouble(str);\n                     if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n-                        return d;\n+                        dec = null;\n+\t\t\t\t\t\treturn d;\n                     }\n                 } catch (NumberFormatException nfe) {\n                     // ignore the bad number\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 489, 
          "faulty": "mant=str.substring(0,expPos);", 
          "type": "Replace", 
          "seed": "mant=str;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 469, 
          "faulty": "char lastChar=str.charAt(str.length() - 1);", 
          "type": "InsertBefore", 
          "seed": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n  return createInteger(str);\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:16:07.026060969 -0500\n+++ /tmp/Arja_Defects4J_Lang_27/patches_whwa/Patch_635/patched/tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:19:40.107649638 -0500\n@@ -466,7 +466,10 @@\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n             return createInteger(str);\n         }   \n-        char lastChar = str.charAt(str.length() - 1);\n+        if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n+\t\t\treturn createInteger(str);\n+\t\t}\n+\t\tchar lastChar = str.charAt(str.length() - 1);\n         String mant;\n         String dec;\n         String exp;\n@@ -486,7 +489,7 @@\n             mant = str.substring(0, decPos);\n         } else {\n             if (expPos > -1) {\n-                mant = str.substring(0, expPos);\n+                mant = str;\n             } else {\n                 mant = str;\n             }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 538, 
          "faulty": "return d;", 
          "type": "InsertBefore", 
          "seed": "if (expPos > -1) {\n  mant=str.substring(0,expPos);\n}\n else {\n  mant=str;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 489, 
          "faulty": "mant=str.substring(0,expPos);", 
          "type": "Replace", 
          "seed": "mant=str;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 456, 
          "faulty": "if (StringUtils.isBlank(str)) {\n  throw new NumberFormatException(\"A blank string is not a valid number\");\n}", 
          "type": "InsertBefore", 
          "seed": "if (StringUtils.isBlank(str)) {\n  throw new NumberFormatException(\"A blank string is not a valid number\");\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:16:07.026060969 -0500\n+++ /tmp/Arja_Defects4J_Lang_27/patches_whwa/Patch_934/patched/tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:20:51.988185620 -0500\n@@ -454,6 +454,10 @@\n             return null;\n         }\n         if (StringUtils.isBlank(str)) {\n+\t\t\tthrow new NumberFormatException(\n+\t\t\t\t\t\"A blank string is not a valid number\");\n+\t\t}\n+\t\tif (StringUtils.isBlank(str)) {\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n@@ -486,7 +490,7 @@\n             mant = str.substring(0, decPos);\n         } else {\n             if (expPos > -1) {\n-                mant = str.substring(0, expPos);\n+                mant = str;\n             } else {\n                 mant = str;\n             }\n@@ -535,7 +539,12 @@\n                     try {\n                         Double d = NumberUtils.createDouble(numeric);\n                         if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {\n-                            return d;\n+                            if (expPos > -1) {\n+\t\t\t\t\t\t\t\tmant = str.substring(0, expPos);\n+\t\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\t\tmant = str;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\treturn d;\n                         }\n                     } catch (NumberFormatException nfe) {\n                         // ignore the bad number\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 579, 
          "faulty": "Float f=createFloat(str);", 
          "type": "InsertBefore", 
          "seed": "dec=str.substring(decPos + 1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 489, 
          "faulty": "mant=str.substring(0,expPos);", 
          "type": "Replace", 
          "seed": "mant=str;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 587, 
          "faulty": "Double d=createDouble(str);", 
          "type": "InsertBefore", 
          "seed": "mant=str;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:16:07.026060969 -0500\n+++ /tmp/Arja_Defects4J_Lang_27/patches_whwa/Patch_500/patched/tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:19:05.907394632 -0500\n@@ -486,7 +486,7 @@\n             mant = str.substring(0, decPos);\n         } else {\n             if (expPos > -1) {\n-                mant = str.substring(0, expPos);\n+                mant = str;\n             } else {\n                 mant = str;\n             }\n@@ -576,7 +576,8 @@\n                 //Must be a float,double,BigDec\n                 boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n                 try {\n-                    Float f = createFloat(str);\n+                    dec = str.substring(decPos + 1);\n+\t\t\t\t\tFloat f = createFloat(str);\n                     if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                         return f;\n                     }\n@@ -584,7 +585,8 @@\n                     // ignore the bad number\n                 }\n                 try {\n-                    Double d = createDouble(str);\n+                    mant = str;\n+\t\t\t\t\tDouble d = createDouble(str);\n                     if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                         return d;\n                     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 478, 
          "faulty": "if (expPos > -1) {\n  if (expPos < decPos) {\n    throw new NumberFormatException(str + \" is not a valid number.\");\n  }\n  dec=str.substring(decPos + 1,expPos);\n}\n else {\n  dec=str.substring(decPos + 1);\n}", 
          "type": "InsertBefore", 
          "seed": "exp=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 489, 
          "faulty": "mant=str.substring(0,expPos);", 
          "type": "Replace", 
          "seed": "mant=str;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 466, 
          "faulty": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n  return createInteger(str);\n}", 
          "type": "InsertBefore", 
          "seed": "if (str == null) {\n  return null;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 573, 
          "faulty": "return createBigInteger(str);", 
          "type": "InsertBefore", 
          "seed": "exp=null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:16:07.026060969 -0500\n+++ /tmp/Arja_Defects4J_Lang_27/patches_whwa/Patch_35/patched/tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:17:25.190643706 -0500\n@@ -463,7 +463,10 @@\n             // a wrong value.\n             return null;\n         }\n-        if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n+        if (str == null) {\n+\t\t\treturn null;\n+\t\t}\n+\t\tif (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n             return createInteger(str);\n         }   \n         char lastChar = str.charAt(str.length() - 1);\n@@ -475,7 +478,8 @@\n \n         if (decPos > -1) {\n \n-            if (expPos > -1) {\n+            exp = null;\n+\t\t\tif (expPos > -1) {\n                 if (expPos < decPos) {\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n                 }\n@@ -486,7 +490,7 @@\n             mant = str.substring(0, decPos);\n         } else {\n             if (expPos > -1) {\n-                mant = str.substring(0, expPos);\n+                mant = str;\n             } else {\n                 mant = str;\n             }\n@@ -570,7 +574,8 @@\n                 } catch (NumberFormatException nfe) {\n                     // ignore the bad number\n                 }\n-                return createBigInteger(str);\n+                exp = null;\n+\t\t\t\treturn createBigInteger(str);\n \n             } else {\n                 //Must be a float,double,BigDec\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 489, 
          "faulty": "mant=str.substring(0,expPos);", 
          "type": "Replace", 
          "seed": "mant=str;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 581, 
          "faulty": "return f;", 
          "type": "InsertBefore", 
          "seed": "if (str == null) {\n  return null;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:16:07.026060969 -0500\n+++ /tmp/Arja_Defects4J_Lang_27/patches_whwa/Patch_1637/patched/tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:23:32.489382520 -0500\n@@ -486,7 +486,7 @@\n             mant = str.substring(0, decPos);\n         } else {\n             if (expPos > -1) {\n-                mant = str.substring(0, expPos);\n+                mant = str;\n             } else {\n                 mant = str;\n             }\n@@ -578,7 +578,10 @@\n                 try {\n                     Float f = createFloat(str);\n                     if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n-                        return f;\n+                        if (str == null) {\n+\t\t\t\t\t\t\treturn null;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\treturn f;\n                     }\n                 } catch (NumberFormatException nfe) {\n                     // ignore the bad number\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 489, 
          "faulty": "mant=str.substring(0,expPos);", 
          "type": "Replace", 
          "seed": "return Double.parseDouble(str);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:16:07.026060969 -0500\n+++ /tmp/Arja_Defects4J_Lang_27/patches_whwa/Patch_1586/patched/tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:23:21.697302036 -0500\n@@ -486,7 +486,7 @@\n             mant = str.substring(0, decPos);\n         } else {\n             if (expPos > -1) {\n-                mant = str.substring(0, expPos);\n+                return Double.parseDouble(str);\n             } else {\n                 mant = str;\n             }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 544, 
          "faulty": "return createBigDecimal(numeric);", 
          "type": "Replace", 
          "seed": "return createBigDecimal(numeric);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 489, 
          "faulty": "mant=str.substring(0,expPos);", 
          "type": "Replace", 
          "seed": "mant=str;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:16:07.026060969 -0500\n+++ /tmp/Arja_Defects4J_Lang_27/patches_whwa/Patch_1160/patched/tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:21:41.072551640 -0500\n@@ -486,7 +486,7 @@\n             mant = str.substring(0, decPos);\n         } else {\n             if (expPos > -1) {\n-                mant = str.substring(0, expPos);\n+                mant = str;\n             } else {\n                 mant = str;\n             }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 538, 
          "faulty": "return d;", 
          "type": "InsertBefore", 
          "seed": "if (expPos > -1) {\n  mant=str.substring(0,expPos);\n}\n else {\n  mant=str;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 537, 
          "faulty": "if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {\n  return d;\n}", 
          "type": "InsertBefore", 
          "seed": "if (decPos > -1) {\n  if (expPos > -1) {\n    if (expPos < decPos) {\n      throw new NumberFormatException(str + \" is not a valid number.\");\n    }\n    dec=str.substring(decPos + 1,expPos);\n  }\n else {\n    dec=str.substring(decPos + 1);\n  }\n  mant=str.substring(0,decPos);\n}\n else {\n  if (expPos > -1) {\n    mant=str.substring(0,expPos);\n  }\n else {\n    mant=str;\n  }\n  dec=null;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 489, 
          "faulty": "mant=str.substring(0,expPos);", 
          "type": "Replace", 
          "seed": "mant=str;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:16:07.026060969 -0500\n+++ /tmp/Arja_Defects4J_Lang_27/patches_whwa/Patch_1508/patched/tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:23:01.201149183 -0500\n@@ -486,7 +486,7 @@\n             mant = str.substring(0, decPos);\n         } else {\n             if (expPos > -1) {\n-                mant = str.substring(0, expPos);\n+                mant = str;\n             } else {\n                 mant = str;\n             }\n@@ -534,8 +534,32 @@\n                 case 'D' :\n                     try {\n                         Double d = NumberUtils.createDouble(numeric);\n-                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {\n-                            return d;\n+                        if (decPos > -1) {\n+\t\t\t\t\t\t\tif (expPos > -1) {\n+\t\t\t\t\t\t\t\tif (expPos < decPos) {\n+\t\t\t\t\t\t\t\t\tthrow new NumberFormatException(str\n+\t\t\t\t\t\t\t\t\t\t\t+ \" is not a valid number.\");\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\tdec = str.substring(decPos + 1, expPos);\n+\t\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\t\tdec = str.substring(decPos + 1);\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tmant = str.substring(0, decPos);\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tif (expPos > -1) {\n+\t\t\t\t\t\t\t\tmant = str.substring(0, expPos);\n+\t\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\t\tmant = str;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tdec = null;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tif (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {\n+                            if (expPos > -1) {\n+\t\t\t\t\t\t\t\tmant = str.substring(0, expPos);\n+\t\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\t\tmant = str;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\treturn d;\n                         }\n                     } catch (NumberFormatException nfe) {\n                         // ignore the bad number\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 489, 
          "faulty": "mant=str.substring(0,expPos);", 
          "type": "Replace", 
          "seed": "mant=str;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 466, 
          "faulty": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n  return createInteger(str);\n}", 
          "type": "InsertBefore", 
          "seed": "if (str == null) {\n  return null;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:16:07.026060969 -0500\n+++ /tmp/Arja_Defects4J_Lang_27/patches_whwa/Patch_1227/patched/tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:21:56.860669374 -0500\n@@ -463,7 +463,10 @@\n             // a wrong value.\n             return null;\n         }\n-        if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n+        if (str == null) {\n+\t\t\treturn null;\n+\t\t}\n+\t\tif (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n             return createInteger(str);\n         }   \n         char lastChar = str.charAt(str.length() - 1);\n@@ -486,7 +489,7 @@\n             mant = str.substring(0, decPos);\n         } else {\n             if (expPos > -1) {\n-                mant = str.substring(0, expPos);\n+                mant = str;\n             } else {\n                 mant = str;\n             }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 489, 
          "faulty": "mant=str.substring(0,expPos);", 
          "type": "Replace", 
          "seed": "mant=str;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 474, 
          "faulty": "int expPos=str.indexOf('e') + str.indexOf('E') + 1;", 
          "type": "InsertBefore", 
          "seed": "exp=null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:16:07.026060969 -0500\n+++ /tmp/Arja_Defects4J_Lang_27/patches_whwa/Patch_1357/patched/tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:22:27.172895420 -0500\n@@ -471,7 +471,8 @@\n         String dec;\n         String exp;\n         int decPos = str.indexOf('.');\n-        int expPos = str.indexOf('e') + str.indexOf('E') + 1;\n+        exp = null;\n+\t\tint expPos = str.indexOf('e') + str.indexOf('E') + 1;\n \n         if (decPos > -1) {\n \n@@ -486,7 +487,7 @@\n             mant = str.substring(0, decPos);\n         } else {\n             if (expPos > -1) {\n-                mant = str.substring(0, expPos);\n+                mant = str;\n             } else {\n                 mant = str;\n             }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 522, 
          "faulty": "Float f=NumberUtils.createFloat(numeric);", 
          "type": "InsertBefore", 
          "seed": "dec=str.substring(decPos + 1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 489, 
          "faulty": "mant=str.substring(0,expPos);", 
          "type": "Replace", 
          "seed": "mant=str;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:16:07.026060969 -0500\n+++ /tmp/Arja_Defects4J_Lang_27/patches_whwa/Patch_322/patched/tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:18:29.871125945 -0500\n@@ -486,7 +486,7 @@\n             mant = str.substring(0, decPos);\n         } else {\n             if (expPos > -1) {\n-                mant = str.substring(0, expPos);\n+                mant = str;\n             } else {\n                 mant = str;\n             }\n@@ -519,7 +519,8 @@\n                 case 'f' :\n                 case 'F' :\n                     try {\n-                        Float f = NumberUtils.createFloat(numeric);\n+                        dec = str.substring(decPos + 1);\n+\t\t\t\t\t\tFloat f = NumberUtils.createFloat(numeric);\n                         if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                             //If it's too big for a float or the float value = 0 and the string\n                             //has non-zeros in it, then float does not have the precision we want\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 564, 
          "faulty": "return createInteger(str);", 
          "type": "Replace", 
          "seed": "return Integer.decode(str);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 489, 
          "faulty": "mant=str.substring(0,expPos);", 
          "type": "Replace", 
          "seed": "mant=str;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:16:07.026060969 -0500\n+++ /tmp/Arja_Defects4J_Lang_27/patches_whwa/Patch_348/patched/tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:18:34.931163672 -0500\n@@ -486,7 +486,7 @@\n             mant = str.substring(0, decPos);\n         } else {\n             if (expPos > -1) {\n-                mant = str.substring(0, expPos);\n+                mant = str;\n             } else {\n                 mant = str;\n             }\n@@ -561,7 +561,7 @@\n             if (dec == null && exp == null) {\n                 //Must be an int,long,bigint\n                 try {\n-                    return createInteger(str);\n+                    return Integer.decode(str);\n                 } catch (NumberFormatException nfe) {\n                     // ignore the bad number\n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 489, 
          "faulty": "mant=str.substring(0,expPos);", 
          "type": "Replace", 
          "seed": "mant=str;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 456, 
          "faulty": "if (StringUtils.isBlank(str)) {\n  throw new NumberFormatException(\"A blank string is not a valid number\");\n}", 
          "type": "InsertBefore", 
          "seed": "if (str == null) {\n  throw new IllegalArgumentException(\"The string must not be null\");\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:16:07.026060969 -0500\n+++ /tmp/Arja_Defects4J_Lang_27/patches_whwa/Patch_847/patched/tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:20:31.776034904 -0500\n@@ -453,7 +453,10 @@\n         if (str == null) {\n             return null;\n         }\n-        if (StringUtils.isBlank(str)) {\n+        if (str == null) {\n+\t\t\tthrow new IllegalArgumentException(\"The string must not be null\");\n+\t\t}\n+\t\tif (StringUtils.isBlank(str)) {\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n@@ -486,7 +489,7 @@\n             mant = str.substring(0, decPos);\n         } else {\n             if (expPos > -1) {\n-                mant = str.substring(0, expPos);\n+                mant = str;\n             } else {\n                 mant = str;\n             }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 489, 
          "faulty": "mant=str.substring(0,expPos);", 
          "type": "Replace", 
          "seed": "mant=str;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 456, 
          "faulty": "if (StringUtils.isBlank(str)) {\n  throw new NumberFormatException(\"A blank string is not a valid number\");\n}", 
          "type": "InsertBefore", 
          "seed": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n  return createInteger(str);\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:16:07.026060969 -0500\n+++ /tmp/Arja_Defects4J_Lang_27/patches_whwa/Patch_412/patched/tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:18:48.195262569 -0500\n@@ -453,7 +453,10 @@\n         if (str == null) {\n             return null;\n         }\n-        if (StringUtils.isBlank(str)) {\n+        if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n+\t\t\treturn createInteger(str);\n+\t\t}\n+\t\tif (StringUtils.isBlank(str)) {\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n@@ -486,7 +489,7 @@\n             mant = str.substring(0, decPos);\n         } else {\n             if (expPos > -1) {\n-                mant = str.substring(0, expPos);\n+                mant = str;\n             } else {\n                 mant = str;\n             }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 489, 
          "faulty": "mant=str.substring(0,expPos);", 
          "type": "Replace", 
          "seed": "mant=str;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 587, 
          "faulty": "Double d=createDouble(str);", 
          "type": "InsertBefore", 
          "seed": "mant=str;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:16:07.026060969 -0500\n+++ /tmp/Arja_Defects4J_Lang_27/patches_whwa/Patch_818/patched/tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:20:25.679989448 -0500\n@@ -486,7 +486,7 @@\n             mant = str.substring(0, decPos);\n         } else {\n             if (expPos > -1) {\n-                mant = str.substring(0, expPos);\n+                mant = str;\n             } else {\n                 mant = str;\n             }\n@@ -584,7 +584,8 @@\n                     // ignore the bad number\n                 }\n                 try {\n-                    Double d = createDouble(str);\n+                    mant = str;\n+\t\t\t\t\tDouble d = createDouble(str);\n                     if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                         return d;\n                     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 489, 
          "faulty": "mant=str.substring(0,expPos);", 
          "type": "Replace", 
          "seed": "mant=str;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 573, 
          "faulty": "return createBigInteger(str);", 
          "type": "InsertBefore", 
          "seed": "exp=null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:16:07.026060969 -0500\n+++ /tmp/Arja_Defects4J_Lang_27/patches_whwa/Patch_793/patched/tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:20:20.327949539 -0500\n@@ -486,7 +486,7 @@\n             mant = str.substring(0, decPos);\n         } else {\n             if (expPos > -1) {\n-                mant = str.substring(0, expPos);\n+                mant = str;\n             } else {\n                 mant = str;\n             }\n@@ -570,7 +570,8 @@\n                 } catch (NumberFormatException nfe) {\n                     // ignore the bad number\n                 }\n-                return createBigInteger(str);\n+                exp = null;\n+\t\t\t\treturn createBigInteger(str);\n \n             } else {\n                 //Must be a float,double,BigDec\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 536, 
          "faulty": "Double d=NumberUtils.createDouble(numeric);", 
          "type": "Replace", 
          "seed": "Double d=createDouble(str);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 489, 
          "faulty": "mant=str.substring(0,expPos);", 
          "type": "Replace", 
          "seed": "mant=str;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 569, 
          "faulty": "return createLong(str);", 
          "type": "InsertBefore", 
          "seed": "dec=str.substring(decPos + 1);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:16:07.026060969 -0500\n+++ /tmp/Arja_Defects4J_Lang_27/patches_whwa/Patch_498/patched/tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:19:05.635392604 -0500\n@@ -486,7 +486,7 @@\n             mant = str.substring(0, decPos);\n         } else {\n             if (expPos > -1) {\n-                mant = str.substring(0, expPos);\n+                mant = str;\n             } else {\n                 mant = str;\n             }\n@@ -533,7 +533,7 @@\n                 case 'd' :\n                 case 'D' :\n                     try {\n-                        Double d = NumberUtils.createDouble(numeric);\n+                        Double d = createDouble(str);\n                         if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {\n                             return d;\n                         }\n@@ -566,7 +566,8 @@\n                     // ignore the bad number\n                 }\n                 try {\n-                    return createLong(str);\n+                    dec = str.substring(decPos + 1);\n+\t\t\t\t\treturn createLong(str);\n                 } catch (NumberFormatException nfe) {\n                     // ignore the bad number\n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 489, 
          "faulty": "mant=str.substring(0,expPos);", 
          "type": "Replace", 
          "seed": "return new BigDecimal(str);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:16:07.026060969 -0500\n+++ /tmp/Arja_Defects4J_Lang_27/patches_whwa/Patch_1079/patched/tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:21:24.100425078 -0500\n@@ -486,7 +486,7 @@\n             mant = str.substring(0, decPos);\n         } else {\n             if (expPos > -1) {\n-                mant = str.substring(0, expPos);\n+                return new BigDecimal(str);\n             } else {\n                 mant = str;\n             }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 478, 
          "faulty": "if (expPos > -1) {\n  if (expPos < decPos) {\n    throw new NumberFormatException(str + \" is not a valid number.\");\n  }\n  dec=str.substring(decPos + 1,expPos);\n}\n else {\n  dec=str.substring(decPos + 1);\n}", 
          "type": "InsertBefore", 
          "seed": "if (str == null) {\n  throw new IllegalArgumentException(\"The string must not be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 489, 
          "faulty": "mant=str.substring(0,expPos);", 
          "type": "Replace", 
          "seed": "mant=str;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:16:07.026060969 -0500\n+++ /tmp/Arja_Defects4J_Lang_27/patches_whwa/Patch_558/patched/tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:19:20.523503613 -0500\n@@ -475,7 +475,11 @@\n \n         if (decPos > -1) {\n \n-            if (expPos > -1) {\n+            if (str == null) {\n+\t\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\t\"The string must not be null\");\n+\t\t\t}\n+\t\t\tif (expPos > -1) {\n                 if (expPos < decPos) {\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n                 }\n@@ -486,7 +490,7 @@\n             mant = str.substring(0, decPos);\n         } else {\n             if (expPos > -1) {\n-                mant = str.substring(0, expPos);\n+                mant = str;\n             } else {\n                 mant = str;\n             }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 580, 
          "faulty": "if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n  return f;\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > -1) {\n  mant=str.substring(0,expPos);\n}\n else {\n  mant=str;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 489, 
          "faulty": "mant=str.substring(0,expPos);", 
          "type": "Replace", 
          "seed": "mant=str;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:16:07.026060969 -0500\n+++ /tmp/Arja_Defects4J_Lang_27/patches_whwa/Patch_542/patched/tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:19:17.291479514 -0500\n@@ -486,7 +486,7 @@\n             mant = str.substring(0, decPos);\n         } else {\n             if (expPos > -1) {\n-                mant = str.substring(0, expPos);\n+                mant = str;\n             } else {\n                 mant = str;\n             }\n@@ -577,7 +577,12 @@\n                 boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n                 try {\n                     Float f = createFloat(str);\n-                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n+                    if (expPos > -1) {\n+\t\t\t\t\t\tmant = str.substring(0, expPos);\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tmant = str;\n+\t\t\t\t\t}\n+\t\t\t\t\tif (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                         return f;\n                     }\n                 } catch (NumberFormatException nfe) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 561, 
          "faulty": "if (dec == null && exp == null) {\n  try {\n    return createInteger(str);\n  }\n catch (  NumberFormatException nfe) {\n  }\n  try {\n    return createLong(str);\n  }\n catch (  NumberFormatException nfe) {\n  }\n  return createBigInteger(str);\n}\n else {\n  boolean allZeros=isAllZeros(mant) && isAllZeros(exp);\n  try {\n    Float f=createFloat(str);\n    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n      return f;\n    }\n  }\n catch (  NumberFormatException nfe) {\n  }\n  try {\n    Double d=createDouble(str);\n    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n      return d;\n    }\n  }\n catch (  NumberFormatException nfe) {\n  }\n  return createBigDecimal(str);\n}", 
          "type": "InsertBefore", 
          "seed": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n  return createInteger(str);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 489, 
          "faulty": "mant=str.substring(0,expPos);", 
          "type": "Replace", 
          "seed": "mant=str;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:16:07.026060969 -0500\n+++ /tmp/Arja_Defects4J_Lang_27/patches_whwa/Patch_15/patched/tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:17:20.098605742 -0500\n@@ -486,7 +486,7 @@\n             mant = str.substring(0, decPos);\n         } else {\n             if (expPos > -1) {\n-                mant = str.substring(0, expPos);\n+                mant = str;\n             } else {\n                 mant = str;\n             }\n@@ -558,7 +558,10 @@\n             } else {\n                 exp = null;\n             }\n-            if (dec == null && exp == null) {\n+            if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n+\t\t\t\treturn createInteger(str);\n+\t\t\t}\n+\t\t\tif (dec == null && exp == null) {\n                 //Must be an int,long,bigint\n                 try {\n                     return createInteger(str);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 536, 
          "faulty": "Double d=NumberUtils.createDouble(numeric);", 
          "type": "Replace", 
          "seed": "Double d=createDouble(str);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 489, 
          "faulty": "mant=str.substring(0,expPos);", 
          "type": "Replace", 
          "seed": "mant=str;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 466, 
          "faulty": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n  return createInteger(str);\n}", 
          "type": "Delete", 
          "seed": "if (str == null) {\n  return null;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 456, 
          "faulty": "if (StringUtils.isBlank(str)) {\n  throw new NumberFormatException(\"A blank string is not a valid number\");\n}", 
          "type": "InsertBefore", 
          "seed": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n  return createInteger(str);\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:16:07.026060969 -0500\n+++ /tmp/Arja_Defects4J_Lang_27/patches_whwa/Patch_1115/patched/tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:21:31.760482199 -0500\n@@ -453,7 +453,10 @@\n         if (str == null) {\n             return null;\n         }\n-        if (StringUtils.isBlank(str)) {\n+        if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n+\t\t\treturn createInteger(str);\n+\t\t}\n+\t\tif (StringUtils.isBlank(str)) {\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n@@ -463,9 +466,6 @@\n             // a wrong value.\n             return null;\n         }\n-        if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n-            return createInteger(str);\n-        }   \n         char lastChar = str.charAt(str.length() - 1);\n         String mant;\n         String dec;\n@@ -486,7 +486,7 @@\n             mant = str.substring(0, decPos);\n         } else {\n             if (expPos > -1) {\n-                mant = str.substring(0, expPos);\n+                mant = str;\n             } else {\n                 mant = str;\n             }\n@@ -533,7 +533,7 @@\n                 case 'd' :\n                 case 'D' :\n                     try {\n-                        Double d = NumberUtils.createDouble(numeric);\n+                        Double d = createDouble(str);\n                         if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {\n                             return d;\n                         }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 489, 
          "faulty": "mant=str.substring(0,expPos);", 
          "type": "Replace", 
          "seed": "mant=str;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:16:07.026060969 -0500\n+++ /tmp/Arja_Defects4J_Lang_27/patches_whwa/Patch_56/patched/tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:17:29.770677852 -0500\n@@ -486,7 +486,7 @@\n             mant = str.substring(0, decPos);\n         } else {\n             if (expPos > -1) {\n-                mant = str.substring(0, expPos);\n+                mant = str;\n             } else {\n                 mant = str;\n             }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 489, 
          "faulty": "mant=str.substring(0,expPos);", 
          "type": "Replace", 
          "seed": "mant=str;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 466, 
          "faulty": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n  return createInteger(str);\n}", 
          "type": "InsertBefore", 
          "seed": "if (str == null) {\n  return null;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 587, 
          "faulty": "Double d=createDouble(str);", 
          "type": "InsertBefore", 
          "seed": "mant=str;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 573, 
          "faulty": "return createBigInteger(str);", 
          "type": "InsertBefore", 
          "seed": "exp=null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:16:07.026060969 -0500\n+++ /tmp/Arja_Defects4J_Lang_27/patches_whwa/Patch_48/patched/tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:17:28.130665625 -0500\n@@ -463,7 +463,10 @@\n             // a wrong value.\n             return null;\n         }\n-        if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n+        if (str == null) {\n+\t\t\treturn null;\n+\t\t}\n+\t\tif (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n             return createInteger(str);\n         }   \n         char lastChar = str.charAt(str.length() - 1);\n@@ -486,7 +489,7 @@\n             mant = str.substring(0, decPos);\n         } else {\n             if (expPos > -1) {\n-                mant = str.substring(0, expPos);\n+                mant = str;\n             } else {\n                 mant = str;\n             }\n@@ -570,7 +573,8 @@\n                 } catch (NumberFormatException nfe) {\n                     // ignore the bad number\n                 }\n-                return createBigInteger(str);\n+                exp = null;\n+\t\t\t\treturn createBigInteger(str);\n \n             } else {\n                 //Must be a float,double,BigDec\n@@ -584,7 +588,8 @@\n                     // ignore the bad number\n                 }\n                 try {\n-                    Double d = createDouble(str);\n+                    mant = str;\n+\t\t\t\t\tDouble d = createDouble(str);\n                     if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                         return d;\n                     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 478, 
          "faulty": "if (expPos > -1) {\n  if (expPos < decPos) {\n    throw new NumberFormatException(str + \" is not a valid number.\");\n  }\n  dec=str.substring(decPos + 1,expPos);\n}\n else {\n  dec=str.substring(decPos + 1);\n}", 
          "type": "InsertBefore", 
          "seed": "exp=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 489, 
          "faulty": "mant=str.substring(0,expPos);", 
          "type": "Replace", 
          "seed": "mant=str;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:16:07.026060969 -0500\n+++ /tmp/Arja_Defects4J_Lang_27/patches_whwa/Patch_182/patched/tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:17:58.574892606 -0500\n@@ -475,7 +475,8 @@\n \n         if (decPos > -1) {\n \n-            if (expPos > -1) {\n+            exp = null;\n+\t\t\tif (expPos > -1) {\n                 if (expPos < decPos) {\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n                 }\n@@ -486,7 +487,7 @@\n             mant = str.substring(0, decPos);\n         } else {\n             if (expPos > -1) {\n-                mant = str.substring(0, expPos);\n+                mant = str;\n             } else {\n                 mant = str;\n             }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 489, 
          "faulty": "mant=str.substring(0,expPos);", 
          "type": "Replace", 
          "seed": "mant=str;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 469, 
          "faulty": "char lastChar=str.charAt(str.length() - 1);", 
          "type": "InsertBefore", 
          "seed": "if (str == null) {\n  return null;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:16:07.026060969 -0500\n+++ /tmp/Arja_Defects4J_Lang_27/patches_whwa/Patch_677/patched/tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:19:52.371741083 -0500\n@@ -466,7 +466,10 @@\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n             return createInteger(str);\n         }   \n-        char lastChar = str.charAt(str.length() - 1);\n+        if (str == null) {\n+\t\t\treturn null;\n+\t\t}\n+\t\tchar lastChar = str.charAt(str.length() - 1);\n         String mant;\n         String dec;\n         String exp;\n@@ -486,7 +489,7 @@\n             mant = str.substring(0, decPos);\n         } else {\n             if (expPos > -1) {\n-                mant = str.substring(0, expPos);\n+                mant = str;\n             } else {\n                 mant = str;\n             }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 473, 
          "faulty": "int decPos=str.indexOf('.');", 
          "type": "InsertBefore", 
          "seed": "dec=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 489, 
          "faulty": "mant=str.substring(0,expPos);", 
          "type": "Replace", 
          "seed": "mant=str;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:16:07.026060969 -0500\n+++ /tmp/Arja_Defects4J_Lang_27/patches_whwa/Patch_756/patched/tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:20:11.899886696 -0500\n@@ -470,7 +470,8 @@\n         String mant;\n         String dec;\n         String exp;\n-        int decPos = str.indexOf('.');\n+        dec = null;\n+\t\tint decPos = str.indexOf('.');\n         int expPos = str.indexOf('e') + str.indexOf('E') + 1;\n \n         if (decPos > -1) {\n@@ -486,7 +487,7 @@\n             mant = str.substring(0, decPos);\n         } else {\n             if (expPos > -1) {\n-                mant = str.substring(0, expPos);\n+                mant = str;\n             } else {\n                 mant = str;\n             }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 561, 
          "faulty": "if (dec == null && exp == null) {\n  try {\n    return createInteger(str);\n  }\n catch (  NumberFormatException nfe) {\n  }\n  try {\n    return createLong(str);\n  }\n catch (  NumberFormatException nfe) {\n  }\n  return createBigInteger(str);\n}\n else {\n  boolean allZeros=isAllZeros(mant) && isAllZeros(exp);\n  try {\n    Float f=createFloat(str);\n    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n      return f;\n    }\n  }\n catch (  NumberFormatException nfe) {\n  }\n  try {\n    Double d=createDouble(str);\n    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n      return d;\n    }\n  }\n catch (  NumberFormatException nfe) {\n  }\n  return createBigDecimal(str);\n}", 
          "type": "InsertBefore", 
          "seed": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n  return createInteger(str);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 489, 
          "faulty": "mant=str.substring(0,expPos);", 
          "type": "Replace", 
          "seed": "mant=str;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 569, 
          "faulty": "return createLong(str);", 
          "type": "Replace", 
          "seed": "if (!Character.isDigit(lastChar) && lastChar != '.') {\n  if (expPos > -1 && expPos < str.length() - 1) {\n    exp=str.substring(expPos + 1,str.length() - 1);\n  }\n else {\n    exp=null;\n  }\n  String numeric=str.substring(0,str.length() - 1);\n  boolean allZeros=isAllZeros(mant) && isAllZeros(exp);\nswitch (lastChar) {\ncase 'l':\ncase 'L':\n    if (dec == null && exp == null && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {\n      try {\n        return createLong(numeric);\n      }\n catch (      NumberFormatException nfe) {\n      }\n      return createBigInteger(numeric);\n    }\n  throw new NumberFormatException(str + \" is not a valid number.\");\ncase 'f':\ncase 'F':\ntry {\n  Float f=NumberUtils.createFloat(numeric);\n  if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n    return f;\n  }\n}\n catch (NumberFormatException nfe) {\n}\ncase 'd':\ncase 'D':\ntry {\nDouble d=NumberUtils.createDouble(numeric);\nif (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {\n  return d;\n}\n}\n catch (NumberFormatException nfe) {\n}\ntry {\nreturn createBigDecimal(numeric);\n}\n catch (NumberFormatException e) {\n}\ndefault :\nthrow new NumberFormatException(str + \" is not a valid number.\");\n}\n}\n else {\nif (expPos > -1 && expPos < str.length() - 1) {\nexp=str.substring(expPos + 1,str.length());\n}\n else {\nexp=null;\n}\nif (dec == null && exp == null) {\ntry {\nreturn createInteger(str);\n}\n catch (NumberFormatException nfe) {\n}\ntry {\nreturn createLong(str);\n}\n catch (NumberFormatException nfe) {\n}\nreturn createBigInteger(str);\n}\n else {\nboolean allZeros=isAllZeros(mant) && isAllZeros(exp);\ntry {\nFloat f=createFloat(str);\nif (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\nreturn f;\n}\n}\n catch (NumberFormatException nfe) {\n}\ntry {\nDouble d=createDouble(str);\nif (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\nreturn d;\n}\n}\n catch (NumberFormatException nfe) {\n}\nreturn createBigDecimal(str);\n}\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:16:07.026060969 -0500\n+++ /tmp/Arja_Defects4J_Lang_27/patches_whwa/Patch_276/patched/tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:18:19.715050222 -0500\n@@ -486,7 +486,7 @@\n             mant = str.substring(0, decPos);\n         } else {\n             if (expPos > -1) {\n-                mant = str.substring(0, expPos);\n+                mant = str;\n             } else {\n                 mant = str;\n             }\n@@ -558,7 +558,10 @@\n             } else {\n                 exp = null;\n             }\n-            if (dec == null && exp == null) {\n+            if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n+\t\t\t\treturn createInteger(str);\n+\t\t\t}\n+\t\t\tif (dec == null && exp == null) {\n                 //Must be an int,long,bigint\n                 try {\n                     return createInteger(str);\n@@ -566,7 +569,91 @@\n                     // ignore the bad number\n                 }\n                 try {\n-                    return createLong(str);\n+                    if (!Character.isDigit(lastChar) && lastChar != '.') {\n+\t\t\t\t\t\tif (expPos > -1 && expPos < str.length() - 1) {\n+\t\t\t\t\t\t\texp = str.substring(expPos + 1, str.length() - 1);\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\texp = null;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tString numeric = str.substring(0, str.length() - 1);\n+\t\t\t\t\t\tboolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n+\t\t\t\t\t\tswitch (lastChar) {\n+\t\t\t\t\t\tcase 'l':\n+\t\t\t\t\t\tcase 'L':\n+\t\t\t\t\t\t\tif (dec == null\n+\t\t\t\t\t\t\t\t\t&& exp == null\n+\t\t\t\t\t\t\t\t\t&& (numeric.charAt(0) == '-'\n+\t\t\t\t\t\t\t\t\t\t\t&& isDigits(numeric.substring(1)) || isDigits(numeric))) {\n+\t\t\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\t\t\treturn createLong(numeric);\n+\t\t\t\t\t\t\t\t} catch (NumberFormatException nfe) {\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\treturn createBigInteger(numeric);\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tthrow new NumberFormatException(str\n+\t\t\t\t\t\t\t\t\t+ \" is not a valid number.\");\n+\t\t\t\t\t\tcase 'f':\n+\t\t\t\t\t\tcase 'F':\n+\t\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\t\tFloat f = NumberUtils.createFloat(numeric);\n+\t\t\t\t\t\t\t\tif (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n+\t\t\t\t\t\t\t\t\treturn f;\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t} catch (NumberFormatException nfe) {\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\tcase 'd':\n+\t\t\t\t\t\tcase 'D':\n+\t\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\t\tDouble d = NumberUtils.createDouble(numeric);\n+\t\t\t\t\t\t\t\tif (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {\n+\t\t\t\t\t\t\t\t\treturn d;\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t} catch (NumberFormatException nfe) {\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\t\treturn createBigDecimal(numeric);\n+\t\t\t\t\t\t\t} catch (NumberFormatException e) {\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\tdefault:\n+\t\t\t\t\t\t\tthrow new NumberFormatException(str\n+\t\t\t\t\t\t\t\t\t+ \" is not a valid number.\");\n+\t\t\t\t\t\t}\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tif (expPos > -1 && expPos < str.length() - 1) {\n+\t\t\t\t\t\t\texp = str.substring(expPos + 1, str.length());\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\texp = null;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tif (dec == null && exp == null) {\n+\t\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\t\treturn createInteger(str);\n+\t\t\t\t\t\t\t} catch (NumberFormatException nfe) {\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\t\treturn createLong(str);\n+\t\t\t\t\t\t\t} catch (NumberFormatException nfe) {\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\treturn createBigInteger(str);\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tboolean allZeros = isAllZeros(mant)\n+\t\t\t\t\t\t\t\t\t&& isAllZeros(exp);\n+\t\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\t\tFloat f = createFloat(str);\n+\t\t\t\t\t\t\t\tif (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n+\t\t\t\t\t\t\t\t\treturn f;\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t} catch (NumberFormatException nfe) {\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\t\tDouble d = createDouble(str);\n+\t\t\t\t\t\t\t\tif (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n+\t\t\t\t\t\t\t\t\treturn d;\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t} catch (NumberFormatException nfe) {\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\treturn createBigDecimal(str);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n                 } catch (NumberFormatException nfe) {\n                     // ignore the bad number\n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 536, 
          "faulty": "Double d=NumberUtils.createDouble(numeric);", 
          "type": "Replace", 
          "seed": "Double d=createDouble(str);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 489, 
          "faulty": "mant=str.substring(0,expPos);", 
          "type": "Replace", 
          "seed": "mant=str;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:16:07.026060969 -0500\n+++ /tmp/Arja_Defects4J_Lang_27/patches_whwa/Patch_266/patched/tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:18:17.647034804 -0500\n@@ -486,7 +486,7 @@\n             mant = str.substring(0, decPos);\n         } else {\n             if (expPos > -1) {\n-                mant = str.substring(0, expPos);\n+                mant = str;\n             } else {\n                 mant = str;\n             }\n@@ -533,7 +533,7 @@\n                 case 'd' :\n                 case 'D' :\n                     try {\n-                        Double d = NumberUtils.createDouble(numeric);\n+                        Double d = createDouble(str);\n                         if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {\n                             return d;\n                         }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 454, 
          "faulty": "return null;", 
          "type": "Replace", 
          "seed": "if (str == null) {\n  return null;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 489, 
          "faulty": "mant=str.substring(0,expPos);", 
          "type": "Replace", 
          "seed": "mant=str;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 573, 
          "faulty": "return createBigInteger(str);", 
          "type": "InsertBefore", 
          "seed": "exp=null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:16:07.026060969 -0500\n+++ /tmp/Arja_Defects4J_Lang_27/patches_whwa/Patch_1397/patched/tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:22:36.248963103 -0500\n@@ -451,7 +451,9 @@\n      */\n     public static Number createNumber(String str) throws NumberFormatException {\n         if (str == null) {\n-            return null;\n+            if (str == null) {\n+\t\t\t\treturn null;\n+\t\t\t}\n         }\n         if (StringUtils.isBlank(str)) {\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n@@ -486,7 +488,7 @@\n             mant = str.substring(0, decPos);\n         } else {\n             if (expPos > -1) {\n-                mant = str.substring(0, expPos);\n+                mant = str;\n             } else {\n                 mant = str;\n             }\n@@ -570,7 +572,8 @@\n                 } catch (NumberFormatException nfe) {\n                     // ignore the bad number\n                 }\n-                return createBigInteger(str);\n+                exp = null;\n+\t\t\t\treturn createBigInteger(str);\n \n             } else {\n                 //Must be a float,double,BigDec\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 559, 
          "faulty": "exp=null;", 
          "type": "InsertBefore", 
          "seed": "if (str == null) {\n  throw new IllegalArgumentException(\"The string must not be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 489, 
          "faulty": "mant=str.substring(0,expPos);", 
          "type": "Replace", 
          "seed": "mant=str;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:16:07.026060969 -0500\n+++ /tmp/Arja_Defects4J_Lang_27/patches_whwa/Patch_713/patched/tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:20:02.775818661 -0500\n@@ -486,7 +486,7 @@\n             mant = str.substring(0, decPos);\n         } else {\n             if (expPos > -1) {\n-                mant = str.substring(0, expPos);\n+                mant = str;\n             } else {\n                 mant = str;\n             }\n@@ -556,7 +556,11 @@\n             if (expPos > -1 && expPos < str.length() - 1) {\n                 exp = str.substring(expPos + 1, str.length());\n             } else {\n-                exp = null;\n+                if (str == null) {\n+\t\t\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\t\t\"The string must not be null\");\n+\t\t\t\t}\n+\t\t\t\texp = null;\n             }\n             if (dec == null && exp == null) {\n                 //Must be an int,long,bigint\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 522, 
          "faulty": "Float f=NumberUtils.createFloat(numeric);", 
          "type": "InsertBefore", 
          "seed": "dec=str.substring(decPos + 1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 536, 
          "faulty": "Double d=NumberUtils.createDouble(numeric);", 
          "type": "Replace", 
          "seed": "Double d=createDouble(str);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 489, 
          "faulty": "mant=str.substring(0,expPos);", 
          "type": "Replace", 
          "seed": "mant=str;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:16:07.026060969 -0500\n+++ /tmp/Arja_Defects4J_Lang_27/patches_whwa/Patch_406/patched/tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:18:47.083254278 -0500\n@@ -486,7 +486,7 @@\n             mant = str.substring(0, decPos);\n         } else {\n             if (expPos > -1) {\n-                mant = str.substring(0, expPos);\n+                mant = str;\n             } else {\n                 mant = str;\n             }\n@@ -519,7 +519,8 @@\n                 case 'f' :\n                 case 'F' :\n                     try {\n-                        Float f = NumberUtils.createFloat(numeric);\n+                        dec = str.substring(decPos + 1);\n+\t\t\t\t\t\tFloat f = NumberUtils.createFloat(numeric);\n                         if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                             //If it's too big for a float or the float value = 0 and the string\n                             //has non-zeros in it, then float does not have the precision we want\n@@ -533,7 +534,7 @@\n                 case 'd' :\n                 case 'D' :\n                     try {\n-                        Double d = NumberUtils.createDouble(numeric);\n+                        Double d = createDouble(str);\n                         if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {\n                             return d;\n                         }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 489, 
          "faulty": "mant=str.substring(0,expPos);", 
          "type": "Replace", 
          "seed": "mant=str;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 526, 
          "faulty": "return f;", 
          "type": "Replace", 
          "seed": "return Float.parseFloat(str);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:16:07.026060969 -0500\n+++ /tmp/Arja_Defects4J_Lang_27/patches_whwa/Patch_1361/patched/tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:22:27.816900222 -0500\n@@ -486,7 +486,7 @@\n             mant = str.substring(0, decPos);\n         } else {\n             if (expPos > -1) {\n-                mant = str.substring(0, expPos);\n+                mant = str;\n             } else {\n                 mant = str;\n             }\n@@ -521,9 +521,7 @@\n                     try {\n                         Float f = NumberUtils.createFloat(numeric);\n                         if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n-                            //If it's too big for a float or the float value = 0 and the string\n-                            //has non-zeros in it, then float does not have the precision we want\n-                            return f;\n+                            return Float.parseFloat(str);\n                         }\n \n                     } catch (NumberFormatException nfe) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 489, 
          "faulty": "mant=str.substring(0,expPos);", 
          "type": "Replace", 
          "seed": "mant=str;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 573, 
          "faulty": "return createBigInteger(str);", 
          "type": "Replace", 
          "seed": "return createBigInteger(str);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:16:07.026060969 -0500\n+++ /tmp/Arja_Defects4J_Lang_27/patches_whwa/Patch_425/patched/tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:18:50.387278913 -0500\n@@ -486,7 +486,7 @@\n             mant = str.substring(0, decPos);\n         } else {\n             if (expPos > -1) {\n-                mant = str.substring(0, expPos);\n+                mant = str;\n             } else {\n                 mant = str;\n             }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 459, 
          "faulty": "if (str.startsWith(\"--\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n  return createInteger(str);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 489, 
          "faulty": "mant=str.substring(0,expPos);", 
          "type": "Replace", 
          "seed": "mant=str;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:16:07.026060969 -0500\n+++ /tmp/Arja_Defects4J_Lang_27/patches_whwa/Patch_433/patched/tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:18:51.959290634 -0500\n@@ -456,13 +456,6 @@\n         if (StringUtils.isBlank(str)) {\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n-        if (str.startsWith(\"--\")) {\n-            // this is protection for poorness in java.lang.BigDecimal.\n-            // it accepts this as a legal value, but it does not appear \n-            // to be in specification of class. OS X Java parses it to \n-            // a wrong value.\n-            return null;\n-        }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n             return createInteger(str);\n         }   \n@@ -486,7 +479,7 @@\n             mant = str.substring(0, decPos);\n         } else {\n             if (expPos > -1) {\n-                mant = str.substring(0, expPos);\n+                mant = str;\n             } else {\n                 mant = str;\n             }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 536, 
          "faulty": "Double d=NumberUtils.createDouble(numeric);", 
          "type": "InsertBefore", 
          "seed": "exp=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 489, 
          "faulty": "mant=str.substring(0,expPos);", 
          "type": "Replace", 
          "seed": "mant=str;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:16:07.026060969 -0500\n+++ /tmp/Arja_Defects4J_Lang_27/patches_whwa/Patch_440/patched/tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:18:53.019298537 -0500\n@@ -486,7 +486,7 @@\n             mant = str.substring(0, decPos);\n         } else {\n             if (expPos > -1) {\n-                mant = str.substring(0, expPos);\n+                mant = str;\n             } else {\n                 mant = str;\n             }\n@@ -533,7 +533,8 @@\n                 case 'd' :\n                 case 'D' :\n                     try {\n-                        Double d = NumberUtils.createDouble(numeric);\n+                        exp = null;\n+\t\t\t\t\t\tDouble d = NumberUtils.createDouble(numeric);\n                         if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {\n                             return d;\n                         }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 544, 
          "faulty": "return createBigDecimal(numeric);", 
          "type": "InsertBefore", 
          "seed": "if (str == null) {\n  return null;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 489, 
          "faulty": "mant=str.substring(0,expPos);", 
          "type": "Replace", 
          "seed": "mant=str;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 587, 
          "faulty": "Double d=createDouble(str);", 
          "type": "InsertBefore", 
          "seed": "mant=str;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:16:07.026060969 -0500\n+++ /tmp/Arja_Defects4J_Lang_27/patches_whwa/Patch_513/patched/tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:19:09.599422160 -0500\n@@ -486,7 +486,7 @@\n             mant = str.substring(0, decPos);\n         } else {\n             if (expPos > -1) {\n-                mant = str.substring(0, expPos);\n+                mant = str;\n             } else {\n                 mant = str;\n             }\n@@ -541,7 +541,10 @@\n                         // ignore the bad number\n                     }\n                     try {\n-                        return createBigDecimal(numeric);\n+                        if (str == null) {\n+\t\t\t\t\t\t\treturn null;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\treturn createBigDecimal(numeric);\n                     } catch (NumberFormatException e) {\n                         // ignore the bad number\n                     }\n@@ -584,7 +587,8 @@\n                     // ignore the bad number\n                 }\n                 try {\n-                    Double d = createDouble(str);\n+                    mant = str;\n+\t\t\t\t\tDouble d = createDouble(str);\n                     if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                         return d;\n                     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 459, 
          "faulty": "if (str.startsWith(\"--\")) {\n  return null;\n}", 
          "type": "InsertBefore", 
          "seed": "if (StringUtils.isBlank(str)) {\n  throw new NumberFormatException(\"A blank string is not a valid number\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 489, 
          "faulty": "mant=str.substring(0,expPos);", 
          "type": "Replace", 
          "seed": "mant=str;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:16:07.026060969 -0500\n+++ /tmp/Arja_Defects4J_Lang_27/patches_whwa/Patch_157/patched/tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:17:53.094851749 -0500\n@@ -456,7 +456,11 @@\n         if (StringUtils.isBlank(str)) {\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n-        if (str.startsWith(\"--\")) {\n+        if (StringUtils.isBlank(str)) {\n+\t\t\tthrow new NumberFormatException(\n+\t\t\t\t\t\"A blank string is not a valid number\");\n+\t\t}\n+\t\tif (str.startsWith(\"--\")) {\n             // this is protection for poorness in java.lang.BigDecimal.\n             // it accepts this as a legal value, but it does not appear \n             // to be in specification of class. OS X Java parses it to \n@@ -486,7 +490,7 @@\n             mant = str.substring(0, decPos);\n         } else {\n             if (expPos > -1) {\n-                mant = str.substring(0, expPos);\n+                mant = str;\n             } else {\n                 mant = str;\n             }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 561, 
          "faulty": "if (dec == null && exp == null) {\n  try {\n    return createInteger(str);\n  }\n catch (  NumberFormatException nfe) {\n  }\n  try {\n    return createLong(str);\n  }\n catch (  NumberFormatException nfe) {\n  }\n  return createBigInteger(str);\n}\n else {\n  boolean allZeros=isAllZeros(mant) && isAllZeros(exp);\n  try {\n    Float f=createFloat(str);\n    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n      return f;\n    }\n  }\n catch (  NumberFormatException nfe) {\n  }\n  try {\n    Double d=createDouble(str);\n    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n      return d;\n    }\n  }\n catch (  NumberFormatException nfe) {\n  }\n  return createBigDecimal(str);\n}", 
          "type": "InsertBefore", 
          "seed": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n  return createInteger(str);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 489, 
          "faulty": "mant=str.substring(0,expPos);", 
          "type": "Replace", 
          "seed": "mant=str;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 469, 
          "faulty": "char lastChar=str.charAt(str.length() - 1);", 
          "type": "InsertBefore", 
          "seed": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n  return createInteger(str);\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:16:07.026060969 -0500\n+++ /tmp/Arja_Defects4J_Lang_27/patches_whwa/Patch_511/patched/tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:19:09.383420550 -0500\n@@ -466,7 +466,10 @@\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n             return createInteger(str);\n         }   \n-        char lastChar = str.charAt(str.length() - 1);\n+        if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n+\t\t\treturn createInteger(str);\n+\t\t}\n+\t\tchar lastChar = str.charAt(str.length() - 1);\n         String mant;\n         String dec;\n         String exp;\n@@ -486,7 +489,7 @@\n             mant = str.substring(0, decPos);\n         } else {\n             if (expPos > -1) {\n-                mant = str.substring(0, expPos);\n+                mant = str;\n             } else {\n                 mant = str;\n             }\n@@ -558,7 +561,10 @@\n             } else {\n                 exp = null;\n             }\n-            if (dec == null && exp == null) {\n+            if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n+\t\t\t\treturn createInteger(str);\n+\t\t\t}\n+\t\t\tif (dec == null && exp == null) {\n                 //Must be an int,long,bigint\n                 try {\n                     return createInteger(str);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 579, 
          "faulty": "Float f=createFloat(str);", 
          "type": "InsertBefore", 
          "seed": "dec=str.substring(decPos + 1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 489, 
          "faulty": "mant=str.substring(0,expPos);", 
          "type": "Replace", 
          "seed": "mant=str;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:16:07.026060969 -0500\n+++ /tmp/Arja_Defects4J_Lang_27/patches_whwa/Patch_1531/patched/tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:23:06.013185070 -0500\n@@ -486,7 +486,7 @@\n             mant = str.substring(0, decPos);\n         } else {\n             if (expPos > -1) {\n-                mant = str.substring(0, expPos);\n+                mant = str;\n             } else {\n                 mant = str;\n             }\n@@ -576,7 +576,8 @@\n                 //Must be a float,double,BigDec\n                 boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n                 try {\n-                    Float f = createFloat(str);\n+                    dec = str.substring(decPos + 1);\n+\t\t\t\t\tFloat f = createFloat(str);\n                     if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                         return f;\n                     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 561, 
          "faulty": "if (dec == null && exp == null) {\n  try {\n    return createInteger(str);\n  }\n catch (  NumberFormatException nfe) {\n  }\n  try {\n    return createLong(str);\n  }\n catch (  NumberFormatException nfe) {\n  }\n  return createBigInteger(str);\n}\n else {\n  boolean allZeros=isAllZeros(mant) && isAllZeros(exp);\n  try {\n    Float f=createFloat(str);\n    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n      return f;\n    }\n  }\n catch (  NumberFormatException nfe) {\n  }\n  try {\n    Double d=createDouble(str);\n    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n      return d;\n    }\n  }\n catch (  NumberFormatException nfe) {\n  }\n  return createBigDecimal(str);\n}", 
          "type": "InsertBefore", 
          "seed": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n  return createInteger(str);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 522, 
          "faulty": "Float f=NumberUtils.createFloat(numeric);", 
          "type": "Replace", 
          "seed": "Float f=createFloat(str);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 489, 
          "faulty": "mant=str.substring(0,expPos);", 
          "type": "Replace", 
          "seed": "mant=str;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:16:07.026060969 -0500\n+++ /tmp/Arja_Defects4J_Lang_27/patches_whwa/Patch_1022/patched/tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:21:12.036335116 -0500\n@@ -486,7 +486,7 @@\n             mant = str.substring(0, decPos);\n         } else {\n             if (expPos > -1) {\n-                mant = str.substring(0, expPos);\n+                mant = str;\n             } else {\n                 mant = str;\n             }\n@@ -519,7 +519,7 @@\n                 case 'f' :\n                 case 'F' :\n                     try {\n-                        Float f = NumberUtils.createFloat(numeric);\n+                        Float f = createFloat(str);\n                         if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                             //If it's too big for a float or the float value = 0 and the string\n                             //has non-zeros in it, then float does not have the precision we want\n@@ -558,7 +558,10 @@\n             } else {\n                 exp = null;\n             }\n-            if (dec == null && exp == null) {\n+            if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n+\t\t\t\treturn createInteger(str);\n+\t\t\t}\n+\t\t\tif (dec == null && exp == null) {\n                 //Must be an int,long,bigint\n                 try {\n                     return createInteger(str);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 489, 
          "faulty": "mant=str.substring(0,expPos);", 
          "type": "Replace", 
          "seed": "return Float.valueOf(str);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:16:07.026060969 -0500\n+++ /tmp/Arja_Defects4J_Lang_27/patches_whwa/Patch_851/patched/tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:20:32.408039616 -0500\n@@ -486,7 +486,7 @@\n             mant = str.substring(0, decPos);\n         } else {\n             if (expPos > -1) {\n-                mant = str.substring(0, expPos);\n+                return Float.valueOf(str);\n             } else {\n                 mant = str;\n             }\n\n\n"
    }
  ]
}