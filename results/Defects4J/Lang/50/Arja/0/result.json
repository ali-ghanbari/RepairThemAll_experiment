{
  "repair_end": "2018-12-02 09:04:53.798987", 
  "repair_begin": "2018-12-02 08:51:26.225563", 
  "patches": [
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:51:18.813128272 -0500\n+++ /tmp/Arja_Defects4J_Lang_50/patches_65h7/Patch_697/patched/tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:57:55.914492650 -0500\n@@ -278,9 +278,9 @@\n      */\n     public static synchronized FastDateFormat getDateInstance(int style, TimeZone timeZone, Locale locale) {\n         Object key = new Integer(style);\n-        if (timeZone != null) {\n-            key = new Pair(key, timeZone);\n-        }\n+        if (locale == null) {\n+\t\t\tlocale = Locale.getDefault();\n+\t\t}\n \n         if (locale != null) {\n             key = new Pair(key, locale);\n@@ -476,7 +476,6 @@\n                         locale);\n                 String pattern = formatter.toPattern();\n                 format = getInstance(pattern, timeZone, locale);\n-                cDateTimeInstanceCache.put(key, format);\n \n             } catch (ClassCastException ex) {\n                 throw new IllegalArgumentException(\"No date time pattern for locale: \" + locale);\n@@ -672,7 +671,12 @@\n                 if (tokenLen >= 4) {\n                     rule = new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.LONG);\n                 } else {\n-                    rule = new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.SHORT);\n+                    if (tokenLen == 2) {\n+\t\t\t\t\t\trule = TwoDigitMonthField.INSTANCE;\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\trule = UnpaddedMonthField.INSTANCE;\n+\t\t\t\t\t}\n+\t\t\t\t\trule = new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.SHORT);\n                 }\n                 break;\n             case 'Z': // time zone (value)\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 479, 
          "faulty": "cDateTimeInstanceCache.put(key,format);", 
          "type": "Delete", 
          "seed": "if (pattern == null) {\n  throw new IllegalArgumentException(\"The pattern must not be null\");\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 675, 
          "faulty": "rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);", 
          "type": "InsertBefore", 
          "seed": "if (tokenLen == 2) {\n  rule=TwoDigitMonthField.INSTANCE;\n}\n else {\n  rule=UnpaddedMonthField.INSTANCE;\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 281, 
          "faulty": "if (timeZone != null) {\n  key=new Pair(key,timeZone);\n}", 
          "type": "Replace", 
          "seed": "if (locale == null) {\n  locale=Locale.getDefault();\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:51:18.813128272 -0500\n+++ /tmp/Arja_Defects4J_Lang_50/patches_65h7/Patch_1087/patched/tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 03:00:18.102979804 -0500\n@@ -287,7 +287,8 @@\n         }\n \n \n-        FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n+        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache\n+\t\t\t\t.get(key);\n         if (format == null) {\n             if (locale == null) {\n                 locale = Locale.getDefault();\n@@ -458,7 +459,10 @@\n     public static synchronized FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, TimeZone timeZone,\n             Locale locale) {\n \n-        Object key = new Pair(new Integer(dateStyle), new Integer(timeStyle));\n+        if (locale == null) {\n+\t\t\t\t\tlocale = Locale.getDefault();\n+\t\t\t\t}\n+\t\tObject key = new Pair(new Integer(dateStyle), new Integer(timeStyle));\n         if (timeZone != null) {\n             key = new Pair(key, timeZone);\n         }\n@@ -476,7 +480,10 @@\n                         locale);\n                 String pattern = formatter.toPattern();\n                 format = getInstance(pattern, timeZone, locale);\n-                cDateTimeInstanceCache.put(key, format);\n+                if (pattern == null) {\n+\t\t\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\t\t\"The pattern must not be null\");\n+\t\t\t\t}\n \n             } catch (ClassCastException ex) {\n                 throw new IllegalArgumentException(\"No date time pattern for locale: \" + locale);\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 461, 
          "faulty": "Object key=new Pair(new Integer(dateStyle),new Integer(timeStyle));", 
          "type": "InsertBefore", 
          "seed": "if (locale == null) {\n  locale=Locale.getDefault();\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 290, 
          "faulty": "FastDateFormat format=(FastDateFormat)cDateInstanceCache.get(key);", 
          "type": "Replace", 
          "seed": "FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 479, 
          "faulty": "cDateTimeInstanceCache.put(key,format);", 
          "type": "Replace", 
          "seed": "if (pattern == null) {\n  throw new IllegalArgumentException(\"The pattern must not be null\");\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:51:18.813128272 -0500\n+++ /tmp/Arja_Defects4J_Lang_50/patches_65h7/Patch_710/patched/tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:57:59.970506556 -0500\n@@ -277,7 +277,10 @@\n      *  pattern defined\n      */\n     public static synchronized FastDateFormat getDateInstance(int style, TimeZone timeZone, Locale locale) {\n-        Object key = new Integer(style);\n+        if (cDefaultPattern == null) {\n+\t\t\tcDefaultPattern = new SimpleDateFormat().toPattern();\n+\t\t}\n+\t\tObject key = new Integer(style);\n         if (timeZone != null) {\n             key = new Pair(key, timeZone);\n         }\n@@ -287,7 +290,8 @@\n         }\n \n \n-        FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n+        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache\n+\t\t\t\t.get(key);\n         if (format == null) {\n             if (locale == null) {\n                 locale = Locale.getDefault();\n@@ -405,7 +409,7 @@\n      */\n     public static FastDateFormat getDateTimeInstance(\n             int dateStyle, int timeStyle) {\n-        return getDateTimeInstance(dateStyle, timeStyle, null, null);\n+        return getInstance(getDefaultPattern(), null, null);\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 280, 
          "faulty": "Object key=new Integer(style);", 
          "type": "InsertBefore", 
          "seed": "if (cDefaultPattern == null) {\n  cDefaultPattern=new SimpleDateFormat().toPattern();\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 408, 
          "faulty": "return getDateTimeInstance(dateStyle,timeStyle,null,null);", 
          "type": "Replace", 
          "seed": "return getInstance(getDefaultPattern(),null,null);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 290, 
          "faulty": "FastDateFormat format=(FastDateFormat)cDateInstanceCache.get(key);", 
          "type": "Replace", 
          "seed": "FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:51:18.813128272 -0500\n+++ /tmp/Arja_Defects4J_Lang_50/patches_65h7/Patch_701/patched/tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:57:56.746495503 -0500\n@@ -277,7 +277,10 @@\n      *  pattern defined\n      */\n     public static synchronized FastDateFormat getDateInstance(int style, TimeZone timeZone, Locale locale) {\n-        Object key = new Integer(style);\n+        if (cDefaultPattern == null) {\n+\t\t\tcDefaultPattern = new SimpleDateFormat().toPattern();\n+\t\t}\n+\t\tObject key = new Integer(style);\n         if (timeZone != null) {\n             key = new Pair(key, timeZone);\n         }\n@@ -287,7 +290,8 @@\n         }\n \n \n-        FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n+        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache\n+\t\t\t\t.get(key);\n         if (format == null) {\n             if (locale == null) {\n                 locale = Locale.getDefault();\n@@ -458,7 +462,10 @@\n     public static synchronized FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, TimeZone timeZone,\n             Locale locale) {\n \n-        Object key = new Pair(new Integer(dateStyle), new Integer(timeStyle));\n+        if (locale == null) {\n+\t\t\t\t\tlocale = Locale.getDefault();\n+\t\t\t\t}\n+\t\tObject key = new Pair(new Integer(dateStyle), new Integer(timeStyle));\n         if (timeZone != null) {\n             key = new Pair(key, timeZone);\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 280, 
          "faulty": "Object key=new Integer(style);", 
          "type": "InsertBefore", 
          "seed": "if (cDefaultPattern == null) {\n  cDefaultPattern=new SimpleDateFormat().toPattern();\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 461, 
          "faulty": "Object key=new Pair(new Integer(dateStyle),new Integer(timeStyle));", 
          "type": "InsertBefore", 
          "seed": "if (locale == null) {\n  locale=Locale.getDefault();\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 290, 
          "faulty": "FastDateFormat format=(FastDateFormat)cDateInstanceCache.get(key);", 
          "type": "Replace", 
          "seed": "FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:51:18.813128272 -0500\n+++ /tmp/Arja_Defects4J_Lang_50/patches_65h7/Patch_650/patched/tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:57:36.946427615 -0500\n@@ -287,7 +287,8 @@\n         }\n \n \n-        FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n+        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache\n+\t\t\t\t.get(key);\n         if (format == null) {\n             if (locale == null) {\n                 locale = Locale.getDefault();\n@@ -405,7 +406,7 @@\n      */\n     public static FastDateFormat getDateTimeInstance(\n             int dateStyle, int timeStyle) {\n-        return getDateTimeInstance(dateStyle, timeStyle, null, null);\n+        return getInstance(getDefaultPattern(), null, null);\n     }\n     \n     /**\n@@ -458,7 +459,10 @@\n     public static synchronized FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, TimeZone timeZone,\n             Locale locale) {\n \n-        Object key = new Pair(new Integer(dateStyle), new Integer(timeStyle));\n+        if (locale == null) {\n+\t\t\t\t\tlocale = Locale.getDefault();\n+\t\t\t\t}\n+\t\tObject key = new Pair(new Integer(dateStyle), new Integer(timeStyle));\n         if (timeZone != null) {\n             key = new Pair(key, timeZone);\n         }\n@@ -469,7 +473,23 @@\n         FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key);\n         if (format == null) {\n             if (locale == null) {\n-                locale = Locale.getDefault();\n+                if (format == null) {\n+\t\t\t\t\tif (locale == null) {\n+\t\t\t\t\t\tlocale = Locale.getDefault();\n+\t\t\t\t\t}\n+\t\t\t\t\ttry {\n+\t\t\t\t\t\tSimpleDateFormat formatter = (SimpleDateFormat) DateFormat\n+\t\t\t\t\t\t\t\t.getDateTimeInstance(dateStyle, timeStyle,\n+\t\t\t\t\t\t\t\t\t\tlocale);\n+\t\t\t\t\t\tString pattern = formatter.toPattern();\n+\t\t\t\t\t\tformat = getInstance(pattern, timeZone, locale);\n+\t\t\t\t\t\tcDateTimeInstanceCache.put(key, format);\n+\t\t\t\t\t} catch (ClassCastException ex) {\n+\t\t\t\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\t\t\t\"No date time pattern for locale: \" + locale);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tlocale = Locale.getDefault();\n             }\n             try {\n                 SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle,\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 472, 
          "faulty": "locale=Locale.getDefault();", 
          "type": "InsertBefore", 
          "seed": "if (format == null) {\n  if (locale == null) {\n    locale=Locale.getDefault();\n  }\n  try {\n    SimpleDateFormat formatter=(SimpleDateFormat)DateFormat.getDateTimeInstance(dateStyle,timeStyle,locale);\n    String pattern=formatter.toPattern();\n    format=getInstance(pattern,timeZone,locale);\n    cDateTimeInstanceCache.put(key,format);\n  }\n catch (  ClassCastException ex) {\n    throw new IllegalArgumentException(\"No date time pattern for locale: \" + locale);\n  }\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 408, 
          "faulty": "return getDateTimeInstance(dateStyle,timeStyle,null,null);", 
          "type": "Replace", 
          "seed": "return getInstance(getDefaultPattern(),null,null);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 461, 
          "faulty": "Object key=new Pair(new Integer(dateStyle),new Integer(timeStyle));", 
          "type": "InsertBefore", 
          "seed": "if (locale == null) {\n  locale=Locale.getDefault();\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 290, 
          "faulty": "FastDateFormat format=(FastDateFormat)cDateInstanceCache.get(key);", 
          "type": "Replace", 
          "seed": "FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:51:18.813128272 -0500\n+++ /tmp/Arja_Defects4J_Lang_50/patches_65h7/Patch_445/patched/tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:56:16.754152527 -0500\n@@ -287,7 +287,8 @@\n         }\n \n \n-        FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n+        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache\n+\t\t\t\t.get(key);\n         if (format == null) {\n             if (locale == null) {\n                 locale = Locale.getDefault();\n@@ -476,7 +477,6 @@\n                         locale);\n                 String pattern = formatter.toPattern();\n                 format = getInstance(pattern, timeZone, locale);\n-                cDateTimeInstanceCache.put(key, format);\n \n             } catch (ClassCastException ex) {\n                 throw new IllegalArgumentException(\"No date time pattern for locale: \" + locale);\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 290, 
          "faulty": "FastDateFormat format=(FastDateFormat)cDateInstanceCache.get(key);", 
          "type": "Replace", 
          "seed": "FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 479, 
          "faulty": "cDateTimeInstanceCache.put(key,format);", 
          "type": "Delete", 
          "seed": "timeZone=TimeZone.getDefault();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:51:18.813128272 -0500\n+++ /tmp/Arja_Defects4J_Lang_50/patches_65h7/Patch_311/patched/tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:55:25.729977374 -0500\n@@ -231,7 +231,7 @@\n      * @since 2.1\n      */\n     public static FastDateFormat getDateInstance(int style) {\n-        return getDateInstance(style, null, null);\n+        return getInstance(getDefaultPattern(), null, null);\n     }\n \n     /**\n@@ -277,7 +277,10 @@\n      *  pattern defined\n      */\n     public static synchronized FastDateFormat getDateInstance(int style, TimeZone timeZone, Locale locale) {\n-        Object key = new Integer(style);\n+        if (cDefaultPattern == null) {\n+\t\t\tcDefaultPattern = new SimpleDateFormat().toPattern();\n+\t\t}\n+\t\tObject key = new Integer(style);\n         if (timeZone != null) {\n             key = new Pair(key, timeZone);\n         }\n@@ -462,10 +465,6 @@\n         if (timeZone != null) {\n             key = new Pair(key, timeZone);\n         }\n-        if (locale != null) {\n-            key = new Pair(key, locale);\n-        }\n-\n         FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key);\n         if (format == null) {\n             if (locale == null) {\n@@ -476,7 +475,6 @@\n                         locale);\n                 String pattern = formatter.toPattern();\n                 format = getInstance(pattern, timeZone, locale);\n-                cDateTimeInstanceCache.put(key, format);\n \n             } catch (ClassCastException ex) {\n                 throw new IllegalArgumentException(\"No date time pattern for locale: \" + locale);\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 280, 
          "faulty": "Object key=new Integer(style);", 
          "type": "InsertBefore", 
          "seed": "if (cDefaultPattern == null) {\n  cDefaultPattern=new SimpleDateFormat().toPattern();\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 234, 
          "faulty": "return getDateInstance(style,null,null);", 
          "type": "Replace", 
          "seed": "return getInstance(getDefaultPattern(),null,null);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 479, 
          "faulty": "cDateTimeInstanceCache.put(key,format);", 
          "type": "Delete", 
          "seed": "if (pattern == null) {\n  throw new IllegalArgumentException(\"The pattern must not be null\");\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 465, 
          "faulty": "if (locale != null) {\n  key=new Pair(key,locale);\n}", 
          "type": "Delete", 
          "seed": "if (timeZone == null) {\n  timeZone=TimeZone.getDefault();\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:51:18.813128272 -0500\n+++ /tmp/Arja_Defects4J_Lang_50/patches_65h7/Patch_145/patched/tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:54:13.385728863 -0500\n@@ -287,7 +287,8 @@\n         }\n \n \n-        FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n+        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache\n+\t\t\t\t.get(key);\n         if (format == null) {\n             if (locale == null) {\n                 locale = Locale.getDefault();\n@@ -405,7 +406,7 @@\n      */\n     public static FastDateFormat getDateTimeInstance(\n             int dateStyle, int timeStyle) {\n-        return getDateTimeInstance(dateStyle, timeStyle, null, null);\n+        return getInstance(getDefaultPattern(), null, null);\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 408, 
          "faulty": "return getDateTimeInstance(dateStyle,timeStyle,null,null);", 
          "type": "Replace", 
          "seed": "return getInstance(getDefaultPattern(),null,null);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 290, 
          "faulty": "FastDateFormat format=(FastDateFormat)cDateInstanceCache.get(key);", 
          "type": "Replace", 
          "seed": "FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:51:18.813128272 -0500\n+++ /tmp/Arja_Defects4J_Lang_50/patches_65h7/Patch_1783/patched/tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 03:04:37.571867325 -0500\n@@ -287,7 +287,8 @@\n         }\n \n \n-        FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n+        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache\n+\t\t\t\t.get(key);\n         if (format == null) {\n             if (locale == null) {\n                 locale = Locale.getDefault();\n@@ -466,7 +467,7 @@\n             key = new Pair(key, locale);\n         }\n \n-        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key);\n+        FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n         if (format == null) {\n             if (locale == null) {\n                 locale = Locale.getDefault();\n@@ -476,7 +477,6 @@\n                         locale);\n                 String pattern = formatter.toPattern();\n                 format = getInstance(pattern, timeZone, locale);\n-                cDateTimeInstanceCache.put(key, format);\n \n             } catch (ClassCastException ex) {\n                 throw new IllegalArgumentException(\"No date time pattern for locale: \" + locale);\n@@ -1714,10 +1714,6 @@\n          * {@inheritDoc}\n          */\n         public boolean equals(Object obj) {\n-            if (this == obj) {\n-                return true;\n-            }\n-\n             if (!(obj instanceof Pair)) {\n                 return false;\n             }\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 1717, 
          "faulty": "if (this == obj) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "if (obj instanceof FastDateFormat == false) {\n  return false;\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 469, 
          "faulty": "FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);", 
          "type": "Replace", 
          "seed": "FastDateFormat format=(FastDateFormat)cDateInstanceCache.get(key);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 290, 
          "faulty": "FastDateFormat format=(FastDateFormat)cDateInstanceCache.get(key);", 
          "type": "Replace", 
          "seed": "FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 479, 
          "faulty": "cDateTimeInstanceCache.put(key,format);", 
          "type": "Delete", 
          "seed": "timeZone=TimeZone.getDefault();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:51:18.813128272 -0500\n+++ /tmp/Arja_Defects4J_Lang_50/patches_65h7/Patch_1204/patched/tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 03:01:01.679128980 -0500\n@@ -277,7 +277,10 @@\n      *  pattern defined\n      */\n     public static synchronized FastDateFormat getDateInstance(int style, TimeZone timeZone, Locale locale) {\n-        Object key = new Integer(style);\n+        if (cDefaultPattern == null) {\n+\t\t\tcDefaultPattern = new SimpleDateFormat().toPattern();\n+\t\t}\n+\t\tObject key = new Integer(style);\n         if (timeZone != null) {\n             key = new Pair(key, timeZone);\n         }\n@@ -287,7 +290,8 @@\n         }\n \n \n-        FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n+        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache\n+\t\t\t\t.get(key);\n         if (format == null) {\n             if (locale == null) {\n                 locale = Locale.getDefault();\n@@ -405,7 +409,7 @@\n      */\n     public static FastDateFormat getDateTimeInstance(\n             int dateStyle, int timeStyle) {\n-        return getDateTimeInstance(dateStyle, timeStyle, null, null);\n+        return getInstance(getDefaultPattern(), null, null);\n     }\n     \n     /**\n@@ -458,7 +462,10 @@\n     public static synchronized FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, TimeZone timeZone,\n             Locale locale) {\n \n-        Object key = new Pair(new Integer(dateStyle), new Integer(timeStyle));\n+        if (locale == null) {\n+\t\t\t\t\tlocale = Locale.getDefault();\n+\t\t\t\t}\n+\t\tObject key = new Pair(new Integer(dateStyle), new Integer(timeStyle));\n         if (timeZone != null) {\n             key = new Pair(key, timeZone);\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 280, 
          "faulty": "Object key=new Integer(style);", 
          "type": "InsertBefore", 
          "seed": "if (cDefaultPattern == null) {\n  cDefaultPattern=new SimpleDateFormat().toPattern();\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 408, 
          "faulty": "return getDateTimeInstance(dateStyle,timeStyle,null,null);", 
          "type": "Replace", 
          "seed": "return getInstance(getDefaultPattern(),null,null);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 461, 
          "faulty": "Object key=new Pair(new Integer(dateStyle),new Integer(timeStyle));", 
          "type": "InsertBefore", 
          "seed": "if (locale == null) {\n  locale=Locale.getDefault();\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 290, 
          "faulty": "FastDateFormat format=(FastDateFormat)cDateInstanceCache.get(key);", 
          "type": "Replace", 
          "seed": "FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:51:18.813128272 -0500\n+++ /tmp/Arja_Defects4J_Lang_50/patches_65h7/Patch_1557/patched/tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 03:03:12.247575657 -0500\n@@ -283,11 +283,15 @@\n         }\n \n         if (locale != null) {\n-            key = new Pair(key, locale);\n+            if (locale == null) {\n+\t\t\t\tlocale = Locale.getDefault();\n+\t\t\t}\n+\t\t\tkey = new Pair(key, locale);\n         }\n \n \n-        FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n+        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache\n+\t\t\t\t.get(key);\n         if (format == null) {\n             if (locale == null) {\n                 locale = Locale.getDefault();\n@@ -458,7 +462,10 @@\n     public static synchronized FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, TimeZone timeZone,\n             Locale locale) {\n \n-        Object key = new Pair(new Integer(dateStyle), new Integer(timeStyle));\n+        if (locale == null) {\n+\t\t\t\t\tlocale = Locale.getDefault();\n+\t\t\t\t}\n+\t\tObject key = new Pair(new Integer(dateStyle), new Integer(timeStyle));\n         if (timeZone != null) {\n             key = new Pair(key, timeZone);\n         }\n@@ -466,7 +473,8 @@\n             key = new Pair(key, locale);\n         }\n \n-        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key);\n+        cDefaultPattern = new SimpleDateFormat().toPattern();\n+\t\tFastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key);\n         if (format == null) {\n             if (locale == null) {\n                 locale = Locale.getDefault();\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 469, 
          "faulty": "FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);", 
          "type": "InsertBefore", 
          "seed": "cDefaultPattern=new SimpleDateFormat().toPattern();"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 286, 
          "faulty": "key=new Pair(key,locale);", 
          "type": "InsertBefore", 
          "seed": "if (locale == null) {\n  locale=Locale.getDefault();\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 461, 
          "faulty": "Object key=new Pair(new Integer(dateStyle),new Integer(timeStyle));", 
          "type": "InsertBefore", 
          "seed": "if (locale == null) {\n  locale=Locale.getDefault();\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 290, 
          "faulty": "FastDateFormat format=(FastDateFormat)cDateInstanceCache.get(key);", 
          "type": "Replace", 
          "seed": "FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:51:18.813128272 -0500\n+++ /tmp/Arja_Defects4J_Lang_50/patches_65h7/Patch_1595/patched/tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 03:03:26.703625084 -0500\n@@ -287,10 +287,12 @@\n         }\n \n \n-        FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n+        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache\n+\t\t\t\t.get(key);\n         if (format == null) {\n             if (locale == null) {\n-                locale = Locale.getDefault();\n+                cDefaultPattern = new SimpleDateFormat().toPattern();\n+\t\t\t\tlocale = Locale.getDefault();\n             }\n             try {\n                 SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateInstance(style, locale);\n@@ -458,7 +460,10 @@\n     public static synchronized FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, TimeZone timeZone,\n             Locale locale) {\n \n-        Object key = new Pair(new Integer(dateStyle), new Integer(timeStyle));\n+        if (locale == null) {\n+\t\t\t\t\tlocale = Locale.getDefault();\n+\t\t\t\t}\n+\t\tObject key = new Pair(new Integer(dateStyle), new Integer(timeStyle));\n         if (timeZone != null) {\n             key = new Pair(key, timeZone);\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 293, 
          "faulty": "locale=Locale.getDefault();", 
          "type": "InsertBefore", 
          "seed": "cDefaultPattern=new SimpleDateFormat().toPattern();"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 461, 
          "faulty": "Object key=new Pair(new Integer(dateStyle),new Integer(timeStyle));", 
          "type": "InsertBefore", 
          "seed": "if (locale == null) {\n  locale=Locale.getDefault();\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 290, 
          "faulty": "FastDateFormat format=(FastDateFormat)cDateInstanceCache.get(key);", 
          "type": "Replace", 
          "seed": "FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:51:18.813128272 -0500\n+++ /tmp/Arja_Defects4J_Lang_50/patches_65h7/Patch_1693/patched/tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 03:04:03.235749973 -0500\n@@ -287,7 +287,8 @@\n         }\n \n \n-        FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n+        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache\n+\t\t\t\t.get(key);\n         if (format == null) {\n             if (locale == null) {\n                 locale = Locale.getDefault();\n@@ -422,7 +423,10 @@\n      */\n     public static FastDateFormat getDateTimeInstance(\n             int dateStyle, int timeStyle, Locale locale) {\n-        return getDateTimeInstance(dateStyle, timeStyle, null, locale);\n+        if (locale == null) {\n+\t\t\t\t\tlocale = Locale.getDefault();\n+\t\t\t\t}\n+\t\treturn getDateTimeInstance(dateStyle, timeStyle, null, locale);\n     }\n     \n     /**\n@@ -476,7 +480,7 @@\n                         locale);\n                 String pattern = formatter.toPattern();\n                 format = getInstance(pattern, timeZone, locale);\n-                cDateTimeInstanceCache.put(key, format);\n+                cDefaultPattern = new SimpleDateFormat().toPattern();\n \n             } catch (ClassCastException ex) {\n                 throw new IllegalArgumentException(\"No date time pattern for locale: \" + locale);\n@@ -1724,11 +1728,8 @@\n \n             Pair key = (Pair)obj;\n \n-            return\n-                (mObj1 == null ?\n-                 key.mObj1 == null : mObj1.equals(key.mObj1)) &&\n-                (mObj2 == null ?\n-                 key.mObj2 == null : mObj2.equals(key.mObj2));\n+            throw new IllegalStateException(\n+\t\t\t\t\t\"Stopwatch must be running to suspend. \");\n         }\n \n         /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 290, 
          "faulty": "FastDateFormat format=(FastDateFormat)cDateInstanceCache.get(key);", 
          "type": "Replace", 
          "seed": "FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 479, 
          "faulty": "cDateTimeInstanceCache.put(key,format);", 
          "type": "Replace", 
          "seed": "cDefaultPattern=new SimpleDateFormat().toPattern();"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 425, 
          "faulty": "return getDateTimeInstance(dateStyle,timeStyle,null,locale);", 
          "type": "InsertBefore", 
          "seed": "if (locale == null) {\n  locale=Locale.getDefault();\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 1727, 
          "faulty": "return (mObj1 == null ? key.mObj1 == null : mObj1.equals(key.mObj1)) && (mObj2 == null ? key.mObj2 == null : mObj2.equals(key.mObj2));", 
          "type": "Replace", 
          "seed": "throw new IllegalStateException(\"Stopwatch must be running to suspend. \");"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:51:18.813128272 -0500\n+++ /tmp/Arja_Defects4J_Lang_50/patches_65h7/Patch_788/patched/tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:58:29.182606688 -0500\n@@ -282,12 +282,11 @@\n             key = new Pair(key, timeZone);\n         }\n \n-        if (locale != null) {\n-            key = new Pair(key, locale);\n-        }\n+        cDefaultPattern = new SimpleDateFormat().toPattern();\n \n \n-        FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n+        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache\n+\t\t\t\t.get(key);\n         if (format == null) {\n             if (locale == null) {\n                 locale = Locale.getDefault();\n@@ -405,7 +404,7 @@\n      */\n     public static FastDateFormat getDateTimeInstance(\n             int dateStyle, int timeStyle) {\n-        return getDateTimeInstance(dateStyle, timeStyle, null, null);\n+        return getInstance(getDefaultPattern(), null, null);\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 408, 
          "faulty": "return getDateTimeInstance(dateStyle,timeStyle,null,null);", 
          "type": "Replace", 
          "seed": "return getInstance(getDefaultPattern(),null,null);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 290, 
          "faulty": "FastDateFormat format=(FastDateFormat)cDateInstanceCache.get(key);", 
          "type": "Replace", 
          "seed": "FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 285, 
          "faulty": "if (locale != null) {\n  key=new Pair(key,locale);\n}", 
          "type": "Replace", 
          "seed": "cDefaultPattern=new SimpleDateFormat().toPattern();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:51:18.813128272 -0500\n+++ /tmp/Arja_Defects4J_Lang_50/patches_65h7/Patch_364/patched/tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:55:46.482048622 -0500\n@@ -287,7 +287,8 @@\n         }\n \n \n-        FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n+        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache\n+\t\t\t\t.get(key);\n         if (format == null) {\n             if (locale == null) {\n                 locale = Locale.getDefault();\n@@ -405,7 +406,7 @@\n      */\n     public static FastDateFormat getDateTimeInstance(\n             int dateStyle, int timeStyle) {\n-        return getDateTimeInstance(dateStyle, timeStyle, null, null);\n+        return getInstance(getDefaultPattern(), null, null);\n     }\n     \n     /**\n@@ -475,7 +476,11 @@\n                 SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle,\n                         locale);\n                 String pattern = formatter.toPattern();\n-                format = getInstance(pattern, timeZone, locale);\n+                if (pattern == null) {\n+\t\t\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\t\t\"The pattern must not be null\");\n+\t\t\t\t}\n+\t\t\t\tformat = getInstance(pattern, timeZone, locale);\n                 cDateTimeInstanceCache.put(key, format);\n \n             } catch (ClassCastException ex) {\n@@ -1714,7 +1719,10 @@\n          * {@inheritDoc}\n          */\n         public boolean equals(Object obj) {\n-            if (this == obj) {\n+            if (obj instanceof FastDateFormat == false) {\n+\t\t\t\treturn false;\n+\t\t\t}\n+\t\t\tif (this == obj) {\n                 return true;\n             }\n \n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 478, 
          "faulty": "format=getInstance(pattern,timeZone,locale);", 
          "type": "InsertBefore", 
          "seed": "if (pattern == null) {\n  throw new IllegalArgumentException(\"The pattern must not be null\");\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 1717, 
          "faulty": "if (this == obj) {\n  return true;\n}", 
          "type": "InsertBefore", 
          "seed": "if (obj instanceof FastDateFormat == false) {\n  return false;\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 408, 
          "faulty": "return getDateTimeInstance(dateStyle,timeStyle,null,null);", 
          "type": "Replace", 
          "seed": "return getInstance(getDefaultPattern(),null,null);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 290, 
          "faulty": "FastDateFormat format=(FastDateFormat)cDateInstanceCache.get(key);", 
          "type": "Replace", 
          "seed": "FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:51:18.813128272 -0500\n+++ /tmp/Arja_Defects4J_Lang_50/patches_65h7/Patch_1129/patched/tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 03:00:33.627032954 -0500\n@@ -287,7 +287,8 @@\n         }\n \n \n-        FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n+        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache\n+\t\t\t\t.get(key);\n         if (format == null) {\n             if (locale == null) {\n                 locale = Locale.getDefault();\n@@ -476,7 +477,6 @@\n                         locale);\n                 String pattern = formatter.toPattern();\n                 format = getInstance(pattern, timeZone, locale);\n-                cDateTimeInstanceCache.put(key, format);\n \n             } catch (ClassCastException ex) {\n                 throw new IllegalArgumentException(\"No date time pattern for locale: \" + locale);\n@@ -1714,7 +1714,10 @@\n          * {@inheritDoc}\n          */\n         public boolean equals(Object obj) {\n-            if (this == obj) {\n+            if (obj instanceof FastDateFormat == false) {\n+\t\t\t\treturn false;\n+\t\t\t}\n+\t\t\tif (this == obj) {\n                 return true;\n             }\n \n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 1717, 
          "faulty": "if (this == obj) {\n  return true;\n}", 
          "type": "InsertBefore", 
          "seed": "if (obj instanceof FastDateFormat == false) {\n  return false;\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 290, 
          "faulty": "FastDateFormat format=(FastDateFormat)cDateInstanceCache.get(key);", 
          "type": "Replace", 
          "seed": "FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 479, 
          "faulty": "cDateTimeInstanceCache.put(key,format);", 
          "type": "Delete", 
          "seed": "return getInstance(getDefaultPattern(),null,null);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:51:18.813128272 -0500\n+++ /tmp/Arja_Defects4J_Lang_50/patches_65h7/Patch_409/patched/tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:56:03.334106468 -0500\n@@ -287,7 +287,8 @@\n         }\n \n \n-        FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n+        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache\n+\t\t\t\t.get(key);\n         if (format == null) {\n             if (locale == null) {\n                 locale = Locale.getDefault();\n@@ -405,7 +406,10 @@\n      */\n     public static FastDateFormat getDateTimeInstance(\n             int dateStyle, int timeStyle) {\n-        return getDateTimeInstance(dateStyle, timeStyle, null, null);\n+        if (cDefaultPattern == null) {\n+\t\t\t\t\tcDefaultPattern = new SimpleDateFormat().toPattern();\n+\t\t\t\t}\n+\t\treturn getDateTimeInstance(dateStyle, timeStyle, null, null);\n     }\n     \n     /**\n@@ -476,7 +480,10 @@\n                         locale);\n                 String pattern = formatter.toPattern();\n                 format = getInstance(pattern, timeZone, locale);\n-                cDateTimeInstanceCache.put(key, format);\n+                if (pattern == null) {\n+\t\t\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\t\t\"The pattern must not be null\");\n+\t\t\t\t}\n \n             } catch (ClassCastException ex) {\n                 throw new IllegalArgumentException(\"No date time pattern for locale: \" + locale);\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 408, 
          "faulty": "return getDateTimeInstance(dateStyle,timeStyle,null,null);", 
          "type": "InsertBefore", 
          "seed": "if (cDefaultPattern == null) {\n  cDefaultPattern=new SimpleDateFormat().toPattern();\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 290, 
          "faulty": "FastDateFormat format=(FastDateFormat)cDateInstanceCache.get(key);", 
          "type": "Replace", 
          "seed": "FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 479, 
          "faulty": "cDateTimeInstanceCache.put(key,format);", 
          "type": "Replace", 
          "seed": "if (pattern == null) {\n  throw new IllegalArgumentException(\"The pattern must not be null\");\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:51:18.813128272 -0500\n+++ /tmp/Arja_Defects4J_Lang_50/patches_65h7/Patch_566/patched/tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:57:04.174315222 -0500\n@@ -287,8 +287,10 @@\n         }\n \n \n-        FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n-        if (format == null) {\n+        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache\n+\t\t\t\t.get(key);\n+        cDateInstanceCache.put(key, format);\n+\t\tif (format == null) {\n             if (locale == null) {\n                 locale = Locale.getDefault();\n             }\n@@ -1714,7 +1716,10 @@\n          * {@inheritDoc}\n          */\n         public boolean equals(Object obj) {\n-            if (this == obj) {\n+            if (obj instanceof FastDateFormat == false) {\n+\t\t\t\treturn false;\n+\t\t\t}\n+\t\t\tif (this == obj) {\n                 return true;\n             }\n \n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 1717, 
          "faulty": "if (this == obj) {\n  return true;\n}", 
          "type": "InsertBefore", 
          "seed": "if (obj instanceof FastDateFormat == false) {\n  return false;\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 291, 
          "faulty": "if (format == null) {\n  if (locale == null) {\n    locale=Locale.getDefault();\n  }\n  try {\n    SimpleDateFormat formatter=(SimpleDateFormat)DateFormat.getDateInstance(style,locale);\n    String pattern=formatter.toPattern();\n    format=getInstance(pattern,timeZone,locale);\n    cDateInstanceCache.put(key,format);\n  }\n catch (  ClassCastException ex) {\n    throw new IllegalArgumentException(\"No date pattern for locale: \" + locale);\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "cDateInstanceCache.put(key,format);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 290, 
          "faulty": "FastDateFormat format=(FastDateFormat)cDateInstanceCache.get(key);", 
          "type": "Replace", 
          "seed": "FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:51:18.813128272 -0500\n+++ /tmp/Arja_Defects4J_Lang_50/patches_65h7/Patch_1428/patched/tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 03:02:25.039414208 -0500\n@@ -287,7 +287,8 @@\n         }\n \n \n-        FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n+        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache\n+\t\t\t\t.get(key);\n         if (format == null) {\n             if (locale == null) {\n                 locale = Locale.getDefault();\n@@ -458,7 +459,10 @@\n     public static synchronized FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, TimeZone timeZone,\n             Locale locale) {\n \n-        Object key = new Pair(new Integer(dateStyle), new Integer(timeStyle));\n+        if (locale == null) {\n+\t\t\t\t\tlocale = Locale.getDefault();\n+\t\t\t\t}\n+\t\tObject key = new Pair(new Integer(dateStyle), new Integer(timeStyle));\n         if (timeZone != null) {\n             key = new Pair(key, timeZone);\n         }\n@@ -1714,7 +1718,10 @@\n          * {@inheritDoc}\n          */\n         public boolean equals(Object obj) {\n-            if (this == obj) {\n+            if (obj instanceof FastDateFormat == false) {\n+\t\t\t\treturn false;\n+\t\t\t}\n+\t\t\tif (this == obj) {\n                 return true;\n             }\n \n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 1717, 
          "faulty": "if (this == obj) {\n  return true;\n}", 
          "type": "InsertBefore", 
          "seed": "if (obj instanceof FastDateFormat == false) {\n  return false;\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 461, 
          "faulty": "Object key=new Pair(new Integer(dateStyle),new Integer(timeStyle));", 
          "type": "InsertBefore", 
          "seed": "if (locale == null) {\n  locale=Locale.getDefault();\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 290, 
          "faulty": "FastDateFormat format=(FastDateFormat)cDateInstanceCache.get(key);", 
          "type": "Replace", 
          "seed": "FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:51:18.813128272 -0500\n+++ /tmp/Arja_Defects4J_Lang_50/patches_65h7/Patch_335/patched/tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:55:35.166009773 -0500\n@@ -287,7 +287,8 @@\n         }\n \n \n-        FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n+        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache\n+\t\t\t\t.get(key);\n         if (format == null) {\n             if (locale == null) {\n                 locale = Locale.getDefault();\n@@ -458,7 +459,10 @@\n     public static synchronized FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, TimeZone timeZone,\n             Locale locale) {\n \n-        Object key = new Pair(new Integer(dateStyle), new Integer(timeStyle));\n+        if (locale == null) {\n+\t\t\t\t\tlocale = Locale.getDefault();\n+\t\t\t\t}\n+\t\tObject key = new Pair(new Integer(dateStyle), new Integer(timeStyle));\n         if (timeZone != null) {\n             key = new Pair(key, timeZone);\n         }\n@@ -466,7 +470,8 @@\n             key = new Pair(key, locale);\n         }\n \n-        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key);\n+        key = new Pair(key, locale);\n+\t\tFastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key);\n         if (format == null) {\n             if (locale == null) {\n                 locale = Locale.getDefault();\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 469, 
          "faulty": "FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);", 
          "type": "InsertBefore", 
          "seed": "key=new Pair(key,locale);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 461, 
          "faulty": "Object key=new Pair(new Integer(dateStyle),new Integer(timeStyle));", 
          "type": "InsertBefore", 
          "seed": "if (locale == null) {\n  locale=Locale.getDefault();\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 290, 
          "faulty": "FastDateFormat format=(FastDateFormat)cDateInstanceCache.get(key);", 
          "type": "Replace", 
          "seed": "FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:51:18.813128272 -0500\n+++ /tmp/Arja_Defects4J_Lang_50/patches_65h7/Patch_1272/patched/tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 03:01:26.471213828 -0500\n@@ -287,7 +287,8 @@\n         }\n \n \n-        FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n+        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache\n+\t\t\t\t.get(key);\n         if (format == null) {\n             if (locale == null) {\n                 locale = Locale.getDefault();\n@@ -476,7 +477,8 @@\n                         locale);\n                 String pattern = formatter.toPattern();\n                 format = getInstance(pattern, timeZone, locale);\n-                cDateTimeInstanceCache.put(key, format);\n+                timeZone = TimeZone.getDefault();\n+\t\t\t\tcDateTimeInstanceCache.put(key, format);\n \n             } catch (ClassCastException ex) {\n                 throw new IllegalArgumentException(\"No date time pattern for locale: \" + locale);\n@@ -1714,7 +1716,10 @@\n          * {@inheritDoc}\n          */\n         public boolean equals(Object obj) {\n-            if (this == obj) {\n+            if (obj instanceof FastDateFormat == false) {\n+\t\t\t\treturn false;\n+\t\t\t}\n+\t\t\tif (this == obj) {\n                 return true;\n             }\n \n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 1717, 
          "faulty": "if (this == obj) {\n  return true;\n}", 
          "type": "InsertBefore", 
          "seed": "if (obj instanceof FastDateFormat == false) {\n  return false;\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 290, 
          "faulty": "FastDateFormat format=(FastDateFormat)cDateInstanceCache.get(key);", 
          "type": "Replace", 
          "seed": "FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 479, 
          "faulty": "cDateTimeInstanceCache.put(key,format);", 
          "type": "InsertBefore", 
          "seed": "timeZone=TimeZone.getDefault();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:51:18.813128272 -0500\n+++ /tmp/Arja_Defects4J_Lang_50/patches_65h7/Patch_1345/patched/tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 03:01:54.091308336 -0500\n@@ -287,8 +287,10 @@\n         }\n \n \n-        FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n-        if (format == null) {\n+        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache\n+\t\t\t\t.get(key);\n+        timeZone = TimeZone.getDefault();\n+\t\tif (format == null) {\n             if (locale == null) {\n                 locale = Locale.getDefault();\n             }\n@@ -405,7 +407,7 @@\n      */\n     public static FastDateFormat getDateTimeInstance(\n             int dateStyle, int timeStyle) {\n-        return getDateTimeInstance(dateStyle, timeStyle, null, null);\n+        return getInstance(getDefaultPattern(), null, null);\n     }\n     \n     /**\n@@ -476,7 +478,7 @@\n                         locale);\n                 String pattern = formatter.toPattern();\n                 format = getInstance(pattern, timeZone, locale);\n-                cDateTimeInstanceCache.put(key, format);\n+                timeZone = TimeZone.getDefault();\n \n             } catch (ClassCastException ex) {\n                 throw new IllegalArgumentException(\"No date time pattern for locale: \" + locale);\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 291, 
          "faulty": "if (format == null) {\n  if (locale == null) {\n    locale=Locale.getDefault();\n  }\n  try {\n    SimpleDateFormat formatter=(SimpleDateFormat)DateFormat.getDateInstance(style,locale);\n    String pattern=formatter.toPattern();\n    format=getInstance(pattern,timeZone,locale);\n    cDateInstanceCache.put(key,format);\n  }\n catch (  ClassCastException ex) {\n    throw new IllegalArgumentException(\"No date pattern for locale: \" + locale);\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "timeZone=TimeZone.getDefault();"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 408, 
          "faulty": "return getDateTimeInstance(dateStyle,timeStyle,null,null);", 
          "type": "Replace", 
          "seed": "return getInstance(getDefaultPattern(),null,null);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 290, 
          "faulty": "FastDateFormat format=(FastDateFormat)cDateInstanceCache.get(key);", 
          "type": "Replace", 
          "seed": "FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 479, 
          "faulty": "cDateTimeInstanceCache.put(key,format);", 
          "type": "Replace", 
          "seed": "timeZone=TimeZone.getDefault();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:51:18.813128272 -0500\n+++ /tmp/Arja_Defects4J_Lang_50/patches_65h7/Patch_967/patched/tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:59:35.474833820 -0500\n@@ -287,7 +287,8 @@\n         }\n \n \n-        FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n+        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache\n+\t\t\t\t.get(key);\n         if (format == null) {\n             if (locale == null) {\n                 locale = Locale.getDefault();\n@@ -458,14 +459,11 @@\n     public static synchronized FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, TimeZone timeZone,\n             Locale locale) {\n \n-        Object key = new Pair(new Integer(dateStyle), new Integer(timeStyle));\n+        timeZone = TimeZone.getDefault();\n+\t\tObject key = new Pair(new Integer(dateStyle), new Integer(timeStyle));\n         if (timeZone != null) {\n             key = new Pair(key, timeZone);\n         }\n-        if (locale != null) {\n-            key = new Pair(key, locale);\n-        }\n-\n         FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key);\n         if (format == null) {\n             if (locale == null) {\n@@ -1714,11 +1712,15 @@\n          * {@inheritDoc}\n          */\n         public boolean equals(Object obj) {\n-            if (this == obj) {\n+            if (obj instanceof FastDateFormat == false) {\n+\t\t\t\treturn false;\n+\t\t\t}\n+\t\t\tif (this == obj) {\n                 return true;\n             }\n \n-            if (!(obj instanceof Pair)) {\n+            cDefaultPattern = new SimpleDateFormat().toPattern();\n+\t\t\tif (!(obj instanceof Pair)) {\n                 return false;\n             }\n \n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 1717, 
          "faulty": "if (this == obj) {\n  return true;\n}", 
          "type": "InsertBefore", 
          "seed": "if (obj instanceof FastDateFormat == false) {\n  return false;\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 1721, 
          "faulty": "if (!(obj instanceof Pair)) {\n  return false;\n}", 
          "type": "InsertBefore", 
          "seed": "cDefaultPattern=new SimpleDateFormat().toPattern();"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 461, 
          "faulty": "Object key=new Pair(new Integer(dateStyle),new Integer(timeStyle));", 
          "type": "InsertBefore", 
          "seed": "timeZone=TimeZone.getDefault();"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 290, 
          "faulty": "FastDateFormat format=(FastDateFormat)cDateInstanceCache.get(key);", 
          "type": "Replace", 
          "seed": "FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 465, 
          "faulty": "if (locale != null) {\n  key=new Pair(key,locale);\n}", 
          "type": "Delete", 
          "seed": "if (timeZone == null) {\n  timeZone=TimeZone.getDefault();\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:51:18.813128272 -0500\n+++ /tmp/Arja_Defects4J_Lang_50/patches_65h7/Patch_1648/patched/tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 03:03:47.215695211 -0500\n@@ -287,7 +287,8 @@\n         }\n \n \n-        FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n+        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache\n+\t\t\t\t.get(key);\n         if (format == null) {\n             if (locale == null) {\n                 locale = Locale.getDefault();\n@@ -476,7 +477,7 @@\n                         locale);\n                 String pattern = formatter.toPattern();\n                 format = getInstance(pattern, timeZone, locale);\n-                cDateTimeInstanceCache.put(key, format);\n+                timeZone = TimeZone.getDefault();\n \n             } catch (ClassCastException ex) {\n                 throw new IllegalArgumentException(\"No date time pattern for locale: \" + locale);\n@@ -1718,7 +1719,10 @@\n                 return true;\n             }\n \n-            if (!(obj instanceof Pair)) {\n+            if (this == obj) {\n+\t\t\t\treturn true;\n+\t\t\t}\n+\t\t\tif (!(obj instanceof Pair)) {\n                 return false;\n             }\n \n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 1721, 
          "faulty": "if (!(obj instanceof Pair)) {\n  return false;\n}", 
          "type": "InsertBefore", 
          "seed": "if (this == obj) {\n  return true;\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 290, 
          "faulty": "FastDateFormat format=(FastDateFormat)cDateInstanceCache.get(key);", 
          "type": "Replace", 
          "seed": "FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 479, 
          "faulty": "cDateTimeInstanceCache.put(key,format);", 
          "type": "Replace", 
          "seed": "timeZone=TimeZone.getDefault();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:51:18.813128272 -0500\n+++ /tmp/Arja_Defects4J_Lang_50/patches_65h7/Patch_1712/patched/tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 03:04:10.403774474 -0500\n@@ -282,12 +282,16 @@\n             key = new Pair(key, timeZone);\n         }\n \n-        if (locale != null) {\n+        if (timeZone == null) {\n+\t\t\ttimeZone = TimeZone.getDefault();\n+\t\t}\n+\t\tif (locale != null) {\n             key = new Pair(key, locale);\n         }\n \n \n-        FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n+        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache\n+\t\t\t\t.get(key);\n         if (format == null) {\n             if (locale == null) {\n                 locale = Locale.getDefault();\n@@ -458,7 +462,10 @@\n     public static synchronized FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, TimeZone timeZone,\n             Locale locale) {\n \n-        Object key = new Pair(new Integer(dateStyle), new Integer(timeStyle));\n+        if (locale == null) {\n+\t\t\t\t\tlocale = Locale.getDefault();\n+\t\t\t\t}\n+\t\tObject key = new Pair(new Integer(dateStyle), new Integer(timeStyle));\n         if (timeZone != null) {\n             key = new Pair(key, timeZone);\n         }\n@@ -476,7 +483,7 @@\n                         locale);\n                 String pattern = formatter.toPattern();\n                 format = getInstance(pattern, timeZone, locale);\n-                cDateTimeInstanceCache.put(key, format);\n+                cDefaultPattern = new SimpleDateFormat().toPattern();\n \n             } catch (ClassCastException ex) {\n                 throw new IllegalArgumentException(\"No date time pattern for locale: \" + locale);\n@@ -1714,7 +1721,10 @@\n          * {@inheritDoc}\n          */\n         public boolean equals(Object obj) {\n-            if (this == obj) {\n+            if (obj instanceof FastDateFormat == false) {\n+\t\t\t\treturn false;\n+\t\t\t}\n+\t\t\tif (this == obj) {\n                 return true;\n             }\n \n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 1717, 
          "faulty": "if (this == obj) {\n  return true;\n}", 
          "type": "InsertBefore", 
          "seed": "if (obj instanceof FastDateFormat == false) {\n  return false;\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 461, 
          "faulty": "Object key=new Pair(new Integer(dateStyle),new Integer(timeStyle));", 
          "type": "InsertBefore", 
          "seed": "if (locale == null) {\n  locale=Locale.getDefault();\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 290, 
          "faulty": "FastDateFormat format=(FastDateFormat)cDateInstanceCache.get(key);", 
          "type": "Replace", 
          "seed": "FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 479, 
          "faulty": "cDateTimeInstanceCache.put(key,format);", 
          "type": "Replace", 
          "seed": "cDefaultPattern=new SimpleDateFormat().toPattern();"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 285, 
          "faulty": "if (locale != null) {\n  key=new Pair(key,locale);\n}", 
          "type": "InsertBefore", 
          "seed": "if (timeZone == null) {\n  timeZone=TimeZone.getDefault();\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:51:18.813128272 -0500\n+++ /tmp/Arja_Defects4J_Lang_50/patches_65h7/Patch_1311/patched/tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 03:01:40.983263486 -0500\n@@ -287,7 +287,8 @@\n         }\n \n \n-        FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n+        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache\n+\t\t\t\t.get(key);\n         if (format == null) {\n             if (locale == null) {\n                 locale = Locale.getDefault();\n@@ -405,7 +406,7 @@\n      */\n     public static FastDateFormat getDateTimeInstance(\n             int dateStyle, int timeStyle) {\n-        return getDateTimeInstance(dateStyle, timeStyle, null, null);\n+        return getInstance(getDefaultPattern(), null, null);\n     }\n     \n     /**\n@@ -463,7 +464,8 @@\n             key = new Pair(key, timeZone);\n         }\n         if (locale != null) {\n-            key = new Pair(key, locale);\n+            cDefaultPattern = new SimpleDateFormat().toPattern();\n+\t\t\tkey = new Pair(key, locale);\n         }\n \n         FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key);\n@@ -476,7 +478,6 @@\n                         locale);\n                 String pattern = formatter.toPattern();\n                 format = getInstance(pattern, timeZone, locale);\n-                cDateTimeInstanceCache.put(key, format);\n \n             } catch (ClassCastException ex) {\n                 throw new IllegalArgumentException(\"No date time pattern for locale: \" + locale);\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 408, 
          "faulty": "return getDateTimeInstance(dateStyle,timeStyle,null,null);", 
          "type": "Replace", 
          "seed": "return getInstance(getDefaultPattern(),null,null);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 290, 
          "faulty": "FastDateFormat format=(FastDateFormat)cDateInstanceCache.get(key);", 
          "type": "Replace", 
          "seed": "FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 479, 
          "faulty": "cDateTimeInstanceCache.put(key,format);", 
          "type": "Delete", 
          "seed": "timeZone=TimeZone.getDefault();"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 466, 
          "faulty": "key=new Pair(key,locale);", 
          "type": "InsertBefore", 
          "seed": "cDefaultPattern=new SimpleDateFormat().toPattern();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:51:18.813128272 -0500\n+++ /tmp/Arja_Defects4J_Lang_50/patches_65h7/Patch_286/patched/tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:55:16.029944066 -0500\n@@ -287,7 +287,8 @@\n         }\n \n \n-        FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n+        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache\n+\t\t\t\t.get(key);\n         if (format == null) {\n             if (locale == null) {\n                 locale = Locale.getDefault();\n@@ -617,7 +618,7 @@\n                 break;\n             case 'M': // month in year (text and number)\n                 if (tokenLen >= 4) {\n-                    rule = new TextField(Calendar.MONTH, months);\n+                    rule = UnpaddedMonthField.INSTANCE;\n                 } else if (tokenLen == 3) {\n                     rule = new TextField(Calendar.MONTH, shortMonths);\n                 } else if (tokenLen == 2) {\n@@ -1714,7 +1715,10 @@\n          * {@inheritDoc}\n          */\n         public boolean equals(Object obj) {\n-            if (this == obj) {\n+            if (obj instanceof FastDateFormat == false) {\n+\t\t\t\treturn false;\n+\t\t\t}\n+\t\t\tif (this == obj) {\n                 return true;\n             }\n \n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 1717, 
          "faulty": "if (this == obj) {\n  return true;\n}", 
          "type": "InsertBefore", 
          "seed": "if (obj instanceof FastDateFormat == false) {\n  return false;\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 290, 
          "faulty": "FastDateFormat format=(FastDateFormat)cDateInstanceCache.get(key);", 
          "type": "Replace", 
          "seed": "FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 620, 
          "faulty": "rule=new TextField(Calendar.MONTH,months);", 
          "type": "Replace", 
          "seed": "rule=UnpaddedMonthField.INSTANCE;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:51:18.813128272 -0500\n+++ /tmp/Arja_Defects4J_Lang_50/patches_65h7/Patch_1675/patched/tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 03:03:56.759727836 -0500\n@@ -283,11 +283,11 @@\n         }\n \n         if (locale != null) {\n-            key = new Pair(key, locale);\n         }\n \n \n-        FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n+        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache\n+\t\t\t\t.get(key);\n         if (format == null) {\n             if (locale == null) {\n                 locale = Locale.getDefault();\n@@ -405,7 +405,7 @@\n      */\n     public static FastDateFormat getDateTimeInstance(\n             int dateStyle, int timeStyle) {\n-        return getDateTimeInstance(dateStyle, timeStyle, null, null);\n+        return getInstance(getDefaultPattern(), null, null);\n     }\n     \n     /**\n@@ -1718,7 +1718,10 @@\n                 return true;\n             }\n \n-            if (!(obj instanceof Pair)) {\n+            if (this == obj) {\n+\t\t\t\treturn true;\n+\t\t\t}\n+\t\t\tif (!(obj instanceof Pair)) {\n                 return false;\n             }\n \n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 1721, 
          "faulty": "if (!(obj instanceof Pair)) {\n  return false;\n}", 
          "type": "InsertBefore", 
          "seed": "if (this == obj) {\n  return true;\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 408, 
          "faulty": "return getDateTimeInstance(dateStyle,timeStyle,null,null);", 
          "type": "Replace", 
          "seed": "return getInstance(getDefaultPattern(),null,null);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 286, 
          "faulty": "key=new Pair(key,locale);", 
          "type": "Delete", 
          "seed": "return getInstance(getDefaultPattern(),null,null);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 290, 
          "faulty": "FastDateFormat format=(FastDateFormat)cDateInstanceCache.get(key);", 
          "type": "Replace", 
          "seed": "FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:51:18.813128272 -0500\n+++ /tmp/Arja_Defects4J_Lang_50/patches_65h7/Patch_1218/patched/tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 03:01:06.447145299 -0500\n@@ -287,7 +287,8 @@\n         }\n \n \n-        FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n+        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache\n+\t\t\t\t.get(key);\n         if (format == null) {\n             if (locale == null) {\n                 locale = Locale.getDefault();\n@@ -476,7 +477,6 @@\n                         locale);\n                 String pattern = formatter.toPattern();\n                 format = getInstance(pattern, timeZone, locale);\n-                cDateTimeInstanceCache.put(key, format);\n \n             } catch (ClassCastException ex) {\n                 throw new IllegalArgumentException(\"No date time pattern for locale: \" + locale);\n@@ -1724,11 +1724,8 @@\n \n             Pair key = (Pair)obj;\n \n-            return\n-                (mObj1 == null ?\n-                 key.mObj1 == null : mObj1.equals(key.mObj1)) &&\n-                (mObj2 == null ?\n-                 key.mObj2 == null : mObj2.equals(key.mObj2));\n+            throw new IllegalStateException(\n+\t\t\t\t\t\"Stopwatch must be running to suspend. \");\n         }\n \n         /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 290, 
          "faulty": "FastDateFormat format=(FastDateFormat)cDateInstanceCache.get(key);", 
          "type": "Replace", 
          "seed": "FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 479, 
          "faulty": "cDateTimeInstanceCache.put(key,format);", 
          "type": "Delete", 
          "seed": "timeZone=TimeZone.getDefault();"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 1727, 
          "faulty": "return (mObj1 == null ? key.mObj1 == null : mObj1.equals(key.mObj1)) && (mObj2 == null ? key.mObj2 == null : mObj2.equals(key.mObj2));", 
          "type": "Replace", 
          "seed": "throw new IllegalStateException(\"Stopwatch must be running to suspend. \");"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:51:18.813128272 -0500\n+++ /tmp/Arja_Defects4J_Lang_50/patches_65h7/Patch_207/patched/tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:54:44.293835062 -0500\n@@ -287,7 +287,8 @@\n         }\n \n \n-        FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n+        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache\n+\t\t\t\t.get(key);\n         if (format == null) {\n             if (locale == null) {\n                 locale = Locale.getDefault();\n@@ -674,7 +675,7 @@\n                 } else {\n                     rule = new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.SHORT);\n                 }\n-                break;\n+                ;\n             case 'Z': // time zone (value)\n                 if (tokenLen == 1) {\n                     rule = TimeZoneNumberRule.INSTANCE_NO_COLON;\n@@ -1714,7 +1715,10 @@\n          * {@inheritDoc}\n          */\n         public boolean equals(Object obj) {\n-            if (this == obj) {\n+            if (obj instanceof FastDateFormat == false) {\n+\t\t\t\treturn false;\n+\t\t\t}\n+\t\t\tif (this == obj) {\n                 return true;\n             }\n \n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 677, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "cDefaultPattern=new SimpleDateFormat().toPattern();"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 1717, 
          "faulty": "if (this == obj) {\n  return true;\n}", 
          "type": "InsertBefore", 
          "seed": "if (obj instanceof FastDateFormat == false) {\n  return false;\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 290, 
          "faulty": "FastDateFormat format=(FastDateFormat)cDateInstanceCache.get(key);", 
          "type": "Replace", 
          "seed": "FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:51:18.813128272 -0500\n+++ /tmp/Arja_Defects4J_Lang_50/patches_65h7/Patch_1715/patched/tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 03:04:11.183777139 -0500\n@@ -287,7 +287,8 @@\n         }\n \n \n-        FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n+        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache\n+\t\t\t\t.get(key);\n         if (format == null) {\n             if (locale == null) {\n                 locale = Locale.getDefault();\n@@ -302,7 +303,8 @@\n                 throw new IllegalArgumentException(\"No date pattern for locale: \" + locale);\n             }\n         }\n-        return format;\n+        cDefaultPattern = new SimpleDateFormat().toPattern();\n+\t\treturn format;\n     }\n \n     //-----------------------------------------------------------------------\n@@ -405,7 +407,10 @@\n      */\n     public static FastDateFormat getDateTimeInstance(\n             int dateStyle, int timeStyle) {\n-        return getDateTimeInstance(dateStyle, timeStyle, null, null);\n+        if (cDefaultPattern == null) {\n+\t\t\t\t\tcDefaultPattern = new SimpleDateFormat().toPattern();\n+\t\t\t\t}\n+\t\treturn getDateTimeInstance(dateStyle, timeStyle, null, null);\n     }\n     \n     /**\n@@ -458,7 +463,10 @@\n     public static synchronized FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, TimeZone timeZone,\n             Locale locale) {\n \n-        Object key = new Pair(new Integer(dateStyle), new Integer(timeStyle));\n+        if (locale == null) {\n+\t\t\t\t\tlocale = Locale.getDefault();\n+\t\t\t\t}\n+\t\tObject key = new Pair(new Integer(dateStyle), new Integer(timeStyle));\n         if (timeZone != null) {\n             key = new Pair(key, timeZone);\n         }\n@@ -617,7 +625,10 @@\n                 break;\n             case 'M': // month in year (text and number)\n                 if (tokenLen >= 4) {\n-                    rule = new TextField(Calendar.MONTH, months);\n+                    if (cDefaultPattern == null) {\n+\t\t\t\t\t\tcDefaultPattern = new SimpleDateFormat().toPattern();\n+\t\t\t\t\t}\n+\t\t\t\t\trule = new TextField(Calendar.MONTH, months);\n                 } else if (tokenLen == 3) {\n                     rule = new TextField(Calendar.MONTH, shortMonths);\n                 } else if (tokenLen == 2) {\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 305, 
          "faulty": "return format;", 
          "type": "InsertBefore", 
          "seed": "cDefaultPattern=new SimpleDateFormat().toPattern();"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 408, 
          "faulty": "return getDateTimeInstance(dateStyle,timeStyle,null,null);", 
          "type": "InsertBefore", 
          "seed": "if (cDefaultPattern == null) {\n  cDefaultPattern=new SimpleDateFormat().toPattern();\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 461, 
          "faulty": "Object key=new Pair(new Integer(dateStyle),new Integer(timeStyle));", 
          "type": "InsertBefore", 
          "seed": "if (locale == null) {\n  locale=Locale.getDefault();\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 290, 
          "faulty": "FastDateFormat format=(FastDateFormat)cDateInstanceCache.get(key);", 
          "type": "Replace", 
          "seed": "FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 620, 
          "faulty": "rule=new TextField(Calendar.MONTH,months);", 
          "type": "InsertBefore", 
          "seed": "if (cDefaultPattern == null) {\n  cDefaultPattern=new SimpleDateFormat().toPattern();\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:51:18.813128272 -0500\n+++ /tmp/Arja_Defects4J_Lang_50/patches_65h7/Patch_824/patched/tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:58:41.590649211 -0500\n@@ -287,7 +287,8 @@\n         }\n \n \n-        FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n+        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache\n+\t\t\t\t.get(key);\n         if (format == null) {\n             if (locale == null) {\n                 locale = Locale.getDefault();\n@@ -476,7 +477,6 @@\n                         locale);\n                 String pattern = formatter.toPattern();\n                 format = getInstance(pattern, timeZone, locale);\n-                cDateTimeInstanceCache.put(key, format);\n \n             } catch (ClassCastException ex) {\n                 throw new IllegalArgumentException(\"No date time pattern for locale: \" + locale);\n@@ -1714,10 +1714,6 @@\n          * {@inheritDoc}\n          */\n         public boolean equals(Object obj) {\n-            if (this == obj) {\n-                return true;\n-            }\n-\n             if (!(obj instanceof Pair)) {\n                 return false;\n             }\n@@ -1735,9 +1731,7 @@\n          * {@inheritDoc}\n          */\n         public int hashCode() {\n-            return\n-                (mObj1 == null ? 0 : mObj1.hashCode()) +\n-                (mObj2 == null ? 0 : mObj2.hashCode());\n+            return 4;\n         }\n \n         /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 1738, 
          "faulty": "return (mObj1 == null ? 0 : mObj1.hashCode()) + (mObj2 == null ? 0 : mObj2.hashCode());", 
          "type": "Replace", 
          "seed": "return 4;"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 1717, 
          "faulty": "if (this == obj) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "if (obj instanceof FastDateFormat == false) {\n  return false;\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 290, 
          "faulty": "FastDateFormat format=(FastDateFormat)cDateInstanceCache.get(key);", 
          "type": "Replace", 
          "seed": "FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 479, 
          "faulty": "cDateTimeInstanceCache.put(key,format);", 
          "type": "Delete", 
          "seed": "timeZone=TimeZone.getDefault();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:51:18.813128272 -0500\n+++ /tmp/Arja_Defects4J_Lang_50/patches_65h7/Patch_918/patched/tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:59:17.574772504 -0500\n@@ -282,12 +282,16 @@\n             key = new Pair(key, timeZone);\n         }\n \n-        if (locale != null) {\n+        if (cDefaultPattern == null) {\n+\t\t\tcDefaultPattern = new SimpleDateFormat().toPattern();\n+\t\t}\n+\t\tif (locale != null) {\n             key = new Pair(key, locale);\n         }\n \n \n-        FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n+        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache\n+\t\t\t\t.get(key);\n         if (format == null) {\n             if (locale == null) {\n                 locale = Locale.getDefault();\n@@ -1714,7 +1718,10 @@\n          * {@inheritDoc}\n          */\n         public boolean equals(Object obj) {\n-            if (this == obj) {\n+            if (obj instanceof FastDateFormat == false) {\n+\t\t\t\treturn false;\n+\t\t\t}\n+\t\t\tif (this == obj) {\n                 return true;\n             }\n \n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 1717, 
          "faulty": "if (this == obj) {\n  return true;\n}", 
          "type": "InsertBefore", 
          "seed": "if (obj instanceof FastDateFormat == false) {\n  return false;\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 290, 
          "faulty": "FastDateFormat format=(FastDateFormat)cDateInstanceCache.get(key);", 
          "type": "Replace", 
          "seed": "FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 285, 
          "faulty": "if (locale != null) {\n  key=new Pair(key,locale);\n}", 
          "type": "InsertBefore", 
          "seed": "if (cDefaultPattern == null) {\n  cDefaultPattern=new SimpleDateFormat().toPattern();\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:51:18.813128272 -0500\n+++ /tmp/Arja_Defects4J_Lang_50/patches_65h7/Patch_487/patched/tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:56:32.742207389 -0500\n@@ -287,7 +287,8 @@\n         }\n \n \n-        FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n+        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache\n+\t\t\t\t.get(key);\n         if (format == null) {\n             if (locale == null) {\n                 locale = Locale.getDefault();\n@@ -405,7 +406,7 @@\n      */\n     public static FastDateFormat getDateTimeInstance(\n             int dateStyle, int timeStyle) {\n-        return getDateTimeInstance(dateStyle, timeStyle, null, null);\n+        return getInstance(getDefaultPattern(), null, null);\n     }\n     \n     /**\n@@ -469,14 +470,15 @@\n         FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key);\n         if (format == null) {\n             if (locale == null) {\n-                locale = Locale.getDefault();\n+                if (timeZone == null) {\n+\t\t\t\t\ttimeZone = TimeZone.getDefault();\n+\t\t\t\t}\n             }\n             try {\n                 SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle,\n                         locale);\n                 String pattern = formatter.toPattern();\n                 format = getInstance(pattern, timeZone, locale);\n-                cDateTimeInstanceCache.put(key, format);\n \n             } catch (ClassCastException ex) {\n                 throw new IllegalArgumentException(\"No date time pattern for locale: \" + locale);\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 472, 
          "faulty": "locale=Locale.getDefault();", 
          "type": "Replace", 
          "seed": "if (timeZone == null) {\n  timeZone=TimeZone.getDefault();\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 408, 
          "faulty": "return getDateTimeInstance(dateStyle,timeStyle,null,null);", 
          "type": "Replace", 
          "seed": "return getInstance(getDefaultPattern(),null,null);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 290, 
          "faulty": "FastDateFormat format=(FastDateFormat)cDateInstanceCache.get(key);", 
          "type": "Replace", 
          "seed": "FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 479, 
          "faulty": "cDateTimeInstanceCache.put(key,format);", 
          "type": "Delete", 
          "seed": "return getDateTimeInstance(dateStyle,timeStyle,null,locale);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:51:18.813128272 -0500\n+++ /tmp/Arja_Defects4J_Lang_50/patches_65h7/Patch_1008/patched/tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:59:50.382884880 -0500\n@@ -287,7 +287,8 @@\n         }\n \n \n-        FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n+        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache\n+\t\t\t\t.get(key);\n         if (format == null) {\n             if (locale == null) {\n                 locale = Locale.getDefault();\n@@ -405,7 +406,7 @@\n      */\n     public static FastDateFormat getDateTimeInstance(\n             int dateStyle, int timeStyle) {\n-        return getDateTimeInstance(dateStyle, timeStyle, null, null);\n+        return getInstance(getDefaultPattern(), null, null);\n     }\n     \n     /**\n@@ -476,7 +477,7 @@\n                         locale);\n                 String pattern = formatter.toPattern();\n                 format = getInstance(pattern, timeZone, locale);\n-                cDateTimeInstanceCache.put(key, format);\n+                timeZone = TimeZone.getDefault();\n \n             } catch (ClassCastException ex) {\n                 throw new IllegalArgumentException(\"No date time pattern for locale: \" + locale);\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 408, 
          "faulty": "return getDateTimeInstance(dateStyle,timeStyle,null,null);", 
          "type": "Replace", 
          "seed": "return getInstance(getDefaultPattern(),null,null);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 290, 
          "faulty": "FastDateFormat format=(FastDateFormat)cDateInstanceCache.get(key);", 
          "type": "Replace", 
          "seed": "FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 479, 
          "faulty": "cDateTimeInstanceCache.put(key,format);", 
          "type": "Replace", 
          "seed": "timeZone=TimeZone.getDefault();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:51:18.813128272 -0500\n+++ /tmp/Arja_Defects4J_Lang_50/patches_65h7/Patch_1054/patched/tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 03:00:07.226942562 -0500\n@@ -287,7 +287,8 @@\n         }\n \n \n-        FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n+        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache\n+\t\t\t\t.get(key);\n         if (format == null) {\n             if (locale == null) {\n                 locale = Locale.getDefault();\n@@ -405,7 +406,7 @@\n      */\n     public static FastDateFormat getDateTimeInstance(\n             int dateStyle, int timeStyle) {\n-        return getDateTimeInstance(dateStyle, timeStyle, null, null);\n+        return getInstance(getDefaultPattern(), null, null);\n     }\n     \n     /**\n@@ -475,7 +476,10 @@\n                 SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle,\n                         locale);\n                 String pattern = formatter.toPattern();\n-                format = getInstance(pattern, timeZone, locale);\n+                if (cDefaultPattern == null) {\n+\t\t\t\t\tcDefaultPattern = new SimpleDateFormat().toPattern();\n+\t\t\t\t}\n+\t\t\t\tformat = getInstance(pattern, timeZone, locale);\n                 cDateTimeInstanceCache.put(key, format);\n \n             } catch (ClassCastException ex) {\n@@ -1714,7 +1718,10 @@\n          * {@inheritDoc}\n          */\n         public boolean equals(Object obj) {\n-            if (this == obj) {\n+            if (obj instanceof FastDateFormat == false) {\n+\t\t\t\treturn false;\n+\t\t\t}\n+\t\t\tif (this == obj) {\n                 return true;\n             }\n \n@@ -1722,7 +1729,8 @@\n                 return false;\n             }\n \n-            Pair key = (Pair)obj;\n+            cDefaultPattern = new SimpleDateFormat().toPattern();\n+\t\t\tPair key = (Pair)obj;\n \n             return\n                 (mObj1 == null ?\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 478, 
          "faulty": "format=getInstance(pattern,timeZone,locale);", 
          "type": "InsertBefore", 
          "seed": "if (cDefaultPattern == null) {\n  cDefaultPattern=new SimpleDateFormat().toPattern();\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 1717, 
          "faulty": "if (this == obj) {\n  return true;\n}", 
          "type": "InsertBefore", 
          "seed": "if (obj instanceof FastDateFormat == false) {\n  return false;\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 408, 
          "faulty": "return getDateTimeInstance(dateStyle,timeStyle,null,null);", 
          "type": "Replace", 
          "seed": "return getInstance(getDefaultPattern(),null,null);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 290, 
          "faulty": "FastDateFormat format=(FastDateFormat)cDateInstanceCache.get(key);", 
          "type": "Replace", 
          "seed": "FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 1725, 
          "faulty": "Pair key=(Pair)obj;", 
          "type": "InsertBefore", 
          "seed": "cDefaultPattern=new SimpleDateFormat().toPattern();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:51:18.813128272 -0500\n+++ /tmp/Arja_Defects4J_Lang_50/patches_65h7/Patch_1106/patched/tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 03:00:25.307004470 -0500\n@@ -287,7 +287,8 @@\n         }\n \n \n-        FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n+        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache\n+\t\t\t\t.get(key);\n         if (format == null) {\n             if (locale == null) {\n                 locale = Locale.getDefault();\n@@ -405,7 +406,7 @@\n      */\n     public static FastDateFormat getDateTimeInstance(\n             int dateStyle, int timeStyle) {\n-        return getDateTimeInstance(dateStyle, timeStyle, null, null);\n+        return getInstance(getDefaultPattern(), null, null);\n     }\n     \n     /**\n@@ -674,7 +675,7 @@\n                 } else {\n                     rule = new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.SHORT);\n                 }\n-                break;\n+                ;\n             case 'Z': // time zone (value)\n                 if (tokenLen == 1) {\n                     rule = TimeZoneNumberRule.INSTANCE_NO_COLON;\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 677, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "rule=UnpaddedMonthField.INSTANCE;"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 408, 
          "faulty": "return getDateTimeInstance(dateStyle,timeStyle,null,null);", 
          "type": "Replace", 
          "seed": "return getInstance(getDefaultPattern(),null,null);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 290, 
          "faulty": "FastDateFormat format=(FastDateFormat)cDateInstanceCache.get(key);", 
          "type": "Replace", 
          "seed": "FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:51:18.813128272 -0500\n+++ /tmp/Arja_Defects4J_Lang_50/patches_65h7/Patch_1122/patched/tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 03:00:31.267024874 -0500\n@@ -287,7 +287,8 @@\n         }\n \n \n-        FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n+        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache\n+\t\t\t\t.get(key);\n         if (format == null) {\n             if (locale == null) {\n                 locale = Locale.getDefault();\n@@ -405,7 +406,7 @@\n      */\n     public static FastDateFormat getDateTimeInstance(\n             int dateStyle, int timeStyle) {\n-        return getDateTimeInstance(dateStyle, timeStyle, null, null);\n+        return getInstance(getDefaultPattern(), null, null);\n     }\n     \n     /**\n@@ -459,9 +460,9 @@\n             Locale locale) {\n \n         Object key = new Pair(new Integer(dateStyle), new Integer(timeStyle));\n-        if (timeZone != null) {\n-            key = new Pair(key, timeZone);\n-        }\n+        if (cDefaultPattern == null) {\n+\t\t\tcDefaultPattern = new SimpleDateFormat().toPattern();\n+\t\t}\n         if (locale != null) {\n             key = new Pair(key, locale);\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 408, 
          "faulty": "return getDateTimeInstance(dateStyle,timeStyle,null,null);", 
          "type": "Replace", 
          "seed": "return getInstance(getDefaultPattern(),null,null);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 290, 
          "faulty": "FastDateFormat format=(FastDateFormat)cDateInstanceCache.get(key);", 
          "type": "Replace", 
          "seed": "FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 462, 
          "faulty": "if (timeZone != null) {\n  key=new Pair(key,timeZone);\n}", 
          "type": "Replace", 
          "seed": "if (cDefaultPattern == null) {\n  cDefaultPattern=new SimpleDateFormat().toPattern();\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:51:18.813128272 -0500\n+++ /tmp/Arja_Defects4J_Lang_50/patches_65h7/Patch_198/patched/tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:54:35.281804101 -0500\n@@ -287,7 +287,8 @@\n         }\n \n \n-        FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n+        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache\n+\t\t\t\t.get(key);\n         if (format == null) {\n             if (locale == null) {\n                 locale = Locale.getDefault();\n@@ -472,11 +473,15 @@\n                 locale = Locale.getDefault();\n             }\n             try {\n-                SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle,\n+                cInstanceCache.put(format, format);\n+\t\t\t\tSimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle,\n                         locale);\n                 String pattern = formatter.toPattern();\n                 format = getInstance(pattern, timeZone, locale);\n-                cDateTimeInstanceCache.put(key, format);\n+                if (pattern == null) {\n+\t\t\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\t\t\"The pattern must not be null\");\n+\t\t\t\t}\n \n             } catch (ClassCastException ex) {\n                 throw new IllegalArgumentException(\"No date time pattern for locale: \" + locale);\n@@ -645,7 +650,15 @@\n                 rule = selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                 break;\n             case 'E': // day in week (text)\n-                rule = new TextField(Calendar.DAY_OF_WEEK, tokenLen < 4 ? shortWeekdays : weekdays);\n+                {\n+\t\t\t\t\tif (tokenLen == 2) {\n+\t\t\t\t\t\trule = TwoDigitMonthField.INSTANCE;\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\trule = UnpaddedMonthField.INSTANCE;\n+\t\t\t\t\t}\n+\t\t\t\t\trule = new TextField(Calendar.DAY_OF_WEEK,\n+\t\t\t\t\t\t\ttokenLen < 4 ? shortWeekdays : weekdays);\n+\t\t\t\t}\n                 break;\n             case 'D': // day in year (number)\n                 rule = selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n@@ -674,7 +687,7 @@\n                 } else {\n                     rule = new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.SHORT);\n                 }\n-                break;\n+                ;\n             case 'Z': // time zone (value)\n                 if (tokenLen == 1) {\n                     rule = TimeZoneNumberRule.INSTANCE_NO_COLON;\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 648, 
          "faulty": "rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen < 4 ? shortWeekdays : weekdays);", 
          "type": "InsertBefore", 
          "seed": "if (tokenLen == 2) {\n  rule=TwoDigitMonthField.INSTANCE;\n}\n else {\n  rule=UnpaddedMonthField.INSTANCE;\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 677, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "rule=selectNumberRule(Calendar.SECOND,tokenLen);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 290, 
          "faulty": "FastDateFormat format=(FastDateFormat)cDateInstanceCache.get(key);", 
          "type": "Replace", 
          "seed": "FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 479, 
          "faulty": "cDateTimeInstanceCache.put(key,format);", 
          "type": "Replace", 
          "seed": "if (pattern == null) {\n  throw new IllegalArgumentException(\"The pattern must not be null\");\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 475, 
          "faulty": "SimpleDateFormat formatter=(SimpleDateFormat)DateFormat.getDateTimeInstance(dateStyle,timeStyle,locale);", 
          "type": "InsertBefore", 
          "seed": "cInstanceCache.put(format,format);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:51:18.813128272 -0500\n+++ /tmp/Arja_Defects4J_Lang_50/patches_65h7/Patch_1185/patched/tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 03:00:54.643104896 -0500\n@@ -278,7 +278,8 @@\n      */\n     public static synchronized FastDateFormat getDateInstance(int style, TimeZone timeZone, Locale locale) {\n         Object key = new Integer(style);\n-        if (timeZone != null) {\n+        cDefaultPattern = new SimpleDateFormat().toPattern();\n+\t\tif (timeZone != null) {\n             key = new Pair(key, timeZone);\n         }\n \n@@ -287,7 +288,8 @@\n         }\n \n \n-        FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n+        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache\n+\t\t\t\t.get(key);\n         if (format == null) {\n             if (locale == null) {\n                 locale = Locale.getDefault();\n@@ -472,11 +474,13 @@\n                 locale = Locale.getDefault();\n             }\n             try {\n-                SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle,\n+                if (locale == null) {\n+\t\t\t\t\tlocale = Locale.getDefault();\n+\t\t\t\t}\n+\t\t\t\tSimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle,\n                         locale);\n                 String pattern = formatter.toPattern();\n                 format = getInstance(pattern, timeZone, locale);\n-                cDateTimeInstanceCache.put(key, format);\n \n             } catch (ClassCastException ex) {\n                 throw new IllegalArgumentException(\"No date time pattern for locale: \" + locale);\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 290, 
          "faulty": "FastDateFormat format=(FastDateFormat)cDateInstanceCache.get(key);", 
          "type": "Replace", 
          "seed": "FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 479, 
          "faulty": "cDateTimeInstanceCache.put(key,format);", 
          "type": "Delete", 
          "seed": "timeZone=TimeZone.getDefault();"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 281, 
          "faulty": "if (timeZone != null) {\n  key=new Pair(key,timeZone);\n}", 
          "type": "InsertBefore", 
          "seed": "cDefaultPattern=new SimpleDateFormat().toPattern();"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 475, 
          "faulty": "SimpleDateFormat formatter=(SimpleDateFormat)DateFormat.getDateTimeInstance(dateStyle,timeStyle,locale);", 
          "type": "InsertBefore", 
          "seed": "if (locale == null) {\n  locale=Locale.getDefault();\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:51:18.813128272 -0500\n+++ /tmp/Arja_Defects4J_Lang_50/patches_65h7/Patch_1079/patched/tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 03:00:15.734971696 -0500\n@@ -287,7 +287,8 @@\n         }\n \n \n-        FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n+        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache\n+\t\t\t\t.get(key);\n         if (format == null) {\n             if (locale == null) {\n                 locale = Locale.getDefault();\n@@ -458,7 +459,8 @@\n     public static synchronized FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, TimeZone timeZone,\n             Locale locale) {\n \n-        Object key = new Pair(new Integer(dateStyle), new Integer(timeStyle));\n+        timeZone = TimeZone.getDefault();\n+\t\tObject key = new Pair(new Integer(dateStyle), new Integer(timeStyle));\n         if (timeZone != null) {\n             key = new Pair(key, timeZone);\n         }\n@@ -468,7 +470,10 @@\n \n         FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key);\n         if (format == null) {\n-            if (locale == null) {\n+            if (timeZone != null) {\n+\t\t\t\tkey = new Pair(key, timeZone);\n+\t\t\t}\n+\t\t\tif (locale == null) {\n                 locale = Locale.getDefault();\n             }\n             try {\n@@ -476,7 +481,7 @@\n                         locale);\n                 String pattern = formatter.toPattern();\n                 format = getInstance(pattern, timeZone, locale);\n-                cDateTimeInstanceCache.put(key, format);\n+                cDefaultPattern = new SimpleDateFormat().toPattern();\n \n             } catch (ClassCastException ex) {\n                 throw new IllegalArgumentException(\"No date time pattern for locale: \" + locale);\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 461, 
          "faulty": "Object key=new Pair(new Integer(dateStyle),new Integer(timeStyle));", 
          "type": "InsertBefore", 
          "seed": "timeZone=TimeZone.getDefault();"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 290, 
          "faulty": "FastDateFormat format=(FastDateFormat)cDateInstanceCache.get(key);", 
          "type": "Replace", 
          "seed": "FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 479, 
          "faulty": "cDateTimeInstanceCache.put(key,format);", 
          "type": "Replace", 
          "seed": "cDefaultPattern=new SimpleDateFormat().toPattern();"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 471, 
          "faulty": "if (locale == null) {\n  locale=Locale.getDefault();\n}", 
          "type": "InsertBefore", 
          "seed": "if (timeZone != null) {\n  key=new Pair(key,timeZone);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:51:18.813128272 -0500\n+++ /tmp/Arja_Defects4J_Lang_50/patches_65h7/Patch_1533/patched/tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 03:03:03.119544444 -0500\n@@ -287,7 +287,8 @@\n         }\n \n \n-        FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n+        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache\n+\t\t\t\t.get(key);\n         if (format == null) {\n             if (locale == null) {\n                 locale = Locale.getDefault();\n@@ -462,11 +463,7 @@\n         if (timeZone != null) {\n             key = new Pair(key, timeZone);\n         }\n-        if (locale != null) {\n-            key = new Pair(key, locale);\n-        }\n-\n-        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key);\n+        FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n         if (format == null) {\n             if (locale == null) {\n                 locale = Locale.getDefault();\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 469, 
          "faulty": "FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);", 
          "type": "Replace", 
          "seed": "FastDateFormat format=(FastDateFormat)cDateInstanceCache.get(key);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 290, 
          "faulty": "FastDateFormat format=(FastDateFormat)cDateInstanceCache.get(key);", 
          "type": "Replace", 
          "seed": "FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 465, 
          "faulty": "if (locale != null) {\n  key=new Pair(key,locale);\n}", 
          "type": "Delete", 
          "seed": "if (locale == null) {\n  locale=Locale.getDefault();\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:51:18.813128272 -0500\n+++ /tmp/Arja_Defects4J_Lang_50/patches_65h7/Patch_125/patched/tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:54:05.593702085 -0500\n@@ -287,7 +287,8 @@\n         }\n \n \n-        FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n+        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache\n+\t\t\t\t.get(key);\n         if (format == null) {\n             if (locale == null) {\n                 locale = Locale.getDefault();\n@@ -472,11 +473,15 @@\n                 locale = Locale.getDefault();\n             }\n             try {\n-                SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle,\n+                cInstanceCache.put(format, format);\n+\t\t\t\tSimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle,\n                         locale);\n                 String pattern = formatter.toPattern();\n                 format = getInstance(pattern, timeZone, locale);\n-                cDateTimeInstanceCache.put(key, format);\n+                if (pattern == null) {\n+\t\t\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\t\t\"The pattern must not be null\");\n+\t\t\t\t}\n \n             } catch (ClassCastException ex) {\n                 throw new IllegalArgumentException(\"No date time pattern for locale: \" + locale);\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 290, 
          "faulty": "FastDateFormat format=(FastDateFormat)cDateInstanceCache.get(key);", 
          "type": "Replace", 
          "seed": "FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 479, 
          "faulty": "cDateTimeInstanceCache.put(key,format);", 
          "type": "Replace", 
          "seed": "if (pattern == null) {\n  throw new IllegalArgumentException(\"The pattern must not be null\");\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 475, 
          "faulty": "SimpleDateFormat formatter=(SimpleDateFormat)DateFormat.getDateTimeInstance(dateStyle,timeStyle,locale);", 
          "type": "InsertBefore", 
          "seed": "cInstanceCache.put(format,format);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:51:18.813128272 -0500\n+++ /tmp/Arja_Defects4J_Lang_50/patches_65h7/Patch_721/patched/tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:58:03.998520364 -0500\n@@ -287,7 +287,8 @@\n         }\n \n \n-        FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n+        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache\n+\t\t\t\t.get(key);\n         if (format == null) {\n             if (locale == null) {\n                 locale = Locale.getDefault();\n@@ -302,7 +303,8 @@\n                 throw new IllegalArgumentException(\"No date pattern for locale: \" + locale);\n             }\n         }\n-        return format;\n+        cDefaultPattern = new SimpleDateFormat().toPattern();\n+\t\treturn format;\n     }\n \n     //-----------------------------------------------------------------------\n@@ -458,7 +460,10 @@\n     public static synchronized FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, TimeZone timeZone,\n             Locale locale) {\n \n-        Object key = new Pair(new Integer(dateStyle), new Integer(timeStyle));\n+        if (locale == null) {\n+\t\t\t\t\tlocale = Locale.getDefault();\n+\t\t\t\t}\n+\t\tObject key = new Pair(new Integer(dateStyle), new Integer(timeStyle));\n         if (timeZone != null) {\n             key = new Pair(key, timeZone);\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 305, 
          "faulty": "return format;", 
          "type": "InsertBefore", 
          "seed": "cDefaultPattern=new SimpleDateFormat().toPattern();"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 461, 
          "faulty": "Object key=new Pair(new Integer(dateStyle),new Integer(timeStyle));", 
          "type": "InsertBefore", 
          "seed": "if (locale == null) {\n  locale=Locale.getDefault();\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 290, 
          "faulty": "FastDateFormat format=(FastDateFormat)cDateInstanceCache.get(key);", 
          "type": "Replace", 
          "seed": "FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:51:18.813128272 -0500\n+++ /tmp/Arja_Defects4J_Lang_50/patches_65h7/Patch_1146/patched/tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 03:00:39.607053427 -0500\n@@ -282,12 +282,14 @@\n             key = new Pair(key, timeZone);\n         }\n \n-        if (locale != null) {\n+        key = new Pair(key, locale);\n+\t\tif (locale != null) {\n             key = new Pair(key, locale);\n         }\n \n \n-        FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n+        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache\n+\t\t\t\t.get(key);\n         if (format == null) {\n             if (locale == null) {\n                 locale = Locale.getDefault();\n@@ -476,7 +478,10 @@\n                         locale);\n                 String pattern = formatter.toPattern();\n                 format = getInstance(pattern, timeZone, locale);\n-                cDateTimeInstanceCache.put(key, format);\n+                if (pattern == null) {\n+\t\t\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\t\t\"The pattern must not be null\");\n+\t\t\t\t}\n \n             } catch (ClassCastException ex) {\n                 throw new IllegalArgumentException(\"No date time pattern for locale: \" + locale);\n@@ -617,7 +622,8 @@\n                 break;\n             case 'M': // month in year (text and number)\n                 if (tokenLen >= 4) {\n-                    rule = new TextField(Calendar.MONTH, months);\n+                    i = indexRef[0];\n+\t\t\t\t\trule = new TextField(Calendar.MONTH, months);\n                 } else if (tokenLen == 3) {\n                     rule = new TextField(Calendar.MONTH, shortMonths);\n                 } else if (tokenLen == 2) {\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 290, 
          "faulty": "FastDateFormat format=(FastDateFormat)cDateInstanceCache.get(key);", 
          "type": "Replace", 
          "seed": "FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 479, 
          "faulty": "cDateTimeInstanceCache.put(key,format);", 
          "type": "Replace", 
          "seed": "if (pattern == null) {\n  throw new IllegalArgumentException(\"The pattern must not be null\");\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 620, 
          "faulty": "rule=new TextField(Calendar.MONTH,months);", 
          "type": "InsertBefore", 
          "seed": "i=indexRef[0];"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 285, 
          "faulty": "if (locale != null) {\n  key=new Pair(key,locale);\n}", 
          "type": "InsertBefore", 
          "seed": "key=new Pair(key,locale);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:51:18.813128272 -0500\n+++ /tmp/Arja_Defects4J_Lang_50/patches_65h7/Patch_699/patched/tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:57:56.326494063 -0500\n@@ -287,7 +287,8 @@\n         }\n \n \n-        FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n+        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache\n+\t\t\t\t.get(key);\n         if (format == null) {\n             if (locale == null) {\n                 locale = Locale.getDefault();\n@@ -458,7 +459,10 @@\n     public static synchronized FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, TimeZone timeZone,\n             Locale locale) {\n \n-        Object key = new Pair(new Integer(dateStyle), new Integer(timeStyle));\n+        if (locale == null) {\n+\t\t\t\t\tlocale = Locale.getDefault();\n+\t\t\t\t}\n+\t\tObject key = new Pair(new Integer(dateStyle), new Integer(timeStyle));\n         if (timeZone != null) {\n             key = new Pair(key, timeZone);\n         }\n@@ -468,9 +472,6 @@\n \n         FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key);\n         if (format == null) {\n-            if (locale == null) {\n-                locale = Locale.getDefault();\n-            }\n             try {\n                 SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle,\n                         locale);\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 461, 
          "faulty": "Object key=new Pair(new Integer(dateStyle),new Integer(timeStyle));", 
          "type": "InsertBefore", 
          "seed": "if (locale == null) {\n  locale=Locale.getDefault();\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 290, 
          "faulty": "FastDateFormat format=(FastDateFormat)cDateInstanceCache.get(key);", 
          "type": "Replace", 
          "seed": "FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 471, 
          "faulty": "if (locale == null) {\n  locale=Locale.getDefault();\n}", 
          "type": "Delete", 
          "seed": "timeZone=TimeZone.getDefault();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:51:18.813128272 -0500\n+++ /tmp/Arja_Defects4J_Lang_50/patches_65h7/Patch_1473/patched/tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 03:02:40.703467783 -0500\n@@ -287,7 +287,8 @@\n         }\n \n \n-        FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n+        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache\n+\t\t\t\t.get(key);\n         if (format == null) {\n             if (locale == null) {\n                 locale = Locale.getDefault();\n@@ -1724,11 +1725,7 @@\n \n             Pair key = (Pair)obj;\n \n-            return\n-                (mObj1 == null ?\n-                 key.mObj1 == null : mObj1.equals(key.mObj1)) &&\n-                (mObj2 == null ?\n-                 key.mObj2 == null : mObj2.equals(key.mObj2));\n+            return false;\n         }\n \n         /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 290, 
          "faulty": "FastDateFormat format=(FastDateFormat)cDateInstanceCache.get(key);", 
          "type": "Replace", 
          "seed": "FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 1727, 
          "faulty": "return (mObj1 == null ? key.mObj1 == null : mObj1.equals(key.mObj1)) && (mObj2 == null ? key.mObj2 == null : mObj2.equals(key.mObj2));", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:51:18.813128272 -0500\n+++ /tmp/Arja_Defects4J_Lang_50/patches_65h7/Patch_1076/patched/tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 03:00:14.934968956 -0500\n@@ -287,7 +287,8 @@\n         }\n \n \n-        FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n+        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache\n+\t\t\t\t.get(key);\n         if (format == null) {\n             if (locale == null) {\n                 locale = Locale.getDefault();\n@@ -458,7 +459,10 @@\n     public static synchronized FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, TimeZone timeZone,\n             Locale locale) {\n \n-        Object key = new Pair(new Integer(dateStyle), new Integer(timeStyle));\n+        if (locale == null) {\n+\t\t\t\t\tlocale = Locale.getDefault();\n+\t\t\t\t}\n+\t\tObject key = new Pair(new Integer(dateStyle), new Integer(timeStyle));\n         if (timeZone != null) {\n             key = new Pair(key, timeZone);\n         }\n@@ -476,7 +480,6 @@\n                         locale);\n                 String pattern = formatter.toPattern();\n                 format = getInstance(pattern, timeZone, locale);\n-                cDateTimeInstanceCache.put(key, format);\n \n             } catch (ClassCastException ex) {\n                 throw new IllegalArgumentException(\"No date time pattern for locale: \" + locale);\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 461, 
          "faulty": "Object key=new Pair(new Integer(dateStyle),new Integer(timeStyle));", 
          "type": "InsertBefore", 
          "seed": "if (locale == null) {\n  locale=Locale.getDefault();\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 290, 
          "faulty": "FastDateFormat format=(FastDateFormat)cDateInstanceCache.get(key);", 
          "type": "Replace", 
          "seed": "FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 479, 
          "faulty": "cDateTimeInstanceCache.put(key,format);", 
          "type": "Delete", 
          "seed": "timeZone=TimeZone.getDefault();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:51:18.813128272 -0500\n+++ /tmp/Arja_Defects4J_Lang_50/patches_65h7/Patch_1064/patched/tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 03:00:10.902955151 -0500\n@@ -287,7 +287,8 @@\n         }\n \n \n-        FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n+        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache\n+\t\t\t\t.get(key);\n         if (format == null) {\n             if (locale == null) {\n                 locale = Locale.getDefault();\n@@ -405,7 +406,7 @@\n      */\n     public static FastDateFormat getDateTimeInstance(\n             int dateStyle, int timeStyle) {\n-        return getDateTimeInstance(dateStyle, timeStyle, null, null);\n+        return getInstance(getDefaultPattern(), null, null);\n     }\n     \n     /**\n@@ -617,7 +618,8 @@\n                 break;\n             case 'M': // month in year (text and number)\n                 if (tokenLen >= 4) {\n-                    rule = new TextField(Calendar.MONTH, months);\n+                    i = indexRef[0];\n+\t\t\t\t\trule = new TextField(Calendar.MONTH, months);\n                 } else if (tokenLen == 3) {\n                     rule = new TextField(Calendar.MONTH, shortMonths);\n                 } else if (tokenLen == 2) {\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 408, 
          "faulty": "return getDateTimeInstance(dateStyle,timeStyle,null,null);", 
          "type": "Replace", 
          "seed": "return getInstance(getDefaultPattern(),null,null);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 290, 
          "faulty": "FastDateFormat format=(FastDateFormat)cDateInstanceCache.get(key);", 
          "type": "Replace", 
          "seed": "FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 620, 
          "faulty": "rule=new TextField(Calendar.MONTH,months);", 
          "type": "InsertBefore", 
          "seed": "i=indexRef[0];"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:51:18.813128272 -0500\n+++ /tmp/Arja_Defects4J_Lang_50/patches_65h7/Patch_1422/patched/tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 03:02:23.031407339 -0500\n@@ -283,11 +283,11 @@\n         }\n \n         if (locale != null) {\n-            key = new Pair(key, locale);\n         }\n \n \n-        FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n+        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache\n+\t\t\t\t.get(key);\n         if (format == null) {\n             if (locale == null) {\n                 locale = Locale.getDefault();\n@@ -462,10 +462,6 @@\n         if (timeZone != null) {\n             key = new Pair(key, timeZone);\n         }\n-        if (locale != null) {\n-            key = new Pair(key, locale);\n-        }\n-\n         FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key);\n         if (format == null) {\n             if (locale == null) {\n@@ -476,7 +472,6 @@\n                         locale);\n                 String pattern = formatter.toPattern();\n                 format = getInstance(pattern, timeZone, locale);\n-                cDateTimeInstanceCache.put(key, format);\n \n             } catch (ClassCastException ex) {\n                 throw new IllegalArgumentException(\"No date time pattern for locale: \" + locale);\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 286, 
          "faulty": "key=new Pair(key,locale);", 
          "type": "Delete", 
          "seed": "if (locale == null) {\n  locale=Locale.getDefault();\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 290, 
          "faulty": "FastDateFormat format=(FastDateFormat)cDateInstanceCache.get(key);", 
          "type": "Replace", 
          "seed": "FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 479, 
          "faulty": "cDateTimeInstanceCache.put(key,format);", 
          "type": "Delete", 
          "seed": "timeZone=TimeZone.getDefault();"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 465, 
          "faulty": "if (locale != null) {\n  key=new Pair(key,locale);\n}", 
          "type": "Delete", 
          "seed": "key=new Pair(key,locale);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:51:18.813128272 -0500\n+++ /tmp/Arja_Defects4J_Lang_50/patches_65h7/Patch_927/patched/tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:59:20.826783643 -0500\n@@ -287,7 +287,8 @@\n         }\n \n \n-        FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n+        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache\n+\t\t\t\t.get(key);\n         if (format == null) {\n             if (locale == null) {\n                 locale = Locale.getDefault();\n@@ -405,7 +406,10 @@\n      */\n     public static FastDateFormat getDateTimeInstance(\n             int dateStyle, int timeStyle) {\n-        return getDateTimeInstance(dateStyle, timeStyle, null, null);\n+        if (cDefaultPattern == null) {\n+\t\t\t\t\tcDefaultPattern = new SimpleDateFormat().toPattern();\n+\t\t\t\t}\n+\t\treturn getDateTimeInstance(dateStyle, timeStyle, null, null);\n     }\n     \n     /**\n@@ -458,7 +462,10 @@\n     public static synchronized FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, TimeZone timeZone,\n             Locale locale) {\n \n-        Object key = new Pair(new Integer(dateStyle), new Integer(timeStyle));\n+        if (locale == null) {\n+\t\t\t\t\tlocale = Locale.getDefault();\n+\t\t\t\t}\n+\t\tObject key = new Pair(new Integer(dateStyle), new Integer(timeStyle));\n         if (timeZone != null) {\n             key = new Pair(key, timeZone);\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 408, 
          "faulty": "return getDateTimeInstance(dateStyle,timeStyle,null,null);", 
          "type": "InsertBefore", 
          "seed": "if (cDefaultPattern == null) {\n  cDefaultPattern=new SimpleDateFormat().toPattern();\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 461, 
          "faulty": "Object key=new Pair(new Integer(dateStyle),new Integer(timeStyle));", 
          "type": "InsertBefore", 
          "seed": "if (locale == null) {\n  locale=Locale.getDefault();\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 290, 
          "faulty": "FastDateFormat format=(FastDateFormat)cDateInstanceCache.get(key);", 
          "type": "Replace", 
          "seed": "FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:51:18.813128272 -0500\n+++ /tmp/Arja_Defects4J_Lang_50/patches_65h7/Patch_941/patched/tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:59:25.638800128 -0500\n@@ -287,7 +287,8 @@\n         }\n \n \n-        FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n+        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache\n+\t\t\t\t.get(key);\n         if (format == null) {\n             if (locale == null) {\n                 locale = Locale.getDefault();\n@@ -405,7 +406,7 @@\n      */\n     public static FastDateFormat getDateTimeInstance(\n             int dateStyle, int timeStyle) {\n-        return getDateTimeInstance(dateStyle, timeStyle, null, null);\n+        return getInstance(getDefaultPattern(), null, null);\n     }\n     \n     /**\n@@ -474,7 +475,8 @@\n             try {\n                 SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle,\n                         locale);\n-                String pattern = formatter.toPattern();\n+                cInstanceCache.put(format, format);\n+\t\t\t\tString pattern = formatter.toPattern();\n                 format = getInstance(pattern, timeZone, locale);\n                 cDateTimeInstanceCache.put(key, format);\n \n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 477, 
          "faulty": "String pattern=formatter.toPattern();", 
          "type": "InsertBefore", 
          "seed": "cInstanceCache.put(format,format);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 408, 
          "faulty": "return getDateTimeInstance(dateStyle,timeStyle,null,null);", 
          "type": "Replace", 
          "seed": "return getInstance(getDefaultPattern(),null,null);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 290, 
          "faulty": "FastDateFormat format=(FastDateFormat)cDateInstanceCache.get(key);", 
          "type": "Replace", 
          "seed": "FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:51:18.813128272 -0500\n+++ /tmp/Arja_Defects4J_Lang_50/patches_65h7/Patch_811/patched/tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:58:36.734632569 -0500\n@@ -287,7 +287,8 @@\n         }\n \n \n-        FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n+        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache\n+\t\t\t\t.get(key);\n         if (format == null) {\n             if (locale == null) {\n                 locale = Locale.getDefault();\n@@ -463,10 +464,13 @@\n             key = new Pair(key, timeZone);\n         }\n         if (locale != null) {\n-            key = new Pair(key, locale);\n+            if (timeZone != null) {\n+\t\t\t\tkey = new Pair(key, timeZone);\n+\t\t\t}\n+\t\t\tkey = new Pair(key, locale);\n         }\n \n-        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key);\n+        FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n         if (format == null) {\n             if (locale == null) {\n                 locale = Locale.getDefault();\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 469, 
          "faulty": "FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);", 
          "type": "Replace", 
          "seed": "FastDateFormat format=(FastDateFormat)cDateInstanceCache.get(key);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 290, 
          "faulty": "FastDateFormat format=(FastDateFormat)cDateInstanceCache.get(key);", 
          "type": "Replace", 
          "seed": "FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 466, 
          "faulty": "key=new Pair(key,locale);", 
          "type": "InsertBefore", 
          "seed": "if (timeZone != null) {\n  key=new Pair(key,timeZone);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:51:18.813128272 -0500\n+++ /tmp/Arja_Defects4J_Lang_50/patches_65h7/Patch_933/patched/tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:59:22.834790523 -0500\n@@ -287,7 +287,8 @@\n         }\n \n \n-        FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n+        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache\n+\t\t\t\t.get(key);\n         if (format == null) {\n             if (locale == null) {\n                 locale = Locale.getDefault();\n@@ -458,7 +459,10 @@\n     public static synchronized FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, TimeZone timeZone,\n             Locale locale) {\n \n-        Object key = new Pair(new Integer(dateStyle), new Integer(timeStyle));\n+        if (locale == null) {\n+\t\t\t\t\tlocale = Locale.getDefault();\n+\t\t\t\t}\n+\t\tObject key = new Pair(new Integer(dateStyle), new Integer(timeStyle));\n         if (timeZone != null) {\n             key = new Pair(key, timeZone);\n         }\n@@ -475,14 +479,16 @@\n                 SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle,\n                         locale);\n                 String pattern = formatter.toPattern();\n-                format = getInstance(pattern, timeZone, locale);\n+                cDateInstanceCache.put(key, format);\n+\t\t\t\tformat = getInstance(pattern, timeZone, locale);\n                 cDateTimeInstanceCache.put(key, format);\n \n             } catch (ClassCastException ex) {\n                 throw new IllegalArgumentException(\"No date time pattern for locale: \" + locale);\n             }\n         }\n-        return format;\n+        key = new Pair(key, locale);\n+\t\treturn format;\n     }\n \n     //-----------------------------------------------------------------------\n@@ -674,7 +680,7 @@\n                 } else {\n                     rule = new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.SHORT);\n                 }\n-                break;\n+                ;\n             case 'Z': // time zone (value)\n                 if (tokenLen == 1) {\n                     rule = TimeZoneNumberRule.INSTANCE_NO_COLON;\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 677, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "if (tokenLen >= 4) {\n  rule=selectNumberRule(Calendar.YEAR,tokenLen);\n}\n else {\n  rule=TwoDigitYearField.INSTANCE;\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 478, 
          "faulty": "format=getInstance(pattern,timeZone,locale);", 
          "type": "InsertBefore", 
          "seed": "cDateInstanceCache.put(key,format);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 461, 
          "faulty": "Object key=new Pair(new Integer(dateStyle),new Integer(timeStyle));", 
          "type": "InsertBefore", 
          "seed": "if (locale == null) {\n  locale=Locale.getDefault();\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 290, 
          "faulty": "FastDateFormat format=(FastDateFormat)cDateInstanceCache.get(key);", 
          "type": "Replace", 
          "seed": "FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 485, 
          "faulty": "return format;", 
          "type": "InsertBefore", 
          "seed": "key=new Pair(key,locale);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:51:18.813128272 -0500\n+++ /tmp/Arja_Defects4J_Lang_50/patches_65h7/Patch_276/patched/tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:55:12.753932816 -0500\n@@ -287,7 +287,8 @@\n         }\n \n \n-        FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n+        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache\n+\t\t\t\t.get(key);\n         if (format == null) {\n             if (locale == null) {\n                 locale = Locale.getDefault();\n@@ -462,10 +463,6 @@\n         if (timeZone != null) {\n             key = new Pair(key, timeZone);\n         }\n-        if (locale != null) {\n-            key = new Pair(key, locale);\n-        }\n-\n         FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key);\n         if (format == null) {\n             if (locale == null) {\n@@ -476,7 +473,10 @@\n                         locale);\n                 String pattern = formatter.toPattern();\n                 format = getInstance(pattern, timeZone, locale);\n-                cDateTimeInstanceCache.put(key, format);\n+                if (pattern == null) {\n+\t\t\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\t\t\"The pattern must not be null\");\n+\t\t\t\t}\n \n             } catch (ClassCastException ex) {\n                 throw new IllegalArgumentException(\"No date time pattern for locale: \" + locale);\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 290, 
          "faulty": "FastDateFormat format=(FastDateFormat)cDateInstanceCache.get(key);", 
          "type": "Replace", 
          "seed": "FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 479, 
          "faulty": "cDateTimeInstanceCache.put(key,format);", 
          "type": "Replace", 
          "seed": "if (pattern == null) {\n  throw new IllegalArgumentException(\"The pattern must not be null\");\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 465, 
          "faulty": "if (locale != null) {\n  key=new Pair(key,locale);\n}", 
          "type": "Delete", 
          "seed": "if (timeZone != null) {\n  key=new Pair(key,timeZone);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:51:18.813128272 -0500\n+++ /tmp/Arja_Defects4J_Lang_50/patches_65h7/Patch_724/patched/tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:58:04.790523080 -0500\n@@ -290,7 +290,7 @@\n         FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n         if (format == null) {\n             if (locale == null) {\n-                locale = Locale.getDefault();\n+                return getInstance(getDefaultPattern(), null, null);\n             }\n             try {\n                 SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateInstance(style, locale);\n@@ -476,7 +476,6 @@\n                         locale);\n                 String pattern = formatter.toPattern();\n                 format = getInstance(pattern, timeZone, locale);\n-                cDateTimeInstanceCache.put(key, format);\n \n             } catch (ClassCastException ex) {\n                 throw new IllegalArgumentException(\"No date time pattern for locale: \" + locale);\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 293, 
          "faulty": "locale=Locale.getDefault();", 
          "type": "Replace", 
          "seed": "return getInstance(getDefaultPattern(),null,null);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 479, 
          "faulty": "cDateTimeInstanceCache.put(key,format);", 
          "type": "Delete", 
          "seed": "return getDateTimeInstance(dateStyle,timeStyle,null,locale);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:51:18.813128272 -0500\n+++ /tmp/Arja_Defects4J_Lang_50/patches_65h7/Patch_1499/patched/tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 03:02:50.531501395 -0500\n@@ -277,17 +277,20 @@\n      *  pattern defined\n      */\n     public static synchronized FastDateFormat getDateInstance(int style, TimeZone timeZone, Locale locale) {\n-        Object key = new Integer(style);\n+        if (cDefaultPattern == null) {\n+\t\t\tcDefaultPattern = new SimpleDateFormat().toPattern();\n+\t\t}\n+\t\tObject key = new Integer(style);\n         if (timeZone != null) {\n             key = new Pair(key, timeZone);\n         }\n \n         if (locale != null) {\n-            key = new Pair(key, locale);\n         }\n \n \n-        FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n+        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache\n+\t\t\t\t.get(key);\n         if (format == null) {\n             if (locale == null) {\n                 locale = Locale.getDefault();\n@@ -476,7 +479,7 @@\n                         locale);\n                 String pattern = formatter.toPattern();\n                 format = getInstance(pattern, timeZone, locale);\n-                cDateTimeInstanceCache.put(key, format);\n+                timeZone = TimeZone.getDefault();\n \n             } catch (ClassCastException ex) {\n                 throw new IllegalArgumentException(\"No date time pattern for locale: \" + locale);\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 280, 
          "faulty": "Object key=new Integer(style);", 
          "type": "InsertBefore", 
          "seed": "if (cDefaultPattern == null) {\n  cDefaultPattern=new SimpleDateFormat().toPattern();\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 286, 
          "faulty": "key=new Pair(key,locale);", 
          "type": "Delete", 
          "seed": "if (locale == null) {\n  locale=Locale.getDefault();\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 290, 
          "faulty": "FastDateFormat format=(FastDateFormat)cDateInstanceCache.get(key);", 
          "type": "Replace", 
          "seed": "FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 479, 
          "faulty": "cDateTimeInstanceCache.put(key,format);", 
          "type": "Replace", 
          "seed": "timeZone=TimeZone.getDefault();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:51:18.813128272 -0500\n+++ /tmp/Arja_Defects4J_Lang_50/patches_65h7/Patch_1672/patched/tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 03:03:55.971725143 -0500\n@@ -287,7 +287,8 @@\n         }\n \n \n-        FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n+        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache\n+\t\t\t\t.get(key);\n         if (format == null) {\n             if (locale == null) {\n                 locale = Locale.getDefault();\n@@ -405,7 +406,7 @@\n      */\n     public static FastDateFormat getDateTimeInstance(\n             int dateStyle, int timeStyle) {\n-        return getDateTimeInstance(dateStyle, timeStyle, null, null);\n+        return getInstance(getDefaultPattern(), null, null);\n     }\n     \n     /**\n@@ -462,13 +463,12 @@\n         if (timeZone != null) {\n             key = new Pair(key, timeZone);\n         }\n-        if (locale != null) {\n-            key = new Pair(key, locale);\n-        }\n-\n         FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key);\n         if (format == null) {\n             if (locale == null) {\n+\t\t\t\tlocale = Locale.getDefault();\n+\t\t\t}\n+\t\t\tif (locale == null) {\n                 locale = Locale.getDefault();\n             }\n             try {\n@@ -1714,7 +1714,8 @@\n          * {@inheritDoc}\n          */\n         public boolean equals(Object obj) {\n-            if (this == obj) {\n+            cDefaultPattern = new SimpleDateFormat().toPattern();\n+\t\t\tif (this == obj) {\n                 return true;\n             }\n \n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 1717, 
          "faulty": "if (this == obj) {\n  return true;\n}", 
          "type": "InsertBefore", 
          "seed": "cDefaultPattern=new SimpleDateFormat().toPattern();"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 408, 
          "faulty": "return getDateTimeInstance(dateStyle,timeStyle,null,null);", 
          "type": "Replace", 
          "seed": "return getInstance(getDefaultPattern(),null,null);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 290, 
          "faulty": "FastDateFormat format=(FastDateFormat)cDateInstanceCache.get(key);", 
          "type": "Replace", 
          "seed": "FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 465, 
          "faulty": "if (locale != null) {\n  key=new Pair(key,locale);\n}", 
          "type": "Delete", 
          "seed": "if (locale == null) {\n  locale=Locale.getDefault();\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 471, 
          "faulty": "if (locale == null) {\n  locale=Locale.getDefault();\n}", 
          "type": "InsertBefore", 
          "seed": "if (locale == null) {\n  locale=Locale.getDefault();\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:51:18.813128272 -0500\n+++ /tmp/Arja_Defects4J_Lang_50/patches_65h7/Patch_1418/patched/tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 03:02:21.843403275 -0500\n@@ -287,7 +287,8 @@\n         }\n \n \n-        FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n+        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache\n+\t\t\t\t.get(key);\n         if (format == null) {\n             if (locale == null) {\n                 locale = Locale.getDefault();\n@@ -405,7 +406,7 @@\n      */\n     public static FastDateFormat getDateTimeInstance(\n             int dateStyle, int timeStyle) {\n-        return getDateTimeInstance(dateStyle, timeStyle, null, null);\n+        return getInstance(getDefaultPattern(), null, null);\n     }\n     \n     /**\n@@ -466,7 +467,8 @@\n             key = new Pair(key, locale);\n         }\n \n-        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key);\n+        key = new Pair(key, locale);\n+\t\tFastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key);\n         if (format == null) {\n             if (locale == null) {\n                 locale = Locale.getDefault();\n@@ -1714,7 +1716,10 @@\n          * {@inheritDoc}\n          */\n         public boolean equals(Object obj) {\n-            if (this == obj) {\n+            if (obj instanceof FastDateFormat == false) {\n+\t\t\t\treturn false;\n+\t\t\t}\n+\t\t\tif (this == obj) {\n                 return true;\n             }\n \n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 1717, 
          "faulty": "if (this == obj) {\n  return true;\n}", 
          "type": "InsertBefore", 
          "seed": "if (obj instanceof FastDateFormat == false) {\n  return false;\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 469, 
          "faulty": "FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);", 
          "type": "InsertBefore", 
          "seed": "key=new Pair(key,locale);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 408, 
          "faulty": "return getDateTimeInstance(dateStyle,timeStyle,null,null);", 
          "type": "Replace", 
          "seed": "return getInstance(getDefaultPattern(),null,null);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 290, 
          "faulty": "FastDateFormat format=(FastDateFormat)cDateInstanceCache.get(key);", 
          "type": "Replace", 
          "seed": "FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:51:18.813128272 -0500\n+++ /tmp/Arja_Defects4J_Lang_50/patches_65h7/Patch_1319/patched/tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 03:01:43.763272999 -0500\n@@ -287,7 +287,8 @@\n         }\n \n \n-        FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n+        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache\n+\t\t\t\t.get(key);\n         if (format == null) {\n             if (locale == null) {\n                 locale = Locale.getDefault();\n@@ -458,7 +459,8 @@\n     public static synchronized FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, TimeZone timeZone,\n             Locale locale) {\n \n-        Object key = new Pair(new Integer(dateStyle), new Integer(timeStyle));\n+        timeZone = TimeZone.getDefault();\n+\t\tObject key = new Pair(new Integer(dateStyle), new Integer(timeStyle));\n         if (timeZone != null) {\n             key = new Pair(key, timeZone);\n         }\n@@ -476,7 +478,6 @@\n                         locale);\n                 String pattern = formatter.toPattern();\n                 format = getInstance(pattern, timeZone, locale);\n-                cDateTimeInstanceCache.put(key, format);\n \n             } catch (ClassCastException ex) {\n                 throw new IllegalArgumentException(\"No date time pattern for locale: \" + locale);\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 461, 
          "faulty": "Object key=new Pair(new Integer(dateStyle),new Integer(timeStyle));", 
          "type": "InsertBefore", 
          "seed": "timeZone=TimeZone.getDefault();"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 290, 
          "faulty": "FastDateFormat format=(FastDateFormat)cDateInstanceCache.get(key);", 
          "type": "Replace", 
          "seed": "FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 479, 
          "faulty": "cDateTimeInstanceCache.put(key,format);", 
          "type": "Delete", 
          "seed": "timeZone=TimeZone.getDefault();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:51:18.813128272 -0500\n+++ /tmp/Arja_Defects4J_Lang_50/patches_65h7/Patch_598/patched/tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:57:16.590357808 -0500\n@@ -278,16 +278,13 @@\n      */\n     public static synchronized FastDateFormat getDateInstance(int style, TimeZone timeZone, Locale locale) {\n         Object key = new Integer(style);\n-        if (timeZone != null) {\n-            key = new Pair(key, timeZone);\n-        }\n-\n         if (locale != null) {\n             key = new Pair(key, locale);\n         }\n \n \n-        FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n+        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache\n+\t\t\t\t.get(key);\n         if (format == null) {\n             if (locale == null) {\n                 locale = Locale.getDefault();\n@@ -1714,7 +1711,10 @@\n          * {@inheritDoc}\n          */\n         public boolean equals(Object obj) {\n-            if (this == obj) {\n+            if (obj instanceof FastDateFormat == false) {\n+\t\t\t\treturn false;\n+\t\t\t}\n+\t\t\tif (this == obj) {\n                 return true;\n             }\n \n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 1717, 
          "faulty": "if (this == obj) {\n  return true;\n}", 
          "type": "InsertBefore", 
          "seed": "if (obj instanceof FastDateFormat == false) {\n  return false;\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 290, 
          "faulty": "FastDateFormat format=(FastDateFormat)cDateInstanceCache.get(key);", 
          "type": "Replace", 
          "seed": "FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 281, 
          "faulty": "if (timeZone != null) {\n  key=new Pair(key,timeZone);\n}", 
          "type": "Delete", 
          "seed": "key=new Pair(key,locale);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:51:18.813128272 -0500\n+++ /tmp/Arja_Defects4J_Lang_50/patches_65h7/Patch_627/patched/tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:57:27.986396890 -0500\n@@ -287,7 +287,8 @@\n         }\n \n \n-        FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n+        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache\n+\t\t\t\t.get(key);\n         if (format == null) {\n             if (locale == null) {\n                 locale = Locale.getDefault();\n@@ -458,7 +459,10 @@\n     public static synchronized FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, TimeZone timeZone,\n             Locale locale) {\n \n-        Object key = new Pair(new Integer(dateStyle), new Integer(timeStyle));\n+        if (locale == null) {\n+\t\t\t\t\tlocale = Locale.getDefault();\n+\t\t\t\t}\n+\t\tObject key = new Pair(new Integer(dateStyle), new Integer(timeStyle));\n         if (timeZone != null) {\n             key = new Pair(key, timeZone);\n         }\n@@ -674,7 +678,7 @@\n                 } else {\n                     rule = new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.SHORT);\n                 }\n-                break;\n+                ;\n             case 'Z': // time zone (value)\n                 if (tokenLen == 1) {\n                     rule = TimeZoneNumberRule.INSTANCE_NO_COLON;\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 677, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "if (tokenLen >= 4) {\n  rule=selectNumberRule(Calendar.YEAR,tokenLen);\n}\n else {\n  rule=TwoDigitYearField.INSTANCE;\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 461, 
          "faulty": "Object key=new Pair(new Integer(dateStyle),new Integer(timeStyle));", 
          "type": "InsertBefore", 
          "seed": "if (locale == null) {\n  locale=Locale.getDefault();\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 290, 
          "faulty": "FastDateFormat format=(FastDateFormat)cDateInstanceCache.get(key);", 
          "type": "Replace", 
          "seed": "FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:51:18.813128272 -0500\n+++ /tmp/Arja_Defects4J_Lang_50/patches_65h7/Patch_1010/patched/tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:59:50.778886236 -0500\n@@ -283,11 +283,15 @@\n         }\n \n         if (locale != null) {\n-            key = new Pair(key, locale);\n+            if (locale == null) {\n+\t\t\t\tlocale = Locale.getDefault();\n+\t\t\t}\n+\t\t\tkey = new Pair(key, locale);\n         }\n \n \n-        FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n+        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache\n+\t\t\t\t.get(key);\n         if (format == null) {\n             if (locale == null) {\n                 locale = Locale.getDefault();\n@@ -466,7 +470,7 @@\n             key = new Pair(key, locale);\n         }\n \n-        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key);\n+        FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n         if (format == null) {\n             if (locale == null) {\n                 locale = Locale.getDefault();\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 469, 
          "faulty": "FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);", 
          "type": "Replace", 
          "seed": "FastDateFormat format=(FastDateFormat)cDateInstanceCache.get(key);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 286, 
          "faulty": "key=new Pair(key,locale);", 
          "type": "InsertBefore", 
          "seed": "if (locale == null) {\n  locale=Locale.getDefault();\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 290, 
          "faulty": "FastDateFormat format=(FastDateFormat)cDateInstanceCache.get(key);", 
          "type": "Replace", 
          "seed": "FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:51:18.813128272 -0500\n+++ /tmp/Arja_Defects4J_Lang_50/patches_65h7/Patch_1178/patched/tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 03:00:52.123096271 -0500\n@@ -287,7 +287,8 @@\n         }\n \n \n-        FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n+        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache\n+\t\t\t\t.get(key);\n         if (format == null) {\n             if (locale == null) {\n                 locale = Locale.getDefault();\n@@ -462,13 +463,10 @@\n         if (timeZone != null) {\n             key = new Pair(key, timeZone);\n         }\n-        if (locale != null) {\n-            key = new Pair(key, locale);\n-        }\n-\n-        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key);\n+        FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n         if (format == null) {\n-            if (locale == null) {\n+            key = new Pair(key, locale);\n+\t\t\tif (locale == null) {\n                 locale = Locale.getDefault();\n             }\n             try {\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 469, 
          "faulty": "FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);", 
          "type": "Replace", 
          "seed": "FastDateFormat format=(FastDateFormat)cDateInstanceCache.get(key);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 290, 
          "faulty": "FastDateFormat format=(FastDateFormat)cDateInstanceCache.get(key);", 
          "type": "Replace", 
          "seed": "FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 465, 
          "faulty": "if (locale != null) {\n  key=new Pair(key,locale);\n}", 
          "type": "Delete", 
          "seed": "if (locale == null) {\n  locale=Locale.getDefault();\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 471, 
          "faulty": "if (locale == null) {\n  locale=Locale.getDefault();\n}", 
          "type": "InsertBefore", 
          "seed": "key=new Pair(key,locale);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:51:18.813128272 -0500\n+++ /tmp/Arja_Defects4J_Lang_50/patches_65h7/Patch_404/patched/tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:56:01.714100908 -0500\n@@ -287,7 +287,8 @@\n         }\n \n \n-        FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n+        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache\n+\t\t\t\t.get(key);\n         if (format == null) {\n             if (locale == null) {\n                 locale = Locale.getDefault();\n@@ -1714,7 +1715,10 @@\n          * {@inheritDoc}\n          */\n         public boolean equals(Object obj) {\n-            if (this == obj) {\n+            if (obj instanceof FastDateFormat == false) {\n+\t\t\t\treturn false;\n+\t\t\t}\n+\t\t\tif (this == obj) {\n                 return true;\n             }\n \n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 1717, 
          "faulty": "if (this == obj) {\n  return true;\n}", 
          "type": "InsertBefore", 
          "seed": "if (obj instanceof FastDateFormat == false) {\n  return false;\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 290, 
          "faulty": "FastDateFormat format=(FastDateFormat)cDateInstanceCache.get(key);", 
          "type": "Replace", 
          "seed": "FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:51:18.813128272 -0500\n+++ /tmp/Arja_Defects4J_Lang_50/patches_65h7/Patch_466/patched/tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:56:24.686179746 -0500\n@@ -287,7 +287,8 @@\n         }\n \n \n-        FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n+        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache\n+\t\t\t\t.get(key);\n         if (format == null) {\n             if (locale == null) {\n                 locale = Locale.getDefault();\n@@ -405,7 +406,7 @@\n      */\n     public static FastDateFormat getDateTimeInstance(\n             int dateStyle, int timeStyle) {\n-        return getDateTimeInstance(dateStyle, timeStyle, null, null);\n+        return getInstance(getDefaultPattern(), null, null);\n     }\n     \n     /**\n@@ -466,7 +467,8 @@\n             key = new Pair(key, locale);\n         }\n \n-        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key);\n+        key = new Pair(key, locale);\n+\t\tFastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key);\n         if (format == null) {\n             if (locale == null) {\n                 locale = Locale.getDefault();\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 469, 
          "faulty": "FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);", 
          "type": "InsertBefore", 
          "seed": "key=new Pair(key,locale);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 408, 
          "faulty": "return getDateTimeInstance(dateStyle,timeStyle,null,null);", 
          "type": "Replace", 
          "seed": "return getInstance(getDefaultPattern(),null,null);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 290, 
          "faulty": "FastDateFormat format=(FastDateFormat)cDateInstanceCache.get(key);", 
          "type": "Replace", 
          "seed": "FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:51:18.813128272 -0500\n+++ /tmp/Arja_Defects4J_Lang_50/patches_65h7/Patch_1250/patched/tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 03:01:18.483186492 -0500\n@@ -287,7 +287,8 @@\n         }\n \n \n-        FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n+        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache\n+\t\t\t\t.get(key);\n         if (format == null) {\n             if (locale == null) {\n                 locale = Locale.getDefault();\n@@ -458,7 +459,8 @@\n     public static synchronized FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, TimeZone timeZone,\n             Locale locale) {\n \n-        Object key = new Pair(new Integer(dateStyle), new Integer(timeStyle));\n+        timeZone = TimeZone.getDefault();\n+\t\tObject key = new Pair(new Integer(dateStyle), new Integer(timeStyle));\n         if (timeZone != null) {\n             key = new Pair(key, timeZone);\n         }\n@@ -476,7 +478,6 @@\n                         locale);\n                 String pattern = formatter.toPattern();\n                 format = getInstance(pattern, timeZone, locale);\n-                cDateTimeInstanceCache.put(key, format);\n \n             } catch (ClassCastException ex) {\n                 throw new IllegalArgumentException(\"No date time pattern for locale: \" + locale);\n@@ -1718,7 +1719,10 @@\n                 return true;\n             }\n \n-            if (!(obj instanceof Pair)) {\n+            if (this == obj) {\n+\t\t\t\treturn true;\n+\t\t\t}\n+\t\t\tif (!(obj instanceof Pair)) {\n                 return false;\n             }\n \n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 1721, 
          "faulty": "if (!(obj instanceof Pair)) {\n  return false;\n}", 
          "type": "InsertBefore", 
          "seed": "if (this == obj) {\n  return true;\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 461, 
          "faulty": "Object key=new Pair(new Integer(dateStyle),new Integer(timeStyle));", 
          "type": "InsertBefore", 
          "seed": "timeZone=TimeZone.getDefault();"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 290, 
          "faulty": "FastDateFormat format=(FastDateFormat)cDateInstanceCache.get(key);", 
          "type": "Replace", 
          "seed": "FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 479, 
          "faulty": "cDateTimeInstanceCache.put(key,format);", 
          "type": "Delete", 
          "seed": "if (pattern == null) {\n  throw new IllegalArgumentException(\"The pattern must not be null\");\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:51:18.813128272 -0500\n+++ /tmp/Arja_Defects4J_Lang_50/patches_65h7/Patch_1590/patched/tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 03:03:25.127619696 -0500\n@@ -287,7 +287,8 @@\n         }\n \n \n-        FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n+        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache\n+\t\t\t\t.get(key);\n         if (format == null) {\n             if (locale == null) {\n                 locale = Locale.getDefault();\n@@ -458,7 +459,10 @@\n     public static synchronized FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, TimeZone timeZone,\n             Locale locale) {\n \n-        Object key = new Pair(new Integer(dateStyle), new Integer(timeStyle));\n+        if (locale == null) {\n+\t\t\t\t\tlocale = Locale.getDefault();\n+\t\t\t\t}\n+\t\tObject key = new Pair(new Integer(dateStyle), new Integer(timeStyle));\n         if (timeZone != null) {\n             key = new Pair(key, timeZone);\n         }\n@@ -475,7 +479,10 @@\n                 SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle,\n                         locale);\n                 String pattern = formatter.toPattern();\n-                format = getInstance(pattern, timeZone, locale);\n+                if (locale != null) {\n+\t\t\t\t\tkey = new Pair(key, locale);\n+\t\t\t\t}\n+\t\t\t\tformat = getInstance(pattern, timeZone, locale);\n                 cDateTimeInstanceCache.put(key, format);\n \n             } catch (ClassCastException ex) {\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 478, 
          "faulty": "format=getInstance(pattern,timeZone,locale);", 
          "type": "InsertBefore", 
          "seed": "if (locale != null) {\n  key=new Pair(key,locale);\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 461, 
          "faulty": "Object key=new Pair(new Integer(dateStyle),new Integer(timeStyle));", 
          "type": "InsertBefore", 
          "seed": "if (locale == null) {\n  locale=Locale.getDefault();\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 290, 
          "faulty": "FastDateFormat format=(FastDateFormat)cDateInstanceCache.get(key);", 
          "type": "Replace", 
          "seed": "FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:51:18.813128272 -0500\n+++ /tmp/Arja_Defects4J_Lang_50/patches_65h7/Patch_1208/patched/tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 03:01:02.887133115 -0500\n@@ -287,7 +287,8 @@\n         }\n \n \n-        FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n+        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache\n+\t\t\t\t.get(key);\n         if (format == null) {\n             if (locale == null) {\n                 locale = Locale.getDefault();\n@@ -458,7 +459,10 @@\n     public static synchronized FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, TimeZone timeZone,\n             Locale locale) {\n \n-        Object key = new Pair(new Integer(dateStyle), new Integer(timeStyle));\n+        if (locale == null) {\n+\t\t\t\t\tlocale = Locale.getDefault();\n+\t\t\t\t}\n+\t\tObject key = new Pair(new Integer(dateStyle), new Integer(timeStyle));\n         if (timeZone != null) {\n             key = new Pair(key, timeZone);\n         }\n@@ -474,7 +478,8 @@\n             try {\n                 SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle,\n                         locale);\n-                String pattern = formatter.toPattern();\n+                cInstanceCache.put(format, format);\n+\t\t\t\tString pattern = formatter.toPattern();\n                 format = getInstance(pattern, timeZone, locale);\n                 cDateTimeInstanceCache.put(key, format);\n \n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 477, 
          "faulty": "String pattern=formatter.toPattern();", 
          "type": "InsertBefore", 
          "seed": "cInstanceCache.put(format,format);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 461, 
          "faulty": "Object key=new Pair(new Integer(dateStyle),new Integer(timeStyle));", 
          "type": "InsertBefore", 
          "seed": "if (locale == null) {\n  locale=Locale.getDefault();\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 290, 
          "faulty": "FastDateFormat format=(FastDateFormat)cDateInstanceCache.get(key);", 
          "type": "Replace", 
          "seed": "FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:51:18.813128272 -0500\n+++ /tmp/Arja_Defects4J_Lang_50/patches_65h7/Patch_1288/patched/tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 03:01:32.107233115 -0500\n@@ -287,7 +287,8 @@\n         }\n \n \n-        FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n+        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache\n+\t\t\t\t.get(key);\n         if (format == null) {\n             if (locale == null) {\n                 locale = Locale.getDefault();\n@@ -476,7 +477,6 @@\n                         locale);\n                 String pattern = formatter.toPattern();\n                 format = getInstance(pattern, timeZone, locale);\n-                cDateTimeInstanceCache.put(key, format);\n \n             } catch (ClassCastException ex) {\n                 throw new IllegalArgumentException(\"No date time pattern for locale: \" + locale);\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 290, 
          "faulty": "FastDateFormat format=(FastDateFormat)cDateInstanceCache.get(key);", 
          "type": "Replace", 
          "seed": "FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 479, 
          "faulty": "cDateTimeInstanceCache.put(key,format);", 
          "type": "Delete", 
          "seed": "timeZone=TimeZone.getDefault();"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 249, 
          "faulty": "return getDateInstance(style,null,locale);", 
          "type": "Replace", 
          "seed": "return getDateInstance(style,null,locale);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:51:18.813128272 -0500\n+++ /tmp/Arja_Defects4J_Lang_50/patches_65h7/Patch_752/patched/tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:58:14.874557646 -0500\n@@ -287,7 +287,8 @@\n         }\n \n \n-        FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n+        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache\n+\t\t\t\t.get(key);\n         if (format == null) {\n             if (locale == null) {\n                 locale = Locale.getDefault();\n@@ -405,7 +406,7 @@\n      */\n     public static FastDateFormat getDateTimeInstance(\n             int dateStyle, int timeStyle) {\n-        return getDateTimeInstance(dateStyle, timeStyle, null, null);\n+        return getInstance(getDefaultPattern(), null, null);\n     }\n     \n     /**\n@@ -672,7 +673,7 @@\n                 if (tokenLen >= 4) {\n                     rule = new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.LONG);\n                 } else {\n-                    rule = new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.SHORT);\n+                    rule = new TextField(Calendar.MONTH, shortMonths);\n                 }\n                 break;\n             case 'Z': // time zone (value)\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 408, 
          "faulty": "return getDateTimeInstance(dateStyle,timeStyle,null,null);", 
          "type": "Replace", 
          "seed": "return getInstance(getDefaultPattern(),null,null);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 290, 
          "faulty": "FastDateFormat format=(FastDateFormat)cDateInstanceCache.get(key);", 
          "type": "Replace", 
          "seed": "FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 675, 
          "faulty": "rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);", 
          "type": "Replace", 
          "seed": "rule=new TextField(Calendar.MONTH,shortMonths);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:51:18.813128272 -0500\n+++ /tmp/Arja_Defects4J_Lang_50/patches_65h7/Patch_1665/patched/tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 03:03:53.595717021 -0500\n@@ -287,7 +287,8 @@\n         }\n \n \n-        FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n+        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache\n+\t\t\t\t.get(key);\n         if (format == null) {\n             if (locale == null) {\n                 locale = Locale.getDefault();\n@@ -405,7 +406,7 @@\n      */\n     public static FastDateFormat getDateTimeInstance(\n             int dateStyle, int timeStyle) {\n-        return getDateTimeInstance(dateStyle, timeStyle, null, null);\n+        return getInstance(getDefaultPattern(), null, null);\n     }\n     \n     /**\n@@ -476,7 +477,6 @@\n                         locale);\n                 String pattern = formatter.toPattern();\n                 format = getInstance(pattern, timeZone, locale);\n-                cDateTimeInstanceCache.put(key, format);\n \n             } catch (ClassCastException ex) {\n                 throw new IllegalArgumentException(\"No date time pattern for locale: \" + locale);\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 408, 
          "faulty": "return getDateTimeInstance(dateStyle,timeStyle,null,null);", 
          "type": "Replace", 
          "seed": "return getInstance(getDefaultPattern(),null,null);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 290, 
          "faulty": "FastDateFormat format=(FastDateFormat)cDateInstanceCache.get(key);", 
          "type": "Replace", 
          "seed": "FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 479, 
          "faulty": "cDateTimeInstanceCache.put(key,format);", 
          "type": "Delete", 
          "seed": "timeZone=TimeZone.getDefault();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:51:18.813128272 -0500\n+++ /tmp/Arja_Defects4J_Lang_50/patches_65h7/Patch_435/patched/tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:56:13.090139953 -0500\n@@ -283,11 +283,11 @@\n         }\n \n         if (locale != null) {\n-            key = new Pair(key, locale);\n         }\n \n \n-        FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n+        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache\n+\t\t\t\t.get(key);\n         if (format == null) {\n             if (locale == null) {\n                 locale = Locale.getDefault();\n@@ -405,7 +405,7 @@\n      */\n     public static FastDateFormat getDateTimeInstance(\n             int dateStyle, int timeStyle) {\n-        return getDateTimeInstance(dateStyle, timeStyle, null, null);\n+        return getInstance(getDefaultPattern(), null, null);\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 408, 
          "faulty": "return getDateTimeInstance(dateStyle,timeStyle,null,null);", 
          "type": "Replace", 
          "seed": "return getInstance(getDefaultPattern(),null,null);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 286, 
          "faulty": "key=new Pair(key,locale);", 
          "type": "Delete", 
          "seed": "throw new IllegalArgumentException(\"Date and Patterns must not be null\");"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 290, 
          "faulty": "FastDateFormat format=(FastDateFormat)cDateInstanceCache.get(key);", 
          "type": "Replace", 
          "seed": "FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:51:18.813128272 -0500\n+++ /tmp/Arja_Defects4J_Lang_50/patches_65h7/Patch_802/patched/tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:58:33.566621712 -0500\n@@ -287,8 +287,10 @@\n         }\n \n \n-        FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n-        if (format == null) {\n+        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache\n+\t\t\t\t.get(key);\n+        cDateInstanceCache.put(key, format);\n+\t\tif (format == null) {\n             if (locale == null) {\n                 locale = Locale.getDefault();\n             }\n@@ -405,7 +407,7 @@\n      */\n     public static FastDateFormat getDateTimeInstance(\n             int dateStyle, int timeStyle) {\n-        return getDateTimeInstance(dateStyle, timeStyle, null, null);\n+        return getInstance(getDefaultPattern(), null, null);\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 291, 
          "faulty": "if (format == null) {\n  if (locale == null) {\n    locale=Locale.getDefault();\n  }\n  try {\n    SimpleDateFormat formatter=(SimpleDateFormat)DateFormat.getDateInstance(style,locale);\n    String pattern=formatter.toPattern();\n    format=getInstance(pattern,timeZone,locale);\n    cDateInstanceCache.put(key,format);\n  }\n catch (  ClassCastException ex) {\n    throw new IllegalArgumentException(\"No date pattern for locale: \" + locale);\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "cDateInstanceCache.put(key,format);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 408, 
          "faulty": "return getDateTimeInstance(dateStyle,timeStyle,null,null);", 
          "type": "Replace", 
          "seed": "return getInstance(getDefaultPattern(),null,null);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 290, 
          "faulty": "FastDateFormat format=(FastDateFormat)cDateInstanceCache.get(key);", 
          "type": "Replace", 
          "seed": "FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:51:18.813128272 -0500\n+++ /tmp/Arja_Defects4J_Lang_50/patches_65h7/Patch_1069/patched/tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 03:00:12.522960697 -0500\n@@ -287,7 +287,8 @@\n         }\n \n \n-        FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n+        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache\n+\t\t\t\t.get(key);\n         if (format == null) {\n             if (locale == null) {\n                 locale = Locale.getDefault();\n@@ -405,7 +406,7 @@\n      */\n     public static FastDateFormat getDateTimeInstance(\n             int dateStyle, int timeStyle) {\n-        return getDateTimeInstance(dateStyle, timeStyle, null, null);\n+        return getInstance(getDefaultPattern(), null, null);\n     }\n     \n     /**\n@@ -1714,7 +1715,10 @@\n          * {@inheritDoc}\n          */\n         public boolean equals(Object obj) {\n-            if (this == obj) {\n+            if (obj instanceof FastDateFormat == false) {\n+\t\t\t\treturn false;\n+\t\t\t}\n+\t\t\tif (this == obj) {\n                 return true;\n             }\n \n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 1717, 
          "faulty": "if (this == obj) {\n  return true;\n}", 
          "type": "InsertBefore", 
          "seed": "if (obj instanceof FastDateFormat == false) {\n  return false;\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 408, 
          "faulty": "return getDateTimeInstance(dateStyle,timeStyle,null,null);", 
          "type": "Replace", 
          "seed": "return getInstance(getDefaultPattern(),null,null);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 290, 
          "faulty": "FastDateFormat format=(FastDateFormat)cDateInstanceCache.get(key);", 
          "type": "Replace", 
          "seed": "FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:51:18.813128272 -0500\n+++ /tmp/Arja_Defects4J_Lang_50/patches_65h7/Patch_1462/patched/tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 03:02:36.707454117 -0500\n@@ -287,7 +287,8 @@\n         }\n \n \n-        FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n+        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache\n+\t\t\t\t.get(key);\n         if (format == null) {\n             if (locale == null) {\n                 locale = Locale.getDefault();\n@@ -422,7 +423,10 @@\n      */\n     public static FastDateFormat getDateTimeInstance(\n             int dateStyle, int timeStyle, Locale locale) {\n-        return getDateTimeInstance(dateStyle, timeStyle, null, locale);\n+        if (locale == null) {\n+\t\t\t\t\tlocale = Locale.getDefault();\n+\t\t\t\t}\n+\t\treturn getDateTimeInstance(dateStyle, timeStyle, null, locale);\n     }\n     \n     /**\n@@ -458,7 +462,8 @@\n     public static synchronized FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, TimeZone timeZone,\n             Locale locale) {\n \n-        Object key = new Pair(new Integer(dateStyle), new Integer(timeStyle));\n+        timeZone = TimeZone.getDefault();\n+\t\tObject key = new Pair(new Integer(dateStyle), new Integer(timeStyle));\n         if (timeZone != null) {\n             key = new Pair(key, timeZone);\n         }\n@@ -476,7 +481,7 @@\n                         locale);\n                 String pattern = formatter.toPattern();\n                 format = getInstance(pattern, timeZone, locale);\n-                cDateTimeInstanceCache.put(key, format);\n+                cDefaultPattern = new SimpleDateFormat().toPattern();\n \n             } catch (ClassCastException ex) {\n                 throw new IllegalArgumentException(\"No date time pattern for locale: \" + locale);\n@@ -674,7 +679,7 @@\n                 } else {\n                     rule = new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.SHORT);\n                 }\n-                break;\n+                ;\n             case 'Z': // time zone (value)\n                 if (tokenLen == 1) {\n                     rule = TimeZoneNumberRule.INSTANCE_NO_COLON;\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 677, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "if (tokenLen == 1) {\n  rule=TimeZoneNumberRule.INSTANCE_NO_COLON;\n}\n else {\n  rule=TimeZoneNumberRule.INSTANCE_COLON;\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 461, 
          "faulty": "Object key=new Pair(new Integer(dateStyle),new Integer(timeStyle));", 
          "type": "InsertBefore", 
          "seed": "timeZone=TimeZone.getDefault();"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 290, 
          "faulty": "FastDateFormat format=(FastDateFormat)cDateInstanceCache.get(key);", 
          "type": "Replace", 
          "seed": "FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 479, 
          "faulty": "cDateTimeInstanceCache.put(key,format);", 
          "type": "Replace", 
          "seed": "cDefaultPattern=new SimpleDateFormat().toPattern();"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 425, 
          "faulty": "return getDateTimeInstance(dateStyle,timeStyle,null,locale);", 
          "type": "InsertBefore", 
          "seed": "if (locale == null) {\n  locale=Locale.getDefault();\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:51:18.813128272 -0500\n+++ /tmp/Arja_Defects4J_Lang_50/patches_65h7/Patch_992/patched/tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:59:44.422864468 -0500\n@@ -287,7 +287,8 @@\n         }\n \n \n-        FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n+        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache\n+\t\t\t\t.get(key);\n         if (format == null) {\n             if (locale == null) {\n                 locale = Locale.getDefault();\n@@ -476,7 +477,7 @@\n                         locale);\n                 String pattern = formatter.toPattern();\n                 format = getInstance(pattern, timeZone, locale);\n-                cDateTimeInstanceCache.put(key, format);\n+                cDefaultPattern = new SimpleDateFormat().toPattern();\n \n             } catch (ClassCastException ex) {\n                 throw new IllegalArgumentException(\"No date time pattern for locale: \" + locale);\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 290, 
          "faulty": "FastDateFormat format=(FastDateFormat)cDateInstanceCache.get(key);", 
          "type": "Replace", 
          "seed": "FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 479, 
          "faulty": "cDateTimeInstanceCache.put(key,format);", 
          "type": "Replace", 
          "seed": "cDefaultPattern=new SimpleDateFormat().toPattern();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:51:18.813128272 -0500\n+++ /tmp/Arja_Defects4J_Lang_50/patches_65h7/Patch_433/patched/tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:56:12.658138469 -0500\n@@ -287,7 +287,8 @@\n         }\n \n \n-        FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n+        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache\n+\t\t\t\t.get(key);\n         if (format == null) {\n             if (locale == null) {\n                 locale = Locale.getDefault();\n@@ -458,7 +459,10 @@\n     public static synchronized FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, TimeZone timeZone,\n             Locale locale) {\n \n-        Object key = new Pair(new Integer(dateStyle), new Integer(timeStyle));\n+        if (locale == null) {\n+\t\t\t\t\tlocale = Locale.getDefault();\n+\t\t\t\t}\n+\t\tObject key = new Pair(new Integer(dateStyle), new Integer(timeStyle));\n         if (timeZone != null) {\n             key = new Pair(key, timeZone);\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 461, 
          "faulty": "Object key=new Pair(new Integer(dateStyle),new Integer(timeStyle));", 
          "type": "InsertBefore", 
          "seed": "if (locale == null) {\n  locale=Locale.getDefault();\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 290, 
          "faulty": "FastDateFormat format=(FastDateFormat)cDateInstanceCache.get(key);", 
          "type": "Replace", 
          "seed": "FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:51:18.813128272 -0500\n+++ /tmp/Arja_Defects4J_Lang_50/patches_65h7/Patch_1430/patched/tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 03:02:25.435415562 -0500\n@@ -287,7 +287,8 @@\n         }\n \n \n-        FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n+        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache\n+\t\t\t\t.get(key);\n         if (format == null) {\n             if (locale == null) {\n                 locale = Locale.getDefault();\n@@ -405,7 +406,7 @@\n      */\n     public static FastDateFormat getDateTimeInstance(\n             int dateStyle, int timeStyle) {\n-        return getDateTimeInstance(dateStyle, timeStyle, null, null);\n+        return getInstance(getDefaultPattern(), null, null);\n     }\n     \n     /**\n@@ -458,7 +459,10 @@\n     public static synchronized FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, TimeZone timeZone,\n             Locale locale) {\n \n-        Object key = new Pair(new Integer(dateStyle), new Integer(timeStyle));\n+        if (locale == null) {\n+\t\t\t\t\tlocale = Locale.getDefault();\n+\t\t\t\t}\n+\t\tObject key = new Pair(new Integer(dateStyle), new Integer(timeStyle));\n         if (timeZone != null) {\n             key = new Pair(key, timeZone);\n         }\n@@ -466,7 +470,10 @@\n             key = new Pair(key, locale);\n         }\n \n-        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key);\n+        if (timeZone != null) {\n+\t\t\tkey = new Pair(key, timeZone);\n+\t\t}\n+\t\tFastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key);\n         if (format == null) {\n             if (locale == null) {\n                 locale = Locale.getDefault();\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 469, 
          "faulty": "FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);", 
          "type": "InsertBefore", 
          "seed": "if (timeZone != null) {\n  key=new Pair(key,timeZone);\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 408, 
          "faulty": "return getDateTimeInstance(dateStyle,timeStyle,null,null);", 
          "type": "Replace", 
          "seed": "return getInstance(getDefaultPattern(),null,null);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 461, 
          "faulty": "Object key=new Pair(new Integer(dateStyle),new Integer(timeStyle));", 
          "type": "InsertBefore", 
          "seed": "if (locale == null) {\n  locale=Locale.getDefault();\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 290, 
          "faulty": "FastDateFormat format=(FastDateFormat)cDateInstanceCache.get(key);", 
          "type": "Replace", 
          "seed": "FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:51:18.813128272 -0500\n+++ /tmp/Arja_Defects4J_Lang_50/patches_65h7/Patch_1445/patched/tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 03:02:30.619433294 -0500\n@@ -278,16 +278,15 @@\n      */\n     public static synchronized FastDateFormat getDateInstance(int style, TimeZone timeZone, Locale locale) {\n         Object key = new Integer(style);\n-        if (timeZone != null) {\n-            key = new Pair(key, timeZone);\n-        }\n+        cDefaultPattern = new SimpleDateFormat().toPattern();\n \n         if (locale != null) {\n             key = new Pair(key, locale);\n         }\n \n \n-        FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n+        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache\n+\t\t\t\t.get(key);\n         if (format == null) {\n             if (locale == null) {\n                 locale = Locale.getDefault();\n@@ -458,7 +457,10 @@\n     public static synchronized FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, TimeZone timeZone,\n             Locale locale) {\n \n-        Object key = new Pair(new Integer(dateStyle), new Integer(timeStyle));\n+        if (locale == null) {\n+\t\t\t\t\tlocale = Locale.getDefault();\n+\t\t\t\t}\n+\t\tObject key = new Pair(new Integer(dateStyle), new Integer(timeStyle));\n         if (timeZone != null) {\n             key = new Pair(key, timeZone);\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 461, 
          "faulty": "Object key=new Pair(new Integer(dateStyle),new Integer(timeStyle));", 
          "type": "InsertBefore", 
          "seed": "if (locale == null) {\n  locale=Locale.getDefault();\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 290, 
          "faulty": "FastDateFormat format=(FastDateFormat)cDateInstanceCache.get(key);", 
          "type": "Replace", 
          "seed": "FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 281, 
          "faulty": "if (timeZone != null) {\n  key=new Pair(key,timeZone);\n}", 
          "type": "Replace", 
          "seed": "cDefaultPattern=new SimpleDateFormat().toPattern();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:51:18.813128272 -0500\n+++ /tmp/Arja_Defects4J_Lang_50/patches_65h7/Patch_792/patched/tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:58:30.362610732 -0500\n@@ -287,7 +287,8 @@\n         }\n \n \n-        FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n+        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache\n+\t\t\t\t.get(key);\n         if (format == null) {\n             if (locale == null) {\n                 locale = Locale.getDefault();\n@@ -466,9 +467,12 @@\n             key = new Pair(key, locale);\n         }\n \n-        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key);\n+        FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n         if (format == null) {\n             if (locale == null) {\n+\t\t\t\tlocale = Locale.getDefault();\n+\t\t\t}\n+\t\t\tif (locale == null) {\n                 locale = Locale.getDefault();\n             }\n             try {\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 469, 
          "faulty": "FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);", 
          "type": "Replace", 
          "seed": "FastDateFormat format=(FastDateFormat)cDateInstanceCache.get(key);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 290, 
          "faulty": "FastDateFormat format=(FastDateFormat)cDateInstanceCache.get(key);", 
          "type": "Replace", 
          "seed": "FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 471, 
          "faulty": "if (locale == null) {\n  locale=Locale.getDefault();\n}", 
          "type": "InsertBefore", 
          "seed": "if (locale == null) {\n  locale=Locale.getDefault();\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:51:18.813128272 -0500\n+++ /tmp/Arja_Defects4J_Lang_50/patches_65h7/Patch_911/patched/tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:59:15.154764213 -0500\n@@ -287,7 +287,8 @@\n         }\n \n \n-        FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n+        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache\n+\t\t\t\t.get(key);\n         if (format == null) {\n             if (locale == null) {\n                 locale = Locale.getDefault();\n@@ -476,7 +477,6 @@\n                         locale);\n                 String pattern = formatter.toPattern();\n                 format = getInstance(pattern, timeZone, locale);\n-                cDateTimeInstanceCache.put(key, format);\n \n             } catch (ClassCastException ex) {\n                 throw new IllegalArgumentException(\"No date time pattern for locale: \" + locale);\n@@ -1735,9 +1735,7 @@\n          * {@inheritDoc}\n          */\n         public int hashCode() {\n-            return\n-                (mObj1 == null ? 0 : mObj1.hashCode()) +\n-                (mObj2 == null ? 0 : mObj2.hashCode());\n+            return 4;\n         }\n \n         /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 1738, 
          "faulty": "return (mObj1 == null ? 0 : mObj1.hashCode()) + (mObj2 == null ? 0 : mObj2.hashCode());", 
          "type": "Replace", 
          "seed": "return 4;"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 290, 
          "faulty": "FastDateFormat format=(FastDateFormat)cDateInstanceCache.get(key);", 
          "type": "Replace", 
          "seed": "FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 479, 
          "faulty": "cDateTimeInstanceCache.put(key,format);", 
          "type": "Delete", 
          "seed": "timeZone=TimeZone.getDefault();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:51:18.813128272 -0500\n+++ /tmp/Arja_Defects4J_Lang_50/patches_65h7/Patch_631/patched/tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:57:29.202401060 -0500\n@@ -287,7 +287,8 @@\n         }\n \n \n-        FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n+        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache\n+\t\t\t\t.get(key);\n         if (format == null) {\n             if (locale == null) {\n                 locale = Locale.getDefault();\n@@ -405,7 +406,7 @@\n      */\n     public static FastDateFormat getDateTimeInstance(\n             int dateStyle, int timeStyle) {\n-        return getDateTimeInstance(dateStyle, timeStyle, null, null);\n+        return getInstance(getDefaultPattern(), null, null);\n     }\n     \n     /**\n@@ -458,7 +459,10 @@\n     public static synchronized FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, TimeZone timeZone,\n             Locale locale) {\n \n-        Object key = new Pair(new Integer(dateStyle), new Integer(timeStyle));\n+        if (locale == null) {\n+\t\t\t\t\tlocale = Locale.getDefault();\n+\t\t\t\t}\n+\t\tObject key = new Pair(new Integer(dateStyle), new Integer(timeStyle));\n         if (timeZone != null) {\n             key = new Pair(key, timeZone);\n         }\n@@ -468,7 +472,8 @@\n \n         FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key);\n         if (format == null) {\n-            if (locale == null) {\n+            timeZone = TimeZone.getDefault();\n+\t\t\tif (locale == null) {\n                 locale = Locale.getDefault();\n             }\n             try {\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 408, 
          "faulty": "return getDateTimeInstance(dateStyle,timeStyle,null,null);", 
          "type": "Replace", 
          "seed": "return getInstance(getDefaultPattern(),null,null);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 461, 
          "faulty": "Object key=new Pair(new Integer(dateStyle),new Integer(timeStyle));", 
          "type": "InsertBefore", 
          "seed": "if (locale == null) {\n  locale=Locale.getDefault();\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 290, 
          "faulty": "FastDateFormat format=(FastDateFormat)cDateInstanceCache.get(key);", 
          "type": "Replace", 
          "seed": "FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 471, 
          "faulty": "if (locale == null) {\n  locale=Locale.getDefault();\n}", 
          "type": "InsertBefore", 
          "seed": "timeZone=TimeZone.getDefault();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:51:18.813128272 -0500\n+++ /tmp/Arja_Defects4J_Lang_50/patches_65h7/Patch_1266/patched/tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 03:01:24.431206847 -0500\n@@ -287,7 +287,8 @@\n         }\n \n \n-        FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n+        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache\n+\t\t\t\t.get(key);\n         if (format == null) {\n             if (locale == null) {\n                 locale = Locale.getDefault();\n@@ -405,7 +406,7 @@\n      */\n     public static FastDateFormat getDateTimeInstance(\n             int dateStyle, int timeStyle) {\n-        return getDateTimeInstance(dateStyle, timeStyle, null, null);\n+        return getInstance(getDefaultPattern(), null, null);\n     }\n     \n     /**\n@@ -1722,7 +1723,8 @@\n                 return false;\n             }\n \n-            Pair key = (Pair)obj;\n+            cDefaultPattern = new SimpleDateFormat().toPattern();\n+\t\t\tPair key = (Pair)obj;\n \n             return\n                 (mObj1 == null ?\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 408, 
          "faulty": "return getDateTimeInstance(dateStyle,timeStyle,null,null);", 
          "type": "Replace", 
          "seed": "return getInstance(getDefaultPattern(),null,null);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 290, 
          "faulty": "FastDateFormat format=(FastDateFormat)cDateInstanceCache.get(key);", 
          "type": "Replace", 
          "seed": "FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 1725, 
          "faulty": "Pair key=(Pair)obj;", 
          "type": "InsertBefore", 
          "seed": "cDefaultPattern=new SimpleDateFormat().toPattern();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:51:18.813128272 -0500\n+++ /tmp/Arja_Defects4J_Lang_50/patches_65h7/Patch_799/patched/tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:58:32.770618984 -0500\n@@ -287,7 +287,8 @@\n         }\n \n \n-        FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n+        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache\n+\t\t\t\t.get(key);\n         if (format == null) {\n             if (locale == null) {\n                 locale = Locale.getDefault();\n@@ -466,7 +467,8 @@\n             key = new Pair(key, locale);\n         }\n \n-        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key);\n+        timeZone = TimeZone.getDefault();\n+\t\tFastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key);\n         if (format == null) {\n             if (locale == null) {\n                 locale = Locale.getDefault();\n@@ -476,7 +478,10 @@\n                         locale);\n                 String pattern = formatter.toPattern();\n                 format = getInstance(pattern, timeZone, locale);\n-                cDateTimeInstanceCache.put(key, format);\n+                if (pattern == null) {\n+\t\t\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\t\t\"The pattern must not be null\");\n+\t\t\t\t}\n \n             } catch (ClassCastException ex) {\n                 throw new IllegalArgumentException(\"No date time pattern for locale: \" + locale);\n@@ -1724,11 +1729,8 @@\n \n             Pair key = (Pair)obj;\n \n-            return\n-                (mObj1 == null ?\n-                 key.mObj1 == null : mObj1.equals(key.mObj1)) &&\n-                (mObj2 == null ?\n-                 key.mObj2 == null : mObj2.equals(key.mObj2));\n+            throw new IllegalStateException(\n+\t\t\t\t\t\"Stopwatch must be running to suspend. \");\n         }\n \n         /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 469, 
          "faulty": "FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);", 
          "type": "InsertBefore", 
          "seed": "timeZone=TimeZone.getDefault();"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 290, 
          "faulty": "FastDateFormat format=(FastDateFormat)cDateInstanceCache.get(key);", 
          "type": "Replace", 
          "seed": "FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 479, 
          "faulty": "cDateTimeInstanceCache.put(key,format);", 
          "type": "Replace", 
          "seed": "if (pattern == null) {\n  throw new IllegalArgumentException(\"The pattern must not be null\");\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 1727, 
          "faulty": "return (mObj1 == null ? key.mObj1 == null : mObj1.equals(key.mObj1)) && (mObj2 == null ? key.mObj2 == null : mObj2.equals(key.mObj2));", 
          "type": "Replace", 
          "seed": "throw new IllegalStateException(\"Stopwatch must be running to suspend. \");"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:51:18.813128272 -0500\n+++ /tmp/Arja_Defects4J_Lang_50/patches_65h7/Patch_1085/patched/tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 03:00:17.698978421 -0500\n@@ -287,7 +287,8 @@\n         }\n \n \n-        FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n+        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache\n+\t\t\t\t.get(key);\n         if (format == null) {\n             if (locale == null) {\n                 locale = Locale.getDefault();\n@@ -476,7 +477,6 @@\n                         locale);\n                 String pattern = formatter.toPattern();\n                 format = getInstance(pattern, timeZone, locale);\n-                cDateTimeInstanceCache.put(key, format);\n \n             } catch (ClassCastException ex) {\n                 throw new IllegalArgumentException(\"No date time pattern for locale: \" + locale);\n@@ -1714,10 +1714,6 @@\n          * {@inheritDoc}\n          */\n         public boolean equals(Object obj) {\n-            if (this == obj) {\n-                return true;\n-            }\n-\n             if (!(obj instanceof Pair)) {\n                 return false;\n             }\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 1717, 
          "faulty": "if (this == obj) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "if (obj instanceof FastDateFormat == false) {\n  return false;\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 290, 
          "faulty": "FastDateFormat format=(FastDateFormat)cDateInstanceCache.get(key);", 
          "type": "Replace", 
          "seed": "FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 479, 
          "faulty": "cDateTimeInstanceCache.put(key,format);", 
          "type": "Delete", 
          "seed": "timeZone=TimeZone.getDefault();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:51:18.813128272 -0500\n+++ /tmp/Arja_Defects4J_Lang_50/patches_65h7/Patch_969/patched/tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:59:35.870835176 -0500\n@@ -287,7 +287,8 @@\n         }\n \n \n-        FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n+        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache\n+\t\t\t\t.get(key);\n         if (format == null) {\n             if (locale == null) {\n                 locale = Locale.getDefault();\n@@ -405,7 +406,7 @@\n      */\n     public static FastDateFormat getDateTimeInstance(\n             int dateStyle, int timeStyle) {\n-        return getDateTimeInstance(dateStyle, timeStyle, null, null);\n+        return getInstance(getDefaultPattern(), null, null);\n     }\n     \n     /**\n@@ -462,10 +463,6 @@\n         if (timeZone != null) {\n             key = new Pair(key, timeZone);\n         }\n-        if (locale != null) {\n-            key = new Pair(key, locale);\n-        }\n-\n         FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key);\n         if (format == null) {\n             if (locale == null) {\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 408, 
          "faulty": "return getDateTimeInstance(dateStyle,timeStyle,null,null);", 
          "type": "Replace", 
          "seed": "return getInstance(getDefaultPattern(),null,null);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 290, 
          "faulty": "FastDateFormat format=(FastDateFormat)cDateInstanceCache.get(key);", 
          "type": "Replace", 
          "seed": "FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 465, 
          "faulty": "if (locale != null) {\n  key=new Pair(key,locale);\n}", 
          "type": "Delete", 
          "seed": "if (locale == null) {\n  locale=Locale.getDefault();\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:51:18.813128272 -0500\n+++ /tmp/Arja_Defects4J_Lang_50/patches_65h7/Patch_1528/patched/tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 03:03:01.547539068 -0500\n@@ -287,7 +287,8 @@\n         }\n \n \n-        FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n+        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache\n+\t\t\t\t.get(key);\n         if (format == null) {\n             if (locale == null) {\n                 locale = Locale.getDefault();\n@@ -405,7 +406,7 @@\n      */\n     public static FastDateFormat getDateTimeInstance(\n             int dateStyle, int timeStyle) {\n-        return getDateTimeInstance(dateStyle, timeStyle, null, null);\n+        return getInstance(getDefaultPattern(), null, null);\n     }\n     \n     /**\n@@ -469,7 +470,9 @@\n         FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key);\n         if (format == null) {\n             if (locale == null) {\n-                locale = Locale.getDefault();\n+                if (timeZone == null) {\n+\t\t\t\t\ttimeZone = TimeZone.getDefault();\n+\t\t\t\t}\n             }\n             try {\n                 SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle,\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 472, 
          "faulty": "locale=Locale.getDefault();", 
          "type": "Replace", 
          "seed": "if (timeZone == null) {\n  timeZone=TimeZone.getDefault();\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 408, 
          "faulty": "return getDateTimeInstance(dateStyle,timeStyle,null,null);", 
          "type": "Replace", 
          "seed": "return getInstance(getDefaultPattern(),null,null);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 290, 
          "faulty": "FastDateFormat format=(FastDateFormat)cDateInstanceCache.get(key);", 
          "type": "Replace", 
          "seed": "FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:51:18.813128272 -0500\n+++ /tmp/Arja_Defects4J_Lang_50/patches_65h7/Patch_1452/patched/tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 03:02:32.999441434 -0500\n@@ -287,7 +287,8 @@\n         }\n \n \n-        FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n+        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache\n+\t\t\t\t.get(key);\n         if (format == null) {\n             if (locale == null) {\n                 locale = Locale.getDefault();\n@@ -458,12 +459,18 @@\n     public static synchronized FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, TimeZone timeZone,\n             Locale locale) {\n \n-        Object key = new Pair(new Integer(dateStyle), new Integer(timeStyle));\n+        if (locale == null) {\n+\t\t\t\t\tlocale = Locale.getDefault();\n+\t\t\t\t}\n+\t\tObject key = new Pair(new Integer(dateStyle), new Integer(timeStyle));\n         if (timeZone != null) {\n             key = new Pair(key, timeZone);\n         }\n         if (locale != null) {\n-            key = new Pair(key, locale);\n+            if (timeZone != null) {\n+\t\t\t\tkey = new Pair(key, timeZone);\n+\t\t\t}\n+\t\t\tkey = new Pair(key, locale);\n         }\n \n         FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key);\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 461, 
          "faulty": "Object key=new Pair(new Integer(dateStyle),new Integer(timeStyle));", 
          "type": "InsertBefore", 
          "seed": "if (locale == null) {\n  locale=Locale.getDefault();\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 290, 
          "faulty": "FastDateFormat format=(FastDateFormat)cDateInstanceCache.get(key);", 
          "type": "Replace", 
          "seed": "FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 466, 
          "faulty": "key=new Pair(key,locale);", 
          "type": "InsertBefore", 
          "seed": "if (timeZone != null) {\n  key=new Pair(key,timeZone);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:51:18.813128272 -0500\n+++ /tmp/Arja_Defects4J_Lang_50/patches_65h7/Patch_1140/patched/tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 03:00:37.599046552 -0500\n@@ -287,7 +287,8 @@\n         }\n \n \n-        FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n+        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache\n+\t\t\t\t.get(key);\n         if (format == null) {\n             if (locale == null) {\n                 locale = Locale.getDefault();\n@@ -476,7 +477,7 @@\n                         locale);\n                 String pattern = formatter.toPattern();\n                 format = getInstance(pattern, timeZone, locale);\n-                cDateTimeInstanceCache.put(key, format);\n+                timeZone = TimeZone.getDefault();\n \n             } catch (ClassCastException ex) {\n                 throw new IllegalArgumentException(\"No date time pattern for locale: \" + locale);\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 290, 
          "faulty": "FastDateFormat format=(FastDateFormat)cDateInstanceCache.get(key);", 
          "type": "Replace", 
          "seed": "FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 479, 
          "faulty": "cDateTimeInstanceCache.put(key,format);", 
          "type": "Replace", 
          "seed": "timeZone=TimeZone.getDefault();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:51:18.813128272 -0500\n+++ /tmp/Arja_Defects4J_Lang_50/patches_65h7/Patch_1386/patched/tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 03:02:09.887362377 -0500\n@@ -287,7 +287,8 @@\n         }\n \n \n-        FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n+        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache\n+\t\t\t\t.get(key);\n         if (format == null) {\n             if (locale == null) {\n                 locale = Locale.getDefault();\n@@ -302,7 +303,10 @@\n                 throw new IllegalArgumentException(\"No date pattern for locale: \" + locale);\n             }\n         }\n-        return format;\n+        if (timeZone != null) {\n+\t\t\tkey = new Pair(key, timeZone);\n+\t\t}\n+\t\treturn format;\n     }\n \n     //-----------------------------------------------------------------------\n@@ -405,7 +409,7 @@\n      */\n     public static FastDateFormat getDateTimeInstance(\n             int dateStyle, int timeStyle) {\n-        return getDateTimeInstance(dateStyle, timeStyle, null, null);\n+        return getInstance(getDefaultPattern(), null, null);\n     }\n     \n     /**\n@@ -463,7 +467,8 @@\n             key = new Pair(key, timeZone);\n         }\n         if (locale != null) {\n-            key = new Pair(key, locale);\n+            cDefaultPattern = new SimpleDateFormat().toPattern();\n+\t\t\tkey = new Pair(key, locale);\n         }\n \n         FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key);\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 305, 
          "faulty": "return format;", 
          "type": "InsertBefore", 
          "seed": "if (timeZone != null) {\n  key=new Pair(key,timeZone);\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 408, 
          "faulty": "return getDateTimeInstance(dateStyle,timeStyle,null,null);", 
          "type": "Replace", 
          "seed": "return getInstance(getDefaultPattern(),null,null);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 290, 
          "faulty": "FastDateFormat format=(FastDateFormat)cDateInstanceCache.get(key);", 
          "type": "Replace", 
          "seed": "FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 466, 
          "faulty": "key=new Pair(key,locale);", 
          "type": "InsertBefore", 
          "seed": "cDefaultPattern=new SimpleDateFormat().toPattern();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:51:18.813128272 -0500\n+++ /tmp/Arja_Defects4J_Lang_50/patches_65h7/Patch_984/patched/tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:59:41.518854521 -0500\n@@ -287,8 +287,10 @@\n         }\n \n \n-        FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n-        if (format == null) {\n+        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache\n+\t\t\t\t.get(key);\n+        cInstanceCache.put(format, format);\n+\t\tif (format == null) {\n             if (locale == null) {\n                 locale = Locale.getDefault();\n             }\n@@ -476,7 +478,6 @@\n                         locale);\n                 String pattern = formatter.toPattern();\n                 format = getInstance(pattern, timeZone, locale);\n-                cDateTimeInstanceCache.put(key, format);\n \n             } catch (ClassCastException ex) {\n                 throw new IllegalArgumentException(\"No date time pattern for locale: \" + locale);\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 291, 
          "faulty": "if (format == null) {\n  if (locale == null) {\n    locale=Locale.getDefault();\n  }\n  try {\n    SimpleDateFormat formatter=(SimpleDateFormat)DateFormat.getDateInstance(style,locale);\n    String pattern=formatter.toPattern();\n    format=getInstance(pattern,timeZone,locale);\n    cDateInstanceCache.put(key,format);\n  }\n catch (  ClassCastException ex) {\n    throw new IllegalArgumentException(\"No date pattern for locale: \" + locale);\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "cInstanceCache.put(format,format);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 290, 
          "faulty": "FastDateFormat format=(FastDateFormat)cDateInstanceCache.get(key);", 
          "type": "Replace", 
          "seed": "FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 479, 
          "faulty": "cDateTimeInstanceCache.put(key,format);", 
          "type": "Delete", 
          "seed": "return getInstance(getDefaultPattern(),null,null);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:51:18.813128272 -0500\n+++ /tmp/Arja_Defects4J_Lang_50/patches_65h7/Patch_1370/patched/tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 03:02:03.775341467 -0500\n@@ -287,7 +287,8 @@\n         }\n \n \n-        FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n+        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache\n+\t\t\t\t.get(key);\n         if (format == null) {\n             if (locale == null) {\n                 locale = Locale.getDefault();\n@@ -476,7 +477,6 @@\n                         locale);\n                 String pattern = formatter.toPattern();\n                 format = getInstance(pattern, timeZone, locale);\n-                cDateTimeInstanceCache.put(key, format);\n \n             } catch (ClassCastException ex) {\n                 throw new IllegalArgumentException(\"No date time pattern for locale: \" + locale);\n@@ -674,7 +674,7 @@\n                 } else {\n                     rule = new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.SHORT);\n                 }\n-                break;\n+                rule = selectNumberRule(Calendar.SECOND, tokenLen);\n             case 'Z': // time zone (value)\n                 if (tokenLen == 1) {\n                     rule = TimeZoneNumberRule.INSTANCE_NO_COLON;\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 677, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "rule=selectNumberRule(Calendar.SECOND,tokenLen);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 290, 
          "faulty": "FastDateFormat format=(FastDateFormat)cDateInstanceCache.get(key);", 
          "type": "Replace", 
          "seed": "FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 479, 
          "faulty": "cDateTimeInstanceCache.put(key,format);", 
          "type": "Delete", 
          "seed": "throw new UnsupportedOperationException();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:51:18.813128272 -0500\n+++ /tmp/Arja_Defects4J_Lang_50/patches_65h7/Patch_1286/patched/tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 03:01:31.671231622 -0500\n@@ -287,7 +287,8 @@\n         }\n \n \n-        FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n+        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache\n+\t\t\t\t.get(key);\n         if (format == null) {\n             if (locale == null) {\n                 locale = Locale.getDefault();\n@@ -458,8 +459,12 @@\n     public static synchronized FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, TimeZone timeZone,\n             Locale locale) {\n \n-        Object key = new Pair(new Integer(dateStyle), new Integer(timeStyle));\n-        if (timeZone != null) {\n+        if (locale == null) {\n+\t\t\t\t\tlocale = Locale.getDefault();\n+\t\t\t\t}\n+\t\tObject key = new Pair(new Integer(dateStyle), new Integer(timeStyle));\n+        key = new Pair(key, locale);\n+\t\tif (timeZone != null) {\n             key = new Pair(key, timeZone);\n         }\n         if (locale != null) {\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 461, 
          "faulty": "Object key=new Pair(new Integer(dateStyle),new Integer(timeStyle));", 
          "type": "InsertBefore", 
          "seed": "if (locale == null) {\n  locale=Locale.getDefault();\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 290, 
          "faulty": "FastDateFormat format=(FastDateFormat)cDateInstanceCache.get(key);", 
          "type": "Replace", 
          "seed": "FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 462, 
          "faulty": "if (timeZone != null) {\n  key=new Pair(key,timeZone);\n}", 
          "type": "InsertBefore", 
          "seed": "key=new Pair(key,locale);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:51:18.813128272 -0500\n+++ /tmp/Arja_Defects4J_Lang_50/patches_65h7/Patch_447/patched/tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:56:17.170153955 -0500\n@@ -277,17 +277,17 @@\n      *  pattern defined\n      */\n     public static synchronized FastDateFormat getDateInstance(int style, TimeZone timeZone, Locale locale) {\n-        Object key = new Integer(style);\n-        if (timeZone != null) {\n-            key = new Pair(key, timeZone);\n-        }\n-\n+        if (cDefaultPattern == null) {\n+\t\t\tcDefaultPattern = new SimpleDateFormat().toPattern();\n+\t\t}\n+\t\tObject key = new Integer(style);\n         if (locale != null) {\n             key = new Pair(key, locale);\n         }\n \n \n-        FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n+        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache\n+\t\t\t\t.get(key);\n         if (format == null) {\n             if (locale == null) {\n                 locale = Locale.getDefault();\n@@ -405,7 +405,7 @@\n      */\n     public static FastDateFormat getDateTimeInstance(\n             int dateStyle, int timeStyle) {\n-        return getDateTimeInstance(dateStyle, timeStyle, null, null);\n+        return getInstance(getDefaultPattern(), null, null);\n     }\n     \n     /**\n@@ -1722,7 +1722,8 @@\n                 return false;\n             }\n \n-            Pair key = (Pair)obj;\n+            cDefaultPattern = new SimpleDateFormat().toPattern();\n+\t\t\tPair key = (Pair)obj;\n \n             return\n                 (mObj1 == null ?\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 280, 
          "faulty": "Object key=new Integer(style);", 
          "type": "InsertBefore", 
          "seed": "if (cDefaultPattern == null) {\n  cDefaultPattern=new SimpleDateFormat().toPattern();\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 408, 
          "faulty": "return getDateTimeInstance(dateStyle,timeStyle,null,null);", 
          "type": "Replace", 
          "seed": "return getInstance(getDefaultPattern(),null,null);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 290, 
          "faulty": "FastDateFormat format=(FastDateFormat)cDateInstanceCache.get(key);", 
          "type": "Replace", 
          "seed": "FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 1725, 
          "faulty": "Pair key=(Pair)obj;", 
          "type": "InsertBefore", 
          "seed": "cDefaultPattern=new SimpleDateFormat().toPattern();"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 281, 
          "faulty": "if (timeZone != null) {\n  key=new Pair(key,timeZone);\n}", 
          "type": "Delete", 
          "seed": "if (timeZone == null) {\n  timeZone=TimeZone.getDefault();\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:51:18.813128272 -0500\n+++ /tmp/Arja_Defects4J_Lang_50/patches_65h7/Patch_733/patched/tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:58:07.982534022 -0500\n@@ -287,7 +287,8 @@\n         }\n \n \n-        FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n+        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache\n+\t\t\t\t.get(key);\n         if (format == null) {\n             if (locale == null) {\n                 locale = Locale.getDefault();\n@@ -466,7 +467,7 @@\n             key = new Pair(key, locale);\n         }\n \n-        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key);\n+        FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n         if (format == null) {\n             if (locale == null) {\n                 locale = Locale.getDefault();\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 469, 
          "faulty": "FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);", 
          "type": "Replace", 
          "seed": "FastDateFormat format=(FastDateFormat)cDateInstanceCache.get(key);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 290, 
          "faulty": "FastDateFormat format=(FastDateFormat)cDateInstanceCache.get(key);", 
          "type": "Replace", 
          "seed": "FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:51:18.813128272 -0500\n+++ /tmp/Arja_Defects4J_Lang_50/patches_65h7/Patch_742/patched/tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:58:11.190545019 -0500\n@@ -283,11 +283,15 @@\n         }\n \n         if (locale != null) {\n-            key = new Pair(key, locale);\n+            if (locale == null) {\n+\t\t\t\tlocale = Locale.getDefault();\n+\t\t\t}\n+\t\t\tkey = new Pair(key, locale);\n         }\n \n \n-        FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n+        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache\n+\t\t\t\t.get(key);\n         if (format == null) {\n             if (locale == null) {\n                 locale = Locale.getDefault();\n@@ -476,7 +480,6 @@\n                         locale);\n                 String pattern = formatter.toPattern();\n                 format = getInstance(pattern, timeZone, locale);\n-                cDateTimeInstanceCache.put(key, format);\n \n             } catch (ClassCastException ex) {\n                 throw new IllegalArgumentException(\"No date time pattern for locale: \" + locale);\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 286, 
          "faulty": "key=new Pair(key,locale);", 
          "type": "InsertBefore", 
          "seed": "if (locale == null) {\n  locale=Locale.getDefault();\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 290, 
          "faulty": "FastDateFormat format=(FastDateFormat)cDateInstanceCache.get(key);", 
          "type": "Replace", 
          "seed": "FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 479, 
          "faulty": "cDateTimeInstanceCache.put(key,format);", 
          "type": "Delete", 
          "seed": "timeZone=TimeZone.getDefault();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:51:18.813128272 -0500\n+++ /tmp/Arja_Defects4J_Lang_50/patches_65h7/Patch_1414/patched/tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 03:02:20.623399102 -0500\n@@ -287,7 +287,8 @@\n         }\n \n \n-        FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n+        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache\n+\t\t\t\t.get(key);\n         if (format == null) {\n             if (locale == null) {\n                 locale = Locale.getDefault();\n@@ -476,7 +477,10 @@\n                         locale);\n                 String pattern = formatter.toPattern();\n                 format = getInstance(pattern, timeZone, locale);\n-                cDateTimeInstanceCache.put(key, format);\n+                if (pattern == null) {\n+\t\t\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\t\t\"The pattern must not be null\");\n+\t\t\t\t}\n \n             } catch (ClassCastException ex) {\n                 throw new IllegalArgumentException(\"No date time pattern for locale: \" + locale);\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 290, 
          "faulty": "FastDateFormat format=(FastDateFormat)cDateInstanceCache.get(key);", 
          "type": "Replace", 
          "seed": "FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 479, 
          "faulty": "cDateTimeInstanceCache.put(key,format);", 
          "type": "Replace", 
          "seed": "if (pattern == null) {\n  throw new IllegalArgumentException(\"The pattern must not be null\");\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:51:18.813128272 -0500\n+++ /tmp/Arja_Defects4J_Lang_50/patches_65h7/Patch_1720/patched/tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 03:04:12.763782540 -0500\n@@ -287,8 +287,10 @@\n         }\n \n \n-        FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n-        if (format == null) {\n+        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache\n+\t\t\t\t.get(key);\n+        cDateInstanceCache.put(key, format);\n+\t\tif (format == null) {\n             if (locale == null) {\n                 locale = Locale.getDefault();\n             }\n@@ -476,7 +478,7 @@\n                         locale);\n                 String pattern = formatter.toPattern();\n                 format = getInstance(pattern, timeZone, locale);\n-                cDateTimeInstanceCache.put(key, format);\n+                cDefaultPattern = new SimpleDateFormat().toPattern();\n \n             } catch (ClassCastException ex) {\n                 throw new IllegalArgumentException(\"No date time pattern for locale: \" + locale);\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 291, 
          "faulty": "if (format == null) {\n  if (locale == null) {\n    locale=Locale.getDefault();\n  }\n  try {\n    SimpleDateFormat formatter=(SimpleDateFormat)DateFormat.getDateInstance(style,locale);\n    String pattern=formatter.toPattern();\n    format=getInstance(pattern,timeZone,locale);\n    cDateInstanceCache.put(key,format);\n  }\n catch (  ClassCastException ex) {\n    throw new IllegalArgumentException(\"No date pattern for locale: \" + locale);\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "cDateInstanceCache.put(key,format);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 290, 
          "faulty": "FastDateFormat format=(FastDateFormat)cDateInstanceCache.get(key);", 
          "type": "Replace", 
          "seed": "FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 479, 
          "faulty": "cDateTimeInstanceCache.put(key,format);", 
          "type": "Replace", 
          "seed": "cDefaultPattern=new SimpleDateFormat().toPattern();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:51:18.813128272 -0500\n+++ /tmp/Arja_Defects4J_Lang_50/patches_65h7/Patch_1480/patched/tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 03:02:43.155476170 -0500\n@@ -287,7 +287,8 @@\n         }\n \n \n-        FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n+        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache\n+\t\t\t\t.get(key);\n         if (format == null) {\n             if (locale == null) {\n                 locale = Locale.getDefault();\n@@ -476,7 +477,7 @@\n                         locale);\n                 String pattern = formatter.toPattern();\n                 format = getInstance(pattern, timeZone, locale);\n-                cDateTimeInstanceCache.put(key, format);\n+                cDefaultPattern = new SimpleDateFormat().toPattern();\n \n             } catch (ClassCastException ex) {\n                 throw new IllegalArgumentException(\"No date time pattern for locale: \" + locale);\n@@ -1117,7 +1118,7 @@\n          * {@inheritDoc}\n          */\n         public int estimateLength() {\n-            return mValue.length();\n+            return 4;\n         }\n \n         /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 290, 
          "faulty": "FastDateFormat format=(FastDateFormat)cDateInstanceCache.get(key);", 
          "type": "Replace", 
          "seed": "FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 1120, 
          "faulty": "return mValue.length();", 
          "type": "Replace", 
          "seed": "return 4;"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 479, 
          "faulty": "cDateTimeInstanceCache.put(key,format);", 
          "type": "Replace", 
          "seed": "cDefaultPattern=new SimpleDateFormat().toPattern();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:51:18.813128272 -0500\n+++ /tmp/Arja_Defects4J_Lang_50/patches_65h7/Patch_388/patched/tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:55:55.630080025 -0500\n@@ -287,7 +287,8 @@\n         }\n \n \n-        FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n+        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache\n+\t\t\t\t.get(key);\n         if (format == null) {\n             if (locale == null) {\n                 locale = Locale.getDefault();\n@@ -405,7 +406,7 @@\n      */\n     public static FastDateFormat getDateTimeInstance(\n             int dateStyle, int timeStyle) {\n-        return getDateTimeInstance(dateStyle, timeStyle, null, null);\n+        return getInstance(getDefaultPattern(), null, null);\n     }\n     \n     /**\n@@ -458,7 +459,10 @@\n     public static synchronized FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, TimeZone timeZone,\n             Locale locale) {\n \n-        Object key = new Pair(new Integer(dateStyle), new Integer(timeStyle));\n+        if (locale == null) {\n+\t\t\t\t\tlocale = Locale.getDefault();\n+\t\t\t\t}\n+\t\tObject key = new Pair(new Integer(dateStyle), new Integer(timeStyle));\n         if (timeZone != null) {\n             key = new Pair(key, timeZone);\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 408, 
          "faulty": "return getDateTimeInstance(dateStyle,timeStyle,null,null);", 
          "type": "Replace", 
          "seed": "return getInstance(getDefaultPattern(),null,null);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 461, 
          "faulty": "Object key=new Pair(new Integer(dateStyle),new Integer(timeStyle));", 
          "type": "InsertBefore", 
          "seed": "if (locale == null) {\n  locale=Locale.getDefault();\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 290, 
          "faulty": "FastDateFormat format=(FastDateFormat)cDateInstanceCache.get(key);", 
          "type": "Replace", 
          "seed": "FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:51:18.813128272 -0500\n+++ /tmp/Arja_Defects4J_Lang_50/patches_65h7/Patch_1441/patched/tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 03:02:29.443429271 -0500\n@@ -287,7 +287,8 @@\n         }\n \n \n-        FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n+        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache\n+\t\t\t\t.get(key);\n         if (format == null) {\n             if (locale == null) {\n                 locale = Locale.getDefault();\n@@ -476,7 +477,6 @@\n                         locale);\n                 String pattern = formatter.toPattern();\n                 format = getInstance(pattern, timeZone, locale);\n-                cDateTimeInstanceCache.put(key, format);\n \n             } catch (ClassCastException ex) {\n                 throw new IllegalArgumentException(\"No date time pattern for locale: \" + locale);\n@@ -1722,7 +1722,8 @@\n                 return false;\n             }\n \n-            Pair key = (Pair)obj;\n+            cDefaultPattern = new SimpleDateFormat().toPattern();\n+\t\t\tPair key = (Pair)obj;\n \n             return\n                 (mObj1 == null ?\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 290, 
          "faulty": "FastDateFormat format=(FastDateFormat)cDateInstanceCache.get(key);", 
          "type": "Replace", 
          "seed": "FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 1725, 
          "faulty": "Pair key=(Pair)obj;", 
          "type": "InsertBefore", 
          "seed": "cDefaultPattern=new SimpleDateFormat().toPattern();"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 479, 
          "faulty": "cDateTimeInstanceCache.put(key,format);", 
          "type": "Delete", 
          "seed": "timeZone=TimeZone.getDefault();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:51:18.813128272 -0500\n+++ /tmp/Arja_Defects4J_Lang_50/patches_65h7/Patch_872/patched/tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:59:00.218713041 -0500\n@@ -282,12 +282,13 @@\n             key = new Pair(key, timeZone);\n         }\n \n-        if (locale != null) {\n-            key = new Pair(key, locale);\n-        }\n+        if (timeZone == null) {\n+\t\t\ttimeZone = TimeZone.getDefault();\n+\t\t}\n \n \n-        FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n+        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache\n+\t\t\t\t.get(key);\n         if (format == null) {\n             if (locale == null) {\n                 locale = Locale.getDefault();\n@@ -466,7 +467,7 @@\n             key = new Pair(key, locale);\n         }\n \n-        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key);\n+        FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n         if (format == null) {\n             if (locale == null) {\n                 locale = Locale.getDefault();\n@@ -617,7 +618,8 @@\n                 break;\n             case 'M': // month in year (text and number)\n                 if (tokenLen >= 4) {\n-                    rule = new TextField(Calendar.MONTH, months);\n+                    i = indexRef[0];\n+\t\t\t\t\trule = new TextField(Calendar.MONTH, months);\n                 } else if (tokenLen == 3) {\n                     rule = new TextField(Calendar.MONTH, shortMonths);\n                 } else if (tokenLen == 2) {\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 469, 
          "faulty": "FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);", 
          "type": "Replace", 
          "seed": "FastDateFormat format=(FastDateFormat)cDateInstanceCache.get(key);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 290, 
          "faulty": "FastDateFormat format=(FastDateFormat)cDateInstanceCache.get(key);", 
          "type": "Replace", 
          "seed": "FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 620, 
          "faulty": "rule=new TextField(Calendar.MONTH,months);", 
          "type": "InsertBefore", 
          "seed": "i=indexRef[0];"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 285, 
          "faulty": "if (locale != null) {\n  key=new Pair(key,locale);\n}", 
          "type": "Replace", 
          "seed": "if (timeZone == null) {\n  timeZone=TimeZone.getDefault();\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:51:18.813128272 -0500\n+++ /tmp/Arja_Defects4J_Lang_50/patches_65h7/Patch_1683/patched/tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 03:03:59.615737599 -0500\n@@ -287,7 +287,8 @@\n         }\n \n \n-        FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n+        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache\n+\t\t\t\t.get(key);\n         if (format == null) {\n             if (locale == null) {\n                 locale = Locale.getDefault();\n@@ -458,7 +459,10 @@\n     public static synchronized FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, TimeZone timeZone,\n             Locale locale) {\n \n-        Object key = new Pair(new Integer(dateStyle), new Integer(timeStyle));\n+        if (locale == null) {\n+\t\t\t\t\tlocale = Locale.getDefault();\n+\t\t\t\t}\n+\t\tObject key = new Pair(new Integer(dateStyle), new Integer(timeStyle));\n         if (timeZone != null) {\n             key = new Pair(key, timeZone);\n         }\n@@ -1724,7 +1728,8 @@\n \n             Pair key = (Pair)obj;\n \n-            return\n+            cDefaultPattern = new SimpleDateFormat().toPattern();\n+\t\t\treturn\n                 (mObj1 == null ?\n                  key.mObj1 == null : mObj1.equals(key.mObj1)) &&\n                 (mObj2 == null ?\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 461, 
          "faulty": "Object key=new Pair(new Integer(dateStyle),new Integer(timeStyle));", 
          "type": "InsertBefore", 
          "seed": "if (locale == null) {\n  locale=Locale.getDefault();\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 290, 
          "faulty": "FastDateFormat format=(FastDateFormat)cDateInstanceCache.get(key);", 
          "type": "Replace", 
          "seed": "FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 1727, 
          "faulty": "return (mObj1 == null ? key.mObj1 == null : mObj1.equals(key.mObj1)) && (mObj2 == null ? key.mObj2 == null : mObj2.equals(key.mObj2));", 
          "type": "InsertBefore", 
          "seed": "cDefaultPattern=new SimpleDateFormat().toPattern();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:51:18.813128272 -0500\n+++ /tmp/Arja_Defects4J_Lang_50/patches_65h7/Patch_383/patched/tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:55:54.026074519 -0500\n@@ -287,7 +287,8 @@\n         }\n \n \n-        FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n+        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache\n+\t\t\t\t.get(key);\n         if (format == null) {\n             if (locale == null) {\n                 locale = Locale.getDefault();\n@@ -458,7 +459,8 @@\n     public static synchronized FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, TimeZone timeZone,\n             Locale locale) {\n \n-        Object key = new Pair(new Integer(dateStyle), new Integer(timeStyle));\n+        timeZone = TimeZone.getDefault();\n+\t\tObject key = new Pair(new Integer(dateStyle), new Integer(timeStyle));\n         if (timeZone != null) {\n             key = new Pair(key, timeZone);\n         }\n@@ -1714,7 +1716,10 @@\n          * {@inheritDoc}\n          */\n         public boolean equals(Object obj) {\n-            if (this == obj) {\n+            if (obj instanceof FastDateFormat == false) {\n+\t\t\t\treturn false;\n+\t\t\t}\n+\t\t\tif (this == obj) {\n                 return true;\n             }\n \n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 1717, 
          "faulty": "if (this == obj) {\n  return true;\n}", 
          "type": "InsertBefore", 
          "seed": "if (obj instanceof FastDateFormat == false) {\n  return false;\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 461, 
          "faulty": "Object key=new Pair(new Integer(dateStyle),new Integer(timeStyle));", 
          "type": "InsertBefore", 
          "seed": "timeZone=TimeZone.getDefault();"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 290, 
          "faulty": "FastDateFormat format=(FastDateFormat)cDateInstanceCache.get(key);", 
          "type": "Replace", 
          "seed": "FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:51:18.813128272 -0500\n+++ /tmp/Arja_Defects4J_Lang_50/patches_65h7/Patch_1020/patched/tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:59:54.502898990 -0500\n@@ -287,7 +287,8 @@\n         }\n \n \n-        FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n+        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache\n+\t\t\t\t.get(key);\n         if (format == null) {\n             if (locale == null) {\n                 locale = Locale.getDefault();\n@@ -405,7 +406,7 @@\n      */\n     public static FastDateFormat getDateTimeInstance(\n             int dateStyle, int timeStyle) {\n-        return getDateTimeInstance(dateStyle, timeStyle, null, null);\n+        return getInstance(getDefaultPattern(), null, null);\n     }\n     \n     /**\n@@ -458,7 +459,10 @@\n     public static synchronized FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, TimeZone timeZone,\n             Locale locale) {\n \n-        Object key = new Pair(new Integer(dateStyle), new Integer(timeStyle));\n+        if (cDefaultPattern == null) {\n+\t\t\t\t\tcDefaultPattern = new SimpleDateFormat().toPattern();\n+\t\t\t\t}\n+\t\tObject key = new Pair(new Integer(dateStyle), new Integer(timeStyle));\n         if (timeZone != null) {\n             key = new Pair(key, timeZone);\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 408, 
          "faulty": "return getDateTimeInstance(dateStyle,timeStyle,null,null);", 
          "type": "Replace", 
          "seed": "return getInstance(getDefaultPattern(),null,null);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 461, 
          "faulty": "Object key=new Pair(new Integer(dateStyle),new Integer(timeStyle));", 
          "type": "InsertBefore", 
          "seed": "if (cDefaultPattern == null) {\n  cDefaultPattern=new SimpleDateFormat().toPattern();\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 290, 
          "faulty": "FastDateFormat format=(FastDateFormat)cDateInstanceCache.get(key);", 
          "type": "Replace", 
          "seed": "FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:51:18.813128272 -0500\n+++ /tmp/Arja_Defects4J_Lang_50/patches_65h7/Patch_879/patched/tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:59:02.606721223 -0500\n@@ -287,7 +287,8 @@\n         }\n \n \n-        FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n+        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache\n+\t\t\t\t.get(key);\n         if (format == null) {\n             if (locale == null) {\n                 locale = Locale.getDefault();\n@@ -462,10 +463,6 @@\n         if (timeZone != null) {\n             key = new Pair(key, timeZone);\n         }\n-        if (locale != null) {\n-            key = new Pair(key, locale);\n-        }\n-\n         FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key);\n         if (format == null) {\n             if (locale == null) {\n@@ -476,7 +473,10 @@\n                         locale);\n                 String pattern = formatter.toPattern();\n                 format = getInstance(pattern, timeZone, locale);\n-                cDateTimeInstanceCache.put(key, format);\n+                if (pattern == null) {\n+\t\t\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\t\t\"The pattern must not be null\");\n+\t\t\t\t}\n \n             } catch (ClassCastException ex) {\n                 throw new IllegalArgumentException(\"No date time pattern for locale: \" + locale);\n@@ -1722,7 +1722,10 @@\n                 return false;\n             }\n \n-            Pair key = (Pair)obj;\n+            if (!(obj instanceof Pair)) {\n+\t\t\t\treturn false;\n+\t\t\t}\n+\t\t\tPair key = (Pair)obj;\n \n             return\n                 (mObj1 == null ?\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 290, 
          "faulty": "FastDateFormat format=(FastDateFormat)cDateInstanceCache.get(key);", 
          "type": "Replace", 
          "seed": "FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 1725, 
          "faulty": "Pair key=(Pair)obj;", 
          "type": "InsertBefore", 
          "seed": "if (!(obj instanceof Pair)) {\n  return false;\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 479, 
          "faulty": "cDateTimeInstanceCache.put(key,format);", 
          "type": "Replace", 
          "seed": "if (pattern == null) {\n  throw new IllegalArgumentException(\"The pattern must not be null\");\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 465, 
          "faulty": "if (locale != null) {\n  key=new Pair(key,locale);\n}", 
          "type": "Delete", 
          "seed": "locale=Locale.getDefault();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:51:18.813128272 -0500\n+++ /tmp/Arja_Defects4J_Lang_50/patches_65h7/Patch_1617/patched/tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 03:03:35.111653831 -0500\n@@ -287,7 +287,8 @@\n         }\n \n \n-        FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n+        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache\n+\t\t\t\t.get(key);\n         if (format == null) {\n             if (locale == null) {\n                 locale = Locale.getDefault();\n@@ -463,7 +464,8 @@\n             key = new Pair(key, timeZone);\n         }\n         if (locale != null) {\n-            key = new Pair(key, locale);\n+            cDefaultPattern = new SimpleDateFormat().toPattern();\n+\t\t\tkey = new Pair(key, locale);\n         }\n \n         FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key);\n@@ -476,7 +478,7 @@\n                         locale);\n                 String pattern = formatter.toPattern();\n                 format = getInstance(pattern, timeZone, locale);\n-                cDateTimeInstanceCache.put(key, format);\n+                cDefaultPattern = new SimpleDateFormat().toPattern();\n \n             } catch (ClassCastException ex) {\n                 throw new IllegalArgumentException(\"No date time pattern for locale: \" + locale);\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 290, 
          "faulty": "FastDateFormat format=(FastDateFormat)cDateInstanceCache.get(key);", 
          "type": "Replace", 
          "seed": "FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 479, 
          "faulty": "cDateTimeInstanceCache.put(key,format);", 
          "type": "Replace", 
          "seed": "cDefaultPattern=new SimpleDateFormat().toPattern();"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 466, 
          "faulty": "key=new Pair(key,locale);", 
          "type": "InsertBefore", 
          "seed": "cDefaultPattern=new SimpleDateFormat().toPattern();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:51:18.813128272 -0500\n+++ /tmp/Arja_Defects4J_Lang_50/patches_65h7/Patch_898/patched/tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:59:10.010746591 -0500\n@@ -287,7 +287,8 @@\n         }\n \n \n-        FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n+        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache\n+\t\t\t\t.get(key);\n         if (format == null) {\n             if (locale == null) {\n                 locale = Locale.getDefault();\n@@ -405,7 +406,7 @@\n      */\n     public static FastDateFormat getDateTimeInstance(\n             int dateStyle, int timeStyle) {\n-        return getDateTimeInstance(dateStyle, timeStyle, null, null);\n+        return getInstance(getDefaultPattern(), null, null);\n     }\n     \n     /**\n@@ -422,7 +423,10 @@\n      */\n     public static FastDateFormat getDateTimeInstance(\n             int dateStyle, int timeStyle, Locale locale) {\n-        return getDateTimeInstance(dateStyle, timeStyle, null, locale);\n+        if (locale == null) {\n+\t\t\t\t\tlocale = Locale.getDefault();\n+\t\t\t\t}\n+\t\treturn getDateTimeInstance(dateStyle, timeStyle, null, locale);\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 408, 
          "faulty": "return getDateTimeInstance(dateStyle,timeStyle,null,null);", 
          "type": "Replace", 
          "seed": "return getInstance(getDefaultPattern(),null,null);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 290, 
          "faulty": "FastDateFormat format=(FastDateFormat)cDateInstanceCache.get(key);", 
          "type": "Replace", 
          "seed": "FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 425, 
          "faulty": "return getDateTimeInstance(dateStyle,timeStyle,null,locale);", 
          "type": "InsertBefore", 
          "seed": "if (locale == null) {\n  locale=Locale.getDefault();\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:51:18.813128272 -0500\n+++ /tmp/Arja_Defects4J_Lang_50/patches_65h7/Patch_519/patched/tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:56:45.662251718 -0500\n@@ -287,7 +287,8 @@\n         }\n \n \n-        FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n+        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache\n+\t\t\t\t.get(key);\n         if (format == null) {\n             if (locale == null) {\n                 locale = Locale.getDefault();\n@@ -405,7 +406,10 @@\n      */\n     public static FastDateFormat getDateTimeInstance(\n             int dateStyle, int timeStyle) {\n-        return getDateTimeInstance(dateStyle, timeStyle, null, null);\n+        if (cDefaultPattern == null) {\n+\t\t\t\t\tcDefaultPattern = new SimpleDateFormat().toPattern();\n+\t\t\t\t}\n+\t\treturn getDateTimeInstance(dateStyle, timeStyle, null, null);\n     }\n     \n     /**\n@@ -474,7 +478,8 @@\n             try {\n                 SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle,\n                         locale);\n-                String pattern = formatter.toPattern();\n+                cInstanceCache.put(format, format);\n+\t\t\t\tString pattern = formatter.toPattern();\n                 format = getInstance(pattern, timeZone, locale);\n                 cDateTimeInstanceCache.put(key, format);\n \n@@ -1714,7 +1719,10 @@\n          * {@inheritDoc}\n          */\n         public boolean equals(Object obj) {\n-            if (this == obj) {\n+            if (obj instanceof FastDateFormat == false) {\n+\t\t\t\treturn false;\n+\t\t\t}\n+\t\t\tif (this == obj) {\n                 return true;\n             }\n \n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 1717, 
          "faulty": "if (this == obj) {\n  return true;\n}", 
          "type": "InsertBefore", 
          "seed": "if (obj instanceof FastDateFormat == false) {\n  return false;\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 477, 
          "faulty": "String pattern=formatter.toPattern();", 
          "type": "InsertBefore", 
          "seed": "cInstanceCache.put(format,format);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 408, 
          "faulty": "return getDateTimeInstance(dateStyle,timeStyle,null,null);", 
          "type": "InsertBefore", 
          "seed": "if (cDefaultPattern == null) {\n  cDefaultPattern=new SimpleDateFormat().toPattern();\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 290, 
          "faulty": "FastDateFormat format=(FastDateFormat)cDateInstanceCache.get(key);", 
          "type": "Replace", 
          "seed": "FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:51:18.813128272 -0500\n+++ /tmp/Arja_Defects4J_Lang_50/patches_65h7/Patch_960/patched/tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:59:33.082825626 -0500\n@@ -287,7 +287,8 @@\n         }\n \n \n-        FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n+        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache\n+\t\t\t\t.get(key);\n         if (format == null) {\n             if (locale == null) {\n                 locale = Locale.getDefault();\n@@ -302,7 +303,10 @@\n                 throw new IllegalArgumentException(\"No date pattern for locale: \" + locale);\n             }\n         }\n-        return format;\n+        if (timeZone != null) {\n+\t\t\tkey = new Pair(key, timeZone);\n+\t\t}\n+\t\treturn format;\n     }\n \n     //-----------------------------------------------------------------------\n@@ -476,7 +480,6 @@\n                         locale);\n                 String pattern = formatter.toPattern();\n                 format = getInstance(pattern, timeZone, locale);\n-                cDateTimeInstanceCache.put(key, format);\n \n             } catch (ClassCastException ex) {\n                 throw new IllegalArgumentException(\"No date time pattern for locale: \" + locale);\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 305, 
          "faulty": "return format;", 
          "type": "InsertBefore", 
          "seed": "if (timeZone != null) {\n  key=new Pair(key,timeZone);\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 290, 
          "faulty": "FastDateFormat format=(FastDateFormat)cDateInstanceCache.get(key);", 
          "type": "Replace", 
          "seed": "FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 479, 
          "faulty": "cDateTimeInstanceCache.put(key,format);", 
          "type": "Delete", 
          "seed": "if (pattern == null) {\n  throw new IllegalArgumentException(\"The pattern must not be null\");\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:51:18.813128272 -0500\n+++ /tmp/Arja_Defects4J_Lang_50/patches_65h7/Patch_1193/patched/tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 03:00:57.495114659 -0500\n@@ -287,7 +287,8 @@\n         }\n \n \n-        FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n+        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache\n+\t\t\t\t.get(key);\n         if (format == null) {\n             if (locale == null) {\n                 locale = Locale.getDefault();\n@@ -466,13 +467,16 @@\n             key = new Pair(key, locale);\n         }\n \n-        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key);\n+        FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n         if (format == null) {\n             if (locale == null) {\n                 locale = Locale.getDefault();\n             }\n             try {\n-                SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle,\n+                if (locale == null) {\n+\t\t\t\t\tlocale = Locale.getDefault();\n+\t\t\t\t}\n+\t\t\t\tSimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle,\n                         locale);\n                 String pattern = formatter.toPattern();\n                 format = getInstance(pattern, timeZone, locale);\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 469, 
          "faulty": "FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);", 
          "type": "Replace", 
          "seed": "FastDateFormat format=(FastDateFormat)cDateInstanceCache.get(key);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 290, 
          "faulty": "FastDateFormat format=(FastDateFormat)cDateInstanceCache.get(key);", 
          "type": "Replace", 
          "seed": "FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 475, 
          "faulty": "SimpleDateFormat formatter=(SimpleDateFormat)DateFormat.getDateTimeInstance(dateStyle,timeStyle,locale);", 
          "type": "InsertBefore", 
          "seed": "if (locale == null) {\n  locale=Locale.getDefault();\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:51:18.813128272 -0500\n+++ /tmp/Arja_Defects4J_Lang_50/patches_65h7/Patch_1504/patched/tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 03:02:52.211507141 -0500\n@@ -287,7 +287,8 @@\n         }\n \n \n-        FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n+        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache\n+\t\t\t\t.get(key);\n         if (format == null) {\n             if (locale == null) {\n                 locale = Locale.getDefault();\n@@ -405,7 +406,7 @@\n      */\n     public static FastDateFormat getDateTimeInstance(\n             int dateStyle, int timeStyle) {\n-        return getDateTimeInstance(dateStyle, timeStyle, null, null);\n+        return getInstance(getDefaultPattern(), null, null);\n     }\n     \n     /**\n@@ -469,7 +470,6 @@\n         FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key);\n         if (format == null) {\n             if (locale == null) {\n-                locale = Locale.getDefault();\n             }\n             try {\n                 SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle,\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 472, 
          "faulty": "locale=Locale.getDefault();", 
          "type": "Delete", 
          "seed": "cDateInstanceCache.put(key,format);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 408, 
          "faulty": "return getDateTimeInstance(dateStyle,timeStyle,null,null);", 
          "type": "Replace", 
          "seed": "return getInstance(getDefaultPattern(),null,null);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 290, 
          "faulty": "FastDateFormat format=(FastDateFormat)cDateInstanceCache.get(key);", 
          "type": "Replace", 
          "seed": "FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:51:18.813128272 -0500\n+++ /tmp/Arja_Defects4J_Lang_50/patches_65h7/Patch_1232/patched/tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 03:01:11.655163124 -0500\n@@ -287,7 +287,8 @@\n         }\n \n \n-        FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n+        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache\n+\t\t\t\t.get(key);\n         if (format == null) {\n             if (locale == null) {\n                 locale = Locale.getDefault();\n@@ -422,7 +423,8 @@\n      */\n     public static FastDateFormat getDateTimeInstance(\n             int dateStyle, int timeStyle, Locale locale) {\n-        return getDateTimeInstance(dateStyle, timeStyle, null, locale);\n+        cDefaultPattern = new SimpleDateFormat().toPattern();\n+\t\treturn getDateTimeInstance(dateStyle, timeStyle, null, locale);\n     }\n     \n     /**\n@@ -458,7 +460,10 @@\n     public static synchronized FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, TimeZone timeZone,\n             Locale locale) {\n \n-        Object key = new Pair(new Integer(dateStyle), new Integer(timeStyle));\n+        if (locale == null) {\n+\t\t\t\t\tlocale = Locale.getDefault();\n+\t\t\t\t}\n+\t\tObject key = new Pair(new Integer(dateStyle), new Integer(timeStyle));\n         if (timeZone != null) {\n             key = new Pair(key, timeZone);\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 461, 
          "faulty": "Object key=new Pair(new Integer(dateStyle),new Integer(timeStyle));", 
          "type": "InsertBefore", 
          "seed": "if (locale == null) {\n  locale=Locale.getDefault();\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 290, 
          "faulty": "FastDateFormat format=(FastDateFormat)cDateInstanceCache.get(key);", 
          "type": "Replace", 
          "seed": "FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 425, 
          "faulty": "return getDateTimeInstance(dateStyle,timeStyle,null,locale);", 
          "type": "InsertBefore", 
          "seed": "cDefaultPattern=new SimpleDateFormat().toPattern();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:51:18.813128272 -0500\n+++ /tmp/Arja_Defects4J_Lang_50/patches_65h7/Patch_526/patched/tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:56:48.086260034 -0500\n@@ -283,11 +283,14 @@\n         }\n \n         if (locale != null) {\n-            key = new Pair(key, locale);\n+            if (locale == null) {\n+\t\t\t\tlocale = Locale.getDefault();\n+\t\t\t}\n         }\n \n \n-        FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n+        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache\n+\t\t\t\t.get(key);\n         if (format == null) {\n             if (locale == null) {\n                 locale = Locale.getDefault();\n@@ -458,7 +461,10 @@\n     public static synchronized FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, TimeZone timeZone,\n             Locale locale) {\n \n-        Object key = new Pair(new Integer(dateStyle), new Integer(timeStyle));\n+        if (locale == null) {\n+\t\t\t\t\tlocale = Locale.getDefault();\n+\t\t\t\t}\n+\t\tObject key = new Pair(new Integer(dateStyle), new Integer(timeStyle));\n         if (timeZone != null) {\n             key = new Pair(key, timeZone);\n         }\n@@ -474,7 +480,10 @@\n             try {\n                 SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle,\n                         locale);\n-                String pattern = formatter.toPattern();\n+                if (locale == null) {\n+\t\t\t\t\tlocale = Locale.getDefault();\n+\t\t\t\t}\n+\t\t\t\tString pattern = formatter.toPattern();\n                 format = getInstance(pattern, timeZone, locale);\n                 cDateTimeInstanceCache.put(key, format);\n \n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 477, 
          "faulty": "String pattern=formatter.toPattern();", 
          "type": "InsertBefore", 
          "seed": "if (locale == null) {\n  locale=Locale.getDefault();\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 286, 
          "faulty": "key=new Pair(key,locale);", 
          "type": "Replace", 
          "seed": "if (locale == null) {\n  locale=Locale.getDefault();\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 461, 
          "faulty": "Object key=new Pair(new Integer(dateStyle),new Integer(timeStyle));", 
          "type": "InsertBefore", 
          "seed": "if (locale == null) {\n  locale=Locale.getDefault();\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 290, 
          "faulty": "FastDateFormat format=(FastDateFormat)cDateInstanceCache.get(key);", 
          "type": "Replace", 
          "seed": "FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:51:18.813128272 -0500\n+++ /tmp/Arja_Defects4J_Lang_50/patches_65h7/Patch_1048/patched/tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 03:00:05.222935700 -0500\n@@ -287,7 +287,8 @@\n         }\n \n \n-        FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n+        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache\n+\t\t\t\t.get(key);\n         if (format == null) {\n             if (locale == null) {\n                 locale = Locale.getDefault();\n@@ -476,7 +477,6 @@\n                         locale);\n                 String pattern = formatter.toPattern();\n                 format = getInstance(pattern, timeZone, locale);\n-                cDateTimeInstanceCache.put(key, format);\n \n             } catch (ClassCastException ex) {\n                 throw new IllegalArgumentException(\"No date time pattern for locale: \" + locale);\n@@ -1117,7 +1117,7 @@\n          * {@inheritDoc}\n          */\n         public int estimateLength() {\n-            return mValue.length();\n+            return 4;\n         }\n \n         /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 290, 
          "faulty": "FastDateFormat format=(FastDateFormat)cDateInstanceCache.get(key);", 
          "type": "Replace", 
          "seed": "FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 1120, 
          "faulty": "return mValue.length();", 
          "type": "Replace", 
          "seed": "return 4;"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 479, 
          "faulty": "cDateTimeInstanceCache.put(key,format);", 
          "type": "Delete", 
          "seed": "timeZone=TimeZone.getDefault();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:51:18.813128272 -0500\n+++ /tmp/Arja_Defects4J_Lang_50/patches_65h7/Patch_284/patched/tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:55:15.625942678 -0500\n@@ -278,16 +278,13 @@\n      */\n     public static synchronized FastDateFormat getDateInstance(int style, TimeZone timeZone, Locale locale) {\n         Object key = new Integer(style);\n-        if (timeZone != null) {\n-            key = new Pair(key, timeZone);\n-        }\n-\n         if (locale != null) {\n             key = new Pair(key, locale);\n         }\n \n \n-        FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n+        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache\n+\t\t\t\t.get(key);\n         if (format == null) {\n             if (locale == null) {\n                 locale = Locale.getDefault();\n@@ -405,7 +402,7 @@\n      */\n     public static FastDateFormat getDateTimeInstance(\n             int dateStyle, int timeStyle) {\n-        return getDateTimeInstance(dateStyle, timeStyle, null, null);\n+        return getInstance(getDefaultPattern(), null, null);\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 408, 
          "faulty": "return getDateTimeInstance(dateStyle,timeStyle,null,null);", 
          "type": "Replace", 
          "seed": "return getInstance(getDefaultPattern(),null,null);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 290, 
          "faulty": "FastDateFormat format=(FastDateFormat)cDateInstanceCache.get(key);", 
          "type": "Replace", 
          "seed": "FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 281, 
          "faulty": "if (timeZone != null) {\n  key=new Pair(key,timeZone);\n}", 
          "type": "Delete", 
          "seed": "locale=Locale.getDefault();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:51:18.813128272 -0500\n+++ /tmp/Arja_Defects4J_Lang_50/patches_65h7/Patch_846/patched/tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:58:50.094678352 -0500\n@@ -287,7 +287,8 @@\n         }\n \n \n-        FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n+        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache\n+\t\t\t\t.get(key);\n         if (format == null) {\n             if (locale == null) {\n                 locale = Locale.getDefault();\n@@ -405,7 +406,7 @@\n      */\n     public static FastDateFormat getDateTimeInstance(\n             int dateStyle, int timeStyle) {\n-        return getDateTimeInstance(dateStyle, timeStyle, null, null);\n+        return getInstance(getDefaultPattern(), null, null);\n     }\n     \n     /**\n@@ -482,7 +483,8 @@\n                 throw new IllegalArgumentException(\"No date time pattern for locale: \" + locale);\n             }\n         }\n-        return format;\n+        cDefaultPattern = new SimpleDateFormat().toPattern();\n+\t\treturn format;\n     }\n \n     //-----------------------------------------------------------------------\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 408, 
          "faulty": "return getDateTimeInstance(dateStyle,timeStyle,null,null);", 
          "type": "Replace", 
          "seed": "return getInstance(getDefaultPattern(),null,null);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 290, 
          "faulty": "FastDateFormat format=(FastDateFormat)cDateInstanceCache.get(key);", 
          "type": "Replace", 
          "seed": "FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", 
          "line": 485, 
          "faulty": "return format;", 
          "type": "InsertBefore", 
          "seed": "cDefaultPattern=new SimpleDateFormat().toPattern();"
        }
      ]
    }
  ]
}