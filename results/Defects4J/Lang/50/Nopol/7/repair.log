cd /tmp/Nopol_Defects4J_Lang_50;
export JAVA_TOOL_OPTIONS=-Dfile.encoding=UTF8;
TZ="America/New_York"; export TZ;
export PATH="/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/:$PATH";
export JAVA_HOME="/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/";
time java -Xmx4048m -cp /home/tdurieux/defects4j4repair/script/../repair_tools/nopol.jar:/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin//../lib/tools.jar fr.inria.lille.repair.Main \
	--mode repair \
	--type pre_then_cond \
	--oracle angelic \
	--synthesis smt \
	--flocal gzoltar \
	--json \
	--solver z3 \
	--solver-path /home/tdurieux/defects4j4repair/script/../libs/z3/build/z3 \
	--complianceLevel 7 \
	--source src/java/ \
	--classpath "target/classes/:target/tests/:/tmp/Nopol_Defects4J_Lang_50/target/classes/:/tmp/Nopol_Defects4J_Lang_50/target/tests/:/home/tdurieux/defects4j4repair/script/../benchmarks/defects4j/framework/projects/Lang/lib/asm.jar:/home/tdurieux/defects4j4repair/script/../benchmarks/defects4j/framework/projects/Lang/lib/cglib.jar:/home/tdurieux/defects4j4repair/script/../benchmarks/defects4j/framework/projects/Lang/lib/commons-io.jar:/home/tdurieux/defects4j4repair/script/../benchmarks/defects4j/framework/projects/Lang/lib/easymock.jar:/home/tdurieux/defects4j4repair/script/../repair_tools/nopol.jar";
	echo "\n\nNode: `hostname`\n";
	echo "\n\nDate: `date`\n";
Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8
18:38:09.899 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Source files: [src/java]
18:38:09.903 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Classpath: [file:/tmp/Nopol_Defects4J_Lang_50/target/classes/, file:/tmp/Nopol_Defects4J_Lang_50/target/tests/, file:/tmp/Nopol_Defects4J_Lang_50/target/classes/, file:/tmp/Nopol_Defects4J_Lang_50/target/tests/, file:/home/tdurieux/defects4j4repair/script/../benchmarks/defects4j/framework/projects/Lang/lib/asm.jar, file:/home/tdurieux/defects4j4repair/script/../benchmarks/defects4j/framework/projects/Lang/lib/cglib.jar, file:/home/tdurieux/defects4j4repair/script/../benchmarks/defects4j/framework/projects/Lang/lib/commons-io.jar, file:/home/tdurieux/defects4j4repair/script/../benchmarks/defects4j/framework/projects/Lang/lib/easymock.jar, file:/home/tdurieux/defects4j4repair/script/../repair_tools/nopol.jar]
18:38:09.903 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Statement type: PRE_THEN_COND
18:38:09.903 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Args: [org.apache.commons.lang.ArrayUtilsAddTest, org.apache.commons.lang.ArrayUtilsAddTest, org.apache.commons.lang.ArrayUtilsRemoveTest, org.apache.commons.lang.ArrayUtilsRemoveTest, org.apache.commons.lang.ArrayUtilsTest, org.apache.commons.lang.ArrayUtilsTest, org.apache.commons.lang.BitFieldTest, org.apache.commons.lang.BitFieldTest, org.apache.commons.lang.BooleanUtilsTest, org.apache.commons.lang.BooleanUtilsTest, org.apache.commons.lang.CharEncodingTest, org.apache.commons.lang.CharEncodingTest, org.apache.commons.lang.CharRangeTest, org.apache.commons.lang.CharRangeTest, org.apache.commons.lang.CharSetTest, org.apache.commons.lang.CharSetTest, org.apache.commons.lang.CharSetUtilsTest, org.apache.commons.lang.CharSetUtilsTest, org.apache.commons.lang.CharUtilsTest, org.apache.commons.lang.CharUtilsTest, org.apache.commons.lang.ClassUtilsTest, org.apache.commons.lang.ClassUtilsTest, org.apache.commons.lang.EntitiesPerformanceTest, org.apache.commons.lang.EntitiesPerformanceTest, org.apache.commons.lang.EntitiesTest, org.apache.commons.lang.EntitiesTest, org.apache.commons.lang.IllegalClassExceptionTest, org.apache.commons.lang.IllegalClassExceptionTest, org.apache.commons.lang.IncompleteArgumentExceptionTest, org.apache.commons.lang.IncompleteArgumentExceptionTest, org.apache.commons.lang.IntHashMapTest, org.apache.commons.lang.IntHashMapTest, org.apache.commons.lang.LocaleUtilsTest, org.apache.commons.lang.LocaleUtilsTest, org.apache.commons.lang.NotImplementedExceptionTest, org.apache.commons.lang.NotImplementedExceptionTest, org.apache.commons.lang.NullArgumentExceptionTest, org.apache.commons.lang.NullArgumentExceptionTest, org.apache.commons.lang.NumberRangeTest, org.apache.commons.lang.NumberRangeTest, org.apache.commons.lang.NumberUtilsTest, org.apache.commons.lang.NumberUtilsTest, org.apache.commons.lang.ObjectUtilsTest, org.apache.commons.lang.ObjectUtilsTest, org.apache.commons.lang.RandomStringUtilsTest, org.apache.commons.lang.RandomStringUtilsTest, org.apache.commons.lang.SerializationUtilsTest, org.apache.commons.lang.SerializationUtilsTest, org.apache.commons.lang.StringEscapeUtilsTest, org.apache.commons.lang.StringEscapeUtilsTest, org.apache.commons.lang.StringUtilsEqualsIndexOfTest, org.apache.commons.lang.StringUtilsEqualsIndexOfTest, org.apache.commons.lang.StringUtilsIsTest, org.apache.commons.lang.StringUtilsIsTest, org.apache.commons.lang.StringUtilsStartsEndsWithTest, org.apache.commons.lang.StringUtilsStartsEndsWithTest, org.apache.commons.lang.StringUtilsSubstringTest, org.apache.commons.lang.StringUtilsSubstringTest, org.apache.commons.lang.StringUtilsTest, org.apache.commons.lang.StringUtilsTest, org.apache.commons.lang.StringUtilsTrimEmptyTest, org.apache.commons.lang.StringUtilsTrimEmptyTest, org.apache.commons.lang.SystemUtilsTest, org.apache.commons.lang.SystemUtilsTest, org.apache.commons.lang.UnhandledExceptionTest, org.apache.commons.lang.UnhandledExceptionTest, org.apache.commons.lang.ValidateTest, org.apache.commons.lang.ValidateTest, org.apache.commons.lang.WordUtilsTest, org.apache.commons.lang.WordUtilsTest, org.apache.commons.lang.builder.CompareToBuilderTest, org.apache.commons.lang.builder.CompareToBuilderTest, org.apache.commons.lang.builder.DefaultToStringStyleTest, org.apache.commons.lang.builder.DefaultToStringStyleTest, org.apache.commons.lang.builder.EqualsBuilderTest, org.apache.commons.lang.builder.EqualsBuilderTest, org.apache.commons.lang.builder.HashCodeBuilderAndEqualsBuilderTest, org.apache.commons.lang.builder.HashCodeBuilderAndEqualsBuilderTest, org.apache.commons.lang.builder.HashCodeBuilderTest, org.apache.commons.lang.builder.HashCodeBuilderTest, org.apache.commons.lang.builder.MultiLineToStringStyleTest, org.apache.commons.lang.builder.MultiLineToStringStyleTest, org.apache.commons.lang.builder.NoFieldNamesToStringStyleTest, org.apache.commons.lang.builder.NoFieldNamesToStringStyleTest, org.apache.commons.lang.builder.ReflectionToStringBuilderExcludeTest, org.apache.commons.lang.builder.ReflectionToStringBuilderExcludeTest, org.apache.commons.lang.builder.ShortPrefixToStringStyleTest, org.apache.commons.lang.builder.ShortPrefixToStringStyleTest, org.apache.commons.lang.builder.SimpleToStringStyleTest, org.apache.commons.lang.builder.SimpleToStringStyleTest, org.apache.commons.lang.builder.StandardToStringStyleTest, org.apache.commons.lang.builder.StandardToStringStyleTest, org.apache.commons.lang.builder.ToStringBuilderTest, org.apache.commons.lang.builder.ToStringBuilderTest, org.apache.commons.lang.builder.ToStringStyleTest, org.apache.commons.lang.builder.ToStringStyleTest, org.apache.commons.lang.enum.EnumTest, org.apache.commons.lang.enum.EnumTest, org.apache.commons.lang.enum.EnumUtilsTest, org.apache.commons.lang.enum.EnumUtilsTest, org.apache.commons.lang.enum.ValuedEnumTest, org.apache.commons.lang.enum.ValuedEnumTest, org.apache.commons.lang.enums.EnumEqualsTest, org.apache.commons.lang.enums.EnumEqualsTest, org.apache.commons.lang.enums.EnumTest, org.apache.commons.lang.enums.EnumTest, org.apache.commons.lang.enums.EnumUtilsTest, org.apache.commons.lang.enums.EnumUtilsTest, org.apache.commons.lang.enums.ValuedEnumTest, org.apache.commons.lang.enums.ValuedEnumTest, org.apache.commons.lang.exception.ExceptionUtilsTestCase, org.apache.commons.lang.exception.ExceptionUtilsTestCase, org.apache.commons.lang.exception.NestableDelegateTestCase, org.apache.commons.lang.exception.NestableDelegateTestCase, org.apache.commons.lang.exception.NestableErrorTestCase, org.apache.commons.lang.exception.NestableErrorTestCase, org.apache.commons.lang.exception.NestableExceptionTestCase, org.apache.commons.lang.exception.NestableExceptionTestCase, org.apache.commons.lang.exception.NestableRuntimeExceptionTestCase, org.apache.commons.lang.exception.NestableRuntimeExceptionTestCase, org.apache.commons.lang.math.DoubleRangeTest, org.apache.commons.lang.math.DoubleRangeTest, org.apache.commons.lang.math.FloatRangeTest, org.apache.commons.lang.math.FloatRangeTest, org.apache.commons.lang.math.FractionTest, org.apache.commons.lang.math.FractionTest, org.apache.commons.lang.math.IntRangeTest, org.apache.commons.lang.math.IntRangeTest, org.apache.commons.lang.math.LongRangeTest, org.apache.commons.lang.math.LongRangeTest, org.apache.commons.lang.math.NumberRangeTest, org.apache.commons.lang.math.NumberRangeTest, org.apache.commons.lang.math.NumberUtilsTest, org.apache.commons.lang.math.NumberUtilsTest, org.apache.commons.lang.math.RandomUtilsTest, org.apache.commons.lang.math.RandomUtilsTest, org.apache.commons.lang.math.RangeTest, org.apache.commons.lang.math.RangeTest, org.apache.commons.lang.mutable.MutableBooleanTest, org.apache.commons.lang.mutable.MutableBooleanTest, org.apache.commons.lang.mutable.MutableByteTest, org.apache.commons.lang.mutable.MutableByteTest, org.apache.commons.lang.mutable.MutableDoubleTest, org.apache.commons.lang.mutable.MutableDoubleTest, org.apache.commons.lang.mutable.MutableFloatTest, org.apache.commons.lang.mutable.MutableFloatTest, org.apache.commons.lang.mutable.MutableIntTest, org.apache.commons.lang.mutable.MutableIntTest, org.apache.commons.lang.mutable.MutableLongTest, org.apache.commons.lang.mutable.MutableLongTest, org.apache.commons.lang.mutable.MutableObjectTest, org.apache.commons.lang.mutable.MutableObjectTest, org.apache.commons.lang.mutable.MutableShortTest, org.apache.commons.lang.mutable.MutableShortTest, org.apache.commons.lang.text.CompositeFormatTest, org.apache.commons.lang.text.CompositeFormatTest, org.apache.commons.lang.text.ExtendedMessageFormatBaselineTest, org.apache.commons.lang.text.ExtendedMessageFormatBaselineTest, org.apache.commons.lang.text.MessageFormatExtensionTest, org.apache.commons.lang.text.MessageFormatExtensionTest, org.apache.commons.lang.text.MessageFormatTest, org.apache.commons.lang.text.MessageFormatTest, org.apache.commons.lang.text.MultiFormatTest, org.apache.commons.lang.text.MultiFormatTest, org.apache.commons.lang.text.StrBuilderAppendInsertTest, org.apache.commons.lang.text.StrBuilderAppendInsertTest, org.apache.commons.lang.text.StrBuilderTest, org.apache.commons.lang.text.StrBuilderTest, org.apache.commons.lang.text.StrLookupTest, org.apache.commons.lang.text.StrLookupTest, org.apache.commons.lang.text.StrMatcherTest, org.apache.commons.lang.text.StrMatcherTest, org.apache.commons.lang.text.StrSubstitutorTest, org.apache.commons.lang.text.StrSubstitutorTest, org.apache.commons.lang.text.StrTokenizerTest, org.apache.commons.lang.text.StrTokenizerTest, org.apache.commons.lang.time.DateFormatUtilsTest, org.apache.commons.lang.time.DateFormatUtilsTest, org.apache.commons.lang.time.DateUtilsTest, org.apache.commons.lang.time.DateUtilsTest, org.apache.commons.lang.time.DurationFormatUtilsTest, org.apache.commons.lang.time.DurationFormatUtilsTest, org.apache.commons.lang.time.FastDateFormatTest, org.apache.commons.lang.time.FastDateFormatTest, org.apache.commons.lang.time.StopWatchTest, org.apache.commons.lang.time.StopWatchTest]
18:38:09.906 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Config: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=true, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=PRE_THEN_COND, synthesis=SMT, oracle=ANGELIC, solver=Z3, solverPath='/home/tdurieux/defects4j4repair/script/../libs/z3/build/z3', projectSources=[src/java], projectClasspath='[Ljava.net.URL;@66d33a', projectTests=[org.apache.commons.lang.ArrayUtilsAddTest, org.apache.commons.lang.ArrayUtilsAddTest, org.apache.commons.lang.ArrayUtilsRemoveTest, org.apache.commons.lang.ArrayUtilsRemoveTest, org.apache.commons.lang.ArrayUtilsTest, org.apache.commons.lang.ArrayUtilsTest, org.apache.commons.lang.BitFieldTest, org.apache.commons.lang.BitFieldTest, org.apache.commons.lang.BooleanUtilsTest, org.apache.commons.lang.BooleanUtilsTest, org.apache.commons.lang.CharEncodingTest, org.apache.commons.lang.CharEncodingTest, org.apache.commons.lang.CharRangeTest, org.apache.commons.lang.CharRangeTest, org.apache.commons.lang.CharSetTest, org.apache.commons.lang.CharSetTest, org.apache.commons.lang.CharSetUtilsTest, org.apache.commons.lang.CharSetUtilsTest, org.apache.commons.lang.CharUtilsTest, org.apache.commons.lang.CharUtilsTest, org.apache.commons.lang.ClassUtilsTest, org.apache.commons.lang.ClassUtilsTest, org.apache.commons.lang.EntitiesPerformanceTest, org.apache.commons.lang.EntitiesPerformanceTest, org.apache.commons.lang.EntitiesTest, org.apache.commons.lang.EntitiesTest, org.apache.commons.lang.IllegalClassExceptionTest, org.apache.commons.lang.IllegalClassExceptionTest, org.apache.commons.lang.IncompleteArgumentExceptionTest, org.apache.commons.lang.IncompleteArgumentExceptionTest, org.apache.commons.lang.IntHashMapTest, org.apache.commons.lang.IntHashMapTest, org.apache.commons.lang.LocaleUtilsTest, org.apache.commons.lang.LocaleUtilsTest, org.apache.commons.lang.NotImplementedExceptionTest, org.apache.commons.lang.NotImplementedExceptionTest, org.apache.commons.lang.NullArgumentExceptionTest, org.apache.commons.lang.NullArgumentExceptionTest, org.apache.commons.lang.NumberRangeTest, org.apache.commons.lang.NumberRangeTest, org.apache.commons.lang.NumberUtilsTest, org.apache.commons.lang.NumberUtilsTest, org.apache.commons.lang.ObjectUtilsTest, org.apache.commons.lang.ObjectUtilsTest, org.apache.commons.lang.RandomStringUtilsTest, org.apache.commons.lang.RandomStringUtilsTest, org.apache.commons.lang.SerializationUtilsTest, org.apache.commons.lang.SerializationUtilsTest, org.apache.commons.lang.StringEscapeUtilsTest, org.apache.commons.lang.StringEscapeUtilsTest, org.apache.commons.lang.StringUtilsEqualsIndexOfTest, org.apache.commons.lang.StringUtilsEqualsIndexOfTest, org.apache.commons.lang.StringUtilsIsTest, org.apache.commons.lang.StringUtilsIsTest, org.apache.commons.lang.StringUtilsStartsEndsWithTest, org.apache.commons.lang.StringUtilsStartsEndsWithTest, org.apache.commons.lang.StringUtilsSubstringTest, org.apache.commons.lang.StringUtilsSubstringTest, org.apache.commons.lang.StringUtilsTest, org.apache.commons.lang.StringUtilsTest, org.apache.commons.lang.StringUtilsTrimEmptyTest, org.apache.commons.lang.StringUtilsTrimEmptyTest, org.apache.commons.lang.SystemUtilsTest, org.apache.commons.lang.SystemUtilsTest, org.apache.commons.lang.UnhandledExceptionTest, org.apache.commons.lang.UnhandledExceptionTest, org.apache.commons.lang.ValidateTest, org.apache.commons.lang.ValidateTest, org.apache.commons.lang.WordUtilsTest, org.apache.commons.lang.WordUtilsTest, org.apache.commons.lang.builder.CompareToBuilderTest, org.apache.commons.lang.builder.CompareToBuilderTest, org.apache.commons.lang.builder.DefaultToStringStyleTest, org.apache.commons.lang.builder.DefaultToStringStyleTest, org.apache.commons.lang.builder.EqualsBuilderTest, org.apache.commons.lang.builder.EqualsBuilderTest, org.apache.commons.lang.builder.HashCodeBuilderAndEqualsBuilderTest, org.apache.commons.lang.builder.HashCodeBuilderAndEqualsBuilderTest, org.apache.commons.lang.builder.HashCodeBuilderTest, org.apache.commons.lang.builder.HashCodeBuilderTest, org.apache.commons.lang.builder.MultiLineToStringStyleTest, org.apache.commons.lang.builder.MultiLineToStringStyleTest, org.apache.commons.lang.builder.NoFieldNamesToStringStyleTest, org.apache.commons.lang.builder.NoFieldNamesToStringStyleTest, org.apache.commons.lang.builder.ReflectionToStringBuilderExcludeTest, org.apache.commons.lang.builder.ReflectionToStringBuilderExcludeTest, org.apache.commons.lang.builder.ShortPrefixToStringStyleTest, org.apache.commons.lang.builder.ShortPrefixToStringStyleTest, org.apache.commons.lang.builder.SimpleToStringStyleTest, org.apache.commons.lang.builder.SimpleToStringStyleTest, org.apache.commons.lang.builder.StandardToStringStyleTest, org.apache.commons.lang.builder.StandardToStringStyleTest, org.apache.commons.lang.builder.ToStringBuilderTest, org.apache.commons.lang.builder.ToStringBuilderTest, org.apache.commons.lang.builder.ToStringStyleTest, org.apache.commons.lang.builder.ToStringStyleTest, org.apache.commons.lang.enum.EnumTest, org.apache.commons.lang.enum.EnumTest, org.apache.commons.lang.enum.EnumUtilsTest, org.apache.commons.lang.enum.EnumUtilsTest, org.apache.commons.lang.enum.ValuedEnumTest, org.apache.commons.lang.enum.ValuedEnumTest, org.apache.commons.lang.enums.EnumEqualsTest, org.apache.commons.lang.enums.EnumEqualsTest, org.apache.commons.lang.enums.EnumTest, org.apache.commons.lang.enums.EnumTest, org.apache.commons.lang.enums.EnumUtilsTest, org.apache.commons.lang.enums.EnumUtilsTest, org.apache.commons.lang.enums.ValuedEnumTest, org.apache.commons.lang.enums.ValuedEnumTest, org.apache.commons.lang.exception.ExceptionUtilsTestCase, org.apache.commons.lang.exception.ExceptionUtilsTestCase, org.apache.commons.lang.exception.NestableDelegateTestCase, org.apache.commons.lang.exception.NestableDelegateTestCase, org.apache.commons.lang.exception.NestableErrorTestCase, org.apache.commons.lang.exception.NestableErrorTestCase, org.apache.commons.lang.exception.NestableExceptionTestCase, org.apache.commons.lang.exception.NestableExceptionTestCase, org.apache.commons.lang.exception.NestableRuntimeExceptionTestCase, org.apache.commons.lang.exception.NestableRuntimeExceptionTestCase, org.apache.commons.lang.math.DoubleRangeTest, org.apache.commons.lang.math.DoubleRangeTest, org.apache.commons.lang.math.FloatRangeTest, org.apache.commons.lang.math.FloatRangeTest, org.apache.commons.lang.math.FractionTest, org.apache.commons.lang.math.FractionTest, org.apache.commons.lang.math.IntRangeTest, org.apache.commons.lang.math.IntRangeTest, org.apache.commons.lang.math.LongRangeTest, org.apache.commons.lang.math.LongRangeTest, org.apache.commons.lang.math.NumberRangeTest, org.apache.commons.lang.math.NumberRangeTest, org.apache.commons.lang.math.NumberUtilsTest, org.apache.commons.lang.math.NumberUtilsTest, org.apache.commons.lang.math.RandomUtilsTest, org.apache.commons.lang.math.RandomUtilsTest, org.apache.commons.lang.math.RangeTest, org.apache.commons.lang.math.RangeTest, org.apache.commons.lang.mutable.MutableBooleanTest, org.apache.commons.lang.mutable.MutableBooleanTest, org.apache.commons.lang.mutable.MutableByteTest, org.apache.commons.lang.mutable.MutableByteTest, org.apache.commons.lang.mutable.MutableDoubleTest, org.apache.commons.lang.mutable.MutableDoubleTest, org.apache.commons.lang.mutable.MutableFloatTest, org.apache.commons.lang.mutable.MutableFloatTest, org.apache.commons.lang.mutable.MutableIntTest, org.apache.commons.lang.mutable.MutableIntTest, org.apache.commons.lang.mutable.MutableLongTest, org.apache.commons.lang.mutable.MutableLongTest, org.apache.commons.lang.mutable.MutableObjectTest, org.apache.commons.lang.mutable.MutableObjectTest, org.apache.commons.lang.mutable.MutableShortTest, org.apache.commons.lang.mutable.MutableShortTest, org.apache.commons.lang.text.CompositeFormatTest, org.apache.commons.lang.text.CompositeFormatTest, org.apache.commons.lang.text.ExtendedMessageFormatBaselineTest, org.apache.commons.lang.text.ExtendedMessageFormatBaselineTest, org.apache.commons.lang.text.MessageFormatExtensionTest, org.apache.commons.lang.text.MessageFormatExtensionTest, org.apache.commons.lang.text.MessageFormatTest, org.apache.commons.lang.text.MessageFormatTest, org.apache.commons.lang.text.MultiFormatTest, org.apache.commons.lang.text.MultiFormatTest, org.apache.commons.lang.text.StrBuilderAppendInsertTest, org.apache.commons.lang.text.StrBuilderAppendInsertTest, org.apache.commons.lang.text.StrBuilderTest, org.apache.commons.lang.text.StrBuilderTest, org.apache.commons.lang.text.StrLookupTest, org.apache.commons.lang.text.StrLookupTest, org.apache.commons.lang.text.StrMatcherTest, org.apache.commons.lang.text.StrMatcherTest, org.apache.commons.lang.text.StrSubstitutorTest, org.apache.commons.lang.text.StrSubstitutorTest, org.apache.commons.lang.text.StrTokenizerTest, org.apache.commons.lang.text.StrTokenizerTest, org.apache.commons.lang.time.DateFormatUtilsTest, org.apache.commons.lang.time.DateFormatUtilsTest, org.apache.commons.lang.time.DateUtilsTest, org.apache.commons.lang.time.DateUtilsTest, org.apache.commons.lang.time.DurationFormatUtilsTest, org.apache.commons.lang.time.DurationFormatUtilsTest, org.apache.commons.lang.time.FastDateFormatTest, org.apache.commons.lang.time.FastDateFormatTest, org.apache.commons.lang.time.StopWatchTest, org.apache.commons.lang.time.StopWatchTest], complianceLevel=7, outputFolder=., json=true}
18:38:09.906 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Available processors (cores): 24
18:38:09.912 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Free memory: 445 MB
18:38:09.913 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Maximum memory: 3 GB
18:38:09.913 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Total memory available to JVM: 483 MB
18:38:09.913 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Java version: 1.8.0_181
18:38:09.914 [main] INFO  fr.inria.lille.repair.nopol.NoPol - JAVA_HOME: /usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/
18:38:09.915 [main] INFO  fr.inria.lille.repair.nopol.NoPol - PATH: /usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/:/usr/lib/oar/oardodo:/usr/lib/oar/oardodo:/usr/local/bin:/usr/bin:/bin:/usr/games
18:38:30.839 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #1
18:38:30.840 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang.time.FastDateFormat:620 which is executed by 2 tests
-1899260190
18:38:31.204 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:38:31.330 [pool-4-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (50 ms)
<> Total tests run: 26
<> Ignored tests: 0
<> Failed tests: 4
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

18:38:33.077 [pool-3-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
FastDateFormat.java:379: error: variable rule might not have been initialized
            rules.add(rule);
                      ^
Note: FastDateFormat.java uses unchecked or unsafe operations.
Note: Recompile with -Xlint:unchecked for details.
18:38:33.682 [pool-3-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public class FastDateFormat extends java.text.Format {
    private static final long serialVersionUID = 1L;

    public static final int FULL = java.text.DateFormat.FULL;

    public static final int LONG = java.text.DateFormat.LONG;

    public static final int MEDIUM = java.text.DateFormat.MEDIUM;

    public static final int SHORT = java.text.DateFormat.SHORT;

    private static java.lang.String cDefaultPattern;

    private static java.util.Map cInstanceCache = new java.util.HashMap(7);

    private static java.util.Map cDateInstanceCache = new java.util.HashMap(7);

    private static java.util.Map cTimeInstanceCache = new java.util.HashMap(7);

    private static java.util.Map cDateTimeInstanceCache = new java.util.HashMap(7);

    private static java.util.Map cTimeZoneDisplayCache = new java.util.HashMap(7);

    private final java.lang.String mPattern;

    private final java.util.TimeZone mTimeZone;

    private final boolean mTimeZoneForced;

    private final java.util.Locale mLocale;

    private final boolean mLocaleForced;

    private transient org.apache.commons.lang.time.FastDateFormat.Rule[] mRules;

    private transient int mMaxLengthEstimate;

    public static org.apache.commons.lang.time.FastDateFormat getInstance() {
        return org.apache.commons.lang.time.FastDateFormat.getInstance(org.apache.commons.lang.time.FastDateFormat.getDefaultPattern(), null, null);
    }

    public static org.apache.commons.lang.time.FastDateFormat getInstance(java.lang.String pattern) {
        return org.apache.commons.lang.time.FastDateFormat.getInstance(pattern, null, null);
    }

    public static org.apache.commons.lang.time.FastDateFormat getInstance(java.lang.String pattern, java.util.TimeZone timeZone) {
        return org.apache.commons.lang.time.FastDateFormat.getInstance(pattern, timeZone, null);
    }

    public static org.apache.commons.lang.time.FastDateFormat getInstance(java.lang.String pattern, java.util.Locale locale) {
        return org.apache.commons.lang.time.FastDateFormat.getInstance(pattern, null, locale);
    }

    public static synchronized org.apache.commons.lang.time.FastDateFormat getInstance(java.lang.String pattern, java.util.TimeZone timeZone, java.util.Locale locale) {
        org.apache.commons.lang.time.FastDateFormat emptyFormat = new org.apache.commons.lang.time.FastDateFormat(pattern, timeZone, locale);
        org.apache.commons.lang.time.FastDateFormat format = ((org.apache.commons.lang.time.FastDateFormat) (org.apache.commons.lang.time.FastDateFormat.cInstanceCache.get(emptyFormat)));
        if (format == null) {
            format = emptyFormat;
            format.init();
            org.apache.commons.lang.time.FastDateFormat.cInstanceCache.put(format, format);
        }
        return format;
    }

    public static org.apache.commons.lang.time.FastDateFormat getDateInstance(int style) {
        return org.apache.commons.lang.time.FastDateFormat.getDateInstance(style, null, null);
    }

    public static org.apache.commons.lang.time.FastDateFormat getDateInstance(int style, java.util.Locale locale) {
        return org.apache.commons.lang.time.FastDateFormat.getDateInstance(style, null, locale);
    }

    public static org.apache.commons.lang.time.FastDateFormat getDateInstance(int style, java.util.TimeZone timeZone) {
        return org.apache.commons.lang.time.FastDateFormat.getDateInstance(style, timeZone, null);
    }

    public static synchronized org.apache.commons.lang.time.FastDateFormat getDateInstance(int style, java.util.TimeZone timeZone, java.util.Locale locale) {
        java.lang.Object key = new java.lang.Integer(style);
        if (timeZone != null) {
            key = new org.apache.commons.lang.time.FastDateFormat.Pair(key, timeZone);
        }
        if (locale != null) {
            key = new org.apache.commons.lang.time.FastDateFormat.Pair(key, locale);
        }
        org.apache.commons.lang.time.FastDateFormat format = ((org.apache.commons.lang.time.FastDateFormat) (org.apache.commons.lang.time.FastDateFormat.cDateInstanceCache.get(key)));
        if (format == null) {
            if (locale == null) {
                locale = java.util.Locale.getDefault();
            }
            try {
                java.text.SimpleDateFormat formatter = ((java.text.SimpleDateFormat) (java.text.DateFormat.getDateInstance(style, locale)));
                java.lang.String pattern = formatter.toPattern();
                format = org.apache.commons.lang.time.FastDateFormat.getInstance(pattern, timeZone, locale);
                org.apache.commons.lang.time.FastDateFormat.cDateInstanceCache.put(key, format);
            } catch (java.lang.ClassCastException ex) {
                throw new java.lang.IllegalArgumentException(("No date pattern for locale: " + locale));
            }
        }
        return format;
    }

    public static org.apache.commons.lang.time.FastDateFormat getTimeInstance(int style) {
        return org.apache.commons.lang.time.FastDateFormat.getTimeInstance(style, null, null);
    }

    public static org.apache.commons.lang.time.FastDateFormat getTimeInstance(int style, java.util.Locale locale) {
        return org.apache.commons.lang.time.FastDateFormat.getTimeInstance(style, null, locale);
    }

    public static org.apache.commons.lang.time.FastDateFormat getTimeInstance(int style, java.util.TimeZone timeZone) {
        return org.apache.commons.lang.time.FastDateFormat.getTimeInstance(style, timeZone, null);
    }

    public static synchronized org.apache.commons.lang.time.FastDateFormat getTimeInstance(int style, java.util.TimeZone timeZone, java.util.Locale locale) {
        java.lang.Object key = new java.lang.Integer(style);
        if (timeZone != null) {
            key = new org.apache.commons.lang.time.FastDateFormat.Pair(key, timeZone);
        }
        if (locale != null) {
            key = new org.apache.commons.lang.time.FastDateFormat.Pair(key, locale);
        }
        org.apache.commons.lang.time.FastDateFormat format = ((org.apache.commons.lang.time.FastDateFormat) (org.apache.commons.lang.time.FastDateFormat.cTimeInstanceCache.get(key)));
        if (format == null) {
            if (locale == null) {
                locale = java.util.Locale.getDefault();
            }
            try {
                java.text.SimpleDateFormat formatter = ((java.text.SimpleDateFormat) (java.text.DateFormat.getTimeInstance(style, locale)));
                java.lang.String pattern = formatter.toPattern();
                format = org.apache.commons.lang.time.FastDateFormat.getInstance(pattern, timeZone, locale);
                org.apache.commons.lang.time.FastDateFormat.cTimeInstanceCache.put(key, format);
            } catch (java.lang.ClassCastException ex) {
                throw new java.lang.IllegalArgumentException(("No date pattern for locale: " + locale));
            }
        }
        return format;
    }

    public static org.apache.commons.lang.time.FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle) {
        return org.apache.commons.lang.time.FastDateFormat.getDateTimeInstance(dateStyle, timeStyle, null, null);
    }

    public static org.apache.commons.lang.time.FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, java.util.Locale locale) {
        return org.apache.commons.lang.time.FastDateFormat.getDateTimeInstance(dateStyle, timeStyle, null, locale);
    }

    public static org.apache.commons.lang.time.FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, java.util.TimeZone timeZone) {
        return org.apache.commons.lang.time.FastDateFormat.getDateTimeInstance(dateStyle, timeStyle, timeZone, null);
    }

    public static synchronized org.apache.commons.lang.time.FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, java.util.TimeZone timeZone, java.util.Locale locale) {
        java.lang.Object key = new org.apache.commons.lang.time.FastDateFormat.Pair(new java.lang.Integer(dateStyle), new java.lang.Integer(timeStyle));
        if (timeZone != null) {
            key = new org.apache.commons.lang.time.FastDateFormat.Pair(key, timeZone);
        }
        if (locale != null) {
            key = new org.apache.commons.lang.time.FastDateFormat.Pair(key, locale);
        }
        org.apache.commons.lang.time.FastDateFormat format = ((org.apache.commons.lang.time.FastDateFormat) (org.apache.commons.lang.time.FastDateFormat.cDateTimeInstanceCache.get(key)));
        if (format == null) {
            if (locale == null) {
                locale = java.util.Locale.getDefault();
            }
            try {
                java.text.SimpleDateFormat formatter = ((java.text.SimpleDateFormat) (java.text.DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale)));
                java.lang.String pattern = formatter.toPattern();
                format = org.apache.commons.lang.time.FastDateFormat.getInstance(pattern, timeZone, locale);
                org.apache.commons.lang.time.FastDateFormat.cDateTimeInstanceCache.put(key, format);
            } catch (java.lang.ClassCastException ex) {
                throw new java.lang.IllegalArgumentException(("No date time pattern for locale: " + locale));
            }
        }
        return format;
    }

    static synchronized java.lang.String getTimeZoneDisplay(java.util.TimeZone tz, boolean daylight, int style, java.util.Locale locale) {
        java.lang.Object key = new org.apache.commons.lang.time.FastDateFormat.TimeZoneDisplayKey(tz, daylight, style, locale);
        java.lang.String value = ((java.lang.String) (org.apache.commons.lang.time.FastDateFormat.cTimeZoneDisplayCache.get(key)));
        if (value == null) {
            value = tz.getDisplayName(daylight, style, locale);
            org.apache.commons.lang.time.FastDateFormat.cTimeZoneDisplayCache.put(key, value);
        }
        return value;
    }

    private static synchronized java.lang.String getDefaultPattern() {
        if ((org.apache.commons.lang.time.FastDateFormat.cDefaultPattern) == null) {
            org.apache.commons.lang.time.FastDateFormat.cDefaultPattern = new java.text.SimpleDateFormat().toPattern();
        }
        return org.apache.commons.lang.time.FastDateFormat.cDefaultPattern;
    }

    protected FastDateFormat(java.lang.String pattern, java.util.TimeZone timeZone, java.util.Locale locale) {
        super();
        if (pattern == null) {
            throw new java.lang.IllegalArgumentException("The pattern must not be null");
        }
        mPattern = pattern;
        mTimeZoneForced = timeZone != null;
        if (timeZone == null) {
            timeZone = java.util.TimeZone.getDefault();
        }
        mTimeZone = timeZone;
        mLocaleForced = locale != null;
        if (locale == null) {
            locale = java.util.Locale.getDefault();
        }
        mLocale = locale;
    }

    protected void init() {
        java.util.List rulesList = parsePattern();
        mRules = ((org.apache.commons.lang.time.FastDateFormat.Rule[]) (rulesList.toArray(new org.apache.commons.lang.time.FastDateFormat.Rule[rulesList.size()])));
        int len = 0;
        for (int i = mRules.length; (--i) >= 0;) {
            len += mRules[i].estimateLength();
        }
        mMaxLengthEstimate = len;
    }

    protected java.util.List parsePattern() {
        java.text.DateFormatSymbols symbols = new java.text.DateFormatSymbols(mLocale);
        java.util.List rules = new java.util.ArrayList();
        java.lang.String[] ERAs = symbols.getEras();
        java.lang.String[] months = symbols.getMonths();
        java.lang.String[] shortMonths = symbols.getShortMonths();
        java.lang.String[] weekdays = symbols.getWeekdays();
        java.lang.String[] shortWeekdays = symbols.getShortWeekdays();
        java.lang.String[] AmPmStrings = symbols.getAmPmStrings();
        int length = mPattern.length();
        int[] indexRef = new int[1];
        for (int i = 0; i < length; i++) {
            indexRef[0] = i;
            java.lang.String token = parseToken(mPattern, indexRef);
            i = indexRef[0];
            int tokenLen = token.length();
            if (tokenLen == 0) {
                break;
            }
            org.apache.commons.lang.time.FastDateFormat.Rule rule;
            char c = token.charAt(0);
            switch (c) {
                case 'G' :
                    rule = new org.apache.commons.lang.time.FastDateFormat.TextField(java.util.Calendar.ERA, ERAs);
                    break;
                case 'y' :
                    if (tokenLen >= 4) {
                        rule = selectNumberRule(java.util.Calendar.YEAR, tokenLen);
                    }else {
                        rule = org.apache.commons.lang.time.FastDateFormat.TwoDigitYearField.INSTANCE;
                    }
                    break;
                case 'M' :
                    if (tokenLen >= 4) {
                        boolean spoonDefaultValue = false;
                        try {
                            spoonDefaultValue = true;
                        } catch (java.lang.Exception __NopolProcessorException) {
                        }
                        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                        if (fr.inria.lille.commons.trace.RuntimeValues.instance(0).isEnabled()) {
                            fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectionStarts();
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("shortMonths",shortMonths);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("org.apache.commons.lang.time.FastDateFormat.this.mMaxLengthEstimate",org.apache.commons.lang.time.FastDateFormat.this.mMaxLengthEstimate);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("org.apache.commons.lang.time.FastDateFormat.this.mTimeZoneForced",org.apache.commons.lang.time.FastDateFormat.this.mTimeZoneForced);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("shortWeekdays",shortWeekdays);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("rules",rules);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("org.apache.commons.lang.time.FastDateFormat.MEDIUM",org.apache.commons.lang.time.FastDateFormat.MEDIUM);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("symbols",symbols);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("indexRef",indexRef);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("org.apache.commons.lang.time.FastDateFormat.this.mRules",org.apache.commons.lang.time.FastDateFormat.this.mRules);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("org.apache.commons.lang.time.FastDateFormat.this.mTimeZone",org.apache.commons.lang.time.FastDateFormat.this.mTimeZone);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("org.apache.commons.lang.time.FastDateFormat.cTimeInstanceCache",org.apache.commons.lang.time.FastDateFormat.cTimeInstanceCache);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("org.apache.commons.lang.time.FastDateFormat.this.mLocaleForced",org.apache.commons.lang.time.FastDateFormat.this.mLocaleForced);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("ERAs",ERAs);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("org.apache.commons.lang.time.FastDateFormat.this.mPattern",org.apache.commons.lang.time.FastDateFormat.this.mPattern);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("org.apache.commons.lang.time.FastDateFormat.SHORT",org.apache.commons.lang.time.FastDateFormat.SHORT);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("c",c);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("months",months);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("weekdays",weekdays);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("org.apache.commons.lang.time.FastDateFormat.cDateInstanceCache",org.apache.commons.lang.time.FastDateFormat.cDateInstanceCache);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("length",length);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("org.apache.commons.lang.time.FastDateFormat.LONG",org.apache.commons.lang.time.FastDateFormat.LONG);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("tokenLen",tokenLen);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("org.apache.commons.lang.time.FastDateFormat.cInstanceCache",org.apache.commons.lang.time.FastDateFormat.cInstanceCache);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("org.apache.commons.lang.time.FastDateFormat.this.mLocale",org.apache.commons.lang.time.FastDateFormat.this.mLocale);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("token",token);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("org.apache.commons.lang.time.FastDateFormat.cTimeZoneDisplayCache",org.apache.commons.lang.time.FastDateFormat.cTimeZoneDisplayCache);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("AmPmStrings",AmPmStrings);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("org.apache.commons.lang.time.FastDateFormat.cDateTimeInstanceCache",org.apache.commons.lang.time.FastDateFormat.cDateTimeInstanceCache);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("org.apache.commons.lang.time.FastDateFormat.cDefaultPattern",org.apache.commons.lang.time.FastDateFormat.cDefaultPattern);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("org.apache.commons.lang.time.FastDateFormat.FULL",org.apache.commons.lang.time.FastDateFormat.FULL);} catch (Exception ex1) {ex1.printStackTrace();};
                            fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectOutput(runtimeAngelicValue);
                            fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectionEnds();
                        }
                        if (runtimeAngelicValue)
                            rule = new org.apache.commons.lang.time.FastDateFormat.TextField(java.util.Calendar.MONTH, months);

                    }else
                        if (tokenLen == 3) {
                            rule = new org.apache.commons.lang.time.FastDateFormat.TextField(java.util.Calendar.MONTH, shortMonths);
                        }else
                            if (tokenLen == 2) {
                                rule = org.apache.commons.lang.time.FastDateFormat.TwoDigitMonthField.INSTANCE;
                            }else {
                                rule = org.apache.commons.lang.time.FastDateFormat.UnpaddedMonthField.INSTANCE;
                            }


                    break;
                case 'd' :
                    rule = selectNumberRule(java.util.Calendar.DAY_OF_MONTH, tokenLen);
                    break;
                case 'h' :
                    rule = new org.apache.commons.lang.time.FastDateFormat.TwelveHourField(selectNumberRule(java.util.Calendar.HOUR, tokenLen));
                    break;
                case 'H' :
                    rule = selectNumberRule(java.util.Calendar.HOUR_OF_DAY, tokenLen);
                    break;
                case 'm' :
                    rule = selectNumberRule(java.util.Calendar.MINUTE, tokenLen);
                    break;
                case 's' :
                    rule = selectNumberRule(java.util.Calendar.SECOND, tokenLen);
                    break;
                case 'S' :
                    rule = selectNumberRule(java.util.Calendar.MILLISECOND, tokenLen);
                    break;
                case 'E' :
                    rule = new org.apache.commons.lang.time.FastDateFormat.TextField(java.util.Calendar.DAY_OF_WEEK, (tokenLen < 4 ? shortWeekdays : weekdays));
                    break;
                case 'D' :
                    rule = selectNumberRule(java.util.Calendar.DAY_OF_YEAR, tokenLen);
                    break;
                case 'F' :
                    rule = selectNumberRule(java.util.Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);
                    break;
                case 'w' :
                    rule = selectNumberRule(java.util.Calendar.WEEK_OF_YEAR, tokenLen);
                    break;
                case 'W' :
                    rule = selectNumberRule(java.util.Calendar.WEEK_OF_MONTH, tokenLen);
                    break;
                case 'a' :
                    rule = new org.apache.commons.lang.time.FastDateFormat.TextField(java.util.Calendar.AM_PM, AmPmStrings);
                    break;
                case 'k' :
                    rule = new org.apache.commons.lang.time.FastDateFormat.TwentyFourHourField(selectNumberRule(java.util.Calendar.HOUR_OF_DAY, tokenLen));
                    break;
                case 'K' :
                    rule = selectNumberRule(java.util.Calendar.HOUR, tokenLen);
                    break;
                case 'z' :
                    if (tokenLen >= 4) {
                        rule = new org.apache.commons.lang.time.FastDateFormat.TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, java.util.TimeZone.LONG);
                    }else {
                        rule = new org.apache.commons.lang.time.FastDateFormat.TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, java.util.TimeZone.SHORT);
                    }
                    break;
                case 'Z' :
                    if (tokenLen == 1) {
                        rule = org.apache.commons.lang.time.FastDateFormat.TimeZoneNumberRule.INSTANCE_NO_COLON;
                    }else {
                        rule = org.apache.commons.lang.time.FastDateFormat.TimeZoneNumberRule.INSTANCE_COLON;
                    }
                    break;
                case '\'' :
                    java.lang.String sub = token.substring(1);
                    if ((sub.length()) == 1) {
                        rule = new org.apache.commons.lang.time.FastDateFormat.CharacterLiteral(sub.charAt(0));
                    }else {
                        rule = new org.apache.commons.lang.time.FastDateFormat.StringLiteral(sub);
                    }
                    break;
                default :
                    throw new java.lang.IllegalArgumentException(("Illegal pattern component: " + token));
            }
            rules.add(rule);
        }
        return rules;
    }

    protected java.lang.String parseToken(java.lang.String pattern, int[] indexRef) {
        java.lang.StringBuffer buf = new java.lang.StringBuffer();
        int i = indexRef[0];
        int length = pattern.length();
        char c = pattern.charAt(i);
        if (((c >= 'A') && (c <= 'Z')) || ((c >= 'a') && (c <= 'z'))) {
            buf.append(c);
            while ((i + 1) < length) {
                char peek = pattern.charAt((i + 1));
                if (peek == c) {
                    buf.append(c);
                    i++;
                }else {
                    break;
                }
            } 
        }else {
            buf.append('\'');
            boolean inLiteral = false;
            for (; i < length; i++) {
                c = pattern.charAt(i);
                if (c == '\'') {
                    if (((i + 1) < length) && ((pattern.charAt((i + 1))) == '\'')) {
                        i++;
                        buf.append(c);
                    }else {
                        inLiteral = !inLiteral;
                    }
                }else
                    if ((!inLiteral) && (((c >= 'A') && (c <= 'Z')) || ((c >= 'a') && (c <= 'z')))) {
                        i--;
                        break;
                    }else {
                        buf.append(c);
                    }

            }
        }
        indexRef[0] = i;
        return buf.toString();
    }

    protected org.apache.commons.lang.time.FastDateFormat.NumberRule selectNumberRule(int field, int padding) {
        switch (padding) {
            case 1 :
                return new org.apache.commons.lang.time.FastDateFormat.UnpaddedNumberField(field);
            case 2 :
                return new org.apache.commons.lang.time.FastDateFormat.TwoDigitNumberField(field);
            default :
                return new org.apache.commons.lang.time.FastDateFormat.PaddedNumberField(field, padding);
        }
    }

    public java.lang.StringBuffer format(java.lang.Object obj, java.lang.StringBuffer toAppendTo, java.text.FieldPosition pos) {
        if (obj instanceof java.util.Date) {
            return format(((java.util.Date) (obj)), toAppendTo);
        }else
            if (obj instanceof java.util.Calendar) {
                return format(((java.util.Calendar) (obj)), toAppendTo);
            }else
                if (obj instanceof java.lang.Long) {
                    return format(((java.lang.Long) (obj)).longValue(), toAppendTo);
                }else {
                    throw new java.lang.IllegalArgumentException(("Unknown class: " + (obj == null ? "<null>" : obj.getClass().getName())));
                }


    }

    public java.lang.String format(long millis) {
        return format(new java.util.Date(millis));
    }

    public java.lang.String format(java.util.Date date) {
        java.util.Calendar c = new java.util.GregorianCalendar(mTimeZone);
        c.setTime(date);
        return applyRules(c, new java.lang.StringBuffer(mMaxLengthEstimate)).toString();
    }

    public java.lang.String format(java.util.Calendar calendar) {
        return format(calendar, new java.lang.StringBuffer(mMaxLengthEstimate)).toString();
    }

    public java.lang.StringBuffer format(long millis, java.lang.StringBuffer buf) {
        return format(new java.util.Date(millis), buf);
    }

    public java.lang.StringBuffer format(java.util.Date date, java.lang.StringBuffer buf) {
        java.util.Calendar c = new java.util.GregorianCalendar(mTimeZone);
        c.setTime(date);
        return applyRules(c, buf);
    }

    public java.lang.StringBuffer format(java.util.Calendar calendar, java.lang.StringBuffer buf) {
        if (mTimeZoneForced) {
            calendar = ((java.util.Calendar) (calendar.clone()));
            calendar.setTimeZone(mTimeZone);
        }
        return applyRules(calendar, buf);
    }

    protected java.lang.StringBuffer applyRules(java.util.Calendar calendar, java.lang.StringBuffer buf) {
        org.apache.commons.lang.time.FastDateFormat.Rule[] rules = mRules;
        int len = mRules.length;
        for (int i = 0; i < len; i++) {
            rules[i].appendTo(buf, calendar);
        }
        return buf;
    }

    public java.lang.Object parseObject(java.lang.String source, java.text.ParsePosition pos) {
        pos.setIndex(0);
        pos.setErrorIndex(0);
        return null;
    }

    public java.lang.String getPattern() {
        return mPattern;
    }

    public java.util.TimeZone getTimeZone() {
        return mTimeZone;
    }

    public boolean getTimeZoneOverridesCalendar() {
        return mTimeZoneForced;
    }

    public java.util.Locale getLocale() {
        return mLocale;
    }

    public int getMaxLengthEstimate() {
        return mMaxLengthEstimate;
    }

    public boolean equals(java.lang.Object obj) {
        if ((obj instanceof org.apache.commons.lang.time.FastDateFormat) == false) {
            return false;
        }
        org.apache.commons.lang.time.FastDateFormat other = ((org.apache.commons.lang.time.FastDateFormat) (obj));
        if (((((((mPattern) == (other.mPattern)) || (mPattern.equals(other.mPattern))) && (((mTimeZone) == (other.mTimeZone)) || (mTimeZone.equals(other.mTimeZone)))) && (((mLocale) == (other.mLocale)) || (mLocale.equals(other.mLocale)))) && ((mTimeZoneForced) == (other.mTimeZoneForced))) && ((mLocaleForced) == (other.mLocaleForced))) {
            return true;
        }
        return false;
    }

    public int hashCode() {
        int total = 0;
        total += mPattern.hashCode();
        total += mTimeZone.hashCode();
        total += (mTimeZoneForced) ? 1 : 0;
        total += mLocale.hashCode();
        total += (mLocaleForced) ? 1 : 0;
        return total;
    }

    public java.lang.String toString() {
        return ("FastDateFormat[" + (mPattern)) + "]";
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
        in.defaultReadObject();
        init();
    }

    private interface Rule {
        int estimateLength();

        void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar);
    }

    private interface NumberRule extends org.apache.commons.lang.time.FastDateFormat.Rule {
        void appendTo(java.lang.StringBuffer buffer, int value);
    }

    private static class CharacterLiteral implements org.apache.commons.lang.time.FastDateFormat.Rule {
        private final char mValue;

        CharacterLiteral(char value) {
            mValue = value;
        }

        public int estimateLength() {
            return 1;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            buffer.append(mValue);
        }
    }

    private static class StringLiteral implements org.apache.commons.lang.time.FastDateFormat.Rule {
        private final java.lang.String mValue;

        StringLiteral(java.lang.String value) {
            mValue = value;
        }

        public int estimateLength() {
            return mValue.length();
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            buffer.append(mValue);
        }
    }

    private static class TextField implements org.apache.commons.lang.time.FastDateFormat.Rule {
        private final int mField;

        private final java.lang.String[] mValues;

        TextField(int field, java.lang.String[] values) {
            mField = field;
            mValues = values;
        }

        public int estimateLength() {
            int max = 0;
            for (int i = mValues.length; (--i) >= 0;) {
                int len = mValues[i].length();
                if (len > max) {
                    max = len;
                }
            }
            return max;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            buffer.append(mValues[calendar.get(mField)]);
        }
    }

    private static class UnpaddedNumberField implements org.apache.commons.lang.time.FastDateFormat.NumberRule {
        static final org.apache.commons.lang.time.FastDateFormat.UnpaddedNumberField INSTANCE_YEAR = new org.apache.commons.lang.time.FastDateFormat.UnpaddedNumberField(java.util.Calendar.YEAR);

        private final int mField;

        UnpaddedNumberField(int field) {
            mField = field;
        }

        public int estimateLength() {
            return 4;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            appendTo(buffer, calendar.get(mField));
        }

        public final void appendTo(java.lang.StringBuffer buffer, int value) {
            if (value < 10) {
                buffer.append(((char) (value + '0')));
            }else
                if (value < 100) {
                    buffer.append(((char) ((value / 10) + '0')));
                    buffer.append(((char) ((value % 10) + '0')));
                }else {
                    buffer.append(java.lang.Integer.toString(value));
                }

        }
    }

    private static class UnpaddedMonthField implements org.apache.commons.lang.time.FastDateFormat.NumberRule {
        static final org.apache.commons.lang.time.FastDateFormat.UnpaddedMonthField INSTANCE = new org.apache.commons.lang.time.FastDateFormat.UnpaddedMonthField();

        UnpaddedMonthField() {
            super();
        }

        public int estimateLength() {
            return 2;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            appendTo(buffer, ((calendar.get(java.util.Calendar.MONTH)) + 1));
        }

        public final void appendTo(java.lang.StringBuffer buffer, int value) {
            if (value < 10) {
                buffer.append(((char) (value + '0')));
            }else {
                buffer.append(((char) ((value / 10) + '0')));
                buffer.append(((char) ((value % 10) + '0')));
            }
        }
    }

    private static class PaddedNumberField implements org.apache.commons.lang.time.FastDateFormat.NumberRule {
        private final int mField;

        private final int mSize;

        PaddedNumberField(int field, int size) {
            if (size < 3) {
                throw new java.lang.IllegalArgumentException();
            }
            mField = field;
            mSize = size;
        }

        public int estimateLength() {
            return 4;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            appendTo(buffer, calendar.get(mField));
        }

        public final void appendTo(java.lang.StringBuffer buffer, int value) {
            if (value < 100) {
                for (int i = mSize; (--i) >= 2;) {
                    buffer.append('0');
                }
                buffer.append(((char) ((value / 10) + '0')));
                buffer.append(((char) ((value % 10) + '0')));
            }else {
                int digits;
                if (value < 1000) {
                    digits = 3;
                }else {
                    org.apache.commons.lang.Validate.isTrue((value > (-1)), "Negative values should not be possible", value);
                    digits = java.lang.Integer.toString(value).length();
                }
                for (int i = mSize; (--i) >= digits;) {
                    buffer.append('0');
                }
                buffer.append(java.lang.Integer.toString(value));
            }
        }
    }

    private static class TwoDigitNumberField implements org.apache.commons.lang.time.FastDateFormat.NumberRule {
        private final int mField;

        TwoDigitNumberField(int field) {
            mField = field;
        }

        public int estimateLength() {
            return 2;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            appendTo(buffer, calendar.get(mField));
        }

        public final void appendTo(java.lang.StringBuffer buffer, int value) {
            if (value < 100) {
                buffer.append(((char) ((value / 10) + '0')));
                buffer.append(((char) ((value % 10) + '0')));
            }else {
                buffer.append(java.lang.Integer.toString(value));
            }
        }
    }

    private static class TwoDigitYearField implements org.apache.commons.lang.time.FastDateFormat.NumberRule {
        static final org.apache.commons.lang.time.FastDateFormat.TwoDigitYearField INSTANCE = new org.apache.commons.lang.time.FastDateFormat.TwoDigitYearField();

        TwoDigitYearField() {
            super();
        }

        public int estimateLength() {
            return 2;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            appendTo(buffer, ((calendar.get(java.util.Calendar.YEAR)) % 100));
        }

        public final void appendTo(java.lang.StringBuffer buffer, int value) {
            buffer.append(((char) ((value / 10) + '0')));
            buffer.append(((char) ((value % 10) + '0')));
        }
    }

    private static class TwoDigitMonthField implements org.apache.commons.lang.time.FastDateFormat.NumberRule {
        static final org.apache.commons.lang.time.FastDateFormat.TwoDigitMonthField INSTANCE = new org.apache.commons.lang.time.FastDateFormat.TwoDigitMonthField();

        TwoDigitMonthField() {
            super();
        }

        public int estimateLength() {
            return 2;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            appendTo(buffer, ((calendar.get(java.util.Calendar.MONTH)) + 1));
        }

        public final void appendTo(java.lang.StringBuffer buffer, int value) {
            buffer.append(((char) ((value / 10) + '0')));
            buffer.append(((char) ((value % 10) + '0')));
        }
    }

    private static class TwelveHourField implements org.apache.commons.lang.time.FastDateFormat.NumberRule {
        private final org.apache.commons.lang.time.FastDateFormat.NumberRule mRule;

        TwelveHourField(org.apache.commons.lang.time.FastDateFormat.NumberRule rule) {
            mRule = rule;
        }

        public int estimateLength() {
            return mRule.estimateLength();
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            int value = calendar.get(java.util.Calendar.HOUR);
            if (value == 0) {
                value = (calendar.getLeastMaximum(java.util.Calendar.HOUR)) + 1;
            }
            mRule.appendTo(buffer, value);
        }

        public void appendTo(java.lang.StringBuffer buffer, int value) {
            mRule.appendTo(buffer, value);
        }
    }

    private static class TwentyFourHourField implements org.apache.commons.lang.time.FastDateFormat.NumberRule {
        private final org.apache.commons.lang.time.FastDateFormat.NumberRule mRule;

        TwentyFourHourField(org.apache.commons.lang.time.FastDateFormat.NumberRule rule) {
            mRule = rule;
        }

        public int estimateLength() {
            return mRule.estimateLength();
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            int value = calendar.get(java.util.Calendar.HOUR_OF_DAY);
            if (value == 0) {
                value = (calendar.getMaximum(java.util.Calendar.HOUR_OF_DAY)) + 1;
            }
            mRule.appendTo(buffer, value);
        }

        public void appendTo(java.lang.StringBuffer buffer, int value) {
            mRule.appendTo(buffer, value);
        }
    }

    private static class TimeZoneNameRule implements org.apache.commons.lang.time.FastDateFormat.Rule {
        private final java.util.TimeZone mTimeZone;

        private final boolean mTimeZoneForced;

        private final java.util.Locale mLocale;

        private final int mStyle;

        private final java.lang.String mStandard;

        private final java.lang.String mDaylight;

        TimeZoneNameRule(java.util.TimeZone timeZone, boolean timeZoneForced, java.util.Locale locale, int style) {
            mTimeZone = timeZone;
            mTimeZoneForced = timeZoneForced;
            mLocale = locale;
            mStyle = style;
            if (timeZoneForced) {
                mStandard = org.apache.commons.lang.time.FastDateFormat.getTimeZoneDisplay(timeZone, false, style, locale);
                mDaylight = org.apache.commons.lang.time.FastDateFormat.getTimeZoneDisplay(timeZone, true, style, locale);
            }else {
                mStandard = null;
                mDaylight = null;
            }
        }

        public int estimateLength() {
            if (mTimeZoneForced) {
                return java.lang.Math.max(mStandard.length(), mDaylight.length());
            }else
                if ((mStyle) == (java.util.TimeZone.SHORT)) {
                    return 4;
                }else {
                    return 40;
                }

        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            if (mTimeZoneForced) {
                if ((mTimeZone.useDaylightTime()) && ((calendar.get(java.util.Calendar.DST_OFFSET)) != 0)) {
                    buffer.append(mDaylight);
                }else {
                    buffer.append(mStandard);
                }
            }else {
                java.util.TimeZone timeZone = calendar.getTimeZone();
                if ((timeZone.useDaylightTime()) && ((calendar.get(java.util.Calendar.DST_OFFSET)) != 0)) {
                    buffer.append(org.apache.commons.lang.time.FastDateFormat.getTimeZoneDisplay(timeZone, true, mStyle, mLocale));
                }else {
                    buffer.append(org.apache.commons.lang.time.FastDateFormat.getTimeZoneDisplay(timeZone, false, mStyle, mLocale));
                }
            }
        }
    }

    private static class TimeZoneNumberRule implements org.apache.commons.lang.time.FastDateFormat.Rule {
        static final org.apache.commons.lang.time.FastDateFormat.TimeZoneNumberRule INSTANCE_COLON = new org.apache.commons.lang.time.FastDateFormat.TimeZoneNumberRule(true);

        static final org.apache.commons.lang.time.FastDateFormat.TimeZoneNumberRule INSTANCE_NO_COLON = new org.apache.commons.lang.time.FastDateFormat.TimeZoneNumberRule(false);

        final boolean mColon;

        TimeZoneNumberRule(boolean colon) {
            mColon = colon;
        }

        public int estimateLength() {
            return 5;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            int offset = (calendar.get(java.util.Calendar.ZONE_OFFSET)) + (calendar.get(java.util.Calendar.DST_OFFSET));
            if (offset < 0) {
                buffer.append('-');
                offset = -offset;
            }else {
                buffer.append('+');
            }
            int hours = offset / ((60 * 60) * 1000);
            buffer.append(((char) ((hours / 10) + '0')));
            buffer.append(((char) ((hours % 10) + '0')));
            if (mColon) {
                buffer.append(':');
            }
            int minutes = (offset / (60 * 1000)) - (60 * hours);
            buffer.append(((char) ((minutes / 10) + '0')));
            buffer.append(((char) ((minutes % 10) + '0')));
        }
    }

    private static class TimeZoneDisplayKey {
        private final java.util.TimeZone mTimeZone;

        private final int mStyle;

        private final java.util.Locale mLocale;

        TimeZoneDisplayKey(java.util.TimeZone timeZone, boolean daylight, int style, java.util.Locale locale) {
            mTimeZone = timeZone;
            if (daylight) {
                style |= -2147483648;
            }
            mStyle = style;
            mLocale = locale;
        }

        public int hashCode() {
            return ((mStyle) * 31) + (mLocale.hashCode());
        }

        public boolean equals(java.lang.Object obj) {
            if ((this) == obj) {
                return true;
            }
            if (obj instanceof org.apache.commons.lang.time.FastDateFormat.TimeZoneDisplayKey) {
                org.apache.commons.lang.time.FastDateFormat.TimeZoneDisplayKey other = ((org.apache.commons.lang.time.FastDateFormat.TimeZoneDisplayKey) (obj));
                return ((mTimeZone.equals(other.mTimeZone)) && ((mStyle) == (other.mStyle))) && (mLocale.equals(other.mLocale));
            }
            return false;
        }
    }

    private static class Pair {
        private final java.lang.Object mObj1;

        private final java.lang.Object mObj2;

        public Pair(java.lang.Object obj1, java.lang.Object obj2) {
            mObj1 = obj1;
            mObj2 = obj2;
        }

        public boolean equals(java.lang.Object obj) {
            if ((this) == obj) {
                return true;
            }
            if (!(obj instanceof org.apache.commons.lang.time.FastDateFormat.Pair)) {
                return false;
            }
            org.apache.commons.lang.time.FastDateFormat.Pair key = ((org.apache.commons.lang.time.FastDateFormat.Pair) (obj));
            return ((mObj1) == null ? (key.mObj1) == null : mObj1.equals(key.mObj1)) && ((mObj2) == null ? (key.mObj2) == null : mObj2.equals(key.mObj2));
        }

        public int hashCode() {
            return ((mObj1) == null ? 0 : mObj1.hashCode()) + ((mObj2) == null ? 0 : mObj2.hashCode());
        }

        public java.lang.String toString() {
            return ((("[" + (mObj1)) + ':') + (mObj2)) + ']';
        }
    }
}
18:38:33.683 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
18:38:33.683 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #2
18:38:33.683 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang.time.FastDateFormat$Pair:1738 which is executed by 3 tests
-1899260190
18:38:33.866 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #3
18:38:33.866 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang.time.FastDateFormat$Pair:1727 which is executed by 1 tests
-1899260190
18:38:34.015 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #4
18:38:34.016 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang.time.FastDateFormat$Pair:1725 which is executed by 1 tests
-1899260190
18:38:34.164 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #5
18:38:34.165 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang.time.FastDateFormat$Pair:1721 which is executed by 1 tests
-1899260190
18:38:34.318 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:38:34.337 [pool-6-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (14 ms)
<> Total tests run: 13
<> Ignored tests: 0
<> Failed tests: 2
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
18:38:35.522 [pool-7-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (4 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:38:35.529 [pool-8-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (5 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
18:38:35.531 [pool-9-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:38:35.533 [pool-10-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

18:38:35.534 [pool-5-thread-1] DEBUG tests.output - Failing tests with false: 
[test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>, test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>]
18:38:35.534 [pool-5-thread-1] DEBUG tests.output - Failing tests with true: 
[test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>, test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>]
18:38:35.535 [pool-5-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.lang.time.FastDateFormat$Pair:1721.
18:38:35.535 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:38:35.551 [pool-12-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (13 ms)
<> Total tests run: 13
<> Ignored tests: 0
<> Failed tests: 2
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
18:38:36.482 [pool-13-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (4 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:38:36.485 [pool-14-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
18:38:36.488 [pool-15-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)

18:38:36.492 [pool-16-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

18:38:36.493 [pool-11-thread-1] DEBUG tests.output - Failing tests with false: 
[test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>, test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>]
18:38:36.493 [pool-11-thread-1] DEBUG tests.output - Failing tests with true: 
[test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>]
18:38:36.493 [pool-11-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.lang.time.FastDateFormat$Pair:1721.
18:38:36.493 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #6
18:38:36.494 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang.time.FastDateFormat$Pair:1717 which is executed by 1 tests
-1899260190
18:38:36.616 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:38:36.632 [pool-18-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (12 ms)
<> Total tests run: 13
<> Ignored tests: 0
<> Failed tests: 2
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
18:38:37.440 [pool-19-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (4 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:38:37.443 [pool-20-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
18:38:37.446 [pool-21-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:38:37.447 [pool-22-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

18:38:37.448 [pool-17-thread-1] DEBUG tests.output - Failing tests with false: 
[test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>, test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>]
18:38:37.448 [pool-17-thread-1] DEBUG tests.output - Failing tests with true: 
[test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>, test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>]
18:38:37.448 [pool-17-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.lang.time.FastDateFormat$Pair:1717.
18:38:37.448 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:38:37.464 [pool-24-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (13 ms)
<> Total tests run: 13
<> Ignored tests: 0
<> Failed tests: 2
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
18:38:38.263 [pool-25-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (3 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:38:38.266 [pool-26-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
18:38:38.268 [pool-27-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:38:38.269 [pool-28-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

18:38:38.270 [pool-23-thread-1] DEBUG tests.output - Failing tests with false: 
[test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>, test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>]
18:38:38.270 [pool-23-thread-1] DEBUG tests.output - Failing tests with true: 
[test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>, test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>]
18:38:38.271 [pool-23-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.lang.time.FastDateFormat$Pair:1717.
18:38:38.271 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #7
18:38:38.271 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang.time.FastDateFormat$TimeZoneNameRule:1560 which is executed by 1 tests
-1899260190
18:38:38.387 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:38:38.404 [pool-30-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (14 ms)
<> Total tests run: 13
<> Ignored tests: 0
<> Failed tests: 2
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

18:38:39.231 [pool-29-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
FastDateFormat.java:850: error: missing return statement
        }
        ^
Note: FastDateFormat.java uses unchecked or unsafe operations.
Note: Recompile with -Xlint:unchecked for details.
18:38:39.764 [pool-29-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public class FastDateFormat extends java.text.Format {
    private static final long serialVersionUID = 1L;

    public static final int FULL = java.text.DateFormat.FULL;

    public static final int LONG = java.text.DateFormat.LONG;

    public static final int MEDIUM = java.text.DateFormat.MEDIUM;

    public static final int SHORT = java.text.DateFormat.SHORT;

    private static java.lang.String cDefaultPattern;

    private static java.util.Map cInstanceCache = new java.util.HashMap(7);

    private static java.util.Map cDateInstanceCache = new java.util.HashMap(7);

    private static java.util.Map cTimeInstanceCache = new java.util.HashMap(7);

    private static java.util.Map cDateTimeInstanceCache = new java.util.HashMap(7);

    private static java.util.Map cTimeZoneDisplayCache = new java.util.HashMap(7);

    private final java.lang.String mPattern;

    private final java.util.TimeZone mTimeZone;

    private final boolean mTimeZoneForced;

    private final java.util.Locale mLocale;

    private final boolean mLocaleForced;

    private transient org.apache.commons.lang.time.FastDateFormat.Rule[] mRules;

    private transient int mMaxLengthEstimate;

    public static org.apache.commons.lang.time.FastDateFormat getInstance() {
        return org.apache.commons.lang.time.FastDateFormat.getInstance(org.apache.commons.lang.time.FastDateFormat.getDefaultPattern(), null, null);
    }

    public static org.apache.commons.lang.time.FastDateFormat getInstance(java.lang.String pattern) {
        return org.apache.commons.lang.time.FastDateFormat.getInstance(pattern, null, null);
    }

    public static org.apache.commons.lang.time.FastDateFormat getInstance(java.lang.String pattern, java.util.TimeZone timeZone) {
        return org.apache.commons.lang.time.FastDateFormat.getInstance(pattern, timeZone, null);
    }

    public static org.apache.commons.lang.time.FastDateFormat getInstance(java.lang.String pattern, java.util.Locale locale) {
        return org.apache.commons.lang.time.FastDateFormat.getInstance(pattern, null, locale);
    }

    public static synchronized org.apache.commons.lang.time.FastDateFormat getInstance(java.lang.String pattern, java.util.TimeZone timeZone, java.util.Locale locale) {
        org.apache.commons.lang.time.FastDateFormat emptyFormat = new org.apache.commons.lang.time.FastDateFormat(pattern, timeZone, locale);
        org.apache.commons.lang.time.FastDateFormat format = ((org.apache.commons.lang.time.FastDateFormat) (org.apache.commons.lang.time.FastDateFormat.cInstanceCache.get(emptyFormat)));
        if (format == null) {
            format = emptyFormat;
            format.init();
            org.apache.commons.lang.time.FastDateFormat.cInstanceCache.put(format, format);
        }
        return format;
    }

    public static org.apache.commons.lang.time.FastDateFormat getDateInstance(int style) {
        return org.apache.commons.lang.time.FastDateFormat.getDateInstance(style, null, null);
    }

    public static org.apache.commons.lang.time.FastDateFormat getDateInstance(int style, java.util.Locale locale) {
        return org.apache.commons.lang.time.FastDateFormat.getDateInstance(style, null, locale);
    }

    public static org.apache.commons.lang.time.FastDateFormat getDateInstance(int style, java.util.TimeZone timeZone) {
        return org.apache.commons.lang.time.FastDateFormat.getDateInstance(style, timeZone, null);
    }

    public static synchronized org.apache.commons.lang.time.FastDateFormat getDateInstance(int style, java.util.TimeZone timeZone, java.util.Locale locale) {
        java.lang.Object key = new java.lang.Integer(style);
        if (timeZone != null) {
            key = new org.apache.commons.lang.time.FastDateFormat.Pair(key, timeZone);
        }
        if (locale != null) {
            key = new org.apache.commons.lang.time.FastDateFormat.Pair(key, locale);
        }
        org.apache.commons.lang.time.FastDateFormat format = ((org.apache.commons.lang.time.FastDateFormat) (org.apache.commons.lang.time.FastDateFormat.cDateInstanceCache.get(key)));
        if (format == null) {
            if (locale == null) {
                locale = java.util.Locale.getDefault();
            }
            try {
                java.text.SimpleDateFormat formatter = ((java.text.SimpleDateFormat) (java.text.DateFormat.getDateInstance(style, locale)));
                java.lang.String pattern = formatter.toPattern();
                format = org.apache.commons.lang.time.FastDateFormat.getInstance(pattern, timeZone, locale);
                org.apache.commons.lang.time.FastDateFormat.cDateInstanceCache.put(key, format);
            } catch (java.lang.ClassCastException ex) {
                throw new java.lang.IllegalArgumentException(("No date pattern for locale: " + locale));
            }
        }
        return format;
    }

    public static org.apache.commons.lang.time.FastDateFormat getTimeInstance(int style) {
        return org.apache.commons.lang.time.FastDateFormat.getTimeInstance(style, null, null);
    }

    public static org.apache.commons.lang.time.FastDateFormat getTimeInstance(int style, java.util.Locale locale) {
        return org.apache.commons.lang.time.FastDateFormat.getTimeInstance(style, null, locale);
    }

    public static org.apache.commons.lang.time.FastDateFormat getTimeInstance(int style, java.util.TimeZone timeZone) {
        return org.apache.commons.lang.time.FastDateFormat.getTimeInstance(style, timeZone, null);
    }

    public static synchronized org.apache.commons.lang.time.FastDateFormat getTimeInstance(int style, java.util.TimeZone timeZone, java.util.Locale locale) {
        java.lang.Object key = new java.lang.Integer(style);
        if (timeZone != null) {
            key = new org.apache.commons.lang.time.FastDateFormat.Pair(key, timeZone);
        }
        if (locale != null) {
            key = new org.apache.commons.lang.time.FastDateFormat.Pair(key, locale);
        }
        org.apache.commons.lang.time.FastDateFormat format = ((org.apache.commons.lang.time.FastDateFormat) (org.apache.commons.lang.time.FastDateFormat.cTimeInstanceCache.get(key)));
        if (format == null) {
            if (locale == null) {
                locale = java.util.Locale.getDefault();
            }
            try {
                java.text.SimpleDateFormat formatter = ((java.text.SimpleDateFormat) (java.text.DateFormat.getTimeInstance(style, locale)));
                java.lang.String pattern = formatter.toPattern();
                format = org.apache.commons.lang.time.FastDateFormat.getInstance(pattern, timeZone, locale);
                org.apache.commons.lang.time.FastDateFormat.cTimeInstanceCache.put(key, format);
            } catch (java.lang.ClassCastException ex) {
                throw new java.lang.IllegalArgumentException(("No date pattern for locale: " + locale));
            }
        }
        return format;
    }

    public static org.apache.commons.lang.time.FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle) {
        return org.apache.commons.lang.time.FastDateFormat.getDateTimeInstance(dateStyle, timeStyle, null, null);
    }

    public static org.apache.commons.lang.time.FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, java.util.Locale locale) {
        return org.apache.commons.lang.time.FastDateFormat.getDateTimeInstance(dateStyle, timeStyle, null, locale);
    }

    public static org.apache.commons.lang.time.FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, java.util.TimeZone timeZone) {
        return org.apache.commons.lang.time.FastDateFormat.getDateTimeInstance(dateStyle, timeStyle, timeZone, null);
    }

    public static synchronized org.apache.commons.lang.time.FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, java.util.TimeZone timeZone, java.util.Locale locale) {
        java.lang.Object key = new org.apache.commons.lang.time.FastDateFormat.Pair(new java.lang.Integer(dateStyle), new java.lang.Integer(timeStyle));
        if (timeZone != null) {
            key = new org.apache.commons.lang.time.FastDateFormat.Pair(key, timeZone);
        }
        if (locale != null) {
            key = new org.apache.commons.lang.time.FastDateFormat.Pair(key, locale);
        }
        org.apache.commons.lang.time.FastDateFormat format = ((org.apache.commons.lang.time.FastDateFormat) (org.apache.commons.lang.time.FastDateFormat.cDateTimeInstanceCache.get(key)));
        if (format == null) {
            if (locale == null) {
                locale = java.util.Locale.getDefault();
            }
            try {
                java.text.SimpleDateFormat formatter = ((java.text.SimpleDateFormat) (java.text.DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale)));
                java.lang.String pattern = formatter.toPattern();
                format = org.apache.commons.lang.time.FastDateFormat.getInstance(pattern, timeZone, locale);
                org.apache.commons.lang.time.FastDateFormat.cDateTimeInstanceCache.put(key, format);
            } catch (java.lang.ClassCastException ex) {
                throw new java.lang.IllegalArgumentException(("No date time pattern for locale: " + locale));
            }
        }
        return format;
    }

    static synchronized java.lang.String getTimeZoneDisplay(java.util.TimeZone tz, boolean daylight, int style, java.util.Locale locale) {
        java.lang.Object key = new org.apache.commons.lang.time.FastDateFormat.TimeZoneDisplayKey(tz, daylight, style, locale);
        java.lang.String value = ((java.lang.String) (org.apache.commons.lang.time.FastDateFormat.cTimeZoneDisplayCache.get(key)));
        if (value == null) {
            value = tz.getDisplayName(daylight, style, locale);
            org.apache.commons.lang.time.FastDateFormat.cTimeZoneDisplayCache.put(key, value);
        }
        return value;
    }

    private static synchronized java.lang.String getDefaultPattern() {
        if ((org.apache.commons.lang.time.FastDateFormat.cDefaultPattern) == null) {
            org.apache.commons.lang.time.FastDateFormat.cDefaultPattern = new java.text.SimpleDateFormat().toPattern();
        }
        return org.apache.commons.lang.time.FastDateFormat.cDefaultPattern;
    }

    protected FastDateFormat(java.lang.String pattern, java.util.TimeZone timeZone, java.util.Locale locale) {
        super();
        if (pattern == null) {
            throw new java.lang.IllegalArgumentException("The pattern must not be null");
        }
        mPattern = pattern;
        mTimeZoneForced = timeZone != null;
        if (timeZone == null) {
            timeZone = java.util.TimeZone.getDefault();
        }
        mTimeZone = timeZone;
        mLocaleForced = locale != null;
        if (locale == null) {
            locale = java.util.Locale.getDefault();
        }
        mLocale = locale;
    }

    protected void init() {
        java.util.List rulesList = parsePattern();
        mRules = ((org.apache.commons.lang.time.FastDateFormat.Rule[]) (rulesList.toArray(new org.apache.commons.lang.time.FastDateFormat.Rule[rulesList.size()])));
        int len = 0;
        for (int i = mRules.length; (--i) >= 0;) {
            len += mRules[i].estimateLength();
        }
        mMaxLengthEstimate = len;
    }

    protected java.util.List parsePattern() {
        java.text.DateFormatSymbols symbols = new java.text.DateFormatSymbols(mLocale);
        java.util.List rules = new java.util.ArrayList();
        java.lang.String[] ERAs = symbols.getEras();
        java.lang.String[] months = symbols.getMonths();
        java.lang.String[] shortMonths = symbols.getShortMonths();
        java.lang.String[] weekdays = symbols.getWeekdays();
        java.lang.String[] shortWeekdays = symbols.getShortWeekdays();
        java.lang.String[] AmPmStrings = symbols.getAmPmStrings();
        int length = mPattern.length();
        int[] indexRef = new int[1];
        for (int i = 0; i < length; i++) {
            indexRef[0] = i;
            java.lang.String token = parseToken(mPattern, indexRef);
            i = indexRef[0];
            int tokenLen = token.length();
            if (tokenLen == 0) {
                break;
            }
            org.apache.commons.lang.time.FastDateFormat.Rule rule;
            char c = token.charAt(0);
            switch (c) {
                case 'G' :
                    rule = new org.apache.commons.lang.time.FastDateFormat.TextField(java.util.Calendar.ERA, ERAs);
                    break;
                case 'y' :
                    if (tokenLen >= 4) {
                        rule = selectNumberRule(java.util.Calendar.YEAR, tokenLen);
                    }else {
                        rule = org.apache.commons.lang.time.FastDateFormat.TwoDigitYearField.INSTANCE;
                    }
                    break;
                case 'M' :
                    if (tokenLen >= 4) {
                        rule = new org.apache.commons.lang.time.FastDateFormat.TextField(java.util.Calendar.MONTH, months);
                    }else
                        if (tokenLen == 3) {
                            rule = new org.apache.commons.lang.time.FastDateFormat.TextField(java.util.Calendar.MONTH, shortMonths);
                        }else
                            if (tokenLen == 2) {
                                rule = org.apache.commons.lang.time.FastDateFormat.TwoDigitMonthField.INSTANCE;
                            }else {
                                rule = org.apache.commons.lang.time.FastDateFormat.UnpaddedMonthField.INSTANCE;
                            }


                    break;
                case 'd' :
                    rule = selectNumberRule(java.util.Calendar.DAY_OF_MONTH, tokenLen);
                    break;
                case 'h' :
                    rule = new org.apache.commons.lang.time.FastDateFormat.TwelveHourField(selectNumberRule(java.util.Calendar.HOUR, tokenLen));
                    break;
                case 'H' :
                    rule = selectNumberRule(java.util.Calendar.HOUR_OF_DAY, tokenLen);
                    break;
                case 'm' :
                    rule = selectNumberRule(java.util.Calendar.MINUTE, tokenLen);
                    break;
                case 's' :
                    rule = selectNumberRule(java.util.Calendar.SECOND, tokenLen);
                    break;
                case 'S' :
                    rule = selectNumberRule(java.util.Calendar.MILLISECOND, tokenLen);
                    break;
                case 'E' :
                    rule = new org.apache.commons.lang.time.FastDateFormat.TextField(java.util.Calendar.DAY_OF_WEEK, (tokenLen < 4 ? shortWeekdays : weekdays));
                    break;
                case 'D' :
                    rule = selectNumberRule(java.util.Calendar.DAY_OF_YEAR, tokenLen);
                    break;
                case 'F' :
                    rule = selectNumberRule(java.util.Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);
                    break;
                case 'w' :
                    rule = selectNumberRule(java.util.Calendar.WEEK_OF_YEAR, tokenLen);
                    break;
                case 'W' :
                    rule = selectNumberRule(java.util.Calendar.WEEK_OF_MONTH, tokenLen);
                    break;
                case 'a' :
                    rule = new org.apache.commons.lang.time.FastDateFormat.TextField(java.util.Calendar.AM_PM, AmPmStrings);
                    break;
                case 'k' :
                    rule = new org.apache.commons.lang.time.FastDateFormat.TwentyFourHourField(selectNumberRule(java.util.Calendar.HOUR_OF_DAY, tokenLen));
                    break;
                case 'K' :
                    rule = selectNumberRule(java.util.Calendar.HOUR, tokenLen);
                    break;
                case 'z' :
                    if (tokenLen >= 4) {
                        rule = new org.apache.commons.lang.time.FastDateFormat.TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, java.util.TimeZone.LONG);
                    }else {
                        rule = new org.apache.commons.lang.time.FastDateFormat.TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, java.util.TimeZone.SHORT);
                    }
                    break;
                case 'Z' :
                    if (tokenLen == 1) {
                        rule = org.apache.commons.lang.time.FastDateFormat.TimeZoneNumberRule.INSTANCE_NO_COLON;
                    }else {
                        rule = org.apache.commons.lang.time.FastDateFormat.TimeZoneNumberRule.INSTANCE_COLON;
                    }
                    break;
                case '\'' :
                    java.lang.String sub = token.substring(1);
                    if ((sub.length()) == 1) {
                        rule = new org.apache.commons.lang.time.FastDateFormat.CharacterLiteral(sub.charAt(0));
                    }else {
                        rule = new org.apache.commons.lang.time.FastDateFormat.StringLiteral(sub);
                    }
                    break;
                default :
                    throw new java.lang.IllegalArgumentException(("Illegal pattern component: " + token));
            }
            rules.add(rule);
        }
        return rules;
    }

    protected java.lang.String parseToken(java.lang.String pattern, int[] indexRef) {
        java.lang.StringBuffer buf = new java.lang.StringBuffer();
        int i = indexRef[0];
        int length = pattern.length();
        char c = pattern.charAt(i);
        if (((c >= 'A') && (c <= 'Z')) || ((c >= 'a') && (c <= 'z'))) {
            buf.append(c);
            while ((i + 1) < length) {
                char peek = pattern.charAt((i + 1));
                if (peek == c) {
                    buf.append(c);
                    i++;
                }else {
                    break;
                }
            } 
        }else {
            buf.append('\'');
            boolean inLiteral = false;
            for (; i < length; i++) {
                c = pattern.charAt(i);
                if (c == '\'') {
                    if (((i + 1) < length) && ((pattern.charAt((i + 1))) == '\'')) {
                        i++;
                        buf.append(c);
                    }else {
                        inLiteral = !inLiteral;
                    }
                }else
                    if ((!inLiteral) && (((c >= 'A') && (c <= 'Z')) || ((c >= 'a') && (c <= 'z')))) {
                        i--;
                        break;
                    }else {
                        buf.append(c);
                    }

            }
        }
        indexRef[0] = i;
        return buf.toString();
    }

    protected org.apache.commons.lang.time.FastDateFormat.NumberRule selectNumberRule(int field, int padding) {
        switch (padding) {
            case 1 :
                return new org.apache.commons.lang.time.FastDateFormat.UnpaddedNumberField(field);
            case 2 :
                return new org.apache.commons.lang.time.FastDateFormat.TwoDigitNumberField(field);
            default :
                return new org.apache.commons.lang.time.FastDateFormat.PaddedNumberField(field, padding);
        }
    }

    public java.lang.StringBuffer format(java.lang.Object obj, java.lang.StringBuffer toAppendTo, java.text.FieldPosition pos) {
        if (obj instanceof java.util.Date) {
            return format(((java.util.Date) (obj)), toAppendTo);
        }else
            if (obj instanceof java.util.Calendar) {
                return format(((java.util.Calendar) (obj)), toAppendTo);
            }else
                if (obj instanceof java.lang.Long) {
                    return format(((java.lang.Long) (obj)).longValue(), toAppendTo);
                }else {
                    throw new java.lang.IllegalArgumentException(("Unknown class: " + (obj == null ? "<null>" : obj.getClass().getName())));
                }


    }

    public java.lang.String format(long millis) {
        return format(new java.util.Date(millis));
    }

    public java.lang.String format(java.util.Date date) {
        java.util.Calendar c = new java.util.GregorianCalendar(mTimeZone);
        c.setTime(date);
        return applyRules(c, new java.lang.StringBuffer(mMaxLengthEstimate)).toString();
    }

    public java.lang.String format(java.util.Calendar calendar) {
        return format(calendar, new java.lang.StringBuffer(mMaxLengthEstimate)).toString();
    }

    public java.lang.StringBuffer format(long millis, java.lang.StringBuffer buf) {
        return format(new java.util.Date(millis), buf);
    }

    public java.lang.StringBuffer format(java.util.Date date, java.lang.StringBuffer buf) {
        java.util.Calendar c = new java.util.GregorianCalendar(mTimeZone);
        c.setTime(date);
        return applyRules(c, buf);
    }

    public java.lang.StringBuffer format(java.util.Calendar calendar, java.lang.StringBuffer buf) {
        if (mTimeZoneForced) {
            calendar = ((java.util.Calendar) (calendar.clone()));
            calendar.setTimeZone(mTimeZone);
        }
        return applyRules(calendar, buf);
    }

    protected java.lang.StringBuffer applyRules(java.util.Calendar calendar, java.lang.StringBuffer buf) {
        org.apache.commons.lang.time.FastDateFormat.Rule[] rules = mRules;
        int len = mRules.length;
        for (int i = 0; i < len; i++) {
            rules[i].appendTo(buf, calendar);
        }
        return buf;
    }

    public java.lang.Object parseObject(java.lang.String source, java.text.ParsePosition pos) {
        pos.setIndex(0);
        pos.setErrorIndex(0);
        return null;
    }

    public java.lang.String getPattern() {
        return mPattern;
    }

    public java.util.TimeZone getTimeZone() {
        return mTimeZone;
    }

    public boolean getTimeZoneOverridesCalendar() {
        return mTimeZoneForced;
    }

    public java.util.Locale getLocale() {
        return mLocale;
    }

    public int getMaxLengthEstimate() {
        return mMaxLengthEstimate;
    }

    public boolean equals(java.lang.Object obj) {
        if ((obj instanceof org.apache.commons.lang.time.FastDateFormat) == false) {
            return false;
        }
        org.apache.commons.lang.time.FastDateFormat other = ((org.apache.commons.lang.time.FastDateFormat) (obj));
        if (((((((mPattern) == (other.mPattern)) || (mPattern.equals(other.mPattern))) && (((mTimeZone) == (other.mTimeZone)) || (mTimeZone.equals(other.mTimeZone)))) && (((mLocale) == (other.mLocale)) || (mLocale.equals(other.mLocale)))) && ((mTimeZoneForced) == (other.mTimeZoneForced))) && ((mLocaleForced) == (other.mLocaleForced))) {
            return true;
        }
        return false;
    }

    public int hashCode() {
        int total = 0;
        total += mPattern.hashCode();
        total += mTimeZone.hashCode();
        total += (mTimeZoneForced) ? 1 : 0;
        total += mLocale.hashCode();
        total += (mLocaleForced) ? 1 : 0;
        return total;
    }

    public java.lang.String toString() {
        return ("FastDateFormat[" + (mPattern)) + "]";
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
        in.defaultReadObject();
        init();
    }

    private interface Rule {
        int estimateLength();

        void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar);
    }

    private interface NumberRule extends org.apache.commons.lang.time.FastDateFormat.Rule {
        void appendTo(java.lang.StringBuffer buffer, int value);
    }

    private static class CharacterLiteral implements org.apache.commons.lang.time.FastDateFormat.Rule {
        private final char mValue;

        CharacterLiteral(char value) {
            mValue = value;
        }

        public int estimateLength() {
            return 1;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            buffer.append(mValue);
        }
    }

    private static class StringLiteral implements org.apache.commons.lang.time.FastDateFormat.Rule {
        private final java.lang.String mValue;

        StringLiteral(java.lang.String value) {
            mValue = value;
        }

        public int estimateLength() {
            return mValue.length();
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            buffer.append(mValue);
        }
    }

    private static class TextField implements org.apache.commons.lang.time.FastDateFormat.Rule {
        private final int mField;

        private final java.lang.String[] mValues;

        TextField(int field, java.lang.String[] values) {
            mField = field;
            mValues = values;
        }

        public int estimateLength() {
            int max = 0;
            for (int i = mValues.length; (--i) >= 0;) {
                int len = mValues[i].length();
                if (len > max) {
                    max = len;
                }
            }
            return max;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            buffer.append(mValues[calendar.get(mField)]);
        }
    }

    private static class UnpaddedNumberField implements org.apache.commons.lang.time.FastDateFormat.NumberRule {
        static final org.apache.commons.lang.time.FastDateFormat.UnpaddedNumberField INSTANCE_YEAR = new org.apache.commons.lang.time.FastDateFormat.UnpaddedNumberField(java.util.Calendar.YEAR);

        private final int mField;

        UnpaddedNumberField(int field) {
            mField = field;
        }

        public int estimateLength() {
            return 4;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            appendTo(buffer, calendar.get(mField));
        }

        public final void appendTo(java.lang.StringBuffer buffer, int value) {
            if (value < 10) {
                buffer.append(((char) (value + '0')));
            }else
                if (value < 100) {
                    buffer.append(((char) ((value / 10) + '0')));
                    buffer.append(((char) ((value % 10) + '0')));
                }else {
                    buffer.append(java.lang.Integer.toString(value));
                }

        }
    }

    private static class UnpaddedMonthField implements org.apache.commons.lang.time.FastDateFormat.NumberRule {
        static final org.apache.commons.lang.time.FastDateFormat.UnpaddedMonthField INSTANCE = new org.apache.commons.lang.time.FastDateFormat.UnpaddedMonthField();

        UnpaddedMonthField() {
            super();
        }

        public int estimateLength() {
            return 2;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            appendTo(buffer, ((calendar.get(java.util.Calendar.MONTH)) + 1));
        }

        public final void appendTo(java.lang.StringBuffer buffer, int value) {
            if (value < 10) {
                buffer.append(((char) (value + '0')));
            }else {
                buffer.append(((char) ((value / 10) + '0')));
                buffer.append(((char) ((value % 10) + '0')));
            }
        }
    }

    private static class PaddedNumberField implements org.apache.commons.lang.time.FastDateFormat.NumberRule {
        private final int mField;

        private final int mSize;

        PaddedNumberField(int field, int size) {
            if (size < 3) {
                throw new java.lang.IllegalArgumentException();
            }
            mField = field;
            mSize = size;
        }

        public int estimateLength() {
            return 4;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            appendTo(buffer, calendar.get(mField));
        }

        public final void appendTo(java.lang.StringBuffer buffer, int value) {
            if (value < 100) {
                for (int i = mSize; (--i) >= 2;) {
                    buffer.append('0');
                }
                buffer.append(((char) ((value / 10) + '0')));
                buffer.append(((char) ((value % 10) + '0')));
            }else {
                int digits;
                if (value < 1000) {
                    digits = 3;
                }else {
                    org.apache.commons.lang.Validate.isTrue((value > (-1)), "Negative values should not be possible", value);
                    digits = java.lang.Integer.toString(value).length();
                }
                for (int i = mSize; (--i) >= digits;) {
                    buffer.append('0');
                }
                buffer.append(java.lang.Integer.toString(value));
            }
        }
    }

    private static class TwoDigitNumberField implements org.apache.commons.lang.time.FastDateFormat.NumberRule {
        private final int mField;

        TwoDigitNumberField(int field) {
            mField = field;
        }

        public int estimateLength() {
            return 2;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            appendTo(buffer, calendar.get(mField));
        }

        public final void appendTo(java.lang.StringBuffer buffer, int value) {
            if (value < 100) {
                buffer.append(((char) ((value / 10) + '0')));
                buffer.append(((char) ((value % 10) + '0')));
            }else {
                buffer.append(java.lang.Integer.toString(value));
            }
        }
    }

    private static class TwoDigitYearField implements org.apache.commons.lang.time.FastDateFormat.NumberRule {
        static final org.apache.commons.lang.time.FastDateFormat.TwoDigitYearField INSTANCE = new org.apache.commons.lang.time.FastDateFormat.TwoDigitYearField();

        TwoDigitYearField() {
            super();
        }

        public int estimateLength() {
            return 2;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            appendTo(buffer, ((calendar.get(java.util.Calendar.YEAR)) % 100));
        }

        public final void appendTo(java.lang.StringBuffer buffer, int value) {
            buffer.append(((char) ((value / 10) + '0')));
            buffer.append(((char) ((value % 10) + '0')));
        }
    }

    private static class TwoDigitMonthField implements org.apache.commons.lang.time.FastDateFormat.NumberRule {
        static final org.apache.commons.lang.time.FastDateFormat.TwoDigitMonthField INSTANCE = new org.apache.commons.lang.time.FastDateFormat.TwoDigitMonthField();

        TwoDigitMonthField() {
            super();
        }

        public int estimateLength() {
            return 2;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            appendTo(buffer, ((calendar.get(java.util.Calendar.MONTH)) + 1));
        }

        public final void appendTo(java.lang.StringBuffer buffer, int value) {
            buffer.append(((char) ((value / 10) + '0')));
            buffer.append(((char) ((value % 10) + '0')));
        }
    }

    private static class TwelveHourField implements org.apache.commons.lang.time.FastDateFormat.NumberRule {
        private final org.apache.commons.lang.time.FastDateFormat.NumberRule mRule;

        TwelveHourField(org.apache.commons.lang.time.FastDateFormat.NumberRule rule) {
            mRule = rule;
        }

        public int estimateLength() {
            return mRule.estimateLength();
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            int value = calendar.get(java.util.Calendar.HOUR);
            if (value == 0) {
                value = (calendar.getLeastMaximum(java.util.Calendar.HOUR)) + 1;
            }
            mRule.appendTo(buffer, value);
        }

        public void appendTo(java.lang.StringBuffer buffer, int value) {
            mRule.appendTo(buffer, value);
        }
    }

    private static class TwentyFourHourField implements org.apache.commons.lang.time.FastDateFormat.NumberRule {
        private final org.apache.commons.lang.time.FastDateFormat.NumberRule mRule;

        TwentyFourHourField(org.apache.commons.lang.time.FastDateFormat.NumberRule rule) {
            mRule = rule;
        }

        public int estimateLength() {
            return mRule.estimateLength();
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            int value = calendar.get(java.util.Calendar.HOUR_OF_DAY);
            if (value == 0) {
                value = (calendar.getMaximum(java.util.Calendar.HOUR_OF_DAY)) + 1;
            }
            mRule.appendTo(buffer, value);
        }

        public void appendTo(java.lang.StringBuffer buffer, int value) {
            mRule.appendTo(buffer, value);
        }
    }

    private static class TimeZoneNameRule implements org.apache.commons.lang.time.FastDateFormat.Rule {
        private final java.util.TimeZone mTimeZone;

        private final boolean mTimeZoneForced;

        private final java.util.Locale mLocale;

        private final int mStyle;

        private final java.lang.String mStandard;

        private final java.lang.String mDaylight;

        TimeZoneNameRule(java.util.TimeZone timeZone, boolean timeZoneForced, java.util.Locale locale, int style) {
            mTimeZone = timeZone;
            mTimeZoneForced = timeZoneForced;
            mLocale = locale;
            mStyle = style;
            if (timeZoneForced) {
                mStandard = org.apache.commons.lang.time.FastDateFormat.getTimeZoneDisplay(timeZone, false, style, locale);
                mDaylight = org.apache.commons.lang.time.FastDateFormat.getTimeZoneDisplay(timeZone, true, style, locale);
            }else {
                mStandard = null;
                mDaylight = null;
            }
        }

        public int estimateLength() {
            if (mTimeZoneForced) {
                return java.lang.Math.max(mStandard.length(), mDaylight.length());
            }else
                if ((mStyle) == (java.util.TimeZone.SHORT)) {
                    boolean spoonDefaultValue = false;
                    try {
                        spoonDefaultValue = true;
                    } catch (java.lang.Exception __NopolProcessorException) {
                    }
                    boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                    if (fr.inria.lille.commons.trace.RuntimeValues.instance(5).isEnabled()) {
                        fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectionStarts();
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectInput("org.apache.commons.lang.time.FastDateFormat.SHORT",org.apache.commons.lang.time.FastDateFormat.SHORT);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectInput("org.apache.commons.lang.time.FastDateFormat.cDateTimeInstanceCache",org.apache.commons.lang.time.FastDateFormat.cDateTimeInstanceCache);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectInput("org.apache.commons.lang.time.FastDateFormat.cDefaultPattern",org.apache.commons.lang.time.FastDateFormat.cDefaultPattern);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectInput("org.apache.commons.lang.time.FastDateFormat.cDateInstanceCache",org.apache.commons.lang.time.FastDateFormat.cDateInstanceCache);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectInput("org.apache.commons.lang.time.FastDateFormat.LONG",org.apache.commons.lang.time.FastDateFormat.LONG);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectInput("org.apache.commons.lang.time.FastDateFormat.cInstanceCache",org.apache.commons.lang.time.FastDateFormat.cInstanceCache);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectInput("org.apache.commons.lang.time.FastDateFormat.MEDIUM",org.apache.commons.lang.time.FastDateFormat.MEDIUM);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectInput("org.apache.commons.lang.time.FastDateFormat.cTimeInstanceCache",org.apache.commons.lang.time.FastDateFormat.cTimeInstanceCache);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectInput("org.apache.commons.lang.time.FastDateFormat.FULL",org.apache.commons.lang.time.FastDateFormat.FULL);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectInput("org.apache.commons.lang.time.FastDateFormat.cTimeZoneDisplayCache",org.apache.commons.lang.time.FastDateFormat.cTimeZoneDisplayCache);} catch (Exception ex1) {ex1.printStackTrace();};
                        fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectOutput(runtimeAngelicValue);
                        fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectionEnds();
                    }
                    if (runtimeAngelicValue)
                        return 4;

                }else {
                    return 40;
                }

        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            if (mTimeZoneForced) {
                if ((mTimeZone.useDaylightTime()) && ((calendar.get(java.util.Calendar.DST_OFFSET)) != 0)) {
                    buffer.append(mDaylight);
                }else {
                    buffer.append(mStandard);
                }
            }else {
                java.util.TimeZone timeZone = calendar.getTimeZone();
                if ((timeZone.useDaylightTime()) && ((calendar.get(java.util.Calendar.DST_OFFSET)) != 0)) {
                    buffer.append(org.apache.commons.lang.time.FastDateFormat.getTimeZoneDisplay(timeZone, true, mStyle, mLocale));
                }else {
                    buffer.append(org.apache.commons.lang.time.FastDateFormat.getTimeZoneDisplay(timeZone, false, mStyle, mLocale));
                }
            }
        }
    }

    private static class TimeZoneNumberRule implements org.apache.commons.lang.time.FastDateFormat.Rule {
        static final org.apache.commons.lang.time.FastDateFormat.TimeZoneNumberRule INSTANCE_COLON = new org.apache.commons.lang.time.FastDateFormat.TimeZoneNumberRule(true);

        static final org.apache.commons.lang.time.FastDateFormat.TimeZoneNumberRule INSTANCE_NO_COLON = new org.apache.commons.lang.time.FastDateFormat.TimeZoneNumberRule(false);

        final boolean mColon;

        TimeZoneNumberRule(boolean colon) {
            mColon = colon;
        }

        public int estimateLength() {
            return 5;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            int offset = (calendar.get(java.util.Calendar.ZONE_OFFSET)) + (calendar.get(java.util.Calendar.DST_OFFSET));
            if (offset < 0) {
                buffer.append('-');
                offset = -offset;
            }else {
                buffer.append('+');
            }
            int hours = offset / ((60 * 60) * 1000);
            buffer.append(((char) ((hours / 10) + '0')));
            buffer.append(((char) ((hours % 10) + '0')));
            if (mColon) {
                buffer.append(':');
            }
            int minutes = (offset / (60 * 1000)) - (60 * hours);
            buffer.append(((char) ((minutes / 10) + '0')));
            buffer.append(((char) ((minutes % 10) + '0')));
        }
    }

    private static class TimeZoneDisplayKey {
        private final java.util.TimeZone mTimeZone;

        private final int mStyle;

        private final java.util.Locale mLocale;

        TimeZoneDisplayKey(java.util.TimeZone timeZone, boolean daylight, int style, java.util.Locale locale) {
            mTimeZone = timeZone;
            if (daylight) {
                style |= -2147483648;
            }
            mStyle = style;
            mLocale = locale;
        }

        public int hashCode() {
            return ((mStyle) * 31) + (mLocale.hashCode());
        }

        public boolean equals(java.lang.Object obj) {
            if ((this) == obj) {
                return true;
            }
            if (obj instanceof org.apache.commons.lang.time.FastDateFormat.TimeZoneDisplayKey) {
                org.apache.commons.lang.time.FastDateFormat.TimeZoneDisplayKey other = ((org.apache.commons.lang.time.FastDateFormat.TimeZoneDisplayKey) (obj));
                return ((mTimeZone.equals(other.mTimeZone)) && ((mStyle) == (other.mStyle))) && (mLocale.equals(other.mLocale));
            }
            return false;
        }
    }

    private static class Pair {
        private final java.lang.Object mObj1;

        private final java.lang.Object mObj2;

        public Pair(java.lang.Object obj1, java.lang.Object obj2) {
            mObj1 = obj1;
            mObj2 = obj2;
        }

        public boolean equals(java.lang.Object obj) {
            if ((this) == obj) {
                return true;
            }
            if (!(obj instanceof org.apache.commons.lang.time.FastDateFormat.Pair)) {
                return false;
            }
            org.apache.commons.lang.time.FastDateFormat.Pair key = ((org.apache.commons.lang.time.FastDateFormat.Pair) (obj));
            return ((mObj1) == null ? (key.mObj1) == null : mObj1.equals(key.mObj1)) && ((mObj2) == null ? (key.mObj2) == null : mObj2.equals(key.mObj2));
        }

        public int hashCode() {
            return ((mObj1) == null ? 0 : mObj1.hashCode()) + ((mObj2) == null ? 0 : mObj2.hashCode());
        }

        public java.lang.String toString() {
            return ((("[" + (mObj1)) + ':') + (mObj2)) + ']';
        }
    }
}
18:38:39.764 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
18:38:39.765 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #8
18:38:39.765 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang.time.FastDateFormat$TimeZoneNameRule:1559 which is executed by 1 tests
-1899260190
18:38:39.885 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:38:39.903 [pool-32-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (15 ms)
<> Total tests run: 13
<> Ignored tests: 0
<> Failed tests: 2
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

18:38:40.615 [pool-31-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
FastDateFormat.java:849: error: missing return statement
        }
        ^
Note: FastDateFormat.java uses unchecked or unsafe operations.
Note: Recompile with -Xlint:unchecked for details.
18:38:41.180 [pool-31-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public class FastDateFormat extends java.text.Format {
    private static final long serialVersionUID = 1L;

    public static final int FULL = java.text.DateFormat.FULL;

    public static final int LONG = java.text.DateFormat.LONG;

    public static final int MEDIUM = java.text.DateFormat.MEDIUM;

    public static final int SHORT = java.text.DateFormat.SHORT;

    private static java.lang.String cDefaultPattern;

    private static java.util.Map cInstanceCache = new java.util.HashMap(7);

    private static java.util.Map cDateInstanceCache = new java.util.HashMap(7);

    private static java.util.Map cTimeInstanceCache = new java.util.HashMap(7);

    private static java.util.Map cDateTimeInstanceCache = new java.util.HashMap(7);

    private static java.util.Map cTimeZoneDisplayCache = new java.util.HashMap(7);

    private final java.lang.String mPattern;

    private final java.util.TimeZone mTimeZone;

    private final boolean mTimeZoneForced;

    private final java.util.Locale mLocale;

    private final boolean mLocaleForced;

    private transient org.apache.commons.lang.time.FastDateFormat.Rule[] mRules;

    private transient int mMaxLengthEstimate;

    public static org.apache.commons.lang.time.FastDateFormat getInstance() {
        return org.apache.commons.lang.time.FastDateFormat.getInstance(org.apache.commons.lang.time.FastDateFormat.getDefaultPattern(), null, null);
    }

    public static org.apache.commons.lang.time.FastDateFormat getInstance(java.lang.String pattern) {
        return org.apache.commons.lang.time.FastDateFormat.getInstance(pattern, null, null);
    }

    public static org.apache.commons.lang.time.FastDateFormat getInstance(java.lang.String pattern, java.util.TimeZone timeZone) {
        return org.apache.commons.lang.time.FastDateFormat.getInstance(pattern, timeZone, null);
    }

    public static org.apache.commons.lang.time.FastDateFormat getInstance(java.lang.String pattern, java.util.Locale locale) {
        return org.apache.commons.lang.time.FastDateFormat.getInstance(pattern, null, locale);
    }

    public static synchronized org.apache.commons.lang.time.FastDateFormat getInstance(java.lang.String pattern, java.util.TimeZone timeZone, java.util.Locale locale) {
        org.apache.commons.lang.time.FastDateFormat emptyFormat = new org.apache.commons.lang.time.FastDateFormat(pattern, timeZone, locale);
        org.apache.commons.lang.time.FastDateFormat format = ((org.apache.commons.lang.time.FastDateFormat) (org.apache.commons.lang.time.FastDateFormat.cInstanceCache.get(emptyFormat)));
        if (format == null) {
            format = emptyFormat;
            format.init();
            org.apache.commons.lang.time.FastDateFormat.cInstanceCache.put(format, format);
        }
        return format;
    }

    public static org.apache.commons.lang.time.FastDateFormat getDateInstance(int style) {
        return org.apache.commons.lang.time.FastDateFormat.getDateInstance(style, null, null);
    }

    public static org.apache.commons.lang.time.FastDateFormat getDateInstance(int style, java.util.Locale locale) {
        return org.apache.commons.lang.time.FastDateFormat.getDateInstance(style, null, locale);
    }

    public static org.apache.commons.lang.time.FastDateFormat getDateInstance(int style, java.util.TimeZone timeZone) {
        return org.apache.commons.lang.time.FastDateFormat.getDateInstance(style, timeZone, null);
    }

    public static synchronized org.apache.commons.lang.time.FastDateFormat getDateInstance(int style, java.util.TimeZone timeZone, java.util.Locale locale) {
        java.lang.Object key = new java.lang.Integer(style);
        if (timeZone != null) {
            key = new org.apache.commons.lang.time.FastDateFormat.Pair(key, timeZone);
        }
        if (locale != null) {
            key = new org.apache.commons.lang.time.FastDateFormat.Pair(key, locale);
        }
        org.apache.commons.lang.time.FastDateFormat format = ((org.apache.commons.lang.time.FastDateFormat) (org.apache.commons.lang.time.FastDateFormat.cDateInstanceCache.get(key)));
        if (format == null) {
            if (locale == null) {
                locale = java.util.Locale.getDefault();
            }
            try {
                java.text.SimpleDateFormat formatter = ((java.text.SimpleDateFormat) (java.text.DateFormat.getDateInstance(style, locale)));
                java.lang.String pattern = formatter.toPattern();
                format = org.apache.commons.lang.time.FastDateFormat.getInstance(pattern, timeZone, locale);
                org.apache.commons.lang.time.FastDateFormat.cDateInstanceCache.put(key, format);
            } catch (java.lang.ClassCastException ex) {
                throw new java.lang.IllegalArgumentException(("No date pattern for locale: " + locale));
            }
        }
        return format;
    }

    public static org.apache.commons.lang.time.FastDateFormat getTimeInstance(int style) {
        return org.apache.commons.lang.time.FastDateFormat.getTimeInstance(style, null, null);
    }

    public static org.apache.commons.lang.time.FastDateFormat getTimeInstance(int style, java.util.Locale locale) {
        return org.apache.commons.lang.time.FastDateFormat.getTimeInstance(style, null, locale);
    }

    public static org.apache.commons.lang.time.FastDateFormat getTimeInstance(int style, java.util.TimeZone timeZone) {
        return org.apache.commons.lang.time.FastDateFormat.getTimeInstance(style, timeZone, null);
    }

    public static synchronized org.apache.commons.lang.time.FastDateFormat getTimeInstance(int style, java.util.TimeZone timeZone, java.util.Locale locale) {
        java.lang.Object key = new java.lang.Integer(style);
        if (timeZone != null) {
            key = new org.apache.commons.lang.time.FastDateFormat.Pair(key, timeZone);
        }
        if (locale != null) {
            key = new org.apache.commons.lang.time.FastDateFormat.Pair(key, locale);
        }
        org.apache.commons.lang.time.FastDateFormat format = ((org.apache.commons.lang.time.FastDateFormat) (org.apache.commons.lang.time.FastDateFormat.cTimeInstanceCache.get(key)));
        if (format == null) {
            if (locale == null) {
                locale = java.util.Locale.getDefault();
            }
            try {
                java.text.SimpleDateFormat formatter = ((java.text.SimpleDateFormat) (java.text.DateFormat.getTimeInstance(style, locale)));
                java.lang.String pattern = formatter.toPattern();
                format = org.apache.commons.lang.time.FastDateFormat.getInstance(pattern, timeZone, locale);
                org.apache.commons.lang.time.FastDateFormat.cTimeInstanceCache.put(key, format);
            } catch (java.lang.ClassCastException ex) {
                throw new java.lang.IllegalArgumentException(("No date pattern for locale: " + locale));
            }
        }
        return format;
    }

    public static org.apache.commons.lang.time.FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle) {
        return org.apache.commons.lang.time.FastDateFormat.getDateTimeInstance(dateStyle, timeStyle, null, null);
    }

    public static org.apache.commons.lang.time.FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, java.util.Locale locale) {
        return org.apache.commons.lang.time.FastDateFormat.getDateTimeInstance(dateStyle, timeStyle, null, locale);
    }

    public static org.apache.commons.lang.time.FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, java.util.TimeZone timeZone) {
        return org.apache.commons.lang.time.FastDateFormat.getDateTimeInstance(dateStyle, timeStyle, timeZone, null);
    }

    public static synchronized org.apache.commons.lang.time.FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, java.util.TimeZone timeZone, java.util.Locale locale) {
        java.lang.Object key = new org.apache.commons.lang.time.FastDateFormat.Pair(new java.lang.Integer(dateStyle), new java.lang.Integer(timeStyle));
        if (timeZone != null) {
            key = new org.apache.commons.lang.time.FastDateFormat.Pair(key, timeZone);
        }
        if (locale != null) {
            key = new org.apache.commons.lang.time.FastDateFormat.Pair(key, locale);
        }
        org.apache.commons.lang.time.FastDateFormat format = ((org.apache.commons.lang.time.FastDateFormat) (org.apache.commons.lang.time.FastDateFormat.cDateTimeInstanceCache.get(key)));
        if (format == null) {
            if (locale == null) {
                locale = java.util.Locale.getDefault();
            }
            try {
                java.text.SimpleDateFormat formatter = ((java.text.SimpleDateFormat) (java.text.DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale)));
                java.lang.String pattern = formatter.toPattern();
                format = org.apache.commons.lang.time.FastDateFormat.getInstance(pattern, timeZone, locale);
                org.apache.commons.lang.time.FastDateFormat.cDateTimeInstanceCache.put(key, format);
            } catch (java.lang.ClassCastException ex) {
                throw new java.lang.IllegalArgumentException(("No date time pattern for locale: " + locale));
            }
        }
        return format;
    }

    static synchronized java.lang.String getTimeZoneDisplay(java.util.TimeZone tz, boolean daylight, int style, java.util.Locale locale) {
        java.lang.Object key = new org.apache.commons.lang.time.FastDateFormat.TimeZoneDisplayKey(tz, daylight, style, locale);
        java.lang.String value = ((java.lang.String) (org.apache.commons.lang.time.FastDateFormat.cTimeZoneDisplayCache.get(key)));
        if (value == null) {
            value = tz.getDisplayName(daylight, style, locale);
            org.apache.commons.lang.time.FastDateFormat.cTimeZoneDisplayCache.put(key, value);
        }
        return value;
    }

    private static synchronized java.lang.String getDefaultPattern() {
        if ((org.apache.commons.lang.time.FastDateFormat.cDefaultPattern) == null) {
            org.apache.commons.lang.time.FastDateFormat.cDefaultPattern = new java.text.SimpleDateFormat().toPattern();
        }
        return org.apache.commons.lang.time.FastDateFormat.cDefaultPattern;
    }

    protected FastDateFormat(java.lang.String pattern, java.util.TimeZone timeZone, java.util.Locale locale) {
        super();
        if (pattern == null) {
            throw new java.lang.IllegalArgumentException("The pattern must not be null");
        }
        mPattern = pattern;
        mTimeZoneForced = timeZone != null;
        if (timeZone == null) {
            timeZone = java.util.TimeZone.getDefault();
        }
        mTimeZone = timeZone;
        mLocaleForced = locale != null;
        if (locale == null) {
            locale = java.util.Locale.getDefault();
        }
        mLocale = locale;
    }

    protected void init() {
        java.util.List rulesList = parsePattern();
        mRules = ((org.apache.commons.lang.time.FastDateFormat.Rule[]) (rulesList.toArray(new org.apache.commons.lang.time.FastDateFormat.Rule[rulesList.size()])));
        int len = 0;
        for (int i = mRules.length; (--i) >= 0;) {
            len += mRules[i].estimateLength();
        }
        mMaxLengthEstimate = len;
    }

    protected java.util.List parsePattern() {
        java.text.DateFormatSymbols symbols = new java.text.DateFormatSymbols(mLocale);
        java.util.List rules = new java.util.ArrayList();
        java.lang.String[] ERAs = symbols.getEras();
        java.lang.String[] months = symbols.getMonths();
        java.lang.String[] shortMonths = symbols.getShortMonths();
        java.lang.String[] weekdays = symbols.getWeekdays();
        java.lang.String[] shortWeekdays = symbols.getShortWeekdays();
        java.lang.String[] AmPmStrings = symbols.getAmPmStrings();
        int length = mPattern.length();
        int[] indexRef = new int[1];
        for (int i = 0; i < length; i++) {
            indexRef[0] = i;
            java.lang.String token = parseToken(mPattern, indexRef);
            i = indexRef[0];
            int tokenLen = token.length();
            if (tokenLen == 0) {
                break;
            }
            org.apache.commons.lang.time.FastDateFormat.Rule rule;
            char c = token.charAt(0);
            switch (c) {
                case 'G' :
                    rule = new org.apache.commons.lang.time.FastDateFormat.TextField(java.util.Calendar.ERA, ERAs);
                    break;
                case 'y' :
                    if (tokenLen >= 4) {
                        rule = selectNumberRule(java.util.Calendar.YEAR, tokenLen);
                    }else {
                        rule = org.apache.commons.lang.time.FastDateFormat.TwoDigitYearField.INSTANCE;
                    }
                    break;
                case 'M' :
                    if (tokenLen >= 4) {
                        rule = new org.apache.commons.lang.time.FastDateFormat.TextField(java.util.Calendar.MONTH, months);
                    }else
                        if (tokenLen == 3) {
                            rule = new org.apache.commons.lang.time.FastDateFormat.TextField(java.util.Calendar.MONTH, shortMonths);
                        }else
                            if (tokenLen == 2) {
                                rule = org.apache.commons.lang.time.FastDateFormat.TwoDigitMonthField.INSTANCE;
                            }else {
                                rule = org.apache.commons.lang.time.FastDateFormat.UnpaddedMonthField.INSTANCE;
                            }


                    break;
                case 'd' :
                    rule = selectNumberRule(java.util.Calendar.DAY_OF_MONTH, tokenLen);
                    break;
                case 'h' :
                    rule = new org.apache.commons.lang.time.FastDateFormat.TwelveHourField(selectNumberRule(java.util.Calendar.HOUR, tokenLen));
                    break;
                case 'H' :
                    rule = selectNumberRule(java.util.Calendar.HOUR_OF_DAY, tokenLen);
                    break;
                case 'm' :
                    rule = selectNumberRule(java.util.Calendar.MINUTE, tokenLen);
                    break;
                case 's' :
                    rule = selectNumberRule(java.util.Calendar.SECOND, tokenLen);
                    break;
                case 'S' :
                    rule = selectNumberRule(java.util.Calendar.MILLISECOND, tokenLen);
                    break;
                case 'E' :
                    rule = new org.apache.commons.lang.time.FastDateFormat.TextField(java.util.Calendar.DAY_OF_WEEK, (tokenLen < 4 ? shortWeekdays : weekdays));
                    break;
                case 'D' :
                    rule = selectNumberRule(java.util.Calendar.DAY_OF_YEAR, tokenLen);
                    break;
                case 'F' :
                    rule = selectNumberRule(java.util.Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);
                    break;
                case 'w' :
                    rule = selectNumberRule(java.util.Calendar.WEEK_OF_YEAR, tokenLen);
                    break;
                case 'W' :
                    rule = selectNumberRule(java.util.Calendar.WEEK_OF_MONTH, tokenLen);
                    break;
                case 'a' :
                    rule = new org.apache.commons.lang.time.FastDateFormat.TextField(java.util.Calendar.AM_PM, AmPmStrings);
                    break;
                case 'k' :
                    rule = new org.apache.commons.lang.time.FastDateFormat.TwentyFourHourField(selectNumberRule(java.util.Calendar.HOUR_OF_DAY, tokenLen));
                    break;
                case 'K' :
                    rule = selectNumberRule(java.util.Calendar.HOUR, tokenLen);
                    break;
                case 'z' :
                    if (tokenLen >= 4) {
                        rule = new org.apache.commons.lang.time.FastDateFormat.TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, java.util.TimeZone.LONG);
                    }else {
                        rule = new org.apache.commons.lang.time.FastDateFormat.TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, java.util.TimeZone.SHORT);
                    }
                    break;
                case 'Z' :
                    if (tokenLen == 1) {
                        rule = org.apache.commons.lang.time.FastDateFormat.TimeZoneNumberRule.INSTANCE_NO_COLON;
                    }else {
                        rule = org.apache.commons.lang.time.FastDateFormat.TimeZoneNumberRule.INSTANCE_COLON;
                    }
                    break;
                case '\'' :
                    java.lang.String sub = token.substring(1);
                    if ((sub.length()) == 1) {
                        rule = new org.apache.commons.lang.time.FastDateFormat.CharacterLiteral(sub.charAt(0));
                    }else {
                        rule = new org.apache.commons.lang.time.FastDateFormat.StringLiteral(sub);
                    }
                    break;
                default :
                    throw new java.lang.IllegalArgumentException(("Illegal pattern component: " + token));
            }
            rules.add(rule);
        }
        return rules;
    }

    protected java.lang.String parseToken(java.lang.String pattern, int[] indexRef) {
        java.lang.StringBuffer buf = new java.lang.StringBuffer();
        int i = indexRef[0];
        int length = pattern.length();
        char c = pattern.charAt(i);
        if (((c >= 'A') && (c <= 'Z')) || ((c >= 'a') && (c <= 'z'))) {
            buf.append(c);
            while ((i + 1) < length) {
                char peek = pattern.charAt((i + 1));
                if (peek == c) {
                    buf.append(c);
                    i++;
                }else {
                    break;
                }
            } 
        }else {
            buf.append('\'');
            boolean inLiteral = false;
            for (; i < length; i++) {
                c = pattern.charAt(i);
                if (c == '\'') {
                    if (((i + 1) < length) && ((pattern.charAt((i + 1))) == '\'')) {
                        i++;
                        buf.append(c);
                    }else {
                        inLiteral = !inLiteral;
                    }
                }else
                    if ((!inLiteral) && (((c >= 'A') && (c <= 'Z')) || ((c >= 'a') && (c <= 'z')))) {
                        i--;
                        break;
                    }else {
                        buf.append(c);
                    }

            }
        }
        indexRef[0] = i;
        return buf.toString();
    }

    protected org.apache.commons.lang.time.FastDateFormat.NumberRule selectNumberRule(int field, int padding) {
        switch (padding) {
            case 1 :
                return new org.apache.commons.lang.time.FastDateFormat.UnpaddedNumberField(field);
            case 2 :
                return new org.apache.commons.lang.time.FastDateFormat.TwoDigitNumberField(field);
            default :
                return new org.apache.commons.lang.time.FastDateFormat.PaddedNumberField(field, padding);
        }
    }

    public java.lang.StringBuffer format(java.lang.Object obj, java.lang.StringBuffer toAppendTo, java.text.FieldPosition pos) {
        if (obj instanceof java.util.Date) {
            return format(((java.util.Date) (obj)), toAppendTo);
        }else
            if (obj instanceof java.util.Calendar) {
                return format(((java.util.Calendar) (obj)), toAppendTo);
            }else
                if (obj instanceof java.lang.Long) {
                    return format(((java.lang.Long) (obj)).longValue(), toAppendTo);
                }else {
                    throw new java.lang.IllegalArgumentException(("Unknown class: " + (obj == null ? "<null>" : obj.getClass().getName())));
                }


    }

    public java.lang.String format(long millis) {
        return format(new java.util.Date(millis));
    }

    public java.lang.String format(java.util.Date date) {
        java.util.Calendar c = new java.util.GregorianCalendar(mTimeZone);
        c.setTime(date);
        return applyRules(c, new java.lang.StringBuffer(mMaxLengthEstimate)).toString();
    }

    public java.lang.String format(java.util.Calendar calendar) {
        return format(calendar, new java.lang.StringBuffer(mMaxLengthEstimate)).toString();
    }

    public java.lang.StringBuffer format(long millis, java.lang.StringBuffer buf) {
        return format(new java.util.Date(millis), buf);
    }

    public java.lang.StringBuffer format(java.util.Date date, java.lang.StringBuffer buf) {
        java.util.Calendar c = new java.util.GregorianCalendar(mTimeZone);
        c.setTime(date);
        return applyRules(c, buf);
    }

    public java.lang.StringBuffer format(java.util.Calendar calendar, java.lang.StringBuffer buf) {
        if (mTimeZoneForced) {
            calendar = ((java.util.Calendar) (calendar.clone()));
            calendar.setTimeZone(mTimeZone);
        }
        return applyRules(calendar, buf);
    }

    protected java.lang.StringBuffer applyRules(java.util.Calendar calendar, java.lang.StringBuffer buf) {
        org.apache.commons.lang.time.FastDateFormat.Rule[] rules = mRules;
        int len = mRules.length;
        for (int i = 0; i < len; i++) {
            rules[i].appendTo(buf, calendar);
        }
        return buf;
    }

    public java.lang.Object parseObject(java.lang.String source, java.text.ParsePosition pos) {
        pos.setIndex(0);
        pos.setErrorIndex(0);
        return null;
    }

    public java.lang.String getPattern() {
        return mPattern;
    }

    public java.util.TimeZone getTimeZone() {
        return mTimeZone;
    }

    public boolean getTimeZoneOverridesCalendar() {
        return mTimeZoneForced;
    }

    public java.util.Locale getLocale() {
        return mLocale;
    }

    public int getMaxLengthEstimate() {
        return mMaxLengthEstimate;
    }

    public boolean equals(java.lang.Object obj) {
        if ((obj instanceof org.apache.commons.lang.time.FastDateFormat) == false) {
            return false;
        }
        org.apache.commons.lang.time.FastDateFormat other = ((org.apache.commons.lang.time.FastDateFormat) (obj));
        if (((((((mPattern) == (other.mPattern)) || (mPattern.equals(other.mPattern))) && (((mTimeZone) == (other.mTimeZone)) || (mTimeZone.equals(other.mTimeZone)))) && (((mLocale) == (other.mLocale)) || (mLocale.equals(other.mLocale)))) && ((mTimeZoneForced) == (other.mTimeZoneForced))) && ((mLocaleForced) == (other.mLocaleForced))) {
            return true;
        }
        return false;
    }

    public int hashCode() {
        int total = 0;
        total += mPattern.hashCode();
        total += mTimeZone.hashCode();
        total += (mTimeZoneForced) ? 1 : 0;
        total += mLocale.hashCode();
        total += (mLocaleForced) ? 1 : 0;
        return total;
    }

    public java.lang.String toString() {
        return ("FastDateFormat[" + (mPattern)) + "]";
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
        in.defaultReadObject();
        init();
    }

    private interface Rule {
        int estimateLength();

        void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar);
    }

    private interface NumberRule extends org.apache.commons.lang.time.FastDateFormat.Rule {
        void appendTo(java.lang.StringBuffer buffer, int value);
    }

    private static class CharacterLiteral implements org.apache.commons.lang.time.FastDateFormat.Rule {
        private final char mValue;

        CharacterLiteral(char value) {
            mValue = value;
        }

        public int estimateLength() {
            return 1;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            buffer.append(mValue);
        }
    }

    private static class StringLiteral implements org.apache.commons.lang.time.FastDateFormat.Rule {
        private final java.lang.String mValue;

        StringLiteral(java.lang.String value) {
            mValue = value;
        }

        public int estimateLength() {
            return mValue.length();
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            buffer.append(mValue);
        }
    }

    private static class TextField implements org.apache.commons.lang.time.FastDateFormat.Rule {
        private final int mField;

        private final java.lang.String[] mValues;

        TextField(int field, java.lang.String[] values) {
            mField = field;
            mValues = values;
        }

        public int estimateLength() {
            int max = 0;
            for (int i = mValues.length; (--i) >= 0;) {
                int len = mValues[i].length();
                if (len > max) {
                    max = len;
                }
            }
            return max;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            buffer.append(mValues[calendar.get(mField)]);
        }
    }

    private static class UnpaddedNumberField implements org.apache.commons.lang.time.FastDateFormat.NumberRule {
        static final org.apache.commons.lang.time.FastDateFormat.UnpaddedNumberField INSTANCE_YEAR = new org.apache.commons.lang.time.FastDateFormat.UnpaddedNumberField(java.util.Calendar.YEAR);

        private final int mField;

        UnpaddedNumberField(int field) {
            mField = field;
        }

        public int estimateLength() {
            return 4;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            appendTo(buffer, calendar.get(mField));
        }

        public final void appendTo(java.lang.StringBuffer buffer, int value) {
            if (value < 10) {
                buffer.append(((char) (value + '0')));
            }else
                if (value < 100) {
                    buffer.append(((char) ((value / 10) + '0')));
                    buffer.append(((char) ((value % 10) + '0')));
                }else {
                    buffer.append(java.lang.Integer.toString(value));
                }

        }
    }

    private static class UnpaddedMonthField implements org.apache.commons.lang.time.FastDateFormat.NumberRule {
        static final org.apache.commons.lang.time.FastDateFormat.UnpaddedMonthField INSTANCE = new org.apache.commons.lang.time.FastDateFormat.UnpaddedMonthField();

        UnpaddedMonthField() {
            super();
        }

        public int estimateLength() {
            return 2;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            appendTo(buffer, ((calendar.get(java.util.Calendar.MONTH)) + 1));
        }

        public final void appendTo(java.lang.StringBuffer buffer, int value) {
            if (value < 10) {
                buffer.append(((char) (value + '0')));
            }else {
                buffer.append(((char) ((value / 10) + '0')));
                buffer.append(((char) ((value % 10) + '0')));
            }
        }
    }

    private static class PaddedNumberField implements org.apache.commons.lang.time.FastDateFormat.NumberRule {
        private final int mField;

        private final int mSize;

        PaddedNumberField(int field, int size) {
            if (size < 3) {
                throw new java.lang.IllegalArgumentException();
            }
            mField = field;
            mSize = size;
        }

        public int estimateLength() {
            return 4;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            appendTo(buffer, calendar.get(mField));
        }

        public final void appendTo(java.lang.StringBuffer buffer, int value) {
            if (value < 100) {
                for (int i = mSize; (--i) >= 2;) {
                    buffer.append('0');
                }
                buffer.append(((char) ((value / 10) + '0')));
                buffer.append(((char) ((value % 10) + '0')));
            }else {
                int digits;
                if (value < 1000) {
                    digits = 3;
                }else {
                    org.apache.commons.lang.Validate.isTrue((value > (-1)), "Negative values should not be possible", value);
                    digits = java.lang.Integer.toString(value).length();
                }
                for (int i = mSize; (--i) >= digits;) {
                    buffer.append('0');
                }
                buffer.append(java.lang.Integer.toString(value));
            }
        }
    }

    private static class TwoDigitNumberField implements org.apache.commons.lang.time.FastDateFormat.NumberRule {
        private final int mField;

        TwoDigitNumberField(int field) {
            mField = field;
        }

        public int estimateLength() {
            return 2;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            appendTo(buffer, calendar.get(mField));
        }

        public final void appendTo(java.lang.StringBuffer buffer, int value) {
            if (value < 100) {
                buffer.append(((char) ((value / 10) + '0')));
                buffer.append(((char) ((value % 10) + '0')));
            }else {
                buffer.append(java.lang.Integer.toString(value));
            }
        }
    }

    private static class TwoDigitYearField implements org.apache.commons.lang.time.FastDateFormat.NumberRule {
        static final org.apache.commons.lang.time.FastDateFormat.TwoDigitYearField INSTANCE = new org.apache.commons.lang.time.FastDateFormat.TwoDigitYearField();

        TwoDigitYearField() {
            super();
        }

        public int estimateLength() {
            return 2;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            appendTo(buffer, ((calendar.get(java.util.Calendar.YEAR)) % 100));
        }

        public final void appendTo(java.lang.StringBuffer buffer, int value) {
            buffer.append(((char) ((value / 10) + '0')));
            buffer.append(((char) ((value % 10) + '0')));
        }
    }

    private static class TwoDigitMonthField implements org.apache.commons.lang.time.FastDateFormat.NumberRule {
        static final org.apache.commons.lang.time.FastDateFormat.TwoDigitMonthField INSTANCE = new org.apache.commons.lang.time.FastDateFormat.TwoDigitMonthField();

        TwoDigitMonthField() {
            super();
        }

        public int estimateLength() {
            return 2;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            appendTo(buffer, ((calendar.get(java.util.Calendar.MONTH)) + 1));
        }

        public final void appendTo(java.lang.StringBuffer buffer, int value) {
            buffer.append(((char) ((value / 10) + '0')));
            buffer.append(((char) ((value % 10) + '0')));
        }
    }

    private static class TwelveHourField implements org.apache.commons.lang.time.FastDateFormat.NumberRule {
        private final org.apache.commons.lang.time.FastDateFormat.NumberRule mRule;

        TwelveHourField(org.apache.commons.lang.time.FastDateFormat.NumberRule rule) {
            mRule = rule;
        }

        public int estimateLength() {
            return mRule.estimateLength();
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            int value = calendar.get(java.util.Calendar.HOUR);
            if (value == 0) {
                value = (calendar.getLeastMaximum(java.util.Calendar.HOUR)) + 1;
            }
            mRule.appendTo(buffer, value);
        }

        public void appendTo(java.lang.StringBuffer buffer, int value) {
            mRule.appendTo(buffer, value);
        }
    }

    private static class TwentyFourHourField implements org.apache.commons.lang.time.FastDateFormat.NumberRule {
        private final org.apache.commons.lang.time.FastDateFormat.NumberRule mRule;

        TwentyFourHourField(org.apache.commons.lang.time.FastDateFormat.NumberRule rule) {
            mRule = rule;
        }

        public int estimateLength() {
            return mRule.estimateLength();
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            int value = calendar.get(java.util.Calendar.HOUR_OF_DAY);
            if (value == 0) {
                value = (calendar.getMaximum(java.util.Calendar.HOUR_OF_DAY)) + 1;
            }
            mRule.appendTo(buffer, value);
        }

        public void appendTo(java.lang.StringBuffer buffer, int value) {
            mRule.appendTo(buffer, value);
        }
    }

    private static class TimeZoneNameRule implements org.apache.commons.lang.time.FastDateFormat.Rule {
        private final java.util.TimeZone mTimeZone;

        private final boolean mTimeZoneForced;

        private final java.util.Locale mLocale;

        private final int mStyle;

        private final java.lang.String mStandard;

        private final java.lang.String mDaylight;

        TimeZoneNameRule(java.util.TimeZone timeZone, boolean timeZoneForced, java.util.Locale locale, int style) {
            mTimeZone = timeZone;
            mTimeZoneForced = timeZoneForced;
            mLocale = locale;
            mStyle = style;
            if (timeZoneForced) {
                mStandard = org.apache.commons.lang.time.FastDateFormat.getTimeZoneDisplay(timeZone, false, style, locale);
                mDaylight = org.apache.commons.lang.time.FastDateFormat.getTimeZoneDisplay(timeZone, true, style, locale);
            }else {
                mStandard = null;
                mDaylight = null;
            }
        }

        public int estimateLength() {
            if (mTimeZoneForced) {
                return java.lang.Math.max(mStandard.length(), mDaylight.length());
            }else {
                boolean spoonDefaultValue = false;
                try {
                    spoonDefaultValue = true;
                } catch (java.lang.Exception __NopolProcessorException) {
                }
                boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                if (fr.inria.lille.commons.trace.RuntimeValues.instance(6).isEnabled()) {
                    fr.inria.lille.commons.trace.RuntimeValues.instance(6).collectionStarts();
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(6).collectInput("org.apache.commons.lang.time.FastDateFormat.SHORT",org.apache.commons.lang.time.FastDateFormat.SHORT);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(6).collectInput("org.apache.commons.lang.time.FastDateFormat.cDateTimeInstanceCache",org.apache.commons.lang.time.FastDateFormat.cDateTimeInstanceCache);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(6).collectInput("org.apache.commons.lang.time.FastDateFormat.cDefaultPattern",org.apache.commons.lang.time.FastDateFormat.cDefaultPattern);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(6).collectInput("org.apache.commons.lang.time.FastDateFormat.cDateInstanceCache",org.apache.commons.lang.time.FastDateFormat.cDateInstanceCache);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(6).collectInput("org.apache.commons.lang.time.FastDateFormat.LONG",org.apache.commons.lang.time.FastDateFormat.LONG);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(6).collectInput("org.apache.commons.lang.time.FastDateFormat.cInstanceCache",org.apache.commons.lang.time.FastDateFormat.cInstanceCache);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(6).collectInput("org.apache.commons.lang.time.FastDateFormat.MEDIUM",org.apache.commons.lang.time.FastDateFormat.MEDIUM);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(6).collectInput("(mStyle) == (java.util.TimeZone.SHORT)",(mStyle) == (java.util.TimeZone.SHORT));} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(6).collectInput("org.apache.commons.lang.time.FastDateFormat.cTimeInstanceCache",org.apache.commons.lang.time.FastDateFormat.cTimeInstanceCache);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(6).collectInput("org.apache.commons.lang.time.FastDateFormat.FULL",org.apache.commons.lang.time.FastDateFormat.FULL);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(6).collectInput("org.apache.commons.lang.time.FastDateFormat.cTimeZoneDisplayCache",org.apache.commons.lang.time.FastDateFormat.cTimeZoneDisplayCache);} catch (Exception ex1) {ex1.printStackTrace();};
                    fr.inria.lille.commons.trace.RuntimeValues.instance(6).collectOutput(runtimeAngelicValue);
                    fr.inria.lille.commons.trace.RuntimeValues.instance(6).collectionEnds();
                }
                if (runtimeAngelicValue) if ((mStyle) == (java.util.TimeZone.SHORT)) {
                    return 4;
                }else {
                    return 40;
                }
            }
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            if (mTimeZoneForced) {
                if ((mTimeZone.useDaylightTime()) && ((calendar.get(java.util.Calendar.DST_OFFSET)) != 0)) {
                    buffer.append(mDaylight);
                }else {
                    buffer.append(mStandard);
                }
            }else {
                java.util.TimeZone timeZone = calendar.getTimeZone();
                if ((timeZone.useDaylightTime()) && ((calendar.get(java.util.Calendar.DST_OFFSET)) != 0)) {
                    buffer.append(org.apache.commons.lang.time.FastDateFormat.getTimeZoneDisplay(timeZone, true, mStyle, mLocale));
                }else {
                    buffer.append(org.apache.commons.lang.time.FastDateFormat.getTimeZoneDisplay(timeZone, false, mStyle, mLocale));
                }
            }
        }
    }

    private static class TimeZoneNumberRule implements org.apache.commons.lang.time.FastDateFormat.Rule {
        static final org.apache.commons.lang.time.FastDateFormat.TimeZoneNumberRule INSTANCE_COLON = new org.apache.commons.lang.time.FastDateFormat.TimeZoneNumberRule(true);

        static final org.apache.commons.lang.time.FastDateFormat.TimeZoneNumberRule INSTANCE_NO_COLON = new org.apache.commons.lang.time.FastDateFormat.TimeZoneNumberRule(false);

        final boolean mColon;

        TimeZoneNumberRule(boolean colon) {
            mColon = colon;
        }

        public int estimateLength() {
            return 5;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            int offset = (calendar.get(java.util.Calendar.ZONE_OFFSET)) + (calendar.get(java.util.Calendar.DST_OFFSET));
            if (offset < 0) {
                buffer.append('-');
                offset = -offset;
            }else {
                buffer.append('+');
            }
            int hours = offset / ((60 * 60) * 1000);
            buffer.append(((char) ((hours / 10) + '0')));
            buffer.append(((char) ((hours % 10) + '0')));
            if (mColon) {
                buffer.append(':');
            }
            int minutes = (offset / (60 * 1000)) - (60 * hours);
            buffer.append(((char) ((minutes / 10) + '0')));
            buffer.append(((char) ((minutes % 10) + '0')));
        }
    }

    private static class TimeZoneDisplayKey {
        private final java.util.TimeZone mTimeZone;

        private final int mStyle;

        private final java.util.Locale mLocale;

        TimeZoneDisplayKey(java.util.TimeZone timeZone, boolean daylight, int style, java.util.Locale locale) {
            mTimeZone = timeZone;
            if (daylight) {
                style |= -2147483648;
            }
            mStyle = style;
            mLocale = locale;
        }

        public int hashCode() {
            return ((mStyle) * 31) + (mLocale.hashCode());
        }

        public boolean equals(java.lang.Object obj) {
            if ((this) == obj) {
                return true;
            }
            if (obj instanceof org.apache.commons.lang.time.FastDateFormat.TimeZoneDisplayKey) {
                org.apache.commons.lang.time.FastDateFormat.TimeZoneDisplayKey other = ((org.apache.commons.lang.time.FastDateFormat.TimeZoneDisplayKey) (obj));
                return ((mTimeZone.equals(other.mTimeZone)) && ((mStyle) == (other.mStyle))) && (mLocale.equals(other.mLocale));
            }
            return false;
        }
    }

    private static class Pair {
        private final java.lang.Object mObj1;

        private final java.lang.Object mObj2;

        public Pair(java.lang.Object obj1, java.lang.Object obj2) {
            mObj1 = obj1;
            mObj2 = obj2;
        }

        public boolean equals(java.lang.Object obj) {
            if ((this) == obj) {
                return true;
            }
            if (!(obj instanceof org.apache.commons.lang.time.FastDateFormat.Pair)) {
                return false;
            }
            org.apache.commons.lang.time.FastDateFormat.Pair key = ((org.apache.commons.lang.time.FastDateFormat.Pair) (obj));
            return ((mObj1) == null ? (key.mObj1) == null : mObj1.equals(key.mObj1)) && ((mObj2) == null ? (key.mObj2) == null : mObj2.equals(key.mObj2));
        }

        public int hashCode() {
            return ((mObj1) == null ? 0 : mObj1.hashCode()) + ((mObj2) == null ? 0 : mObj2.hashCode());
        }

        public java.lang.String toString() {
            return ((("[" + (mObj1)) + ':') + (mObj2)) + ']';
        }
    }
}
18:38:41.182 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
18:38:41.182 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:38:41.197 [pool-34-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (12 ms)
<> Total tests run: 13
<> Ignored tests: 0
<> Failed tests: 2
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
18:38:41.976 [pool-35-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (3 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:38:41.979 [pool-36-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
18:38:41.981 [pool-37-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:38:41.982 [pool-38-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

18:38:41.983 [pool-33-thread-1] DEBUG tests.output - Failing tests with false: 
[test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>, test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>]
18:38:41.984 [pool-33-thread-1] DEBUG tests.output - Failing tests with true: 
[test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>, test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>]
18:38:41.984 [pool-33-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.lang.time.FastDateFormat$TimeZoneNameRule:1559.
18:38:41.984 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #9
18:38:41.984 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang.time.FastDateFormat$TimeZoneNameRule:1557 which is executed by 1 tests
-1899260190
18:38:42.114 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:38:42.129 [pool-40-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (12 ms)
<> Total tests run: 13
<> Ignored tests: 0
<> Failed tests: 2
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
18:38:42.867 [pool-41-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (3 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:38:42.870 [pool-42-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
18:38:42.872 [pool-43-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:38:42.873 [pool-44-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

18:38:42.874 [pool-39-thread-1] DEBUG tests.output - Failing tests with false: 
[test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>, test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>]
18:38:42.874 [pool-39-thread-1] DEBUG tests.output - Failing tests with true: 
[test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>, test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>]
18:38:42.874 [pool-39-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.lang.time.FastDateFormat$TimeZoneNameRule:1557.
18:38:42.875 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #10
18:38:42.875 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang.time.FastDateFormat:677 which is executed by 1 tests
-1899260190
18:38:42.990 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:38:43.005 [pool-46-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (12 ms)
<> Total tests run: 13
<> Ignored tests: 0
<> Failed tests: 2
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
18:38:43.780 [pool-47-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (4 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:38:43.783 [pool-48-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
18:38:43.784 [pool-49-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:38:43.785 [pool-50-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

18:38:43.786 [pool-45-thread-1] DEBUG tests.output - Failing tests with false: 
[test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>, test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>]
18:38:43.786 [pool-45-thread-1] DEBUG tests.output - Failing tests with true: 
[test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>, test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>]
18:38:43.786 [pool-45-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.lang.time.FastDateFormat:677.
18:38:43.786 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #11
18:38:43.786 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang.time.FastDateFormat:675 which is executed by 1 tests
-1899260190
18:38:43.892 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:38:43.907 [pool-52-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (12 ms)
<> Total tests run: 13
<> Ignored tests: 0
<> Failed tests: 2
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

18:38:44.721 [pool-51-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
FastDateFormat.java:379: error: variable rule might not have been initialized
            rules.add(rule);
                      ^
Note: FastDateFormat.java uses unchecked or unsafe operations.
Note: Recompile with -Xlint:unchecked for details.
18:38:45.299 [pool-51-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public class FastDateFormat extends java.text.Format {
    private static final long serialVersionUID = 1L;

    public static final int FULL = java.text.DateFormat.FULL;

    public static final int LONG = java.text.DateFormat.LONG;

    public static final int MEDIUM = java.text.DateFormat.MEDIUM;

    public static final int SHORT = java.text.DateFormat.SHORT;

    private static java.lang.String cDefaultPattern;

    private static java.util.Map cInstanceCache = new java.util.HashMap(7);

    private static java.util.Map cDateInstanceCache = new java.util.HashMap(7);

    private static java.util.Map cTimeInstanceCache = new java.util.HashMap(7);

    private static java.util.Map cDateTimeInstanceCache = new java.util.HashMap(7);

    private static java.util.Map cTimeZoneDisplayCache = new java.util.HashMap(7);

    private final java.lang.String mPattern;

    private final java.util.TimeZone mTimeZone;

    private final boolean mTimeZoneForced;

    private final java.util.Locale mLocale;

    private final boolean mLocaleForced;

    private transient org.apache.commons.lang.time.FastDateFormat.Rule[] mRules;

    private transient int mMaxLengthEstimate;

    public static org.apache.commons.lang.time.FastDateFormat getInstance() {
        return org.apache.commons.lang.time.FastDateFormat.getInstance(org.apache.commons.lang.time.FastDateFormat.getDefaultPattern(), null, null);
    }

    public static org.apache.commons.lang.time.FastDateFormat getInstance(java.lang.String pattern) {
        return org.apache.commons.lang.time.FastDateFormat.getInstance(pattern, null, null);
    }

    public static org.apache.commons.lang.time.FastDateFormat getInstance(java.lang.String pattern, java.util.TimeZone timeZone) {
        return org.apache.commons.lang.time.FastDateFormat.getInstance(pattern, timeZone, null);
    }

    public static org.apache.commons.lang.time.FastDateFormat getInstance(java.lang.String pattern, java.util.Locale locale) {
        return org.apache.commons.lang.time.FastDateFormat.getInstance(pattern, null, locale);
    }

    public static synchronized org.apache.commons.lang.time.FastDateFormat getInstance(java.lang.String pattern, java.util.TimeZone timeZone, java.util.Locale locale) {
        org.apache.commons.lang.time.FastDateFormat emptyFormat = new org.apache.commons.lang.time.FastDateFormat(pattern, timeZone, locale);
        org.apache.commons.lang.time.FastDateFormat format = ((org.apache.commons.lang.time.FastDateFormat) (org.apache.commons.lang.time.FastDateFormat.cInstanceCache.get(emptyFormat)));
        if (format == null) {
            format = emptyFormat;
            format.init();
            org.apache.commons.lang.time.FastDateFormat.cInstanceCache.put(format, format);
        }
        return format;
    }

    public static org.apache.commons.lang.time.FastDateFormat getDateInstance(int style) {
        return org.apache.commons.lang.time.FastDateFormat.getDateInstance(style, null, null);
    }

    public static org.apache.commons.lang.time.FastDateFormat getDateInstance(int style, java.util.Locale locale) {
        return org.apache.commons.lang.time.FastDateFormat.getDateInstance(style, null, locale);
    }

    public static org.apache.commons.lang.time.FastDateFormat getDateInstance(int style, java.util.TimeZone timeZone) {
        return org.apache.commons.lang.time.FastDateFormat.getDateInstance(style, timeZone, null);
    }

    public static synchronized org.apache.commons.lang.time.FastDateFormat getDateInstance(int style, java.util.TimeZone timeZone, java.util.Locale locale) {
        java.lang.Object key = new java.lang.Integer(style);
        if (timeZone != null) {
            key = new org.apache.commons.lang.time.FastDateFormat.Pair(key, timeZone);
        }
        if (locale != null) {
            key = new org.apache.commons.lang.time.FastDateFormat.Pair(key, locale);
        }
        org.apache.commons.lang.time.FastDateFormat format = ((org.apache.commons.lang.time.FastDateFormat) (org.apache.commons.lang.time.FastDateFormat.cDateInstanceCache.get(key)));
        if (format == null) {
            if (locale == null) {
                locale = java.util.Locale.getDefault();
            }
            try {
                java.text.SimpleDateFormat formatter = ((java.text.SimpleDateFormat) (java.text.DateFormat.getDateInstance(style, locale)));
                java.lang.String pattern = formatter.toPattern();
                format = org.apache.commons.lang.time.FastDateFormat.getInstance(pattern, timeZone, locale);
                org.apache.commons.lang.time.FastDateFormat.cDateInstanceCache.put(key, format);
            } catch (java.lang.ClassCastException ex) {
                throw new java.lang.IllegalArgumentException(("No date pattern for locale: " + locale));
            }
        }
        return format;
    }

    public static org.apache.commons.lang.time.FastDateFormat getTimeInstance(int style) {
        return org.apache.commons.lang.time.FastDateFormat.getTimeInstance(style, null, null);
    }

    public static org.apache.commons.lang.time.FastDateFormat getTimeInstance(int style, java.util.Locale locale) {
        return org.apache.commons.lang.time.FastDateFormat.getTimeInstance(style, null, locale);
    }

    public static org.apache.commons.lang.time.FastDateFormat getTimeInstance(int style, java.util.TimeZone timeZone) {
        return org.apache.commons.lang.time.FastDateFormat.getTimeInstance(style, timeZone, null);
    }

    public static synchronized org.apache.commons.lang.time.FastDateFormat getTimeInstance(int style, java.util.TimeZone timeZone, java.util.Locale locale) {
        java.lang.Object key = new java.lang.Integer(style);
        if (timeZone != null) {
            key = new org.apache.commons.lang.time.FastDateFormat.Pair(key, timeZone);
        }
        if (locale != null) {
            key = new org.apache.commons.lang.time.FastDateFormat.Pair(key, locale);
        }
        org.apache.commons.lang.time.FastDateFormat format = ((org.apache.commons.lang.time.FastDateFormat) (org.apache.commons.lang.time.FastDateFormat.cTimeInstanceCache.get(key)));
        if (format == null) {
            if (locale == null) {
                locale = java.util.Locale.getDefault();
            }
            try {
                java.text.SimpleDateFormat formatter = ((java.text.SimpleDateFormat) (java.text.DateFormat.getTimeInstance(style, locale)));
                java.lang.String pattern = formatter.toPattern();
                format = org.apache.commons.lang.time.FastDateFormat.getInstance(pattern, timeZone, locale);
                org.apache.commons.lang.time.FastDateFormat.cTimeInstanceCache.put(key, format);
            } catch (java.lang.ClassCastException ex) {
                throw new java.lang.IllegalArgumentException(("No date pattern for locale: " + locale));
            }
        }
        return format;
    }

    public static org.apache.commons.lang.time.FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle) {
        return org.apache.commons.lang.time.FastDateFormat.getDateTimeInstance(dateStyle, timeStyle, null, null);
    }

    public static org.apache.commons.lang.time.FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, java.util.Locale locale) {
        return org.apache.commons.lang.time.FastDateFormat.getDateTimeInstance(dateStyle, timeStyle, null, locale);
    }

    public static org.apache.commons.lang.time.FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, java.util.TimeZone timeZone) {
        return org.apache.commons.lang.time.FastDateFormat.getDateTimeInstance(dateStyle, timeStyle, timeZone, null);
    }

    public static synchronized org.apache.commons.lang.time.FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, java.util.TimeZone timeZone, java.util.Locale locale) {
        java.lang.Object key = new org.apache.commons.lang.time.FastDateFormat.Pair(new java.lang.Integer(dateStyle), new java.lang.Integer(timeStyle));
        if (timeZone != null) {
            key = new org.apache.commons.lang.time.FastDateFormat.Pair(key, timeZone);
        }
        if (locale != null) {
            key = new org.apache.commons.lang.time.FastDateFormat.Pair(key, locale);
        }
        org.apache.commons.lang.time.FastDateFormat format = ((org.apache.commons.lang.time.FastDateFormat) (org.apache.commons.lang.time.FastDateFormat.cDateTimeInstanceCache.get(key)));
        if (format == null) {
            if (locale == null) {
                locale = java.util.Locale.getDefault();
            }
            try {
                java.text.SimpleDateFormat formatter = ((java.text.SimpleDateFormat) (java.text.DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale)));
                java.lang.String pattern = formatter.toPattern();
                format = org.apache.commons.lang.time.FastDateFormat.getInstance(pattern, timeZone, locale);
                org.apache.commons.lang.time.FastDateFormat.cDateTimeInstanceCache.put(key, format);
            } catch (java.lang.ClassCastException ex) {
                throw new java.lang.IllegalArgumentException(("No date time pattern for locale: " + locale));
            }
        }
        return format;
    }

    static synchronized java.lang.String getTimeZoneDisplay(java.util.TimeZone tz, boolean daylight, int style, java.util.Locale locale) {
        java.lang.Object key = new org.apache.commons.lang.time.FastDateFormat.TimeZoneDisplayKey(tz, daylight, style, locale);
        java.lang.String value = ((java.lang.String) (org.apache.commons.lang.time.FastDateFormat.cTimeZoneDisplayCache.get(key)));
        if (value == null) {
            value = tz.getDisplayName(daylight, style, locale);
            org.apache.commons.lang.time.FastDateFormat.cTimeZoneDisplayCache.put(key, value);
        }
        return value;
    }

    private static synchronized java.lang.String getDefaultPattern() {
        if ((org.apache.commons.lang.time.FastDateFormat.cDefaultPattern) == null) {
            org.apache.commons.lang.time.FastDateFormat.cDefaultPattern = new java.text.SimpleDateFormat().toPattern();
        }
        return org.apache.commons.lang.time.FastDateFormat.cDefaultPattern;
    }

    protected FastDateFormat(java.lang.String pattern, java.util.TimeZone timeZone, java.util.Locale locale) {
        super();
        if (pattern == null) {
            throw new java.lang.IllegalArgumentException("The pattern must not be null");
        }
        mPattern = pattern;
        mTimeZoneForced = timeZone != null;
        if (timeZone == null) {
            timeZone = java.util.TimeZone.getDefault();
        }
        mTimeZone = timeZone;
        mLocaleForced = locale != null;
        if (locale == null) {
            locale = java.util.Locale.getDefault();
        }
        mLocale = locale;
    }

    protected void init() {
        java.util.List rulesList = parsePattern();
        mRules = ((org.apache.commons.lang.time.FastDateFormat.Rule[]) (rulesList.toArray(new org.apache.commons.lang.time.FastDateFormat.Rule[rulesList.size()])));
        int len = 0;
        for (int i = mRules.length; (--i) >= 0;) {
            len += mRules[i].estimateLength();
        }
        mMaxLengthEstimate = len;
    }

    protected java.util.List parsePattern() {
        java.text.DateFormatSymbols symbols = new java.text.DateFormatSymbols(mLocale);
        java.util.List rules = new java.util.ArrayList();
        java.lang.String[] ERAs = symbols.getEras();
        java.lang.String[] months = symbols.getMonths();
        java.lang.String[] shortMonths = symbols.getShortMonths();
        java.lang.String[] weekdays = symbols.getWeekdays();
        java.lang.String[] shortWeekdays = symbols.getShortWeekdays();
        java.lang.String[] AmPmStrings = symbols.getAmPmStrings();
        int length = mPattern.length();
        int[] indexRef = new int[1];
        for (int i = 0; i < length; i++) {
            indexRef[0] = i;
            java.lang.String token = parseToken(mPattern, indexRef);
            i = indexRef[0];
            int tokenLen = token.length();
            if (tokenLen == 0) {
                break;
            }
            org.apache.commons.lang.time.FastDateFormat.Rule rule;
            char c = token.charAt(0);
            switch (c) {
                case 'G' :
                    rule = new org.apache.commons.lang.time.FastDateFormat.TextField(java.util.Calendar.ERA, ERAs);
                    break;
                case 'y' :
                    if (tokenLen >= 4) {
                        rule = selectNumberRule(java.util.Calendar.YEAR, tokenLen);
                    }else {
                        rule = org.apache.commons.lang.time.FastDateFormat.TwoDigitYearField.INSTANCE;
                    }
                    break;
                case 'M' :
                    if (tokenLen >= 4) {
                        rule = new org.apache.commons.lang.time.FastDateFormat.TextField(java.util.Calendar.MONTH, months);
                    }else
                        if (tokenLen == 3) {
                            rule = new org.apache.commons.lang.time.FastDateFormat.TextField(java.util.Calendar.MONTH, shortMonths);
                        }else
                            if (tokenLen == 2) {
                                rule = org.apache.commons.lang.time.FastDateFormat.TwoDigitMonthField.INSTANCE;
                            }else {
                                rule = org.apache.commons.lang.time.FastDateFormat.UnpaddedMonthField.INSTANCE;
                            }


                    break;
                case 'd' :
                    rule = selectNumberRule(java.util.Calendar.DAY_OF_MONTH, tokenLen);
                    break;
                case 'h' :
                    rule = new org.apache.commons.lang.time.FastDateFormat.TwelveHourField(selectNumberRule(java.util.Calendar.HOUR, tokenLen));
                    break;
                case 'H' :
                    rule = selectNumberRule(java.util.Calendar.HOUR_OF_DAY, tokenLen);
                    break;
                case 'm' :
                    rule = selectNumberRule(java.util.Calendar.MINUTE, tokenLen);
                    break;
                case 's' :
                    rule = selectNumberRule(java.util.Calendar.SECOND, tokenLen);
                    break;
                case 'S' :
                    rule = selectNumberRule(java.util.Calendar.MILLISECOND, tokenLen);
                    break;
                case 'E' :
                    rule = new org.apache.commons.lang.time.FastDateFormat.TextField(java.util.Calendar.DAY_OF_WEEK, (tokenLen < 4 ? shortWeekdays : weekdays));
                    break;
                case 'D' :
                    rule = selectNumberRule(java.util.Calendar.DAY_OF_YEAR, tokenLen);
                    break;
                case 'F' :
                    rule = selectNumberRule(java.util.Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);
                    break;
                case 'w' :
                    rule = selectNumberRule(java.util.Calendar.WEEK_OF_YEAR, tokenLen);
                    break;
                case 'W' :
                    rule = selectNumberRule(java.util.Calendar.WEEK_OF_MONTH, tokenLen);
                    break;
                case 'a' :
                    rule = new org.apache.commons.lang.time.FastDateFormat.TextField(java.util.Calendar.AM_PM, AmPmStrings);
                    break;
                case 'k' :
                    rule = new org.apache.commons.lang.time.FastDateFormat.TwentyFourHourField(selectNumberRule(java.util.Calendar.HOUR_OF_DAY, tokenLen));
                    break;
                case 'K' :
                    rule = selectNumberRule(java.util.Calendar.HOUR, tokenLen);
                    break;
                case 'z' :
                    if (tokenLen >= 4) {
                        rule = new org.apache.commons.lang.time.FastDateFormat.TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, java.util.TimeZone.LONG);
                    }else {
                        boolean spoonDefaultValue = false;
                        try {
                            spoonDefaultValue = true;
                        } catch (java.lang.Exception __NopolProcessorException) {
                        }
                        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                        if (fr.inria.lille.commons.trace.RuntimeValues.instance(10).isEnabled()) {
                            fr.inria.lille.commons.trace.RuntimeValues.instance(10).collectionStarts();
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(10).collectInput("shortMonths",shortMonths);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(10).collectInput("org.apache.commons.lang.time.FastDateFormat.this.mMaxLengthEstimate",org.apache.commons.lang.time.FastDateFormat.this.mMaxLengthEstimate);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(10).collectInput("org.apache.commons.lang.time.FastDateFormat.this.mTimeZoneForced",org.apache.commons.lang.time.FastDateFormat.this.mTimeZoneForced);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(10).collectInput("shortWeekdays",shortWeekdays);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(10).collectInput("rules",rules);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(10).collectInput("org.apache.commons.lang.time.FastDateFormat.MEDIUM",org.apache.commons.lang.time.FastDateFormat.MEDIUM);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(10).collectInput("symbols",symbols);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(10).collectInput("indexRef",indexRef);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(10).collectInput("org.apache.commons.lang.time.FastDateFormat.this.mRules",org.apache.commons.lang.time.FastDateFormat.this.mRules);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(10).collectInput("org.apache.commons.lang.time.FastDateFormat.this.mTimeZone",org.apache.commons.lang.time.FastDateFormat.this.mTimeZone);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(10).collectInput("org.apache.commons.lang.time.FastDateFormat.cTimeInstanceCache",org.apache.commons.lang.time.FastDateFormat.cTimeInstanceCache);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(10).collectInput("org.apache.commons.lang.time.FastDateFormat.this.mLocaleForced",org.apache.commons.lang.time.FastDateFormat.this.mLocaleForced);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(10).collectInput("ERAs",ERAs);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(10).collectInput("org.apache.commons.lang.time.FastDateFormat.this.mPattern",org.apache.commons.lang.time.FastDateFormat.this.mPattern);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(10).collectInput("org.apache.commons.lang.time.FastDateFormat.SHORT",org.apache.commons.lang.time.FastDateFormat.SHORT);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(10).collectInput("c",c);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(10).collectInput("months",months);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(10).collectInput("weekdays",weekdays);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(10).collectInput("org.apache.commons.lang.time.FastDateFormat.cDateInstanceCache",org.apache.commons.lang.time.FastDateFormat.cDateInstanceCache);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(10).collectInput("length",length);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(10).collectInput("org.apache.commons.lang.time.FastDateFormat.LONG",org.apache.commons.lang.time.FastDateFormat.LONG);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(10).collectInput("tokenLen",tokenLen);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(10).collectInput("org.apache.commons.lang.time.FastDateFormat.cInstanceCache",org.apache.commons.lang.time.FastDateFormat.cInstanceCache);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(10).collectInput("org.apache.commons.lang.time.FastDateFormat.this.mLocale",org.apache.commons.lang.time.FastDateFormat.this.mLocale);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(10).collectInput("token",token);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(10).collectInput("org.apache.commons.lang.time.FastDateFormat.cTimeZoneDisplayCache",org.apache.commons.lang.time.FastDateFormat.cTimeZoneDisplayCache);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(10).collectInput("AmPmStrings",AmPmStrings);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(10).collectInput("org.apache.commons.lang.time.FastDateFormat.cDateTimeInstanceCache",org.apache.commons.lang.time.FastDateFormat.cDateTimeInstanceCache);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(10).collectInput("org.apache.commons.lang.time.FastDateFormat.cDefaultPattern",org.apache.commons.lang.time.FastDateFormat.cDefaultPattern);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(10).collectInput("org.apache.commons.lang.time.FastDateFormat.FULL",org.apache.commons.lang.time.FastDateFormat.FULL);} catch (Exception ex1) {ex1.printStackTrace();};
                            fr.inria.lille.commons.trace.RuntimeValues.instance(10).collectOutput(runtimeAngelicValue);
                            fr.inria.lille.commons.trace.RuntimeValues.instance(10).collectionEnds();
                        }
                        if (runtimeAngelicValue)
                            rule = new org.apache.commons.lang.time.FastDateFormat.TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, java.util.TimeZone.SHORT);

                    }
                    break;
                case 'Z' :
                    if (tokenLen == 1) {
                        rule = org.apache.commons.lang.time.FastDateFormat.TimeZoneNumberRule.INSTANCE_NO_COLON;
                    }else {
                        rule = org.apache.commons.lang.time.FastDateFormat.TimeZoneNumberRule.INSTANCE_COLON;
                    }
                    break;
                case '\'' :
                    java.lang.String sub = token.substring(1);
                    if ((sub.length()) == 1) {
                        rule = new org.apache.commons.lang.time.FastDateFormat.CharacterLiteral(sub.charAt(0));
                    }else {
                        rule = new org.apache.commons.lang.time.FastDateFormat.StringLiteral(sub);
                    }
                    break;
                default :
                    throw new java.lang.IllegalArgumentException(("Illegal pattern component: " + token));
            }
            rules.add(rule);
        }
        return rules;
    }

    protected java.lang.String parseToken(java.lang.String pattern, int[] indexRef) {
        java.lang.StringBuffer buf = new java.lang.StringBuffer();
        int i = indexRef[0];
        int length = pattern.length();
        char c = pattern.charAt(i);
        if (((c >= 'A') && (c <= 'Z')) || ((c >= 'a') && (c <= 'z'))) {
            buf.append(c);
            while ((i + 1) < length) {
                char peek = pattern.charAt((i + 1));
                if (peek == c) {
                    buf.append(c);
                    i++;
                }else {
                    break;
                }
            } 
        }else {
            buf.append('\'');
            boolean inLiteral = false;
            for (; i < length; i++) {
                c = pattern.charAt(i);
                if (c == '\'') {
                    if (((i + 1) < length) && ((pattern.charAt((i + 1))) == '\'')) {
                        i++;
                        buf.append(c);
                    }else {
                        inLiteral = !inLiteral;
                    }
                }else
                    if ((!inLiteral) && (((c >= 'A') && (c <= 'Z')) || ((c >= 'a') && (c <= 'z')))) {
                        i--;
                        break;
                    }else {
                        buf.append(c);
                    }

            }
        }
        indexRef[0] = i;
        return buf.toString();
    }

    protected org.apache.commons.lang.time.FastDateFormat.NumberRule selectNumberRule(int field, int padding) {
        switch (padding) {
            case 1 :
                return new org.apache.commons.lang.time.FastDateFormat.UnpaddedNumberField(field);
            case 2 :
                return new org.apache.commons.lang.time.FastDateFormat.TwoDigitNumberField(field);
            default :
                return new org.apache.commons.lang.time.FastDateFormat.PaddedNumberField(field, padding);
        }
    }

    public java.lang.StringBuffer format(java.lang.Object obj, java.lang.StringBuffer toAppendTo, java.text.FieldPosition pos) {
        if (obj instanceof java.util.Date) {
            return format(((java.util.Date) (obj)), toAppendTo);
        }else
            if (obj instanceof java.util.Calendar) {
                return format(((java.util.Calendar) (obj)), toAppendTo);
            }else
                if (obj instanceof java.lang.Long) {
                    return format(((java.lang.Long) (obj)).longValue(), toAppendTo);
                }else {
                    throw new java.lang.IllegalArgumentException(("Unknown class: " + (obj == null ? "<null>" : obj.getClass().getName())));
                }


    }

    public java.lang.String format(long millis) {
        return format(new java.util.Date(millis));
    }

    public java.lang.String format(java.util.Date date) {
        java.util.Calendar c = new java.util.GregorianCalendar(mTimeZone);
        c.setTime(date);
        return applyRules(c, new java.lang.StringBuffer(mMaxLengthEstimate)).toString();
    }

    public java.lang.String format(java.util.Calendar calendar) {
        return format(calendar, new java.lang.StringBuffer(mMaxLengthEstimate)).toString();
    }

    public java.lang.StringBuffer format(long millis, java.lang.StringBuffer buf) {
        return format(new java.util.Date(millis), buf);
    }

    public java.lang.StringBuffer format(java.util.Date date, java.lang.StringBuffer buf) {
        java.util.Calendar c = new java.util.GregorianCalendar(mTimeZone);
        c.setTime(date);
        return applyRules(c, buf);
    }

    public java.lang.StringBuffer format(java.util.Calendar calendar, java.lang.StringBuffer buf) {
        if (mTimeZoneForced) {
            calendar = ((java.util.Calendar) (calendar.clone()));
            calendar.setTimeZone(mTimeZone);
        }
        return applyRules(calendar, buf);
    }

    protected java.lang.StringBuffer applyRules(java.util.Calendar calendar, java.lang.StringBuffer buf) {
        org.apache.commons.lang.time.FastDateFormat.Rule[] rules = mRules;
        int len = mRules.length;
        for (int i = 0; i < len; i++) {
            rules[i].appendTo(buf, calendar);
        }
        return buf;
    }

    public java.lang.Object parseObject(java.lang.String source, java.text.ParsePosition pos) {
        pos.setIndex(0);
        pos.setErrorIndex(0);
        return null;
    }

    public java.lang.String getPattern() {
        return mPattern;
    }

    public java.util.TimeZone getTimeZone() {
        return mTimeZone;
    }

    public boolean getTimeZoneOverridesCalendar() {
        return mTimeZoneForced;
    }

    public java.util.Locale getLocale() {
        return mLocale;
    }

    public int getMaxLengthEstimate() {
        return mMaxLengthEstimate;
    }

    public boolean equals(java.lang.Object obj) {
        if ((obj instanceof org.apache.commons.lang.time.FastDateFormat) == false) {
            return false;
        }
        org.apache.commons.lang.time.FastDateFormat other = ((org.apache.commons.lang.time.FastDateFormat) (obj));
        if (((((((mPattern) == (other.mPattern)) || (mPattern.equals(other.mPattern))) && (((mTimeZone) == (other.mTimeZone)) || (mTimeZone.equals(other.mTimeZone)))) && (((mLocale) == (other.mLocale)) || (mLocale.equals(other.mLocale)))) && ((mTimeZoneForced) == (other.mTimeZoneForced))) && ((mLocaleForced) == (other.mLocaleForced))) {
            return true;
        }
        return false;
    }

    public int hashCode() {
        int total = 0;
        total += mPattern.hashCode();
        total += mTimeZone.hashCode();
        total += (mTimeZoneForced) ? 1 : 0;
        total += mLocale.hashCode();
        total += (mLocaleForced) ? 1 : 0;
        return total;
    }

    public java.lang.String toString() {
        return ("FastDateFormat[" + (mPattern)) + "]";
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
        in.defaultReadObject();
        init();
    }

    private interface Rule {
        int estimateLength();

        void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar);
    }

    private interface NumberRule extends org.apache.commons.lang.time.FastDateFormat.Rule {
        void appendTo(java.lang.StringBuffer buffer, int value);
    }

    private static class CharacterLiteral implements org.apache.commons.lang.time.FastDateFormat.Rule {
        private final char mValue;

        CharacterLiteral(char value) {
            mValue = value;
        }

        public int estimateLength() {
            return 1;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            buffer.append(mValue);
        }
    }

    private static class StringLiteral implements org.apache.commons.lang.time.FastDateFormat.Rule {
        private final java.lang.String mValue;

        StringLiteral(java.lang.String value) {
            mValue = value;
        }

        public int estimateLength() {
            return mValue.length();
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            buffer.append(mValue);
        }
    }

    private static class TextField implements org.apache.commons.lang.time.FastDateFormat.Rule {
        private final int mField;

        private final java.lang.String[] mValues;

        TextField(int field, java.lang.String[] values) {
            mField = field;
            mValues = values;
        }

        public int estimateLength() {
            int max = 0;
            for (int i = mValues.length; (--i) >= 0;) {
                int len = mValues[i].length();
                if (len > max) {
                    max = len;
                }
            }
            return max;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            buffer.append(mValues[calendar.get(mField)]);
        }
    }

    private static class UnpaddedNumberField implements org.apache.commons.lang.time.FastDateFormat.NumberRule {
        static final org.apache.commons.lang.time.FastDateFormat.UnpaddedNumberField INSTANCE_YEAR = new org.apache.commons.lang.time.FastDateFormat.UnpaddedNumberField(java.util.Calendar.YEAR);

        private final int mField;

        UnpaddedNumberField(int field) {
            mField = field;
        }

        public int estimateLength() {
            return 4;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            appendTo(buffer, calendar.get(mField));
        }

        public final void appendTo(java.lang.StringBuffer buffer, int value) {
            if (value < 10) {
                buffer.append(((char) (value + '0')));
            }else
                if (value < 100) {
                    buffer.append(((char) ((value / 10) + '0')));
                    buffer.append(((char) ((value % 10) + '0')));
                }else {
                    buffer.append(java.lang.Integer.toString(value));
                }

        }
    }

    private static class UnpaddedMonthField implements org.apache.commons.lang.time.FastDateFormat.NumberRule {
        static final org.apache.commons.lang.time.FastDateFormat.UnpaddedMonthField INSTANCE = new org.apache.commons.lang.time.FastDateFormat.UnpaddedMonthField();

        UnpaddedMonthField() {
            super();
        }

        public int estimateLength() {
            return 2;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            appendTo(buffer, ((calendar.get(java.util.Calendar.MONTH)) + 1));
        }

        public final void appendTo(java.lang.StringBuffer buffer, int value) {
            if (value < 10) {
                buffer.append(((char) (value + '0')));
            }else {
                buffer.append(((char) ((value / 10) + '0')));
                buffer.append(((char) ((value % 10) + '0')));
            }
        }
    }

    private static class PaddedNumberField implements org.apache.commons.lang.time.FastDateFormat.NumberRule {
        private final int mField;

        private final int mSize;

        PaddedNumberField(int field, int size) {
            if (size < 3) {
                throw new java.lang.IllegalArgumentException();
            }
            mField = field;
            mSize = size;
        }

        public int estimateLength() {
            return 4;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            appendTo(buffer, calendar.get(mField));
        }

        public final void appendTo(java.lang.StringBuffer buffer, int value) {
            if (value < 100) {
                for (int i = mSize; (--i) >= 2;) {
                    buffer.append('0');
                }
                buffer.append(((char) ((value / 10) + '0')));
                buffer.append(((char) ((value % 10) + '0')));
            }else {
                int digits;
                if (value < 1000) {
                    digits = 3;
                }else {
                    org.apache.commons.lang.Validate.isTrue((value > (-1)), "Negative values should not be possible", value);
                    digits = java.lang.Integer.toString(value).length();
                }
                for (int i = mSize; (--i) >= digits;) {
                    buffer.append('0');
                }
                buffer.append(java.lang.Integer.toString(value));
            }
        }
    }

    private static class TwoDigitNumberField implements org.apache.commons.lang.time.FastDateFormat.NumberRule {
        private final int mField;

        TwoDigitNumberField(int field) {
            mField = field;
        }

        public int estimateLength() {
            return 2;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            appendTo(buffer, calendar.get(mField));
        }

        public final void appendTo(java.lang.StringBuffer buffer, int value) {
            if (value < 100) {
                buffer.append(((char) ((value / 10) + '0')));
                buffer.append(((char) ((value % 10) + '0')));
            }else {
                buffer.append(java.lang.Integer.toString(value));
            }
        }
    }

    private static class TwoDigitYearField implements org.apache.commons.lang.time.FastDateFormat.NumberRule {
        static final org.apache.commons.lang.time.FastDateFormat.TwoDigitYearField INSTANCE = new org.apache.commons.lang.time.FastDateFormat.TwoDigitYearField();

        TwoDigitYearField() {
            super();
        }

        public int estimateLength() {
            return 2;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            appendTo(buffer, ((calendar.get(java.util.Calendar.YEAR)) % 100));
        }

        public final void appendTo(java.lang.StringBuffer buffer, int value) {
            buffer.append(((char) ((value / 10) + '0')));
            buffer.append(((char) ((value % 10) + '0')));
        }
    }

    private static class TwoDigitMonthField implements org.apache.commons.lang.time.FastDateFormat.NumberRule {
        static final org.apache.commons.lang.time.FastDateFormat.TwoDigitMonthField INSTANCE = new org.apache.commons.lang.time.FastDateFormat.TwoDigitMonthField();

        TwoDigitMonthField() {
            super();
        }

        public int estimateLength() {
            return 2;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            appendTo(buffer, ((calendar.get(java.util.Calendar.MONTH)) + 1));
        }

        public final void appendTo(java.lang.StringBuffer buffer, int value) {
            buffer.append(((char) ((value / 10) + '0')));
            buffer.append(((char) ((value % 10) + '0')));
        }
    }

    private static class TwelveHourField implements org.apache.commons.lang.time.FastDateFormat.NumberRule {
        private final org.apache.commons.lang.time.FastDateFormat.NumberRule mRule;

        TwelveHourField(org.apache.commons.lang.time.FastDateFormat.NumberRule rule) {
            mRule = rule;
        }

        public int estimateLength() {
            return mRule.estimateLength();
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            int value = calendar.get(java.util.Calendar.HOUR);
            if (value == 0) {
                value = (calendar.getLeastMaximum(java.util.Calendar.HOUR)) + 1;
            }
            mRule.appendTo(buffer, value);
        }

        public void appendTo(java.lang.StringBuffer buffer, int value) {
            mRule.appendTo(buffer, value);
        }
    }

    private static class TwentyFourHourField implements org.apache.commons.lang.time.FastDateFormat.NumberRule {
        private final org.apache.commons.lang.time.FastDateFormat.NumberRule mRule;

        TwentyFourHourField(org.apache.commons.lang.time.FastDateFormat.NumberRule rule) {
            mRule = rule;
        }

        public int estimateLength() {
            return mRule.estimateLength();
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            int value = calendar.get(java.util.Calendar.HOUR_OF_DAY);
            if (value == 0) {
                value = (calendar.getMaximum(java.util.Calendar.HOUR_OF_DAY)) + 1;
            }
            mRule.appendTo(buffer, value);
        }

        public void appendTo(java.lang.StringBuffer buffer, int value) {
            mRule.appendTo(buffer, value);
        }
    }

    private static class TimeZoneNameRule implements org.apache.commons.lang.time.FastDateFormat.Rule {
        private final java.util.TimeZone mTimeZone;

        private final boolean mTimeZoneForced;

        private final java.util.Locale mLocale;

        private final int mStyle;

        private final java.lang.String mStandard;

        private final java.lang.String mDaylight;

        TimeZoneNameRule(java.util.TimeZone timeZone, boolean timeZoneForced, java.util.Locale locale, int style) {
            mTimeZone = timeZone;
            mTimeZoneForced = timeZoneForced;
            mLocale = locale;
            mStyle = style;
            if (timeZoneForced) {
                mStandard = org.apache.commons.lang.time.FastDateFormat.getTimeZoneDisplay(timeZone, false, style, locale);
                mDaylight = org.apache.commons.lang.time.FastDateFormat.getTimeZoneDisplay(timeZone, true, style, locale);
            }else {
                mStandard = null;
                mDaylight = null;
            }
        }

        public int estimateLength() {
            if (mTimeZoneForced) {
                return java.lang.Math.max(mStandard.length(), mDaylight.length());
            }else
                if ((mStyle) == (java.util.TimeZone.SHORT)) {
                    return 4;
                }else {
                    return 40;
                }

        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            if (mTimeZoneForced) {
                if ((mTimeZone.useDaylightTime()) && ((calendar.get(java.util.Calendar.DST_OFFSET)) != 0)) {
                    buffer.append(mDaylight);
                }else {
                    buffer.append(mStandard);
                }
            }else {
                java.util.TimeZone timeZone = calendar.getTimeZone();
                if ((timeZone.useDaylightTime()) && ((calendar.get(java.util.Calendar.DST_OFFSET)) != 0)) {
                    buffer.append(org.apache.commons.lang.time.FastDateFormat.getTimeZoneDisplay(timeZone, true, mStyle, mLocale));
                }else {
                    buffer.append(org.apache.commons.lang.time.FastDateFormat.getTimeZoneDisplay(timeZone, false, mStyle, mLocale));
                }
            }
        }
    }

    private static class TimeZoneNumberRule implements org.apache.commons.lang.time.FastDateFormat.Rule {
        static final org.apache.commons.lang.time.FastDateFormat.TimeZoneNumberRule INSTANCE_COLON = new org.apache.commons.lang.time.FastDateFormat.TimeZoneNumberRule(true);

        static final org.apache.commons.lang.time.FastDateFormat.TimeZoneNumberRule INSTANCE_NO_COLON = new org.apache.commons.lang.time.FastDateFormat.TimeZoneNumberRule(false);

        final boolean mColon;

        TimeZoneNumberRule(boolean colon) {
            mColon = colon;
        }

        public int estimateLength() {
            return 5;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            int offset = (calendar.get(java.util.Calendar.ZONE_OFFSET)) + (calendar.get(java.util.Calendar.DST_OFFSET));
            if (offset < 0) {
                buffer.append('-');
                offset = -offset;
            }else {
                buffer.append('+');
            }
            int hours = offset / ((60 * 60) * 1000);
            buffer.append(((char) ((hours / 10) + '0')));
            buffer.append(((char) ((hours % 10) + '0')));
            if (mColon) {
                buffer.append(':');
            }
            int minutes = (offset / (60 * 1000)) - (60 * hours);
            buffer.append(((char) ((minutes / 10) + '0')));
            buffer.append(((char) ((minutes % 10) + '0')));
        }
    }

    private static class TimeZoneDisplayKey {
        private final java.util.TimeZone mTimeZone;

        private final int mStyle;

        private final java.util.Locale mLocale;

        TimeZoneDisplayKey(java.util.TimeZone timeZone, boolean daylight, int style, java.util.Locale locale) {
            mTimeZone = timeZone;
            if (daylight) {
                style |= -2147483648;
            }
            mStyle = style;
            mLocale = locale;
        }

        public int hashCode() {
            return ((mStyle) * 31) + (mLocale.hashCode());
        }

        public boolean equals(java.lang.Object obj) {
            if ((this) == obj) {
                return true;
            }
            if (obj instanceof org.apache.commons.lang.time.FastDateFormat.TimeZoneDisplayKey) {
                org.apache.commons.lang.time.FastDateFormat.TimeZoneDisplayKey other = ((org.apache.commons.lang.time.FastDateFormat.TimeZoneDisplayKey) (obj));
                return ((mTimeZone.equals(other.mTimeZone)) && ((mStyle) == (other.mStyle))) && (mLocale.equals(other.mLocale));
            }
            return false;
        }
    }

    private static class Pair {
        private final java.lang.Object mObj1;

        private final java.lang.Object mObj2;

        public Pair(java.lang.Object obj1, java.lang.Object obj2) {
            mObj1 = obj1;
            mObj2 = obj2;
        }

        public boolean equals(java.lang.Object obj) {
            if ((this) == obj) {
                return true;
            }
            if (!(obj instanceof org.apache.commons.lang.time.FastDateFormat.Pair)) {
                return false;
            }
            org.apache.commons.lang.time.FastDateFormat.Pair key = ((org.apache.commons.lang.time.FastDateFormat.Pair) (obj));
            return ((mObj1) == null ? (key.mObj1) == null : mObj1.equals(key.mObj1)) && ((mObj2) == null ? (key.mObj2) == null : mObj2.equals(key.mObj2));
        }

        public int hashCode() {
            return ((mObj1) == null ? 0 : mObj1.hashCode()) + ((mObj2) == null ? 0 : mObj2.hashCode());
        }

        public java.lang.String toString() {
            return ((("[" + (mObj1)) + ':') + (mObj2)) + ']';
        }
    }
}
18:38:45.299 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
18:38:45.300 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #12
18:38:45.300 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang.time.FastDateFormat:672 which is executed by 1 tests
-1899260190
18:38:45.411 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:38:45.426 [pool-54-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (12 ms)
<> Total tests run: 13
<> Ignored tests: 0
<> Failed tests: 2
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

18:38:46.168 [pool-53-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
FastDateFormat.java:379: error: variable rule might not have been initialized
            rules.add(rule);
                      ^
Note: FastDateFormat.java uses unchecked or unsafe operations.
Note: Recompile with -Xlint:unchecked for details.
18:38:46.724 [pool-53-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public class FastDateFormat extends java.text.Format {
    private static final long serialVersionUID = 1L;

    public static final int FULL = java.text.DateFormat.FULL;

    public static final int LONG = java.text.DateFormat.LONG;

    public static final int MEDIUM = java.text.DateFormat.MEDIUM;

    public static final int SHORT = java.text.DateFormat.SHORT;

    private static java.lang.String cDefaultPattern;

    private static java.util.Map cInstanceCache = new java.util.HashMap(7);

    private static java.util.Map cDateInstanceCache = new java.util.HashMap(7);

    private static java.util.Map cTimeInstanceCache = new java.util.HashMap(7);

    private static java.util.Map cDateTimeInstanceCache = new java.util.HashMap(7);

    private static java.util.Map cTimeZoneDisplayCache = new java.util.HashMap(7);

    private final java.lang.String mPattern;

    private final java.util.TimeZone mTimeZone;

    private final boolean mTimeZoneForced;

    private final java.util.Locale mLocale;

    private final boolean mLocaleForced;

    private transient org.apache.commons.lang.time.FastDateFormat.Rule[] mRules;

    private transient int mMaxLengthEstimate;

    public static org.apache.commons.lang.time.FastDateFormat getInstance() {
        return org.apache.commons.lang.time.FastDateFormat.getInstance(org.apache.commons.lang.time.FastDateFormat.getDefaultPattern(), null, null);
    }

    public static org.apache.commons.lang.time.FastDateFormat getInstance(java.lang.String pattern) {
        return org.apache.commons.lang.time.FastDateFormat.getInstance(pattern, null, null);
    }

    public static org.apache.commons.lang.time.FastDateFormat getInstance(java.lang.String pattern, java.util.TimeZone timeZone) {
        return org.apache.commons.lang.time.FastDateFormat.getInstance(pattern, timeZone, null);
    }

    public static org.apache.commons.lang.time.FastDateFormat getInstance(java.lang.String pattern, java.util.Locale locale) {
        return org.apache.commons.lang.time.FastDateFormat.getInstance(pattern, null, locale);
    }

    public static synchronized org.apache.commons.lang.time.FastDateFormat getInstance(java.lang.String pattern, java.util.TimeZone timeZone, java.util.Locale locale) {
        org.apache.commons.lang.time.FastDateFormat emptyFormat = new org.apache.commons.lang.time.FastDateFormat(pattern, timeZone, locale);
        org.apache.commons.lang.time.FastDateFormat format = ((org.apache.commons.lang.time.FastDateFormat) (org.apache.commons.lang.time.FastDateFormat.cInstanceCache.get(emptyFormat)));
        if (format == null) {
            format = emptyFormat;
            format.init();
            org.apache.commons.lang.time.FastDateFormat.cInstanceCache.put(format, format);
        }
        return format;
    }

    public static org.apache.commons.lang.time.FastDateFormat getDateInstance(int style) {
        return org.apache.commons.lang.time.FastDateFormat.getDateInstance(style, null, null);
    }

    public static org.apache.commons.lang.time.FastDateFormat getDateInstance(int style, java.util.Locale locale) {
        return org.apache.commons.lang.time.FastDateFormat.getDateInstance(style, null, locale);
    }

    public static org.apache.commons.lang.time.FastDateFormat getDateInstance(int style, java.util.TimeZone timeZone) {
        return org.apache.commons.lang.time.FastDateFormat.getDateInstance(style, timeZone, null);
    }

    public static synchronized org.apache.commons.lang.time.FastDateFormat getDateInstance(int style, java.util.TimeZone timeZone, java.util.Locale locale) {
        java.lang.Object key = new java.lang.Integer(style);
        if (timeZone != null) {
            key = new org.apache.commons.lang.time.FastDateFormat.Pair(key, timeZone);
        }
        if (locale != null) {
            key = new org.apache.commons.lang.time.FastDateFormat.Pair(key, locale);
        }
        org.apache.commons.lang.time.FastDateFormat format = ((org.apache.commons.lang.time.FastDateFormat) (org.apache.commons.lang.time.FastDateFormat.cDateInstanceCache.get(key)));
        if (format == null) {
            if (locale == null) {
                locale = java.util.Locale.getDefault();
            }
            try {
                java.text.SimpleDateFormat formatter = ((java.text.SimpleDateFormat) (java.text.DateFormat.getDateInstance(style, locale)));
                java.lang.String pattern = formatter.toPattern();
                format = org.apache.commons.lang.time.FastDateFormat.getInstance(pattern, timeZone, locale);
                org.apache.commons.lang.time.FastDateFormat.cDateInstanceCache.put(key, format);
            } catch (java.lang.ClassCastException ex) {
                throw new java.lang.IllegalArgumentException(("No date pattern for locale: " + locale));
            }
        }
        return format;
    }

    public static org.apache.commons.lang.time.FastDateFormat getTimeInstance(int style) {
        return org.apache.commons.lang.time.FastDateFormat.getTimeInstance(style, null, null);
    }

    public static org.apache.commons.lang.time.FastDateFormat getTimeInstance(int style, java.util.Locale locale) {
        return org.apache.commons.lang.time.FastDateFormat.getTimeInstance(style, null, locale);
    }

    public static org.apache.commons.lang.time.FastDateFormat getTimeInstance(int style, java.util.TimeZone timeZone) {
        return org.apache.commons.lang.time.FastDateFormat.getTimeInstance(style, timeZone, null);
    }

    public static synchronized org.apache.commons.lang.time.FastDateFormat getTimeInstance(int style, java.util.TimeZone timeZone, java.util.Locale locale) {
        java.lang.Object key = new java.lang.Integer(style);
        if (timeZone != null) {
            key = new org.apache.commons.lang.time.FastDateFormat.Pair(key, timeZone);
        }
        if (locale != null) {
            key = new org.apache.commons.lang.time.FastDateFormat.Pair(key, locale);
        }
        org.apache.commons.lang.time.FastDateFormat format = ((org.apache.commons.lang.time.FastDateFormat) (org.apache.commons.lang.time.FastDateFormat.cTimeInstanceCache.get(key)));
        if (format == null) {
            if (locale == null) {
                locale = java.util.Locale.getDefault();
            }
            try {
                java.text.SimpleDateFormat formatter = ((java.text.SimpleDateFormat) (java.text.DateFormat.getTimeInstance(style, locale)));
                java.lang.String pattern = formatter.toPattern();
                format = org.apache.commons.lang.time.FastDateFormat.getInstance(pattern, timeZone, locale);
                org.apache.commons.lang.time.FastDateFormat.cTimeInstanceCache.put(key, format);
            } catch (java.lang.ClassCastException ex) {
                throw new java.lang.IllegalArgumentException(("No date pattern for locale: " + locale));
            }
        }
        return format;
    }

    public static org.apache.commons.lang.time.FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle) {
        return org.apache.commons.lang.time.FastDateFormat.getDateTimeInstance(dateStyle, timeStyle, null, null);
    }

    public static org.apache.commons.lang.time.FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, java.util.Locale locale) {
        return org.apache.commons.lang.time.FastDateFormat.getDateTimeInstance(dateStyle, timeStyle, null, locale);
    }

    public static org.apache.commons.lang.time.FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, java.util.TimeZone timeZone) {
        return org.apache.commons.lang.time.FastDateFormat.getDateTimeInstance(dateStyle, timeStyle, timeZone, null);
    }

    public static synchronized org.apache.commons.lang.time.FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, java.util.TimeZone timeZone, java.util.Locale locale) {
        java.lang.Object key = new org.apache.commons.lang.time.FastDateFormat.Pair(new java.lang.Integer(dateStyle), new java.lang.Integer(timeStyle));
        if (timeZone != null) {
            key = new org.apache.commons.lang.time.FastDateFormat.Pair(key, timeZone);
        }
        if (locale != null) {
            key = new org.apache.commons.lang.time.FastDateFormat.Pair(key, locale);
        }
        org.apache.commons.lang.time.FastDateFormat format = ((org.apache.commons.lang.time.FastDateFormat) (org.apache.commons.lang.time.FastDateFormat.cDateTimeInstanceCache.get(key)));
        if (format == null) {
            if (locale == null) {
                locale = java.util.Locale.getDefault();
            }
            try {
                java.text.SimpleDateFormat formatter = ((java.text.SimpleDateFormat) (java.text.DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale)));
                java.lang.String pattern = formatter.toPattern();
                format = org.apache.commons.lang.time.FastDateFormat.getInstance(pattern, timeZone, locale);
                org.apache.commons.lang.time.FastDateFormat.cDateTimeInstanceCache.put(key, format);
            } catch (java.lang.ClassCastException ex) {
                throw new java.lang.IllegalArgumentException(("No date time pattern for locale: " + locale));
            }
        }
        return format;
    }

    static synchronized java.lang.String getTimeZoneDisplay(java.util.TimeZone tz, boolean daylight, int style, java.util.Locale locale) {
        java.lang.Object key = new org.apache.commons.lang.time.FastDateFormat.TimeZoneDisplayKey(tz, daylight, style, locale);
        java.lang.String value = ((java.lang.String) (org.apache.commons.lang.time.FastDateFormat.cTimeZoneDisplayCache.get(key)));
        if (value == null) {
            value = tz.getDisplayName(daylight, style, locale);
            org.apache.commons.lang.time.FastDateFormat.cTimeZoneDisplayCache.put(key, value);
        }
        return value;
    }

    private static synchronized java.lang.String getDefaultPattern() {
        if ((org.apache.commons.lang.time.FastDateFormat.cDefaultPattern) == null) {
            org.apache.commons.lang.time.FastDateFormat.cDefaultPattern = new java.text.SimpleDateFormat().toPattern();
        }
        return org.apache.commons.lang.time.FastDateFormat.cDefaultPattern;
    }

    protected FastDateFormat(java.lang.String pattern, java.util.TimeZone timeZone, java.util.Locale locale) {
        super();
        if (pattern == null) {
            throw new java.lang.IllegalArgumentException("The pattern must not be null");
        }
        mPattern = pattern;
        mTimeZoneForced = timeZone != null;
        if (timeZone == null) {
            timeZone = java.util.TimeZone.getDefault();
        }
        mTimeZone = timeZone;
        mLocaleForced = locale != null;
        if (locale == null) {
            locale = java.util.Locale.getDefault();
        }
        mLocale = locale;
    }

    protected void init() {
        java.util.List rulesList = parsePattern();
        mRules = ((org.apache.commons.lang.time.FastDateFormat.Rule[]) (rulesList.toArray(new org.apache.commons.lang.time.FastDateFormat.Rule[rulesList.size()])));
        int len = 0;
        for (int i = mRules.length; (--i) >= 0;) {
            len += mRules[i].estimateLength();
        }
        mMaxLengthEstimate = len;
    }

    protected java.util.List parsePattern() {
        java.text.DateFormatSymbols symbols = new java.text.DateFormatSymbols(mLocale);
        java.util.List rules = new java.util.ArrayList();
        java.lang.String[] ERAs = symbols.getEras();
        java.lang.String[] months = symbols.getMonths();
        java.lang.String[] shortMonths = symbols.getShortMonths();
        java.lang.String[] weekdays = symbols.getWeekdays();
        java.lang.String[] shortWeekdays = symbols.getShortWeekdays();
        java.lang.String[] AmPmStrings = symbols.getAmPmStrings();
        int length = mPattern.length();
        int[] indexRef = new int[1];
        for (int i = 0; i < length; i++) {
            indexRef[0] = i;
            java.lang.String token = parseToken(mPattern, indexRef);
            i = indexRef[0];
            int tokenLen = token.length();
            if (tokenLen == 0) {
                break;
            }
            org.apache.commons.lang.time.FastDateFormat.Rule rule;
            char c = token.charAt(0);
            switch (c) {
                case 'G' :
                    rule = new org.apache.commons.lang.time.FastDateFormat.TextField(java.util.Calendar.ERA, ERAs);
                    break;
                case 'y' :
                    if (tokenLen >= 4) {
                        rule = selectNumberRule(java.util.Calendar.YEAR, tokenLen);
                    }else {
                        rule = org.apache.commons.lang.time.FastDateFormat.TwoDigitYearField.INSTANCE;
                    }
                    break;
                case 'M' :
                    if (tokenLen >= 4) {
                        rule = new org.apache.commons.lang.time.FastDateFormat.TextField(java.util.Calendar.MONTH, months);
                    }else
                        if (tokenLen == 3) {
                            rule = new org.apache.commons.lang.time.FastDateFormat.TextField(java.util.Calendar.MONTH, shortMonths);
                        }else
                            if (tokenLen == 2) {
                                rule = org.apache.commons.lang.time.FastDateFormat.TwoDigitMonthField.INSTANCE;
                            }else {
                                rule = org.apache.commons.lang.time.FastDateFormat.UnpaddedMonthField.INSTANCE;
                            }


                    break;
                case 'd' :
                    rule = selectNumberRule(java.util.Calendar.DAY_OF_MONTH, tokenLen);
                    break;
                case 'h' :
                    rule = new org.apache.commons.lang.time.FastDateFormat.TwelveHourField(selectNumberRule(java.util.Calendar.HOUR, tokenLen));
                    break;
                case 'H' :
                    rule = selectNumberRule(java.util.Calendar.HOUR_OF_DAY, tokenLen);
                    break;
                case 'm' :
                    rule = selectNumberRule(java.util.Calendar.MINUTE, tokenLen);
                    break;
                case 's' :
                    rule = selectNumberRule(java.util.Calendar.SECOND, tokenLen);
                    break;
                case 'S' :
                    rule = selectNumberRule(java.util.Calendar.MILLISECOND, tokenLen);
                    break;
                case 'E' :
                    rule = new org.apache.commons.lang.time.FastDateFormat.TextField(java.util.Calendar.DAY_OF_WEEK, (tokenLen < 4 ? shortWeekdays : weekdays));
                    break;
                case 'D' :
                    rule = selectNumberRule(java.util.Calendar.DAY_OF_YEAR, tokenLen);
                    break;
                case 'F' :
                    rule = selectNumberRule(java.util.Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);
                    break;
                case 'w' :
                    rule = selectNumberRule(java.util.Calendar.WEEK_OF_YEAR, tokenLen);
                    break;
                case 'W' :
                    rule = selectNumberRule(java.util.Calendar.WEEK_OF_MONTH, tokenLen);
                    break;
                case 'a' :
                    rule = new org.apache.commons.lang.time.FastDateFormat.TextField(java.util.Calendar.AM_PM, AmPmStrings);
                    break;
                case 'k' :
                    rule = new org.apache.commons.lang.time.FastDateFormat.TwentyFourHourField(selectNumberRule(java.util.Calendar.HOUR_OF_DAY, tokenLen));
                    break;
                case 'K' :
                    rule = selectNumberRule(java.util.Calendar.HOUR, tokenLen);
                    break;
                case 'z' :
                    boolean spoonDefaultValue = false;
                    try {
                        spoonDefaultValue = true;
                    } catch (java.lang.Exception __NopolProcessorException) {
                    }
                    boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                    if (fr.inria.lille.commons.trace.RuntimeValues.instance(11).isEnabled()) {
                        fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectionStarts();
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("shortMonths",shortMonths);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("org.apache.commons.lang.time.FastDateFormat.this.mMaxLengthEstimate",org.apache.commons.lang.time.FastDateFormat.this.mMaxLengthEstimate);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("org.apache.commons.lang.time.FastDateFormat.this.mTimeZoneForced",org.apache.commons.lang.time.FastDateFormat.this.mTimeZoneForced);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("shortWeekdays",shortWeekdays);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("rules",rules);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("org.apache.commons.lang.time.FastDateFormat.MEDIUM",org.apache.commons.lang.time.FastDateFormat.MEDIUM);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("symbols",symbols);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("indexRef",indexRef);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("org.apache.commons.lang.time.FastDateFormat.this.mRules",org.apache.commons.lang.time.FastDateFormat.this.mRules);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("org.apache.commons.lang.time.FastDateFormat.this.mTimeZone",org.apache.commons.lang.time.FastDateFormat.this.mTimeZone);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("org.apache.commons.lang.time.FastDateFormat.cTimeInstanceCache",org.apache.commons.lang.time.FastDateFormat.cTimeInstanceCache);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("org.apache.commons.lang.time.FastDateFormat.this.mLocaleForced",org.apache.commons.lang.time.FastDateFormat.this.mLocaleForced);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("ERAs",ERAs);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("org.apache.commons.lang.time.FastDateFormat.this.mPattern",org.apache.commons.lang.time.FastDateFormat.this.mPattern);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("org.apache.commons.lang.time.FastDateFormat.SHORT",org.apache.commons.lang.time.FastDateFormat.SHORT);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("c",c);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("months",months);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("weekdays",weekdays);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("org.apache.commons.lang.time.FastDateFormat.cDateInstanceCache",org.apache.commons.lang.time.FastDateFormat.cDateInstanceCache);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("length",length);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("org.apache.commons.lang.time.FastDateFormat.LONG",org.apache.commons.lang.time.FastDateFormat.LONG);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("tokenLen",tokenLen);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("org.apache.commons.lang.time.FastDateFormat.cInstanceCache",org.apache.commons.lang.time.FastDateFormat.cInstanceCache);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("org.apache.commons.lang.time.FastDateFormat.this.mLocale",org.apache.commons.lang.time.FastDateFormat.this.mLocale);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("token",token);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("org.apache.commons.lang.time.FastDateFormat.cTimeZoneDisplayCache",org.apache.commons.lang.time.FastDateFormat.cTimeZoneDisplayCache);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("AmPmStrings",AmPmStrings);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("org.apache.commons.lang.time.FastDateFormat.cDateTimeInstanceCache",org.apache.commons.lang.time.FastDateFormat.cDateTimeInstanceCache);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("4",4);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("tokenLen >= 4",tokenLen >= 4);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("org.apache.commons.lang.time.FastDateFormat.cDefaultPattern",org.apache.commons.lang.time.FastDateFormat.cDefaultPattern);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("org.apache.commons.lang.time.FastDateFormat.FULL",org.apache.commons.lang.time.FastDateFormat.FULL);} catch (Exception ex1) {ex1.printStackTrace();};
                        fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectOutput(runtimeAngelicValue);
                        fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectionEnds();
                    }
                    if (runtimeAngelicValue) if (tokenLen >= 4) {
                        rule = new org.apache.commons.lang.time.FastDateFormat.TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, java.util.TimeZone.LONG);
                    }else {
                        rule = new org.apache.commons.lang.time.FastDateFormat.TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, java.util.TimeZone.SHORT);
                    }
                    break;
                case 'Z' :
                    if (tokenLen == 1) {
                        rule = org.apache.commons.lang.time.FastDateFormat.TimeZoneNumberRule.INSTANCE_NO_COLON;
                    }else {
                        rule = org.apache.commons.lang.time.FastDateFormat.TimeZoneNumberRule.INSTANCE_COLON;
                    }
                    break;
                case '\'' :
                    java.lang.String sub = token.substring(1);
                    if ((sub.length()) == 1) {
                        rule = new org.apache.commons.lang.time.FastDateFormat.CharacterLiteral(sub.charAt(0));
                    }else {
                        rule = new org.apache.commons.lang.time.FastDateFormat.StringLiteral(sub);
                    }
                    break;
                default :
                    throw new java.lang.IllegalArgumentException(("Illegal pattern component: " + token));
            }
            rules.add(rule);
        }
        return rules;
    }

    protected java.lang.String parseToken(java.lang.String pattern, int[] indexRef) {
        java.lang.StringBuffer buf = new java.lang.StringBuffer();
        int i = indexRef[0];
        int length = pattern.length();
        char c = pattern.charAt(i);
        if (((c >= 'A') && (c <= 'Z')) || ((c >= 'a') && (c <= 'z'))) {
            buf.append(c);
            while ((i + 1) < length) {
                char peek = pattern.charAt((i + 1));
                if (peek == c) {
                    buf.append(c);
                    i++;
                }else {
                    break;
                }
            } 
        }else {
            buf.append('\'');
            boolean inLiteral = false;
            for (; i < length; i++) {
                c = pattern.charAt(i);
                if (c == '\'') {
                    if (((i + 1) < length) && ((pattern.charAt((i + 1))) == '\'')) {
                        i++;
                        buf.append(c);
                    }else {
                        inLiteral = !inLiteral;
                    }
                }else
                    if ((!inLiteral) && (((c >= 'A') && (c <= 'Z')) || ((c >= 'a') && (c <= 'z')))) {
                        i--;
                        break;
                    }else {
                        buf.append(c);
                    }

            }
        }
        indexRef[0] = i;
        return buf.toString();
    }

    protected org.apache.commons.lang.time.FastDateFormat.NumberRule selectNumberRule(int field, int padding) {
        switch (padding) {
            case 1 :
                return new org.apache.commons.lang.time.FastDateFormat.UnpaddedNumberField(field);
            case 2 :
                return new org.apache.commons.lang.time.FastDateFormat.TwoDigitNumberField(field);
            default :
                return new org.apache.commons.lang.time.FastDateFormat.PaddedNumberField(field, padding);
        }
    }

    public java.lang.StringBuffer format(java.lang.Object obj, java.lang.StringBuffer toAppendTo, java.text.FieldPosition pos) {
        if (obj instanceof java.util.Date) {
            return format(((java.util.Date) (obj)), toAppendTo);
        }else
            if (obj instanceof java.util.Calendar) {
                return format(((java.util.Calendar) (obj)), toAppendTo);
            }else
                if (obj instanceof java.lang.Long) {
                    return format(((java.lang.Long) (obj)).longValue(), toAppendTo);
                }else {
                    throw new java.lang.IllegalArgumentException(("Unknown class: " + (obj == null ? "<null>" : obj.getClass().getName())));
                }


    }

    public java.lang.String format(long millis) {
        return format(new java.util.Date(millis));
    }

    public java.lang.String format(java.util.Date date) {
        java.util.Calendar c = new java.util.GregorianCalendar(mTimeZone);
        c.setTime(date);
        return applyRules(c, new java.lang.StringBuffer(mMaxLengthEstimate)).toString();
    }

    public java.lang.String format(java.util.Calendar calendar) {
        return format(calendar, new java.lang.StringBuffer(mMaxLengthEstimate)).toString();
    }

    public java.lang.StringBuffer format(long millis, java.lang.StringBuffer buf) {
        return format(new java.util.Date(millis), buf);
    }

    public java.lang.StringBuffer format(java.util.Date date, java.lang.StringBuffer buf) {
        java.util.Calendar c = new java.util.GregorianCalendar(mTimeZone);
        c.setTime(date);
        return applyRules(c, buf);
    }

    public java.lang.StringBuffer format(java.util.Calendar calendar, java.lang.StringBuffer buf) {
        if (mTimeZoneForced) {
            calendar = ((java.util.Calendar) (calendar.clone()));
            calendar.setTimeZone(mTimeZone);
        }
        return applyRules(calendar, buf);
    }

    protected java.lang.StringBuffer applyRules(java.util.Calendar calendar, java.lang.StringBuffer buf) {
        org.apache.commons.lang.time.FastDateFormat.Rule[] rules = mRules;
        int len = mRules.length;
        for (int i = 0; i < len; i++) {
            rules[i].appendTo(buf, calendar);
        }
        return buf;
    }

    public java.lang.Object parseObject(java.lang.String source, java.text.ParsePosition pos) {
        pos.setIndex(0);
        pos.setErrorIndex(0);
        return null;
    }

    public java.lang.String getPattern() {
        return mPattern;
    }

    public java.util.TimeZone getTimeZone() {
        return mTimeZone;
    }

    public boolean getTimeZoneOverridesCalendar() {
        return mTimeZoneForced;
    }

    public java.util.Locale getLocale() {
        return mLocale;
    }

    public int getMaxLengthEstimate() {
        return mMaxLengthEstimate;
    }

    public boolean equals(java.lang.Object obj) {
        if ((obj instanceof org.apache.commons.lang.time.FastDateFormat) == false) {
            return false;
        }
        org.apache.commons.lang.time.FastDateFormat other = ((org.apache.commons.lang.time.FastDateFormat) (obj));
        if (((((((mPattern) == (other.mPattern)) || (mPattern.equals(other.mPattern))) && (((mTimeZone) == (other.mTimeZone)) || (mTimeZone.equals(other.mTimeZone)))) && (((mLocale) == (other.mLocale)) || (mLocale.equals(other.mLocale)))) && ((mTimeZoneForced) == (other.mTimeZoneForced))) && ((mLocaleForced) == (other.mLocaleForced))) {
            return true;
        }
        return false;
    }

    public int hashCode() {
        int total = 0;
        total += mPattern.hashCode();
        total += mTimeZone.hashCode();
        total += (mTimeZoneForced) ? 1 : 0;
        total += mLocale.hashCode();
        total += (mLocaleForced) ? 1 : 0;
        return total;
    }

    public java.lang.String toString() {
        return ("FastDateFormat[" + (mPattern)) + "]";
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
        in.defaultReadObject();
        init();
    }

    private interface Rule {
        int estimateLength();

        void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar);
    }

    private interface NumberRule extends org.apache.commons.lang.time.FastDateFormat.Rule {
        void appendTo(java.lang.StringBuffer buffer, int value);
    }

    private static class CharacterLiteral implements org.apache.commons.lang.time.FastDateFormat.Rule {
        private final char mValue;

        CharacterLiteral(char value) {
            mValue = value;
        }

        public int estimateLength() {
            return 1;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            buffer.append(mValue);
        }
    }

    private static class StringLiteral implements org.apache.commons.lang.time.FastDateFormat.Rule {
        private final java.lang.String mValue;

        StringLiteral(java.lang.String value) {
            mValue = value;
        }

        public int estimateLength() {
            return mValue.length();
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            buffer.append(mValue);
        }
    }

    private static class TextField implements org.apache.commons.lang.time.FastDateFormat.Rule {
        private final int mField;

        private final java.lang.String[] mValues;

        TextField(int field, java.lang.String[] values) {
            mField = field;
            mValues = values;
        }

        public int estimateLength() {
            int max = 0;
            for (int i = mValues.length; (--i) >= 0;) {
                int len = mValues[i].length();
                if (len > max) {
                    max = len;
                }
            }
            return max;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            buffer.append(mValues[calendar.get(mField)]);
        }
    }

    private static class UnpaddedNumberField implements org.apache.commons.lang.time.FastDateFormat.NumberRule {
        static final org.apache.commons.lang.time.FastDateFormat.UnpaddedNumberField INSTANCE_YEAR = new org.apache.commons.lang.time.FastDateFormat.UnpaddedNumberField(java.util.Calendar.YEAR);

        private final int mField;

        UnpaddedNumberField(int field) {
            mField = field;
        }

        public int estimateLength() {
            return 4;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            appendTo(buffer, calendar.get(mField));
        }

        public final void appendTo(java.lang.StringBuffer buffer, int value) {
            if (value < 10) {
                buffer.append(((char) (value + '0')));
            }else
                if (value < 100) {
                    buffer.append(((char) ((value / 10) + '0')));
                    buffer.append(((char) ((value % 10) + '0')));
                }else {
                    buffer.append(java.lang.Integer.toString(value));
                }

        }
    }

    private static class UnpaddedMonthField implements org.apache.commons.lang.time.FastDateFormat.NumberRule {
        static final org.apache.commons.lang.time.FastDateFormat.UnpaddedMonthField INSTANCE = new org.apache.commons.lang.time.FastDateFormat.UnpaddedMonthField();

        UnpaddedMonthField() {
            super();
        }

        public int estimateLength() {
            return 2;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            appendTo(buffer, ((calendar.get(java.util.Calendar.MONTH)) + 1));
        }

        public final void appendTo(java.lang.StringBuffer buffer, int value) {
            if (value < 10) {
                buffer.append(((char) (value + '0')));
            }else {
                buffer.append(((char) ((value / 10) + '0')));
                buffer.append(((char) ((value % 10) + '0')));
            }
        }
    }

    private static class PaddedNumberField implements org.apache.commons.lang.time.FastDateFormat.NumberRule {
        private final int mField;

        private final int mSize;

        PaddedNumberField(int field, int size) {
            if (size < 3) {
                throw new java.lang.IllegalArgumentException();
            }
            mField = field;
            mSize = size;
        }

        public int estimateLength() {
            return 4;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            appendTo(buffer, calendar.get(mField));
        }

        public final void appendTo(java.lang.StringBuffer buffer, int value) {
            if (value < 100) {
                for (int i = mSize; (--i) >= 2;) {
                    buffer.append('0');
                }
                buffer.append(((char) ((value / 10) + '0')));
                buffer.append(((char) ((value % 10) + '0')));
            }else {
                int digits;
                if (value < 1000) {
                    digits = 3;
                }else {
                    org.apache.commons.lang.Validate.isTrue((value > (-1)), "Negative values should not be possible", value);
                    digits = java.lang.Integer.toString(value).length();
                }
                for (int i = mSize; (--i) >= digits;) {
                    buffer.append('0');
                }
                buffer.append(java.lang.Integer.toString(value));
            }
        }
    }

    private static class TwoDigitNumberField implements org.apache.commons.lang.time.FastDateFormat.NumberRule {
        private final int mField;

        TwoDigitNumberField(int field) {
            mField = field;
        }

        public int estimateLength() {
            return 2;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            appendTo(buffer, calendar.get(mField));
        }

        public final void appendTo(java.lang.StringBuffer buffer, int value) {
            if (value < 100) {
                buffer.append(((char) ((value / 10) + '0')));
                buffer.append(((char) ((value % 10) + '0')));
            }else {
                buffer.append(java.lang.Integer.toString(value));
            }
        }
    }

    private static class TwoDigitYearField implements org.apache.commons.lang.time.FastDateFormat.NumberRule {
        static final org.apache.commons.lang.time.FastDateFormat.TwoDigitYearField INSTANCE = new org.apache.commons.lang.time.FastDateFormat.TwoDigitYearField();

        TwoDigitYearField() {
            super();
        }

        public int estimateLength() {
            return 2;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            appendTo(buffer, ((calendar.get(java.util.Calendar.YEAR)) % 100));
        }

        public final void appendTo(java.lang.StringBuffer buffer, int value) {
            buffer.append(((char) ((value / 10) + '0')));
            buffer.append(((char) ((value % 10) + '0')));
        }
    }

    private static class TwoDigitMonthField implements org.apache.commons.lang.time.FastDateFormat.NumberRule {
        static final org.apache.commons.lang.time.FastDateFormat.TwoDigitMonthField INSTANCE = new org.apache.commons.lang.time.FastDateFormat.TwoDigitMonthField();

        TwoDigitMonthField() {
            super();
        }

        public int estimateLength() {
            return 2;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            appendTo(buffer, ((calendar.get(java.util.Calendar.MONTH)) + 1));
        }

        public final void appendTo(java.lang.StringBuffer buffer, int value) {
            buffer.append(((char) ((value / 10) + '0')));
            buffer.append(((char) ((value % 10) + '0')));
        }
    }

    private static class TwelveHourField implements org.apache.commons.lang.time.FastDateFormat.NumberRule {
        private final org.apache.commons.lang.time.FastDateFormat.NumberRule mRule;

        TwelveHourField(org.apache.commons.lang.time.FastDateFormat.NumberRule rule) {
            mRule = rule;
        }

        public int estimateLength() {
            return mRule.estimateLength();
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            int value = calendar.get(java.util.Calendar.HOUR);
            if (value == 0) {
                value = (calendar.getLeastMaximum(java.util.Calendar.HOUR)) + 1;
            }
            mRule.appendTo(buffer, value);
        }

        public void appendTo(java.lang.StringBuffer buffer, int value) {
            mRule.appendTo(buffer, value);
        }
    }

    private static class TwentyFourHourField implements org.apache.commons.lang.time.FastDateFormat.NumberRule {
        private final org.apache.commons.lang.time.FastDateFormat.NumberRule mRule;

        TwentyFourHourField(org.apache.commons.lang.time.FastDateFormat.NumberRule rule) {
            mRule = rule;
        }

        public int estimateLength() {
            return mRule.estimateLength();
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            int value = calendar.get(java.util.Calendar.HOUR_OF_DAY);
            if (value == 0) {
                value = (calendar.getMaximum(java.util.Calendar.HOUR_OF_DAY)) + 1;
            }
            mRule.appendTo(buffer, value);
        }

        public void appendTo(java.lang.StringBuffer buffer, int value) {
            mRule.appendTo(buffer, value);
        }
    }

    private static class TimeZoneNameRule implements org.apache.commons.lang.time.FastDateFormat.Rule {
        private final java.util.TimeZone mTimeZone;

        private final boolean mTimeZoneForced;

        private final java.util.Locale mLocale;

        private final int mStyle;

        private final java.lang.String mStandard;

        private final java.lang.String mDaylight;

        TimeZoneNameRule(java.util.TimeZone timeZone, boolean timeZoneForced, java.util.Locale locale, int style) {
            mTimeZone = timeZone;
            mTimeZoneForced = timeZoneForced;
            mLocale = locale;
            mStyle = style;
            if (timeZoneForced) {
                mStandard = org.apache.commons.lang.time.FastDateFormat.getTimeZoneDisplay(timeZone, false, style, locale);
                mDaylight = org.apache.commons.lang.time.FastDateFormat.getTimeZoneDisplay(timeZone, true, style, locale);
            }else {
                mStandard = null;
                mDaylight = null;
            }
        }

        public int estimateLength() {
            if (mTimeZoneForced) {
                return java.lang.Math.max(mStandard.length(), mDaylight.length());
            }else
                if ((mStyle) == (java.util.TimeZone.SHORT)) {
                    return 4;
                }else {
                    return 40;
                }

        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            if (mTimeZoneForced) {
                if ((mTimeZone.useDaylightTime()) && ((calendar.get(java.util.Calendar.DST_OFFSET)) != 0)) {
                    buffer.append(mDaylight);
                }else {
                    buffer.append(mStandard);
                }
            }else {
                java.util.TimeZone timeZone = calendar.getTimeZone();
                if ((timeZone.useDaylightTime()) && ((calendar.get(java.util.Calendar.DST_OFFSET)) != 0)) {
                    buffer.append(org.apache.commons.lang.time.FastDateFormat.getTimeZoneDisplay(timeZone, true, mStyle, mLocale));
                }else {
                    buffer.append(org.apache.commons.lang.time.FastDateFormat.getTimeZoneDisplay(timeZone, false, mStyle, mLocale));
                }
            }
        }
    }

    private static class TimeZoneNumberRule implements org.apache.commons.lang.time.FastDateFormat.Rule {
        static final org.apache.commons.lang.time.FastDateFormat.TimeZoneNumberRule INSTANCE_COLON = new org.apache.commons.lang.time.FastDateFormat.TimeZoneNumberRule(true);

        static final org.apache.commons.lang.time.FastDateFormat.TimeZoneNumberRule INSTANCE_NO_COLON = new org.apache.commons.lang.time.FastDateFormat.TimeZoneNumberRule(false);

        final boolean mColon;

        TimeZoneNumberRule(boolean colon) {
            mColon = colon;
        }

        public int estimateLength() {
            return 5;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            int offset = (calendar.get(java.util.Calendar.ZONE_OFFSET)) + (calendar.get(java.util.Calendar.DST_OFFSET));
            if (offset < 0) {
                buffer.append('-');
                offset = -offset;
            }else {
                buffer.append('+');
            }
            int hours = offset / ((60 * 60) * 1000);
            buffer.append(((char) ((hours / 10) + '0')));
            buffer.append(((char) ((hours % 10) + '0')));
            if (mColon) {
                buffer.append(':');
            }
            int minutes = (offset / (60 * 1000)) - (60 * hours);
            buffer.append(((char) ((minutes / 10) + '0')));
            buffer.append(((char) ((minutes % 10) + '0')));
        }
    }

    private static class TimeZoneDisplayKey {
        private final java.util.TimeZone mTimeZone;

        private final int mStyle;

        private final java.util.Locale mLocale;

        TimeZoneDisplayKey(java.util.TimeZone timeZone, boolean daylight, int style, java.util.Locale locale) {
            mTimeZone = timeZone;
            if (daylight) {
                style |= -2147483648;
            }
            mStyle = style;
            mLocale = locale;
        }

        public int hashCode() {
            return ((mStyle) * 31) + (mLocale.hashCode());
        }

        public boolean equals(java.lang.Object obj) {
            if ((this) == obj) {
                return true;
            }
            if (obj instanceof org.apache.commons.lang.time.FastDateFormat.TimeZoneDisplayKey) {
                org.apache.commons.lang.time.FastDateFormat.TimeZoneDisplayKey other = ((org.apache.commons.lang.time.FastDateFormat.TimeZoneDisplayKey) (obj));
                return ((mTimeZone.equals(other.mTimeZone)) && ((mStyle) == (other.mStyle))) && (mLocale.equals(other.mLocale));
            }
            return false;
        }
    }

    private static class Pair {
        private final java.lang.Object mObj1;

        private final java.lang.Object mObj2;

        public Pair(java.lang.Object obj1, java.lang.Object obj2) {
            mObj1 = obj1;
            mObj2 = obj2;
        }

        public boolean equals(java.lang.Object obj) {
            if ((this) == obj) {
                return true;
            }
            if (!(obj instanceof org.apache.commons.lang.time.FastDateFormat.Pair)) {
                return false;
            }
            org.apache.commons.lang.time.FastDateFormat.Pair key = ((org.apache.commons.lang.time.FastDateFormat.Pair) (obj));
            return ((mObj1) == null ? (key.mObj1) == null : mObj1.equals(key.mObj1)) && ((mObj2) == null ? (key.mObj2) == null : mObj2.equals(key.mObj2));
        }

        public int hashCode() {
            return ((mObj1) == null ? 0 : mObj1.hashCode()) + ((mObj2) == null ? 0 : mObj2.hashCode());
        }

        public java.lang.String toString() {
            return ((("[" + (mObj1)) + ':') + (mObj2)) + ']';
        }
    }
}
18:38:46.725 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
18:38:46.725 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:38:46.741 [pool-56-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (13 ms)
<> Total tests run: 13
<> Ignored tests: 0
<> Failed tests: 2
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
18:38:47.469 [pool-57-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (4 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:38:47.472 [pool-58-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
18:38:47.474 [pool-59-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:38:47.475 [pool-60-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

18:38:47.476 [pool-55-thread-1] DEBUG tests.output - Failing tests with false: 
[test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>, test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>]
18:38:47.476 [pool-55-thread-1] DEBUG tests.output - Failing tests with true: 
[test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>, test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>]
18:38:47.477 [pool-55-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.lang.time.FastDateFormat:672.
18:38:47.477 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #13
18:38:47.477 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang.time.FastDateFormat:485 which is executed by 1 tests
-1899260190
18:38:47.572 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #14
18:38:47.572 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang.time.FastDateFormat:483 which is executed by 1 tests
-1899260190
18:38:47.669 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #15
18:38:47.670 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang.time.FastDateFormat:479 which is executed by 1 tests
-1899260190
18:38:47.765 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:38:47.780 [pool-62-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (12 ms)
<> Total tests run: 13
<> Ignored tests: 0
<> Failed tests: 2
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
18:38:48.677 [pool-63-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (3 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)

18:38:48.680 [pool-64-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
18:38:48.681 [pool-65-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:38:48.682 [pool-66-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

18:38:48.682 [pool-61-thread-1] DEBUG tests.output - Failing tests with false: 
[test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>]
18:38:48.682 [pool-61-thread-1] DEBUG tests.output - Failing tests with true: 
[test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>, test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>]
18:38:48.682 [pool-61-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.lang.time.FastDateFormat:479.
18:38:48.683 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #16
18:38:48.683 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang.time.FastDateFormat:478 which is executed by 1 tests
-1899260190
18:38:48.779 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:38:48.795 [pool-68-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (13 ms)
<> Total tests run: 13
<> Ignored tests: 0
<> Failed tests: 2
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
18:38:49.592 [pool-69-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (3 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)

java.lang.NullPointerException
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:164)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke(Method.java:498)
    at junit.framework.TestCase.runTest(TestCase.java:176)
18:38:49.594 [pool-70-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[null]
java.lang.NullPointerException    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:164)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke(Method.java:498)
    at junit.framework.TestCase.runTest(TestCase.java:176)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
18:38:49.595 [pool-71-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:38:49.597 [pool-72-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

18:38:49.598 [pool-67-thread-1] DEBUG tests.output - Failing tests with false: 
[test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>, test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest): null]
18:38:49.598 [pool-67-thread-1] DEBUG tests.output - Failing tests with true: 
[test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>, test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>]
18:38:49.598 [pool-67-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.lang.time.FastDateFormat:478.
18:38:49.598 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #17
18:38:49.598 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang.time.FastDateFormat:477 which is executed by 1 tests
-1899260190
18:38:49.709 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #18
18:38:49.710 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang.time.FastDateFormat:475 which is executed by 1 tests
-1899260190
18:38:49.810 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #19
18:38:49.810 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang.time.FastDateFormat:472 which is executed by 1 tests
-1899260190
18:38:49.908 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:38:49.923 [pool-74-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (12 ms)
<> Total tests run: 13
<> Ignored tests: 0
<> Failed tests: 2
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
18:38:50.707 [pool-75-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (4 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)

java.lang.NullPointerException
    at java.util.concurrent.ConcurrentHashMap.get(ConcurrentHashMap.java:936)
    at sun.util.locale.provider.LocaleProviderAdapter.getAdapter(LocaleProviderAdapter.java:245)
    at java.text.DateFormat.get(DateFormat.java:797)
    at java.text.DateFormat.getDateTimeInstance(DateFormat.java:586)
    at org.apache.commons.lang.time.FastDateFormat.getDateTimeInstance(FastDateFormat.java:195)
    at org.apache.commons.lang.time.FastDateFormat.getDateTimeInstance(FastDateFormat.java:141)
18:38:50.709 [pool-76-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[null]
java.lang.NullPointerException    at java.util.concurrent.ConcurrentHashMap.get(ConcurrentHashMap.java:936)
    at sun.util.locale.provider.LocaleProviderAdapter.getAdapter(LocaleProviderAdapter.java:245)
    at java.text.DateFormat.get(DateFormat.java:797)
    at java.text.DateFormat.getDateTimeInstance(DateFormat.java:586)
    at org.apache.commons.lang.time.FastDateFormat.getDateTimeInstance(FastDateFormat.java:195)
    at org.apache.commons.lang.time.FastDateFormat.getDateTimeInstance(FastDateFormat.java:141)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
18:38:50.710 [pool-77-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:38:50.711 [pool-78-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

18:38:50.712 [pool-73-thread-1] DEBUG tests.output - Failing tests with false: 
[test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>, test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest): null]
18:38:50.712 [pool-73-thread-1] DEBUG tests.output - Failing tests with true: 
[test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>, test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>]
18:38:50.712 [pool-73-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.lang.time.FastDateFormat:472.
18:38:50.712 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #20
18:38:50.712 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang.time.FastDateFormat:471 which is executed by 1 tests
-1899260190
18:38:50.813 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:38:50.828 [pool-80-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (11 ms)
<> Total tests run: 13
<> Ignored tests: 0
<> Failed tests: 2
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
18:38:51.605 [pool-81-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (4 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)

java.lang.NullPointerException
    at java.util.concurrent.ConcurrentHashMap.get(ConcurrentHashMap.java:936)
    at sun.util.locale.provider.LocaleProviderAdapter.getAdapter(LocaleProviderAdapter.java:245)
    at java.text.DateFormat.get(DateFormat.java:797)
    at java.text.DateFormat.getDateTimeInstance(DateFormat.java:586)
    at org.apache.commons.lang.time.FastDateFormat.getDateTimeInstance(FastDateFormat.java:195)
    at org.apache.commons.lang.time.FastDateFormat.getDateTimeInstance(FastDateFormat.java:141)
18:38:51.607 [pool-82-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[null]
java.lang.NullPointerException    at java.util.concurrent.ConcurrentHashMap.get(ConcurrentHashMap.java:936)
    at sun.util.locale.provider.LocaleProviderAdapter.getAdapter(LocaleProviderAdapter.java:245)
    at java.text.DateFormat.get(DateFormat.java:797)
    at java.text.DateFormat.getDateTimeInstance(DateFormat.java:586)
    at org.apache.commons.lang.time.FastDateFormat.getDateTimeInstance(FastDateFormat.java:195)
    at org.apache.commons.lang.time.FastDateFormat.getDateTimeInstance(FastDateFormat.java:141)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
18:38:51.608 [pool-83-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:38:51.610 [pool-84-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

18:38:51.610 [pool-79-thread-1] DEBUG tests.output - Failing tests with false: 
[test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>, test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest): null]
18:38:51.610 [pool-79-thread-1] DEBUG tests.output - Failing tests with true: 
[test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>, test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>]
18:38:51.610 [pool-79-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.lang.time.FastDateFormat:471.
18:38:51.610 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:38:51.625 [pool-86-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (12 ms)
<> Total tests run: 13
<> Ignored tests: 0
<> Failed tests: 2
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
18:38:52.414 [pool-87-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (4 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)

java.lang.NullPointerException
    at java.util.concurrent.ConcurrentHashMap.get(ConcurrentHashMap.java:936)
    at sun.util.locale.provider.LocaleProviderAdapter.getAdapter(LocaleProviderAdapter.java:245)
    at java.text.DateFormat.get(DateFormat.java:797)
    at java.text.DateFormat.getDateTimeInstance(DateFormat.java:586)
    at org.apache.commons.lang.time.FastDateFormat.getDateTimeInstance(FastDateFormat.java:195)
    at org.apache.commons.lang.time.FastDateFormat.getDateTimeInstance(FastDateFormat.java:141)
18:38:52.416 [pool-88-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[null]
java.lang.NullPointerException    at java.util.concurrent.ConcurrentHashMap.get(ConcurrentHashMap.java:936)
    at sun.util.locale.provider.LocaleProviderAdapter.getAdapter(LocaleProviderAdapter.java:245)
    at java.text.DateFormat.get(DateFormat.java:797)
    at java.text.DateFormat.getDateTimeInstance(DateFormat.java:586)
    at org.apache.commons.lang.time.FastDateFormat.getDateTimeInstance(FastDateFormat.java:195)
    at org.apache.commons.lang.time.FastDateFormat.getDateTimeInstance(FastDateFormat.java:141)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
18:38:52.417 [pool-89-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:38:52.418 [pool-90-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

18:38:52.419 [pool-85-thread-1] DEBUG tests.output - Failing tests with false: 
[test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>, test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest): null]
18:38:52.419 [pool-85-thread-1] DEBUG tests.output - Failing tests with true: 
[test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>, test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>]
18:38:52.419 [pool-85-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.lang.time.FastDateFormat:471.
18:38:52.419 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #21
18:38:52.419 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang.time.FastDateFormat:470 which is executed by 1 tests
-1899260190
18:38:52.513 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:38:52.527 [pool-92-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (11 ms)
<> Total tests run: 13
<> Ignored tests: 0
<> Failed tests: 2
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
18:38:53.366 [pool-93-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (4 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)

java.lang.NullPointerException
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:164)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke(Method.java:498)
    at junit.framework.TestCase.runTest(TestCase.java:176)
18:38:53.368 [pool-94-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[null]
java.lang.NullPointerException    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:164)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke(Method.java:498)
    at junit.framework.TestCase.runTest(TestCase.java:176)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
18:38:53.375 [pool-95-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:38:53.378 [pool-96-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

18:38:53.378 [pool-91-thread-1] DEBUG tests.output - Failing tests with false: 
[test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>, test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest): null]
18:38:53.378 [pool-91-thread-1] DEBUG tests.output - Failing tests with true: 
[test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>, test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>]
18:38:53.378 [pool-91-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.lang.time.FastDateFormat:470.
18:38:53.378 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:38:53.392 [pool-98-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (11 ms)
<> Total tests run: 13
<> Ignored tests: 0
<> Failed tests: 2
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
18:38:54.179 [pool-99-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (4 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)

java.lang.NullPointerException
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:164)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke(Method.java:498)
    at junit.framework.TestCase.runTest(TestCase.java:176)
18:38:54.180 [pool-100-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[null]
java.lang.NullPointerException    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:164)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke(Method.java:498)
    at junit.framework.TestCase.runTest(TestCase.java:176)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
18:38:54.181 [pool-101-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)

18:38:54.183 [pool-102-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

18:38:54.183 [pool-97-thread-1] DEBUG tests.output - Failing tests with false: 
[test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>, test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest): null]
18:38:54.183 [pool-97-thread-1] DEBUG tests.output - Failing tests with true: 
[test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>]
18:38:54.183 [pool-97-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.lang.time.FastDateFormat:470.
18:38:54.183 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #22
18:38:54.184 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang.time.FastDateFormat:469 which is executed by 1 tests
-1899260190
18:38:54.277 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #23
18:38:54.277 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang.time.FastDateFormat:466 which is executed by 1 tests
-1899260190
18:38:54.377 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:38:54.391 [pool-104-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (11 ms)
<> Total tests run: 13
<> Ignored tests: 0
<> Failed tests: 2
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
18:38:55.160 [pool-105-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (4 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)

junit.framework.AssertionFailedError: expected same:<en_US> was not:<de_DE>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:165)
18:38:55.162 [pool-106-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<en_US> was not:<de_DE>]
junit.framework.AssertionFailedError: expected same:<en_US> was not:<de_DE>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:165)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
18:38:55.163 [pool-107-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)

junit.framework.AssertionFailedError: expected same:<en_US> was not:<de_DE>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:165)
18:38:55.164 [pool-108-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<en_US> was not:<de_DE>]
junit.framework.AssertionFailedError: expected same:<en_US> was not:<de_DE>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:165)

18:38:55.165 [pool-103-thread-1] DEBUG tests.output - Failing tests with false: 
[test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>, test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<en_US> was not:<de_DE>]
18:38:55.165 [pool-103-thread-1] DEBUG tests.output - Failing tests with true: 
[test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>, test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<en_US> was not:<de_DE>]
18:38:55.165 [pool-103-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.lang.time.FastDateFormat:466.
18:38:55.165 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #24
18:38:55.165 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang.time.FastDateFormat:465 which is executed by 1 tests
-1899260190
18:38:55.266 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:38:55.281 [pool-110-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (12 ms)
<> Total tests run: 13
<> Ignored tests: 0
<> Failed tests: 2
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
18:38:56.038 [pool-111-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (3 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)

junit.framework.AssertionFailedError: expected same:<en_US> was not:<de_DE>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:165)
18:38:56.041 [pool-112-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<en_US> was not:<de_DE>]
junit.framework.AssertionFailedError: expected same:<en_US> was not:<de_DE>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:165)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
18:38:56.042 [pool-113-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)

junit.framework.AssertionFailedError: expected same:<en_US> was not:<de_DE>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:165)
18:38:56.043 [pool-114-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<en_US> was not:<de_DE>]
junit.framework.AssertionFailedError: expected same:<en_US> was not:<de_DE>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:165)

18:38:56.044 [pool-109-thread-1] DEBUG tests.output - Failing tests with false: 
[test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>, test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<en_US> was not:<de_DE>]
18:38:56.044 [pool-109-thread-1] DEBUG tests.output - Failing tests with true: 
[test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>, test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<en_US> was not:<de_DE>]
18:38:56.044 [pool-109-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.lang.time.FastDateFormat:465.
18:38:56.044 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:38:56.056 [pool-116-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (10 ms)
<> Total tests run: 13
<> Ignored tests: 0
<> Failed tests: 2
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
18:38:56.817 [pool-117-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (3 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)

junit.framework.AssertionFailedError: expected same:<en_US> was not:<de_DE>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:165)
18:38:56.820 [pool-118-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<en_US> was not:<de_DE>]
junit.framework.AssertionFailedError: expected same:<en_US> was not:<de_DE>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:165)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
18:38:56.821 [pool-119-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:38:56.823 [pool-120-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

18:38:56.823 [pool-115-thread-1] DEBUG tests.output - Failing tests with false: 
[test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>, test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<en_US> was not:<de_DE>]
18:38:56.823 [pool-115-thread-1] DEBUG tests.output - Failing tests with true: 
[test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>, test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>]
18:38:56.823 [pool-115-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.lang.time.FastDateFormat:465.
18:38:56.823 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #25
18:38:56.823 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang.time.FastDateFormat:462 which is executed by 1 tests
-1899260190
18:38:56.927 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:38:56.942 [pool-122-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (12 ms)
<> Total tests run: 13
<> Ignored tests: 0
<> Failed tests: 2
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
18:38:57.724 [pool-123-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (4 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:38:57.726 [pool-124-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
18:38:57.727 [pool-125-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:38:57.729 [pool-126-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

18:38:57.729 [pool-121-thread-1] DEBUG tests.output - Failing tests with false: 
[test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>, test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>]
18:38:57.730 [pool-121-thread-1] DEBUG tests.output - Failing tests with true: 
[test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>, test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>]
18:38:57.730 [pool-121-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.lang.time.FastDateFormat:462.
18:38:57.730 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:38:57.744 [pool-128-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (12 ms)
<> Total tests run: 13
<> Ignored tests: 0
<> Failed tests: 2
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
18:38:58.534 [pool-129-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (4 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:38:58.536 [pool-130-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
18:38:58.537 [pool-131-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:38:58.538 [pool-132-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

18:38:58.538 [pool-127-thread-1] DEBUG tests.output - Failing tests with false: 
[test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>, test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>]
18:38:58.539 [pool-127-thread-1] DEBUG tests.output - Failing tests with true: 
[test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>, test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>]
18:38:58.539 [pool-127-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.lang.time.FastDateFormat:462.
18:38:58.539 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #26
18:38:58.539 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang.time.FastDateFormat:461 which is executed by 1 tests
-1899260190
18:38:58.651 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #27
18:38:58.651 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang.time.FastDateFormat:425 which is executed by 1 tests
-1899260190
18:38:58.743 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #28
18:38:58.743 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang.time.FastDateFormat:408 which is executed by 1 tests
-1899260190
18:38:58.834 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #29
18:38:58.834 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang.time.FastDateFormat$StringLiteral:1120 which is executed by 4 tests
-1899260190
18:38:58.929 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #30
18:38:58.929 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang.time.FastDateFormat:692 which is executed by 4 tests
-1899260190
18:38:59.020 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:38:59.038 [pool-134-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (15 ms)
<> Total tests run: 26
<> Ignored tests: 0
<> Failed tests: 4
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

java.lang.IllegalArgumentException: Illegal pattern component: ', 
    at org.apache.commons.lang.time.FastDateFormat.parsePattern(FastDateFormat.java:377)
    at org.apache.commons.lang.time.FastDateFormat.init(FastDateFormat.java:213)
    at org.apache.commons.lang.time.FastDateFormat.getInstance(FastDateFormat.java:60)
    at org.apache.commons.lang.time.FastDateFormat.getDateInstance(FastDateFormat.java:94)
    at org.apache.commons.lang.time.FastDateFormat.getDateInstance(FastDateFormat.java:71)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:139)
18:38:59.785 [pool-135-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (3 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[Illegal pattern component: ', ]
java.lang.IllegalArgumentException: Illegal pattern component: ',     at org.apache.commons.lang.time.FastDateFormat.parsePattern(FastDateFormat.java:377)
    at org.apache.commons.lang.time.FastDateFormat.init(FastDateFormat.java:213)
    at org.apache.commons.lang.time.FastDateFormat.getInstance(FastDateFormat.java:60)
    at org.apache.commons.lang.time.FastDateFormat.getDateInstance(FastDateFormat.java:94)
    at org.apache.commons.lang.time.FastDateFormat.getDateInstance(FastDateFormat.java:71)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:139)

java.lang.IllegalArgumentException: Illegal pattern component: ', 
    at org.apache.commons.lang.time.FastDateFormat.parsePattern(FastDateFormat.java:377)
    at org.apache.commons.lang.time.FastDateFormat.init(FastDateFormat.java:213)
    at org.apache.commons.lang.time.FastDateFormat.getInstance(FastDateFormat.java:60)
    at org.apache.commons.lang.time.FastDateFormat.getDateTimeInstance(FastDateFormat.java:168)
    at org.apache.commons.lang.time.FastDateFormat.getDateTimeInstance(FastDateFormat.java:145)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:159)
18:38:59.787 [pool-136-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[Illegal pattern component: ', ]
java.lang.IllegalArgumentException: Illegal pattern component: ',     at org.apache.commons.lang.time.FastDateFormat.parsePattern(FastDateFormat.java:377)
    at org.apache.commons.lang.time.FastDateFormat.init(FastDateFormat.java:213)
    at org.apache.commons.lang.time.FastDateFormat.getInstance(FastDateFormat.java:60)
    at org.apache.commons.lang.time.FastDateFormat.getDateTimeInstance(FastDateFormat.java:168)
    at org.apache.commons.lang.time.FastDateFormat.getDateTimeInstance(FastDateFormat.java:145)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:159)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
18:38:59.789 [pool-137-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:38:59.792 [pool-138-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

18:38:59.792 [pool-133-thread-1] DEBUG tests.output - Failing tests with false: 
[test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest): Illegal pattern component: ', , test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest): Illegal pattern component: ', ]
18:38:59.792 [pool-133-thread-1] DEBUG tests.output - Failing tests with true: 
[test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>, test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>]
18:38:59.792 [pool-133-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.lang.time.FastDateFormat:692.
18:38:59.792 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #31
18:38:59.792 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang.time.FastDateFormat:690 which is executed by 4 tests
-1899260190
18:38:59.906 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:38:59.922 [pool-140-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (13 ms)
<> Total tests run: 26
<> Ignored tests: 0
<> Failed tests: 4
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

18:39:00.670 [pool-139-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
FastDateFormat.java:379: error: variable rule might not have been initialized
            rules.add(rule);
                      ^
Note: FastDateFormat.java uses unchecked or unsafe operations.
Note: Recompile with -Xlint:unchecked for details.
18:39:01.235 [pool-139-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public class FastDateFormat extends java.text.Format {
    private static final long serialVersionUID = 1L;

    public static final int FULL = java.text.DateFormat.FULL;

    public static final int LONG = java.text.DateFormat.LONG;

    public static final int MEDIUM = java.text.DateFormat.MEDIUM;

    public static final int SHORT = java.text.DateFormat.SHORT;

    private static java.lang.String cDefaultPattern;

    private static java.util.Map cInstanceCache = new java.util.HashMap(7);

    private static java.util.Map cDateInstanceCache = new java.util.HashMap(7);

    private static java.util.Map cTimeInstanceCache = new java.util.HashMap(7);

    private static java.util.Map cDateTimeInstanceCache = new java.util.HashMap(7);

    private static java.util.Map cTimeZoneDisplayCache = new java.util.HashMap(7);

    private final java.lang.String mPattern;

    private final java.util.TimeZone mTimeZone;

    private final boolean mTimeZoneForced;

    private final java.util.Locale mLocale;

    private final boolean mLocaleForced;

    private transient org.apache.commons.lang.time.FastDateFormat.Rule[] mRules;

    private transient int mMaxLengthEstimate;

    public static org.apache.commons.lang.time.FastDateFormat getInstance() {
        return org.apache.commons.lang.time.FastDateFormat.getInstance(org.apache.commons.lang.time.FastDateFormat.getDefaultPattern(), null, null);
    }

    public static org.apache.commons.lang.time.FastDateFormat getInstance(java.lang.String pattern) {
        return org.apache.commons.lang.time.FastDateFormat.getInstance(pattern, null, null);
    }

    public static org.apache.commons.lang.time.FastDateFormat getInstance(java.lang.String pattern, java.util.TimeZone timeZone) {
        return org.apache.commons.lang.time.FastDateFormat.getInstance(pattern, timeZone, null);
    }

    public static org.apache.commons.lang.time.FastDateFormat getInstance(java.lang.String pattern, java.util.Locale locale) {
        return org.apache.commons.lang.time.FastDateFormat.getInstance(pattern, null, locale);
    }

    public static synchronized org.apache.commons.lang.time.FastDateFormat getInstance(java.lang.String pattern, java.util.TimeZone timeZone, java.util.Locale locale) {
        org.apache.commons.lang.time.FastDateFormat emptyFormat = new org.apache.commons.lang.time.FastDateFormat(pattern, timeZone, locale);
        org.apache.commons.lang.time.FastDateFormat format = ((org.apache.commons.lang.time.FastDateFormat) (org.apache.commons.lang.time.FastDateFormat.cInstanceCache.get(emptyFormat)));
        if (format == null) {
            format = emptyFormat;
            format.init();
            org.apache.commons.lang.time.FastDateFormat.cInstanceCache.put(format, format);
        }
        return format;
    }

    public static org.apache.commons.lang.time.FastDateFormat getDateInstance(int style) {
        return org.apache.commons.lang.time.FastDateFormat.getDateInstance(style, null, null);
    }

    public static org.apache.commons.lang.time.FastDateFormat getDateInstance(int style, java.util.Locale locale) {
        return org.apache.commons.lang.time.FastDateFormat.getDateInstance(style, null, locale);
    }

    public static org.apache.commons.lang.time.FastDateFormat getDateInstance(int style, java.util.TimeZone timeZone) {
        return org.apache.commons.lang.time.FastDateFormat.getDateInstance(style, timeZone, null);
    }

    public static synchronized org.apache.commons.lang.time.FastDateFormat getDateInstance(int style, java.util.TimeZone timeZone, java.util.Locale locale) {
        java.lang.Object key = new java.lang.Integer(style);
        if (timeZone != null) {
            key = new org.apache.commons.lang.time.FastDateFormat.Pair(key, timeZone);
        }
        if (locale != null) {
            key = new org.apache.commons.lang.time.FastDateFormat.Pair(key, locale);
        }
        org.apache.commons.lang.time.FastDateFormat format = ((org.apache.commons.lang.time.FastDateFormat) (org.apache.commons.lang.time.FastDateFormat.cDateInstanceCache.get(key)));
        if (format == null) {
            if (locale == null) {
                locale = java.util.Locale.getDefault();
            }
            try {
                java.text.SimpleDateFormat formatter = ((java.text.SimpleDateFormat) (java.text.DateFormat.getDateInstance(style, locale)));
                java.lang.String pattern = formatter.toPattern();
                format = org.apache.commons.lang.time.FastDateFormat.getInstance(pattern, timeZone, locale);
                org.apache.commons.lang.time.FastDateFormat.cDateInstanceCache.put(key, format);
            } catch (java.lang.ClassCastException ex) {
                throw new java.lang.IllegalArgumentException(("No date pattern for locale: " + locale));
            }
        }
        return format;
    }

    public static org.apache.commons.lang.time.FastDateFormat getTimeInstance(int style) {
        return org.apache.commons.lang.time.FastDateFormat.getTimeInstance(style, null, null);
    }

    public static org.apache.commons.lang.time.FastDateFormat getTimeInstance(int style, java.util.Locale locale) {
        return org.apache.commons.lang.time.FastDateFormat.getTimeInstance(style, null, locale);
    }

    public static org.apache.commons.lang.time.FastDateFormat getTimeInstance(int style, java.util.TimeZone timeZone) {
        return org.apache.commons.lang.time.FastDateFormat.getTimeInstance(style, timeZone, null);
    }

    public static synchronized org.apache.commons.lang.time.FastDateFormat getTimeInstance(int style, java.util.TimeZone timeZone, java.util.Locale locale) {
        java.lang.Object key = new java.lang.Integer(style);
        if (timeZone != null) {
            key = new org.apache.commons.lang.time.FastDateFormat.Pair(key, timeZone);
        }
        if (locale != null) {
            key = new org.apache.commons.lang.time.FastDateFormat.Pair(key, locale);
        }
        org.apache.commons.lang.time.FastDateFormat format = ((org.apache.commons.lang.time.FastDateFormat) (org.apache.commons.lang.time.FastDateFormat.cTimeInstanceCache.get(key)));
        if (format == null) {
            if (locale == null) {
                locale = java.util.Locale.getDefault();
            }
            try {
                java.text.SimpleDateFormat formatter = ((java.text.SimpleDateFormat) (java.text.DateFormat.getTimeInstance(style, locale)));
                java.lang.String pattern = formatter.toPattern();
                format = org.apache.commons.lang.time.FastDateFormat.getInstance(pattern, timeZone, locale);
                org.apache.commons.lang.time.FastDateFormat.cTimeInstanceCache.put(key, format);
            } catch (java.lang.ClassCastException ex) {
                throw new java.lang.IllegalArgumentException(("No date pattern for locale: " + locale));
            }
        }
        return format;
    }

    public static org.apache.commons.lang.time.FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle) {
        return org.apache.commons.lang.time.FastDateFormat.getDateTimeInstance(dateStyle, timeStyle, null, null);
    }

    public static org.apache.commons.lang.time.FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, java.util.Locale locale) {
        return org.apache.commons.lang.time.FastDateFormat.getDateTimeInstance(dateStyle, timeStyle, null, locale);
    }

    public static org.apache.commons.lang.time.FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, java.util.TimeZone timeZone) {
        return org.apache.commons.lang.time.FastDateFormat.getDateTimeInstance(dateStyle, timeStyle, timeZone, null);
    }

    public static synchronized org.apache.commons.lang.time.FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, java.util.TimeZone timeZone, java.util.Locale locale) {
        java.lang.Object key = new org.apache.commons.lang.time.FastDateFormat.Pair(new java.lang.Integer(dateStyle), new java.lang.Integer(timeStyle));
        if (timeZone != null) {
            key = new org.apache.commons.lang.time.FastDateFormat.Pair(key, timeZone);
        }
        if (locale != null) {
            key = new org.apache.commons.lang.time.FastDateFormat.Pair(key, locale);
        }
        org.apache.commons.lang.time.FastDateFormat format = ((org.apache.commons.lang.time.FastDateFormat) (org.apache.commons.lang.time.FastDateFormat.cDateTimeInstanceCache.get(key)));
        if (format == null) {
            if (locale == null) {
                locale = java.util.Locale.getDefault();
            }
            try {
                java.text.SimpleDateFormat formatter = ((java.text.SimpleDateFormat) (java.text.DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale)));
                java.lang.String pattern = formatter.toPattern();
                format = org.apache.commons.lang.time.FastDateFormat.getInstance(pattern, timeZone, locale);
                org.apache.commons.lang.time.FastDateFormat.cDateTimeInstanceCache.put(key, format);
            } catch (java.lang.ClassCastException ex) {
                throw new java.lang.IllegalArgumentException(("No date time pattern for locale: " + locale));
            }
        }
        return format;
    }

    static synchronized java.lang.String getTimeZoneDisplay(java.util.TimeZone tz, boolean daylight, int style, java.util.Locale locale) {
        java.lang.Object key = new org.apache.commons.lang.time.FastDateFormat.TimeZoneDisplayKey(tz, daylight, style, locale);
        java.lang.String value = ((java.lang.String) (org.apache.commons.lang.time.FastDateFormat.cTimeZoneDisplayCache.get(key)));
        if (value == null) {
            value = tz.getDisplayName(daylight, style, locale);
            org.apache.commons.lang.time.FastDateFormat.cTimeZoneDisplayCache.put(key, value);
        }
        return value;
    }

    private static synchronized java.lang.String getDefaultPattern() {
        if ((org.apache.commons.lang.time.FastDateFormat.cDefaultPattern) == null) {
            org.apache.commons.lang.time.FastDateFormat.cDefaultPattern = new java.text.SimpleDateFormat().toPattern();
        }
        return org.apache.commons.lang.time.FastDateFormat.cDefaultPattern;
    }

    protected FastDateFormat(java.lang.String pattern, java.util.TimeZone timeZone, java.util.Locale locale) {
        super();
        if (pattern == null) {
            throw new java.lang.IllegalArgumentException("The pattern must not be null");
        }
        mPattern = pattern;
        mTimeZoneForced = timeZone != null;
        if (timeZone == null) {
            timeZone = java.util.TimeZone.getDefault();
        }
        mTimeZone = timeZone;
        mLocaleForced = locale != null;
        if (locale == null) {
            locale = java.util.Locale.getDefault();
        }
        mLocale = locale;
    }

    protected void init() {
        java.util.List rulesList = parsePattern();
        mRules = ((org.apache.commons.lang.time.FastDateFormat.Rule[]) (rulesList.toArray(new org.apache.commons.lang.time.FastDateFormat.Rule[rulesList.size()])));
        int len = 0;
        for (int i = mRules.length; (--i) >= 0;) {
            len += mRules[i].estimateLength();
        }
        mMaxLengthEstimate = len;
    }

    protected java.util.List parsePattern() {
        java.text.DateFormatSymbols symbols = new java.text.DateFormatSymbols(mLocale);
        java.util.List rules = new java.util.ArrayList();
        java.lang.String[] ERAs = symbols.getEras();
        java.lang.String[] months = symbols.getMonths();
        java.lang.String[] shortMonths = symbols.getShortMonths();
        java.lang.String[] weekdays = symbols.getWeekdays();
        java.lang.String[] shortWeekdays = symbols.getShortWeekdays();
        java.lang.String[] AmPmStrings = symbols.getAmPmStrings();
        int length = mPattern.length();
        int[] indexRef = new int[1];
        for (int i = 0; i < length; i++) {
            indexRef[0] = i;
            java.lang.String token = parseToken(mPattern, indexRef);
            i = indexRef[0];
            int tokenLen = token.length();
            if (tokenLen == 0) {
                break;
            }
            org.apache.commons.lang.time.FastDateFormat.Rule rule;
            char c = token.charAt(0);
            switch (c) {
                case 'G' :
                    rule = new org.apache.commons.lang.time.FastDateFormat.TextField(java.util.Calendar.ERA, ERAs);
                    break;
                case 'y' :
                    if (tokenLen >= 4) {
                        rule = selectNumberRule(java.util.Calendar.YEAR, tokenLen);
                    }else {
                        rule = org.apache.commons.lang.time.FastDateFormat.TwoDigitYearField.INSTANCE;
                    }
                    break;
                case 'M' :
                    if (tokenLen >= 4) {
                        rule = new org.apache.commons.lang.time.FastDateFormat.TextField(java.util.Calendar.MONTH, months);
                    }else
                        if (tokenLen == 3) {
                            rule = new org.apache.commons.lang.time.FastDateFormat.TextField(java.util.Calendar.MONTH, shortMonths);
                        }else
                            if (tokenLen == 2) {
                                rule = org.apache.commons.lang.time.FastDateFormat.TwoDigitMonthField.INSTANCE;
                            }else {
                                rule = org.apache.commons.lang.time.FastDateFormat.UnpaddedMonthField.INSTANCE;
                            }


                    break;
                case 'd' :
                    rule = selectNumberRule(java.util.Calendar.DAY_OF_MONTH, tokenLen);
                    break;
                case 'h' :
                    rule = new org.apache.commons.lang.time.FastDateFormat.TwelveHourField(selectNumberRule(java.util.Calendar.HOUR, tokenLen));
                    break;
                case 'H' :
                    rule = selectNumberRule(java.util.Calendar.HOUR_OF_DAY, tokenLen);
                    break;
                case 'm' :
                    rule = selectNumberRule(java.util.Calendar.MINUTE, tokenLen);
                    break;
                case 's' :
                    rule = selectNumberRule(java.util.Calendar.SECOND, tokenLen);
                    break;
                case 'S' :
                    rule = selectNumberRule(java.util.Calendar.MILLISECOND, tokenLen);
                    break;
                case 'E' :
                    rule = new org.apache.commons.lang.time.FastDateFormat.TextField(java.util.Calendar.DAY_OF_WEEK, (tokenLen < 4 ? shortWeekdays : weekdays));
                    break;
                case 'D' :
                    rule = selectNumberRule(java.util.Calendar.DAY_OF_YEAR, tokenLen);
                    break;
                case 'F' :
                    rule = selectNumberRule(java.util.Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);
                    break;
                case 'w' :
                    rule = selectNumberRule(java.util.Calendar.WEEK_OF_YEAR, tokenLen);
                    break;
                case 'W' :
                    rule = selectNumberRule(java.util.Calendar.WEEK_OF_MONTH, tokenLen);
                    break;
                case 'a' :
                    rule = new org.apache.commons.lang.time.FastDateFormat.TextField(java.util.Calendar.AM_PM, AmPmStrings);
                    break;
                case 'k' :
                    rule = new org.apache.commons.lang.time.FastDateFormat.TwentyFourHourField(selectNumberRule(java.util.Calendar.HOUR_OF_DAY, tokenLen));
                    break;
                case 'K' :
                    rule = selectNumberRule(java.util.Calendar.HOUR, tokenLen);
                    break;
                case 'z' :
                    if (tokenLen >= 4) {
                        rule = new org.apache.commons.lang.time.FastDateFormat.TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, java.util.TimeZone.LONG);
                    }else {
                        rule = new org.apache.commons.lang.time.FastDateFormat.TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, java.util.TimeZone.SHORT);
                    }
                    break;
                case 'Z' :
                    if (tokenLen == 1) {
                        rule = org.apache.commons.lang.time.FastDateFormat.TimeZoneNumberRule.INSTANCE_NO_COLON;
                    }else {
                        rule = org.apache.commons.lang.time.FastDateFormat.TimeZoneNumberRule.INSTANCE_COLON;
                    }
                    break;
                case '\'' :
                    java.lang.String sub = token.substring(1);
                    if ((sub.length()) == 1) {
                        rule = new org.apache.commons.lang.time.FastDateFormat.CharacterLiteral(sub.charAt(0));
                    }else {
                        boolean spoonDefaultValue = false;
                        try {
                            spoonDefaultValue = true;
                        } catch (java.lang.Exception __NopolProcessorException) {
                        }
                        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                        if (fr.inria.lille.commons.trace.RuntimeValues.instance(26).isEnabled()) {
                            fr.inria.lille.commons.trace.RuntimeValues.instance(26).collectionStarts();
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(26).collectInput("shortMonths",shortMonths);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(26).collectInput("org.apache.commons.lang.time.FastDateFormat.this.mMaxLengthEstimate",org.apache.commons.lang.time.FastDateFormat.this.mMaxLengthEstimate);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(26).collectInput("org.apache.commons.lang.time.FastDateFormat.this.mTimeZoneForced",org.apache.commons.lang.time.FastDateFormat.this.mTimeZoneForced);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(26).collectInput("shortWeekdays",shortWeekdays);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(26).collectInput("rules",rules);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(26).collectInput("org.apache.commons.lang.time.FastDateFormat.MEDIUM",org.apache.commons.lang.time.FastDateFormat.MEDIUM);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(26).collectInput("symbols",symbols);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(26).collectInput("indexRef",indexRef);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(26).collectInput("org.apache.commons.lang.time.FastDateFormat.this.mRules",org.apache.commons.lang.time.FastDateFormat.this.mRules);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(26).collectInput("org.apache.commons.lang.time.FastDateFormat.this.mTimeZone",org.apache.commons.lang.time.FastDateFormat.this.mTimeZone);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(26).collectInput("org.apache.commons.lang.time.FastDateFormat.cTimeInstanceCache",org.apache.commons.lang.time.FastDateFormat.cTimeInstanceCache);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(26).collectInput("org.apache.commons.lang.time.FastDateFormat.this.mLocaleForced",org.apache.commons.lang.time.FastDateFormat.this.mLocaleForced);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(26).collectInput("ERAs",ERAs);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(26).collectInput("org.apache.commons.lang.time.FastDateFormat.this.mPattern",org.apache.commons.lang.time.FastDateFormat.this.mPattern);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(26).collectInput("org.apache.commons.lang.time.FastDateFormat.SHORT",org.apache.commons.lang.time.FastDateFormat.SHORT);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(26).collectInput("c",c);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(26).collectInput("months",months);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(26).collectInput("weekdays",weekdays);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(26).collectInput("org.apache.commons.lang.time.FastDateFormat.cDateInstanceCache",org.apache.commons.lang.time.FastDateFormat.cDateInstanceCache);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(26).collectInput("length",length);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(26).collectInput("org.apache.commons.lang.time.FastDateFormat.LONG",org.apache.commons.lang.time.FastDateFormat.LONG);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(26).collectInput("tokenLen",tokenLen);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(26).collectInput("org.apache.commons.lang.time.FastDateFormat.cInstanceCache",org.apache.commons.lang.time.FastDateFormat.cInstanceCache);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(26).collectInput("org.apache.commons.lang.time.FastDateFormat.this.mLocale",org.apache.commons.lang.time.FastDateFormat.this.mLocale);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(26).collectInput("token",token);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(26).collectInput("org.apache.commons.lang.time.FastDateFormat.cTimeZoneDisplayCache",org.apache.commons.lang.time.FastDateFormat.cTimeZoneDisplayCache);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(26).collectInput("AmPmStrings",AmPmStrings);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(26).collectInput("org.apache.commons.lang.time.FastDateFormat.cDateTimeInstanceCache",org.apache.commons.lang.time.FastDateFormat.cDateTimeInstanceCache);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(26).collectInput("org.apache.commons.lang.time.FastDateFormat.cDefaultPattern",org.apache.commons.lang.time.FastDateFormat.cDefaultPattern);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(26).collectInput("org.apache.commons.lang.time.FastDateFormat.FULL",org.apache.commons.lang.time.FastDateFormat.FULL);} catch (Exception ex1) {ex1.printStackTrace();};
                            fr.inria.lille.commons.trace.RuntimeValues.instance(26).collectOutput(runtimeAngelicValue);
                            fr.inria.lille.commons.trace.RuntimeValues.instance(26).collectionEnds();
                        }
                        if (runtimeAngelicValue)
                            rule = new org.apache.commons.lang.time.FastDateFormat.StringLiteral(sub);

                    }
                    break;
                default :
                    throw new java.lang.IllegalArgumentException(("Illegal pattern component: " + token));
            }
            rules.add(rule);
        }
        return rules;
    }

    protected java.lang.String parseToken(java.lang.String pattern, int[] indexRef) {
        java.lang.StringBuffer buf = new java.lang.StringBuffer();
        int i = indexRef[0];
        int length = pattern.length();
        char c = pattern.charAt(i);
        if (((c >= 'A') && (c <= 'Z')) || ((c >= 'a') && (c <= 'z'))) {
            buf.append(c);
            while ((i + 1) < length) {
                char peek = pattern.charAt((i + 1));
                if (peek == c) {
                    buf.append(c);
                    i++;
                }else {
                    break;
                }
            } 
        }else {
            buf.append('\'');
            boolean inLiteral = false;
            for (; i < length; i++) {
                c = pattern.charAt(i);
                if (c == '\'') {
                    if (((i + 1) < length) && ((pattern.charAt((i + 1))) == '\'')) {
                        i++;
                        buf.append(c);
                    }else {
                        inLiteral = !inLiteral;
                    }
                }else
                    if ((!inLiteral) && (((c >= 'A') && (c <= 'Z')) || ((c >= 'a') && (c <= 'z')))) {
                        i--;
                        break;
                    }else {
                        buf.append(c);
                    }

            }
        }
        indexRef[0] = i;
        return buf.toString();
    }

    protected org.apache.commons.lang.time.FastDateFormat.NumberRule selectNumberRule(int field, int padding) {
        switch (padding) {
            case 1 :
                return new org.apache.commons.lang.time.FastDateFormat.UnpaddedNumberField(field);
            case 2 :
                return new org.apache.commons.lang.time.FastDateFormat.TwoDigitNumberField(field);
            default :
                return new org.apache.commons.lang.time.FastDateFormat.PaddedNumberField(field, padding);
        }
    }

    public java.lang.StringBuffer format(java.lang.Object obj, java.lang.StringBuffer toAppendTo, java.text.FieldPosition pos) {
        if (obj instanceof java.util.Date) {
            return format(((java.util.Date) (obj)), toAppendTo);
        }else
            if (obj instanceof java.util.Calendar) {
                return format(((java.util.Calendar) (obj)), toAppendTo);
            }else
                if (obj instanceof java.lang.Long) {
                    return format(((java.lang.Long) (obj)).longValue(), toAppendTo);
                }else {
                    throw new java.lang.IllegalArgumentException(("Unknown class: " + (obj == null ? "<null>" : obj.getClass().getName())));
                }


    }

    public java.lang.String format(long millis) {
        return format(new java.util.Date(millis));
    }

    public java.lang.String format(java.util.Date date) {
        java.util.Calendar c = new java.util.GregorianCalendar(mTimeZone);
        c.setTime(date);
        return applyRules(c, new java.lang.StringBuffer(mMaxLengthEstimate)).toString();
    }

    public java.lang.String format(java.util.Calendar calendar) {
        return format(calendar, new java.lang.StringBuffer(mMaxLengthEstimate)).toString();
    }

    public java.lang.StringBuffer format(long millis, java.lang.StringBuffer buf) {
        return format(new java.util.Date(millis), buf);
    }

    public java.lang.StringBuffer format(java.util.Date date, java.lang.StringBuffer buf) {
        java.util.Calendar c = new java.util.GregorianCalendar(mTimeZone);
        c.setTime(date);
        return applyRules(c, buf);
    }

    public java.lang.StringBuffer format(java.util.Calendar calendar, java.lang.StringBuffer buf) {
        if (mTimeZoneForced) {
            calendar = ((java.util.Calendar) (calendar.clone()));
            calendar.setTimeZone(mTimeZone);
        }
        return applyRules(calendar, buf);
    }

    protected java.lang.StringBuffer applyRules(java.util.Calendar calendar, java.lang.StringBuffer buf) {
        org.apache.commons.lang.time.FastDateFormat.Rule[] rules = mRules;
        int len = mRules.length;
        for (int i = 0; i < len; i++) {
            rules[i].appendTo(buf, calendar);
        }
        return buf;
    }

    public java.lang.Object parseObject(java.lang.String source, java.text.ParsePosition pos) {
        pos.setIndex(0);
        pos.setErrorIndex(0);
        return null;
    }

    public java.lang.String getPattern() {
        return mPattern;
    }

    public java.util.TimeZone getTimeZone() {
        return mTimeZone;
    }

    public boolean getTimeZoneOverridesCalendar() {
        return mTimeZoneForced;
    }

    public java.util.Locale getLocale() {
        return mLocale;
    }

    public int getMaxLengthEstimate() {
        return mMaxLengthEstimate;
    }

    public boolean equals(java.lang.Object obj) {
        if ((obj instanceof org.apache.commons.lang.time.FastDateFormat) == false) {
            return false;
        }
        org.apache.commons.lang.time.FastDateFormat other = ((org.apache.commons.lang.time.FastDateFormat) (obj));
        if (((((((mPattern) == (other.mPattern)) || (mPattern.equals(other.mPattern))) && (((mTimeZone) == (other.mTimeZone)) || (mTimeZone.equals(other.mTimeZone)))) && (((mLocale) == (other.mLocale)) || (mLocale.equals(other.mLocale)))) && ((mTimeZoneForced) == (other.mTimeZoneForced))) && ((mLocaleForced) == (other.mLocaleForced))) {
            return true;
        }
        return false;
    }

    public int hashCode() {
        int total = 0;
        total += mPattern.hashCode();
        total += mTimeZone.hashCode();
        total += (mTimeZoneForced) ? 1 : 0;
        total += mLocale.hashCode();
        total += (mLocaleForced) ? 1 : 0;
        return total;
    }

    public java.lang.String toString() {
        return ("FastDateFormat[" + (mPattern)) + "]";
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
        in.defaultReadObject();
        init();
    }

    private interface Rule {
        int estimateLength();

        void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar);
    }

    private interface NumberRule extends org.apache.commons.lang.time.FastDateFormat.Rule {
        void appendTo(java.lang.StringBuffer buffer, int value);
    }

    private static class CharacterLiteral implements org.apache.commons.lang.time.FastDateFormat.Rule {
        private final char mValue;

        CharacterLiteral(char value) {
            mValue = value;
        }

        public int estimateLength() {
            return 1;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            buffer.append(mValue);
        }
    }

    private static class StringLiteral implements org.apache.commons.lang.time.FastDateFormat.Rule {
        private final java.lang.String mValue;

        StringLiteral(java.lang.String value) {
            mValue = value;
        }

        public int estimateLength() {
            return mValue.length();
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            buffer.append(mValue);
        }
    }

    private static class TextField implements org.apache.commons.lang.time.FastDateFormat.Rule {
        private final int mField;

        private final java.lang.String[] mValues;

        TextField(int field, java.lang.String[] values) {
            mField = field;
            mValues = values;
        }

        public int estimateLength() {
            int max = 0;
            for (int i = mValues.length; (--i) >= 0;) {
                int len = mValues[i].length();
                if (len > max) {
                    max = len;
                }
            }
            return max;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            buffer.append(mValues[calendar.get(mField)]);
        }
    }

    private static class UnpaddedNumberField implements org.apache.commons.lang.time.FastDateFormat.NumberRule {
        static final org.apache.commons.lang.time.FastDateFormat.UnpaddedNumberField INSTANCE_YEAR = new org.apache.commons.lang.time.FastDateFormat.UnpaddedNumberField(java.util.Calendar.YEAR);

        private final int mField;

        UnpaddedNumberField(int field) {
            mField = field;
        }

        public int estimateLength() {
            return 4;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            appendTo(buffer, calendar.get(mField));
        }

        public final void appendTo(java.lang.StringBuffer buffer, int value) {
            if (value < 10) {
                buffer.append(((char) (value + '0')));
            }else
                if (value < 100) {
                    buffer.append(((char) ((value / 10) + '0')));
                    buffer.append(((char) ((value % 10) + '0')));
                }else {
                    buffer.append(java.lang.Integer.toString(value));
                }

        }
    }

    private static class UnpaddedMonthField implements org.apache.commons.lang.time.FastDateFormat.NumberRule {
        static final org.apache.commons.lang.time.FastDateFormat.UnpaddedMonthField INSTANCE = new org.apache.commons.lang.time.FastDateFormat.UnpaddedMonthField();

        UnpaddedMonthField() {
            super();
        }

        public int estimateLength() {
            return 2;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            appendTo(buffer, ((calendar.get(java.util.Calendar.MONTH)) + 1));
        }

        public final void appendTo(java.lang.StringBuffer buffer, int value) {
            if (value < 10) {
                buffer.append(((char) (value + '0')));
            }else {
                buffer.append(((char) ((value / 10) + '0')));
                buffer.append(((char) ((value % 10) + '0')));
            }
        }
    }

    private static class PaddedNumberField implements org.apache.commons.lang.time.FastDateFormat.NumberRule {
        private final int mField;

        private final int mSize;

        PaddedNumberField(int field, int size) {
            if (size < 3) {
                throw new java.lang.IllegalArgumentException();
            }
            mField = field;
            mSize = size;
        }

        public int estimateLength() {
            return 4;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            appendTo(buffer, calendar.get(mField));
        }

        public final void appendTo(java.lang.StringBuffer buffer, int value) {
            if (value < 100) {
                for (int i = mSize; (--i) >= 2;) {
                    buffer.append('0');
                }
                buffer.append(((char) ((value / 10) + '0')));
                buffer.append(((char) ((value % 10) + '0')));
            }else {
                int digits;
                if (value < 1000) {
                    digits = 3;
                }else {
                    org.apache.commons.lang.Validate.isTrue((value > (-1)), "Negative values should not be possible", value);
                    digits = java.lang.Integer.toString(value).length();
                }
                for (int i = mSize; (--i) >= digits;) {
                    buffer.append('0');
                }
                buffer.append(java.lang.Integer.toString(value));
            }
        }
    }

    private static class TwoDigitNumberField implements org.apache.commons.lang.time.FastDateFormat.NumberRule {
        private final int mField;

        TwoDigitNumberField(int field) {
            mField = field;
        }

        public int estimateLength() {
            return 2;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            appendTo(buffer, calendar.get(mField));
        }

        public final void appendTo(java.lang.StringBuffer buffer, int value) {
            if (value < 100) {
                buffer.append(((char) ((value / 10) + '0')));
                buffer.append(((char) ((value % 10) + '0')));
            }else {
                buffer.append(java.lang.Integer.toString(value));
            }
        }
    }

    private static class TwoDigitYearField implements org.apache.commons.lang.time.FastDateFormat.NumberRule {
        static final org.apache.commons.lang.time.FastDateFormat.TwoDigitYearField INSTANCE = new org.apache.commons.lang.time.FastDateFormat.TwoDigitYearField();

        TwoDigitYearField() {
            super();
        }

        public int estimateLength() {
            return 2;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            appendTo(buffer, ((calendar.get(java.util.Calendar.YEAR)) % 100));
        }

        public final void appendTo(java.lang.StringBuffer buffer, int value) {
            buffer.append(((char) ((value / 10) + '0')));
            buffer.append(((char) ((value % 10) + '0')));
        }
    }

    private static class TwoDigitMonthField implements org.apache.commons.lang.time.FastDateFormat.NumberRule {
        static final org.apache.commons.lang.time.FastDateFormat.TwoDigitMonthField INSTANCE = new org.apache.commons.lang.time.FastDateFormat.TwoDigitMonthField();

        TwoDigitMonthField() {
            super();
        }

        public int estimateLength() {
            return 2;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            appendTo(buffer, ((calendar.get(java.util.Calendar.MONTH)) + 1));
        }

        public final void appendTo(java.lang.StringBuffer buffer, int value) {
            buffer.append(((char) ((value / 10) + '0')));
            buffer.append(((char) ((value % 10) + '0')));
        }
    }

    private static class TwelveHourField implements org.apache.commons.lang.time.FastDateFormat.NumberRule {
        private final org.apache.commons.lang.time.FastDateFormat.NumberRule mRule;

        TwelveHourField(org.apache.commons.lang.time.FastDateFormat.NumberRule rule) {
            mRule = rule;
        }

        public int estimateLength() {
            return mRule.estimateLength();
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            int value = calendar.get(java.util.Calendar.HOUR);
            if (value == 0) {
                value = (calendar.getLeastMaximum(java.util.Calendar.HOUR)) + 1;
            }
            mRule.appendTo(buffer, value);
        }

        public void appendTo(java.lang.StringBuffer buffer, int value) {
            mRule.appendTo(buffer, value);
        }
    }

    private static class TwentyFourHourField implements org.apache.commons.lang.time.FastDateFormat.NumberRule {
        private final org.apache.commons.lang.time.FastDateFormat.NumberRule mRule;

        TwentyFourHourField(org.apache.commons.lang.time.FastDateFormat.NumberRule rule) {
            mRule = rule;
        }

        public int estimateLength() {
            return mRule.estimateLength();
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            int value = calendar.get(java.util.Calendar.HOUR_OF_DAY);
            if (value == 0) {
                value = (calendar.getMaximum(java.util.Calendar.HOUR_OF_DAY)) + 1;
            }
            mRule.appendTo(buffer, value);
        }

        public void appendTo(java.lang.StringBuffer buffer, int value) {
            mRule.appendTo(buffer, value);
        }
    }

    private static class TimeZoneNameRule implements org.apache.commons.lang.time.FastDateFormat.Rule {
        private final java.util.TimeZone mTimeZone;

        private final boolean mTimeZoneForced;

        private final java.util.Locale mLocale;

        private final int mStyle;

        private final java.lang.String mStandard;

        private final java.lang.String mDaylight;

        TimeZoneNameRule(java.util.TimeZone timeZone, boolean timeZoneForced, java.util.Locale locale, int style) {
            mTimeZone = timeZone;
            mTimeZoneForced = timeZoneForced;
            mLocale = locale;
            mStyle = style;
            if (timeZoneForced) {
                mStandard = org.apache.commons.lang.time.FastDateFormat.getTimeZoneDisplay(timeZone, false, style, locale);
                mDaylight = org.apache.commons.lang.time.FastDateFormat.getTimeZoneDisplay(timeZone, true, style, locale);
            }else {
                mStandard = null;
                mDaylight = null;
            }
        }

        public int estimateLength() {
            if (mTimeZoneForced) {
                return java.lang.Math.max(mStandard.length(), mDaylight.length());
            }else
                if ((mStyle) == (java.util.TimeZone.SHORT)) {
                    return 4;
                }else {
                    return 40;
                }

        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            if (mTimeZoneForced) {
                if ((mTimeZone.useDaylightTime()) && ((calendar.get(java.util.Calendar.DST_OFFSET)) != 0)) {
                    buffer.append(mDaylight);
                }else {
                    buffer.append(mStandard);
                }
            }else {
                java.util.TimeZone timeZone = calendar.getTimeZone();
                if ((timeZone.useDaylightTime()) && ((calendar.get(java.util.Calendar.DST_OFFSET)) != 0)) {
                    buffer.append(org.apache.commons.lang.time.FastDateFormat.getTimeZoneDisplay(timeZone, true, mStyle, mLocale));
                }else {
                    buffer.append(org.apache.commons.lang.time.FastDateFormat.getTimeZoneDisplay(timeZone, false, mStyle, mLocale));
                }
            }
        }
    }

    private static class TimeZoneNumberRule implements org.apache.commons.lang.time.FastDateFormat.Rule {
        static final org.apache.commons.lang.time.FastDateFormat.TimeZoneNumberRule INSTANCE_COLON = new org.apache.commons.lang.time.FastDateFormat.TimeZoneNumberRule(true);

        static final org.apache.commons.lang.time.FastDateFormat.TimeZoneNumberRule INSTANCE_NO_COLON = new org.apache.commons.lang.time.FastDateFormat.TimeZoneNumberRule(false);

        final boolean mColon;

        TimeZoneNumberRule(boolean colon) {
            mColon = colon;
        }

        public int estimateLength() {
            return 5;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            int offset = (calendar.get(java.util.Calendar.ZONE_OFFSET)) + (calendar.get(java.util.Calendar.DST_OFFSET));
            if (offset < 0) {
                buffer.append('-');
                offset = -offset;
            }else {
                buffer.append('+');
            }
            int hours = offset / ((60 * 60) * 1000);
            buffer.append(((char) ((hours / 10) + '0')));
            buffer.append(((char) ((hours % 10) + '0')));
            if (mColon) {
                buffer.append(':');
            }
            int minutes = (offset / (60 * 1000)) - (60 * hours);
            buffer.append(((char) ((minutes / 10) + '0')));
            buffer.append(((char) ((minutes % 10) + '0')));
        }
    }

    private static class TimeZoneDisplayKey {
        private final java.util.TimeZone mTimeZone;

        private final int mStyle;

        private final java.util.Locale mLocale;

        TimeZoneDisplayKey(java.util.TimeZone timeZone, boolean daylight, int style, java.util.Locale locale) {
            mTimeZone = timeZone;
            if (daylight) {
                style |= -2147483648;
            }
            mStyle = style;
            mLocale = locale;
        }

        public int hashCode() {
            return ((mStyle) * 31) + (mLocale.hashCode());
        }

        public boolean equals(java.lang.Object obj) {
            if ((this) == obj) {
                return true;
            }
            if (obj instanceof org.apache.commons.lang.time.FastDateFormat.TimeZoneDisplayKey) {
                org.apache.commons.lang.time.FastDateFormat.TimeZoneDisplayKey other = ((org.apache.commons.lang.time.FastDateFormat.TimeZoneDisplayKey) (obj));
                return ((mTimeZone.equals(other.mTimeZone)) && ((mStyle) == (other.mStyle))) && (mLocale.equals(other.mLocale));
            }
            return false;
        }
    }

    private static class Pair {
        private final java.lang.Object mObj1;

        private final java.lang.Object mObj2;

        public Pair(java.lang.Object obj1, java.lang.Object obj2) {
            mObj1 = obj1;
            mObj2 = obj2;
        }

        public boolean equals(java.lang.Object obj) {
            if ((this) == obj) {
                return true;
            }
            if (!(obj instanceof org.apache.commons.lang.time.FastDateFormat.Pair)) {
                return false;
            }
            org.apache.commons.lang.time.FastDateFormat.Pair key = ((org.apache.commons.lang.time.FastDateFormat.Pair) (obj));
            return ((mObj1) == null ? (key.mObj1) == null : mObj1.equals(key.mObj1)) && ((mObj2) == null ? (key.mObj2) == null : mObj2.equals(key.mObj2));
        }

        public int hashCode() {
            return ((mObj1) == null ? 0 : mObj1.hashCode()) + ((mObj2) == null ? 0 : mObj2.hashCode());
        }

        public java.lang.String toString() {
            return ((("[" + (mObj1)) + ':') + (mObj2)) + ']';
        }
    }
}
18:39:01.236 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
18:39:01.236 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #32
18:39:01.236 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang.time.FastDateFormat:649 which is executed by 4 tests
-1899260190
18:39:01.328 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:39:01.344 [pool-142-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (12 ms)
<> Total tests run: 26
<> Ignored tests: 0
<> Failed tests: 4
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
18:39:02.089 [pool-143-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (3 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:39:02.092 [pool-144-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
18:39:02.093 [pool-145-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:39:02.094 [pool-146-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

18:39:02.094 [pool-141-thread-1] DEBUG tests.output - Failing tests with false: 
[test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>, test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>]
18:39:02.094 [pool-141-thread-1] DEBUG tests.output - Failing tests with true: 
[test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>, test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>]
18:39:02.094 [pool-141-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.lang.time.FastDateFormat:649.
18:39:02.095 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #33
18:39:02.095 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang.time.FastDateFormat:648 which is executed by 4 tests
-1899260190
18:39:02.190 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:39:02.208 [pool-148-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (15 ms)
<> Total tests run: 26
<> Ignored tests: 0
<> Failed tests: 4
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

18:39:02.934 [pool-147-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
FastDateFormat.java:379: error: variable rule might not have been initialized
            rules.add(rule);
                      ^
Note: FastDateFormat.java uses unchecked or unsafe operations.
Note: Recompile with -Xlint:unchecked for details.
18:39:03.522 [pool-147-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public class FastDateFormat extends java.text.Format {
    private static final long serialVersionUID = 1L;

    public static final int FULL = java.text.DateFormat.FULL;

    public static final int LONG = java.text.DateFormat.LONG;

    public static final int MEDIUM = java.text.DateFormat.MEDIUM;

    public static final int SHORT = java.text.DateFormat.SHORT;

    private static java.lang.String cDefaultPattern;

    private static java.util.Map cInstanceCache = new java.util.HashMap(7);

    private static java.util.Map cDateInstanceCache = new java.util.HashMap(7);

    private static java.util.Map cTimeInstanceCache = new java.util.HashMap(7);

    private static java.util.Map cDateTimeInstanceCache = new java.util.HashMap(7);

    private static java.util.Map cTimeZoneDisplayCache = new java.util.HashMap(7);

    private final java.lang.String mPattern;

    private final java.util.TimeZone mTimeZone;

    private final boolean mTimeZoneForced;

    private final java.util.Locale mLocale;

    private final boolean mLocaleForced;

    private transient org.apache.commons.lang.time.FastDateFormat.Rule[] mRules;

    private transient int mMaxLengthEstimate;

    public static org.apache.commons.lang.time.FastDateFormat getInstance() {
        return org.apache.commons.lang.time.FastDateFormat.getInstance(org.apache.commons.lang.time.FastDateFormat.getDefaultPattern(), null, null);
    }

    public static org.apache.commons.lang.time.FastDateFormat getInstance(java.lang.String pattern) {
        return org.apache.commons.lang.time.FastDateFormat.getInstance(pattern, null, null);
    }

    public static org.apache.commons.lang.time.FastDateFormat getInstance(java.lang.String pattern, java.util.TimeZone timeZone) {
        return org.apache.commons.lang.time.FastDateFormat.getInstance(pattern, timeZone, null);
    }

    public static org.apache.commons.lang.time.FastDateFormat getInstance(java.lang.String pattern, java.util.Locale locale) {
        return org.apache.commons.lang.time.FastDateFormat.getInstance(pattern, null, locale);
    }

    public static synchronized org.apache.commons.lang.time.FastDateFormat getInstance(java.lang.String pattern, java.util.TimeZone timeZone, java.util.Locale locale) {
        org.apache.commons.lang.time.FastDateFormat emptyFormat = new org.apache.commons.lang.time.FastDateFormat(pattern, timeZone, locale);
        org.apache.commons.lang.time.FastDateFormat format = ((org.apache.commons.lang.time.FastDateFormat) (org.apache.commons.lang.time.FastDateFormat.cInstanceCache.get(emptyFormat)));
        if (format == null) {
            format = emptyFormat;
            format.init();
            org.apache.commons.lang.time.FastDateFormat.cInstanceCache.put(format, format);
        }
        return format;
    }

    public static org.apache.commons.lang.time.FastDateFormat getDateInstance(int style) {
        return org.apache.commons.lang.time.FastDateFormat.getDateInstance(style, null, null);
    }

    public static org.apache.commons.lang.time.FastDateFormat getDateInstance(int style, java.util.Locale locale) {
        return org.apache.commons.lang.time.FastDateFormat.getDateInstance(style, null, locale);
    }

    public static org.apache.commons.lang.time.FastDateFormat getDateInstance(int style, java.util.TimeZone timeZone) {
        return org.apache.commons.lang.time.FastDateFormat.getDateInstance(style, timeZone, null);
    }

    public static synchronized org.apache.commons.lang.time.FastDateFormat getDateInstance(int style, java.util.TimeZone timeZone, java.util.Locale locale) {
        java.lang.Object key = new java.lang.Integer(style);
        if (timeZone != null) {
            key = new org.apache.commons.lang.time.FastDateFormat.Pair(key, timeZone);
        }
        if (locale != null) {
            key = new org.apache.commons.lang.time.FastDateFormat.Pair(key, locale);
        }
        org.apache.commons.lang.time.FastDateFormat format = ((org.apache.commons.lang.time.FastDateFormat) (org.apache.commons.lang.time.FastDateFormat.cDateInstanceCache.get(key)));
        if (format == null) {
            if (locale == null) {
                locale = java.util.Locale.getDefault();
            }
            try {
                java.text.SimpleDateFormat formatter = ((java.text.SimpleDateFormat) (java.text.DateFormat.getDateInstance(style, locale)));
                java.lang.String pattern = formatter.toPattern();
                format = org.apache.commons.lang.time.FastDateFormat.getInstance(pattern, timeZone, locale);
                org.apache.commons.lang.time.FastDateFormat.cDateInstanceCache.put(key, format);
            } catch (java.lang.ClassCastException ex) {
                throw new java.lang.IllegalArgumentException(("No date pattern for locale: " + locale));
            }
        }
        return format;
    }

    public static org.apache.commons.lang.time.FastDateFormat getTimeInstance(int style) {
        return org.apache.commons.lang.time.FastDateFormat.getTimeInstance(style, null, null);
    }

    public static org.apache.commons.lang.time.FastDateFormat getTimeInstance(int style, java.util.Locale locale) {
        return org.apache.commons.lang.time.FastDateFormat.getTimeInstance(style, null, locale);
    }

    public static org.apache.commons.lang.time.FastDateFormat getTimeInstance(int style, java.util.TimeZone timeZone) {
        return org.apache.commons.lang.time.FastDateFormat.getTimeInstance(style, timeZone, null);
    }

    public static synchronized org.apache.commons.lang.time.FastDateFormat getTimeInstance(int style, java.util.TimeZone timeZone, java.util.Locale locale) {
        java.lang.Object key = new java.lang.Integer(style);
        if (timeZone != null) {
            key = new org.apache.commons.lang.time.FastDateFormat.Pair(key, timeZone);
        }
        if (locale != null) {
            key = new org.apache.commons.lang.time.FastDateFormat.Pair(key, locale);
        }
        org.apache.commons.lang.time.FastDateFormat format = ((org.apache.commons.lang.time.FastDateFormat) (org.apache.commons.lang.time.FastDateFormat.cTimeInstanceCache.get(key)));
        if (format == null) {
            if (locale == null) {
                locale = java.util.Locale.getDefault();
            }
            try {
                java.text.SimpleDateFormat formatter = ((java.text.SimpleDateFormat) (java.text.DateFormat.getTimeInstance(style, locale)));
                java.lang.String pattern = formatter.toPattern();
                format = org.apache.commons.lang.time.FastDateFormat.getInstance(pattern, timeZone, locale);
                org.apache.commons.lang.time.FastDateFormat.cTimeInstanceCache.put(key, format);
            } catch (java.lang.ClassCastException ex) {
                throw new java.lang.IllegalArgumentException(("No date pattern for locale: " + locale));
            }
        }
        return format;
    }

    public static org.apache.commons.lang.time.FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle) {
        return org.apache.commons.lang.time.FastDateFormat.getDateTimeInstance(dateStyle, timeStyle, null, null);
    }

    public static org.apache.commons.lang.time.FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, java.util.Locale locale) {
        return org.apache.commons.lang.time.FastDateFormat.getDateTimeInstance(dateStyle, timeStyle, null, locale);
    }

    public static org.apache.commons.lang.time.FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, java.util.TimeZone timeZone) {
        return org.apache.commons.lang.time.FastDateFormat.getDateTimeInstance(dateStyle, timeStyle, timeZone, null);
    }

    public static synchronized org.apache.commons.lang.time.FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, java.util.TimeZone timeZone, java.util.Locale locale) {
        java.lang.Object key = new org.apache.commons.lang.time.FastDateFormat.Pair(new java.lang.Integer(dateStyle), new java.lang.Integer(timeStyle));
        if (timeZone != null) {
            key = new org.apache.commons.lang.time.FastDateFormat.Pair(key, timeZone);
        }
        if (locale != null) {
            key = new org.apache.commons.lang.time.FastDateFormat.Pair(key, locale);
        }
        org.apache.commons.lang.time.FastDateFormat format = ((org.apache.commons.lang.time.FastDateFormat) (org.apache.commons.lang.time.FastDateFormat.cDateTimeInstanceCache.get(key)));
        if (format == null) {
            if (locale == null) {
                locale = java.util.Locale.getDefault();
            }
            try {
                java.text.SimpleDateFormat formatter = ((java.text.SimpleDateFormat) (java.text.DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale)));
                java.lang.String pattern = formatter.toPattern();
                format = org.apache.commons.lang.time.FastDateFormat.getInstance(pattern, timeZone, locale);
                org.apache.commons.lang.time.FastDateFormat.cDateTimeInstanceCache.put(key, format);
            } catch (java.lang.ClassCastException ex) {
                throw new java.lang.IllegalArgumentException(("No date time pattern for locale: " + locale));
            }
        }
        return format;
    }

    static synchronized java.lang.String getTimeZoneDisplay(java.util.TimeZone tz, boolean daylight, int style, java.util.Locale locale) {
        java.lang.Object key = new org.apache.commons.lang.time.FastDateFormat.TimeZoneDisplayKey(tz, daylight, style, locale);
        java.lang.String value = ((java.lang.String) (org.apache.commons.lang.time.FastDateFormat.cTimeZoneDisplayCache.get(key)));
        if (value == null) {
            value = tz.getDisplayName(daylight, style, locale);
            org.apache.commons.lang.time.FastDateFormat.cTimeZoneDisplayCache.put(key, value);
        }
        return value;
    }

    private static synchronized java.lang.String getDefaultPattern() {
        if ((org.apache.commons.lang.time.FastDateFormat.cDefaultPattern) == null) {
            org.apache.commons.lang.time.FastDateFormat.cDefaultPattern = new java.text.SimpleDateFormat().toPattern();
        }
        return org.apache.commons.lang.time.FastDateFormat.cDefaultPattern;
    }

    protected FastDateFormat(java.lang.String pattern, java.util.TimeZone timeZone, java.util.Locale locale) {
        super();
        if (pattern == null) {
            throw new java.lang.IllegalArgumentException("The pattern must not be null");
        }
        mPattern = pattern;
        mTimeZoneForced = timeZone != null;
        if (timeZone == null) {
            timeZone = java.util.TimeZone.getDefault();
        }
        mTimeZone = timeZone;
        mLocaleForced = locale != null;
        if (locale == null) {
            locale = java.util.Locale.getDefault();
        }
        mLocale = locale;
    }

    protected void init() {
        java.util.List rulesList = parsePattern();
        mRules = ((org.apache.commons.lang.time.FastDateFormat.Rule[]) (rulesList.toArray(new org.apache.commons.lang.time.FastDateFormat.Rule[rulesList.size()])));
        int len = 0;
        for (int i = mRules.length; (--i) >= 0;) {
            len += mRules[i].estimateLength();
        }
        mMaxLengthEstimate = len;
    }

    protected java.util.List parsePattern() {
        java.text.DateFormatSymbols symbols = new java.text.DateFormatSymbols(mLocale);
        java.util.List rules = new java.util.ArrayList();
        java.lang.String[] ERAs = symbols.getEras();
        java.lang.String[] months = symbols.getMonths();
        java.lang.String[] shortMonths = symbols.getShortMonths();
        java.lang.String[] weekdays = symbols.getWeekdays();
        java.lang.String[] shortWeekdays = symbols.getShortWeekdays();
        java.lang.String[] AmPmStrings = symbols.getAmPmStrings();
        int length = mPattern.length();
        int[] indexRef = new int[1];
        for (int i = 0; i < length; i++) {
            indexRef[0] = i;
            java.lang.String token = parseToken(mPattern, indexRef);
            i = indexRef[0];
            int tokenLen = token.length();
            if (tokenLen == 0) {
                break;
            }
            org.apache.commons.lang.time.FastDateFormat.Rule rule;
            char c = token.charAt(0);
            switch (c) {
                case 'G' :
                    rule = new org.apache.commons.lang.time.FastDateFormat.TextField(java.util.Calendar.ERA, ERAs);
                    break;
                case 'y' :
                    if (tokenLen >= 4) {
                        rule = selectNumberRule(java.util.Calendar.YEAR, tokenLen);
                    }else {
                        rule = org.apache.commons.lang.time.FastDateFormat.TwoDigitYearField.INSTANCE;
                    }
                    break;
                case 'M' :
                    if (tokenLen >= 4) {
                        rule = new org.apache.commons.lang.time.FastDateFormat.TextField(java.util.Calendar.MONTH, months);
                    }else
                        if (tokenLen == 3) {
                            rule = new org.apache.commons.lang.time.FastDateFormat.TextField(java.util.Calendar.MONTH, shortMonths);
                        }else
                            if (tokenLen == 2) {
                                rule = org.apache.commons.lang.time.FastDateFormat.TwoDigitMonthField.INSTANCE;
                            }else {
                                rule = org.apache.commons.lang.time.FastDateFormat.UnpaddedMonthField.INSTANCE;
                            }


                    break;
                case 'd' :
                    rule = selectNumberRule(java.util.Calendar.DAY_OF_MONTH, tokenLen);
                    break;
                case 'h' :
                    rule = new org.apache.commons.lang.time.FastDateFormat.TwelveHourField(selectNumberRule(java.util.Calendar.HOUR, tokenLen));
                    break;
                case 'H' :
                    rule = selectNumberRule(java.util.Calendar.HOUR_OF_DAY, tokenLen);
                    break;
                case 'm' :
                    rule = selectNumberRule(java.util.Calendar.MINUTE, tokenLen);
                    break;
                case 's' :
                    rule = selectNumberRule(java.util.Calendar.SECOND, tokenLen);
                    break;
                case 'S' :
                    rule = selectNumberRule(java.util.Calendar.MILLISECOND, tokenLen);
                    break;
                case 'E' :
                    boolean spoonDefaultValue = false;
                    try {
                        spoonDefaultValue = true;
                    } catch (java.lang.Exception __NopolProcessorException) {
                    }
                    boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                    if (fr.inria.lille.commons.trace.RuntimeValues.instance(28).isEnabled()) {
                        fr.inria.lille.commons.trace.RuntimeValues.instance(28).collectionStarts();
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(28).collectInput("shortMonths",shortMonths);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(28).collectInput("org.apache.commons.lang.time.FastDateFormat.this.mMaxLengthEstimate",org.apache.commons.lang.time.FastDateFormat.this.mMaxLengthEstimate);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(28).collectInput("org.apache.commons.lang.time.FastDateFormat.this.mTimeZoneForced",org.apache.commons.lang.time.FastDateFormat.this.mTimeZoneForced);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(28).collectInput("shortWeekdays",shortWeekdays);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(28).collectInput("rules",rules);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(28).collectInput("org.apache.commons.lang.time.FastDateFormat.MEDIUM",org.apache.commons.lang.time.FastDateFormat.MEDIUM);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(28).collectInput("symbols",symbols);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(28).collectInput("indexRef",indexRef);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(28).collectInput("org.apache.commons.lang.time.FastDateFormat.this.mRules",org.apache.commons.lang.time.FastDateFormat.this.mRules);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(28).collectInput("org.apache.commons.lang.time.FastDateFormat.this.mTimeZone",org.apache.commons.lang.time.FastDateFormat.this.mTimeZone);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(28).collectInput("org.apache.commons.lang.time.FastDateFormat.cTimeInstanceCache",org.apache.commons.lang.time.FastDateFormat.cTimeInstanceCache);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(28).collectInput("org.apache.commons.lang.time.FastDateFormat.this.mLocaleForced",org.apache.commons.lang.time.FastDateFormat.this.mLocaleForced);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(28).collectInput("ERAs",ERAs);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(28).collectInput("org.apache.commons.lang.time.FastDateFormat.this.mPattern",org.apache.commons.lang.time.FastDateFormat.this.mPattern);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(28).collectInput("org.apache.commons.lang.time.FastDateFormat.SHORT",org.apache.commons.lang.time.FastDateFormat.SHORT);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(28).collectInput("c",c);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(28).collectInput("months",months);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(28).collectInput("weekdays",weekdays);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(28).collectInput("org.apache.commons.lang.time.FastDateFormat.cDateInstanceCache",org.apache.commons.lang.time.FastDateFormat.cDateInstanceCache);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(28).collectInput("length",length);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(28).collectInput("org.apache.commons.lang.time.FastDateFormat.LONG",org.apache.commons.lang.time.FastDateFormat.LONG);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(28).collectInput("tokenLen",tokenLen);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(28).collectInput("org.apache.commons.lang.time.FastDateFormat.cInstanceCache",org.apache.commons.lang.time.FastDateFormat.cInstanceCache);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(28).collectInput("org.apache.commons.lang.time.FastDateFormat.this.mLocale",org.apache.commons.lang.time.FastDateFormat.this.mLocale);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(28).collectInput("token",token);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(28).collectInput("org.apache.commons.lang.time.FastDateFormat.cTimeZoneDisplayCache",org.apache.commons.lang.time.FastDateFormat.cTimeZoneDisplayCache);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(28).collectInput("AmPmStrings",AmPmStrings);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(28).collectInput("org.apache.commons.lang.time.FastDateFormat.cDateTimeInstanceCache",org.apache.commons.lang.time.FastDateFormat.cDateTimeInstanceCache);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(28).collectInput("org.apache.commons.lang.time.FastDateFormat.cDefaultPattern",org.apache.commons.lang.time.FastDateFormat.cDefaultPattern);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(28).collectInput("org.apache.commons.lang.time.FastDateFormat.FULL",org.apache.commons.lang.time.FastDateFormat.FULL);} catch (Exception ex1) {ex1.printStackTrace();};
                        fr.inria.lille.commons.trace.RuntimeValues.instance(28).collectOutput(runtimeAngelicValue);
                        fr.inria.lille.commons.trace.RuntimeValues.instance(28).collectionEnds();
                    }
                    if (runtimeAngelicValue)
                        rule = new org.apache.commons.lang.time.FastDateFormat.TextField(java.util.Calendar.DAY_OF_WEEK, (tokenLen < 4 ? shortWeekdays : weekdays));

                    break;
                case 'D' :
                    rule = selectNumberRule(java.util.Calendar.DAY_OF_YEAR, tokenLen);
                    break;
                case 'F' :
                    rule = selectNumberRule(java.util.Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);
                    break;
                case 'w' :
                    rule = selectNumberRule(java.util.Calendar.WEEK_OF_YEAR, tokenLen);
                    break;
                case 'W' :
                    rule = selectNumberRule(java.util.Calendar.WEEK_OF_MONTH, tokenLen);
                    break;
                case 'a' :
                    rule = new org.apache.commons.lang.time.FastDateFormat.TextField(java.util.Calendar.AM_PM, AmPmStrings);
                    break;
                case 'k' :
                    rule = new org.apache.commons.lang.time.FastDateFormat.TwentyFourHourField(selectNumberRule(java.util.Calendar.HOUR_OF_DAY, tokenLen));
                    break;
                case 'K' :
                    rule = selectNumberRule(java.util.Calendar.HOUR, tokenLen);
                    break;
                case 'z' :
                    if (tokenLen >= 4) {
                        rule = new org.apache.commons.lang.time.FastDateFormat.TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, java.util.TimeZone.LONG);
                    }else {
                        rule = new org.apache.commons.lang.time.FastDateFormat.TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, java.util.TimeZone.SHORT);
                    }
                    break;
                case 'Z' :
                    if (tokenLen == 1) {
                        rule = org.apache.commons.lang.time.FastDateFormat.TimeZoneNumberRule.INSTANCE_NO_COLON;
                    }else {
                        rule = org.apache.commons.lang.time.FastDateFormat.TimeZoneNumberRule.INSTANCE_COLON;
                    }
                    break;
                case '\'' :
                    java.lang.String sub = token.substring(1);
                    if ((sub.length()) == 1) {
                        rule = new org.apache.commons.lang.time.FastDateFormat.CharacterLiteral(sub.charAt(0));
                    }else {
                        rule = new org.apache.commons.lang.time.FastDateFormat.StringLiteral(sub);
                    }
                    break;
                default :
                    throw new java.lang.IllegalArgumentException(("Illegal pattern component: " + token));
            }
            rules.add(rule);
        }
        return rules;
    }

    protected java.lang.String parseToken(java.lang.String pattern, int[] indexRef) {
        java.lang.StringBuffer buf = new java.lang.StringBuffer();
        int i = indexRef[0];
        int length = pattern.length();
        char c = pattern.charAt(i);
        if (((c >= 'A') && (c <= 'Z')) || ((c >= 'a') && (c <= 'z'))) {
            buf.append(c);
            while ((i + 1) < length) {
                char peek = pattern.charAt((i + 1));
                if (peek == c) {
                    buf.append(c);
                    i++;
                }else {
                    break;
                }
            } 
        }else {
            buf.append('\'');
            boolean inLiteral = false;
            for (; i < length; i++) {
                c = pattern.charAt(i);
                if (c == '\'') {
                    if (((i + 1) < length) && ((pattern.charAt((i + 1))) == '\'')) {
                        i++;
                        buf.append(c);
                    }else {
                        inLiteral = !inLiteral;
                    }
                }else
                    if ((!inLiteral) && (((c >= 'A') && (c <= 'Z')) || ((c >= 'a') && (c <= 'z')))) {
                        i--;
                        break;
                    }else {
                        buf.append(c);
                    }

            }
        }
        indexRef[0] = i;
        return buf.toString();
    }

    protected org.apache.commons.lang.time.FastDateFormat.NumberRule selectNumberRule(int field, int padding) {
        switch (padding) {
            case 1 :
                return new org.apache.commons.lang.time.FastDateFormat.UnpaddedNumberField(field);
            case 2 :
                return new org.apache.commons.lang.time.FastDateFormat.TwoDigitNumberField(field);
            default :
                return new org.apache.commons.lang.time.FastDateFormat.PaddedNumberField(field, padding);
        }
    }

    public java.lang.StringBuffer format(java.lang.Object obj, java.lang.StringBuffer toAppendTo, java.text.FieldPosition pos) {
        if (obj instanceof java.util.Date) {
            return format(((java.util.Date) (obj)), toAppendTo);
        }else
            if (obj instanceof java.util.Calendar) {
                return format(((java.util.Calendar) (obj)), toAppendTo);
            }else
                if (obj instanceof java.lang.Long) {
                    return format(((java.lang.Long) (obj)).longValue(), toAppendTo);
                }else {
                    throw new java.lang.IllegalArgumentException(("Unknown class: " + (obj == null ? "<null>" : obj.getClass().getName())));
                }


    }

    public java.lang.String format(long millis) {
        return format(new java.util.Date(millis));
    }

    public java.lang.String format(java.util.Date date) {
        java.util.Calendar c = new java.util.GregorianCalendar(mTimeZone);
        c.setTime(date);
        return applyRules(c, new java.lang.StringBuffer(mMaxLengthEstimate)).toString();
    }

    public java.lang.String format(java.util.Calendar calendar) {
        return format(calendar, new java.lang.StringBuffer(mMaxLengthEstimate)).toString();
    }

    public java.lang.StringBuffer format(long millis, java.lang.StringBuffer buf) {
        return format(new java.util.Date(millis), buf);
    }

    public java.lang.StringBuffer format(java.util.Date date, java.lang.StringBuffer buf) {
        java.util.Calendar c = new java.util.GregorianCalendar(mTimeZone);
        c.setTime(date);
        return applyRules(c, buf);
    }

    public java.lang.StringBuffer format(java.util.Calendar calendar, java.lang.StringBuffer buf) {
        if (mTimeZoneForced) {
            calendar = ((java.util.Calendar) (calendar.clone()));
            calendar.setTimeZone(mTimeZone);
        }
        return applyRules(calendar, buf);
    }

    protected java.lang.StringBuffer applyRules(java.util.Calendar calendar, java.lang.StringBuffer buf) {
        org.apache.commons.lang.time.FastDateFormat.Rule[] rules = mRules;
        int len = mRules.length;
        for (int i = 0; i < len; i++) {
            rules[i].appendTo(buf, calendar);
        }
        return buf;
    }

    public java.lang.Object parseObject(java.lang.String source, java.text.ParsePosition pos) {
        pos.setIndex(0);
        pos.setErrorIndex(0);
        return null;
    }

    public java.lang.String getPattern() {
        return mPattern;
    }

    public java.util.TimeZone getTimeZone() {
        return mTimeZone;
    }

    public boolean getTimeZoneOverridesCalendar() {
        return mTimeZoneForced;
    }

    public java.util.Locale getLocale() {
        return mLocale;
    }

    public int getMaxLengthEstimate() {
        return mMaxLengthEstimate;
    }

    public boolean equals(java.lang.Object obj) {
        if ((obj instanceof org.apache.commons.lang.time.FastDateFormat) == false) {
            return false;
        }
        org.apache.commons.lang.time.FastDateFormat other = ((org.apache.commons.lang.time.FastDateFormat) (obj));
        if (((((((mPattern) == (other.mPattern)) || (mPattern.equals(other.mPattern))) && (((mTimeZone) == (other.mTimeZone)) || (mTimeZone.equals(other.mTimeZone)))) && (((mLocale) == (other.mLocale)) || (mLocale.equals(other.mLocale)))) && ((mTimeZoneForced) == (other.mTimeZoneForced))) && ((mLocaleForced) == (other.mLocaleForced))) {
            return true;
        }
        return false;
    }

    public int hashCode() {
        int total = 0;
        total += mPattern.hashCode();
        total += mTimeZone.hashCode();
        total += (mTimeZoneForced) ? 1 : 0;
        total += mLocale.hashCode();
        total += (mLocaleForced) ? 1 : 0;
        return total;
    }

    public java.lang.String toString() {
        return ("FastDateFormat[" + (mPattern)) + "]";
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
        in.defaultReadObject();
        init();
    }

    private interface Rule {
        int estimateLength();

        void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar);
    }

    private interface NumberRule extends org.apache.commons.lang.time.FastDateFormat.Rule {
        void appendTo(java.lang.StringBuffer buffer, int value);
    }

    private static class CharacterLiteral implements org.apache.commons.lang.time.FastDateFormat.Rule {
        private final char mValue;

        CharacterLiteral(char value) {
            mValue = value;
        }

        public int estimateLength() {
            return 1;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            buffer.append(mValue);
        }
    }

    private static class StringLiteral implements org.apache.commons.lang.time.FastDateFormat.Rule {
        private final java.lang.String mValue;

        StringLiteral(java.lang.String value) {
            mValue = value;
        }

        public int estimateLength() {
            return mValue.length();
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            buffer.append(mValue);
        }
    }

    private static class TextField implements org.apache.commons.lang.time.FastDateFormat.Rule {
        private final int mField;

        private final java.lang.String[] mValues;

        TextField(int field, java.lang.String[] values) {
            mField = field;
            mValues = values;
        }

        public int estimateLength() {
            int max = 0;
            for (int i = mValues.length; (--i) >= 0;) {
                int len = mValues[i].length();
                if (len > max) {
                    max = len;
                }
            }
            return max;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            buffer.append(mValues[calendar.get(mField)]);
        }
    }

    private static class UnpaddedNumberField implements org.apache.commons.lang.time.FastDateFormat.NumberRule {
        static final org.apache.commons.lang.time.FastDateFormat.UnpaddedNumberField INSTANCE_YEAR = new org.apache.commons.lang.time.FastDateFormat.UnpaddedNumberField(java.util.Calendar.YEAR);

        private final int mField;

        UnpaddedNumberField(int field) {
            mField = field;
        }

        public int estimateLength() {
            return 4;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            appendTo(buffer, calendar.get(mField));
        }

        public final void appendTo(java.lang.StringBuffer buffer, int value) {
            if (value < 10) {
                buffer.append(((char) (value + '0')));
            }else
                if (value < 100) {
                    buffer.append(((char) ((value / 10) + '0')));
                    buffer.append(((char) ((value % 10) + '0')));
                }else {
                    buffer.append(java.lang.Integer.toString(value));
                }

        }
    }

    private static class UnpaddedMonthField implements org.apache.commons.lang.time.FastDateFormat.NumberRule {
        static final org.apache.commons.lang.time.FastDateFormat.UnpaddedMonthField INSTANCE = new org.apache.commons.lang.time.FastDateFormat.UnpaddedMonthField();

        UnpaddedMonthField() {
            super();
        }

        public int estimateLength() {
            return 2;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            appendTo(buffer, ((calendar.get(java.util.Calendar.MONTH)) + 1));
        }

        public final void appendTo(java.lang.StringBuffer buffer, int value) {
            if (value < 10) {
                buffer.append(((char) (value + '0')));
            }else {
                buffer.append(((char) ((value / 10) + '0')));
                buffer.append(((char) ((value % 10) + '0')));
            }
        }
    }

    private static class PaddedNumberField implements org.apache.commons.lang.time.FastDateFormat.NumberRule {
        private final int mField;

        private final int mSize;

        PaddedNumberField(int field, int size) {
            if (size < 3) {
                throw new java.lang.IllegalArgumentException();
            }
            mField = field;
            mSize = size;
        }

        public int estimateLength() {
            return 4;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            appendTo(buffer, calendar.get(mField));
        }

        public final void appendTo(java.lang.StringBuffer buffer, int value) {
            if (value < 100) {
                for (int i = mSize; (--i) >= 2;) {
                    buffer.append('0');
                }
                buffer.append(((char) ((value / 10) + '0')));
                buffer.append(((char) ((value % 10) + '0')));
            }else {
                int digits;
                if (value < 1000) {
                    digits = 3;
                }else {
                    org.apache.commons.lang.Validate.isTrue((value > (-1)), "Negative values should not be possible", value);
                    digits = java.lang.Integer.toString(value).length();
                }
                for (int i = mSize; (--i) >= digits;) {
                    buffer.append('0');
                }
                buffer.append(java.lang.Integer.toString(value));
            }
        }
    }

    private static class TwoDigitNumberField implements org.apache.commons.lang.time.FastDateFormat.NumberRule {
        private final int mField;

        TwoDigitNumberField(int field) {
            mField = field;
        }

        public int estimateLength() {
            return 2;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            appendTo(buffer, calendar.get(mField));
        }

        public final void appendTo(java.lang.StringBuffer buffer, int value) {
            if (value < 100) {
                buffer.append(((char) ((value / 10) + '0')));
                buffer.append(((char) ((value % 10) + '0')));
            }else {
                buffer.append(java.lang.Integer.toString(value));
            }
        }
    }

    private static class TwoDigitYearField implements org.apache.commons.lang.time.FastDateFormat.NumberRule {
        static final org.apache.commons.lang.time.FastDateFormat.TwoDigitYearField INSTANCE = new org.apache.commons.lang.time.FastDateFormat.TwoDigitYearField();

        TwoDigitYearField() {
            super();
        }

        public int estimateLength() {
            return 2;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            appendTo(buffer, ((calendar.get(java.util.Calendar.YEAR)) % 100));
        }

        public final void appendTo(java.lang.StringBuffer buffer, int value) {
            buffer.append(((char) ((value / 10) + '0')));
            buffer.append(((char) ((value % 10) + '0')));
        }
    }

    private static class TwoDigitMonthField implements org.apache.commons.lang.time.FastDateFormat.NumberRule {
        static final org.apache.commons.lang.time.FastDateFormat.TwoDigitMonthField INSTANCE = new org.apache.commons.lang.time.FastDateFormat.TwoDigitMonthField();

        TwoDigitMonthField() {
            super();
        }

        public int estimateLength() {
            return 2;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            appendTo(buffer, ((calendar.get(java.util.Calendar.MONTH)) + 1));
        }

        public final void appendTo(java.lang.StringBuffer buffer, int value) {
            buffer.append(((char) ((value / 10) + '0')));
            buffer.append(((char) ((value % 10) + '0')));
        }
    }

    private static class TwelveHourField implements org.apache.commons.lang.time.FastDateFormat.NumberRule {
        private final org.apache.commons.lang.time.FastDateFormat.NumberRule mRule;

        TwelveHourField(org.apache.commons.lang.time.FastDateFormat.NumberRule rule) {
            mRule = rule;
        }

        public int estimateLength() {
            return mRule.estimateLength();
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            int value = calendar.get(java.util.Calendar.HOUR);
            if (value == 0) {
                value = (calendar.getLeastMaximum(java.util.Calendar.HOUR)) + 1;
            }
            mRule.appendTo(buffer, value);
        }

        public void appendTo(java.lang.StringBuffer buffer, int value) {
            mRule.appendTo(buffer, value);
        }
    }

    private static class TwentyFourHourField implements org.apache.commons.lang.time.FastDateFormat.NumberRule {
        private final org.apache.commons.lang.time.FastDateFormat.NumberRule mRule;

        TwentyFourHourField(org.apache.commons.lang.time.FastDateFormat.NumberRule rule) {
            mRule = rule;
        }

        public int estimateLength() {
            return mRule.estimateLength();
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            int value = calendar.get(java.util.Calendar.HOUR_OF_DAY);
            if (value == 0) {
                value = (calendar.getMaximum(java.util.Calendar.HOUR_OF_DAY)) + 1;
            }
            mRule.appendTo(buffer, value);
        }

        public void appendTo(java.lang.StringBuffer buffer, int value) {
            mRule.appendTo(buffer, value);
        }
    }

    private static class TimeZoneNameRule implements org.apache.commons.lang.time.FastDateFormat.Rule {
        private final java.util.TimeZone mTimeZone;

        private final boolean mTimeZoneForced;

        private final java.util.Locale mLocale;

        private final int mStyle;

        private final java.lang.String mStandard;

        private final java.lang.String mDaylight;

        TimeZoneNameRule(java.util.TimeZone timeZone, boolean timeZoneForced, java.util.Locale locale, int style) {
            mTimeZone = timeZone;
            mTimeZoneForced = timeZoneForced;
            mLocale = locale;
            mStyle = style;
            if (timeZoneForced) {
                mStandard = org.apache.commons.lang.time.FastDateFormat.getTimeZoneDisplay(timeZone, false, style, locale);
                mDaylight = org.apache.commons.lang.time.FastDateFormat.getTimeZoneDisplay(timeZone, true, style, locale);
            }else {
                mStandard = null;
                mDaylight = null;
            }
        }

        public int estimateLength() {
            if (mTimeZoneForced) {
                return java.lang.Math.max(mStandard.length(), mDaylight.length());
            }else
                if ((mStyle) == (java.util.TimeZone.SHORT)) {
                    return 4;
                }else {
                    return 40;
                }

        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            if (mTimeZoneForced) {
                if ((mTimeZone.useDaylightTime()) && ((calendar.get(java.util.Calendar.DST_OFFSET)) != 0)) {
                    buffer.append(mDaylight);
                }else {
                    buffer.append(mStandard);
                }
            }else {
                java.util.TimeZone timeZone = calendar.getTimeZone();
                if ((timeZone.useDaylightTime()) && ((calendar.get(java.util.Calendar.DST_OFFSET)) != 0)) {
                    buffer.append(org.apache.commons.lang.time.FastDateFormat.getTimeZoneDisplay(timeZone, true, mStyle, mLocale));
                }else {
                    buffer.append(org.apache.commons.lang.time.FastDateFormat.getTimeZoneDisplay(timeZone, false, mStyle, mLocale));
                }
            }
        }
    }

    private static class TimeZoneNumberRule implements org.apache.commons.lang.time.FastDateFormat.Rule {
        static final org.apache.commons.lang.time.FastDateFormat.TimeZoneNumberRule INSTANCE_COLON = new org.apache.commons.lang.time.FastDateFormat.TimeZoneNumberRule(true);

        static final org.apache.commons.lang.time.FastDateFormat.TimeZoneNumberRule INSTANCE_NO_COLON = new org.apache.commons.lang.time.FastDateFormat.TimeZoneNumberRule(false);

        final boolean mColon;

        TimeZoneNumberRule(boolean colon) {
            mColon = colon;
        }

        public int estimateLength() {
            return 5;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            int offset = (calendar.get(java.util.Calendar.ZONE_OFFSET)) + (calendar.get(java.util.Calendar.DST_OFFSET));
            if (offset < 0) {
                buffer.append('-');
                offset = -offset;
            }else {
                buffer.append('+');
            }
            int hours = offset / ((60 * 60) * 1000);
            buffer.append(((char) ((hours / 10) + '0')));
            buffer.append(((char) ((hours % 10) + '0')));
            if (mColon) {
                buffer.append(':');
            }
            int minutes = (offset / (60 * 1000)) - (60 * hours);
            buffer.append(((char) ((minutes / 10) + '0')));
            buffer.append(((char) ((minutes % 10) + '0')));
        }
    }

    private static class TimeZoneDisplayKey {
        private final java.util.TimeZone mTimeZone;

        private final int mStyle;

        private final java.util.Locale mLocale;

        TimeZoneDisplayKey(java.util.TimeZone timeZone, boolean daylight, int style, java.util.Locale locale) {
            mTimeZone = timeZone;
            if (daylight) {
                style |= -2147483648;
            }
            mStyle = style;
            mLocale = locale;
        }

        public int hashCode() {
            return ((mStyle) * 31) + (mLocale.hashCode());
        }

        public boolean equals(java.lang.Object obj) {
            if ((this) == obj) {
                return true;
            }
            if (obj instanceof org.apache.commons.lang.time.FastDateFormat.TimeZoneDisplayKey) {
                org.apache.commons.lang.time.FastDateFormat.TimeZoneDisplayKey other = ((org.apache.commons.lang.time.FastDateFormat.TimeZoneDisplayKey) (obj));
                return ((mTimeZone.equals(other.mTimeZone)) && ((mStyle) == (other.mStyle))) && (mLocale.equals(other.mLocale));
            }
            return false;
        }
    }

    private static class Pair {
        private final java.lang.Object mObj1;

        private final java.lang.Object mObj2;

        public Pair(java.lang.Object obj1, java.lang.Object obj2) {
            mObj1 = obj1;
            mObj2 = obj2;
        }

        public boolean equals(java.lang.Object obj) {
            if ((this) == obj) {
                return true;
            }
            if (!(obj instanceof org.apache.commons.lang.time.FastDateFormat.Pair)) {
                return false;
            }
            org.apache.commons.lang.time.FastDateFormat.Pair key = ((org.apache.commons.lang.time.FastDateFormat.Pair) (obj));
            return ((mObj1) == null ? (key.mObj1) == null : mObj1.equals(key.mObj1)) && ((mObj2) == null ? (key.mObj2) == null : mObj2.equals(key.mObj2));
        }

        public int hashCode() {
            return ((mObj1) == null ? 0 : mObj1.hashCode()) + ((mObj2) == null ? 0 : mObj2.hashCode());
        }

        public java.lang.String toString() {
            return ((("[" + (mObj1)) + ':') + (mObj2)) + ']';
        }
    }
}
18:39:03.523 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
18:39:03.523 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #34
18:39:03.523 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang.time.FastDateFormat:293 which is executed by 1 tests
-1899260190
18:39:03.613 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:39:03.627 [pool-150-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (10 ms)
<> Total tests run: 13
<> Ignored tests: 0
<> Failed tests: 2
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

java.lang.NullPointerException
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:39:04.384 [pool-152-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
18:39:04.386 [pool-153-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:39:04.386 [pool-154-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

18:39:04.386 [pool-149-thread-1] DEBUG tests.output - Failing tests with false: 
[test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest): null, Test mechanism: 0, Test mechanism: 0, test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>]
18:39:04.387 [pool-149-thread-1] DEBUG tests.output - Failing tests with true: 
[test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>, test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>]
18:39:04.387 [pool-149-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.lang.time.FastDateFormat:293.
18:39:04.387 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #35
18:39:04.387 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang.time.FastDateFormat:234 which is executed by 1 tests
-1899260190
18:39:04.477 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #36
18:39:04.477 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang.time.FastDateFormat:954 which is executed by 5 tests
-1899260190
18:39:04.571 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #37
18:39:04.572 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang.time.FastDateFormat$TextField:1161 which is executed by 5 tests
-1899260190
18:39:04.665 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #38
18:39:04.665 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang.time.FastDateFormat$TextField:1160 which is executed by 5 tests
-1899260190
18:39:04.758 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #39
18:39:04.758 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang.time.FastDateFormat$TextField:1158 which is executed by 5 tests
-1899260190
18:39:04.850 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:39:04.872 [pool-156-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (13 ms)
<> Total tests run: 26
<> Ignored tests: 0
<> Failed tests: 4
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
18:39:05.625 [pool-157-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (7 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:39:05.628 [pool-158-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
18:39:05.629 [pool-159-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:39:05.630 [pool-160-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

18:39:05.630 [pool-155-thread-1] DEBUG tests.output - Failing tests with false: 
[test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>, test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>]
18:39:05.630 [pool-155-thread-1] DEBUG tests.output - Failing tests with true: 
[test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>, test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>]
18:39:05.631 [pool-155-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.lang.time.FastDateFormat$TextField:1158.
18:39:05.631 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #40
18:39:05.631 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang.time.FastDateFormat$TextField:1157 which is executed by 5 tests
-1899260190
18:39:05.723 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:39:05.739 [pool-162-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (13 ms)
<> Total tests run: 26
<> Ignored tests: 0
<> Failed tests: 4
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
18:39:06.474 [pool-163-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (5 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:39:06.479 [pool-164-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (4 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
18:39:06.480 [pool-165-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:39:06.481 [pool-166-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

18:39:06.481 [pool-161-thread-1] DEBUG tests.output - Failing tests with false: 
[test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>, test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>]
18:39:06.481 [pool-161-thread-1] DEBUG tests.output - Failing tests with true: 
[test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>, test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>]
18:39:06.481 [pool-161-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.lang.time.FastDateFormat$TextField:1157.
18:39:06.481 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:39:06.496 [pool-168-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (12 ms)
<> Total tests run: 26
<> Ignored tests: 0
<> Failed tests: 4
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
18:39:07.232 [pool-169-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (4 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:39:07.236 [pool-170-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (3 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
18:39:07.237 [pool-171-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:39:07.238 [pool-172-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

18:39:07.238 [pool-167-thread-1] DEBUG tests.output - Failing tests with false: 
[test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>, test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>]
18:39:07.238 [pool-167-thread-1] DEBUG tests.output - Failing tests with true: 
[test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>, test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>]
18:39:07.238 [pool-167-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.lang.time.FastDateFormat$TextField:1157.
18:39:07.238 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #41
18:39:07.238 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang.time.FastDateFormat$TextField:1156 which is executed by 5 tests
-1899260190
18:39:07.332 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #42
18:39:07.333 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang.time.FastDateFormat$TextField:1155 which is executed by 5 tests
-1899260190
18:39:07.429 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:39:07.444 [pool-174-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (12 ms)
<> Total tests run: 26
<> Ignored tests: 0
<> Failed tests: 4
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
18:39:08.223 [pool-175-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (4 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:39:08.225 [pool-176-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
18:39:08.226 [pool-177-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:39:08.227 [pool-178-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

18:39:08.227 [pool-173-thread-1] DEBUG tests.output - Failing tests with false: 
[test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>, test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>]
18:39:08.228 [pool-173-thread-1] DEBUG tests.output - Failing tests with true: 
[test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>, test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>]
18:39:08.228 [pool-173-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.lang.time.FastDateFormat$TextField:1155.
18:39:08.228 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #43
18:39:08.228 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang.time.FastDateFormat$TextField:1154 which is executed by 5 tests
-1899260190
18:39:08.319 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #44
18:39:08.319 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang.time.FastDateFormat:772 which is executed by 5 tests
-1899260190
18:39:08.415 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #45
18:39:08.415 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang.time.FastDateFormat$UnpaddedNumberField:1193 which is executed by 5 tests
-1899260190
18:39:08.506 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #46
18:39:08.506 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang.time.FastDateFormat$TwelveHourField:1455 which is executed by 2 tests
-1899260190
18:39:08.601 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #47
18:39:08.601 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang.time.FastDateFormat:664 which is executed by 2 tests
-1899260190
18:39:08.691 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:39:08.705 [pool-180-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (11 ms)
<> Total tests run: 13
<> Ignored tests: 0
<> Failed tests: 2
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
18:39:09.443 [pool-181-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (3 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:39:09.446 [pool-182-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
18:39:09.447 [pool-183-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:39:09.448 [pool-184-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

18:39:09.448 [pool-179-thread-1] DEBUG tests.output - Failing tests with false: 
[test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>, test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>]
18:39:09.448 [pool-179-thread-1] DEBUG tests.output - Failing tests with true: 
[test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>, test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>]
18:39:09.448 [pool-179-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.lang.time.FastDateFormat:664.
18:39:09.448 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #48
18:39:09.448 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang.time.FastDateFormat:663 which is executed by 2 tests
-1899260190
18:39:09.543 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:39:09.555 [pool-186-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (10 ms)
<> Total tests run: 13
<> Ignored tests: 0
<> Failed tests: 2
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

18:39:10.287 [pool-185-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
FastDateFormat.java:379: error: variable rule might not have been initialized
            rules.add(rule);
                      ^
Note: FastDateFormat.java uses unchecked or unsafe operations.
Note: Recompile with -Xlint:unchecked for details.
18:39:10.875 [pool-185-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public class FastDateFormat extends java.text.Format {
    private static final long serialVersionUID = 1L;

    public static final int FULL = java.text.DateFormat.FULL;

    public static final int LONG = java.text.DateFormat.LONG;

    public static final int MEDIUM = java.text.DateFormat.MEDIUM;

    public static final int SHORT = java.text.DateFormat.SHORT;

    private static java.lang.String cDefaultPattern;

    private static java.util.Map cInstanceCache = new java.util.HashMap(7);

    private static java.util.Map cDateInstanceCache = new java.util.HashMap(7);

    private static java.util.Map cTimeInstanceCache = new java.util.HashMap(7);

    private static java.util.Map cDateTimeInstanceCache = new java.util.HashMap(7);

    private static java.util.Map cTimeZoneDisplayCache = new java.util.HashMap(7);

    private final java.lang.String mPattern;

    private final java.util.TimeZone mTimeZone;

    private final boolean mTimeZoneForced;

    private final java.util.Locale mLocale;

    private final boolean mLocaleForced;

    private transient org.apache.commons.lang.time.FastDateFormat.Rule[] mRules;

    private transient int mMaxLengthEstimate;

    public static org.apache.commons.lang.time.FastDateFormat getInstance() {
        return org.apache.commons.lang.time.FastDateFormat.getInstance(org.apache.commons.lang.time.FastDateFormat.getDefaultPattern(), null, null);
    }

    public static org.apache.commons.lang.time.FastDateFormat getInstance(java.lang.String pattern) {
        return org.apache.commons.lang.time.FastDateFormat.getInstance(pattern, null, null);
    }

    public static org.apache.commons.lang.time.FastDateFormat getInstance(java.lang.String pattern, java.util.TimeZone timeZone) {
        return org.apache.commons.lang.time.FastDateFormat.getInstance(pattern, timeZone, null);
    }

    public static org.apache.commons.lang.time.FastDateFormat getInstance(java.lang.String pattern, java.util.Locale locale) {
        return org.apache.commons.lang.time.FastDateFormat.getInstance(pattern, null, locale);
    }

    public static synchronized org.apache.commons.lang.time.FastDateFormat getInstance(java.lang.String pattern, java.util.TimeZone timeZone, java.util.Locale locale) {
        org.apache.commons.lang.time.FastDateFormat emptyFormat = new org.apache.commons.lang.time.FastDateFormat(pattern, timeZone, locale);
        org.apache.commons.lang.time.FastDateFormat format = ((org.apache.commons.lang.time.FastDateFormat) (org.apache.commons.lang.time.FastDateFormat.cInstanceCache.get(emptyFormat)));
        if (format == null) {
            format = emptyFormat;
            format.init();
            org.apache.commons.lang.time.FastDateFormat.cInstanceCache.put(format, format);
        }
        return format;
    }

    public static org.apache.commons.lang.time.FastDateFormat getDateInstance(int style) {
        return org.apache.commons.lang.time.FastDateFormat.getDateInstance(style, null, null);
    }

    public static org.apache.commons.lang.time.FastDateFormat getDateInstance(int style, java.util.Locale locale) {
        return org.apache.commons.lang.time.FastDateFormat.getDateInstance(style, null, locale);
    }

    public static org.apache.commons.lang.time.FastDateFormat getDateInstance(int style, java.util.TimeZone timeZone) {
        return org.apache.commons.lang.time.FastDateFormat.getDateInstance(style, timeZone, null);
    }

    public static synchronized org.apache.commons.lang.time.FastDateFormat getDateInstance(int style, java.util.TimeZone timeZone, java.util.Locale locale) {
        java.lang.Object key = new java.lang.Integer(style);
        if (timeZone != null) {
            key = new org.apache.commons.lang.time.FastDateFormat.Pair(key, timeZone);
        }
        if (locale != null) {
            key = new org.apache.commons.lang.time.FastDateFormat.Pair(key, locale);
        }
        org.apache.commons.lang.time.FastDateFormat format = ((org.apache.commons.lang.time.FastDateFormat) (org.apache.commons.lang.time.FastDateFormat.cDateInstanceCache.get(key)));
        if (format == null) {
            if (locale == null) {
                locale = java.util.Locale.getDefault();
            }
            try {
                java.text.SimpleDateFormat formatter = ((java.text.SimpleDateFormat) (java.text.DateFormat.getDateInstance(style, locale)));
                java.lang.String pattern = formatter.toPattern();
                format = org.apache.commons.lang.time.FastDateFormat.getInstance(pattern, timeZone, locale);
                org.apache.commons.lang.time.FastDateFormat.cDateInstanceCache.put(key, format);
            } catch (java.lang.ClassCastException ex) {
                throw new java.lang.IllegalArgumentException(("No date pattern for locale: " + locale));
            }
        }
        return format;
    }

    public static org.apache.commons.lang.time.FastDateFormat getTimeInstance(int style) {
        return org.apache.commons.lang.time.FastDateFormat.getTimeInstance(style, null, null);
    }

    public static org.apache.commons.lang.time.FastDateFormat getTimeInstance(int style, java.util.Locale locale) {
        return org.apache.commons.lang.time.FastDateFormat.getTimeInstance(style, null, locale);
    }

    public static org.apache.commons.lang.time.FastDateFormat getTimeInstance(int style, java.util.TimeZone timeZone) {
        return org.apache.commons.lang.time.FastDateFormat.getTimeInstance(style, timeZone, null);
    }

    public static synchronized org.apache.commons.lang.time.FastDateFormat getTimeInstance(int style, java.util.TimeZone timeZone, java.util.Locale locale) {
        java.lang.Object key = new java.lang.Integer(style);
        if (timeZone != null) {
            key = new org.apache.commons.lang.time.FastDateFormat.Pair(key, timeZone);
        }
        if (locale != null) {
            key = new org.apache.commons.lang.time.FastDateFormat.Pair(key, locale);
        }
        org.apache.commons.lang.time.FastDateFormat format = ((org.apache.commons.lang.time.FastDateFormat) (org.apache.commons.lang.time.FastDateFormat.cTimeInstanceCache.get(key)));
        if (format == null) {
            if (locale == null) {
                locale = java.util.Locale.getDefault();
            }
            try {
                java.text.SimpleDateFormat formatter = ((java.text.SimpleDateFormat) (java.text.DateFormat.getTimeInstance(style, locale)));
                java.lang.String pattern = formatter.toPattern();
                format = org.apache.commons.lang.time.FastDateFormat.getInstance(pattern, timeZone, locale);
                org.apache.commons.lang.time.FastDateFormat.cTimeInstanceCache.put(key, format);
            } catch (java.lang.ClassCastException ex) {
                throw new java.lang.IllegalArgumentException(("No date pattern for locale: " + locale));
            }
        }
        return format;
    }

    public static org.apache.commons.lang.time.FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle) {
        return org.apache.commons.lang.time.FastDateFormat.getDateTimeInstance(dateStyle, timeStyle, null, null);
    }

    public static org.apache.commons.lang.time.FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, java.util.Locale locale) {
        return org.apache.commons.lang.time.FastDateFormat.getDateTimeInstance(dateStyle, timeStyle, null, locale);
    }

    public static org.apache.commons.lang.time.FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, java.util.TimeZone timeZone) {
        return org.apache.commons.lang.time.FastDateFormat.getDateTimeInstance(dateStyle, timeStyle, timeZone, null);
    }

    public static synchronized org.apache.commons.lang.time.FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, java.util.TimeZone timeZone, java.util.Locale locale) {
        java.lang.Object key = new org.apache.commons.lang.time.FastDateFormat.Pair(new java.lang.Integer(dateStyle), new java.lang.Integer(timeStyle));
        if (timeZone != null) {
            key = new org.apache.commons.lang.time.FastDateFormat.Pair(key, timeZone);
        }
        if (locale != null) {
            key = new org.apache.commons.lang.time.FastDateFormat.Pair(key, locale);
        }
        org.apache.commons.lang.time.FastDateFormat format = ((org.apache.commons.lang.time.FastDateFormat) (org.apache.commons.lang.time.FastDateFormat.cDateTimeInstanceCache.get(key)));
        if (format == null) {
            if (locale == null) {
                locale = java.util.Locale.getDefault();
            }
            try {
                java.text.SimpleDateFormat formatter = ((java.text.SimpleDateFormat) (java.text.DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale)));
                java.lang.String pattern = formatter.toPattern();
                format = org.apache.commons.lang.time.FastDateFormat.getInstance(pattern, timeZone, locale);
                org.apache.commons.lang.time.FastDateFormat.cDateTimeInstanceCache.put(key, format);
            } catch (java.lang.ClassCastException ex) {
                throw new java.lang.IllegalArgumentException(("No date time pattern for locale: " + locale));
            }
        }
        return format;
    }

    static synchronized java.lang.String getTimeZoneDisplay(java.util.TimeZone tz, boolean daylight, int style, java.util.Locale locale) {
        java.lang.Object key = new org.apache.commons.lang.time.FastDateFormat.TimeZoneDisplayKey(tz, daylight, style, locale);
        java.lang.String value = ((java.lang.String) (org.apache.commons.lang.time.FastDateFormat.cTimeZoneDisplayCache.get(key)));
        if (value == null) {
            value = tz.getDisplayName(daylight, style, locale);
            org.apache.commons.lang.time.FastDateFormat.cTimeZoneDisplayCache.put(key, value);
        }
        return value;
    }

    private static synchronized java.lang.String getDefaultPattern() {
        if ((org.apache.commons.lang.time.FastDateFormat.cDefaultPattern) == null) {
            org.apache.commons.lang.time.FastDateFormat.cDefaultPattern = new java.text.SimpleDateFormat().toPattern();
        }
        return org.apache.commons.lang.time.FastDateFormat.cDefaultPattern;
    }

    protected FastDateFormat(java.lang.String pattern, java.util.TimeZone timeZone, java.util.Locale locale) {
        super();
        if (pattern == null) {
            throw new java.lang.IllegalArgumentException("The pattern must not be null");
        }
        mPattern = pattern;
        mTimeZoneForced = timeZone != null;
        if (timeZone == null) {
            timeZone = java.util.TimeZone.getDefault();
        }
        mTimeZone = timeZone;
        mLocaleForced = locale != null;
        if (locale == null) {
            locale = java.util.Locale.getDefault();
        }
        mLocale = locale;
    }

    protected void init() {
        java.util.List rulesList = parsePattern();
        mRules = ((org.apache.commons.lang.time.FastDateFormat.Rule[]) (rulesList.toArray(new org.apache.commons.lang.time.FastDateFormat.Rule[rulesList.size()])));
        int len = 0;
        for (int i = mRules.length; (--i) >= 0;) {
            len += mRules[i].estimateLength();
        }
        mMaxLengthEstimate = len;
    }

    protected java.util.List parsePattern() {
        java.text.DateFormatSymbols symbols = new java.text.DateFormatSymbols(mLocale);
        java.util.List rules = new java.util.ArrayList();
        java.lang.String[] ERAs = symbols.getEras();
        java.lang.String[] months = symbols.getMonths();
        java.lang.String[] shortMonths = symbols.getShortMonths();
        java.lang.String[] weekdays = symbols.getWeekdays();
        java.lang.String[] shortWeekdays = symbols.getShortWeekdays();
        java.lang.String[] AmPmStrings = symbols.getAmPmStrings();
        int length = mPattern.length();
        int[] indexRef = new int[1];
        for (int i = 0; i < length; i++) {
            indexRef[0] = i;
            java.lang.String token = parseToken(mPattern, indexRef);
            i = indexRef[0];
            int tokenLen = token.length();
            if (tokenLen == 0) {
                break;
            }
            org.apache.commons.lang.time.FastDateFormat.Rule rule;
            char c = token.charAt(0);
            switch (c) {
                case 'G' :
                    rule = new org.apache.commons.lang.time.FastDateFormat.TextField(java.util.Calendar.ERA, ERAs);
                    break;
                case 'y' :
                    if (tokenLen >= 4) {
                        rule = selectNumberRule(java.util.Calendar.YEAR, tokenLen);
                    }else {
                        rule = org.apache.commons.lang.time.FastDateFormat.TwoDigitYearField.INSTANCE;
                    }
                    break;
                case 'M' :
                    if (tokenLen >= 4) {
                        rule = new org.apache.commons.lang.time.FastDateFormat.TextField(java.util.Calendar.MONTH, months);
                    }else
                        if (tokenLen == 3) {
                            rule = new org.apache.commons.lang.time.FastDateFormat.TextField(java.util.Calendar.MONTH, shortMonths);
                        }else
                            if (tokenLen == 2) {
                                rule = org.apache.commons.lang.time.FastDateFormat.TwoDigitMonthField.INSTANCE;
                            }else {
                                rule = org.apache.commons.lang.time.FastDateFormat.UnpaddedMonthField.INSTANCE;
                            }


                    break;
                case 'd' :
                    rule = selectNumberRule(java.util.Calendar.DAY_OF_MONTH, tokenLen);
                    break;
                case 'h' :
                    rule = new org.apache.commons.lang.time.FastDateFormat.TwelveHourField(selectNumberRule(java.util.Calendar.HOUR, tokenLen));
                    break;
                case 'H' :
                    rule = selectNumberRule(java.util.Calendar.HOUR_OF_DAY, tokenLen);
                    break;
                case 'm' :
                    rule = selectNumberRule(java.util.Calendar.MINUTE, tokenLen);
                    break;
                case 's' :
                    rule = selectNumberRule(java.util.Calendar.SECOND, tokenLen);
                    break;
                case 'S' :
                    rule = selectNumberRule(java.util.Calendar.MILLISECOND, tokenLen);
                    break;
                case 'E' :
                    rule = new org.apache.commons.lang.time.FastDateFormat.TextField(java.util.Calendar.DAY_OF_WEEK, (tokenLen < 4 ? shortWeekdays : weekdays));
                    break;
                case 'D' :
                    rule = selectNumberRule(java.util.Calendar.DAY_OF_YEAR, tokenLen);
                    break;
                case 'F' :
                    rule = selectNumberRule(java.util.Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);
                    break;
                case 'w' :
                    rule = selectNumberRule(java.util.Calendar.WEEK_OF_YEAR, tokenLen);
                    break;
                case 'W' :
                    rule = selectNumberRule(java.util.Calendar.WEEK_OF_MONTH, tokenLen);
                    break;
                case 'a' :
                    boolean spoonDefaultValue = false;
                    try {
                        spoonDefaultValue = true;
                    } catch (java.lang.Exception __NopolProcessorException) {
                    }
                    boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                    if (fr.inria.lille.commons.trace.RuntimeValues.instance(35).isEnabled()) {
                        fr.inria.lille.commons.trace.RuntimeValues.instance(35).collectionStarts();
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(35).collectInput("shortMonths",shortMonths);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(35).collectInput("org.apache.commons.lang.time.FastDateFormat.this.mMaxLengthEstimate",org.apache.commons.lang.time.FastDateFormat.this.mMaxLengthEstimate);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(35).collectInput("org.apache.commons.lang.time.FastDateFormat.this.mTimeZoneForced",org.apache.commons.lang.time.FastDateFormat.this.mTimeZoneForced);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(35).collectInput("shortWeekdays",shortWeekdays);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(35).collectInput("rules",rules);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(35).collectInput("org.apache.commons.lang.time.FastDateFormat.MEDIUM",org.apache.commons.lang.time.FastDateFormat.MEDIUM);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(35).collectInput("symbols",symbols);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(35).collectInput("indexRef",indexRef);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(35).collectInput("org.apache.commons.lang.time.FastDateFormat.this.mRules",org.apache.commons.lang.time.FastDateFormat.this.mRules);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(35).collectInput("org.apache.commons.lang.time.FastDateFormat.this.mTimeZone",org.apache.commons.lang.time.FastDateFormat.this.mTimeZone);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(35).collectInput("org.apache.commons.lang.time.FastDateFormat.cTimeInstanceCache",org.apache.commons.lang.time.FastDateFormat.cTimeInstanceCache);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(35).collectInput("org.apache.commons.lang.time.FastDateFormat.this.mLocaleForced",org.apache.commons.lang.time.FastDateFormat.this.mLocaleForced);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(35).collectInput("ERAs",ERAs);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(35).collectInput("org.apache.commons.lang.time.FastDateFormat.this.mPattern",org.apache.commons.lang.time.FastDateFormat.this.mPattern);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(35).collectInput("org.apache.commons.lang.time.FastDateFormat.SHORT",org.apache.commons.lang.time.FastDateFormat.SHORT);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(35).collectInput("c",c);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(35).collectInput("months",months);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(35).collectInput("weekdays",weekdays);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(35).collectInput("org.apache.commons.lang.time.FastDateFormat.cDateInstanceCache",org.apache.commons.lang.time.FastDateFormat.cDateInstanceCache);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(35).collectInput("length",length);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(35).collectInput("org.apache.commons.lang.time.FastDateFormat.LONG",org.apache.commons.lang.time.FastDateFormat.LONG);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(35).collectInput("tokenLen",tokenLen);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(35).collectInput("org.apache.commons.lang.time.FastDateFormat.cInstanceCache",org.apache.commons.lang.time.FastDateFormat.cInstanceCache);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(35).collectInput("org.apache.commons.lang.time.FastDateFormat.this.mLocale",org.apache.commons.lang.time.FastDateFormat.this.mLocale);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(35).collectInput("token",token);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(35).collectInput("org.apache.commons.lang.time.FastDateFormat.cTimeZoneDisplayCache",org.apache.commons.lang.time.FastDateFormat.cTimeZoneDisplayCache);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(35).collectInput("AmPmStrings",AmPmStrings);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(35).collectInput("org.apache.commons.lang.time.FastDateFormat.cDateTimeInstanceCache",org.apache.commons.lang.time.FastDateFormat.cDateTimeInstanceCache);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(35).collectInput("org.apache.commons.lang.time.FastDateFormat.cDefaultPattern",org.apache.commons.lang.time.FastDateFormat.cDefaultPattern);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(35).collectInput("org.apache.commons.lang.time.FastDateFormat.FULL",org.apache.commons.lang.time.FastDateFormat.FULL);} catch (Exception ex1) {ex1.printStackTrace();};
                        fr.inria.lille.commons.trace.RuntimeValues.instance(35).collectOutput(runtimeAngelicValue);
                        fr.inria.lille.commons.trace.RuntimeValues.instance(35).collectionEnds();
                    }
                    if (runtimeAngelicValue)
                        rule = new org.apache.commons.lang.time.FastDateFormat.TextField(java.util.Calendar.AM_PM, AmPmStrings);

                    break;
                case 'k' :
                    rule = new org.apache.commons.lang.time.FastDateFormat.TwentyFourHourField(selectNumberRule(java.util.Calendar.HOUR_OF_DAY, tokenLen));
                    break;
                case 'K' :
                    rule = selectNumberRule(java.util.Calendar.HOUR, tokenLen);
                    break;
                case 'z' :
                    if (tokenLen >= 4) {
                        rule = new org.apache.commons.lang.time.FastDateFormat.TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, java.util.TimeZone.LONG);
                    }else {
                        rule = new org.apache.commons.lang.time.FastDateFormat.TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, java.util.TimeZone.SHORT);
                    }
                    break;
                case 'Z' :
                    if (tokenLen == 1) {
                        rule = org.apache.commons.lang.time.FastDateFormat.TimeZoneNumberRule.INSTANCE_NO_COLON;
                    }else {
                        rule = org.apache.commons.lang.time.FastDateFormat.TimeZoneNumberRule.INSTANCE_COLON;
                    }
                    break;
                case '\'' :
                    java.lang.String sub = token.substring(1);
                    if ((sub.length()) == 1) {
                        rule = new org.apache.commons.lang.time.FastDateFormat.CharacterLiteral(sub.charAt(0));
                    }else {
                        rule = new org.apache.commons.lang.time.FastDateFormat.StringLiteral(sub);
                    }
                    break;
                default :
                    throw new java.lang.IllegalArgumentException(("Illegal pattern component: " + token));
            }
            rules.add(rule);
        }
        return rules;
    }

    protected java.lang.String parseToken(java.lang.String pattern, int[] indexRef) {
        java.lang.StringBuffer buf = new java.lang.StringBuffer();
        int i = indexRef[0];
        int length = pattern.length();
        char c = pattern.charAt(i);
        if (((c >= 'A') && (c <= 'Z')) || ((c >= 'a') && (c <= 'z'))) {
            buf.append(c);
            while ((i + 1) < length) {
                char peek = pattern.charAt((i + 1));
                if (peek == c) {
                    buf.append(c);
                    i++;
                }else {
                    break;
                }
            } 
        }else {
            buf.append('\'');
            boolean inLiteral = false;
            for (; i < length; i++) {
                c = pattern.charAt(i);
                if (c == '\'') {
                    if (((i + 1) < length) && ((pattern.charAt((i + 1))) == '\'')) {
                        i++;
                        buf.append(c);
                    }else {
                        inLiteral = !inLiteral;
                    }
                }else
                    if ((!inLiteral) && (((c >= 'A') && (c <= 'Z')) || ((c >= 'a') && (c <= 'z')))) {
                        i--;
                        break;
                    }else {
                        buf.append(c);
                    }

            }
        }
        indexRef[0] = i;
        return buf.toString();
    }

    protected org.apache.commons.lang.time.FastDateFormat.NumberRule selectNumberRule(int field, int padding) {
        switch (padding) {
            case 1 :
                return new org.apache.commons.lang.time.FastDateFormat.UnpaddedNumberField(field);
            case 2 :
                return new org.apache.commons.lang.time.FastDateFormat.TwoDigitNumberField(field);
            default :
                return new org.apache.commons.lang.time.FastDateFormat.PaddedNumberField(field, padding);
        }
    }

    public java.lang.StringBuffer format(java.lang.Object obj, java.lang.StringBuffer toAppendTo, java.text.FieldPosition pos) {
        if (obj instanceof java.util.Date) {
            return format(((java.util.Date) (obj)), toAppendTo);
        }else
            if (obj instanceof java.util.Calendar) {
                return format(((java.util.Calendar) (obj)), toAppendTo);
            }else
                if (obj instanceof java.lang.Long) {
                    return format(((java.lang.Long) (obj)).longValue(), toAppendTo);
                }else {
                    throw new java.lang.IllegalArgumentException(("Unknown class: " + (obj == null ? "<null>" : obj.getClass().getName())));
                }


    }

    public java.lang.String format(long millis) {
        return format(new java.util.Date(millis));
    }

    public java.lang.String format(java.util.Date date) {
        java.util.Calendar c = new java.util.GregorianCalendar(mTimeZone);
        c.setTime(date);
        return applyRules(c, new java.lang.StringBuffer(mMaxLengthEstimate)).toString();
    }

    public java.lang.String format(java.util.Calendar calendar) {
        return format(calendar, new java.lang.StringBuffer(mMaxLengthEstimate)).toString();
    }

    public java.lang.StringBuffer format(long millis, java.lang.StringBuffer buf) {
        return format(new java.util.Date(millis), buf);
    }

    public java.lang.StringBuffer format(java.util.Date date, java.lang.StringBuffer buf) {
        java.util.Calendar c = new java.util.GregorianCalendar(mTimeZone);
        c.setTime(date);
        return applyRules(c, buf);
    }

    public java.lang.StringBuffer format(java.util.Calendar calendar, java.lang.StringBuffer buf) {
        if (mTimeZoneForced) {
            calendar = ((java.util.Calendar) (calendar.clone()));
            calendar.setTimeZone(mTimeZone);
        }
        return applyRules(calendar, buf);
    }

    protected java.lang.StringBuffer applyRules(java.util.Calendar calendar, java.lang.StringBuffer buf) {
        org.apache.commons.lang.time.FastDateFormat.Rule[] rules = mRules;
        int len = mRules.length;
        for (int i = 0; i < len; i++) {
            rules[i].appendTo(buf, calendar);
        }
        return buf;
    }

    public java.lang.Object parseObject(java.lang.String source, java.text.ParsePosition pos) {
        pos.setIndex(0);
        pos.setErrorIndex(0);
        return null;
    }

    public java.lang.String getPattern() {
        return mPattern;
    }

    public java.util.TimeZone getTimeZone() {
        return mTimeZone;
    }

    public boolean getTimeZoneOverridesCalendar() {
        return mTimeZoneForced;
    }

    public java.util.Locale getLocale() {
        return mLocale;
    }

    public int getMaxLengthEstimate() {
        return mMaxLengthEstimate;
    }

    public boolean equals(java.lang.Object obj) {
        if ((obj instanceof org.apache.commons.lang.time.FastDateFormat) == false) {
            return false;
        }
        org.apache.commons.lang.time.FastDateFormat other = ((org.apache.commons.lang.time.FastDateFormat) (obj));
        if (((((((mPattern) == (other.mPattern)) || (mPattern.equals(other.mPattern))) && (((mTimeZone) == (other.mTimeZone)) || (mTimeZone.equals(other.mTimeZone)))) && (((mLocale) == (other.mLocale)) || (mLocale.equals(other.mLocale)))) && ((mTimeZoneForced) == (other.mTimeZoneForced))) && ((mLocaleForced) == (other.mLocaleForced))) {
            return true;
        }
        return false;
    }

    public int hashCode() {
        int total = 0;
        total += mPattern.hashCode();
        total += mTimeZone.hashCode();
        total += (mTimeZoneForced) ? 1 : 0;
        total += mLocale.hashCode();
        total += (mLocaleForced) ? 1 : 0;
        return total;
    }

    public java.lang.String toString() {
        return ("FastDateFormat[" + (mPattern)) + "]";
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
        in.defaultReadObject();
        init();
    }

    private interface Rule {
        int estimateLength();

        void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar);
    }

    private interface NumberRule extends org.apache.commons.lang.time.FastDateFormat.Rule {
        void appendTo(java.lang.StringBuffer buffer, int value);
    }

    private static class CharacterLiteral implements org.apache.commons.lang.time.FastDateFormat.Rule {
        private final char mValue;

        CharacterLiteral(char value) {
            mValue = value;
        }

        public int estimateLength() {
            return 1;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            buffer.append(mValue);
        }
    }

    private static class StringLiteral implements org.apache.commons.lang.time.FastDateFormat.Rule {
        private final java.lang.String mValue;

        StringLiteral(java.lang.String value) {
            mValue = value;
        }

        public int estimateLength() {
            return mValue.length();
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            buffer.append(mValue);
        }
    }

    private static class TextField implements org.apache.commons.lang.time.FastDateFormat.Rule {
        private final int mField;

        private final java.lang.String[] mValues;

        TextField(int field, java.lang.String[] values) {
            mField = field;
            mValues = values;
        }

        public int estimateLength() {
            int max = 0;
            for (int i = mValues.length; (--i) >= 0;) {
                int len = mValues[i].length();
                if (len > max) {
                    max = len;
                }
            }
            return max;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            buffer.append(mValues[calendar.get(mField)]);
        }
    }

    private static class UnpaddedNumberField implements org.apache.commons.lang.time.FastDateFormat.NumberRule {
        static final org.apache.commons.lang.time.FastDateFormat.UnpaddedNumberField INSTANCE_YEAR = new org.apache.commons.lang.time.FastDateFormat.UnpaddedNumberField(java.util.Calendar.YEAR);

        private final int mField;

        UnpaddedNumberField(int field) {
            mField = field;
        }

        public int estimateLength() {
            return 4;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            appendTo(buffer, calendar.get(mField));
        }

        public final void appendTo(java.lang.StringBuffer buffer, int value) {
            if (value < 10) {
                buffer.append(((char) (value + '0')));
            }else
                if (value < 100) {
                    buffer.append(((char) ((value / 10) + '0')));
                    buffer.append(((char) ((value % 10) + '0')));
                }else {
                    buffer.append(java.lang.Integer.toString(value));
                }

        }
    }

    private static class UnpaddedMonthField implements org.apache.commons.lang.time.FastDateFormat.NumberRule {
        static final org.apache.commons.lang.time.FastDateFormat.UnpaddedMonthField INSTANCE = new org.apache.commons.lang.time.FastDateFormat.UnpaddedMonthField();

        UnpaddedMonthField() {
            super();
        }

        public int estimateLength() {
            return 2;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            appendTo(buffer, ((calendar.get(java.util.Calendar.MONTH)) + 1));
        }

        public final void appendTo(java.lang.StringBuffer buffer, int value) {
            if (value < 10) {
                buffer.append(((char) (value + '0')));
            }else {
                buffer.append(((char) ((value / 10) + '0')));
                buffer.append(((char) ((value % 10) + '0')));
            }
        }
    }

    private static class PaddedNumberField implements org.apache.commons.lang.time.FastDateFormat.NumberRule {
        private final int mField;

        private final int mSize;

        PaddedNumberField(int field, int size) {
            if (size < 3) {
                throw new java.lang.IllegalArgumentException();
            }
            mField = field;
            mSize = size;
        }

        public int estimateLength() {
            return 4;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            appendTo(buffer, calendar.get(mField));
        }

        public final void appendTo(java.lang.StringBuffer buffer, int value) {
            if (value < 100) {
                for (int i = mSize; (--i) >= 2;) {
                    buffer.append('0');
                }
                buffer.append(((char) ((value / 10) + '0')));
                buffer.append(((char) ((value % 10) + '0')));
            }else {
                int digits;
                if (value < 1000) {
                    digits = 3;
                }else {
                    org.apache.commons.lang.Validate.isTrue((value > (-1)), "Negative values should not be possible", value);
                    digits = java.lang.Integer.toString(value).length();
                }
                for (int i = mSize; (--i) >= digits;) {
                    buffer.append('0');
                }
                buffer.append(java.lang.Integer.toString(value));
            }
        }
    }

    private static class TwoDigitNumberField implements org.apache.commons.lang.time.FastDateFormat.NumberRule {
        private final int mField;

        TwoDigitNumberField(int field) {
            mField = field;
        }

        public int estimateLength() {
            return 2;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            appendTo(buffer, calendar.get(mField));
        }

        public final void appendTo(java.lang.StringBuffer buffer, int value) {
            if (value < 100) {
                buffer.append(((char) ((value / 10) + '0')));
                buffer.append(((char) ((value % 10) + '0')));
            }else {
                buffer.append(java.lang.Integer.toString(value));
            }
        }
    }

    private static class TwoDigitYearField implements org.apache.commons.lang.time.FastDateFormat.NumberRule {
        static final org.apache.commons.lang.time.FastDateFormat.TwoDigitYearField INSTANCE = new org.apache.commons.lang.time.FastDateFormat.TwoDigitYearField();

        TwoDigitYearField() {
            super();
        }

        public int estimateLength() {
            return 2;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            appendTo(buffer, ((calendar.get(java.util.Calendar.YEAR)) % 100));
        }

        public final void appendTo(java.lang.StringBuffer buffer, int value) {
            buffer.append(((char) ((value / 10) + '0')));
            buffer.append(((char) ((value % 10) + '0')));
        }
    }

    private static class TwoDigitMonthField implements org.apache.commons.lang.time.FastDateFormat.NumberRule {
        static final org.apache.commons.lang.time.FastDateFormat.TwoDigitMonthField INSTANCE = new org.apache.commons.lang.time.FastDateFormat.TwoDigitMonthField();

        TwoDigitMonthField() {
            super();
        }

        public int estimateLength() {
            return 2;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            appendTo(buffer, ((calendar.get(java.util.Calendar.MONTH)) + 1));
        }

        public final void appendTo(java.lang.StringBuffer buffer, int value) {
            buffer.append(((char) ((value / 10) + '0')));
            buffer.append(((char) ((value % 10) + '0')));
        }
    }

    private static class TwelveHourField implements org.apache.commons.lang.time.FastDateFormat.NumberRule {
        private final org.apache.commons.lang.time.FastDateFormat.NumberRule mRule;

        TwelveHourField(org.apache.commons.lang.time.FastDateFormat.NumberRule rule) {
            mRule = rule;
        }

        public int estimateLength() {
            return mRule.estimateLength();
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            int value = calendar.get(java.util.Calendar.HOUR);
            if (value == 0) {
                value = (calendar.getLeastMaximum(java.util.Calendar.HOUR)) + 1;
            }
            mRule.appendTo(buffer, value);
        }

        public void appendTo(java.lang.StringBuffer buffer, int value) {
            mRule.appendTo(buffer, value);
        }
    }

    private static class TwentyFourHourField implements org.apache.commons.lang.time.FastDateFormat.NumberRule {
        private final org.apache.commons.lang.time.FastDateFormat.NumberRule mRule;

        TwentyFourHourField(org.apache.commons.lang.time.FastDateFormat.NumberRule rule) {
            mRule = rule;
        }

        public int estimateLength() {
            return mRule.estimateLength();
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            int value = calendar.get(java.util.Calendar.HOUR_OF_DAY);
            if (value == 0) {
                value = (calendar.getMaximum(java.util.Calendar.HOUR_OF_DAY)) + 1;
            }
            mRule.appendTo(buffer, value);
        }

        public void appendTo(java.lang.StringBuffer buffer, int value) {
            mRule.appendTo(buffer, value);
        }
    }

    private static class TimeZoneNameRule implements org.apache.commons.lang.time.FastDateFormat.Rule {
        private final java.util.TimeZone mTimeZone;

        private final boolean mTimeZoneForced;

        private final java.util.Locale mLocale;

        private final int mStyle;

        private final java.lang.String mStandard;

        private final java.lang.String mDaylight;

        TimeZoneNameRule(java.util.TimeZone timeZone, boolean timeZoneForced, java.util.Locale locale, int style) {
            mTimeZone = timeZone;
            mTimeZoneForced = timeZoneForced;
            mLocale = locale;
            mStyle = style;
            if (timeZoneForced) {
                mStandard = org.apache.commons.lang.time.FastDateFormat.getTimeZoneDisplay(timeZone, false, style, locale);
                mDaylight = org.apache.commons.lang.time.FastDateFormat.getTimeZoneDisplay(timeZone, true, style, locale);
            }else {
                mStandard = null;
                mDaylight = null;
            }
        }

        public int estimateLength() {
            if (mTimeZoneForced) {
                return java.lang.Math.max(mStandard.length(), mDaylight.length());
            }else
                if ((mStyle) == (java.util.TimeZone.SHORT)) {
                    return 4;
                }else {
                    return 40;
                }

        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            if (mTimeZoneForced) {
                if ((mTimeZone.useDaylightTime()) && ((calendar.get(java.util.Calendar.DST_OFFSET)) != 0)) {
                    buffer.append(mDaylight);
                }else {
                    buffer.append(mStandard);
                }
            }else {
                java.util.TimeZone timeZone = calendar.getTimeZone();
                if ((timeZone.useDaylightTime()) && ((calendar.get(java.util.Calendar.DST_OFFSET)) != 0)) {
                    buffer.append(org.apache.commons.lang.time.FastDateFormat.getTimeZoneDisplay(timeZone, true, mStyle, mLocale));
                }else {
                    buffer.append(org.apache.commons.lang.time.FastDateFormat.getTimeZoneDisplay(timeZone, false, mStyle, mLocale));
                }
            }
        }
    }

    private static class TimeZoneNumberRule implements org.apache.commons.lang.time.FastDateFormat.Rule {
        static final org.apache.commons.lang.time.FastDateFormat.TimeZoneNumberRule INSTANCE_COLON = new org.apache.commons.lang.time.FastDateFormat.TimeZoneNumberRule(true);

        static final org.apache.commons.lang.time.FastDateFormat.TimeZoneNumberRule INSTANCE_NO_COLON = new org.apache.commons.lang.time.FastDateFormat.TimeZoneNumberRule(false);

        final boolean mColon;

        TimeZoneNumberRule(boolean colon) {
            mColon = colon;
        }

        public int estimateLength() {
            return 5;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            int offset = (calendar.get(java.util.Calendar.ZONE_OFFSET)) + (calendar.get(java.util.Calendar.DST_OFFSET));
            if (offset < 0) {
                buffer.append('-');
                offset = -offset;
            }else {
                buffer.append('+');
            }
            int hours = offset / ((60 * 60) * 1000);
            buffer.append(((char) ((hours / 10) + '0')));
            buffer.append(((char) ((hours % 10) + '0')));
            if (mColon) {
                buffer.append(':');
            }
            int minutes = (offset / (60 * 1000)) - (60 * hours);
            buffer.append(((char) ((minutes / 10) + '0')));
            buffer.append(((char) ((minutes % 10) + '0')));
        }
    }

    private static class TimeZoneDisplayKey {
        private final java.util.TimeZone mTimeZone;

        private final int mStyle;

        private final java.util.Locale mLocale;

        TimeZoneDisplayKey(java.util.TimeZone timeZone, boolean daylight, int style, java.util.Locale locale) {
            mTimeZone = timeZone;
            if (daylight) {
                style |= -2147483648;
            }
            mStyle = style;
            mLocale = locale;
        }

        public int hashCode() {
            return ((mStyle) * 31) + (mLocale.hashCode());
        }

        public boolean equals(java.lang.Object obj) {
            if ((this) == obj) {
                return true;
            }
            if (obj instanceof org.apache.commons.lang.time.FastDateFormat.TimeZoneDisplayKey) {
                org.apache.commons.lang.time.FastDateFormat.TimeZoneDisplayKey other = ((org.apache.commons.lang.time.FastDateFormat.TimeZoneDisplayKey) (obj));
                return ((mTimeZone.equals(other.mTimeZone)) && ((mStyle) == (other.mStyle))) && (mLocale.equals(other.mLocale));
            }
            return false;
        }
    }

    private static class Pair {
        private final java.lang.Object mObj1;

        private final java.lang.Object mObj2;

        public Pair(java.lang.Object obj1, java.lang.Object obj2) {
            mObj1 = obj1;
            mObj2 = obj2;
        }

        public boolean equals(java.lang.Object obj) {
            if ((this) == obj) {
                return true;
            }
            if (!(obj instanceof org.apache.commons.lang.time.FastDateFormat.Pair)) {
                return false;
            }
            org.apache.commons.lang.time.FastDateFormat.Pair key = ((org.apache.commons.lang.time.FastDateFormat.Pair) (obj));
            return ((mObj1) == null ? (key.mObj1) == null : mObj1.equals(key.mObj1)) && ((mObj2) == null ? (key.mObj2) == null : mObj2.equals(key.mObj2));
        }

        public int hashCode() {
            return ((mObj1) == null ? 0 : mObj1.hashCode()) + ((mObj2) == null ? 0 : mObj2.hashCode());
        }

        public java.lang.String toString() {
            return ((("[" + (mObj1)) + ':') + (mObj2)) + ']';
        }
    }
}
18:39:10.875 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
18:39:10.876 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #49
18:39:10.876 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang.time.FastDateFormat:634 which is executed by 2 tests
-1899260190
18:39:10.966 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:39:10.979 [pool-188-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (10 ms)
<> Total tests run: 13
<> Ignored tests: 0
<> Failed tests: 2
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
18:39:11.729 [pool-189-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (3 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:39:11.731 [pool-190-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
18:39:11.732 [pool-191-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:39:11.733 [pool-192-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

18:39:11.734 [pool-187-thread-1] DEBUG tests.output - Failing tests with false: 
[test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>, test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>]
18:39:11.734 [pool-187-thread-1] DEBUG tests.output - Failing tests with true: 
[test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>, test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>]
18:39:11.734 [pool-187-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.lang.time.FastDateFormat:634.
18:39:11.734 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #50
18:39:11.734 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang.time.FastDateFormat:633 which is executed by 2 tests
-1899260190
18:39:11.830 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:39:11.843 [pool-194-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (10 ms)
<> Total tests run: 13
<> Ignored tests: 0
<> Failed tests: 2
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

18:39:12.574 [pool-193-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
FastDateFormat.java:379: error: variable rule might not have been initialized
            rules.add(rule);
                      ^
Note: FastDateFormat.java uses unchecked or unsafe operations.
Note: Recompile with -Xlint:unchecked for details.
18:39:13.168 [pool-193-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public class FastDateFormat extends java.text.Format {
    private static final long serialVersionUID = 1L;

    public static final int FULL = java.text.DateFormat.FULL;

    public static final int LONG = java.text.DateFormat.LONG;

    public static final int MEDIUM = java.text.DateFormat.MEDIUM;

    public static final int SHORT = java.text.DateFormat.SHORT;

    private static java.lang.String cDefaultPattern;

    private static java.util.Map cInstanceCache = new java.util.HashMap(7);

    private static java.util.Map cDateInstanceCache = new java.util.HashMap(7);

    private static java.util.Map cTimeInstanceCache = new java.util.HashMap(7);

    private static java.util.Map cDateTimeInstanceCache = new java.util.HashMap(7);

    private static java.util.Map cTimeZoneDisplayCache = new java.util.HashMap(7);

    private final java.lang.String mPattern;

    private final java.util.TimeZone mTimeZone;

    private final boolean mTimeZoneForced;

    private final java.util.Locale mLocale;

    private final boolean mLocaleForced;

    private transient org.apache.commons.lang.time.FastDateFormat.Rule[] mRules;

    private transient int mMaxLengthEstimate;

    public static org.apache.commons.lang.time.FastDateFormat getInstance() {
        return org.apache.commons.lang.time.FastDateFormat.getInstance(org.apache.commons.lang.time.FastDateFormat.getDefaultPattern(), null, null);
    }

    public static org.apache.commons.lang.time.FastDateFormat getInstance(java.lang.String pattern) {
        return org.apache.commons.lang.time.FastDateFormat.getInstance(pattern, null, null);
    }

    public static org.apache.commons.lang.time.FastDateFormat getInstance(java.lang.String pattern, java.util.TimeZone timeZone) {
        return org.apache.commons.lang.time.FastDateFormat.getInstance(pattern, timeZone, null);
    }

    public static org.apache.commons.lang.time.FastDateFormat getInstance(java.lang.String pattern, java.util.Locale locale) {
        return org.apache.commons.lang.time.FastDateFormat.getInstance(pattern, null, locale);
    }

    public static synchronized org.apache.commons.lang.time.FastDateFormat getInstance(java.lang.String pattern, java.util.TimeZone timeZone, java.util.Locale locale) {
        org.apache.commons.lang.time.FastDateFormat emptyFormat = new org.apache.commons.lang.time.FastDateFormat(pattern, timeZone, locale);
        org.apache.commons.lang.time.FastDateFormat format = ((org.apache.commons.lang.time.FastDateFormat) (org.apache.commons.lang.time.FastDateFormat.cInstanceCache.get(emptyFormat)));
        if (format == null) {
            format = emptyFormat;
            format.init();
            org.apache.commons.lang.time.FastDateFormat.cInstanceCache.put(format, format);
        }
        return format;
    }

    public static org.apache.commons.lang.time.FastDateFormat getDateInstance(int style) {
        return org.apache.commons.lang.time.FastDateFormat.getDateInstance(style, null, null);
    }

    public static org.apache.commons.lang.time.FastDateFormat getDateInstance(int style, java.util.Locale locale) {
        return org.apache.commons.lang.time.FastDateFormat.getDateInstance(style, null, locale);
    }

    public static org.apache.commons.lang.time.FastDateFormat getDateInstance(int style, java.util.TimeZone timeZone) {
        return org.apache.commons.lang.time.FastDateFormat.getDateInstance(style, timeZone, null);
    }

    public static synchronized org.apache.commons.lang.time.FastDateFormat getDateInstance(int style, java.util.TimeZone timeZone, java.util.Locale locale) {
        java.lang.Object key = new java.lang.Integer(style);
        if (timeZone != null) {
            key = new org.apache.commons.lang.time.FastDateFormat.Pair(key, timeZone);
        }
        if (locale != null) {
            key = new org.apache.commons.lang.time.FastDateFormat.Pair(key, locale);
        }
        org.apache.commons.lang.time.FastDateFormat format = ((org.apache.commons.lang.time.FastDateFormat) (org.apache.commons.lang.time.FastDateFormat.cDateInstanceCache.get(key)));
        if (format == null) {
            if (locale == null) {
                locale = java.util.Locale.getDefault();
            }
            try {
                java.text.SimpleDateFormat formatter = ((java.text.SimpleDateFormat) (java.text.DateFormat.getDateInstance(style, locale)));
                java.lang.String pattern = formatter.toPattern();
                format = org.apache.commons.lang.time.FastDateFormat.getInstance(pattern, timeZone, locale);
                org.apache.commons.lang.time.FastDateFormat.cDateInstanceCache.put(key, format);
            } catch (java.lang.ClassCastException ex) {
                throw new java.lang.IllegalArgumentException(("No date pattern for locale: " + locale));
            }
        }
        return format;
    }

    public static org.apache.commons.lang.time.FastDateFormat getTimeInstance(int style) {
        return org.apache.commons.lang.time.FastDateFormat.getTimeInstance(style, null, null);
    }

    public static org.apache.commons.lang.time.FastDateFormat getTimeInstance(int style, java.util.Locale locale) {
        return org.apache.commons.lang.time.FastDateFormat.getTimeInstance(style, null, locale);
    }

    public static org.apache.commons.lang.time.FastDateFormat getTimeInstance(int style, java.util.TimeZone timeZone) {
        return org.apache.commons.lang.time.FastDateFormat.getTimeInstance(style, timeZone, null);
    }

    public static synchronized org.apache.commons.lang.time.FastDateFormat getTimeInstance(int style, java.util.TimeZone timeZone, java.util.Locale locale) {
        java.lang.Object key = new java.lang.Integer(style);
        if (timeZone != null) {
            key = new org.apache.commons.lang.time.FastDateFormat.Pair(key, timeZone);
        }
        if (locale != null) {
            key = new org.apache.commons.lang.time.FastDateFormat.Pair(key, locale);
        }
        org.apache.commons.lang.time.FastDateFormat format = ((org.apache.commons.lang.time.FastDateFormat) (org.apache.commons.lang.time.FastDateFormat.cTimeInstanceCache.get(key)));
        if (format == null) {
            if (locale == null) {
                locale = java.util.Locale.getDefault();
            }
            try {
                java.text.SimpleDateFormat formatter = ((java.text.SimpleDateFormat) (java.text.DateFormat.getTimeInstance(style, locale)));
                java.lang.String pattern = formatter.toPattern();
                format = org.apache.commons.lang.time.FastDateFormat.getInstance(pattern, timeZone, locale);
                org.apache.commons.lang.time.FastDateFormat.cTimeInstanceCache.put(key, format);
            } catch (java.lang.ClassCastException ex) {
                throw new java.lang.IllegalArgumentException(("No date pattern for locale: " + locale));
            }
        }
        return format;
    }

    public static org.apache.commons.lang.time.FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle) {
        return org.apache.commons.lang.time.FastDateFormat.getDateTimeInstance(dateStyle, timeStyle, null, null);
    }

    public static org.apache.commons.lang.time.FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, java.util.Locale locale) {
        return org.apache.commons.lang.time.FastDateFormat.getDateTimeInstance(dateStyle, timeStyle, null, locale);
    }

    public static org.apache.commons.lang.time.FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, java.util.TimeZone timeZone) {
        return org.apache.commons.lang.time.FastDateFormat.getDateTimeInstance(dateStyle, timeStyle, timeZone, null);
    }

    public static synchronized org.apache.commons.lang.time.FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, java.util.TimeZone timeZone, java.util.Locale locale) {
        java.lang.Object key = new org.apache.commons.lang.time.FastDateFormat.Pair(new java.lang.Integer(dateStyle), new java.lang.Integer(timeStyle));
        if (timeZone != null) {
            key = new org.apache.commons.lang.time.FastDateFormat.Pair(key, timeZone);
        }
        if (locale != null) {
            key = new org.apache.commons.lang.time.FastDateFormat.Pair(key, locale);
        }
        org.apache.commons.lang.time.FastDateFormat format = ((org.apache.commons.lang.time.FastDateFormat) (org.apache.commons.lang.time.FastDateFormat.cDateTimeInstanceCache.get(key)));
        if (format == null) {
            if (locale == null) {
                locale = java.util.Locale.getDefault();
            }
            try {
                java.text.SimpleDateFormat formatter = ((java.text.SimpleDateFormat) (java.text.DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale)));
                java.lang.String pattern = formatter.toPattern();
                format = org.apache.commons.lang.time.FastDateFormat.getInstance(pattern, timeZone, locale);
                org.apache.commons.lang.time.FastDateFormat.cDateTimeInstanceCache.put(key, format);
            } catch (java.lang.ClassCastException ex) {
                throw new java.lang.IllegalArgumentException(("No date time pattern for locale: " + locale));
            }
        }
        return format;
    }

    static synchronized java.lang.String getTimeZoneDisplay(java.util.TimeZone tz, boolean daylight, int style, java.util.Locale locale) {
        java.lang.Object key = new org.apache.commons.lang.time.FastDateFormat.TimeZoneDisplayKey(tz, daylight, style, locale);
        java.lang.String value = ((java.lang.String) (org.apache.commons.lang.time.FastDateFormat.cTimeZoneDisplayCache.get(key)));
        if (value == null) {
            value = tz.getDisplayName(daylight, style, locale);
            org.apache.commons.lang.time.FastDateFormat.cTimeZoneDisplayCache.put(key, value);
        }
        return value;
    }

    private static synchronized java.lang.String getDefaultPattern() {
        if ((org.apache.commons.lang.time.FastDateFormat.cDefaultPattern) == null) {
            org.apache.commons.lang.time.FastDateFormat.cDefaultPattern = new java.text.SimpleDateFormat().toPattern();
        }
        return org.apache.commons.lang.time.FastDateFormat.cDefaultPattern;
    }

    protected FastDateFormat(java.lang.String pattern, java.util.TimeZone timeZone, java.util.Locale locale) {
        super();
        if (pattern == null) {
            throw new java.lang.IllegalArgumentException("The pattern must not be null");
        }
        mPattern = pattern;
        mTimeZoneForced = timeZone != null;
        if (timeZone == null) {
            timeZone = java.util.TimeZone.getDefault();
        }
        mTimeZone = timeZone;
        mLocaleForced = locale != null;
        if (locale == null) {
            locale = java.util.Locale.getDefault();
        }
        mLocale = locale;
    }

    protected void init() {
        java.util.List rulesList = parsePattern();
        mRules = ((org.apache.commons.lang.time.FastDateFormat.Rule[]) (rulesList.toArray(new org.apache.commons.lang.time.FastDateFormat.Rule[rulesList.size()])));
        int len = 0;
        for (int i = mRules.length; (--i) >= 0;) {
            len += mRules[i].estimateLength();
        }
        mMaxLengthEstimate = len;
    }

    protected java.util.List parsePattern() {
        java.text.DateFormatSymbols symbols = new java.text.DateFormatSymbols(mLocale);
        java.util.List rules = new java.util.ArrayList();
        java.lang.String[] ERAs = symbols.getEras();
        java.lang.String[] months = symbols.getMonths();
        java.lang.String[] shortMonths = symbols.getShortMonths();
        java.lang.String[] weekdays = symbols.getWeekdays();
        java.lang.String[] shortWeekdays = symbols.getShortWeekdays();
        java.lang.String[] AmPmStrings = symbols.getAmPmStrings();
        int length = mPattern.length();
        int[] indexRef = new int[1];
        for (int i = 0; i < length; i++) {
            indexRef[0] = i;
            java.lang.String token = parseToken(mPattern, indexRef);
            i = indexRef[0];
            int tokenLen = token.length();
            if (tokenLen == 0) {
                break;
            }
            org.apache.commons.lang.time.FastDateFormat.Rule rule;
            char c = token.charAt(0);
            switch (c) {
                case 'G' :
                    rule = new org.apache.commons.lang.time.FastDateFormat.TextField(java.util.Calendar.ERA, ERAs);
                    break;
                case 'y' :
                    if (tokenLen >= 4) {
                        rule = selectNumberRule(java.util.Calendar.YEAR, tokenLen);
                    }else {
                        rule = org.apache.commons.lang.time.FastDateFormat.TwoDigitYearField.INSTANCE;
                    }
                    break;
                case 'M' :
                    if (tokenLen >= 4) {
                        rule = new org.apache.commons.lang.time.FastDateFormat.TextField(java.util.Calendar.MONTH, months);
                    }else
                        if (tokenLen == 3) {
                            rule = new org.apache.commons.lang.time.FastDateFormat.TextField(java.util.Calendar.MONTH, shortMonths);
                        }else
                            if (tokenLen == 2) {
                                rule = org.apache.commons.lang.time.FastDateFormat.TwoDigitMonthField.INSTANCE;
                            }else {
                                rule = org.apache.commons.lang.time.FastDateFormat.UnpaddedMonthField.INSTANCE;
                            }


                    break;
                case 'd' :
                    rule = selectNumberRule(java.util.Calendar.DAY_OF_MONTH, tokenLen);
                    break;
                case 'h' :
                    boolean spoonDefaultValue = false;
                    try {
                        spoonDefaultValue = true;
                    } catch (java.lang.Exception __NopolProcessorException) {
                    }
                    boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                    if (fr.inria.lille.commons.trace.RuntimeValues.instance(37).isEnabled()) {
                        fr.inria.lille.commons.trace.RuntimeValues.instance(37).collectionStarts();
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(37).collectInput("shortMonths",shortMonths);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(37).collectInput("org.apache.commons.lang.time.FastDateFormat.this.mMaxLengthEstimate",org.apache.commons.lang.time.FastDateFormat.this.mMaxLengthEstimate);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(37).collectInput("org.apache.commons.lang.time.FastDateFormat.this.mTimeZoneForced",org.apache.commons.lang.time.FastDateFormat.this.mTimeZoneForced);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(37).collectInput("shortWeekdays",shortWeekdays);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(37).collectInput("rules",rules);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(37).collectInput("org.apache.commons.lang.time.FastDateFormat.MEDIUM",org.apache.commons.lang.time.FastDateFormat.MEDIUM);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(37).collectInput("symbols",symbols);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(37).collectInput("indexRef",indexRef);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(37).collectInput("org.apache.commons.lang.time.FastDateFormat.this.mRules",org.apache.commons.lang.time.FastDateFormat.this.mRules);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(37).collectInput("org.apache.commons.lang.time.FastDateFormat.this.mTimeZone",org.apache.commons.lang.time.FastDateFormat.this.mTimeZone);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(37).collectInput("org.apache.commons.lang.time.FastDateFormat.cTimeInstanceCache",org.apache.commons.lang.time.FastDateFormat.cTimeInstanceCache);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(37).collectInput("org.apache.commons.lang.time.FastDateFormat.this.mLocaleForced",org.apache.commons.lang.time.FastDateFormat.this.mLocaleForced);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(37).collectInput("ERAs",ERAs);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(37).collectInput("org.apache.commons.lang.time.FastDateFormat.this.mPattern",org.apache.commons.lang.time.FastDateFormat.this.mPattern);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(37).collectInput("org.apache.commons.lang.time.FastDateFormat.SHORT",org.apache.commons.lang.time.FastDateFormat.SHORT);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(37).collectInput("c",c);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(37).collectInput("months",months);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(37).collectInput("weekdays",weekdays);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(37).collectInput("org.apache.commons.lang.time.FastDateFormat.cDateInstanceCache",org.apache.commons.lang.time.FastDateFormat.cDateInstanceCache);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(37).collectInput("length",length);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(37).collectInput("org.apache.commons.lang.time.FastDateFormat.LONG",org.apache.commons.lang.time.FastDateFormat.LONG);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(37).collectInput("tokenLen",tokenLen);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(37).collectInput("org.apache.commons.lang.time.FastDateFormat.cInstanceCache",org.apache.commons.lang.time.FastDateFormat.cInstanceCache);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(37).collectInput("org.apache.commons.lang.time.FastDateFormat.this.mLocale",org.apache.commons.lang.time.FastDateFormat.this.mLocale);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(37).collectInput("token",token);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(37).collectInput("org.apache.commons.lang.time.FastDateFormat.cTimeZoneDisplayCache",org.apache.commons.lang.time.FastDateFormat.cTimeZoneDisplayCache);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(37).collectInput("AmPmStrings",AmPmStrings);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(37).collectInput("org.apache.commons.lang.time.FastDateFormat.cDateTimeInstanceCache",org.apache.commons.lang.time.FastDateFormat.cDateTimeInstanceCache);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(37).collectInput("org.apache.commons.lang.time.FastDateFormat.cDefaultPattern",org.apache.commons.lang.time.FastDateFormat.cDefaultPattern);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(37).collectInput("org.apache.commons.lang.time.FastDateFormat.FULL",org.apache.commons.lang.time.FastDateFormat.FULL);} catch (Exception ex1) {ex1.printStackTrace();};
                        fr.inria.lille.commons.trace.RuntimeValues.instance(37).collectOutput(runtimeAngelicValue);
                        fr.inria.lille.commons.trace.RuntimeValues.instance(37).collectionEnds();
                    }
                    if (runtimeAngelicValue)
                        rule = new org.apache.commons.lang.time.FastDateFormat.TwelveHourField(selectNumberRule(java.util.Calendar.HOUR, tokenLen));

                    break;
                case 'H' :
                    rule = selectNumberRule(java.util.Calendar.HOUR_OF_DAY, tokenLen);
                    break;
                case 'm' :
                    rule = selectNumberRule(java.util.Calendar.MINUTE, tokenLen);
                    break;
                case 's' :
                    rule = selectNumberRule(java.util.Calendar.SECOND, tokenLen);
                    break;
                case 'S' :
                    rule = selectNumberRule(java.util.Calendar.MILLISECOND, tokenLen);
                    break;
                case 'E' :
                    rule = new org.apache.commons.lang.time.FastDateFormat.TextField(java.util.Calendar.DAY_OF_WEEK, (tokenLen < 4 ? shortWeekdays : weekdays));
                    break;
                case 'D' :
                    rule = selectNumberRule(java.util.Calendar.DAY_OF_YEAR, tokenLen);
                    break;
                case 'F' :
                    rule = selectNumberRule(java.util.Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);
                    break;
                case 'w' :
                    rule = selectNumberRule(java.util.Calendar.WEEK_OF_YEAR, tokenLen);
                    break;
                case 'W' :
                    rule = selectNumberRule(java.util.Calendar.WEEK_OF_MONTH, tokenLen);
                    break;
                case 'a' :
                    rule = new org.apache.commons.lang.time.FastDateFormat.TextField(java.util.Calendar.AM_PM, AmPmStrings);
                    break;
                case 'k' :
                    rule = new org.apache.commons.lang.time.FastDateFormat.TwentyFourHourField(selectNumberRule(java.util.Calendar.HOUR_OF_DAY, tokenLen));
                    break;
                case 'K' :
                    rule = selectNumberRule(java.util.Calendar.HOUR, tokenLen);
                    break;
                case 'z' :
                    if (tokenLen >= 4) {
                        rule = new org.apache.commons.lang.time.FastDateFormat.TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, java.util.TimeZone.LONG);
                    }else {
                        rule = new org.apache.commons.lang.time.FastDateFormat.TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, java.util.TimeZone.SHORT);
                    }
                    break;
                case 'Z' :
                    if (tokenLen == 1) {
                        rule = org.apache.commons.lang.time.FastDateFormat.TimeZoneNumberRule.INSTANCE_NO_COLON;
                    }else {
                        rule = org.apache.commons.lang.time.FastDateFormat.TimeZoneNumberRule.INSTANCE_COLON;
                    }
                    break;
                case '\'' :
                    java.lang.String sub = token.substring(1);
                    if ((sub.length()) == 1) {
                        rule = new org.apache.commons.lang.time.FastDateFormat.CharacterLiteral(sub.charAt(0));
                    }else {
                        rule = new org.apache.commons.lang.time.FastDateFormat.StringLiteral(sub);
                    }
                    break;
                default :
                    throw new java.lang.IllegalArgumentException(("Illegal pattern component: " + token));
            }
            rules.add(rule);
        }
        return rules;
    }

    protected java.lang.String parseToken(java.lang.String pattern, int[] indexRef) {
        java.lang.StringBuffer buf = new java.lang.StringBuffer();
        int i = indexRef[0];
        int length = pattern.length();
        char c = pattern.charAt(i);
        if (((c >= 'A') && (c <= 'Z')) || ((c >= 'a') && (c <= 'z'))) {
            buf.append(c);
            while ((i + 1) < length) {
                char peek = pattern.charAt((i + 1));
                if (peek == c) {
                    buf.append(c);
                    i++;
                }else {
                    break;
                }
            } 
        }else {
            buf.append('\'');
            boolean inLiteral = false;
            for (; i < length; i++) {
                c = pattern.charAt(i);
                if (c == '\'') {
                    if (((i + 1) < length) && ((pattern.charAt((i + 1))) == '\'')) {
                        i++;
                        buf.append(c);
                    }else {
                        inLiteral = !inLiteral;
                    }
                }else
                    if ((!inLiteral) && (((c >= 'A') && (c <= 'Z')) || ((c >= 'a') && (c <= 'z')))) {
                        i--;
                        break;
                    }else {
                        buf.append(c);
                    }

            }
        }
        indexRef[0] = i;
        return buf.toString();
    }

    protected org.apache.commons.lang.time.FastDateFormat.NumberRule selectNumberRule(int field, int padding) {
        switch (padding) {
            case 1 :
                return new org.apache.commons.lang.time.FastDateFormat.UnpaddedNumberField(field);
            case 2 :
                return new org.apache.commons.lang.time.FastDateFormat.TwoDigitNumberField(field);
            default :
                return new org.apache.commons.lang.time.FastDateFormat.PaddedNumberField(field, padding);
        }
    }

    public java.lang.StringBuffer format(java.lang.Object obj, java.lang.StringBuffer toAppendTo, java.text.FieldPosition pos) {
        if (obj instanceof java.util.Date) {
            return format(((java.util.Date) (obj)), toAppendTo);
        }else
            if (obj instanceof java.util.Calendar) {
                return format(((java.util.Calendar) (obj)), toAppendTo);
            }else
                if (obj instanceof java.lang.Long) {
                    return format(((java.lang.Long) (obj)).longValue(), toAppendTo);
                }else {
                    throw new java.lang.IllegalArgumentException(("Unknown class: " + (obj == null ? "<null>" : obj.getClass().getName())));
                }


    }

    public java.lang.String format(long millis) {
        return format(new java.util.Date(millis));
    }

    public java.lang.String format(java.util.Date date) {
        java.util.Calendar c = new java.util.GregorianCalendar(mTimeZone);
        c.setTime(date);
        return applyRules(c, new java.lang.StringBuffer(mMaxLengthEstimate)).toString();
    }

    public java.lang.String format(java.util.Calendar calendar) {
        return format(calendar, new java.lang.StringBuffer(mMaxLengthEstimate)).toString();
    }

    public java.lang.StringBuffer format(long millis, java.lang.StringBuffer buf) {
        return format(new java.util.Date(millis), buf);
    }

    public java.lang.StringBuffer format(java.util.Date date, java.lang.StringBuffer buf) {
        java.util.Calendar c = new java.util.GregorianCalendar(mTimeZone);
        c.setTime(date);
        return applyRules(c, buf);
    }

    public java.lang.StringBuffer format(java.util.Calendar calendar, java.lang.StringBuffer buf) {
        if (mTimeZoneForced) {
            calendar = ((java.util.Calendar) (calendar.clone()));
            calendar.setTimeZone(mTimeZone);
        }
        return applyRules(calendar, buf);
    }

    protected java.lang.StringBuffer applyRules(java.util.Calendar calendar, java.lang.StringBuffer buf) {
        org.apache.commons.lang.time.FastDateFormat.Rule[] rules = mRules;
        int len = mRules.length;
        for (int i = 0; i < len; i++) {
            rules[i].appendTo(buf, calendar);
        }
        return buf;
    }

    public java.lang.Object parseObject(java.lang.String source, java.text.ParsePosition pos) {
        pos.setIndex(0);
        pos.setErrorIndex(0);
        return null;
    }

    public java.lang.String getPattern() {
        return mPattern;
    }

    public java.util.TimeZone getTimeZone() {
        return mTimeZone;
    }

    public boolean getTimeZoneOverridesCalendar() {
        return mTimeZoneForced;
    }

    public java.util.Locale getLocale() {
        return mLocale;
    }

    public int getMaxLengthEstimate() {
        return mMaxLengthEstimate;
    }

    public boolean equals(java.lang.Object obj) {
        if ((obj instanceof org.apache.commons.lang.time.FastDateFormat) == false) {
            return false;
        }
        org.apache.commons.lang.time.FastDateFormat other = ((org.apache.commons.lang.time.FastDateFormat) (obj));
        if (((((((mPattern) == (other.mPattern)) || (mPattern.equals(other.mPattern))) && (((mTimeZone) == (other.mTimeZone)) || (mTimeZone.equals(other.mTimeZone)))) && (((mLocale) == (other.mLocale)) || (mLocale.equals(other.mLocale)))) && ((mTimeZoneForced) == (other.mTimeZoneForced))) && ((mLocaleForced) == (other.mLocaleForced))) {
            return true;
        }
        return false;
    }

    public int hashCode() {
        int total = 0;
        total += mPattern.hashCode();
        total += mTimeZone.hashCode();
        total += (mTimeZoneForced) ? 1 : 0;
        total += mLocale.hashCode();
        total += (mLocaleForced) ? 1 : 0;
        return total;
    }

    public java.lang.String toString() {
        return ("FastDateFormat[" + (mPattern)) + "]";
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
        in.defaultReadObject();
        init();
    }

    private interface Rule {
        int estimateLength();

        void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar);
    }

    private interface NumberRule extends org.apache.commons.lang.time.FastDateFormat.Rule {
        void appendTo(java.lang.StringBuffer buffer, int value);
    }

    private static class CharacterLiteral implements org.apache.commons.lang.time.FastDateFormat.Rule {
        private final char mValue;

        CharacterLiteral(char value) {
            mValue = value;
        }

        public int estimateLength() {
            return 1;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            buffer.append(mValue);
        }
    }

    private static class StringLiteral implements org.apache.commons.lang.time.FastDateFormat.Rule {
        private final java.lang.String mValue;

        StringLiteral(java.lang.String value) {
            mValue = value;
        }

        public int estimateLength() {
            return mValue.length();
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            buffer.append(mValue);
        }
    }

    private static class TextField implements org.apache.commons.lang.time.FastDateFormat.Rule {
        private final int mField;

        private final java.lang.String[] mValues;

        TextField(int field, java.lang.String[] values) {
            mField = field;
            mValues = values;
        }

        public int estimateLength() {
            int max = 0;
            for (int i = mValues.length; (--i) >= 0;) {
                int len = mValues[i].length();
                if (len > max) {
                    max = len;
                }
            }
            return max;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            buffer.append(mValues[calendar.get(mField)]);
        }
    }

    private static class UnpaddedNumberField implements org.apache.commons.lang.time.FastDateFormat.NumberRule {
        static final org.apache.commons.lang.time.FastDateFormat.UnpaddedNumberField INSTANCE_YEAR = new org.apache.commons.lang.time.FastDateFormat.UnpaddedNumberField(java.util.Calendar.YEAR);

        private final int mField;

        UnpaddedNumberField(int field) {
            mField = field;
        }

        public int estimateLength() {
            return 4;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            appendTo(buffer, calendar.get(mField));
        }

        public final void appendTo(java.lang.StringBuffer buffer, int value) {
            if (value < 10) {
                buffer.append(((char) (value + '0')));
            }else
                if (value < 100) {
                    buffer.append(((char) ((value / 10) + '0')));
                    buffer.append(((char) ((value % 10) + '0')));
                }else {
                    buffer.append(java.lang.Integer.toString(value));
                }

        }
    }

    private static class UnpaddedMonthField implements org.apache.commons.lang.time.FastDateFormat.NumberRule {
        static final org.apache.commons.lang.time.FastDateFormat.UnpaddedMonthField INSTANCE = new org.apache.commons.lang.time.FastDateFormat.UnpaddedMonthField();

        UnpaddedMonthField() {
            super();
        }

        public int estimateLength() {
            return 2;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            appendTo(buffer, ((calendar.get(java.util.Calendar.MONTH)) + 1));
        }

        public final void appendTo(java.lang.StringBuffer buffer, int value) {
            if (value < 10) {
                buffer.append(((char) (value + '0')));
            }else {
                buffer.append(((char) ((value / 10) + '0')));
                buffer.append(((char) ((value % 10) + '0')));
            }
        }
    }

    private static class PaddedNumberField implements org.apache.commons.lang.time.FastDateFormat.NumberRule {
        private final int mField;

        private final int mSize;

        PaddedNumberField(int field, int size) {
            if (size < 3) {
                throw new java.lang.IllegalArgumentException();
            }
            mField = field;
            mSize = size;
        }

        public int estimateLength() {
            return 4;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            appendTo(buffer, calendar.get(mField));
        }

        public final void appendTo(java.lang.StringBuffer buffer, int value) {
            if (value < 100) {
                for (int i = mSize; (--i) >= 2;) {
                    buffer.append('0');
                }
                buffer.append(((char) ((value / 10) + '0')));
                buffer.append(((char) ((value % 10) + '0')));
            }else {
                int digits;
                if (value < 1000) {
                    digits = 3;
                }else {
                    org.apache.commons.lang.Validate.isTrue((value > (-1)), "Negative values should not be possible", value);
                    digits = java.lang.Integer.toString(value).length();
                }
                for (int i = mSize; (--i) >= digits;) {
                    buffer.append('0');
                }
                buffer.append(java.lang.Integer.toString(value));
            }
        }
    }

    private static class TwoDigitNumberField implements org.apache.commons.lang.time.FastDateFormat.NumberRule {
        private final int mField;

        TwoDigitNumberField(int field) {
            mField = field;
        }

        public int estimateLength() {
            return 2;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            appendTo(buffer, calendar.get(mField));
        }

        public final void appendTo(java.lang.StringBuffer buffer, int value) {
            if (value < 100) {
                buffer.append(((char) ((value / 10) + '0')));
                buffer.append(((char) ((value % 10) + '0')));
            }else {
                buffer.append(java.lang.Integer.toString(value));
            }
        }
    }

    private static class TwoDigitYearField implements org.apache.commons.lang.time.FastDateFormat.NumberRule {
        static final org.apache.commons.lang.time.FastDateFormat.TwoDigitYearField INSTANCE = new org.apache.commons.lang.time.FastDateFormat.TwoDigitYearField();

        TwoDigitYearField() {
            super();
        }

        public int estimateLength() {
            return 2;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            appendTo(buffer, ((calendar.get(java.util.Calendar.YEAR)) % 100));
        }

        public final void appendTo(java.lang.StringBuffer buffer, int value) {
            buffer.append(((char) ((value / 10) + '0')));
            buffer.append(((char) ((value % 10) + '0')));
        }
    }

    private static class TwoDigitMonthField implements org.apache.commons.lang.time.FastDateFormat.NumberRule {
        static final org.apache.commons.lang.time.FastDateFormat.TwoDigitMonthField INSTANCE = new org.apache.commons.lang.time.FastDateFormat.TwoDigitMonthField();

        TwoDigitMonthField() {
            super();
        }

        public int estimateLength() {
            return 2;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            appendTo(buffer, ((calendar.get(java.util.Calendar.MONTH)) + 1));
        }

        public final void appendTo(java.lang.StringBuffer buffer, int value) {
            buffer.append(((char) ((value / 10) + '0')));
            buffer.append(((char) ((value % 10) + '0')));
        }
    }

    private static class TwelveHourField implements org.apache.commons.lang.time.FastDateFormat.NumberRule {
        private final org.apache.commons.lang.time.FastDateFormat.NumberRule mRule;

        TwelveHourField(org.apache.commons.lang.time.FastDateFormat.NumberRule rule) {
            mRule = rule;
        }

        public int estimateLength() {
            return mRule.estimateLength();
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            int value = calendar.get(java.util.Calendar.HOUR);
            if (value == 0) {
                value = (calendar.getLeastMaximum(java.util.Calendar.HOUR)) + 1;
            }
            mRule.appendTo(buffer, value);
        }

        public void appendTo(java.lang.StringBuffer buffer, int value) {
            mRule.appendTo(buffer, value);
        }
    }

    private static class TwentyFourHourField implements org.apache.commons.lang.time.FastDateFormat.NumberRule {
        private final org.apache.commons.lang.time.FastDateFormat.NumberRule mRule;

        TwentyFourHourField(org.apache.commons.lang.time.FastDateFormat.NumberRule rule) {
            mRule = rule;
        }

        public int estimateLength() {
            return mRule.estimateLength();
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            int value = calendar.get(java.util.Calendar.HOUR_OF_DAY);
            if (value == 0) {
                value = (calendar.getMaximum(java.util.Calendar.HOUR_OF_DAY)) + 1;
            }
            mRule.appendTo(buffer, value);
        }

        public void appendTo(java.lang.StringBuffer buffer, int value) {
            mRule.appendTo(buffer, value);
        }
    }

    private static class TimeZoneNameRule implements org.apache.commons.lang.time.FastDateFormat.Rule {
        private final java.util.TimeZone mTimeZone;

        private final boolean mTimeZoneForced;

        private final java.util.Locale mLocale;

        private final int mStyle;

        private final java.lang.String mStandard;

        private final java.lang.String mDaylight;

        TimeZoneNameRule(java.util.TimeZone timeZone, boolean timeZoneForced, java.util.Locale locale, int style) {
            mTimeZone = timeZone;
            mTimeZoneForced = timeZoneForced;
            mLocale = locale;
            mStyle = style;
            if (timeZoneForced) {
                mStandard = org.apache.commons.lang.time.FastDateFormat.getTimeZoneDisplay(timeZone, false, style, locale);
                mDaylight = org.apache.commons.lang.time.FastDateFormat.getTimeZoneDisplay(timeZone, true, style, locale);
            }else {
                mStandard = null;
                mDaylight = null;
            }
        }

        public int estimateLength() {
            if (mTimeZoneForced) {
                return java.lang.Math.max(mStandard.length(), mDaylight.length());
            }else
                if ((mStyle) == (java.util.TimeZone.SHORT)) {
                    return 4;
                }else {
                    return 40;
                }

        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            if (mTimeZoneForced) {
                if ((mTimeZone.useDaylightTime()) && ((calendar.get(java.util.Calendar.DST_OFFSET)) != 0)) {
                    buffer.append(mDaylight);
                }else {
                    buffer.append(mStandard);
                }
            }else {
                java.util.TimeZone timeZone = calendar.getTimeZone();
                if ((timeZone.useDaylightTime()) && ((calendar.get(java.util.Calendar.DST_OFFSET)) != 0)) {
                    buffer.append(org.apache.commons.lang.time.FastDateFormat.getTimeZoneDisplay(timeZone, true, mStyle, mLocale));
                }else {
                    buffer.append(org.apache.commons.lang.time.FastDateFormat.getTimeZoneDisplay(timeZone, false, mStyle, mLocale));
                }
            }
        }
    }

    private static class TimeZoneNumberRule implements org.apache.commons.lang.time.FastDateFormat.Rule {
        static final org.apache.commons.lang.time.FastDateFormat.TimeZoneNumberRule INSTANCE_COLON = new org.apache.commons.lang.time.FastDateFormat.TimeZoneNumberRule(true);

        static final org.apache.commons.lang.time.FastDateFormat.TimeZoneNumberRule INSTANCE_NO_COLON = new org.apache.commons.lang.time.FastDateFormat.TimeZoneNumberRule(false);

        final boolean mColon;

        TimeZoneNumberRule(boolean colon) {
            mColon = colon;
        }

        public int estimateLength() {
            return 5;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            int offset = (calendar.get(java.util.Calendar.ZONE_OFFSET)) + (calendar.get(java.util.Calendar.DST_OFFSET));
            if (offset < 0) {
                buffer.append('-');
                offset = -offset;
            }else {
                buffer.append('+');
            }
            int hours = offset / ((60 * 60) * 1000);
            buffer.append(((char) ((hours / 10) + '0')));
            buffer.append(((char) ((hours % 10) + '0')));
            if (mColon) {
                buffer.append(':');
            }
            int minutes = (offset / (60 * 1000)) - (60 * hours);
            buffer.append(((char) ((minutes / 10) + '0')));
            buffer.append(((char) ((minutes % 10) + '0')));
        }
    }

    private static class TimeZoneDisplayKey {
        private final java.util.TimeZone mTimeZone;

        private final int mStyle;

        private final java.util.Locale mLocale;

        TimeZoneDisplayKey(java.util.TimeZone timeZone, boolean daylight, int style, java.util.Locale locale) {
            mTimeZone = timeZone;
            if (daylight) {
                style |= -2147483648;
            }
            mStyle = style;
            mLocale = locale;
        }

        public int hashCode() {
            return ((mStyle) * 31) + (mLocale.hashCode());
        }

        public boolean equals(java.lang.Object obj) {
            if ((this) == obj) {
                return true;
            }
            if (obj instanceof org.apache.commons.lang.time.FastDateFormat.TimeZoneDisplayKey) {
                org.apache.commons.lang.time.FastDateFormat.TimeZoneDisplayKey other = ((org.apache.commons.lang.time.FastDateFormat.TimeZoneDisplayKey) (obj));
                return ((mTimeZone.equals(other.mTimeZone)) && ((mStyle) == (other.mStyle))) && (mLocale.equals(other.mLocale));
            }
            return false;
        }
    }

    private static class Pair {
        private final java.lang.Object mObj1;

        private final java.lang.Object mObj2;

        public Pair(java.lang.Object obj1, java.lang.Object obj2) {
            mObj1 = obj1;
            mObj2 = obj2;
        }

        public boolean equals(java.lang.Object obj) {
            if ((this) == obj) {
                return true;
            }
            if (!(obj instanceof org.apache.commons.lang.time.FastDateFormat.Pair)) {
                return false;
            }
            org.apache.commons.lang.time.FastDateFormat.Pair key = ((org.apache.commons.lang.time.FastDateFormat.Pair) (obj));
            return ((mObj1) == null ? (key.mObj1) == null : mObj1.equals(key.mObj1)) && ((mObj2) == null ? (key.mObj2) == null : mObj2.equals(key.mObj2));
        }

        public int hashCode() {
            return ((mObj1) == null ? 0 : mObj1.hashCode()) + ((mObj2) == null ? 0 : mObj2.hashCode());
        }

        public java.lang.String toString() {
            return ((("[" + (mObj1)) + ':') + (mObj2)) + ']';
        }
    }
}
18:39:13.169 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
18:39:13.169 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #51
18:39:13.169 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang.time.FastDateFormat:305 which is executed by 2 tests
-1899260190
18:39:13.258 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #52
18:39:13.258 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang.time.FastDateFormat:303 which is executed by 2 tests
-1899260190
18:39:13.354 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #53
18:39:13.354 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang.time.FastDateFormat:299 which is executed by 2 tests
-1899260190
18:39:13.443 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:39:13.456 [pool-196-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (10 ms)
<> Total tests run: 13
<> Ignored tests: 0
<> Failed tests: 2
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

18:39:14.207 [pool-197-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (4 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:39:14.210 [pool-198-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
18:39:14.211 [pool-199-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:39:14.212 [pool-200-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

18:39:14.212 [pool-195-thread-1] DEBUG tests.output - Failing tests with false: 
[test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>]
18:39:14.212 [pool-195-thread-1] DEBUG tests.output - Failing tests with true: 
[test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>, test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>]
18:39:14.212 [pool-195-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.lang.time.FastDateFormat:299.
18:39:14.212 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #54
18:39:14.212 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang.time.FastDateFormat:298 which is executed by 2 tests
-1899260190
18:39:14.302 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:39:14.315 [pool-202-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (11 ms)
<> Total tests run: 13
<> Ignored tests: 0
<> Failed tests: 2
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

java.lang.NullPointerException
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:144)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke(Method.java:498)
    at junit.framework.TestCase.runTest(TestCase.java:176)
18:39:15.076 [pool-203-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (3 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[null]
java.lang.NullPointerException    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:144)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke(Method.java:498)
    at junit.framework.TestCase.runTest(TestCase.java:176)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:39:15.079 [pool-204-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
18:39:15.081 [pool-205-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:39:15.082 [pool-206-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

18:39:15.082 [pool-201-thread-1] DEBUG tests.output - Failing tests with false: 
[test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest): null, test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>]
18:39:15.082 [pool-201-thread-1] DEBUG tests.output - Failing tests with true: 
[test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>, test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>]
18:39:15.082 [pool-201-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.lang.time.FastDateFormat:298.
18:39:15.082 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #55
18:39:15.082 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang.time.FastDateFormat:297 which is executed by 2 tests
-1899260190
18:39:15.170 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #56
18:39:15.171 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang.time.FastDateFormat:296 which is executed by 2 tests
-1899260190
18:39:15.259 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #57
18:39:15.259 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang.time.FastDateFormat:292 which is executed by 2 tests
-1899260190
18:39:15.347 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:39:15.359 [pool-208-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (10 ms)
<> Total tests run: 13
<> Ignored tests: 0
<> Failed tests: 2
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

java.lang.NullPointerException
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:39:16.092 [pool-210-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
18:39:16.094 [pool-211-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:39:16.095 [pool-212-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

18:39:16.095 [pool-207-thread-1] DEBUG tests.output - Failing tests with false: 
[test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest): null, Test mechanism: 0, Test mechanism: 0, test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>]
18:39:16.095 [pool-207-thread-1] DEBUG tests.output - Failing tests with true: 
[test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>, test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>]
18:39:16.095 [pool-207-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.lang.time.FastDateFormat:292.
18:39:16.095 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:39:16.107 [pool-214-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (10 ms)
<> Total tests run: 13
<> Ignored tests: 0
<> Failed tests: 2
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

java.lang.NullPointerException
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:39:16.848 [pool-216-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
18:39:16.849 [pool-217-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:39:16.850 [pool-218-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

18:39:16.851 [pool-213-thread-1] DEBUG tests.output - Failing tests with false: 
[test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest): null, Test mechanism: 0, Test mechanism: 0, test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>]
18:39:16.851 [pool-213-thread-1] DEBUG tests.output - Failing tests with true: 
[test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>, test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>]
18:39:16.851 [pool-213-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.lang.time.FastDateFormat:292.
18:39:16.851 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #58
18:39:16.851 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang.time.FastDateFormat:291 which is executed by 2 tests
-1899260190
18:39:16.939 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:39:16.952 [pool-220-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (10 ms)
<> Total tests run: 13
<> Ignored tests: 0
<> Failed tests: 2
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

java.lang.NullPointerException
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:144)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke(Method.java:498)
    at junit.framework.TestCase.runTest(TestCase.java:176)
18:39:17.694 [pool-221-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (3 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[null]
java.lang.NullPointerException    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:144)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke(Method.java:498)
    at junit.framework.TestCase.runTest(TestCase.java:176)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:39:17.697 [pool-222-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
18:39:17.698 [pool-223-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:39:17.699 [pool-224-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

18:39:17.699 [pool-219-thread-1] DEBUG tests.output - Failing tests with false: 
[test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest): null, test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>]
18:39:17.699 [pool-219-thread-1] DEBUG tests.output - Failing tests with true: 
[test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>, test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>]
18:39:17.699 [pool-219-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.lang.time.FastDateFormat:291.
18:39:17.699 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:39:17.711 [pool-226-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (10 ms)
<> Total tests run: 13
<> Ignored tests: 0
<> Failed tests: 2
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

java.lang.NullPointerException
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:144)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke(Method.java:498)
    at junit.framework.TestCase.runTest(TestCase.java:176)
18:39:18.462 [pool-227-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[null]
java.lang.NullPointerException    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:144)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke(Method.java:498)
    at junit.framework.TestCase.runTest(TestCase.java:176)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:39:18.465 [pool-228-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

18:39:18.466 [pool-229-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:39:18.466 [pool-230-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

18:39:18.467 [pool-225-thread-1] DEBUG tests.output - Failing tests with false: 
[test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest): null, test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>]
18:39:18.467 [pool-225-thread-1] DEBUG tests.output - Failing tests with true: 
[test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>]
18:39:18.467 [pool-225-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.lang.time.FastDateFormat:291.
18:39:18.467 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #59
18:39:18.467 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang.time.FastDateFormat:290 which is executed by 2 tests
-1899260190
18:39:18.555 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #60
18:39:18.555 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang.time.FastDateFormat:286 which is executed by 2 tests
-1899260190
18:39:18.651 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:39:18.664 [pool-232-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (10 ms)
<> Total tests run: 13
<> Ignored tests: 0
<> Failed tests: 2
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

junit.framework.AssertionFailedError: expected same:<en_US> was not:<de_DE>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:145)
18:39:19.405 [pool-233-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (3 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<en_US> was not:<de_DE>]
junit.framework.AssertionFailedError: expected same:<en_US> was not:<de_DE>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:145)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:39:19.408 [pool-234-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

junit.framework.AssertionFailedError: expected same:<en_US> was not:<de_DE>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:145)
18:39:19.409 [pool-235-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<en_US> was not:<de_DE>]
junit.framework.AssertionFailedError: expected same:<en_US> was not:<de_DE>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:145)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:39:19.410 [pool-236-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

18:39:19.410 [pool-231-thread-1] DEBUG tests.output - Failing tests with false: 
[test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<en_US> was not:<de_DE>, test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>]
18:39:19.410 [pool-231-thread-1] DEBUG tests.output - Failing tests with true: 
[test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<en_US> was not:<de_DE>, test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>]
18:39:19.410 [pool-231-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.lang.time.FastDateFormat:286.
18:39:19.410 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #61
18:39:19.410 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang.time.FastDateFormat:285 which is executed by 2 tests
-1899260190
18:39:19.506 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:39:19.519 [pool-238-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (11 ms)
<> Total tests run: 13
<> Ignored tests: 0
<> Failed tests: 2
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

junit.framework.AssertionFailedError: expected same:<en_US> was not:<de_DE>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:145)
18:39:20.267 [pool-239-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (4 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<en_US> was not:<de_DE>]
junit.framework.AssertionFailedError: expected same:<en_US> was not:<de_DE>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:145)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:39:20.269 [pool-240-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

junit.framework.AssertionFailedError: expected same:<en_US> was not:<de_DE>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:145)
18:39:20.271 [pool-241-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<en_US> was not:<de_DE>]
junit.framework.AssertionFailedError: expected same:<en_US> was not:<de_DE>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:145)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:39:20.271 [pool-242-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

18:39:20.272 [pool-237-thread-1] DEBUG tests.output - Failing tests with false: 
[test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<en_US> was not:<de_DE>, test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>]
18:39:20.272 [pool-237-thread-1] DEBUG tests.output - Failing tests with true: 
[test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<en_US> was not:<de_DE>, test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>]
18:39:20.272 [pool-237-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.lang.time.FastDateFormat:285.
18:39:20.272 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:39:20.285 [pool-244-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (10 ms)
<> Total tests run: 13
<> Ignored tests: 0
<> Failed tests: 2
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

junit.framework.AssertionFailedError: expected same:<en_US> was not:<de_DE>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:145)
18:39:21.025 [pool-245-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (3 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<en_US> was not:<de_DE>]
junit.framework.AssertionFailedError: expected same:<en_US> was not:<de_DE>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:145)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:39:21.027 [pool-246-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
18:39:21.029 [pool-247-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:39:21.029 [pool-248-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

18:39:21.030 [pool-243-thread-1] DEBUG tests.output - Failing tests with false: 
[test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<en_US> was not:<de_DE>, test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>]
18:39:21.030 [pool-243-thread-1] DEBUG tests.output - Failing tests with true: 
[test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>, test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>]
18:39:21.030 [pool-243-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.lang.time.FastDateFormat:285.
18:39:21.030 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #62
18:39:21.030 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang.time.FastDateFormat:281 which is executed by 2 tests
-1899260190
18:39:21.126 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:39:21.140 [pool-250-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (11 ms)
<> Total tests run: 13
<> Ignored tests: 0
<> Failed tests: 2
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
18:39:21.882 [pool-251-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (4 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:39:21.884 [pool-252-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
18:39:21.885 [pool-253-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:39:21.886 [pool-254-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

18:39:21.887 [pool-249-thread-1] DEBUG tests.output - Failing tests with false: 
[test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>, test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>]
18:39:21.887 [pool-249-thread-1] DEBUG tests.output - Failing tests with true: 
[test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>, test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>]
18:39:21.887 [pool-249-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.lang.time.FastDateFormat:281.
18:39:21.887 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:39:21.899 [pool-256-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (10 ms)
<> Total tests run: 13
<> Ignored tests: 0
<> Failed tests: 2
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
18:39:22.645 [pool-257-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (4 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:39:22.647 [pool-258-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
18:39:22.649 [pool-259-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:39:22.650 [pool-260-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

18:39:22.650 [pool-255-thread-1] DEBUG tests.output - Failing tests with false: 
[test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>, test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>]
18:39:22.650 [pool-255-thread-1] DEBUG tests.output - Failing tests with true: 
[test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>, test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>]
18:39:22.650 [pool-255-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.lang.time.FastDateFormat:281.
18:39:22.651 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #63
18:39:22.651 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang.time.FastDateFormat:280 which is executed by 2 tests
-1899260190
18:39:22.739 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #64
18:39:22.739 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang.time.FastDateFormat:249 which is executed by 2 tests
-1899260190
18:39:22.827 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #65
18:39:22.827 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang.time.FastDateFormat:631 which is executed by 13 tests
-1899260190
18:39:22.916 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:39:22.931 [pool-262-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (12 ms)
<> Total tests run: 26
<> Ignored tests: 0
<> Failed tests: 4
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
18:39:23.671 [pool-263-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (4 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:39:23.674 [pool-264-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
18:39:23.675 [pool-265-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:39:23.676 [pool-266-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

18:39:23.676 [pool-261-thread-1] DEBUG tests.output - Failing tests with false: 
[test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>, test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>]
18:39:23.676 [pool-261-thread-1] DEBUG tests.output - Failing tests with true: 
[test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>, test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>]
18:39:23.676 [pool-261-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.lang.time.FastDateFormat:631.
18:39:23.676 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #66
18:39:23.676 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang.time.FastDateFormat:630 which is executed by 13 tests
-1899260190
18:39:23.764 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:39:23.779 [pool-268-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (11 ms)
<> Total tests run: 26
<> Ignored tests: 0
<> Failed tests: 4
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

18:39:24.502 [pool-267-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
FastDateFormat.java:379: error: variable rule might not have been initialized
            rules.add(rule);
                      ^
Note: FastDateFormat.java uses unchecked or unsafe operations.
Note: Recompile with -Xlint:unchecked for details.
18:39:25.100 [pool-267-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public class FastDateFormat extends java.text.Format {
    private static final long serialVersionUID = 1L;

    public static final int FULL = java.text.DateFormat.FULL;

    public static final int LONG = java.text.DateFormat.LONG;

    public static final int MEDIUM = java.text.DateFormat.MEDIUM;

    public static final int SHORT = java.text.DateFormat.SHORT;

    private static java.lang.String cDefaultPattern;

    private static java.util.Map cInstanceCache = new java.util.HashMap(7);

    private static java.util.Map cDateInstanceCache = new java.util.HashMap(7);

    private static java.util.Map cTimeInstanceCache = new java.util.HashMap(7);

    private static java.util.Map cDateTimeInstanceCache = new java.util.HashMap(7);

    private static java.util.Map cTimeZoneDisplayCache = new java.util.HashMap(7);

    private final java.lang.String mPattern;

    private final java.util.TimeZone mTimeZone;

    private final boolean mTimeZoneForced;

    private final java.util.Locale mLocale;

    private final boolean mLocaleForced;

    private transient org.apache.commons.lang.time.FastDateFormat.Rule[] mRules;

    private transient int mMaxLengthEstimate;

    public static org.apache.commons.lang.time.FastDateFormat getInstance() {
        return org.apache.commons.lang.time.FastDateFormat.getInstance(org.apache.commons.lang.time.FastDateFormat.getDefaultPattern(), null, null);
    }

    public static org.apache.commons.lang.time.FastDateFormat getInstance(java.lang.String pattern) {
        return org.apache.commons.lang.time.FastDateFormat.getInstance(pattern, null, null);
    }

    public static org.apache.commons.lang.time.FastDateFormat getInstance(java.lang.String pattern, java.util.TimeZone timeZone) {
        return org.apache.commons.lang.time.FastDateFormat.getInstance(pattern, timeZone, null);
    }

    public static org.apache.commons.lang.time.FastDateFormat getInstance(java.lang.String pattern, java.util.Locale locale) {
        return org.apache.commons.lang.time.FastDateFormat.getInstance(pattern, null, locale);
    }

    public static synchronized org.apache.commons.lang.time.FastDateFormat getInstance(java.lang.String pattern, java.util.TimeZone timeZone, java.util.Locale locale) {
        org.apache.commons.lang.time.FastDateFormat emptyFormat = new org.apache.commons.lang.time.FastDateFormat(pattern, timeZone, locale);
        org.apache.commons.lang.time.FastDateFormat format = ((org.apache.commons.lang.time.FastDateFormat) (org.apache.commons.lang.time.FastDateFormat.cInstanceCache.get(emptyFormat)));
        if (format == null) {
            format = emptyFormat;
            format.init();
            org.apache.commons.lang.time.FastDateFormat.cInstanceCache.put(format, format);
        }
        return format;
    }

    public static org.apache.commons.lang.time.FastDateFormat getDateInstance(int style) {
        return org.apache.commons.lang.time.FastDateFormat.getDateInstance(style, null, null);
    }

    public static org.apache.commons.lang.time.FastDateFormat getDateInstance(int style, java.util.Locale locale) {
        return org.apache.commons.lang.time.FastDateFormat.getDateInstance(style, null, locale);
    }

    public static org.apache.commons.lang.time.FastDateFormat getDateInstance(int style, java.util.TimeZone timeZone) {
        return org.apache.commons.lang.time.FastDateFormat.getDateInstance(style, timeZone, null);
    }

    public static synchronized org.apache.commons.lang.time.FastDateFormat getDateInstance(int style, java.util.TimeZone timeZone, java.util.Locale locale) {
        java.lang.Object key = new java.lang.Integer(style);
        if (timeZone != null) {
            key = new org.apache.commons.lang.time.FastDateFormat.Pair(key, timeZone);
        }
        if (locale != null) {
            key = new org.apache.commons.lang.time.FastDateFormat.Pair(key, locale);
        }
        org.apache.commons.lang.time.FastDateFormat format = ((org.apache.commons.lang.time.FastDateFormat) (org.apache.commons.lang.time.FastDateFormat.cDateInstanceCache.get(key)));
        if (format == null) {
            if (locale == null) {
                locale = java.util.Locale.getDefault();
            }
            try {
                java.text.SimpleDateFormat formatter = ((java.text.SimpleDateFormat) (java.text.DateFormat.getDateInstance(style, locale)));
                java.lang.String pattern = formatter.toPattern();
                format = org.apache.commons.lang.time.FastDateFormat.getInstance(pattern, timeZone, locale);
                org.apache.commons.lang.time.FastDateFormat.cDateInstanceCache.put(key, format);
            } catch (java.lang.ClassCastException ex) {
                throw new java.lang.IllegalArgumentException(("No date pattern for locale: " + locale));
            }
        }
        return format;
    }

    public static org.apache.commons.lang.time.FastDateFormat getTimeInstance(int style) {
        return org.apache.commons.lang.time.FastDateFormat.getTimeInstance(style, null, null);
    }

    public static org.apache.commons.lang.time.FastDateFormat getTimeInstance(int style, java.util.Locale locale) {
        return org.apache.commons.lang.time.FastDateFormat.getTimeInstance(style, null, locale);
    }

    public static org.apache.commons.lang.time.FastDateFormat getTimeInstance(int style, java.util.TimeZone timeZone) {
        return org.apache.commons.lang.time.FastDateFormat.getTimeInstance(style, timeZone, null);
    }

    public static synchronized org.apache.commons.lang.time.FastDateFormat getTimeInstance(int style, java.util.TimeZone timeZone, java.util.Locale locale) {
        java.lang.Object key = new java.lang.Integer(style);
        if (timeZone != null) {
            key = new org.apache.commons.lang.time.FastDateFormat.Pair(key, timeZone);
        }
        if (locale != null) {
            key = new org.apache.commons.lang.time.FastDateFormat.Pair(key, locale);
        }
        org.apache.commons.lang.time.FastDateFormat format = ((org.apache.commons.lang.time.FastDateFormat) (org.apache.commons.lang.time.FastDateFormat.cTimeInstanceCache.get(key)));
        if (format == null) {
            if (locale == null) {
                locale = java.util.Locale.getDefault();
            }
            try {
                java.text.SimpleDateFormat formatter = ((java.text.SimpleDateFormat) (java.text.DateFormat.getTimeInstance(style, locale)));
                java.lang.String pattern = formatter.toPattern();
                format = org.apache.commons.lang.time.FastDateFormat.getInstance(pattern, timeZone, locale);
                org.apache.commons.lang.time.FastDateFormat.cTimeInstanceCache.put(key, format);
            } catch (java.lang.ClassCastException ex) {
                throw new java.lang.IllegalArgumentException(("No date pattern for locale: " + locale));
            }
        }
        return format;
    }

    public static org.apache.commons.lang.time.FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle) {
        return org.apache.commons.lang.time.FastDateFormat.getDateTimeInstance(dateStyle, timeStyle, null, null);
    }

    public static org.apache.commons.lang.time.FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, java.util.Locale locale) {
        return org.apache.commons.lang.time.FastDateFormat.getDateTimeInstance(dateStyle, timeStyle, null, locale);
    }

    public static org.apache.commons.lang.time.FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, java.util.TimeZone timeZone) {
        return org.apache.commons.lang.time.FastDateFormat.getDateTimeInstance(dateStyle, timeStyle, timeZone, null);
    }

    public static synchronized org.apache.commons.lang.time.FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, java.util.TimeZone timeZone, java.util.Locale locale) {
        java.lang.Object key = new org.apache.commons.lang.time.FastDateFormat.Pair(new java.lang.Integer(dateStyle), new java.lang.Integer(timeStyle));
        if (timeZone != null) {
            key = new org.apache.commons.lang.time.FastDateFormat.Pair(key, timeZone);
        }
        if (locale != null) {
            key = new org.apache.commons.lang.time.FastDateFormat.Pair(key, locale);
        }
        org.apache.commons.lang.time.FastDateFormat format = ((org.apache.commons.lang.time.FastDateFormat) (org.apache.commons.lang.time.FastDateFormat.cDateTimeInstanceCache.get(key)));
        if (format == null) {
            if (locale == null) {
                locale = java.util.Locale.getDefault();
            }
            try {
                java.text.SimpleDateFormat formatter = ((java.text.SimpleDateFormat) (java.text.DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale)));
                java.lang.String pattern = formatter.toPattern();
                format = org.apache.commons.lang.time.FastDateFormat.getInstance(pattern, timeZone, locale);
                org.apache.commons.lang.time.FastDateFormat.cDateTimeInstanceCache.put(key, format);
            } catch (java.lang.ClassCastException ex) {
                throw new java.lang.IllegalArgumentException(("No date time pattern for locale: " + locale));
            }
        }
        return format;
    }

    static synchronized java.lang.String getTimeZoneDisplay(java.util.TimeZone tz, boolean daylight, int style, java.util.Locale locale) {
        java.lang.Object key = new org.apache.commons.lang.time.FastDateFormat.TimeZoneDisplayKey(tz, daylight, style, locale);
        java.lang.String value = ((java.lang.String) (org.apache.commons.lang.time.FastDateFormat.cTimeZoneDisplayCache.get(key)));
        if (value == null) {
            value = tz.getDisplayName(daylight, style, locale);
            org.apache.commons.lang.time.FastDateFormat.cTimeZoneDisplayCache.put(key, value);
        }
        return value;
    }

    private static synchronized java.lang.String getDefaultPattern() {
        if ((org.apache.commons.lang.time.FastDateFormat.cDefaultPattern) == null) {
            org.apache.commons.lang.time.FastDateFormat.cDefaultPattern = new java.text.SimpleDateFormat().toPattern();
        }
        return org.apache.commons.lang.time.FastDateFormat.cDefaultPattern;
    }

    protected FastDateFormat(java.lang.String pattern, java.util.TimeZone timeZone, java.util.Locale locale) {
        super();
        if (pattern == null) {
            throw new java.lang.IllegalArgumentException("The pattern must not be null");
        }
        mPattern = pattern;
        mTimeZoneForced = timeZone != null;
        if (timeZone == null) {
            timeZone = java.util.TimeZone.getDefault();
        }
        mTimeZone = timeZone;
        mLocaleForced = locale != null;
        if (locale == null) {
            locale = java.util.Locale.getDefault();
        }
        mLocale = locale;
    }

    protected void init() {
        java.util.List rulesList = parsePattern();
        mRules = ((org.apache.commons.lang.time.FastDateFormat.Rule[]) (rulesList.toArray(new org.apache.commons.lang.time.FastDateFormat.Rule[rulesList.size()])));
        int len = 0;
        for (int i = mRules.length; (--i) >= 0;) {
            len += mRules[i].estimateLength();
        }
        mMaxLengthEstimate = len;
    }

    protected java.util.List parsePattern() {
        java.text.DateFormatSymbols symbols = new java.text.DateFormatSymbols(mLocale);
        java.util.List rules = new java.util.ArrayList();
        java.lang.String[] ERAs = symbols.getEras();
        java.lang.String[] months = symbols.getMonths();
        java.lang.String[] shortMonths = symbols.getShortMonths();
        java.lang.String[] weekdays = symbols.getWeekdays();
        java.lang.String[] shortWeekdays = symbols.getShortWeekdays();
        java.lang.String[] AmPmStrings = symbols.getAmPmStrings();
        int length = mPattern.length();
        int[] indexRef = new int[1];
        for (int i = 0; i < length; i++) {
            indexRef[0] = i;
            java.lang.String token = parseToken(mPattern, indexRef);
            i = indexRef[0];
            int tokenLen = token.length();
            if (tokenLen == 0) {
                break;
            }
            org.apache.commons.lang.time.FastDateFormat.Rule rule;
            char c = token.charAt(0);
            switch (c) {
                case 'G' :
                    rule = new org.apache.commons.lang.time.FastDateFormat.TextField(java.util.Calendar.ERA, ERAs);
                    break;
                case 'y' :
                    if (tokenLen >= 4) {
                        rule = selectNumberRule(java.util.Calendar.YEAR, tokenLen);
                    }else {
                        rule = org.apache.commons.lang.time.FastDateFormat.TwoDigitYearField.INSTANCE;
                    }
                    break;
                case 'M' :
                    if (tokenLen >= 4) {
                        rule = new org.apache.commons.lang.time.FastDateFormat.TextField(java.util.Calendar.MONTH, months);
                    }else
                        if (tokenLen == 3) {
                            rule = new org.apache.commons.lang.time.FastDateFormat.TextField(java.util.Calendar.MONTH, shortMonths);
                        }else
                            if (tokenLen == 2) {
                                rule = org.apache.commons.lang.time.FastDateFormat.TwoDigitMonthField.INSTANCE;
                            }else {
                                rule = org.apache.commons.lang.time.FastDateFormat.UnpaddedMonthField.INSTANCE;
                            }


                    break;
                case 'd' :
                    boolean spoonDefaultValue = false;
                    try {
                        spoonDefaultValue = true;
                    } catch (java.lang.Exception __NopolProcessorException) {
                    }
                    boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                    if (fr.inria.lille.commons.trace.RuntimeValues.instance(50).isEnabled()) {
                        fr.inria.lille.commons.trace.RuntimeValues.instance(50).collectionStarts();
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(50).collectInput("shortMonths",shortMonths);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(50).collectInput("org.apache.commons.lang.time.FastDateFormat.this.mMaxLengthEstimate",org.apache.commons.lang.time.FastDateFormat.this.mMaxLengthEstimate);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(50).collectInput("org.apache.commons.lang.time.FastDateFormat.this.mTimeZoneForced",org.apache.commons.lang.time.FastDateFormat.this.mTimeZoneForced);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(50).collectInput("shortWeekdays",shortWeekdays);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(50).collectInput("rules",rules);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(50).collectInput("org.apache.commons.lang.time.FastDateFormat.MEDIUM",org.apache.commons.lang.time.FastDateFormat.MEDIUM);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(50).collectInput("symbols",symbols);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(50).collectInput("indexRef",indexRef);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(50).collectInput("org.apache.commons.lang.time.FastDateFormat.this.mRules",org.apache.commons.lang.time.FastDateFormat.this.mRules);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(50).collectInput("org.apache.commons.lang.time.FastDateFormat.this.mTimeZone",org.apache.commons.lang.time.FastDateFormat.this.mTimeZone);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(50).collectInput("org.apache.commons.lang.time.FastDateFormat.cTimeInstanceCache",org.apache.commons.lang.time.FastDateFormat.cTimeInstanceCache);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(50).collectInput("org.apache.commons.lang.time.FastDateFormat.this.mLocaleForced",org.apache.commons.lang.time.FastDateFormat.this.mLocaleForced);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(50).collectInput("ERAs",ERAs);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(50).collectInput("org.apache.commons.lang.time.FastDateFormat.this.mPattern",org.apache.commons.lang.time.FastDateFormat.this.mPattern);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(50).collectInput("org.apache.commons.lang.time.FastDateFormat.SHORT",org.apache.commons.lang.time.FastDateFormat.SHORT);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(50).collectInput("c",c);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(50).collectInput("months",months);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(50).collectInput("weekdays",weekdays);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(50).collectInput("org.apache.commons.lang.time.FastDateFormat.cDateInstanceCache",org.apache.commons.lang.time.FastDateFormat.cDateInstanceCache);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(50).collectInput("length",length);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(50).collectInput("org.apache.commons.lang.time.FastDateFormat.LONG",org.apache.commons.lang.time.FastDateFormat.LONG);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(50).collectInput("tokenLen",tokenLen);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(50).collectInput("org.apache.commons.lang.time.FastDateFormat.cInstanceCache",org.apache.commons.lang.time.FastDateFormat.cInstanceCache);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(50).collectInput("org.apache.commons.lang.time.FastDateFormat.this.mLocale",org.apache.commons.lang.time.FastDateFormat.this.mLocale);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(50).collectInput("token",token);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(50).collectInput("org.apache.commons.lang.time.FastDateFormat.cTimeZoneDisplayCache",org.apache.commons.lang.time.FastDateFormat.cTimeZoneDisplayCache);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(50).collectInput("AmPmStrings",AmPmStrings);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(50).collectInput("org.apache.commons.lang.time.FastDateFormat.cDateTimeInstanceCache",org.apache.commons.lang.time.FastDateFormat.cDateTimeInstanceCache);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(50).collectInput("org.apache.commons.lang.time.FastDateFormat.cDefaultPattern",org.apache.commons.lang.time.FastDateFormat.cDefaultPattern);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(50).collectInput("org.apache.commons.lang.time.FastDateFormat.FULL",org.apache.commons.lang.time.FastDateFormat.FULL);} catch (Exception ex1) {ex1.printStackTrace();};
                        fr.inria.lille.commons.trace.RuntimeValues.instance(50).collectOutput(runtimeAngelicValue);
                        fr.inria.lille.commons.trace.RuntimeValues.instance(50).collectionEnds();
                    }
                    if (runtimeAngelicValue)
                        rule = selectNumberRule(java.util.Calendar.DAY_OF_MONTH, tokenLen);

                    break;
                case 'h' :
                    rule = new org.apache.commons.lang.time.FastDateFormat.TwelveHourField(selectNumberRule(java.util.Calendar.HOUR, tokenLen));
                    break;
                case 'H' :
                    rule = selectNumberRule(java.util.Calendar.HOUR_OF_DAY, tokenLen);
                    break;
                case 'm' :
                    rule = selectNumberRule(java.util.Calendar.MINUTE, tokenLen);
                    break;
                case 's' :
                    rule = selectNumberRule(java.util.Calendar.SECOND, tokenLen);
                    break;
                case 'S' :
                    rule = selectNumberRule(java.util.Calendar.MILLISECOND, tokenLen);
                    break;
                case 'E' :
                    rule = new org.apache.commons.lang.time.FastDateFormat.TextField(java.util.Calendar.DAY_OF_WEEK, (tokenLen < 4 ? shortWeekdays : weekdays));
                    break;
                case 'D' :
                    rule = selectNumberRule(java.util.Calendar.DAY_OF_YEAR, tokenLen);
                    break;
                case 'F' :
                    rule = selectNumberRule(java.util.Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);
                    break;
                case 'w' :
                    rule = selectNumberRule(java.util.Calendar.WEEK_OF_YEAR, tokenLen);
                    break;
                case 'W' :
                    rule = selectNumberRule(java.util.Calendar.WEEK_OF_MONTH, tokenLen);
                    break;
                case 'a' :
                    rule = new org.apache.commons.lang.time.FastDateFormat.TextField(java.util.Calendar.AM_PM, AmPmStrings);
                    break;
                case 'k' :
                    rule = new org.apache.commons.lang.time.FastDateFormat.TwentyFourHourField(selectNumberRule(java.util.Calendar.HOUR_OF_DAY, tokenLen));
                    break;
                case 'K' :
                    rule = selectNumberRule(java.util.Calendar.HOUR, tokenLen);
                    break;
                case 'z' :
                    if (tokenLen >= 4) {
                        rule = new org.apache.commons.lang.time.FastDateFormat.TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, java.util.TimeZone.LONG);
                    }else {
                        rule = new org.apache.commons.lang.time.FastDateFormat.TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, java.util.TimeZone.SHORT);
                    }
                    break;
                case 'Z' :
                    if (tokenLen == 1) {
                        rule = org.apache.commons.lang.time.FastDateFormat.TimeZoneNumberRule.INSTANCE_NO_COLON;
                    }else {
                        rule = org.apache.commons.lang.time.FastDateFormat.TimeZoneNumberRule.INSTANCE_COLON;
                    }
                    break;
                case '\'' :
                    java.lang.String sub = token.substring(1);
                    if ((sub.length()) == 1) {
                        rule = new org.apache.commons.lang.time.FastDateFormat.CharacterLiteral(sub.charAt(0));
                    }else {
                        rule = new org.apache.commons.lang.time.FastDateFormat.StringLiteral(sub);
                    }
                    break;
                default :
                    throw new java.lang.IllegalArgumentException(("Illegal pattern component: " + token));
            }
            rules.add(rule);
        }
        return rules;
    }

    protected java.lang.String parseToken(java.lang.String pattern, int[] indexRef) {
        java.lang.StringBuffer buf = new java.lang.StringBuffer();
        int i = indexRef[0];
        int length = pattern.length();
        char c = pattern.charAt(i);
        if (((c >= 'A') && (c <= 'Z')) || ((c >= 'a') && (c <= 'z'))) {
            buf.append(c);
            while ((i + 1) < length) {
                char peek = pattern.charAt((i + 1));
                if (peek == c) {
                    buf.append(c);
                    i++;
                }else {
                    break;
                }
            } 
        }else {
            buf.append('\'');
            boolean inLiteral = false;
            for (; i < length; i++) {
                c = pattern.charAt(i);
                if (c == '\'') {
                    if (((i + 1) < length) && ((pattern.charAt((i + 1))) == '\'')) {
                        i++;
                        buf.append(c);
                    }else {
                        inLiteral = !inLiteral;
                    }
                }else
                    if ((!inLiteral) && (((c >= 'A') && (c <= 'Z')) || ((c >= 'a') && (c <= 'z')))) {
                        i--;
                        break;
                    }else {
                        buf.append(c);
                    }

            }
        }
        indexRef[0] = i;
        return buf.toString();
    }

    protected org.apache.commons.lang.time.FastDateFormat.NumberRule selectNumberRule(int field, int padding) {
        switch (padding) {
            case 1 :
                return new org.apache.commons.lang.time.FastDateFormat.UnpaddedNumberField(field);
            case 2 :
                return new org.apache.commons.lang.time.FastDateFormat.TwoDigitNumberField(field);
            default :
                return new org.apache.commons.lang.time.FastDateFormat.PaddedNumberField(field, padding);
        }
    }

    public java.lang.StringBuffer format(java.lang.Object obj, java.lang.StringBuffer toAppendTo, java.text.FieldPosition pos) {
        if (obj instanceof java.util.Date) {
            return format(((java.util.Date) (obj)), toAppendTo);
        }else
            if (obj instanceof java.util.Calendar) {
                return format(((java.util.Calendar) (obj)), toAppendTo);
            }else
                if (obj instanceof java.lang.Long) {
                    return format(((java.lang.Long) (obj)).longValue(), toAppendTo);
                }else {
                    throw new java.lang.IllegalArgumentException(("Unknown class: " + (obj == null ? "<null>" : obj.getClass().getName())));
                }


    }

    public java.lang.String format(long millis) {
        return format(new java.util.Date(millis));
    }

    public java.lang.String format(java.util.Date date) {
        java.util.Calendar c = new java.util.GregorianCalendar(mTimeZone);
        c.setTime(date);
        return applyRules(c, new java.lang.StringBuffer(mMaxLengthEstimate)).toString();
    }

    public java.lang.String format(java.util.Calendar calendar) {
        return format(calendar, new java.lang.StringBuffer(mMaxLengthEstimate)).toString();
    }

    public java.lang.StringBuffer format(long millis, java.lang.StringBuffer buf) {
        return format(new java.util.Date(millis), buf);
    }

    public java.lang.StringBuffer format(java.util.Date date, java.lang.StringBuffer buf) {
        java.util.Calendar c = new java.util.GregorianCalendar(mTimeZone);
        c.setTime(date);
        return applyRules(c, buf);
    }

    public java.lang.StringBuffer format(java.util.Calendar calendar, java.lang.StringBuffer buf) {
        if (mTimeZoneForced) {
            calendar = ((java.util.Calendar) (calendar.clone()));
            calendar.setTimeZone(mTimeZone);
        }
        return applyRules(calendar, buf);
    }

    protected java.lang.StringBuffer applyRules(java.util.Calendar calendar, java.lang.StringBuffer buf) {
        org.apache.commons.lang.time.FastDateFormat.Rule[] rules = mRules;
        int len = mRules.length;
        for (int i = 0; i < len; i++) {
            rules[i].appendTo(buf, calendar);
        }
        return buf;
    }

    public java.lang.Object parseObject(java.lang.String source, java.text.ParsePosition pos) {
        pos.setIndex(0);
        pos.setErrorIndex(0);
        return null;
    }

    public java.lang.String getPattern() {
        return mPattern;
    }

    public java.util.TimeZone getTimeZone() {
        return mTimeZone;
    }

    public boolean getTimeZoneOverridesCalendar() {
        return mTimeZoneForced;
    }

    public java.util.Locale getLocale() {
        return mLocale;
    }

    public int getMaxLengthEstimate() {
        return mMaxLengthEstimate;
    }

    public boolean equals(java.lang.Object obj) {
        if ((obj instanceof org.apache.commons.lang.time.FastDateFormat) == false) {
            return false;
        }
        org.apache.commons.lang.time.FastDateFormat other = ((org.apache.commons.lang.time.FastDateFormat) (obj));
        if (((((((mPattern) == (other.mPattern)) || (mPattern.equals(other.mPattern))) && (((mTimeZone) == (other.mTimeZone)) || (mTimeZone.equals(other.mTimeZone)))) && (((mLocale) == (other.mLocale)) || (mLocale.equals(other.mLocale)))) && ((mTimeZoneForced) == (other.mTimeZoneForced))) && ((mLocaleForced) == (other.mLocaleForced))) {
            return true;
        }
        return false;
    }

    public int hashCode() {
        int total = 0;
        total += mPattern.hashCode();
        total += mTimeZone.hashCode();
        total += (mTimeZoneForced) ? 1 : 0;
        total += mLocale.hashCode();
        total += (mLocaleForced) ? 1 : 0;
        return total;
    }

    public java.lang.String toString() {
        return ("FastDateFormat[" + (mPattern)) + "]";
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
        in.defaultReadObject();
        init();
    }

    private interface Rule {
        int estimateLength();

        void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar);
    }

    private interface NumberRule extends org.apache.commons.lang.time.FastDateFormat.Rule {
        void appendTo(java.lang.StringBuffer buffer, int value);
    }

    private static class CharacterLiteral implements org.apache.commons.lang.time.FastDateFormat.Rule {
        private final char mValue;

        CharacterLiteral(char value) {
            mValue = value;
        }

        public int estimateLength() {
            return 1;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            buffer.append(mValue);
        }
    }

    private static class StringLiteral implements org.apache.commons.lang.time.FastDateFormat.Rule {
        private final java.lang.String mValue;

        StringLiteral(java.lang.String value) {
            mValue = value;
        }

        public int estimateLength() {
            return mValue.length();
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            buffer.append(mValue);
        }
    }

    private static class TextField implements org.apache.commons.lang.time.FastDateFormat.Rule {
        private final int mField;

        private final java.lang.String[] mValues;

        TextField(int field, java.lang.String[] values) {
            mField = field;
            mValues = values;
        }

        public int estimateLength() {
            int max = 0;
            for (int i = mValues.length; (--i) >= 0;) {
                int len = mValues[i].length();
                if (len > max) {
                    max = len;
                }
            }
            return max;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            buffer.append(mValues[calendar.get(mField)]);
        }
    }

    private static class UnpaddedNumberField implements org.apache.commons.lang.time.FastDateFormat.NumberRule {
        static final org.apache.commons.lang.time.FastDateFormat.UnpaddedNumberField INSTANCE_YEAR = new org.apache.commons.lang.time.FastDateFormat.UnpaddedNumberField(java.util.Calendar.YEAR);

        private final int mField;

        UnpaddedNumberField(int field) {
            mField = field;
        }

        public int estimateLength() {
            return 4;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            appendTo(buffer, calendar.get(mField));
        }

        public final void appendTo(java.lang.StringBuffer buffer, int value) {
            if (value < 10) {
                buffer.append(((char) (value + '0')));
            }else
                if (value < 100) {
                    buffer.append(((char) ((value / 10) + '0')));
                    buffer.append(((char) ((value % 10) + '0')));
                }else {
                    buffer.append(java.lang.Integer.toString(value));
                }

        }
    }

    private static class UnpaddedMonthField implements org.apache.commons.lang.time.FastDateFormat.NumberRule {
        static final org.apache.commons.lang.time.FastDateFormat.UnpaddedMonthField INSTANCE = new org.apache.commons.lang.time.FastDateFormat.UnpaddedMonthField();

        UnpaddedMonthField() {
            super();
        }

        public int estimateLength() {
            return 2;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            appendTo(buffer, ((calendar.get(java.util.Calendar.MONTH)) + 1));
        }

        public final void appendTo(java.lang.StringBuffer buffer, int value) {
            if (value < 10) {
                buffer.append(((char) (value + '0')));
            }else {
                buffer.append(((char) ((value / 10) + '0')));
                buffer.append(((char) ((value % 10) + '0')));
            }
        }
    }

    private static class PaddedNumberField implements org.apache.commons.lang.time.FastDateFormat.NumberRule {
        private final int mField;

        private final int mSize;

        PaddedNumberField(int field, int size) {
            if (size < 3) {
                throw new java.lang.IllegalArgumentException();
            }
            mField = field;
            mSize = size;
        }

        public int estimateLength() {
            return 4;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            appendTo(buffer, calendar.get(mField));
        }

        public final void appendTo(java.lang.StringBuffer buffer, int value) {
            if (value < 100) {
                for (int i = mSize; (--i) >= 2;) {
                    buffer.append('0');
                }
                buffer.append(((char) ((value / 10) + '0')));
                buffer.append(((char) ((value % 10) + '0')));
            }else {
                int digits;
                if (value < 1000) {
                    digits = 3;
                }else {
                    org.apache.commons.lang.Validate.isTrue((value > (-1)), "Negative values should not be possible", value);
                    digits = java.lang.Integer.toString(value).length();
                }
                for (int i = mSize; (--i) >= digits;) {
                    buffer.append('0');
                }
                buffer.append(java.lang.Integer.toString(value));
            }
        }
    }

    private static class TwoDigitNumberField implements org.apache.commons.lang.time.FastDateFormat.NumberRule {
        private final int mField;

        TwoDigitNumberField(int field) {
            mField = field;
        }

        public int estimateLength() {
            return 2;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            appendTo(buffer, calendar.get(mField));
        }

        public final void appendTo(java.lang.StringBuffer buffer, int value) {
            if (value < 100) {
                buffer.append(((char) ((value / 10) + '0')));
                buffer.append(((char) ((value % 10) + '0')));
            }else {
                buffer.append(java.lang.Integer.toString(value));
            }
        }
    }

    private static class TwoDigitYearField implements org.apache.commons.lang.time.FastDateFormat.NumberRule {
        static final org.apache.commons.lang.time.FastDateFormat.TwoDigitYearField INSTANCE = new org.apache.commons.lang.time.FastDateFormat.TwoDigitYearField();

        TwoDigitYearField() {
            super();
        }

        public int estimateLength() {
            return 2;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            appendTo(buffer, ((calendar.get(java.util.Calendar.YEAR)) % 100));
        }

        public final void appendTo(java.lang.StringBuffer buffer, int value) {
            buffer.append(((char) ((value / 10) + '0')));
            buffer.append(((char) ((value % 10) + '0')));
        }
    }

    private static class TwoDigitMonthField implements org.apache.commons.lang.time.FastDateFormat.NumberRule {
        static final org.apache.commons.lang.time.FastDateFormat.TwoDigitMonthField INSTANCE = new org.apache.commons.lang.time.FastDateFormat.TwoDigitMonthField();

        TwoDigitMonthField() {
            super();
        }

        public int estimateLength() {
            return 2;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            appendTo(buffer, ((calendar.get(java.util.Calendar.MONTH)) + 1));
        }

        public final void appendTo(java.lang.StringBuffer buffer, int value) {
            buffer.append(((char) ((value / 10) + '0')));
            buffer.append(((char) ((value % 10) + '0')));
        }
    }

    private static class TwelveHourField implements org.apache.commons.lang.time.FastDateFormat.NumberRule {
        private final org.apache.commons.lang.time.FastDateFormat.NumberRule mRule;

        TwelveHourField(org.apache.commons.lang.time.FastDateFormat.NumberRule rule) {
            mRule = rule;
        }

        public int estimateLength() {
            return mRule.estimateLength();
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            int value = calendar.get(java.util.Calendar.HOUR);
            if (value == 0) {
                value = (calendar.getLeastMaximum(java.util.Calendar.HOUR)) + 1;
            }
            mRule.appendTo(buffer, value);
        }

        public void appendTo(java.lang.StringBuffer buffer, int value) {
            mRule.appendTo(buffer, value);
        }
    }

    private static class TwentyFourHourField implements org.apache.commons.lang.time.FastDateFormat.NumberRule {
        private final org.apache.commons.lang.time.FastDateFormat.NumberRule mRule;

        TwentyFourHourField(org.apache.commons.lang.time.FastDateFormat.NumberRule rule) {
            mRule = rule;
        }

        public int estimateLength() {
            return mRule.estimateLength();
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            int value = calendar.get(java.util.Calendar.HOUR_OF_DAY);
            if (value == 0) {
                value = (calendar.getMaximum(java.util.Calendar.HOUR_OF_DAY)) + 1;
            }
            mRule.appendTo(buffer, value);
        }

        public void appendTo(java.lang.StringBuffer buffer, int value) {
            mRule.appendTo(buffer, value);
        }
    }

    private static class TimeZoneNameRule implements org.apache.commons.lang.time.FastDateFormat.Rule {
        private final java.util.TimeZone mTimeZone;

        private final boolean mTimeZoneForced;

        private final java.util.Locale mLocale;

        private final int mStyle;

        private final java.lang.String mStandard;

        private final java.lang.String mDaylight;

        TimeZoneNameRule(java.util.TimeZone timeZone, boolean timeZoneForced, java.util.Locale locale, int style) {
            mTimeZone = timeZone;
            mTimeZoneForced = timeZoneForced;
            mLocale = locale;
            mStyle = style;
            if (timeZoneForced) {
                mStandard = org.apache.commons.lang.time.FastDateFormat.getTimeZoneDisplay(timeZone, false, style, locale);
                mDaylight = org.apache.commons.lang.time.FastDateFormat.getTimeZoneDisplay(timeZone, true, style, locale);
            }else {
                mStandard = null;
                mDaylight = null;
            }
        }

        public int estimateLength() {
            if (mTimeZoneForced) {
                return java.lang.Math.max(mStandard.length(), mDaylight.length());
            }else
                if ((mStyle) == (java.util.TimeZone.SHORT)) {
                    return 4;
                }else {
                    return 40;
                }

        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            if (mTimeZoneForced) {
                if ((mTimeZone.useDaylightTime()) && ((calendar.get(java.util.Calendar.DST_OFFSET)) != 0)) {
                    buffer.append(mDaylight);
                }else {
                    buffer.append(mStandard);
                }
            }else {
                java.util.TimeZone timeZone = calendar.getTimeZone();
                if ((timeZone.useDaylightTime()) && ((calendar.get(java.util.Calendar.DST_OFFSET)) != 0)) {
                    buffer.append(org.apache.commons.lang.time.FastDateFormat.getTimeZoneDisplay(timeZone, true, mStyle, mLocale));
                }else {
                    buffer.append(org.apache.commons.lang.time.FastDateFormat.getTimeZoneDisplay(timeZone, false, mStyle, mLocale));
                }
            }
        }
    }

    private static class TimeZoneNumberRule implements org.apache.commons.lang.time.FastDateFormat.Rule {
        static final org.apache.commons.lang.time.FastDateFormat.TimeZoneNumberRule INSTANCE_COLON = new org.apache.commons.lang.time.FastDateFormat.TimeZoneNumberRule(true);

        static final org.apache.commons.lang.time.FastDateFormat.TimeZoneNumberRule INSTANCE_NO_COLON = new org.apache.commons.lang.time.FastDateFormat.TimeZoneNumberRule(false);

        final boolean mColon;

        TimeZoneNumberRule(boolean colon) {
            mColon = colon;
        }

        public int estimateLength() {
            return 5;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            int offset = (calendar.get(java.util.Calendar.ZONE_OFFSET)) + (calendar.get(java.util.Calendar.DST_OFFSET));
            if (offset < 0) {
                buffer.append('-');
                offset = -offset;
            }else {
                buffer.append('+');
            }
            int hours = offset / ((60 * 60) * 1000);
            buffer.append(((char) ((hours / 10) + '0')));
            buffer.append(((char) ((hours % 10) + '0')));
            if (mColon) {
                buffer.append(':');
            }
            int minutes = (offset / (60 * 1000)) - (60 * hours);
            buffer.append(((char) ((minutes / 10) + '0')));
            buffer.append(((char) ((minutes % 10) + '0')));
        }
    }

    private static class TimeZoneDisplayKey {
        private final java.util.TimeZone mTimeZone;

        private final int mStyle;

        private final java.util.Locale mLocale;

        TimeZoneDisplayKey(java.util.TimeZone timeZone, boolean daylight, int style, java.util.Locale locale) {
            mTimeZone = timeZone;
            if (daylight) {
                style |= -2147483648;
            }
            mStyle = style;
            mLocale = locale;
        }

        public int hashCode() {
            return ((mStyle) * 31) + (mLocale.hashCode());
        }

        public boolean equals(java.lang.Object obj) {
            if ((this) == obj) {
                return true;
            }
            if (obj instanceof org.apache.commons.lang.time.FastDateFormat.TimeZoneDisplayKey) {
                org.apache.commons.lang.time.FastDateFormat.TimeZoneDisplayKey other = ((org.apache.commons.lang.time.FastDateFormat.TimeZoneDisplayKey) (obj));
                return ((mTimeZone.equals(other.mTimeZone)) && ((mStyle) == (other.mStyle))) && (mLocale.equals(other.mLocale));
            }
            return false;
        }
    }

    private static class Pair {
        private final java.lang.Object mObj1;

        private final java.lang.Object mObj2;

        public Pair(java.lang.Object obj1, java.lang.Object obj2) {
            mObj1 = obj1;
            mObj2 = obj2;
        }

        public boolean equals(java.lang.Object obj) {
            if ((this) == obj) {
                return true;
            }
            if (!(obj instanceof org.apache.commons.lang.time.FastDateFormat.Pair)) {
                return false;
            }
            org.apache.commons.lang.time.FastDateFormat.Pair key = ((org.apache.commons.lang.time.FastDateFormat.Pair) (obj));
            return ((mObj1) == null ? (key.mObj1) == null : mObj1.equals(key.mObj1)) && ((mObj2) == null ? (key.mObj2) == null : mObj2.equals(key.mObj2));
        }

        public int hashCode() {
            return ((mObj1) == null ? 0 : mObj1.hashCode()) + ((mObj2) == null ? 0 : mObj2.hashCode());
        }

        public java.lang.String toString() {
            return ((("[" + (mObj1)) + ':') + (mObj2)) + ']';
        }
    }
}
18:39:25.101 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
18:39:25.101 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #67
18:39:25.101 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang.time.FastDateFormat:776 which is executed by 16 tests
-1899260190
18:39:25.195 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #68
18:39:25.195 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang.time.FastDateFormat:613 which is executed by 16 tests
-1899260190
18:39:25.284 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:39:25.299 [pool-270-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (12 ms)
<> Total tests run: 26
<> Ignored tests: 0
<> Failed tests: 4
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

18:39:26.024 [pool-269-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
FastDateFormat.java:379: error: variable rule might not have been initialized
            rules.add(rule);
                      ^
Note: FastDateFormat.java uses unchecked or unsafe operations.
Note: Recompile with -Xlint:unchecked for details.
18:39:26.618 [pool-269-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public class FastDateFormat extends java.text.Format {
    private static final long serialVersionUID = 1L;

    public static final int FULL = java.text.DateFormat.FULL;

    public static final int LONG = java.text.DateFormat.LONG;

    public static final int MEDIUM = java.text.DateFormat.MEDIUM;

    public static final int SHORT = java.text.DateFormat.SHORT;

    private static java.lang.String cDefaultPattern;

    private static java.util.Map cInstanceCache = new java.util.HashMap(7);

    private static java.util.Map cDateInstanceCache = new java.util.HashMap(7);

    private static java.util.Map cTimeInstanceCache = new java.util.HashMap(7);

    private static java.util.Map cDateTimeInstanceCache = new java.util.HashMap(7);

    private static java.util.Map cTimeZoneDisplayCache = new java.util.HashMap(7);

    private final java.lang.String mPattern;

    private final java.util.TimeZone mTimeZone;

    private final boolean mTimeZoneForced;

    private final java.util.Locale mLocale;

    private final boolean mLocaleForced;

    private transient org.apache.commons.lang.time.FastDateFormat.Rule[] mRules;

    private transient int mMaxLengthEstimate;

    public static org.apache.commons.lang.time.FastDateFormat getInstance() {
        return org.apache.commons.lang.time.FastDateFormat.getInstance(org.apache.commons.lang.time.FastDateFormat.getDefaultPattern(), null, null);
    }

    public static org.apache.commons.lang.time.FastDateFormat getInstance(java.lang.String pattern) {
        return org.apache.commons.lang.time.FastDateFormat.getInstance(pattern, null, null);
    }

    public static org.apache.commons.lang.time.FastDateFormat getInstance(java.lang.String pattern, java.util.TimeZone timeZone) {
        return org.apache.commons.lang.time.FastDateFormat.getInstance(pattern, timeZone, null);
    }

    public static org.apache.commons.lang.time.FastDateFormat getInstance(java.lang.String pattern, java.util.Locale locale) {
        return org.apache.commons.lang.time.FastDateFormat.getInstance(pattern, null, locale);
    }

    public static synchronized org.apache.commons.lang.time.FastDateFormat getInstance(java.lang.String pattern, java.util.TimeZone timeZone, java.util.Locale locale) {
        org.apache.commons.lang.time.FastDateFormat emptyFormat = new org.apache.commons.lang.time.FastDateFormat(pattern, timeZone, locale);
        org.apache.commons.lang.time.FastDateFormat format = ((org.apache.commons.lang.time.FastDateFormat) (org.apache.commons.lang.time.FastDateFormat.cInstanceCache.get(emptyFormat)));
        if (format == null) {
            format = emptyFormat;
            format.init();
            org.apache.commons.lang.time.FastDateFormat.cInstanceCache.put(format, format);
        }
        return format;
    }

    public static org.apache.commons.lang.time.FastDateFormat getDateInstance(int style) {
        return org.apache.commons.lang.time.FastDateFormat.getDateInstance(style, null, null);
    }

    public static org.apache.commons.lang.time.FastDateFormat getDateInstance(int style, java.util.Locale locale) {
        return org.apache.commons.lang.time.FastDateFormat.getDateInstance(style, null, locale);
    }

    public static org.apache.commons.lang.time.FastDateFormat getDateInstance(int style, java.util.TimeZone timeZone) {
        return org.apache.commons.lang.time.FastDateFormat.getDateInstance(style, timeZone, null);
    }

    public static synchronized org.apache.commons.lang.time.FastDateFormat getDateInstance(int style, java.util.TimeZone timeZone, java.util.Locale locale) {
        java.lang.Object key = new java.lang.Integer(style);
        if (timeZone != null) {
            key = new org.apache.commons.lang.time.FastDateFormat.Pair(key, timeZone);
        }
        if (locale != null) {
            key = new org.apache.commons.lang.time.FastDateFormat.Pair(key, locale);
        }
        org.apache.commons.lang.time.FastDateFormat format = ((org.apache.commons.lang.time.FastDateFormat) (org.apache.commons.lang.time.FastDateFormat.cDateInstanceCache.get(key)));
        if (format == null) {
            if (locale == null) {
                locale = java.util.Locale.getDefault();
            }
            try {
                java.text.SimpleDateFormat formatter = ((java.text.SimpleDateFormat) (java.text.DateFormat.getDateInstance(style, locale)));
                java.lang.String pattern = formatter.toPattern();
                format = org.apache.commons.lang.time.FastDateFormat.getInstance(pattern, timeZone, locale);
                org.apache.commons.lang.time.FastDateFormat.cDateInstanceCache.put(key, format);
            } catch (java.lang.ClassCastException ex) {
                throw new java.lang.IllegalArgumentException(("No date pattern for locale: " + locale));
            }
        }
        return format;
    }

    public static org.apache.commons.lang.time.FastDateFormat getTimeInstance(int style) {
        return org.apache.commons.lang.time.FastDateFormat.getTimeInstance(style, null, null);
    }

    public static org.apache.commons.lang.time.FastDateFormat getTimeInstance(int style, java.util.Locale locale) {
        return org.apache.commons.lang.time.FastDateFormat.getTimeInstance(style, null, locale);
    }

    public static org.apache.commons.lang.time.FastDateFormat getTimeInstance(int style, java.util.TimeZone timeZone) {
        return org.apache.commons.lang.time.FastDateFormat.getTimeInstance(style, timeZone, null);
    }

    public static synchronized org.apache.commons.lang.time.FastDateFormat getTimeInstance(int style, java.util.TimeZone timeZone, java.util.Locale locale) {
        java.lang.Object key = new java.lang.Integer(style);
        if (timeZone != null) {
            key = new org.apache.commons.lang.time.FastDateFormat.Pair(key, timeZone);
        }
        if (locale != null) {
            key = new org.apache.commons.lang.time.FastDateFormat.Pair(key, locale);
        }
        org.apache.commons.lang.time.FastDateFormat format = ((org.apache.commons.lang.time.FastDateFormat) (org.apache.commons.lang.time.FastDateFormat.cTimeInstanceCache.get(key)));
        if (format == null) {
            if (locale == null) {
                locale = java.util.Locale.getDefault();
            }
            try {
                java.text.SimpleDateFormat formatter = ((java.text.SimpleDateFormat) (java.text.DateFormat.getTimeInstance(style, locale)));
                java.lang.String pattern = formatter.toPattern();
                format = org.apache.commons.lang.time.FastDateFormat.getInstance(pattern, timeZone, locale);
                org.apache.commons.lang.time.FastDateFormat.cTimeInstanceCache.put(key, format);
            } catch (java.lang.ClassCastException ex) {
                throw new java.lang.IllegalArgumentException(("No date pattern for locale: " + locale));
            }
        }
        return format;
    }

    public static org.apache.commons.lang.time.FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle) {
        return org.apache.commons.lang.time.FastDateFormat.getDateTimeInstance(dateStyle, timeStyle, null, null);
    }

    public static org.apache.commons.lang.time.FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, java.util.Locale locale) {
        return org.apache.commons.lang.time.FastDateFormat.getDateTimeInstance(dateStyle, timeStyle, null, locale);
    }

    public static org.apache.commons.lang.time.FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, java.util.TimeZone timeZone) {
        return org.apache.commons.lang.time.FastDateFormat.getDateTimeInstance(dateStyle, timeStyle, timeZone, null);
    }

    public static synchronized org.apache.commons.lang.time.FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, java.util.TimeZone timeZone, java.util.Locale locale) {
        java.lang.Object key = new org.apache.commons.lang.time.FastDateFormat.Pair(new java.lang.Integer(dateStyle), new java.lang.Integer(timeStyle));
        if (timeZone != null) {
            key = new org.apache.commons.lang.time.FastDateFormat.Pair(key, timeZone);
        }
        if (locale != null) {
            key = new org.apache.commons.lang.time.FastDateFormat.Pair(key, locale);
        }
        org.apache.commons.lang.time.FastDateFormat format = ((org.apache.commons.lang.time.FastDateFormat) (org.apache.commons.lang.time.FastDateFormat.cDateTimeInstanceCache.get(key)));
        if (format == null) {
            if (locale == null) {
                locale = java.util.Locale.getDefault();
            }
            try {
                java.text.SimpleDateFormat formatter = ((java.text.SimpleDateFormat) (java.text.DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale)));
                java.lang.String pattern = formatter.toPattern();
                format = org.apache.commons.lang.time.FastDateFormat.getInstance(pattern, timeZone, locale);
                org.apache.commons.lang.time.FastDateFormat.cDateTimeInstanceCache.put(key, format);
            } catch (java.lang.ClassCastException ex) {
                throw new java.lang.IllegalArgumentException(("No date time pattern for locale: " + locale));
            }
        }
        return format;
    }

    static synchronized java.lang.String getTimeZoneDisplay(java.util.TimeZone tz, boolean daylight, int style, java.util.Locale locale) {
        java.lang.Object key = new org.apache.commons.lang.time.FastDateFormat.TimeZoneDisplayKey(tz, daylight, style, locale);
        java.lang.String value = ((java.lang.String) (org.apache.commons.lang.time.FastDateFormat.cTimeZoneDisplayCache.get(key)));
        if (value == null) {
            value = tz.getDisplayName(daylight, style, locale);
            org.apache.commons.lang.time.FastDateFormat.cTimeZoneDisplayCache.put(key, value);
        }
        return value;
    }

    private static synchronized java.lang.String getDefaultPattern() {
        if ((org.apache.commons.lang.time.FastDateFormat.cDefaultPattern) == null) {
            org.apache.commons.lang.time.FastDateFormat.cDefaultPattern = new java.text.SimpleDateFormat().toPattern();
        }
        return org.apache.commons.lang.time.FastDateFormat.cDefaultPattern;
    }

    protected FastDateFormat(java.lang.String pattern, java.util.TimeZone timeZone, java.util.Locale locale) {
        super();
        if (pattern == null) {
            throw new java.lang.IllegalArgumentException("The pattern must not be null");
        }
        mPattern = pattern;
        mTimeZoneForced = timeZone != null;
        if (timeZone == null) {
            timeZone = java.util.TimeZone.getDefault();
        }
        mTimeZone = timeZone;
        mLocaleForced = locale != null;
        if (locale == null) {
            locale = java.util.Locale.getDefault();
        }
        mLocale = locale;
    }

    protected void init() {
        java.util.List rulesList = parsePattern();
        mRules = ((org.apache.commons.lang.time.FastDateFormat.Rule[]) (rulesList.toArray(new org.apache.commons.lang.time.FastDateFormat.Rule[rulesList.size()])));
        int len = 0;
        for (int i = mRules.length; (--i) >= 0;) {
            len += mRules[i].estimateLength();
        }
        mMaxLengthEstimate = len;
    }

    protected java.util.List parsePattern() {
        java.text.DateFormatSymbols symbols = new java.text.DateFormatSymbols(mLocale);
        java.util.List rules = new java.util.ArrayList();
        java.lang.String[] ERAs = symbols.getEras();
        java.lang.String[] months = symbols.getMonths();
        java.lang.String[] shortMonths = symbols.getShortMonths();
        java.lang.String[] weekdays = symbols.getWeekdays();
        java.lang.String[] shortWeekdays = symbols.getShortWeekdays();
        java.lang.String[] AmPmStrings = symbols.getAmPmStrings();
        int length = mPattern.length();
        int[] indexRef = new int[1];
        for (int i = 0; i < length; i++) {
            indexRef[0] = i;
            java.lang.String token = parseToken(mPattern, indexRef);
            i = indexRef[0];
            int tokenLen = token.length();
            if (tokenLen == 0) {
                break;
            }
            org.apache.commons.lang.time.FastDateFormat.Rule rule;
            char c = token.charAt(0);
            switch (c) {
                case 'G' :
                    rule = new org.apache.commons.lang.time.FastDateFormat.TextField(java.util.Calendar.ERA, ERAs);
                    break;
                case 'y' :
                    if (tokenLen >= 4) {
                        boolean spoonDefaultValue = false;
                        try {
                            spoonDefaultValue = true;
                        } catch (java.lang.Exception __NopolProcessorException) {
                        }
                        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                        if (fr.inria.lille.commons.trace.RuntimeValues.instance(51).isEnabled()) {
                            fr.inria.lille.commons.trace.RuntimeValues.instance(51).collectionStarts();
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(51).collectInput("shortMonths",shortMonths);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(51).collectInput("org.apache.commons.lang.time.FastDateFormat.this.mMaxLengthEstimate",org.apache.commons.lang.time.FastDateFormat.this.mMaxLengthEstimate);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(51).collectInput("org.apache.commons.lang.time.FastDateFormat.this.mTimeZoneForced",org.apache.commons.lang.time.FastDateFormat.this.mTimeZoneForced);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(51).collectInput("shortWeekdays",shortWeekdays);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(51).collectInput("rules",rules);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(51).collectInput("org.apache.commons.lang.time.FastDateFormat.MEDIUM",org.apache.commons.lang.time.FastDateFormat.MEDIUM);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(51).collectInput("symbols",symbols);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(51).collectInput("indexRef",indexRef);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(51).collectInput("org.apache.commons.lang.time.FastDateFormat.this.mRules",org.apache.commons.lang.time.FastDateFormat.this.mRules);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(51).collectInput("org.apache.commons.lang.time.FastDateFormat.this.mTimeZone",org.apache.commons.lang.time.FastDateFormat.this.mTimeZone);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(51).collectInput("org.apache.commons.lang.time.FastDateFormat.cTimeInstanceCache",org.apache.commons.lang.time.FastDateFormat.cTimeInstanceCache);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(51).collectInput("org.apache.commons.lang.time.FastDateFormat.this.mLocaleForced",org.apache.commons.lang.time.FastDateFormat.this.mLocaleForced);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(51).collectInput("ERAs",ERAs);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(51).collectInput("org.apache.commons.lang.time.FastDateFormat.this.mPattern",org.apache.commons.lang.time.FastDateFormat.this.mPattern);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(51).collectInput("org.apache.commons.lang.time.FastDateFormat.SHORT",org.apache.commons.lang.time.FastDateFormat.SHORT);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(51).collectInput("c",c);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(51).collectInput("months",months);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(51).collectInput("weekdays",weekdays);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(51).collectInput("org.apache.commons.lang.time.FastDateFormat.cDateInstanceCache",org.apache.commons.lang.time.FastDateFormat.cDateInstanceCache);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(51).collectInput("length",length);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(51).collectInput("org.apache.commons.lang.time.FastDateFormat.LONG",org.apache.commons.lang.time.FastDateFormat.LONG);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(51).collectInput("tokenLen",tokenLen);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(51).collectInput("org.apache.commons.lang.time.FastDateFormat.cInstanceCache",org.apache.commons.lang.time.FastDateFormat.cInstanceCache);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(51).collectInput("org.apache.commons.lang.time.FastDateFormat.this.mLocale",org.apache.commons.lang.time.FastDateFormat.this.mLocale);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(51).collectInput("token",token);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(51).collectInput("org.apache.commons.lang.time.FastDateFormat.cTimeZoneDisplayCache",org.apache.commons.lang.time.FastDateFormat.cTimeZoneDisplayCache);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(51).collectInput("AmPmStrings",AmPmStrings);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(51).collectInput("org.apache.commons.lang.time.FastDateFormat.cDateTimeInstanceCache",org.apache.commons.lang.time.FastDateFormat.cDateTimeInstanceCache);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(51).collectInput("org.apache.commons.lang.time.FastDateFormat.cDefaultPattern",org.apache.commons.lang.time.FastDateFormat.cDefaultPattern);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(51).collectInput("org.apache.commons.lang.time.FastDateFormat.FULL",org.apache.commons.lang.time.FastDateFormat.FULL);} catch (Exception ex1) {ex1.printStackTrace();};
                            fr.inria.lille.commons.trace.RuntimeValues.instance(51).collectOutput(runtimeAngelicValue);
                            fr.inria.lille.commons.trace.RuntimeValues.instance(51).collectionEnds();
                        }
                        if (runtimeAngelicValue)
                            rule = selectNumberRule(java.util.Calendar.YEAR, tokenLen);

                    }else {
                        rule = org.apache.commons.lang.time.FastDateFormat.TwoDigitYearField.INSTANCE;
                    }
                    break;
                case 'M' :
                    if (tokenLen >= 4) {
                        rule = new org.apache.commons.lang.time.FastDateFormat.TextField(java.util.Calendar.MONTH, months);
                    }else
                        if (tokenLen == 3) {
                            rule = new org.apache.commons.lang.time.FastDateFormat.TextField(java.util.Calendar.MONTH, shortMonths);
                        }else
                            if (tokenLen == 2) {
                                rule = org.apache.commons.lang.time.FastDateFormat.TwoDigitMonthField.INSTANCE;
                            }else {
                                rule = org.apache.commons.lang.time.FastDateFormat.UnpaddedMonthField.INSTANCE;
                            }


                    break;
                case 'd' :
                    rule = selectNumberRule(java.util.Calendar.DAY_OF_MONTH, tokenLen);
                    break;
                case 'h' :
                    rule = new org.apache.commons.lang.time.FastDateFormat.TwelveHourField(selectNumberRule(java.util.Calendar.HOUR, tokenLen));
                    break;
                case 'H' :
                    rule = selectNumberRule(java.util.Calendar.HOUR_OF_DAY, tokenLen);
                    break;
                case 'm' :
                    rule = selectNumberRule(java.util.Calendar.MINUTE, tokenLen);
                    break;
                case 's' :
                    rule = selectNumberRule(java.util.Calendar.SECOND, tokenLen);
                    break;
                case 'S' :
                    rule = selectNumberRule(java.util.Calendar.MILLISECOND, tokenLen);
                    break;
                case 'E' :
                    rule = new org.apache.commons.lang.time.FastDateFormat.TextField(java.util.Calendar.DAY_OF_WEEK, (tokenLen < 4 ? shortWeekdays : weekdays));
                    break;
                case 'D' :
                    rule = selectNumberRule(java.util.Calendar.DAY_OF_YEAR, tokenLen);
                    break;
                case 'F' :
                    rule = selectNumberRule(java.util.Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);
                    break;
                case 'w' :
                    rule = selectNumberRule(java.util.Calendar.WEEK_OF_YEAR, tokenLen);
                    break;
                case 'W' :
                    rule = selectNumberRule(java.util.Calendar.WEEK_OF_MONTH, tokenLen);
                    break;
                case 'a' :
                    rule = new org.apache.commons.lang.time.FastDateFormat.TextField(java.util.Calendar.AM_PM, AmPmStrings);
                    break;
                case 'k' :
                    rule = new org.apache.commons.lang.time.FastDateFormat.TwentyFourHourField(selectNumberRule(java.util.Calendar.HOUR_OF_DAY, tokenLen));
                    break;
                case 'K' :
                    rule = selectNumberRule(java.util.Calendar.HOUR, tokenLen);
                    break;
                case 'z' :
                    if (tokenLen >= 4) {
                        rule = new org.apache.commons.lang.time.FastDateFormat.TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, java.util.TimeZone.LONG);
                    }else {
                        rule = new org.apache.commons.lang.time.FastDateFormat.TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, java.util.TimeZone.SHORT);
                    }
                    break;
                case 'Z' :
                    if (tokenLen == 1) {
                        rule = org.apache.commons.lang.time.FastDateFormat.TimeZoneNumberRule.INSTANCE_NO_COLON;
                    }else {
                        rule = org.apache.commons.lang.time.FastDateFormat.TimeZoneNumberRule.INSTANCE_COLON;
                    }
                    break;
                case '\'' :
                    java.lang.String sub = token.substring(1);
                    if ((sub.length()) == 1) {
                        rule = new org.apache.commons.lang.time.FastDateFormat.CharacterLiteral(sub.charAt(0));
                    }else {
                        rule = new org.apache.commons.lang.time.FastDateFormat.StringLiteral(sub);
                    }
                    break;
                default :
                    throw new java.lang.IllegalArgumentException(("Illegal pattern component: " + token));
            }
            rules.add(rule);
        }
        return rules;
    }

    protected java.lang.String parseToken(java.lang.String pattern, int[] indexRef) {
        java.lang.StringBuffer buf = new java.lang.StringBuffer();
        int i = indexRef[0];
        int length = pattern.length();
        char c = pattern.charAt(i);
        if (((c >= 'A') && (c <= 'Z')) || ((c >= 'a') && (c <= 'z'))) {
            buf.append(c);
            while ((i + 1) < length) {
                char peek = pattern.charAt((i + 1));
                if (peek == c) {
                    buf.append(c);
                    i++;
                }else {
                    break;
                }
            } 
        }else {
            buf.append('\'');
            boolean inLiteral = false;
            for (; i < length; i++) {
                c = pattern.charAt(i);
                if (c == '\'') {
                    if (((i + 1) < length) && ((pattern.charAt((i + 1))) == '\'')) {
                        i++;
                        buf.append(c);
                    }else {
                        inLiteral = !inLiteral;
                    }
                }else
                    if ((!inLiteral) && (((c >= 'A') && (c <= 'Z')) || ((c >= 'a') && (c <= 'z')))) {
                        i--;
                        break;
                    }else {
                        buf.append(c);
                    }

            }
        }
        indexRef[0] = i;
        return buf.toString();
    }

    protected org.apache.commons.lang.time.FastDateFormat.NumberRule selectNumberRule(int field, int padding) {
        switch (padding) {
            case 1 :
                return new org.apache.commons.lang.time.FastDateFormat.UnpaddedNumberField(field);
            case 2 :
                return new org.apache.commons.lang.time.FastDateFormat.TwoDigitNumberField(field);
            default :
                return new org.apache.commons.lang.time.FastDateFormat.PaddedNumberField(field, padding);
        }
    }

    public java.lang.StringBuffer format(java.lang.Object obj, java.lang.StringBuffer toAppendTo, java.text.FieldPosition pos) {
        if (obj instanceof java.util.Date) {
            return format(((java.util.Date) (obj)), toAppendTo);
        }else
            if (obj instanceof java.util.Calendar) {
                return format(((java.util.Calendar) (obj)), toAppendTo);
            }else
                if (obj instanceof java.lang.Long) {
                    return format(((java.lang.Long) (obj)).longValue(), toAppendTo);
                }else {
                    throw new java.lang.IllegalArgumentException(("Unknown class: " + (obj == null ? "<null>" : obj.getClass().getName())));
                }


    }

    public java.lang.String format(long millis) {
        return format(new java.util.Date(millis));
    }

    public java.lang.String format(java.util.Date date) {
        java.util.Calendar c = new java.util.GregorianCalendar(mTimeZone);
        c.setTime(date);
        return applyRules(c, new java.lang.StringBuffer(mMaxLengthEstimate)).toString();
    }

    public java.lang.String format(java.util.Calendar calendar) {
        return format(calendar, new java.lang.StringBuffer(mMaxLengthEstimate)).toString();
    }

    public java.lang.StringBuffer format(long millis, java.lang.StringBuffer buf) {
        return format(new java.util.Date(millis), buf);
    }

    public java.lang.StringBuffer format(java.util.Date date, java.lang.StringBuffer buf) {
        java.util.Calendar c = new java.util.GregorianCalendar(mTimeZone);
        c.setTime(date);
        return applyRules(c, buf);
    }

    public java.lang.StringBuffer format(java.util.Calendar calendar, java.lang.StringBuffer buf) {
        if (mTimeZoneForced) {
            calendar = ((java.util.Calendar) (calendar.clone()));
            calendar.setTimeZone(mTimeZone);
        }
        return applyRules(calendar, buf);
    }

    protected java.lang.StringBuffer applyRules(java.util.Calendar calendar, java.lang.StringBuffer buf) {
        org.apache.commons.lang.time.FastDateFormat.Rule[] rules = mRules;
        int len = mRules.length;
        for (int i = 0; i < len; i++) {
            rules[i].appendTo(buf, calendar);
        }
        return buf;
    }

    public java.lang.Object parseObject(java.lang.String source, java.text.ParsePosition pos) {
        pos.setIndex(0);
        pos.setErrorIndex(0);
        return null;
    }

    public java.lang.String getPattern() {
        return mPattern;
    }

    public java.util.TimeZone getTimeZone() {
        return mTimeZone;
    }

    public boolean getTimeZoneOverridesCalendar() {
        return mTimeZoneForced;
    }

    public java.util.Locale getLocale() {
        return mLocale;
    }

    public int getMaxLengthEstimate() {
        return mMaxLengthEstimate;
    }

    public boolean equals(java.lang.Object obj) {
        if ((obj instanceof org.apache.commons.lang.time.FastDateFormat) == false) {
            return false;
        }
        org.apache.commons.lang.time.FastDateFormat other = ((org.apache.commons.lang.time.FastDateFormat) (obj));
        if (((((((mPattern) == (other.mPattern)) || (mPattern.equals(other.mPattern))) && (((mTimeZone) == (other.mTimeZone)) || (mTimeZone.equals(other.mTimeZone)))) && (((mLocale) == (other.mLocale)) || (mLocale.equals(other.mLocale)))) && ((mTimeZoneForced) == (other.mTimeZoneForced))) && ((mLocaleForced) == (other.mLocaleForced))) {
            return true;
        }
        return false;
    }

    public int hashCode() {
        int total = 0;
        total += mPattern.hashCode();
        total += mTimeZone.hashCode();
        total += (mTimeZoneForced) ? 1 : 0;
        total += mLocale.hashCode();
        total += (mLocaleForced) ? 1 : 0;
        return total;
    }

    public java.lang.String toString() {
        return ("FastDateFormat[" + (mPattern)) + "]";
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
        in.defaultReadObject();
        init();
    }

    private interface Rule {
        int estimateLength();

        void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar);
    }

    private interface NumberRule extends org.apache.commons.lang.time.FastDateFormat.Rule {
        void appendTo(java.lang.StringBuffer buffer, int value);
    }

    private static class CharacterLiteral implements org.apache.commons.lang.time.FastDateFormat.Rule {
        private final char mValue;

        CharacterLiteral(char value) {
            mValue = value;
        }

        public int estimateLength() {
            return 1;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            buffer.append(mValue);
        }
    }

    private static class StringLiteral implements org.apache.commons.lang.time.FastDateFormat.Rule {
        private final java.lang.String mValue;

        StringLiteral(java.lang.String value) {
            mValue = value;
        }

        public int estimateLength() {
            return mValue.length();
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            buffer.append(mValue);
        }
    }

    private static class TextField implements org.apache.commons.lang.time.FastDateFormat.Rule {
        private final int mField;

        private final java.lang.String[] mValues;

        TextField(int field, java.lang.String[] values) {
            mField = field;
            mValues = values;
        }

        public int estimateLength() {
            int max = 0;
            for (int i = mValues.length; (--i) >= 0;) {
                int len = mValues[i].length();
                if (len > max) {
                    max = len;
                }
            }
            return max;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            buffer.append(mValues[calendar.get(mField)]);
        }
    }

    private static class UnpaddedNumberField implements org.apache.commons.lang.time.FastDateFormat.NumberRule {
        static final org.apache.commons.lang.time.FastDateFormat.UnpaddedNumberField INSTANCE_YEAR = new org.apache.commons.lang.time.FastDateFormat.UnpaddedNumberField(java.util.Calendar.YEAR);

        private final int mField;

        UnpaddedNumberField(int field) {
            mField = field;
        }

        public int estimateLength() {
            return 4;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            appendTo(buffer, calendar.get(mField));
        }

        public final void appendTo(java.lang.StringBuffer buffer, int value) {
            if (value < 10) {
                buffer.append(((char) (value + '0')));
            }else
                if (value < 100) {
                    buffer.append(((char) ((value / 10) + '0')));
                    buffer.append(((char) ((value % 10) + '0')));
                }else {
                    buffer.append(java.lang.Integer.toString(value));
                }

        }
    }

    private static class UnpaddedMonthField implements org.apache.commons.lang.time.FastDateFormat.NumberRule {
        static final org.apache.commons.lang.time.FastDateFormat.UnpaddedMonthField INSTANCE = new org.apache.commons.lang.time.FastDateFormat.UnpaddedMonthField();

        UnpaddedMonthField() {
            super();
        }

        public int estimateLength() {
            return 2;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            appendTo(buffer, ((calendar.get(java.util.Calendar.MONTH)) + 1));
        }

        public final void appendTo(java.lang.StringBuffer buffer, int value) {
            if (value < 10) {
                buffer.append(((char) (value + '0')));
            }else {
                buffer.append(((char) ((value / 10) + '0')));
                buffer.append(((char) ((value % 10) + '0')));
            }
        }
    }

    private static class PaddedNumberField implements org.apache.commons.lang.time.FastDateFormat.NumberRule {
        private final int mField;

        private final int mSize;

        PaddedNumberField(int field, int size) {
            if (size < 3) {
                throw new java.lang.IllegalArgumentException();
            }
            mField = field;
            mSize = size;
        }

        public int estimateLength() {
            return 4;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            appendTo(buffer, calendar.get(mField));
        }

        public final void appendTo(java.lang.StringBuffer buffer, int value) {
            if (value < 100) {
                for (int i = mSize; (--i) >= 2;) {
                    buffer.append('0');
                }
                buffer.append(((char) ((value / 10) + '0')));
                buffer.append(((char) ((value % 10) + '0')));
            }else {
                int digits;
                if (value < 1000) {
                    digits = 3;
                }else {
                    org.apache.commons.lang.Validate.isTrue((value > (-1)), "Negative values should not be possible", value);
                    digits = java.lang.Integer.toString(value).length();
                }
                for (int i = mSize; (--i) >= digits;) {
                    buffer.append('0');
                }
                buffer.append(java.lang.Integer.toString(value));
            }
        }
    }

    private static class TwoDigitNumberField implements org.apache.commons.lang.time.FastDateFormat.NumberRule {
        private final int mField;

        TwoDigitNumberField(int field) {
            mField = field;
        }

        public int estimateLength() {
            return 2;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            appendTo(buffer, calendar.get(mField));
        }

        public final void appendTo(java.lang.StringBuffer buffer, int value) {
            if (value < 100) {
                buffer.append(((char) ((value / 10) + '0')));
                buffer.append(((char) ((value % 10) + '0')));
            }else {
                buffer.append(java.lang.Integer.toString(value));
            }
        }
    }

    private static class TwoDigitYearField implements org.apache.commons.lang.time.FastDateFormat.NumberRule {
        static final org.apache.commons.lang.time.FastDateFormat.TwoDigitYearField INSTANCE = new org.apache.commons.lang.time.FastDateFormat.TwoDigitYearField();

        TwoDigitYearField() {
            super();
        }

        public int estimateLength() {
            return 2;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            appendTo(buffer, ((calendar.get(java.util.Calendar.YEAR)) % 100));
        }

        public final void appendTo(java.lang.StringBuffer buffer, int value) {
            buffer.append(((char) ((value / 10) + '0')));
            buffer.append(((char) ((value % 10) + '0')));
        }
    }

    private static class TwoDigitMonthField implements org.apache.commons.lang.time.FastDateFormat.NumberRule {
        static final org.apache.commons.lang.time.FastDateFormat.TwoDigitMonthField INSTANCE = new org.apache.commons.lang.time.FastDateFormat.TwoDigitMonthField();

        TwoDigitMonthField() {
            super();
        }

        public int estimateLength() {
            return 2;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            appendTo(buffer, ((calendar.get(java.util.Calendar.MONTH)) + 1));
        }

        public final void appendTo(java.lang.StringBuffer buffer, int value) {
            buffer.append(((char) ((value / 10) + '0')));
            buffer.append(((char) ((value % 10) + '0')));
        }
    }

    private static class TwelveHourField implements org.apache.commons.lang.time.FastDateFormat.NumberRule {
        private final org.apache.commons.lang.time.FastDateFormat.NumberRule mRule;

        TwelveHourField(org.apache.commons.lang.time.FastDateFormat.NumberRule rule) {
            mRule = rule;
        }

        public int estimateLength() {
            return mRule.estimateLength();
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            int value = calendar.get(java.util.Calendar.HOUR);
            if (value == 0) {
                value = (calendar.getLeastMaximum(java.util.Calendar.HOUR)) + 1;
            }
            mRule.appendTo(buffer, value);
        }

        public void appendTo(java.lang.StringBuffer buffer, int value) {
            mRule.appendTo(buffer, value);
        }
    }

    private static class TwentyFourHourField implements org.apache.commons.lang.time.FastDateFormat.NumberRule {
        private final org.apache.commons.lang.time.FastDateFormat.NumberRule mRule;

        TwentyFourHourField(org.apache.commons.lang.time.FastDateFormat.NumberRule rule) {
            mRule = rule;
        }

        public int estimateLength() {
            return mRule.estimateLength();
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            int value = calendar.get(java.util.Calendar.HOUR_OF_DAY);
            if (value == 0) {
                value = (calendar.getMaximum(java.util.Calendar.HOUR_OF_DAY)) + 1;
            }
            mRule.appendTo(buffer, value);
        }

        public void appendTo(java.lang.StringBuffer buffer, int value) {
            mRule.appendTo(buffer, value);
        }
    }

    private static class TimeZoneNameRule implements org.apache.commons.lang.time.FastDateFormat.Rule {
        private final java.util.TimeZone mTimeZone;

        private final boolean mTimeZoneForced;

        private final java.util.Locale mLocale;

        private final int mStyle;

        private final java.lang.String mStandard;

        private final java.lang.String mDaylight;

        TimeZoneNameRule(java.util.TimeZone timeZone, boolean timeZoneForced, java.util.Locale locale, int style) {
            mTimeZone = timeZone;
            mTimeZoneForced = timeZoneForced;
            mLocale = locale;
            mStyle = style;
            if (timeZoneForced) {
                mStandard = org.apache.commons.lang.time.FastDateFormat.getTimeZoneDisplay(timeZone, false, style, locale);
                mDaylight = org.apache.commons.lang.time.FastDateFormat.getTimeZoneDisplay(timeZone, true, style, locale);
            }else {
                mStandard = null;
                mDaylight = null;
            }
        }

        public int estimateLength() {
            if (mTimeZoneForced) {
                return java.lang.Math.max(mStandard.length(), mDaylight.length());
            }else
                if ((mStyle) == (java.util.TimeZone.SHORT)) {
                    return 4;
                }else {
                    return 40;
                }

        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            if (mTimeZoneForced) {
                if ((mTimeZone.useDaylightTime()) && ((calendar.get(java.util.Calendar.DST_OFFSET)) != 0)) {
                    buffer.append(mDaylight);
                }else {
                    buffer.append(mStandard);
                }
            }else {
                java.util.TimeZone timeZone = calendar.getTimeZone();
                if ((timeZone.useDaylightTime()) && ((calendar.get(java.util.Calendar.DST_OFFSET)) != 0)) {
                    buffer.append(org.apache.commons.lang.time.FastDateFormat.getTimeZoneDisplay(timeZone, true, mStyle, mLocale));
                }else {
                    buffer.append(org.apache.commons.lang.time.FastDateFormat.getTimeZoneDisplay(timeZone, false, mStyle, mLocale));
                }
            }
        }
    }

    private static class TimeZoneNumberRule implements org.apache.commons.lang.time.FastDateFormat.Rule {
        static final org.apache.commons.lang.time.FastDateFormat.TimeZoneNumberRule INSTANCE_COLON = new org.apache.commons.lang.time.FastDateFormat.TimeZoneNumberRule(true);

        static final org.apache.commons.lang.time.FastDateFormat.TimeZoneNumberRule INSTANCE_NO_COLON = new org.apache.commons.lang.time.FastDateFormat.TimeZoneNumberRule(false);

        final boolean mColon;

        TimeZoneNumberRule(boolean colon) {
            mColon = colon;
        }

        public int estimateLength() {
            return 5;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            int offset = (calendar.get(java.util.Calendar.ZONE_OFFSET)) + (calendar.get(java.util.Calendar.DST_OFFSET));
            if (offset < 0) {
                buffer.append('-');
                offset = -offset;
            }else {
                buffer.append('+');
            }
            int hours = offset / ((60 * 60) * 1000);
            buffer.append(((char) ((hours / 10) + '0')));
            buffer.append(((char) ((hours % 10) + '0')));
            if (mColon) {
                buffer.append(':');
            }
            int minutes = (offset / (60 * 1000)) - (60 * hours);
            buffer.append(((char) ((minutes / 10) + '0')));
            buffer.append(((char) ((minutes % 10) + '0')));
        }
    }

    private static class TimeZoneDisplayKey {
        private final java.util.TimeZone mTimeZone;

        private final int mStyle;

        private final java.util.Locale mLocale;

        TimeZoneDisplayKey(java.util.TimeZone timeZone, boolean daylight, int style, java.util.Locale locale) {
            mTimeZone = timeZone;
            if (daylight) {
                style |= -2147483648;
            }
            mStyle = style;
            mLocale = locale;
        }

        public int hashCode() {
            return ((mStyle) * 31) + (mLocale.hashCode());
        }

        public boolean equals(java.lang.Object obj) {
            if ((this) == obj) {
                return true;
            }
            if (obj instanceof org.apache.commons.lang.time.FastDateFormat.TimeZoneDisplayKey) {
                org.apache.commons.lang.time.FastDateFormat.TimeZoneDisplayKey other = ((org.apache.commons.lang.time.FastDateFormat.TimeZoneDisplayKey) (obj));
                return ((mTimeZone.equals(other.mTimeZone)) && ((mStyle) == (other.mStyle))) && (mLocale.equals(other.mLocale));
            }
            return false;
        }
    }

    private static class Pair {
        private final java.lang.Object mObj1;

        private final java.lang.Object mObj2;

        public Pair(java.lang.Object obj1, java.lang.Object obj2) {
            mObj1 = obj1;
            mObj2 = obj2;
        }

        public boolean equals(java.lang.Object obj) {
            if ((this) == obj) {
                return true;
            }
            if (!(obj instanceof org.apache.commons.lang.time.FastDateFormat.Pair)) {
                return false;
            }
            org.apache.commons.lang.time.FastDateFormat.Pair key = ((org.apache.commons.lang.time.FastDateFormat.Pair) (obj));
            return ((mObj1) == null ? (key.mObj1) == null : mObj1.equals(key.mObj1)) && ((mObj2) == null ? (key.mObj2) == null : mObj2.equals(key.mObj2));
        }

        public int hashCode() {
            return ((mObj1) == null ? 0 : mObj1.hashCode()) + ((mObj2) == null ? 0 : mObj2.hashCode());
        }

        public java.lang.String toString() {
            return ((("[" + (mObj1)) + ':') + (mObj2)) + ']';
        }
    }
}
18:39:26.618 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
18:39:26.618 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #69
18:39:26.618 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang.time.FastDateFormat$PaddedNumberField:1285 which is executed by 16 tests
-1899260190
18:39:26.707 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #70
18:39:26.708 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang.time.FastDateFormat:619 which is executed by 17 tests
-1899260190
18:39:26.814 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:39:26.829 [pool-272-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (12 ms)
<> Total tests run: 26
<> Ignored tests: 0
<> Failed tests: 4
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

18:39:27.568 [pool-271-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
FastDateFormat.java:379: error: variable rule might not have been initialized
            rules.add(rule);
                      ^
Note: FastDateFormat.java uses unchecked or unsafe operations.
Note: Recompile with -Xlint:unchecked for details.
18:39:28.135 [pool-271-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public class FastDateFormat extends java.text.Format {
    private static final long serialVersionUID = 1L;

    public static final int FULL = java.text.DateFormat.FULL;

    public static final int LONG = java.text.DateFormat.LONG;

    public static final int MEDIUM = java.text.DateFormat.MEDIUM;

    public static final int SHORT = java.text.DateFormat.SHORT;

    private static java.lang.String cDefaultPattern;

    private static java.util.Map cInstanceCache = new java.util.HashMap(7);

    private static java.util.Map cDateInstanceCache = new java.util.HashMap(7);

    private static java.util.Map cTimeInstanceCache = new java.util.HashMap(7);

    private static java.util.Map cDateTimeInstanceCache = new java.util.HashMap(7);

    private static java.util.Map cTimeZoneDisplayCache = new java.util.HashMap(7);

    private final java.lang.String mPattern;

    private final java.util.TimeZone mTimeZone;

    private final boolean mTimeZoneForced;

    private final java.util.Locale mLocale;

    private final boolean mLocaleForced;

    private transient org.apache.commons.lang.time.FastDateFormat.Rule[] mRules;

    private transient int mMaxLengthEstimate;

    public static org.apache.commons.lang.time.FastDateFormat getInstance() {
        return org.apache.commons.lang.time.FastDateFormat.getInstance(org.apache.commons.lang.time.FastDateFormat.getDefaultPattern(), null, null);
    }

    public static org.apache.commons.lang.time.FastDateFormat getInstance(java.lang.String pattern) {
        return org.apache.commons.lang.time.FastDateFormat.getInstance(pattern, null, null);
    }

    public static org.apache.commons.lang.time.FastDateFormat getInstance(java.lang.String pattern, java.util.TimeZone timeZone) {
        return org.apache.commons.lang.time.FastDateFormat.getInstance(pattern, timeZone, null);
    }

    public static org.apache.commons.lang.time.FastDateFormat getInstance(java.lang.String pattern, java.util.Locale locale) {
        return org.apache.commons.lang.time.FastDateFormat.getInstance(pattern, null, locale);
    }

    public static synchronized org.apache.commons.lang.time.FastDateFormat getInstance(java.lang.String pattern, java.util.TimeZone timeZone, java.util.Locale locale) {
        org.apache.commons.lang.time.FastDateFormat emptyFormat = new org.apache.commons.lang.time.FastDateFormat(pattern, timeZone, locale);
        org.apache.commons.lang.time.FastDateFormat format = ((org.apache.commons.lang.time.FastDateFormat) (org.apache.commons.lang.time.FastDateFormat.cInstanceCache.get(emptyFormat)));
        if (format == null) {
            format = emptyFormat;
            format.init();
            org.apache.commons.lang.time.FastDateFormat.cInstanceCache.put(format, format);
        }
        return format;
    }

    public static org.apache.commons.lang.time.FastDateFormat getDateInstance(int style) {
        return org.apache.commons.lang.time.FastDateFormat.getDateInstance(style, null, null);
    }

    public static org.apache.commons.lang.time.FastDateFormat getDateInstance(int style, java.util.Locale locale) {
        return org.apache.commons.lang.time.FastDateFormat.getDateInstance(style, null, locale);
    }

    public static org.apache.commons.lang.time.FastDateFormat getDateInstance(int style, java.util.TimeZone timeZone) {
        return org.apache.commons.lang.time.FastDateFormat.getDateInstance(style, timeZone, null);
    }

    public static synchronized org.apache.commons.lang.time.FastDateFormat getDateInstance(int style, java.util.TimeZone timeZone, java.util.Locale locale) {
        java.lang.Object key = new java.lang.Integer(style);
        if (timeZone != null) {
            key = new org.apache.commons.lang.time.FastDateFormat.Pair(key, timeZone);
        }
        if (locale != null) {
            key = new org.apache.commons.lang.time.FastDateFormat.Pair(key, locale);
        }
        org.apache.commons.lang.time.FastDateFormat format = ((org.apache.commons.lang.time.FastDateFormat) (org.apache.commons.lang.time.FastDateFormat.cDateInstanceCache.get(key)));
        if (format == null) {
            if (locale == null) {
                locale = java.util.Locale.getDefault();
            }
            try {
                java.text.SimpleDateFormat formatter = ((java.text.SimpleDateFormat) (java.text.DateFormat.getDateInstance(style, locale)));
                java.lang.String pattern = formatter.toPattern();
                format = org.apache.commons.lang.time.FastDateFormat.getInstance(pattern, timeZone, locale);
                org.apache.commons.lang.time.FastDateFormat.cDateInstanceCache.put(key, format);
            } catch (java.lang.ClassCastException ex) {
                throw new java.lang.IllegalArgumentException(("No date pattern for locale: " + locale));
            }
        }
        return format;
    }

    public static org.apache.commons.lang.time.FastDateFormat getTimeInstance(int style) {
        return org.apache.commons.lang.time.FastDateFormat.getTimeInstance(style, null, null);
    }

    public static org.apache.commons.lang.time.FastDateFormat getTimeInstance(int style, java.util.Locale locale) {
        return org.apache.commons.lang.time.FastDateFormat.getTimeInstance(style, null, locale);
    }

    public static org.apache.commons.lang.time.FastDateFormat getTimeInstance(int style, java.util.TimeZone timeZone) {
        return org.apache.commons.lang.time.FastDateFormat.getTimeInstance(style, timeZone, null);
    }

    public static synchronized org.apache.commons.lang.time.FastDateFormat getTimeInstance(int style, java.util.TimeZone timeZone, java.util.Locale locale) {
        java.lang.Object key = new java.lang.Integer(style);
        if (timeZone != null) {
            key = new org.apache.commons.lang.time.FastDateFormat.Pair(key, timeZone);
        }
        if (locale != null) {
            key = new org.apache.commons.lang.time.FastDateFormat.Pair(key, locale);
        }
        org.apache.commons.lang.time.FastDateFormat format = ((org.apache.commons.lang.time.FastDateFormat) (org.apache.commons.lang.time.FastDateFormat.cTimeInstanceCache.get(key)));
        if (format == null) {
            if (locale == null) {
                locale = java.util.Locale.getDefault();
            }
            try {
                java.text.SimpleDateFormat formatter = ((java.text.SimpleDateFormat) (java.text.DateFormat.getTimeInstance(style, locale)));
                java.lang.String pattern = formatter.toPattern();
                format = org.apache.commons.lang.time.FastDateFormat.getInstance(pattern, timeZone, locale);
                org.apache.commons.lang.time.FastDateFormat.cTimeInstanceCache.put(key, format);
            } catch (java.lang.ClassCastException ex) {
                throw new java.lang.IllegalArgumentException(("No date pattern for locale: " + locale));
            }
        }
        return format;
    }

    public static org.apache.commons.lang.time.FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle) {
        return org.apache.commons.lang.time.FastDateFormat.getDateTimeInstance(dateStyle, timeStyle, null, null);
    }

    public static org.apache.commons.lang.time.FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, java.util.Locale locale) {
        return org.apache.commons.lang.time.FastDateFormat.getDateTimeInstance(dateStyle, timeStyle, null, locale);
    }

    public static org.apache.commons.lang.time.FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, java.util.TimeZone timeZone) {
        return org.apache.commons.lang.time.FastDateFormat.getDateTimeInstance(dateStyle, timeStyle, timeZone, null);
    }

    public static synchronized org.apache.commons.lang.time.FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, java.util.TimeZone timeZone, java.util.Locale locale) {
        java.lang.Object key = new org.apache.commons.lang.time.FastDateFormat.Pair(new java.lang.Integer(dateStyle), new java.lang.Integer(timeStyle));
        if (timeZone != null) {
            key = new org.apache.commons.lang.time.FastDateFormat.Pair(key, timeZone);
        }
        if (locale != null) {
            key = new org.apache.commons.lang.time.FastDateFormat.Pair(key, locale);
        }
        org.apache.commons.lang.time.FastDateFormat format = ((org.apache.commons.lang.time.FastDateFormat) (org.apache.commons.lang.time.FastDateFormat.cDateTimeInstanceCache.get(key)));
        if (format == null) {
            if (locale == null) {
                locale = java.util.Locale.getDefault();
            }
            try {
                java.text.SimpleDateFormat formatter = ((java.text.SimpleDateFormat) (java.text.DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale)));
                java.lang.String pattern = formatter.toPattern();
                format = org.apache.commons.lang.time.FastDateFormat.getInstance(pattern, timeZone, locale);
                org.apache.commons.lang.time.FastDateFormat.cDateTimeInstanceCache.put(key, format);
            } catch (java.lang.ClassCastException ex) {
                throw new java.lang.IllegalArgumentException(("No date time pattern for locale: " + locale));
            }
        }
        return format;
    }

    static synchronized java.lang.String getTimeZoneDisplay(java.util.TimeZone tz, boolean daylight, int style, java.util.Locale locale) {
        java.lang.Object key = new org.apache.commons.lang.time.FastDateFormat.TimeZoneDisplayKey(tz, daylight, style, locale);
        java.lang.String value = ((java.lang.String) (org.apache.commons.lang.time.FastDateFormat.cTimeZoneDisplayCache.get(key)));
        if (value == null) {
            value = tz.getDisplayName(daylight, style, locale);
            org.apache.commons.lang.time.FastDateFormat.cTimeZoneDisplayCache.put(key, value);
        }
        return value;
    }

    private static synchronized java.lang.String getDefaultPattern() {
        if ((org.apache.commons.lang.time.FastDateFormat.cDefaultPattern) == null) {
            org.apache.commons.lang.time.FastDateFormat.cDefaultPattern = new java.text.SimpleDateFormat().toPattern();
        }
        return org.apache.commons.lang.time.FastDateFormat.cDefaultPattern;
    }

    protected FastDateFormat(java.lang.String pattern, java.util.TimeZone timeZone, java.util.Locale locale) {
        super();
        if (pattern == null) {
            throw new java.lang.IllegalArgumentException("The pattern must not be null");
        }
        mPattern = pattern;
        mTimeZoneForced = timeZone != null;
        if (timeZone == null) {
            timeZone = java.util.TimeZone.getDefault();
        }
        mTimeZone = timeZone;
        mLocaleForced = locale != null;
        if (locale == null) {
            locale = java.util.Locale.getDefault();
        }
        mLocale = locale;
    }

    protected void init() {
        java.util.List rulesList = parsePattern();
        mRules = ((org.apache.commons.lang.time.FastDateFormat.Rule[]) (rulesList.toArray(new org.apache.commons.lang.time.FastDateFormat.Rule[rulesList.size()])));
        int len = 0;
        for (int i = mRules.length; (--i) >= 0;) {
            len += mRules[i].estimateLength();
        }
        mMaxLengthEstimate = len;
    }

    protected java.util.List parsePattern() {
        java.text.DateFormatSymbols symbols = new java.text.DateFormatSymbols(mLocale);
        java.util.List rules = new java.util.ArrayList();
        java.lang.String[] ERAs = symbols.getEras();
        java.lang.String[] months = symbols.getMonths();
        java.lang.String[] shortMonths = symbols.getShortMonths();
        java.lang.String[] weekdays = symbols.getWeekdays();
        java.lang.String[] shortWeekdays = symbols.getShortWeekdays();
        java.lang.String[] AmPmStrings = symbols.getAmPmStrings();
        int length = mPattern.length();
        int[] indexRef = new int[1];
        for (int i = 0; i < length; i++) {
            indexRef[0] = i;
            java.lang.String token = parseToken(mPattern, indexRef);
            i = indexRef[0];
            int tokenLen = token.length();
            if (tokenLen == 0) {
                break;
            }
            org.apache.commons.lang.time.FastDateFormat.Rule rule;
            char c = token.charAt(0);
            switch (c) {
                case 'G' :
                    rule = new org.apache.commons.lang.time.FastDateFormat.TextField(java.util.Calendar.ERA, ERAs);
                    break;
                case 'y' :
                    if (tokenLen >= 4) {
                        rule = selectNumberRule(java.util.Calendar.YEAR, tokenLen);
                    }else {
                        rule = org.apache.commons.lang.time.FastDateFormat.TwoDigitYearField.INSTANCE;
                    }
                    break;
                case 'M' :
                    boolean spoonDefaultValue = false;
                    try {
                        spoonDefaultValue = true;
                    } catch (java.lang.Exception __NopolProcessorException) {
                    }
                    boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                    if (fr.inria.lille.commons.trace.RuntimeValues.instance(52).isEnabled()) {
                        fr.inria.lille.commons.trace.RuntimeValues.instance(52).collectionStarts();
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(52).collectInput("shortMonths",shortMonths);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(52).collectInput("org.apache.commons.lang.time.FastDateFormat.this.mMaxLengthEstimate",org.apache.commons.lang.time.FastDateFormat.this.mMaxLengthEstimate);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(52).collectInput("org.apache.commons.lang.time.FastDateFormat.this.mTimeZoneForced",org.apache.commons.lang.time.FastDateFormat.this.mTimeZoneForced);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(52).collectInput("shortWeekdays",shortWeekdays);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(52).collectInput("rules",rules);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(52).collectInput("org.apache.commons.lang.time.FastDateFormat.MEDIUM",org.apache.commons.lang.time.FastDateFormat.MEDIUM);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(52).collectInput("symbols",symbols);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(52).collectInput("indexRef",indexRef);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(52).collectInput("org.apache.commons.lang.time.FastDateFormat.this.mRules",org.apache.commons.lang.time.FastDateFormat.this.mRules);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(52).collectInput("org.apache.commons.lang.time.FastDateFormat.this.mTimeZone",org.apache.commons.lang.time.FastDateFormat.this.mTimeZone);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(52).collectInput("org.apache.commons.lang.time.FastDateFormat.cTimeInstanceCache",org.apache.commons.lang.time.FastDateFormat.cTimeInstanceCache);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(52).collectInput("org.apache.commons.lang.time.FastDateFormat.this.mLocaleForced",org.apache.commons.lang.time.FastDateFormat.this.mLocaleForced);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(52).collectInput("ERAs",ERAs);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(52).collectInput("org.apache.commons.lang.time.FastDateFormat.this.mPattern",org.apache.commons.lang.time.FastDateFormat.this.mPattern);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(52).collectInput("org.apache.commons.lang.time.FastDateFormat.SHORT",org.apache.commons.lang.time.FastDateFormat.SHORT);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(52).collectInput("c",c);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(52).collectInput("months",months);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(52).collectInput("weekdays",weekdays);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(52).collectInput("org.apache.commons.lang.time.FastDateFormat.cDateInstanceCache",org.apache.commons.lang.time.FastDateFormat.cDateInstanceCache);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(52).collectInput("length",length);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(52).collectInput("org.apache.commons.lang.time.FastDateFormat.LONG",org.apache.commons.lang.time.FastDateFormat.LONG);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(52).collectInput("tokenLen",tokenLen);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(52).collectInput("org.apache.commons.lang.time.FastDateFormat.cInstanceCache",org.apache.commons.lang.time.FastDateFormat.cInstanceCache);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(52).collectInput("org.apache.commons.lang.time.FastDateFormat.this.mLocale",org.apache.commons.lang.time.FastDateFormat.this.mLocale);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(52).collectInput("token",token);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(52).collectInput("org.apache.commons.lang.time.FastDateFormat.cTimeZoneDisplayCache",org.apache.commons.lang.time.FastDateFormat.cTimeZoneDisplayCache);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(52).collectInput("AmPmStrings",AmPmStrings);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(52).collectInput("org.apache.commons.lang.time.FastDateFormat.cDateTimeInstanceCache",org.apache.commons.lang.time.FastDateFormat.cDateTimeInstanceCache);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(52).collectInput("4",4);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(52).collectInput("tokenLen >= 4",tokenLen >= 4);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(52).collectInput("org.apache.commons.lang.time.FastDateFormat.cDefaultPattern",org.apache.commons.lang.time.FastDateFormat.cDefaultPattern);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(52).collectInput("org.apache.commons.lang.time.FastDateFormat.FULL",org.apache.commons.lang.time.FastDateFormat.FULL);} catch (Exception ex1) {ex1.printStackTrace();};
                        fr.inria.lille.commons.trace.RuntimeValues.instance(52).collectOutput(runtimeAngelicValue);
                        fr.inria.lille.commons.trace.RuntimeValues.instance(52).collectionEnds();
                    }
                    if (runtimeAngelicValue) if (tokenLen >= 4) {
                        rule = new org.apache.commons.lang.time.FastDateFormat.TextField(java.util.Calendar.MONTH, months);
                    }else
                        if (tokenLen == 3) {
                            rule = new org.apache.commons.lang.time.FastDateFormat.TextField(java.util.Calendar.MONTH, shortMonths);
                        }else
                            if (tokenLen == 2) {
                                rule = org.apache.commons.lang.time.FastDateFormat.TwoDigitMonthField.INSTANCE;
                            }else {
                                rule = org.apache.commons.lang.time.FastDateFormat.UnpaddedMonthField.INSTANCE;
                            }


                    break;
                case 'd' :
                    rule = selectNumberRule(java.util.Calendar.DAY_OF_MONTH, tokenLen);
                    break;
                case 'h' :
                    rule = new org.apache.commons.lang.time.FastDateFormat.TwelveHourField(selectNumberRule(java.util.Calendar.HOUR, tokenLen));
                    break;
                case 'H' :
                    rule = selectNumberRule(java.util.Calendar.HOUR_OF_DAY, tokenLen);
                    break;
                case 'm' :
                    rule = selectNumberRule(java.util.Calendar.MINUTE, tokenLen);
                    break;
                case 's' :
                    rule = selectNumberRule(java.util.Calendar.SECOND, tokenLen);
                    break;
                case 'S' :
                    rule = selectNumberRule(java.util.Calendar.MILLISECOND, tokenLen);
                    break;
                case 'E' :
                    rule = new org.apache.commons.lang.time.FastDateFormat.TextField(java.util.Calendar.DAY_OF_WEEK, (tokenLen < 4 ? shortWeekdays : weekdays));
                    break;
                case 'D' :
                    rule = selectNumberRule(java.util.Calendar.DAY_OF_YEAR, tokenLen);
                    break;
                case 'F' :
                    rule = selectNumberRule(java.util.Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);
                    break;
                case 'w' :
                    rule = selectNumberRule(java.util.Calendar.WEEK_OF_YEAR, tokenLen);
                    break;
                case 'W' :
                    rule = selectNumberRule(java.util.Calendar.WEEK_OF_MONTH, tokenLen);
                    break;
                case 'a' :
                    rule = new org.apache.commons.lang.time.FastDateFormat.TextField(java.util.Calendar.AM_PM, AmPmStrings);
                    break;
                case 'k' :
                    rule = new org.apache.commons.lang.time.FastDateFormat.TwentyFourHourField(selectNumberRule(java.util.Calendar.HOUR_OF_DAY, tokenLen));
                    break;
                case 'K' :
                    rule = selectNumberRule(java.util.Calendar.HOUR, tokenLen);
                    break;
                case 'z' :
                    if (tokenLen >= 4) {
                        rule = new org.apache.commons.lang.time.FastDateFormat.TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, java.util.TimeZone.LONG);
                    }else {
                        rule = new org.apache.commons.lang.time.FastDateFormat.TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, java.util.TimeZone.SHORT);
                    }
                    break;
                case 'Z' :
                    if (tokenLen == 1) {
                        rule = org.apache.commons.lang.time.FastDateFormat.TimeZoneNumberRule.INSTANCE_NO_COLON;
                    }else {
                        rule = org.apache.commons.lang.time.FastDateFormat.TimeZoneNumberRule.INSTANCE_COLON;
                    }
                    break;
                case '\'' :
                    java.lang.String sub = token.substring(1);
                    if ((sub.length()) == 1) {
                        rule = new org.apache.commons.lang.time.FastDateFormat.CharacterLiteral(sub.charAt(0));
                    }else {
                        rule = new org.apache.commons.lang.time.FastDateFormat.StringLiteral(sub);
                    }
                    break;
                default :
                    throw new java.lang.IllegalArgumentException(("Illegal pattern component: " + token));
            }
            rules.add(rule);
        }
        return rules;
    }

    protected java.lang.String parseToken(java.lang.String pattern, int[] indexRef) {
        java.lang.StringBuffer buf = new java.lang.StringBuffer();
        int i = indexRef[0];
        int length = pattern.length();
        char c = pattern.charAt(i);
        if (((c >= 'A') && (c <= 'Z')) || ((c >= 'a') && (c <= 'z'))) {
            buf.append(c);
            while ((i + 1) < length) {
                char peek = pattern.charAt((i + 1));
                if (peek == c) {
                    buf.append(c);
                    i++;
                }else {
                    break;
                }
            } 
        }else {
            buf.append('\'');
            boolean inLiteral = false;
            for (; i < length; i++) {
                c = pattern.charAt(i);
                if (c == '\'') {
                    if (((i + 1) < length) && ((pattern.charAt((i + 1))) == '\'')) {
                        i++;
                        buf.append(c);
                    }else {
                        inLiteral = !inLiteral;
                    }
                }else
                    if ((!inLiteral) && (((c >= 'A') && (c <= 'Z')) || ((c >= 'a') && (c <= 'z')))) {
                        i--;
                        break;
                    }else {
                        buf.append(c);
                    }

            }
        }
        indexRef[0] = i;
        return buf.toString();
    }

    protected org.apache.commons.lang.time.FastDateFormat.NumberRule selectNumberRule(int field, int padding) {
        switch (padding) {
            case 1 :
                return new org.apache.commons.lang.time.FastDateFormat.UnpaddedNumberField(field);
            case 2 :
                return new org.apache.commons.lang.time.FastDateFormat.TwoDigitNumberField(field);
            default :
                return new org.apache.commons.lang.time.FastDateFormat.PaddedNumberField(field, padding);
        }
    }

    public java.lang.StringBuffer format(java.lang.Object obj, java.lang.StringBuffer toAppendTo, java.text.FieldPosition pos) {
        if (obj instanceof java.util.Date) {
            return format(((java.util.Date) (obj)), toAppendTo);
        }else
            if (obj instanceof java.util.Calendar) {
                return format(((java.util.Calendar) (obj)), toAppendTo);
            }else
                if (obj instanceof java.lang.Long) {
                    return format(((java.lang.Long) (obj)).longValue(), toAppendTo);
                }else {
                    throw new java.lang.IllegalArgumentException(("Unknown class: " + (obj == null ? "<null>" : obj.getClass().getName())));
                }


    }

    public java.lang.String format(long millis) {
        return format(new java.util.Date(millis));
    }

    public java.lang.String format(java.util.Date date) {
        java.util.Calendar c = new java.util.GregorianCalendar(mTimeZone);
        c.setTime(date);
        return applyRules(c, new java.lang.StringBuffer(mMaxLengthEstimate)).toString();
    }

    public java.lang.String format(java.util.Calendar calendar) {
        return format(calendar, new java.lang.StringBuffer(mMaxLengthEstimate)).toString();
    }

    public java.lang.StringBuffer format(long millis, java.lang.StringBuffer buf) {
        return format(new java.util.Date(millis), buf);
    }

    public java.lang.StringBuffer format(java.util.Date date, java.lang.StringBuffer buf) {
        java.util.Calendar c = new java.util.GregorianCalendar(mTimeZone);
        c.setTime(date);
        return applyRules(c, buf);
    }

    public java.lang.StringBuffer format(java.util.Calendar calendar, java.lang.StringBuffer buf) {
        if (mTimeZoneForced) {
            calendar = ((java.util.Calendar) (calendar.clone()));
            calendar.setTimeZone(mTimeZone);
        }
        return applyRules(calendar, buf);
    }

    protected java.lang.StringBuffer applyRules(java.util.Calendar calendar, java.lang.StringBuffer buf) {
        org.apache.commons.lang.time.FastDateFormat.Rule[] rules = mRules;
        int len = mRules.length;
        for (int i = 0; i < len; i++) {
            rules[i].appendTo(buf, calendar);
        }
        return buf;
    }

    public java.lang.Object parseObject(java.lang.String source, java.text.ParsePosition pos) {
        pos.setIndex(0);
        pos.setErrorIndex(0);
        return null;
    }

    public java.lang.String getPattern() {
        return mPattern;
    }

    public java.util.TimeZone getTimeZone() {
        return mTimeZone;
    }

    public boolean getTimeZoneOverridesCalendar() {
        return mTimeZoneForced;
    }

    public java.util.Locale getLocale() {
        return mLocale;
    }

    public int getMaxLengthEstimate() {
        return mMaxLengthEstimate;
    }

    public boolean equals(java.lang.Object obj) {
        if ((obj instanceof org.apache.commons.lang.time.FastDateFormat) == false) {
            return false;
        }
        org.apache.commons.lang.time.FastDateFormat other = ((org.apache.commons.lang.time.FastDateFormat) (obj));
        if (((((((mPattern) == (other.mPattern)) || (mPattern.equals(other.mPattern))) && (((mTimeZone) == (other.mTimeZone)) || (mTimeZone.equals(other.mTimeZone)))) && (((mLocale) == (other.mLocale)) || (mLocale.equals(other.mLocale)))) && ((mTimeZoneForced) == (other.mTimeZoneForced))) && ((mLocaleForced) == (other.mLocaleForced))) {
            return true;
        }
        return false;
    }

    public int hashCode() {
        int total = 0;
        total += mPattern.hashCode();
        total += mTimeZone.hashCode();
        total += (mTimeZoneForced) ? 1 : 0;
        total += mLocale.hashCode();
        total += (mLocaleForced) ? 1 : 0;
        return total;
    }

    public java.lang.String toString() {
        return ("FastDateFormat[" + (mPattern)) + "]";
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
        in.defaultReadObject();
        init();
    }

    private interface Rule {
        int estimateLength();

        void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar);
    }

    private interface NumberRule extends org.apache.commons.lang.time.FastDateFormat.Rule {
        void appendTo(java.lang.StringBuffer buffer, int value);
    }

    private static class CharacterLiteral implements org.apache.commons.lang.time.FastDateFormat.Rule {
        private final char mValue;

        CharacterLiteral(char value) {
            mValue = value;
        }

        public int estimateLength() {
            return 1;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            buffer.append(mValue);
        }
    }

    private static class StringLiteral implements org.apache.commons.lang.time.FastDateFormat.Rule {
        private final java.lang.String mValue;

        StringLiteral(java.lang.String value) {
            mValue = value;
        }

        public int estimateLength() {
            return mValue.length();
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            buffer.append(mValue);
        }
    }

    private static class TextField implements org.apache.commons.lang.time.FastDateFormat.Rule {
        private final int mField;

        private final java.lang.String[] mValues;

        TextField(int field, java.lang.String[] values) {
            mField = field;
            mValues = values;
        }

        public int estimateLength() {
            int max = 0;
            for (int i = mValues.length; (--i) >= 0;) {
                int len = mValues[i].length();
                if (len > max) {
                    max = len;
                }
            }
            return max;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            buffer.append(mValues[calendar.get(mField)]);
        }
    }

    private static class UnpaddedNumberField implements org.apache.commons.lang.time.FastDateFormat.NumberRule {
        static final org.apache.commons.lang.time.FastDateFormat.UnpaddedNumberField INSTANCE_YEAR = new org.apache.commons.lang.time.FastDateFormat.UnpaddedNumberField(java.util.Calendar.YEAR);

        private final int mField;

        UnpaddedNumberField(int field) {
            mField = field;
        }

        public int estimateLength() {
            return 4;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            appendTo(buffer, calendar.get(mField));
        }

        public final void appendTo(java.lang.StringBuffer buffer, int value) {
            if (value < 10) {
                buffer.append(((char) (value + '0')));
            }else
                if (value < 100) {
                    buffer.append(((char) ((value / 10) + '0')));
                    buffer.append(((char) ((value % 10) + '0')));
                }else {
                    buffer.append(java.lang.Integer.toString(value));
                }

        }
    }

    private static class UnpaddedMonthField implements org.apache.commons.lang.time.FastDateFormat.NumberRule {
        static final org.apache.commons.lang.time.FastDateFormat.UnpaddedMonthField INSTANCE = new org.apache.commons.lang.time.FastDateFormat.UnpaddedMonthField();

        UnpaddedMonthField() {
            super();
        }

        public int estimateLength() {
            return 2;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            appendTo(buffer, ((calendar.get(java.util.Calendar.MONTH)) + 1));
        }

        public final void appendTo(java.lang.StringBuffer buffer, int value) {
            if (value < 10) {
                buffer.append(((char) (value + '0')));
            }else {
                buffer.append(((char) ((value / 10) + '0')));
                buffer.append(((char) ((value % 10) + '0')));
            }
        }
    }

    private static class PaddedNumberField implements org.apache.commons.lang.time.FastDateFormat.NumberRule {
        private final int mField;

        private final int mSize;

        PaddedNumberField(int field, int size) {
            if (size < 3) {
                throw new java.lang.IllegalArgumentException();
            }
            mField = field;
            mSize = size;
        }

        public int estimateLength() {
            return 4;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            appendTo(buffer, calendar.get(mField));
        }

        public final void appendTo(java.lang.StringBuffer buffer, int value) {
            if (value < 100) {
                for (int i = mSize; (--i) >= 2;) {
                    buffer.append('0');
                }
                buffer.append(((char) ((value / 10) + '0')));
                buffer.append(((char) ((value % 10) + '0')));
            }else {
                int digits;
                if (value < 1000) {
                    digits = 3;
                }else {
                    org.apache.commons.lang.Validate.isTrue((value > (-1)), "Negative values should not be possible", value);
                    digits = java.lang.Integer.toString(value).length();
                }
                for (int i = mSize; (--i) >= digits;) {
                    buffer.append('0');
                }
                buffer.append(java.lang.Integer.toString(value));
            }
        }
    }

    private static class TwoDigitNumberField implements org.apache.commons.lang.time.FastDateFormat.NumberRule {
        private final int mField;

        TwoDigitNumberField(int field) {
            mField = field;
        }

        public int estimateLength() {
            return 2;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            appendTo(buffer, calendar.get(mField));
        }

        public final void appendTo(java.lang.StringBuffer buffer, int value) {
            if (value < 100) {
                buffer.append(((char) ((value / 10) + '0')));
                buffer.append(((char) ((value % 10) + '0')));
            }else {
                buffer.append(java.lang.Integer.toString(value));
            }
        }
    }

    private static class TwoDigitYearField implements org.apache.commons.lang.time.FastDateFormat.NumberRule {
        static final org.apache.commons.lang.time.FastDateFormat.TwoDigitYearField INSTANCE = new org.apache.commons.lang.time.FastDateFormat.TwoDigitYearField();

        TwoDigitYearField() {
            super();
        }

        public int estimateLength() {
            return 2;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            appendTo(buffer, ((calendar.get(java.util.Calendar.YEAR)) % 100));
        }

        public final void appendTo(java.lang.StringBuffer buffer, int value) {
            buffer.append(((char) ((value / 10) + '0')));
            buffer.append(((char) ((value % 10) + '0')));
        }
    }

    private static class TwoDigitMonthField implements org.apache.commons.lang.time.FastDateFormat.NumberRule {
        static final org.apache.commons.lang.time.FastDateFormat.TwoDigitMonthField INSTANCE = new org.apache.commons.lang.time.FastDateFormat.TwoDigitMonthField();

        TwoDigitMonthField() {
            super();
        }

        public int estimateLength() {
            return 2;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            appendTo(buffer, ((calendar.get(java.util.Calendar.MONTH)) + 1));
        }

        public final void appendTo(java.lang.StringBuffer buffer, int value) {
            buffer.append(((char) ((value / 10) + '0')));
            buffer.append(((char) ((value % 10) + '0')));
        }
    }

    private static class TwelveHourField implements org.apache.commons.lang.time.FastDateFormat.NumberRule {
        private final org.apache.commons.lang.time.FastDateFormat.NumberRule mRule;

        TwelveHourField(org.apache.commons.lang.time.FastDateFormat.NumberRule rule) {
            mRule = rule;
        }

        public int estimateLength() {
            return mRule.estimateLength();
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            int value = calendar.get(java.util.Calendar.HOUR);
            if (value == 0) {
                value = (calendar.getLeastMaximum(java.util.Calendar.HOUR)) + 1;
            }
            mRule.appendTo(buffer, value);
        }

        public void appendTo(java.lang.StringBuffer buffer, int value) {
            mRule.appendTo(buffer, value);
        }
    }

    private static class TwentyFourHourField implements org.apache.commons.lang.time.FastDateFormat.NumberRule {
        private final org.apache.commons.lang.time.FastDateFormat.NumberRule mRule;

        TwentyFourHourField(org.apache.commons.lang.time.FastDateFormat.NumberRule rule) {
            mRule = rule;
        }

        public int estimateLength() {
            return mRule.estimateLength();
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            int value = calendar.get(java.util.Calendar.HOUR_OF_DAY);
            if (value == 0) {
                value = (calendar.getMaximum(java.util.Calendar.HOUR_OF_DAY)) + 1;
            }
            mRule.appendTo(buffer, value);
        }

        public void appendTo(java.lang.StringBuffer buffer, int value) {
            mRule.appendTo(buffer, value);
        }
    }

    private static class TimeZoneNameRule implements org.apache.commons.lang.time.FastDateFormat.Rule {
        private final java.util.TimeZone mTimeZone;

        private final boolean mTimeZoneForced;

        private final java.util.Locale mLocale;

        private final int mStyle;

        private final java.lang.String mStandard;

        private final java.lang.String mDaylight;

        TimeZoneNameRule(java.util.TimeZone timeZone, boolean timeZoneForced, java.util.Locale locale, int style) {
            mTimeZone = timeZone;
            mTimeZoneForced = timeZoneForced;
            mLocale = locale;
            mStyle = style;
            if (timeZoneForced) {
                mStandard = org.apache.commons.lang.time.FastDateFormat.getTimeZoneDisplay(timeZone, false, style, locale);
                mDaylight = org.apache.commons.lang.time.FastDateFormat.getTimeZoneDisplay(timeZone, true, style, locale);
            }else {
                mStandard = null;
                mDaylight = null;
            }
        }

        public int estimateLength() {
            if (mTimeZoneForced) {
                return java.lang.Math.max(mStandard.length(), mDaylight.length());
            }else
                if ((mStyle) == (java.util.TimeZone.SHORT)) {
                    return 4;
                }else {
                    return 40;
                }

        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            if (mTimeZoneForced) {
                if ((mTimeZone.useDaylightTime()) && ((calendar.get(java.util.Calendar.DST_OFFSET)) != 0)) {
                    buffer.append(mDaylight);
                }else {
                    buffer.append(mStandard);
                }
            }else {
                java.util.TimeZone timeZone = calendar.getTimeZone();
                if ((timeZone.useDaylightTime()) && ((calendar.get(java.util.Calendar.DST_OFFSET)) != 0)) {
                    buffer.append(org.apache.commons.lang.time.FastDateFormat.getTimeZoneDisplay(timeZone, true, mStyle, mLocale));
                }else {
                    buffer.append(org.apache.commons.lang.time.FastDateFormat.getTimeZoneDisplay(timeZone, false, mStyle, mLocale));
                }
            }
        }
    }

    private static class TimeZoneNumberRule implements org.apache.commons.lang.time.FastDateFormat.Rule {
        static final org.apache.commons.lang.time.FastDateFormat.TimeZoneNumberRule INSTANCE_COLON = new org.apache.commons.lang.time.FastDateFormat.TimeZoneNumberRule(true);

        static final org.apache.commons.lang.time.FastDateFormat.TimeZoneNumberRule INSTANCE_NO_COLON = new org.apache.commons.lang.time.FastDateFormat.TimeZoneNumberRule(false);

        final boolean mColon;

        TimeZoneNumberRule(boolean colon) {
            mColon = colon;
        }

        public int estimateLength() {
            return 5;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            int offset = (calendar.get(java.util.Calendar.ZONE_OFFSET)) + (calendar.get(java.util.Calendar.DST_OFFSET));
            if (offset < 0) {
                buffer.append('-');
                offset = -offset;
            }else {
                buffer.append('+');
            }
            int hours = offset / ((60 * 60) * 1000);
            buffer.append(((char) ((hours / 10) + '0')));
            buffer.append(((char) ((hours % 10) + '0')));
            if (mColon) {
                buffer.append(':');
            }
            int minutes = (offset / (60 * 1000)) - (60 * hours);
            buffer.append(((char) ((minutes / 10) + '0')));
            buffer.append(((char) ((minutes % 10) + '0')));
        }
    }

    private static class TimeZoneDisplayKey {
        private final java.util.TimeZone mTimeZone;

        private final int mStyle;

        private final java.util.Locale mLocale;

        TimeZoneDisplayKey(java.util.TimeZone timeZone, boolean daylight, int style, java.util.Locale locale) {
            mTimeZone = timeZone;
            if (daylight) {
                style |= -2147483648;
            }
            mStyle = style;
            mLocale = locale;
        }

        public int hashCode() {
            return ((mStyle) * 31) + (mLocale.hashCode());
        }

        public boolean equals(java.lang.Object obj) {
            if ((this) == obj) {
                return true;
            }
            if (obj instanceof org.apache.commons.lang.time.FastDateFormat.TimeZoneDisplayKey) {
                org.apache.commons.lang.time.FastDateFormat.TimeZoneDisplayKey other = ((org.apache.commons.lang.time.FastDateFormat.TimeZoneDisplayKey) (obj));
                return ((mTimeZone.equals(other.mTimeZone)) && ((mStyle) == (other.mStyle))) && (mLocale.equals(other.mLocale));
            }
            return false;
        }
    }

    private static class Pair {
        private final java.lang.Object mObj1;

        private final java.lang.Object mObj2;

        public Pair(java.lang.Object obj1, java.lang.Object obj2) {
            mObj1 = obj1;
            mObj2 = obj2;
        }

        public boolean equals(java.lang.Object obj) {
            if ((this) == obj) {
                return true;
            }
            if (!(obj instanceof org.apache.commons.lang.time.FastDateFormat.Pair)) {
                return false;
            }
            org.apache.commons.lang.time.FastDateFormat.Pair key = ((org.apache.commons.lang.time.FastDateFormat.Pair) (obj));
            return ((mObj1) == null ? (key.mObj1) == null : mObj1.equals(key.mObj1)) && ((mObj2) == null ? (key.mObj2) == null : mObj2.equals(key.mObj2));
        }

        public int hashCode() {
            return ((mObj1) == null ? 0 : mObj1.hashCode()) + ((mObj2) == null ? 0 : mObj2.hashCode());
        }

        public java.lang.String toString() {
            return ((("[" + (mObj1)) + ':') + (mObj2)) + ']';
        }
    }
}
18:39:28.136 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
18:39:28.136 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:39:28.152 [pool-274-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (13 ms)
<> Total tests run: 26
<> Ignored tests: 0
<> Failed tests: 4
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
18:39:28.891 [pool-275-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (4 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:39:28.894 [pool-276-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
18:39:28.895 [pool-277-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:39:28.895 [pool-278-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

18:39:28.895 [pool-273-thread-1] DEBUG tests.output - Failing tests with false: 
[test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>, test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>]
18:39:28.895 [pool-273-thread-1] DEBUG tests.output - Failing tests with true: 
[test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>, test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>]
18:39:28.896 [pool-273-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.lang.time.FastDateFormat:619.
18:39:28.896 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #71
18:39:28.896 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang.time.FastDateFormat:612 which is executed by 17 tests
-1899260190
18:39:28.988 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:39:29.003 [pool-280-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (12 ms)
<> Total tests run: 26
<> Ignored tests: 0
<> Failed tests: 4
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

18:39:29.729 [pool-279-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
FastDateFormat.java:379: error: variable rule might not have been initialized
            rules.add(rule);
                      ^
Note: FastDateFormat.java uses unchecked or unsafe operations.
Note: Recompile with -Xlint:unchecked for details.
18:39:30.353 [pool-279-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public class FastDateFormat extends java.text.Format {
    private static final long serialVersionUID = 1L;

    public static final int FULL = java.text.DateFormat.FULL;

    public static final int LONG = java.text.DateFormat.LONG;

    public static final int MEDIUM = java.text.DateFormat.MEDIUM;

    public static final int SHORT = java.text.DateFormat.SHORT;

    private static java.lang.String cDefaultPattern;

    private static java.util.Map cInstanceCache = new java.util.HashMap(7);

    private static java.util.Map cDateInstanceCache = new java.util.HashMap(7);

    private static java.util.Map cTimeInstanceCache = new java.util.HashMap(7);

    private static java.util.Map cDateTimeInstanceCache = new java.util.HashMap(7);

    private static java.util.Map cTimeZoneDisplayCache = new java.util.HashMap(7);

    private final java.lang.String mPattern;

    private final java.util.TimeZone mTimeZone;

    private final boolean mTimeZoneForced;

    private final java.util.Locale mLocale;

    private final boolean mLocaleForced;

    private transient org.apache.commons.lang.time.FastDateFormat.Rule[] mRules;

    private transient int mMaxLengthEstimate;

    public static org.apache.commons.lang.time.FastDateFormat getInstance() {
        return org.apache.commons.lang.time.FastDateFormat.getInstance(org.apache.commons.lang.time.FastDateFormat.getDefaultPattern(), null, null);
    }

    public static org.apache.commons.lang.time.FastDateFormat getInstance(java.lang.String pattern) {
        return org.apache.commons.lang.time.FastDateFormat.getInstance(pattern, null, null);
    }

    public static org.apache.commons.lang.time.FastDateFormat getInstance(java.lang.String pattern, java.util.TimeZone timeZone) {
        return org.apache.commons.lang.time.FastDateFormat.getInstance(pattern, timeZone, null);
    }

    public static org.apache.commons.lang.time.FastDateFormat getInstance(java.lang.String pattern, java.util.Locale locale) {
        return org.apache.commons.lang.time.FastDateFormat.getInstance(pattern, null, locale);
    }

    public static synchronized org.apache.commons.lang.time.FastDateFormat getInstance(java.lang.String pattern, java.util.TimeZone timeZone, java.util.Locale locale) {
        org.apache.commons.lang.time.FastDateFormat emptyFormat = new org.apache.commons.lang.time.FastDateFormat(pattern, timeZone, locale);
        org.apache.commons.lang.time.FastDateFormat format = ((org.apache.commons.lang.time.FastDateFormat) (org.apache.commons.lang.time.FastDateFormat.cInstanceCache.get(emptyFormat)));
        if (format == null) {
            format = emptyFormat;
            format.init();
            org.apache.commons.lang.time.FastDateFormat.cInstanceCache.put(format, format);
        }
        return format;
    }

    public static org.apache.commons.lang.time.FastDateFormat getDateInstance(int style) {
        return org.apache.commons.lang.time.FastDateFormat.getDateInstance(style, null, null);
    }

    public static org.apache.commons.lang.time.FastDateFormat getDateInstance(int style, java.util.Locale locale) {
        return org.apache.commons.lang.time.FastDateFormat.getDateInstance(style, null, locale);
    }

    public static org.apache.commons.lang.time.FastDateFormat getDateInstance(int style, java.util.TimeZone timeZone) {
        return org.apache.commons.lang.time.FastDateFormat.getDateInstance(style, timeZone, null);
    }

    public static synchronized org.apache.commons.lang.time.FastDateFormat getDateInstance(int style, java.util.TimeZone timeZone, java.util.Locale locale) {
        java.lang.Object key = new java.lang.Integer(style);
        if (timeZone != null) {
            key = new org.apache.commons.lang.time.FastDateFormat.Pair(key, timeZone);
        }
        if (locale != null) {
            key = new org.apache.commons.lang.time.FastDateFormat.Pair(key, locale);
        }
        org.apache.commons.lang.time.FastDateFormat format = ((org.apache.commons.lang.time.FastDateFormat) (org.apache.commons.lang.time.FastDateFormat.cDateInstanceCache.get(key)));
        if (format == null) {
            if (locale == null) {
                locale = java.util.Locale.getDefault();
            }
            try {
                java.text.SimpleDateFormat formatter = ((java.text.SimpleDateFormat) (java.text.DateFormat.getDateInstance(style, locale)));
                java.lang.String pattern = formatter.toPattern();
                format = org.apache.commons.lang.time.FastDateFormat.getInstance(pattern, timeZone, locale);
                org.apache.commons.lang.time.FastDateFormat.cDateInstanceCache.put(key, format);
            } catch (java.lang.ClassCastException ex) {
                throw new java.lang.IllegalArgumentException(("No date pattern for locale: " + locale));
            }
        }
        return format;
    }

    public static org.apache.commons.lang.time.FastDateFormat getTimeInstance(int style) {
        return org.apache.commons.lang.time.FastDateFormat.getTimeInstance(style, null, null);
    }

    public static org.apache.commons.lang.time.FastDateFormat getTimeInstance(int style, java.util.Locale locale) {
        return org.apache.commons.lang.time.FastDateFormat.getTimeInstance(style, null, locale);
    }

    public static org.apache.commons.lang.time.FastDateFormat getTimeInstance(int style, java.util.TimeZone timeZone) {
        return org.apache.commons.lang.time.FastDateFormat.getTimeInstance(style, timeZone, null);
    }

    public static synchronized org.apache.commons.lang.time.FastDateFormat getTimeInstance(int style, java.util.TimeZone timeZone, java.util.Locale locale) {
        java.lang.Object key = new java.lang.Integer(style);
        if (timeZone != null) {
            key = new org.apache.commons.lang.time.FastDateFormat.Pair(key, timeZone);
        }
        if (locale != null) {
            key = new org.apache.commons.lang.time.FastDateFormat.Pair(key, locale);
        }
        org.apache.commons.lang.time.FastDateFormat format = ((org.apache.commons.lang.time.FastDateFormat) (org.apache.commons.lang.time.FastDateFormat.cTimeInstanceCache.get(key)));
        if (format == null) {
            if (locale == null) {
                locale = java.util.Locale.getDefault();
            }
            try {
                java.text.SimpleDateFormat formatter = ((java.text.SimpleDateFormat) (java.text.DateFormat.getTimeInstance(style, locale)));
                java.lang.String pattern = formatter.toPattern();
                format = org.apache.commons.lang.time.FastDateFormat.getInstance(pattern, timeZone, locale);
                org.apache.commons.lang.time.FastDateFormat.cTimeInstanceCache.put(key, format);
            } catch (java.lang.ClassCastException ex) {
                throw new java.lang.IllegalArgumentException(("No date pattern for locale: " + locale));
            }
        }
        return format;
    }

    public static org.apache.commons.lang.time.FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle) {
        return org.apache.commons.lang.time.FastDateFormat.getDateTimeInstance(dateStyle, timeStyle, null, null);
    }

    public static org.apache.commons.lang.time.FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, java.util.Locale locale) {
        return org.apache.commons.lang.time.FastDateFormat.getDateTimeInstance(dateStyle, timeStyle, null, locale);
    }

    public static org.apache.commons.lang.time.FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, java.util.TimeZone timeZone) {
        return org.apache.commons.lang.time.FastDateFormat.getDateTimeInstance(dateStyle, timeStyle, timeZone, null);
    }

    public static synchronized org.apache.commons.lang.time.FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, java.util.TimeZone timeZone, java.util.Locale locale) {
        java.lang.Object key = new org.apache.commons.lang.time.FastDateFormat.Pair(new java.lang.Integer(dateStyle), new java.lang.Integer(timeStyle));
        if (timeZone != null) {
            key = new org.apache.commons.lang.time.FastDateFormat.Pair(key, timeZone);
        }
        if (locale != null) {
            key = new org.apache.commons.lang.time.FastDateFormat.Pair(key, locale);
        }
        org.apache.commons.lang.time.FastDateFormat format = ((org.apache.commons.lang.time.FastDateFormat) (org.apache.commons.lang.time.FastDateFormat.cDateTimeInstanceCache.get(key)));
        if (format == null) {
            if (locale == null) {
                locale = java.util.Locale.getDefault();
            }
            try {
                java.text.SimpleDateFormat formatter = ((java.text.SimpleDateFormat) (java.text.DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale)));
                java.lang.String pattern = formatter.toPattern();
                format = org.apache.commons.lang.time.FastDateFormat.getInstance(pattern, timeZone, locale);
                org.apache.commons.lang.time.FastDateFormat.cDateTimeInstanceCache.put(key, format);
            } catch (java.lang.ClassCastException ex) {
                throw new java.lang.IllegalArgumentException(("No date time pattern for locale: " + locale));
            }
        }
        return format;
    }

    static synchronized java.lang.String getTimeZoneDisplay(java.util.TimeZone tz, boolean daylight, int style, java.util.Locale locale) {
        java.lang.Object key = new org.apache.commons.lang.time.FastDateFormat.TimeZoneDisplayKey(tz, daylight, style, locale);
        java.lang.String value = ((java.lang.String) (org.apache.commons.lang.time.FastDateFormat.cTimeZoneDisplayCache.get(key)));
        if (value == null) {
            value = tz.getDisplayName(daylight, style, locale);
            org.apache.commons.lang.time.FastDateFormat.cTimeZoneDisplayCache.put(key, value);
        }
        return value;
    }

    private static synchronized java.lang.String getDefaultPattern() {
        if ((org.apache.commons.lang.time.FastDateFormat.cDefaultPattern) == null) {
            org.apache.commons.lang.time.FastDateFormat.cDefaultPattern = new java.text.SimpleDateFormat().toPattern();
        }
        return org.apache.commons.lang.time.FastDateFormat.cDefaultPattern;
    }

    protected FastDateFormat(java.lang.String pattern, java.util.TimeZone timeZone, java.util.Locale locale) {
        super();
        if (pattern == null) {
            throw new java.lang.IllegalArgumentException("The pattern must not be null");
        }
        mPattern = pattern;
        mTimeZoneForced = timeZone != null;
        if (timeZone == null) {
            timeZone = java.util.TimeZone.getDefault();
        }
        mTimeZone = timeZone;
        mLocaleForced = locale != null;
        if (locale == null) {
            locale = java.util.Locale.getDefault();
        }
        mLocale = locale;
    }

    protected void init() {
        java.util.List rulesList = parsePattern();
        mRules = ((org.apache.commons.lang.time.FastDateFormat.Rule[]) (rulesList.toArray(new org.apache.commons.lang.time.FastDateFormat.Rule[rulesList.size()])));
        int len = 0;
        for (int i = mRules.length; (--i) >= 0;) {
            len += mRules[i].estimateLength();
        }
        mMaxLengthEstimate = len;
    }

    protected java.util.List parsePattern() {
        java.text.DateFormatSymbols symbols = new java.text.DateFormatSymbols(mLocale);
        java.util.List rules = new java.util.ArrayList();
        java.lang.String[] ERAs = symbols.getEras();
        java.lang.String[] months = symbols.getMonths();
        java.lang.String[] shortMonths = symbols.getShortMonths();
        java.lang.String[] weekdays = symbols.getWeekdays();
        java.lang.String[] shortWeekdays = symbols.getShortWeekdays();
        java.lang.String[] AmPmStrings = symbols.getAmPmStrings();
        int length = mPattern.length();
        int[] indexRef = new int[1];
        for (int i = 0; i < length; i++) {
            indexRef[0] = i;
            java.lang.String token = parseToken(mPattern, indexRef);
            i = indexRef[0];
            int tokenLen = token.length();
            if (tokenLen == 0) {
                break;
            }
            org.apache.commons.lang.time.FastDateFormat.Rule rule;
            char c = token.charAt(0);
            switch (c) {
                case 'G' :
                    rule = new org.apache.commons.lang.time.FastDateFormat.TextField(java.util.Calendar.ERA, ERAs);
                    break;
                case 'y' :
                    boolean spoonDefaultValue = false;
                    try {
                        spoonDefaultValue = true;
                    } catch (java.lang.Exception __NopolProcessorException) {
                    }
                    boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                    if (fr.inria.lille.commons.trace.RuntimeValues.instance(54).isEnabled()) {
                        fr.inria.lille.commons.trace.RuntimeValues.instance(54).collectionStarts();
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(54).collectInput("shortMonths",shortMonths);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(54).collectInput("org.apache.commons.lang.time.FastDateFormat.this.mMaxLengthEstimate",org.apache.commons.lang.time.FastDateFormat.this.mMaxLengthEstimate);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(54).collectInput("org.apache.commons.lang.time.FastDateFormat.this.mTimeZoneForced",org.apache.commons.lang.time.FastDateFormat.this.mTimeZoneForced);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(54).collectInput("shortWeekdays",shortWeekdays);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(54).collectInput("rules",rules);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(54).collectInput("org.apache.commons.lang.time.FastDateFormat.MEDIUM",org.apache.commons.lang.time.FastDateFormat.MEDIUM);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(54).collectInput("symbols",symbols);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(54).collectInput("indexRef",indexRef);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(54).collectInput("org.apache.commons.lang.time.FastDateFormat.this.mRules",org.apache.commons.lang.time.FastDateFormat.this.mRules);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(54).collectInput("org.apache.commons.lang.time.FastDateFormat.this.mTimeZone",org.apache.commons.lang.time.FastDateFormat.this.mTimeZone);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(54).collectInput("org.apache.commons.lang.time.FastDateFormat.cTimeInstanceCache",org.apache.commons.lang.time.FastDateFormat.cTimeInstanceCache);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(54).collectInput("org.apache.commons.lang.time.FastDateFormat.this.mLocaleForced",org.apache.commons.lang.time.FastDateFormat.this.mLocaleForced);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(54).collectInput("ERAs",ERAs);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(54).collectInput("org.apache.commons.lang.time.FastDateFormat.this.mPattern",org.apache.commons.lang.time.FastDateFormat.this.mPattern);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(54).collectInput("org.apache.commons.lang.time.FastDateFormat.SHORT",org.apache.commons.lang.time.FastDateFormat.SHORT);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(54).collectInput("c",c);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(54).collectInput("months",months);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(54).collectInput("weekdays",weekdays);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(54).collectInput("org.apache.commons.lang.time.FastDateFormat.cDateInstanceCache",org.apache.commons.lang.time.FastDateFormat.cDateInstanceCache);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(54).collectInput("length",length);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(54).collectInput("org.apache.commons.lang.time.FastDateFormat.LONG",org.apache.commons.lang.time.FastDateFormat.LONG);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(54).collectInput("tokenLen",tokenLen);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(54).collectInput("org.apache.commons.lang.time.FastDateFormat.cInstanceCache",org.apache.commons.lang.time.FastDateFormat.cInstanceCache);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(54).collectInput("org.apache.commons.lang.time.FastDateFormat.this.mLocale",org.apache.commons.lang.time.FastDateFormat.this.mLocale);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(54).collectInput("token",token);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(54).collectInput("org.apache.commons.lang.time.FastDateFormat.cTimeZoneDisplayCache",org.apache.commons.lang.time.FastDateFormat.cTimeZoneDisplayCache);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(54).collectInput("AmPmStrings",AmPmStrings);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(54).collectInput("org.apache.commons.lang.time.FastDateFormat.cDateTimeInstanceCache",org.apache.commons.lang.time.FastDateFormat.cDateTimeInstanceCache);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(54).collectInput("4",4);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(54).collectInput("tokenLen >= 4",tokenLen >= 4);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(54).collectInput("org.apache.commons.lang.time.FastDateFormat.cDefaultPattern",org.apache.commons.lang.time.FastDateFormat.cDefaultPattern);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(54).collectInput("org.apache.commons.lang.time.FastDateFormat.FULL",org.apache.commons.lang.time.FastDateFormat.FULL);} catch (Exception ex1) {ex1.printStackTrace();};
                        fr.inria.lille.commons.trace.RuntimeValues.instance(54).collectOutput(runtimeAngelicValue);
                        fr.inria.lille.commons.trace.RuntimeValues.instance(54).collectionEnds();
                    }
                    if (runtimeAngelicValue) if (tokenLen >= 4) {
                        rule = selectNumberRule(java.util.Calendar.YEAR, tokenLen);
                    }else {
                        rule = org.apache.commons.lang.time.FastDateFormat.TwoDigitYearField.INSTANCE;
                    }
                    break;
                case 'M' :
                    if (tokenLen >= 4) {
                        rule = new org.apache.commons.lang.time.FastDateFormat.TextField(java.util.Calendar.MONTH, months);
                    }else
                        if (tokenLen == 3) {
                            rule = new org.apache.commons.lang.time.FastDateFormat.TextField(java.util.Calendar.MONTH, shortMonths);
                        }else
                            if (tokenLen == 2) {
                                rule = org.apache.commons.lang.time.FastDateFormat.TwoDigitMonthField.INSTANCE;
                            }else {
                                rule = org.apache.commons.lang.time.FastDateFormat.UnpaddedMonthField.INSTANCE;
                            }


                    break;
                case 'd' :
                    rule = selectNumberRule(java.util.Calendar.DAY_OF_MONTH, tokenLen);
                    break;
                case 'h' :
                    rule = new org.apache.commons.lang.time.FastDateFormat.TwelveHourField(selectNumberRule(java.util.Calendar.HOUR, tokenLen));
                    break;
                case 'H' :
                    rule = selectNumberRule(java.util.Calendar.HOUR_OF_DAY, tokenLen);
                    break;
                case 'm' :
                    rule = selectNumberRule(java.util.Calendar.MINUTE, tokenLen);
                    break;
                case 's' :
                    rule = selectNumberRule(java.util.Calendar.SECOND, tokenLen);
                    break;
                case 'S' :
                    rule = selectNumberRule(java.util.Calendar.MILLISECOND, tokenLen);
                    break;
                case 'E' :
                    rule = new org.apache.commons.lang.time.FastDateFormat.TextField(java.util.Calendar.DAY_OF_WEEK, (tokenLen < 4 ? shortWeekdays : weekdays));
                    break;
                case 'D' :
                    rule = selectNumberRule(java.util.Calendar.DAY_OF_YEAR, tokenLen);
                    break;
                case 'F' :
                    rule = selectNumberRule(java.util.Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);
                    break;
                case 'w' :
                    rule = selectNumberRule(java.util.Calendar.WEEK_OF_YEAR, tokenLen);
                    break;
                case 'W' :
                    rule = selectNumberRule(java.util.Calendar.WEEK_OF_MONTH, tokenLen);
                    break;
                case 'a' :
                    rule = new org.apache.commons.lang.time.FastDateFormat.TextField(java.util.Calendar.AM_PM, AmPmStrings);
                    break;
                case 'k' :
                    rule = new org.apache.commons.lang.time.FastDateFormat.TwentyFourHourField(selectNumberRule(java.util.Calendar.HOUR_OF_DAY, tokenLen));
                    break;
                case 'K' :
                    rule = selectNumberRule(java.util.Calendar.HOUR, tokenLen);
                    break;
                case 'z' :
                    if (tokenLen >= 4) {
                        rule = new org.apache.commons.lang.time.FastDateFormat.TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, java.util.TimeZone.LONG);
                    }else {
                        rule = new org.apache.commons.lang.time.FastDateFormat.TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, java.util.TimeZone.SHORT);
                    }
                    break;
                case 'Z' :
                    if (tokenLen == 1) {
                        rule = org.apache.commons.lang.time.FastDateFormat.TimeZoneNumberRule.INSTANCE_NO_COLON;
                    }else {
                        rule = org.apache.commons.lang.time.FastDateFormat.TimeZoneNumberRule.INSTANCE_COLON;
                    }
                    break;
                case '\'' :
                    java.lang.String sub = token.substring(1);
                    if ((sub.length()) == 1) {
                        rule = new org.apache.commons.lang.time.FastDateFormat.CharacterLiteral(sub.charAt(0));
                    }else {
                        rule = new org.apache.commons.lang.time.FastDateFormat.StringLiteral(sub);
                    }
                    break;
                default :
                    throw new java.lang.IllegalArgumentException(("Illegal pattern component: " + token));
            }
            rules.add(rule);
        }
        return rules;
    }

    protected java.lang.String parseToken(java.lang.String pattern, int[] indexRef) {
        java.lang.StringBuffer buf = new java.lang.StringBuffer();
        int i = indexRef[0];
        int length = pattern.length();
        char c = pattern.charAt(i);
        if (((c >= 'A') && (c <= 'Z')) || ((c >= 'a') && (c <= 'z'))) {
            buf.append(c);
            while ((i + 1) < length) {
                char peek = pattern.charAt((i + 1));
                if (peek == c) {
                    buf.append(c);
                    i++;
                }else {
                    break;
                }
            } 
        }else {
            buf.append('\'');
            boolean inLiteral = false;
            for (; i < length; i++) {
                c = pattern.charAt(i);
                if (c == '\'') {
                    if (((i + 1) < length) && ((pattern.charAt((i + 1))) == '\'')) {
                        i++;
                        buf.append(c);
                    }else {
                        inLiteral = !inLiteral;
                    }
                }else
                    if ((!inLiteral) && (((c >= 'A') && (c <= 'Z')) || ((c >= 'a') && (c <= 'z')))) {
                        i--;
                        break;
                    }else {
                        buf.append(c);
                    }

            }
        }
        indexRef[0] = i;
        return buf.toString();
    }

    protected org.apache.commons.lang.time.FastDateFormat.NumberRule selectNumberRule(int field, int padding) {
        switch (padding) {
            case 1 :
                return new org.apache.commons.lang.time.FastDateFormat.UnpaddedNumberField(field);
            case 2 :
                return new org.apache.commons.lang.time.FastDateFormat.TwoDigitNumberField(field);
            default :
                return new org.apache.commons.lang.time.FastDateFormat.PaddedNumberField(field, padding);
        }
    }

    public java.lang.StringBuffer format(java.lang.Object obj, java.lang.StringBuffer toAppendTo, java.text.FieldPosition pos) {
        if (obj instanceof java.util.Date) {
            return format(((java.util.Date) (obj)), toAppendTo);
        }else
            if (obj instanceof java.util.Calendar) {
                return format(((java.util.Calendar) (obj)), toAppendTo);
            }else
                if (obj instanceof java.lang.Long) {
                    return format(((java.lang.Long) (obj)).longValue(), toAppendTo);
                }else {
                    throw new java.lang.IllegalArgumentException(("Unknown class: " + (obj == null ? "<null>" : obj.getClass().getName())));
                }


    }

    public java.lang.String format(long millis) {
        return format(new java.util.Date(millis));
    }

    public java.lang.String format(java.util.Date date) {
        java.util.Calendar c = new java.util.GregorianCalendar(mTimeZone);
        c.setTime(date);
        return applyRules(c, new java.lang.StringBuffer(mMaxLengthEstimate)).toString();
    }

    public java.lang.String format(java.util.Calendar calendar) {
        return format(calendar, new java.lang.StringBuffer(mMaxLengthEstimate)).toString();
    }

    public java.lang.StringBuffer format(long millis, java.lang.StringBuffer buf) {
        return format(new java.util.Date(millis), buf);
    }

    public java.lang.StringBuffer format(java.util.Date date, java.lang.StringBuffer buf) {
        java.util.Calendar c = new java.util.GregorianCalendar(mTimeZone);
        c.setTime(date);
        return applyRules(c, buf);
    }

    public java.lang.StringBuffer format(java.util.Calendar calendar, java.lang.StringBuffer buf) {
        if (mTimeZoneForced) {
            calendar = ((java.util.Calendar) (calendar.clone()));
            calendar.setTimeZone(mTimeZone);
        }
        return applyRules(calendar, buf);
    }

    protected java.lang.StringBuffer applyRules(java.util.Calendar calendar, java.lang.StringBuffer buf) {
        org.apache.commons.lang.time.FastDateFormat.Rule[] rules = mRules;
        int len = mRules.length;
        for (int i = 0; i < len; i++) {
            rules[i].appendTo(buf, calendar);
        }
        return buf;
    }

    public java.lang.Object parseObject(java.lang.String source, java.text.ParsePosition pos) {
        pos.setIndex(0);
        pos.setErrorIndex(0);
        return null;
    }

    public java.lang.String getPattern() {
        return mPattern;
    }

    public java.util.TimeZone getTimeZone() {
        return mTimeZone;
    }

    public boolean getTimeZoneOverridesCalendar() {
        return mTimeZoneForced;
    }

    public java.util.Locale getLocale() {
        return mLocale;
    }

    public int getMaxLengthEstimate() {
        return mMaxLengthEstimate;
    }

    public boolean equals(java.lang.Object obj) {
        if ((obj instanceof org.apache.commons.lang.time.FastDateFormat) == false) {
            return false;
        }
        org.apache.commons.lang.time.FastDateFormat other = ((org.apache.commons.lang.time.FastDateFormat) (obj));
        if (((((((mPattern) == (other.mPattern)) || (mPattern.equals(other.mPattern))) && (((mTimeZone) == (other.mTimeZone)) || (mTimeZone.equals(other.mTimeZone)))) && (((mLocale) == (other.mLocale)) || (mLocale.equals(other.mLocale)))) && ((mTimeZoneForced) == (other.mTimeZoneForced))) && ((mLocaleForced) == (other.mLocaleForced))) {
            return true;
        }
        return false;
    }

    public int hashCode() {
        int total = 0;
        total += mPattern.hashCode();
        total += mTimeZone.hashCode();
        total += (mTimeZoneForced) ? 1 : 0;
        total += mLocale.hashCode();
        total += (mLocaleForced) ? 1 : 0;
        return total;
    }

    public java.lang.String toString() {
        return ("FastDateFormat[" + (mPattern)) + "]";
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
        in.defaultReadObject();
        init();
    }

    private interface Rule {
        int estimateLength();

        void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar);
    }

    private interface NumberRule extends org.apache.commons.lang.time.FastDateFormat.Rule {
        void appendTo(java.lang.StringBuffer buffer, int value);
    }

    private static class CharacterLiteral implements org.apache.commons.lang.time.FastDateFormat.Rule {
        private final char mValue;

        CharacterLiteral(char value) {
            mValue = value;
        }

        public int estimateLength() {
            return 1;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            buffer.append(mValue);
        }
    }

    private static class StringLiteral implements org.apache.commons.lang.time.FastDateFormat.Rule {
        private final java.lang.String mValue;

        StringLiteral(java.lang.String value) {
            mValue = value;
        }

        public int estimateLength() {
            return mValue.length();
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            buffer.append(mValue);
        }
    }

    private static class TextField implements org.apache.commons.lang.time.FastDateFormat.Rule {
        private final int mField;

        private final java.lang.String[] mValues;

        TextField(int field, java.lang.String[] values) {
            mField = field;
            mValues = values;
        }

        public int estimateLength() {
            int max = 0;
            for (int i = mValues.length; (--i) >= 0;) {
                int len = mValues[i].length();
                if (len > max) {
                    max = len;
                }
            }
            return max;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            buffer.append(mValues[calendar.get(mField)]);
        }
    }

    private static class UnpaddedNumberField implements org.apache.commons.lang.time.FastDateFormat.NumberRule {
        static final org.apache.commons.lang.time.FastDateFormat.UnpaddedNumberField INSTANCE_YEAR = new org.apache.commons.lang.time.FastDateFormat.UnpaddedNumberField(java.util.Calendar.YEAR);

        private final int mField;

        UnpaddedNumberField(int field) {
            mField = field;
        }

        public int estimateLength() {
            return 4;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            appendTo(buffer, calendar.get(mField));
        }

        public final void appendTo(java.lang.StringBuffer buffer, int value) {
            if (value < 10) {
                buffer.append(((char) (value + '0')));
            }else
                if (value < 100) {
                    buffer.append(((char) ((value / 10) + '0')));
                    buffer.append(((char) ((value % 10) + '0')));
                }else {
                    buffer.append(java.lang.Integer.toString(value));
                }

        }
    }

    private static class UnpaddedMonthField implements org.apache.commons.lang.time.FastDateFormat.NumberRule {
        static final org.apache.commons.lang.time.FastDateFormat.UnpaddedMonthField INSTANCE = new org.apache.commons.lang.time.FastDateFormat.UnpaddedMonthField();

        UnpaddedMonthField() {
            super();
        }

        public int estimateLength() {
            return 2;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            appendTo(buffer, ((calendar.get(java.util.Calendar.MONTH)) + 1));
        }

        public final void appendTo(java.lang.StringBuffer buffer, int value) {
            if (value < 10) {
                buffer.append(((char) (value + '0')));
            }else {
                buffer.append(((char) ((value / 10) + '0')));
                buffer.append(((char) ((value % 10) + '0')));
            }
        }
    }

    private static class PaddedNumberField implements org.apache.commons.lang.time.FastDateFormat.NumberRule {
        private final int mField;

        private final int mSize;

        PaddedNumberField(int field, int size) {
            if (size < 3) {
                throw new java.lang.IllegalArgumentException();
            }
            mField = field;
            mSize = size;
        }

        public int estimateLength() {
            return 4;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            appendTo(buffer, calendar.get(mField));
        }

        public final void appendTo(java.lang.StringBuffer buffer, int value) {
            if (value < 100) {
                for (int i = mSize; (--i) >= 2;) {
                    buffer.append('0');
                }
                buffer.append(((char) ((value / 10) + '0')));
                buffer.append(((char) ((value % 10) + '0')));
            }else {
                int digits;
                if (value < 1000) {
                    digits = 3;
                }else {
                    org.apache.commons.lang.Validate.isTrue((value > (-1)), "Negative values should not be possible", value);
                    digits = java.lang.Integer.toString(value).length();
                }
                for (int i = mSize; (--i) >= digits;) {
                    buffer.append('0');
                }
                buffer.append(java.lang.Integer.toString(value));
            }
        }
    }

    private static class TwoDigitNumberField implements org.apache.commons.lang.time.FastDateFormat.NumberRule {
        private final int mField;

        TwoDigitNumberField(int field) {
            mField = field;
        }

        public int estimateLength() {
            return 2;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            appendTo(buffer, calendar.get(mField));
        }

        public final void appendTo(java.lang.StringBuffer buffer, int value) {
            if (value < 100) {
                buffer.append(((char) ((value / 10) + '0')));
                buffer.append(((char) ((value % 10) + '0')));
            }else {
                buffer.append(java.lang.Integer.toString(value));
            }
        }
    }

    private static class TwoDigitYearField implements org.apache.commons.lang.time.FastDateFormat.NumberRule {
        static final org.apache.commons.lang.time.FastDateFormat.TwoDigitYearField INSTANCE = new org.apache.commons.lang.time.FastDateFormat.TwoDigitYearField();

        TwoDigitYearField() {
            super();
        }

        public int estimateLength() {
            return 2;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            appendTo(buffer, ((calendar.get(java.util.Calendar.YEAR)) % 100));
        }

        public final void appendTo(java.lang.StringBuffer buffer, int value) {
            buffer.append(((char) ((value / 10) + '0')));
            buffer.append(((char) ((value % 10) + '0')));
        }
    }

    private static class TwoDigitMonthField implements org.apache.commons.lang.time.FastDateFormat.NumberRule {
        static final org.apache.commons.lang.time.FastDateFormat.TwoDigitMonthField INSTANCE = new org.apache.commons.lang.time.FastDateFormat.TwoDigitMonthField();

        TwoDigitMonthField() {
            super();
        }

        public int estimateLength() {
            return 2;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            appendTo(buffer, ((calendar.get(java.util.Calendar.MONTH)) + 1));
        }

        public final void appendTo(java.lang.StringBuffer buffer, int value) {
            buffer.append(((char) ((value / 10) + '0')));
            buffer.append(((char) ((value % 10) + '0')));
        }
    }

    private static class TwelveHourField implements org.apache.commons.lang.time.FastDateFormat.NumberRule {
        private final org.apache.commons.lang.time.FastDateFormat.NumberRule mRule;

        TwelveHourField(org.apache.commons.lang.time.FastDateFormat.NumberRule rule) {
            mRule = rule;
        }

        public int estimateLength() {
            return mRule.estimateLength();
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            int value = calendar.get(java.util.Calendar.HOUR);
            if (value == 0) {
                value = (calendar.getLeastMaximum(java.util.Calendar.HOUR)) + 1;
            }
            mRule.appendTo(buffer, value);
        }

        public void appendTo(java.lang.StringBuffer buffer, int value) {
            mRule.appendTo(buffer, value);
        }
    }

    private static class TwentyFourHourField implements org.apache.commons.lang.time.FastDateFormat.NumberRule {
        private final org.apache.commons.lang.time.FastDateFormat.NumberRule mRule;

        TwentyFourHourField(org.apache.commons.lang.time.FastDateFormat.NumberRule rule) {
            mRule = rule;
        }

        public int estimateLength() {
            return mRule.estimateLength();
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            int value = calendar.get(java.util.Calendar.HOUR_OF_DAY);
            if (value == 0) {
                value = (calendar.getMaximum(java.util.Calendar.HOUR_OF_DAY)) + 1;
            }
            mRule.appendTo(buffer, value);
        }

        public void appendTo(java.lang.StringBuffer buffer, int value) {
            mRule.appendTo(buffer, value);
        }
    }

    private static class TimeZoneNameRule implements org.apache.commons.lang.time.FastDateFormat.Rule {
        private final java.util.TimeZone mTimeZone;

        private final boolean mTimeZoneForced;

        private final java.util.Locale mLocale;

        private final int mStyle;

        private final java.lang.String mStandard;

        private final java.lang.String mDaylight;

        TimeZoneNameRule(java.util.TimeZone timeZone, boolean timeZoneForced, java.util.Locale locale, int style) {
            mTimeZone = timeZone;
            mTimeZoneForced = timeZoneForced;
            mLocale = locale;
            mStyle = style;
            if (timeZoneForced) {
                mStandard = org.apache.commons.lang.time.FastDateFormat.getTimeZoneDisplay(timeZone, false, style, locale);
                mDaylight = org.apache.commons.lang.time.FastDateFormat.getTimeZoneDisplay(timeZone, true, style, locale);
            }else {
                mStandard = null;
                mDaylight = null;
            }
        }

        public int estimateLength() {
            if (mTimeZoneForced) {
                return java.lang.Math.max(mStandard.length(), mDaylight.length());
            }else
                if ((mStyle) == (java.util.TimeZone.SHORT)) {
                    return 4;
                }else {
                    return 40;
                }

        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            if (mTimeZoneForced) {
                if ((mTimeZone.useDaylightTime()) && ((calendar.get(java.util.Calendar.DST_OFFSET)) != 0)) {
                    buffer.append(mDaylight);
                }else {
                    buffer.append(mStandard);
                }
            }else {
                java.util.TimeZone timeZone = calendar.getTimeZone();
                if ((timeZone.useDaylightTime()) && ((calendar.get(java.util.Calendar.DST_OFFSET)) != 0)) {
                    buffer.append(org.apache.commons.lang.time.FastDateFormat.getTimeZoneDisplay(timeZone, true, mStyle, mLocale));
                }else {
                    buffer.append(org.apache.commons.lang.time.FastDateFormat.getTimeZoneDisplay(timeZone, false, mStyle, mLocale));
                }
            }
        }
    }

    private static class TimeZoneNumberRule implements org.apache.commons.lang.time.FastDateFormat.Rule {
        static final org.apache.commons.lang.time.FastDateFormat.TimeZoneNumberRule INSTANCE_COLON = new org.apache.commons.lang.time.FastDateFormat.TimeZoneNumberRule(true);

        static final org.apache.commons.lang.time.FastDateFormat.TimeZoneNumberRule INSTANCE_NO_COLON = new org.apache.commons.lang.time.FastDateFormat.TimeZoneNumberRule(false);

        final boolean mColon;

        TimeZoneNumberRule(boolean colon) {
            mColon = colon;
        }

        public int estimateLength() {
            return 5;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            int offset = (calendar.get(java.util.Calendar.ZONE_OFFSET)) + (calendar.get(java.util.Calendar.DST_OFFSET));
            if (offset < 0) {
                buffer.append('-');
                offset = -offset;
            }else {
                buffer.append('+');
            }
            int hours = offset / ((60 * 60) * 1000);
            buffer.append(((char) ((hours / 10) + '0')));
            buffer.append(((char) ((hours % 10) + '0')));
            if (mColon) {
                buffer.append(':');
            }
            int minutes = (offset / (60 * 1000)) - (60 * hours);
            buffer.append(((char) ((minutes / 10) + '0')));
            buffer.append(((char) ((minutes % 10) + '0')));
        }
    }

    private static class TimeZoneDisplayKey {
        private final java.util.TimeZone mTimeZone;

        private final int mStyle;

        private final java.util.Locale mLocale;

        TimeZoneDisplayKey(java.util.TimeZone timeZone, boolean daylight, int style, java.util.Locale locale) {
            mTimeZone = timeZone;
            if (daylight) {
                style |= -2147483648;
            }
            mStyle = style;
            mLocale = locale;
        }

        public int hashCode() {
            return ((mStyle) * 31) + (mLocale.hashCode());
        }

        public boolean equals(java.lang.Object obj) {
            if ((this) == obj) {
                return true;
            }
            if (obj instanceof org.apache.commons.lang.time.FastDateFormat.TimeZoneDisplayKey) {
                org.apache.commons.lang.time.FastDateFormat.TimeZoneDisplayKey other = ((org.apache.commons.lang.time.FastDateFormat.TimeZoneDisplayKey) (obj));
                return ((mTimeZone.equals(other.mTimeZone)) && ((mStyle) == (other.mStyle))) && (mLocale.equals(other.mLocale));
            }
            return false;
        }
    }

    private static class Pair {
        private final java.lang.Object mObj1;

        private final java.lang.Object mObj2;

        public Pair(java.lang.Object obj1, java.lang.Object obj2) {
            mObj1 = obj1;
            mObj2 = obj2;
        }

        public boolean equals(java.lang.Object obj) {
            if ((this) == obj) {
                return true;
            }
            if (!(obj instanceof org.apache.commons.lang.time.FastDateFormat.Pair)) {
                return false;
            }
            org.apache.commons.lang.time.FastDateFormat.Pair key = ((org.apache.commons.lang.time.FastDateFormat.Pair) (obj));
            return ((mObj1) == null ? (key.mObj1) == null : mObj1.equals(key.mObj1)) && ((mObj2) == null ? (key.mObj2) == null : mObj2.equals(key.mObj2));
        }

        public int hashCode() {
            return ((mObj1) == null ? 0 : mObj1.hashCode()) + ((mObj2) == null ? 0 : mObj2.hashCode());
        }

        public java.lang.String toString() {
            return ((("[" + (mObj1)) + ':') + (mObj2)) + ']';
        }
    }
}
18:39:30.353 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
18:39:30.353 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:39:30.368 [pool-282-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (12 ms)
<> Total tests run: 26
<> Ignored tests: 0
<> Failed tests: 4
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
18:39:31.106 [pool-283-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (4 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:39:31.108 [pool-284-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
18:39:31.109 [pool-285-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:39:31.110 [pool-286-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

18:39:31.110 [pool-281-thread-1] DEBUG tests.output - Failing tests with false: 
[test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>, test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>]
18:39:31.110 [pool-281-thread-1] DEBUG tests.output - Failing tests with true: 
[test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>, test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>]
18:39:31.110 [pool-281-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.lang.time.FastDateFormat:612.
18:39:31.110 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #72
18:39:31.110 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang.time.FastDateFormat:753 which is executed by 18 tests
-1899260190
18:39:31.199 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:39:31.213 [pool-288-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (12 ms)
<> Total tests run: 26
<> Ignored tests: 0
<> Failed tests: 4
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
18:39:31.986 [pool-289-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (3 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:39:31.988 [pool-290-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
18:39:31.989 [pool-291-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:39:31.990 [pool-292-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

18:39:31.990 [pool-287-thread-1] DEBUG tests.output - Failing tests with false: 
[test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>, test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>]
18:39:31.990 [pool-287-thread-1] DEBUG tests.output - Failing tests with true: 
[test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>, test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>]
18:39:31.990 [pool-287-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.lang.time.FastDateFormat:753.
18:39:31.990 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #73
18:39:31.990 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang.time.FastDateFormat:751 which is executed by 18 tests
-1899260190
18:39:32.080 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:39:32.095 [pool-294-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (12 ms)
<> Total tests run: 26
<> Ignored tests: 0
<> Failed tests: 4
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

java.lang.OutOfMemoryError: GC overhead limit exceeded
    at java.util.HashMap.newNode(HashMap.java:1747)
    at java.util.HashMap.putVal(HashMap.java:631)
    at java.util.HashMap.put(HashMap.java:612)
    at fr.inria.lille.commons.trace.collector.ValueCollector.collectWith(ValueCollector.java:31)
    at fr.inria.lille.commons.trace.collector.ValueCollector.collectFrom(ValueCollector.java:21)
    at fr.inria.lille.commons.trace.RuntimeValues.collectInput(RuntimeValues.java:89)
18:42:52.405 [pool-295-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (199566 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[GC overhead limit exceeded]
java.lang.OutOfMemoryError: GC overhead limit exceeded    at java.util.HashMap.newNode(HashMap.java:1747)
    at java.util.HashMap.putVal(HashMap.java:631)
    at java.util.HashMap.put(HashMap.java:612)
    at fr.inria.lille.commons.trace.collector.ValueCollector.collectWith(ValueCollector.java:31)
    at fr.inria.lille.commons.trace.collector.ValueCollector.collectFrom(ValueCollector.java:21)
    at fr.inria.lille.commons.trace.RuntimeValues.collectInput(RuntimeValues.java:89)

18:46:12.407 [pool-293-thread-1] DEBUG xxl.java.junit.TestSuiteExecution - Timeout after 200 seconds. Infinite loop?
18:46:12.407 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.TimeoutException
18:46:12.407 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #74
18:46:12.408 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang.time.FastDateFormat:750 which is executed by 18 tests
-1899260190
18:46:12.518 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:46:12.539 [pool-298-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (17 ms)
<> Total tests run: 26
<> Ignored tests: 0
<> Failed tests: 4
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
18:46:13.294 [pool-299-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (3 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:46:13.304 [pool-300-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
18:46:13.305 [pool-301-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:46:13.305 [pool-302-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

18:46:13.305 [pool-297-thread-1] DEBUG tests.output - Failing tests with false: 
[test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>, test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>]
18:46:13.306 [pool-297-thread-1] DEBUG tests.output - Failing tests with true: 
[test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>, test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>]
18:46:13.306 [pool-297-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.lang.time.FastDateFormat:750.
18:46:13.306 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #75
18:46:13.306 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang.time.FastDateFormat:748 which is executed by 18 tests
-1899260190
18:46:13.397 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:46:13.413 [pool-304-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (12 ms)
<> Total tests run: 26
<> Ignored tests: 0
<> Failed tests: 4
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
18:46:14.184 [pool-305-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (4 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:46:14.187 [pool-306-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
18:46:14.188 [pool-307-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:46:14.189 [pool-308-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

18:46:14.189 [pool-303-thread-1] DEBUG tests.output - Failing tests with false: 
[test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>, test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>]
18:46:14.189 [pool-303-thread-1] DEBUG tests.output - Failing tests with true: 
[test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>, test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>]
18:46:14.189 [pool-303-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.lang.time.FastDateFormat:748.
18:46:14.189 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:46:14.203 [pool-310-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (11 ms)
<> Total tests run: 26
<> Ignored tests: 0
<> Failed tests: 4
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
18:46:14.948 [pool-311-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (6 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:46:14.951 [pool-312-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
18:46:14.952 [pool-313-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:46:14.953 [pool-314-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

18:46:14.953 [pool-309-thread-1] DEBUG tests.output - Failing tests with false: 
[test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>, test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>]
18:46:14.953 [pool-309-thread-1] DEBUG tests.output - Failing tests with true: 
[test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>, test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>]
18:46:14.953 [pool-309-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.lang.time.FastDateFormat:748.
18:46:14.953 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #76
18:46:14.953 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang.time.FastDateFormat:740 which is executed by 18 tests
-1899260190
18:46:15.073 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:46:15.087 [pool-316-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (11 ms)
<> Total tests run: 26
<> Ignored tests: 0
<> Failed tests: 4
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
18:46:15.832 [pool-317-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (4 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:46:15.835 [pool-318-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
18:46:15.836 [pool-319-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:46:15.837 [pool-320-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

18:46:15.837 [pool-315-thread-1] DEBUG tests.output - Failing tests with false: 
[test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>, test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>]
18:46:15.837 [pool-315-thread-1] DEBUG tests.output - Failing tests with true: 
[test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>, test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>]
18:46:15.837 [pool-315-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.lang.time.FastDateFormat:740.
18:46:15.837 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:46:15.858 [pool-322-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (17 ms)
<> Total tests run: 26
<> Ignored tests: 0
<> Failed tests: 4
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
18:46:16.616 [pool-323-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (4 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)

java.lang.IllegalArgumentException: Illegal pattern component: U
    at org.apache.commons.lang.time.FastDateFormat.parsePattern(FastDateFormat.java:334)
    at org.apache.commons.lang.time.FastDateFormat.init(FastDateFormat.java:213)
    at org.apache.commons.lang.time.FastDateFormat.getInstance(FastDateFormat.java:60)
    at org.apache.commons.lang.time.FastDateFormat.getDateTimeInstance(FastDateFormat.java:168)
    at org.apache.commons.lang.time.FastDateFormat.getDateTimeInstance(FastDateFormat.java:145)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:159)
18:46:16.618 [pool-324-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[Illegal pattern component: U]
java.lang.IllegalArgumentException: Illegal pattern component: U    at org.apache.commons.lang.time.FastDateFormat.parsePattern(FastDateFormat.java:334)
    at org.apache.commons.lang.time.FastDateFormat.init(FastDateFormat.java:213)
    at org.apache.commons.lang.time.FastDateFormat.getInstance(FastDateFormat.java:60)
    at org.apache.commons.lang.time.FastDateFormat.getDateTimeInstance(FastDateFormat.java:168)
    at org.apache.commons.lang.time.FastDateFormat.getDateTimeInstance(FastDateFormat.java:145)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:159)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
18:46:16.619 [pool-325-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:46:16.621 [pool-326-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

18:46:16.621 [pool-321-thread-1] DEBUG tests.output - Failing tests with false: 
[test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>, test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest): Illegal pattern component: U]
18:46:16.621 [pool-321-thread-1] DEBUG tests.output - Failing tests with true: 
[test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>, test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>]
18:46:16.621 [pool-321-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.lang.time.FastDateFormat:740.
18:46:16.621 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #77
18:46:16.621 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang.time.FastDateFormat:738 which is executed by 18 tests
-1899260190
18:46:16.708 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:46:16.722 [pool-328-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (11 ms)
<> Total tests run: 26
<> Ignored tests: 0
<> Failed tests: 4
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
18:46:17.472 [pool-329-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (3 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:46:17.475 [pool-330-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
18:46:17.476 [pool-331-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:46:17.477 [pool-332-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

18:46:17.477 [pool-327-thread-1] DEBUG tests.output - Failing tests with false: 
[test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>, test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>]
18:46:17.477 [pool-327-thread-1] DEBUG tests.output - Failing tests with true: 
[test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>, test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>]
18:46:17.477 [pool-327-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.lang.time.FastDateFormat:738.
18:46:17.477 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #78
18:46:17.477 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang.time.FastDateFormat:737 which is executed by 18 tests
-1899260190
18:46:17.566 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:46:17.580 [pool-334-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (12 ms)
<> Total tests run: 26
<> Ignored tests: 0
<> Failed tests: 4
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
18:46:18.343 [pool-335-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (3 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)

java.lang.IllegalArgumentException: Illegal pattern component: U
    at org.apache.commons.lang.time.FastDateFormat.parsePattern(FastDateFormat.java:334)
    at org.apache.commons.lang.time.FastDateFormat.init(FastDateFormat.java:213)
    at org.apache.commons.lang.time.FastDateFormat.getInstance(FastDateFormat.java:60)
    at org.apache.commons.lang.time.FastDateFormat.getDateTimeInstance(FastDateFormat.java:168)
    at org.apache.commons.lang.time.FastDateFormat.getDateTimeInstance(FastDateFormat.java:145)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:159)
18:46:18.345 [pool-336-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[Illegal pattern component: U]
java.lang.IllegalArgumentException: Illegal pattern component: U    at org.apache.commons.lang.time.FastDateFormat.parsePattern(FastDateFormat.java:334)
    at org.apache.commons.lang.time.FastDateFormat.init(FastDateFormat.java:213)
    at org.apache.commons.lang.time.FastDateFormat.getInstance(FastDateFormat.java:60)
    at org.apache.commons.lang.time.FastDateFormat.getDateTimeInstance(FastDateFormat.java:168)
    at org.apache.commons.lang.time.FastDateFormat.getDateTimeInstance(FastDateFormat.java:145)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:159)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
18:46:18.346 [pool-337-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:46:18.348 [pool-338-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

18:46:18.348 [pool-333-thread-1] DEBUG tests.output - Failing tests with false: 
[test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>, test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest): Illegal pattern component: U]
18:46:18.348 [pool-333-thread-1] DEBUG tests.output - Failing tests with true: 
[test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>, test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>]
18:46:18.348 [pool-333-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.lang.time.FastDateFormat:737.
18:46:18.348 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #79
18:46:18.348 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang.time.FastDateFormat:735 which is executed by 18 tests
-1899260190
18:46:18.435 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #80
18:46:18.435 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang.time.FastDateFormat:733 which is executed by 18 tests
-1899260190
18:46:18.527 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:46:18.542 [pool-340-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (13 ms)
<> Total tests run: 26
<> Ignored tests: 0
<> Failed tests: 4
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

java.lang.IllegalArgumentException: Illegal pattern component: , 
    at org.apache.commons.lang.time.FastDateFormat.parsePattern(FastDateFormat.java:334)
    at org.apache.commons.lang.time.FastDateFormat.init(FastDateFormat.java:213)
    at org.apache.commons.lang.time.FastDateFormat.getInstance(FastDateFormat.java:60)
    at org.apache.commons.lang.time.FastDateFormat.getDateInstance(FastDateFormat.java:94)
    at org.apache.commons.lang.time.FastDateFormat.getDateInstance(FastDateFormat.java:71)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:139)
18:46:19.287 [pool-341-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (3 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[Illegal pattern component: , ]
java.lang.IllegalArgumentException: Illegal pattern component: ,     at org.apache.commons.lang.time.FastDateFormat.parsePattern(FastDateFormat.java:334)
    at org.apache.commons.lang.time.FastDateFormat.init(FastDateFormat.java:213)
    at org.apache.commons.lang.time.FastDateFormat.getInstance(FastDateFormat.java:60)
    at org.apache.commons.lang.time.FastDateFormat.getDateInstance(FastDateFormat.java:94)
    at org.apache.commons.lang.time.FastDateFormat.getDateInstance(FastDateFormat.java:71)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:139)

java.lang.IllegalArgumentException: Illegal pattern component: , 
    at org.apache.commons.lang.time.FastDateFormat.parsePattern(FastDateFormat.java:334)
    at org.apache.commons.lang.time.FastDateFormat.init(FastDateFormat.java:213)
    at org.apache.commons.lang.time.FastDateFormat.getInstance(FastDateFormat.java:60)
    at org.apache.commons.lang.time.FastDateFormat.getDateTimeInstance(FastDateFormat.java:168)
    at org.apache.commons.lang.time.FastDateFormat.getDateTimeInstance(FastDateFormat.java:145)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:159)
18:46:19.288 [pool-342-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[Illegal pattern component: , ]
java.lang.IllegalArgumentException: Illegal pattern component: ,     at org.apache.commons.lang.time.FastDateFormat.parsePattern(FastDateFormat.java:334)
    at org.apache.commons.lang.time.FastDateFormat.init(FastDateFormat.java:213)
    at org.apache.commons.lang.time.FastDateFormat.getInstance(FastDateFormat.java:60)
    at org.apache.commons.lang.time.FastDateFormat.getDateTimeInstance(FastDateFormat.java:168)
    at org.apache.commons.lang.time.FastDateFormat.getDateTimeInstance(FastDateFormat.java:145)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:159)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
18:46:19.290 [pool-343-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:46:19.292 [pool-344-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

18:46:19.292 [pool-339-thread-1] DEBUG tests.output - Failing tests with false: 
[test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest): Illegal pattern component: , , test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest): Illegal pattern component: , ]
18:46:19.293 [pool-339-thread-1] DEBUG tests.output - Failing tests with true: 
[test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>, test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>]
18:46:19.293 [pool-339-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.lang.time.FastDateFormat:733.
18:46:19.293 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #81
18:46:19.293 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang.time.FastDateFormat:688 which is executed by 18 tests
-1899260190
18:46:19.403 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:46:19.418 [pool-346-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (12 ms)
<> Total tests run: 26
<> Ignored tests: 0
<> Failed tests: 4
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

18:46:20.135 [pool-345-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
FastDateFormat.java:379: error: variable rule might not have been initialized
            rules.add(rule);
                      ^
Note: FastDateFormat.java uses unchecked or unsafe operations.
Note: Recompile with -Xlint:unchecked for details.
18:46:20.708 [pool-345-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public class FastDateFormat extends java.text.Format {
    private static final long serialVersionUID = 1L;

    public static final int FULL = java.text.DateFormat.FULL;

    public static final int LONG = java.text.DateFormat.LONG;

    public static final int MEDIUM = java.text.DateFormat.MEDIUM;

    public static final int SHORT = java.text.DateFormat.SHORT;

    private static java.lang.String cDefaultPattern;

    private static java.util.Map cInstanceCache = new java.util.HashMap(7);

    private static java.util.Map cDateInstanceCache = new java.util.HashMap(7);

    private static java.util.Map cTimeInstanceCache = new java.util.HashMap(7);

    private static java.util.Map cDateTimeInstanceCache = new java.util.HashMap(7);

    private static java.util.Map cTimeZoneDisplayCache = new java.util.HashMap(7);

    private final java.lang.String mPattern;

    private final java.util.TimeZone mTimeZone;

    private final boolean mTimeZoneForced;

    private final java.util.Locale mLocale;

    private final boolean mLocaleForced;

    private transient org.apache.commons.lang.time.FastDateFormat.Rule[] mRules;

    private transient int mMaxLengthEstimate;

    public static org.apache.commons.lang.time.FastDateFormat getInstance() {
        return org.apache.commons.lang.time.FastDateFormat.getInstance(org.apache.commons.lang.time.FastDateFormat.getDefaultPattern(), null, null);
    }

    public static org.apache.commons.lang.time.FastDateFormat getInstance(java.lang.String pattern) {
        return org.apache.commons.lang.time.FastDateFormat.getInstance(pattern, null, null);
    }

    public static org.apache.commons.lang.time.FastDateFormat getInstance(java.lang.String pattern, java.util.TimeZone timeZone) {
        return org.apache.commons.lang.time.FastDateFormat.getInstance(pattern, timeZone, null);
    }

    public static org.apache.commons.lang.time.FastDateFormat getInstance(java.lang.String pattern, java.util.Locale locale) {
        return org.apache.commons.lang.time.FastDateFormat.getInstance(pattern, null, locale);
    }

    public static synchronized org.apache.commons.lang.time.FastDateFormat getInstance(java.lang.String pattern, java.util.TimeZone timeZone, java.util.Locale locale) {
        org.apache.commons.lang.time.FastDateFormat emptyFormat = new org.apache.commons.lang.time.FastDateFormat(pattern, timeZone, locale);
        org.apache.commons.lang.time.FastDateFormat format = ((org.apache.commons.lang.time.FastDateFormat) (org.apache.commons.lang.time.FastDateFormat.cInstanceCache.get(emptyFormat)));
        if (format == null) {
            format = emptyFormat;
            format.init();
            org.apache.commons.lang.time.FastDateFormat.cInstanceCache.put(format, format);
        }
        return format;
    }

    public static org.apache.commons.lang.time.FastDateFormat getDateInstance(int style) {
        return org.apache.commons.lang.time.FastDateFormat.getDateInstance(style, null, null);
    }

    public static org.apache.commons.lang.time.FastDateFormat getDateInstance(int style, java.util.Locale locale) {
        return org.apache.commons.lang.time.FastDateFormat.getDateInstance(style, null, locale);
    }

    public static org.apache.commons.lang.time.FastDateFormat getDateInstance(int style, java.util.TimeZone timeZone) {
        return org.apache.commons.lang.time.FastDateFormat.getDateInstance(style, timeZone, null);
    }

    public static synchronized org.apache.commons.lang.time.FastDateFormat getDateInstance(int style, java.util.TimeZone timeZone, java.util.Locale locale) {
        java.lang.Object key = new java.lang.Integer(style);
        if (timeZone != null) {
            key = new org.apache.commons.lang.time.FastDateFormat.Pair(key, timeZone);
        }
        if (locale != null) {
            key = new org.apache.commons.lang.time.FastDateFormat.Pair(key, locale);
        }
        org.apache.commons.lang.time.FastDateFormat format = ((org.apache.commons.lang.time.FastDateFormat) (org.apache.commons.lang.time.FastDateFormat.cDateInstanceCache.get(key)));
        if (format == null) {
            if (locale == null) {
                locale = java.util.Locale.getDefault();
            }
            try {
                java.text.SimpleDateFormat formatter = ((java.text.SimpleDateFormat) (java.text.DateFormat.getDateInstance(style, locale)));
                java.lang.String pattern = formatter.toPattern();
                format = org.apache.commons.lang.time.FastDateFormat.getInstance(pattern, timeZone, locale);
                org.apache.commons.lang.time.FastDateFormat.cDateInstanceCache.put(key, format);
            } catch (java.lang.ClassCastException ex) {
                throw new java.lang.IllegalArgumentException(("No date pattern for locale: " + locale));
            }
        }
        return format;
    }

    public static org.apache.commons.lang.time.FastDateFormat getTimeInstance(int style) {
        return org.apache.commons.lang.time.FastDateFormat.getTimeInstance(style, null, null);
    }

    public static org.apache.commons.lang.time.FastDateFormat getTimeInstance(int style, java.util.Locale locale) {
        return org.apache.commons.lang.time.FastDateFormat.getTimeInstance(style, null, locale);
    }

    public static org.apache.commons.lang.time.FastDateFormat getTimeInstance(int style, java.util.TimeZone timeZone) {
        return org.apache.commons.lang.time.FastDateFormat.getTimeInstance(style, timeZone, null);
    }

    public static synchronized org.apache.commons.lang.time.FastDateFormat getTimeInstance(int style, java.util.TimeZone timeZone, java.util.Locale locale) {
        java.lang.Object key = new java.lang.Integer(style);
        if (timeZone != null) {
            key = new org.apache.commons.lang.time.FastDateFormat.Pair(key, timeZone);
        }
        if (locale != null) {
            key = new org.apache.commons.lang.time.FastDateFormat.Pair(key, locale);
        }
        org.apache.commons.lang.time.FastDateFormat format = ((org.apache.commons.lang.time.FastDateFormat) (org.apache.commons.lang.time.FastDateFormat.cTimeInstanceCache.get(key)));
        if (format == null) {
            if (locale == null) {
                locale = java.util.Locale.getDefault();
            }
            try {
                java.text.SimpleDateFormat formatter = ((java.text.SimpleDateFormat) (java.text.DateFormat.getTimeInstance(style, locale)));
                java.lang.String pattern = formatter.toPattern();
                format = org.apache.commons.lang.time.FastDateFormat.getInstance(pattern, timeZone, locale);
                org.apache.commons.lang.time.FastDateFormat.cTimeInstanceCache.put(key, format);
            } catch (java.lang.ClassCastException ex) {
                throw new java.lang.IllegalArgumentException(("No date pattern for locale: " + locale));
            }
        }
        return format;
    }

    public static org.apache.commons.lang.time.FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle) {
        return org.apache.commons.lang.time.FastDateFormat.getDateTimeInstance(dateStyle, timeStyle, null, null);
    }

    public static org.apache.commons.lang.time.FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, java.util.Locale locale) {
        return org.apache.commons.lang.time.FastDateFormat.getDateTimeInstance(dateStyle, timeStyle, null, locale);
    }

    public static org.apache.commons.lang.time.FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, java.util.TimeZone timeZone) {
        return org.apache.commons.lang.time.FastDateFormat.getDateTimeInstance(dateStyle, timeStyle, timeZone, null);
    }

    public static synchronized org.apache.commons.lang.time.FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, java.util.TimeZone timeZone, java.util.Locale locale) {
        java.lang.Object key = new org.apache.commons.lang.time.FastDateFormat.Pair(new java.lang.Integer(dateStyle), new java.lang.Integer(timeStyle));
        if (timeZone != null) {
            key = new org.apache.commons.lang.time.FastDateFormat.Pair(key, timeZone);
        }
        if (locale != null) {
            key = new org.apache.commons.lang.time.FastDateFormat.Pair(key, locale);
        }
        org.apache.commons.lang.time.FastDateFormat format = ((org.apache.commons.lang.time.FastDateFormat) (org.apache.commons.lang.time.FastDateFormat.cDateTimeInstanceCache.get(key)));
        if (format == null) {
            if (locale == null) {
                locale = java.util.Locale.getDefault();
            }
            try {
                java.text.SimpleDateFormat formatter = ((java.text.SimpleDateFormat) (java.text.DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale)));
                java.lang.String pattern = formatter.toPattern();
                format = org.apache.commons.lang.time.FastDateFormat.getInstance(pattern, timeZone, locale);
                org.apache.commons.lang.time.FastDateFormat.cDateTimeInstanceCache.put(key, format);
            } catch (java.lang.ClassCastException ex) {
                throw new java.lang.IllegalArgumentException(("No date time pattern for locale: " + locale));
            }
        }
        return format;
    }

    static synchronized java.lang.String getTimeZoneDisplay(java.util.TimeZone tz, boolean daylight, int style, java.util.Locale locale) {
        java.lang.Object key = new org.apache.commons.lang.time.FastDateFormat.TimeZoneDisplayKey(tz, daylight, style, locale);
        java.lang.String value = ((java.lang.String) (org.apache.commons.lang.time.FastDateFormat.cTimeZoneDisplayCache.get(key)));
        if (value == null) {
            value = tz.getDisplayName(daylight, style, locale);
            org.apache.commons.lang.time.FastDateFormat.cTimeZoneDisplayCache.put(key, value);
        }
        return value;
    }

    private static synchronized java.lang.String getDefaultPattern() {
        if ((org.apache.commons.lang.time.FastDateFormat.cDefaultPattern) == null) {
            org.apache.commons.lang.time.FastDateFormat.cDefaultPattern = new java.text.SimpleDateFormat().toPattern();
        }
        return org.apache.commons.lang.time.FastDateFormat.cDefaultPattern;
    }

    protected FastDateFormat(java.lang.String pattern, java.util.TimeZone timeZone, java.util.Locale locale) {
        super();
        if (pattern == null) {
            throw new java.lang.IllegalArgumentException("The pattern must not be null");
        }
        mPattern = pattern;
        mTimeZoneForced = timeZone != null;
        if (timeZone == null) {
            timeZone = java.util.TimeZone.getDefault();
        }
        mTimeZone = timeZone;
        mLocaleForced = locale != null;
        if (locale == null) {
            locale = java.util.Locale.getDefault();
        }
        mLocale = locale;
    }

    protected void init() {
        java.util.List rulesList = parsePattern();
        mRules = ((org.apache.commons.lang.time.FastDateFormat.Rule[]) (rulesList.toArray(new org.apache.commons.lang.time.FastDateFormat.Rule[rulesList.size()])));
        int len = 0;
        for (int i = mRules.length; (--i) >= 0;) {
            len += mRules[i].estimateLength();
        }
        mMaxLengthEstimate = len;
    }

    protected java.util.List parsePattern() {
        java.text.DateFormatSymbols symbols = new java.text.DateFormatSymbols(mLocale);
        java.util.List rules = new java.util.ArrayList();
        java.lang.String[] ERAs = symbols.getEras();
        java.lang.String[] months = symbols.getMonths();
        java.lang.String[] shortMonths = symbols.getShortMonths();
        java.lang.String[] weekdays = symbols.getWeekdays();
        java.lang.String[] shortWeekdays = symbols.getShortWeekdays();
        java.lang.String[] AmPmStrings = symbols.getAmPmStrings();
        int length = mPattern.length();
        int[] indexRef = new int[1];
        for (int i = 0; i < length; i++) {
            indexRef[0] = i;
            java.lang.String token = parseToken(mPattern, indexRef);
            i = indexRef[0];
            int tokenLen = token.length();
            if (tokenLen == 0) {
                break;
            }
            org.apache.commons.lang.time.FastDateFormat.Rule rule;
            char c = token.charAt(0);
            switch (c) {
                case 'G' :
                    rule = new org.apache.commons.lang.time.FastDateFormat.TextField(java.util.Calendar.ERA, ERAs);
                    break;
                case 'y' :
                    if (tokenLen >= 4) {
                        rule = selectNumberRule(java.util.Calendar.YEAR, tokenLen);
                    }else {
                        rule = org.apache.commons.lang.time.FastDateFormat.TwoDigitYearField.INSTANCE;
                    }
                    break;
                case 'M' :
                    if (tokenLen >= 4) {
                        rule = new org.apache.commons.lang.time.FastDateFormat.TextField(java.util.Calendar.MONTH, months);
                    }else
                        if (tokenLen == 3) {
                            rule = new org.apache.commons.lang.time.FastDateFormat.TextField(java.util.Calendar.MONTH, shortMonths);
                        }else
                            if (tokenLen == 2) {
                                rule = org.apache.commons.lang.time.FastDateFormat.TwoDigitMonthField.INSTANCE;
                            }else {
                                rule = org.apache.commons.lang.time.FastDateFormat.UnpaddedMonthField.INSTANCE;
                            }


                    break;
                case 'd' :
                    rule = selectNumberRule(java.util.Calendar.DAY_OF_MONTH, tokenLen);
                    break;
                case 'h' :
                    rule = new org.apache.commons.lang.time.FastDateFormat.TwelveHourField(selectNumberRule(java.util.Calendar.HOUR, tokenLen));
                    break;
                case 'H' :
                    rule = selectNumberRule(java.util.Calendar.HOUR_OF_DAY, tokenLen);
                    break;
                case 'm' :
                    rule = selectNumberRule(java.util.Calendar.MINUTE, tokenLen);
                    break;
                case 's' :
                    rule = selectNumberRule(java.util.Calendar.SECOND, tokenLen);
                    break;
                case 'S' :
                    rule = selectNumberRule(java.util.Calendar.MILLISECOND, tokenLen);
                    break;
                case 'E' :
                    rule = new org.apache.commons.lang.time.FastDateFormat.TextField(java.util.Calendar.DAY_OF_WEEK, (tokenLen < 4 ? shortWeekdays : weekdays));
                    break;
                case 'D' :
                    rule = selectNumberRule(java.util.Calendar.DAY_OF_YEAR, tokenLen);
                    break;
                case 'F' :
                    rule = selectNumberRule(java.util.Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);
                    break;
                case 'w' :
                    rule = selectNumberRule(java.util.Calendar.WEEK_OF_YEAR, tokenLen);
                    break;
                case 'W' :
                    rule = selectNumberRule(java.util.Calendar.WEEK_OF_MONTH, tokenLen);
                    break;
                case 'a' :
                    rule = new org.apache.commons.lang.time.FastDateFormat.TextField(java.util.Calendar.AM_PM, AmPmStrings);
                    break;
                case 'k' :
                    rule = new org.apache.commons.lang.time.FastDateFormat.TwentyFourHourField(selectNumberRule(java.util.Calendar.HOUR_OF_DAY, tokenLen));
                    break;
                case 'K' :
                    rule = selectNumberRule(java.util.Calendar.HOUR, tokenLen);
                    break;
                case 'z' :
                    if (tokenLen >= 4) {
                        rule = new org.apache.commons.lang.time.FastDateFormat.TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, java.util.TimeZone.LONG);
                    }else {
                        rule = new org.apache.commons.lang.time.FastDateFormat.TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, java.util.TimeZone.SHORT);
                    }
                    break;
                case 'Z' :
                    if (tokenLen == 1) {
                        rule = org.apache.commons.lang.time.FastDateFormat.TimeZoneNumberRule.INSTANCE_NO_COLON;
                    }else {
                        rule = org.apache.commons.lang.time.FastDateFormat.TimeZoneNumberRule.INSTANCE_COLON;
                    }
                    break;
                case '\'' :
                    java.lang.String sub = token.substring(1);
                    if ((sub.length()) == 1) {
                        boolean spoonDefaultValue = false;
                        try {
                            spoonDefaultValue = true;
                        } catch (java.lang.Exception __NopolProcessorException) {
                        }
                        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                        if (fr.inria.lille.commons.trace.RuntimeValues.instance(66).isEnabled()) {
                            fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectionStarts();
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("shortMonths",shortMonths);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("org.apache.commons.lang.time.FastDateFormat.this.mMaxLengthEstimate",org.apache.commons.lang.time.FastDateFormat.this.mMaxLengthEstimate);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("org.apache.commons.lang.time.FastDateFormat.this.mTimeZoneForced",org.apache.commons.lang.time.FastDateFormat.this.mTimeZoneForced);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("shortWeekdays",shortWeekdays);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("rules",rules);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("org.apache.commons.lang.time.FastDateFormat.MEDIUM",org.apache.commons.lang.time.FastDateFormat.MEDIUM);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("symbols",symbols);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("indexRef",indexRef);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("org.apache.commons.lang.time.FastDateFormat.this.mRules",org.apache.commons.lang.time.FastDateFormat.this.mRules);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("org.apache.commons.lang.time.FastDateFormat.this.mTimeZone",org.apache.commons.lang.time.FastDateFormat.this.mTimeZone);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("org.apache.commons.lang.time.FastDateFormat.cTimeInstanceCache",org.apache.commons.lang.time.FastDateFormat.cTimeInstanceCache);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("org.apache.commons.lang.time.FastDateFormat.this.mLocaleForced",org.apache.commons.lang.time.FastDateFormat.this.mLocaleForced);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("ERAs",ERAs);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("org.apache.commons.lang.time.FastDateFormat.this.mPattern",org.apache.commons.lang.time.FastDateFormat.this.mPattern);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("org.apache.commons.lang.time.FastDateFormat.SHORT",org.apache.commons.lang.time.FastDateFormat.SHORT);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("c",c);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("months",months);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("weekdays",weekdays);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("org.apache.commons.lang.time.FastDateFormat.cDateInstanceCache",org.apache.commons.lang.time.FastDateFormat.cDateInstanceCache);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("length",length);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("org.apache.commons.lang.time.FastDateFormat.LONG",org.apache.commons.lang.time.FastDateFormat.LONG);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("tokenLen",tokenLen);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("org.apache.commons.lang.time.FastDateFormat.cInstanceCache",org.apache.commons.lang.time.FastDateFormat.cInstanceCache);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("org.apache.commons.lang.time.FastDateFormat.this.mLocale",org.apache.commons.lang.time.FastDateFormat.this.mLocale);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("token",token);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("org.apache.commons.lang.time.FastDateFormat.cTimeZoneDisplayCache",org.apache.commons.lang.time.FastDateFormat.cTimeZoneDisplayCache);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("AmPmStrings",AmPmStrings);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("org.apache.commons.lang.time.FastDateFormat.cDateTimeInstanceCache",org.apache.commons.lang.time.FastDateFormat.cDateTimeInstanceCache);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("org.apache.commons.lang.time.FastDateFormat.cDefaultPattern",org.apache.commons.lang.time.FastDateFormat.cDefaultPattern);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("org.apache.commons.lang.time.FastDateFormat.FULL",org.apache.commons.lang.time.FastDateFormat.FULL);} catch (Exception ex1) {ex1.printStackTrace();};
                            fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectOutput(runtimeAngelicValue);
                            fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectionEnds();
                        }
                        if (runtimeAngelicValue)
                            rule = new org.apache.commons.lang.time.FastDateFormat.CharacterLiteral(sub.charAt(0));

                    }else {
                        rule = new org.apache.commons.lang.time.FastDateFormat.StringLiteral(sub);
                    }
                    break;
                default :
                    throw new java.lang.IllegalArgumentException(("Illegal pattern component: " + token));
            }
            rules.add(rule);
        }
        return rules;
    }

    protected java.lang.String parseToken(java.lang.String pattern, int[] indexRef) {
        java.lang.StringBuffer buf = new java.lang.StringBuffer();
        int i = indexRef[0];
        int length = pattern.length();
        char c = pattern.charAt(i);
        if (((c >= 'A') && (c <= 'Z')) || ((c >= 'a') && (c <= 'z'))) {
            buf.append(c);
            while ((i + 1) < length) {
                char peek = pattern.charAt((i + 1));
                if (peek == c) {
                    buf.append(c);
                    i++;
                }else {
                    break;
                }
            } 
        }else {
            buf.append('\'');
            boolean inLiteral = false;
            for (; i < length; i++) {
                c = pattern.charAt(i);
                if (c == '\'') {
                    if (((i + 1) < length) && ((pattern.charAt((i + 1))) == '\'')) {
                        i++;
                        buf.append(c);
                    }else {
                        inLiteral = !inLiteral;
                    }
                }else
                    if ((!inLiteral) && (((c >= 'A') && (c <= 'Z')) || ((c >= 'a') && (c <= 'z')))) {
                        i--;
                        break;
                    }else {
                        buf.append(c);
                    }

            }
        }
        indexRef[0] = i;
        return buf.toString();
    }

    protected org.apache.commons.lang.time.FastDateFormat.NumberRule selectNumberRule(int field, int padding) {
        switch (padding) {
            case 1 :
                return new org.apache.commons.lang.time.FastDateFormat.UnpaddedNumberField(field);
            case 2 :
                return new org.apache.commons.lang.time.FastDateFormat.TwoDigitNumberField(field);
            default :
                return new org.apache.commons.lang.time.FastDateFormat.PaddedNumberField(field, padding);
        }
    }

    public java.lang.StringBuffer format(java.lang.Object obj, java.lang.StringBuffer toAppendTo, java.text.FieldPosition pos) {
        if (obj instanceof java.util.Date) {
            return format(((java.util.Date) (obj)), toAppendTo);
        }else
            if (obj instanceof java.util.Calendar) {
                return format(((java.util.Calendar) (obj)), toAppendTo);
            }else
                if (obj instanceof java.lang.Long) {
                    return format(((java.lang.Long) (obj)).longValue(), toAppendTo);
                }else {
                    throw new java.lang.IllegalArgumentException(("Unknown class: " + (obj == null ? "<null>" : obj.getClass().getName())));
                }


    }

    public java.lang.String format(long millis) {
        return format(new java.util.Date(millis));
    }

    public java.lang.String format(java.util.Date date) {
        java.util.Calendar c = new java.util.GregorianCalendar(mTimeZone);
        c.setTime(date);
        return applyRules(c, new java.lang.StringBuffer(mMaxLengthEstimate)).toString();
    }

    public java.lang.String format(java.util.Calendar calendar) {
        return format(calendar, new java.lang.StringBuffer(mMaxLengthEstimate)).toString();
    }

    public java.lang.StringBuffer format(long millis, java.lang.StringBuffer buf) {
        return format(new java.util.Date(millis), buf);
    }

    public java.lang.StringBuffer format(java.util.Date date, java.lang.StringBuffer buf) {
        java.util.Calendar c = new java.util.GregorianCalendar(mTimeZone);
        c.setTime(date);
        return applyRules(c, buf);
    }

    public java.lang.StringBuffer format(java.util.Calendar calendar, java.lang.StringBuffer buf) {
        if (mTimeZoneForced) {
            calendar = ((java.util.Calendar) (calendar.clone()));
            calendar.setTimeZone(mTimeZone);
        }
        return applyRules(calendar, buf);
    }

    protected java.lang.StringBuffer applyRules(java.util.Calendar calendar, java.lang.StringBuffer buf) {
        org.apache.commons.lang.time.FastDateFormat.Rule[] rules = mRules;
        int len = mRules.length;
        for (int i = 0; i < len; i++) {
            rules[i].appendTo(buf, calendar);
        }
        return buf;
    }

    public java.lang.Object parseObject(java.lang.String source, java.text.ParsePosition pos) {
        pos.setIndex(0);
        pos.setErrorIndex(0);
        return null;
    }

    public java.lang.String getPattern() {
        return mPattern;
    }

    public java.util.TimeZone getTimeZone() {
        return mTimeZone;
    }

    public boolean getTimeZoneOverridesCalendar() {
        return mTimeZoneForced;
    }

    public java.util.Locale getLocale() {
        return mLocale;
    }

    public int getMaxLengthEstimate() {
        return mMaxLengthEstimate;
    }

    public boolean equals(java.lang.Object obj) {
        if ((obj instanceof org.apache.commons.lang.time.FastDateFormat) == false) {
            return false;
        }
        org.apache.commons.lang.time.FastDateFormat other = ((org.apache.commons.lang.time.FastDateFormat) (obj));
        if (((((((mPattern) == (other.mPattern)) || (mPattern.equals(other.mPattern))) && (((mTimeZone) == (other.mTimeZone)) || (mTimeZone.equals(other.mTimeZone)))) && (((mLocale) == (other.mLocale)) || (mLocale.equals(other.mLocale)))) && ((mTimeZoneForced) == (other.mTimeZoneForced))) && ((mLocaleForced) == (other.mLocaleForced))) {
            return true;
        }
        return false;
    }

    public int hashCode() {
        int total = 0;
        total += mPattern.hashCode();
        total += mTimeZone.hashCode();
        total += (mTimeZoneForced) ? 1 : 0;
        total += mLocale.hashCode();
        total += (mLocaleForced) ? 1 : 0;
        return total;
    }

    public java.lang.String toString() {
        return ("FastDateFormat[" + (mPattern)) + "]";
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
        in.defaultReadObject();
        init();
    }

    private interface Rule {
        int estimateLength();

        void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar);
    }

    private interface NumberRule extends org.apache.commons.lang.time.FastDateFormat.Rule {
        void appendTo(java.lang.StringBuffer buffer, int value);
    }

    private static class CharacterLiteral implements org.apache.commons.lang.time.FastDateFormat.Rule {
        private final char mValue;

        CharacterLiteral(char value) {
            mValue = value;
        }

        public int estimateLength() {
            return 1;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            buffer.append(mValue);
        }
    }

    private static class StringLiteral implements org.apache.commons.lang.time.FastDateFormat.Rule {
        private final java.lang.String mValue;

        StringLiteral(java.lang.String value) {
            mValue = value;
        }

        public int estimateLength() {
            return mValue.length();
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            buffer.append(mValue);
        }
    }

    private static class TextField implements org.apache.commons.lang.time.FastDateFormat.Rule {
        private final int mField;

        private final java.lang.String[] mValues;

        TextField(int field, java.lang.String[] values) {
            mField = field;
            mValues = values;
        }

        public int estimateLength() {
            int max = 0;
            for (int i = mValues.length; (--i) >= 0;) {
                int len = mValues[i].length();
                if (len > max) {
                    max = len;
                }
            }
            return max;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            buffer.append(mValues[calendar.get(mField)]);
        }
    }

    private static class UnpaddedNumberField implements org.apache.commons.lang.time.FastDateFormat.NumberRule {
        static final org.apache.commons.lang.time.FastDateFormat.UnpaddedNumberField INSTANCE_YEAR = new org.apache.commons.lang.time.FastDateFormat.UnpaddedNumberField(java.util.Calendar.YEAR);

        private final int mField;

        UnpaddedNumberField(int field) {
            mField = field;
        }

        public int estimateLength() {
            return 4;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            appendTo(buffer, calendar.get(mField));
        }

        public final void appendTo(java.lang.StringBuffer buffer, int value) {
            if (value < 10) {
                buffer.append(((char) (value + '0')));
            }else
                if (value < 100) {
                    buffer.append(((char) ((value / 10) + '0')));
                    buffer.append(((char) ((value % 10) + '0')));
                }else {
                    buffer.append(java.lang.Integer.toString(value));
                }

        }
    }

    private static class UnpaddedMonthField implements org.apache.commons.lang.time.FastDateFormat.NumberRule {
        static final org.apache.commons.lang.time.FastDateFormat.UnpaddedMonthField INSTANCE = new org.apache.commons.lang.time.FastDateFormat.UnpaddedMonthField();

        UnpaddedMonthField() {
            super();
        }

        public int estimateLength() {
            return 2;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            appendTo(buffer, ((calendar.get(java.util.Calendar.MONTH)) + 1));
        }

        public final void appendTo(java.lang.StringBuffer buffer, int value) {
            if (value < 10) {
                buffer.append(((char) (value + '0')));
            }else {
                buffer.append(((char) ((value / 10) + '0')));
                buffer.append(((char) ((value % 10) + '0')));
            }
        }
    }

    private static class PaddedNumberField implements org.apache.commons.lang.time.FastDateFormat.NumberRule {
        private final int mField;

        private final int mSize;

        PaddedNumberField(int field, int size) {
            if (size < 3) {
                throw new java.lang.IllegalArgumentException();
            }
            mField = field;
            mSize = size;
        }

        public int estimateLength() {
            return 4;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            appendTo(buffer, calendar.get(mField));
        }

        public final void appendTo(java.lang.StringBuffer buffer, int value) {
            if (value < 100) {
                for (int i = mSize; (--i) >= 2;) {
                    buffer.append('0');
                }
                buffer.append(((char) ((value / 10) + '0')));
                buffer.append(((char) ((value % 10) + '0')));
            }else {
                int digits;
                if (value < 1000) {
                    digits = 3;
                }else {
                    org.apache.commons.lang.Validate.isTrue((value > (-1)), "Negative values should not be possible", value);
                    digits = java.lang.Integer.toString(value).length();
                }
                for (int i = mSize; (--i) >= digits;) {
                    buffer.append('0');
                }
                buffer.append(java.lang.Integer.toString(value));
            }
        }
    }

    private static class TwoDigitNumberField implements org.apache.commons.lang.time.FastDateFormat.NumberRule {
        private final int mField;

        TwoDigitNumberField(int field) {
            mField = field;
        }

        public int estimateLength() {
            return 2;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            appendTo(buffer, calendar.get(mField));
        }

        public final void appendTo(java.lang.StringBuffer buffer, int value) {
            if (value < 100) {
                buffer.append(((char) ((value / 10) + '0')));
                buffer.append(((char) ((value % 10) + '0')));
            }else {
                buffer.append(java.lang.Integer.toString(value));
            }
        }
    }

    private static class TwoDigitYearField implements org.apache.commons.lang.time.FastDateFormat.NumberRule {
        static final org.apache.commons.lang.time.FastDateFormat.TwoDigitYearField INSTANCE = new org.apache.commons.lang.time.FastDateFormat.TwoDigitYearField();

        TwoDigitYearField() {
            super();
        }

        public int estimateLength() {
            return 2;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            appendTo(buffer, ((calendar.get(java.util.Calendar.YEAR)) % 100));
        }

        public final void appendTo(java.lang.StringBuffer buffer, int value) {
            buffer.append(((char) ((value / 10) + '0')));
            buffer.append(((char) ((value % 10) + '0')));
        }
    }

    private static class TwoDigitMonthField implements org.apache.commons.lang.time.FastDateFormat.NumberRule {
        static final org.apache.commons.lang.time.FastDateFormat.TwoDigitMonthField INSTANCE = new org.apache.commons.lang.time.FastDateFormat.TwoDigitMonthField();

        TwoDigitMonthField() {
            super();
        }

        public int estimateLength() {
            return 2;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            appendTo(buffer, ((calendar.get(java.util.Calendar.MONTH)) + 1));
        }

        public final void appendTo(java.lang.StringBuffer buffer, int value) {
            buffer.append(((char) ((value / 10) + '0')));
            buffer.append(((char) ((value % 10) + '0')));
        }
    }

    private static class TwelveHourField implements org.apache.commons.lang.time.FastDateFormat.NumberRule {
        private final org.apache.commons.lang.time.FastDateFormat.NumberRule mRule;

        TwelveHourField(org.apache.commons.lang.time.FastDateFormat.NumberRule rule) {
            mRule = rule;
        }

        public int estimateLength() {
            return mRule.estimateLength();
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            int value = calendar.get(java.util.Calendar.HOUR);
            if (value == 0) {
                value = (calendar.getLeastMaximum(java.util.Calendar.HOUR)) + 1;
            }
            mRule.appendTo(buffer, value);
        }

        public void appendTo(java.lang.StringBuffer buffer, int value) {
            mRule.appendTo(buffer, value);
        }
    }

    private static class TwentyFourHourField implements org.apache.commons.lang.time.FastDateFormat.NumberRule {
        private final org.apache.commons.lang.time.FastDateFormat.NumberRule mRule;

        TwentyFourHourField(org.apache.commons.lang.time.FastDateFormat.NumberRule rule) {
            mRule = rule;
        }

        public int estimateLength() {
            return mRule.estimateLength();
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            int value = calendar.get(java.util.Calendar.HOUR_OF_DAY);
            if (value == 0) {
                value = (calendar.getMaximum(java.util.Calendar.HOUR_OF_DAY)) + 1;
            }
            mRule.appendTo(buffer, value);
        }

        public void appendTo(java.lang.StringBuffer buffer, int value) {
            mRule.appendTo(buffer, value);
        }
    }

    private static class TimeZoneNameRule implements org.apache.commons.lang.time.FastDateFormat.Rule {
        private final java.util.TimeZone mTimeZone;

        private final boolean mTimeZoneForced;

        private final java.util.Locale mLocale;

        private final int mStyle;

        private final java.lang.String mStandard;

        private final java.lang.String mDaylight;

        TimeZoneNameRule(java.util.TimeZone timeZone, boolean timeZoneForced, java.util.Locale locale, int style) {
            mTimeZone = timeZone;
            mTimeZoneForced = timeZoneForced;
            mLocale = locale;
            mStyle = style;
            if (timeZoneForced) {
                mStandard = org.apache.commons.lang.time.FastDateFormat.getTimeZoneDisplay(timeZone, false, style, locale);
                mDaylight = org.apache.commons.lang.time.FastDateFormat.getTimeZoneDisplay(timeZone, true, style, locale);
            }else {
                mStandard = null;
                mDaylight = null;
            }
        }

        public int estimateLength() {
            if (mTimeZoneForced) {
                return java.lang.Math.max(mStandard.length(), mDaylight.length());
            }else
                if ((mStyle) == (java.util.TimeZone.SHORT)) {
                    return 4;
                }else {
                    return 40;
                }

        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            if (mTimeZoneForced) {
                if ((mTimeZone.useDaylightTime()) && ((calendar.get(java.util.Calendar.DST_OFFSET)) != 0)) {
                    buffer.append(mDaylight);
                }else {
                    buffer.append(mStandard);
                }
            }else {
                java.util.TimeZone timeZone = calendar.getTimeZone();
                if ((timeZone.useDaylightTime()) && ((calendar.get(java.util.Calendar.DST_OFFSET)) != 0)) {
                    buffer.append(org.apache.commons.lang.time.FastDateFormat.getTimeZoneDisplay(timeZone, true, mStyle, mLocale));
                }else {
                    buffer.append(org.apache.commons.lang.time.FastDateFormat.getTimeZoneDisplay(timeZone, false, mStyle, mLocale));
                }
            }
        }
    }

    private static class TimeZoneNumberRule implements org.apache.commons.lang.time.FastDateFormat.Rule {
        static final org.apache.commons.lang.time.FastDateFormat.TimeZoneNumberRule INSTANCE_COLON = new org.apache.commons.lang.time.FastDateFormat.TimeZoneNumberRule(true);

        static final org.apache.commons.lang.time.FastDateFormat.TimeZoneNumberRule INSTANCE_NO_COLON = new org.apache.commons.lang.time.FastDateFormat.TimeZoneNumberRule(false);

        final boolean mColon;

        TimeZoneNumberRule(boolean colon) {
            mColon = colon;
        }

        public int estimateLength() {
            return 5;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            int offset = (calendar.get(java.util.Calendar.ZONE_OFFSET)) + (calendar.get(java.util.Calendar.DST_OFFSET));
            if (offset < 0) {
                buffer.append('-');
                offset = -offset;
            }else {
                buffer.append('+');
            }
            int hours = offset / ((60 * 60) * 1000);
            buffer.append(((char) ((hours / 10) + '0')));
            buffer.append(((char) ((hours % 10) + '0')));
            if (mColon) {
                buffer.append(':');
            }
            int minutes = (offset / (60 * 1000)) - (60 * hours);
            buffer.append(((char) ((minutes / 10) + '0')));
            buffer.append(((char) ((minutes % 10) + '0')));
        }
    }

    private static class TimeZoneDisplayKey {
        private final java.util.TimeZone mTimeZone;

        private final int mStyle;

        private final java.util.Locale mLocale;

        TimeZoneDisplayKey(java.util.TimeZone timeZone, boolean daylight, int style, java.util.Locale locale) {
            mTimeZone = timeZone;
            if (daylight) {
                style |= -2147483648;
            }
            mStyle = style;
            mLocale = locale;
        }

        public int hashCode() {
            return ((mStyle) * 31) + (mLocale.hashCode());
        }

        public boolean equals(java.lang.Object obj) {
            if ((this) == obj) {
                return true;
            }
            if (obj instanceof org.apache.commons.lang.time.FastDateFormat.TimeZoneDisplayKey) {
                org.apache.commons.lang.time.FastDateFormat.TimeZoneDisplayKey other = ((org.apache.commons.lang.time.FastDateFormat.TimeZoneDisplayKey) (obj));
                return ((mTimeZone.equals(other.mTimeZone)) && ((mStyle) == (other.mStyle))) && (mLocale.equals(other.mLocale));
            }
            return false;
        }
    }

    private static class Pair {
        private final java.lang.Object mObj1;

        private final java.lang.Object mObj2;

        public Pair(java.lang.Object obj1, java.lang.Object obj2) {
            mObj1 = obj1;
            mObj2 = obj2;
        }

        public boolean equals(java.lang.Object obj) {
            if ((this) == obj) {
                return true;
            }
            if (!(obj instanceof org.apache.commons.lang.time.FastDateFormat.Pair)) {
                return false;
            }
            org.apache.commons.lang.time.FastDateFormat.Pair key = ((org.apache.commons.lang.time.FastDateFormat.Pair) (obj));
            return ((mObj1) == null ? (key.mObj1) == null : mObj1.equals(key.mObj1)) && ((mObj2) == null ? (key.mObj2) == null : mObj2.equals(key.mObj2));
        }

        public int hashCode() {
            return ((mObj1) == null ? 0 : mObj1.hashCode()) + ((mObj2) == null ? 0 : mObj2.hashCode());
        }

        public java.lang.String toString() {
            return ((("[" + (mObj1)) + ':') + (mObj2)) + ']';
        }
    }
}
18:46:20.709 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
18:46:20.709 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #82
18:46:20.709 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang.time.FastDateFormat:687 which is executed by 18 tests
-1899260190
18:46:20.806 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:46:20.820 [pool-348-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (11 ms)
<> Total tests run: 26
<> Ignored tests: 0
<> Failed tests: 4
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

18:46:21.526 [pool-347-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
FastDateFormat.java:378: error: variable rule might not have been initialized
            rules.add(rule);
                      ^
Note: FastDateFormat.java uses unchecked or unsafe operations.
Note: Recompile with -Xlint:unchecked for details.
18:46:22.098 [pool-347-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public class FastDateFormat extends java.text.Format {
    private static final long serialVersionUID = 1L;

    public static final int FULL = java.text.DateFormat.FULL;

    public static final int LONG = java.text.DateFormat.LONG;

    public static final int MEDIUM = java.text.DateFormat.MEDIUM;

    public static final int SHORT = java.text.DateFormat.SHORT;

    private static java.lang.String cDefaultPattern;

    private static java.util.Map cInstanceCache = new java.util.HashMap(7);

    private static java.util.Map cDateInstanceCache = new java.util.HashMap(7);

    private static java.util.Map cTimeInstanceCache = new java.util.HashMap(7);

    private static java.util.Map cDateTimeInstanceCache = new java.util.HashMap(7);

    private static java.util.Map cTimeZoneDisplayCache = new java.util.HashMap(7);

    private final java.lang.String mPattern;

    private final java.util.TimeZone mTimeZone;

    private final boolean mTimeZoneForced;

    private final java.util.Locale mLocale;

    private final boolean mLocaleForced;

    private transient org.apache.commons.lang.time.FastDateFormat.Rule[] mRules;

    private transient int mMaxLengthEstimate;

    public static org.apache.commons.lang.time.FastDateFormat getInstance() {
        return org.apache.commons.lang.time.FastDateFormat.getInstance(org.apache.commons.lang.time.FastDateFormat.getDefaultPattern(), null, null);
    }

    public static org.apache.commons.lang.time.FastDateFormat getInstance(java.lang.String pattern) {
        return org.apache.commons.lang.time.FastDateFormat.getInstance(pattern, null, null);
    }

    public static org.apache.commons.lang.time.FastDateFormat getInstance(java.lang.String pattern, java.util.TimeZone timeZone) {
        return org.apache.commons.lang.time.FastDateFormat.getInstance(pattern, timeZone, null);
    }

    public static org.apache.commons.lang.time.FastDateFormat getInstance(java.lang.String pattern, java.util.Locale locale) {
        return org.apache.commons.lang.time.FastDateFormat.getInstance(pattern, null, locale);
    }

    public static synchronized org.apache.commons.lang.time.FastDateFormat getInstance(java.lang.String pattern, java.util.TimeZone timeZone, java.util.Locale locale) {
        org.apache.commons.lang.time.FastDateFormat emptyFormat = new org.apache.commons.lang.time.FastDateFormat(pattern, timeZone, locale);
        org.apache.commons.lang.time.FastDateFormat format = ((org.apache.commons.lang.time.FastDateFormat) (org.apache.commons.lang.time.FastDateFormat.cInstanceCache.get(emptyFormat)));
        if (format == null) {
            format = emptyFormat;
            format.init();
            org.apache.commons.lang.time.FastDateFormat.cInstanceCache.put(format, format);
        }
        return format;
    }

    public static org.apache.commons.lang.time.FastDateFormat getDateInstance(int style) {
        return org.apache.commons.lang.time.FastDateFormat.getDateInstance(style, null, null);
    }

    public static org.apache.commons.lang.time.FastDateFormat getDateInstance(int style, java.util.Locale locale) {
        return org.apache.commons.lang.time.FastDateFormat.getDateInstance(style, null, locale);
    }

    public static org.apache.commons.lang.time.FastDateFormat getDateInstance(int style, java.util.TimeZone timeZone) {
        return org.apache.commons.lang.time.FastDateFormat.getDateInstance(style, timeZone, null);
    }

    public static synchronized org.apache.commons.lang.time.FastDateFormat getDateInstance(int style, java.util.TimeZone timeZone, java.util.Locale locale) {
        java.lang.Object key = new java.lang.Integer(style);
        if (timeZone != null) {
            key = new org.apache.commons.lang.time.FastDateFormat.Pair(key, timeZone);
        }
        if (locale != null) {
            key = new org.apache.commons.lang.time.FastDateFormat.Pair(key, locale);
        }
        org.apache.commons.lang.time.FastDateFormat format = ((org.apache.commons.lang.time.FastDateFormat) (org.apache.commons.lang.time.FastDateFormat.cDateInstanceCache.get(key)));
        if (format == null) {
            if (locale == null) {
                locale = java.util.Locale.getDefault();
            }
            try {
                java.text.SimpleDateFormat formatter = ((java.text.SimpleDateFormat) (java.text.DateFormat.getDateInstance(style, locale)));
                java.lang.String pattern = formatter.toPattern();
                format = org.apache.commons.lang.time.FastDateFormat.getInstance(pattern, timeZone, locale);
                org.apache.commons.lang.time.FastDateFormat.cDateInstanceCache.put(key, format);
            } catch (java.lang.ClassCastException ex) {
                throw new java.lang.IllegalArgumentException(("No date pattern for locale: " + locale));
            }
        }
        return format;
    }

    public static org.apache.commons.lang.time.FastDateFormat getTimeInstance(int style) {
        return org.apache.commons.lang.time.FastDateFormat.getTimeInstance(style, null, null);
    }

    public static org.apache.commons.lang.time.FastDateFormat getTimeInstance(int style, java.util.Locale locale) {
        return org.apache.commons.lang.time.FastDateFormat.getTimeInstance(style, null, locale);
    }

    public static org.apache.commons.lang.time.FastDateFormat getTimeInstance(int style, java.util.TimeZone timeZone) {
        return org.apache.commons.lang.time.FastDateFormat.getTimeInstance(style, timeZone, null);
    }

    public static synchronized org.apache.commons.lang.time.FastDateFormat getTimeInstance(int style, java.util.TimeZone timeZone, java.util.Locale locale) {
        java.lang.Object key = new java.lang.Integer(style);
        if (timeZone != null) {
            key = new org.apache.commons.lang.time.FastDateFormat.Pair(key, timeZone);
        }
        if (locale != null) {
            key = new org.apache.commons.lang.time.FastDateFormat.Pair(key, locale);
        }
        org.apache.commons.lang.time.FastDateFormat format = ((org.apache.commons.lang.time.FastDateFormat) (org.apache.commons.lang.time.FastDateFormat.cTimeInstanceCache.get(key)));
        if (format == null) {
            if (locale == null) {
                locale = java.util.Locale.getDefault();
            }
            try {
                java.text.SimpleDateFormat formatter = ((java.text.SimpleDateFormat) (java.text.DateFormat.getTimeInstance(style, locale)));
                java.lang.String pattern = formatter.toPattern();
                format = org.apache.commons.lang.time.FastDateFormat.getInstance(pattern, timeZone, locale);
                org.apache.commons.lang.time.FastDateFormat.cTimeInstanceCache.put(key, format);
            } catch (java.lang.ClassCastException ex) {
                throw new java.lang.IllegalArgumentException(("No date pattern for locale: " + locale));
            }
        }
        return format;
    }

    public static org.apache.commons.lang.time.FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle) {
        return org.apache.commons.lang.time.FastDateFormat.getDateTimeInstance(dateStyle, timeStyle, null, null);
    }

    public static org.apache.commons.lang.time.FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, java.util.Locale locale) {
        return org.apache.commons.lang.time.FastDateFormat.getDateTimeInstance(dateStyle, timeStyle, null, locale);
    }

    public static org.apache.commons.lang.time.FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, java.util.TimeZone timeZone) {
        return org.apache.commons.lang.time.FastDateFormat.getDateTimeInstance(dateStyle, timeStyle, timeZone, null);
    }

    public static synchronized org.apache.commons.lang.time.FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, java.util.TimeZone timeZone, java.util.Locale locale) {
        java.lang.Object key = new org.apache.commons.lang.time.FastDateFormat.Pair(new java.lang.Integer(dateStyle), new java.lang.Integer(timeStyle));
        if (timeZone != null) {
            key = new org.apache.commons.lang.time.FastDateFormat.Pair(key, timeZone);
        }
        if (locale != null) {
            key = new org.apache.commons.lang.time.FastDateFormat.Pair(key, locale);
        }
        org.apache.commons.lang.time.FastDateFormat format = ((org.apache.commons.lang.time.FastDateFormat) (org.apache.commons.lang.time.FastDateFormat.cDateTimeInstanceCache.get(key)));
        if (format == null) {
            if (locale == null) {
                locale = java.util.Locale.getDefault();
            }
            try {
                java.text.SimpleDateFormat formatter = ((java.text.SimpleDateFormat) (java.text.DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale)));
                java.lang.String pattern = formatter.toPattern();
                format = org.apache.commons.lang.time.FastDateFormat.getInstance(pattern, timeZone, locale);
                org.apache.commons.lang.time.FastDateFormat.cDateTimeInstanceCache.put(key, format);
            } catch (java.lang.ClassCastException ex) {
                throw new java.lang.IllegalArgumentException(("No date time pattern for locale: " + locale));
            }
        }
        return format;
    }

    static synchronized java.lang.String getTimeZoneDisplay(java.util.TimeZone tz, boolean daylight, int style, java.util.Locale locale) {
        java.lang.Object key = new org.apache.commons.lang.time.FastDateFormat.TimeZoneDisplayKey(tz, daylight, style, locale);
        java.lang.String value = ((java.lang.String) (org.apache.commons.lang.time.FastDateFormat.cTimeZoneDisplayCache.get(key)));
        if (value == null) {
            value = tz.getDisplayName(daylight, style, locale);
            org.apache.commons.lang.time.FastDateFormat.cTimeZoneDisplayCache.put(key, value);
        }
        return value;
    }

    private static synchronized java.lang.String getDefaultPattern() {
        if ((org.apache.commons.lang.time.FastDateFormat.cDefaultPattern) == null) {
            org.apache.commons.lang.time.FastDateFormat.cDefaultPattern = new java.text.SimpleDateFormat().toPattern();
        }
        return org.apache.commons.lang.time.FastDateFormat.cDefaultPattern;
    }

    protected FastDateFormat(java.lang.String pattern, java.util.TimeZone timeZone, java.util.Locale locale) {
        super();
        if (pattern == null) {
            throw new java.lang.IllegalArgumentException("The pattern must not be null");
        }
        mPattern = pattern;
        mTimeZoneForced = timeZone != null;
        if (timeZone == null) {
            timeZone = java.util.TimeZone.getDefault();
        }
        mTimeZone = timeZone;
        mLocaleForced = locale != null;
        if (locale == null) {
            locale = java.util.Locale.getDefault();
        }
        mLocale = locale;
    }

    protected void init() {
        java.util.List rulesList = parsePattern();
        mRules = ((org.apache.commons.lang.time.FastDateFormat.Rule[]) (rulesList.toArray(new org.apache.commons.lang.time.FastDateFormat.Rule[rulesList.size()])));
        int len = 0;
        for (int i = mRules.length; (--i) >= 0;) {
            len += mRules[i].estimateLength();
        }
        mMaxLengthEstimate = len;
    }

    protected java.util.List parsePattern() {
        java.text.DateFormatSymbols symbols = new java.text.DateFormatSymbols(mLocale);
        java.util.List rules = new java.util.ArrayList();
        java.lang.String[] ERAs = symbols.getEras();
        java.lang.String[] months = symbols.getMonths();
        java.lang.String[] shortMonths = symbols.getShortMonths();
        java.lang.String[] weekdays = symbols.getWeekdays();
        java.lang.String[] shortWeekdays = symbols.getShortWeekdays();
        java.lang.String[] AmPmStrings = symbols.getAmPmStrings();
        int length = mPattern.length();
        int[] indexRef = new int[1];
        for (int i = 0; i < length; i++) {
            indexRef[0] = i;
            java.lang.String token = parseToken(mPattern, indexRef);
            i = indexRef[0];
            int tokenLen = token.length();
            if (tokenLen == 0) {
                break;
            }
            org.apache.commons.lang.time.FastDateFormat.Rule rule;
            char c = token.charAt(0);
            switch (c) {
                case 'G' :
                    rule = new org.apache.commons.lang.time.FastDateFormat.TextField(java.util.Calendar.ERA, ERAs);
                    break;
                case 'y' :
                    if (tokenLen >= 4) {
                        rule = selectNumberRule(java.util.Calendar.YEAR, tokenLen);
                    }else {
                        rule = org.apache.commons.lang.time.FastDateFormat.TwoDigitYearField.INSTANCE;
                    }
                    break;
                case 'M' :
                    if (tokenLen >= 4) {
                        rule = new org.apache.commons.lang.time.FastDateFormat.TextField(java.util.Calendar.MONTH, months);
                    }else
                        if (tokenLen == 3) {
                            rule = new org.apache.commons.lang.time.FastDateFormat.TextField(java.util.Calendar.MONTH, shortMonths);
                        }else
                            if (tokenLen == 2) {
                                rule = org.apache.commons.lang.time.FastDateFormat.TwoDigitMonthField.INSTANCE;
                            }else {
                                rule = org.apache.commons.lang.time.FastDateFormat.UnpaddedMonthField.INSTANCE;
                            }


                    break;
                case 'd' :
                    rule = selectNumberRule(java.util.Calendar.DAY_OF_MONTH, tokenLen);
                    break;
                case 'h' :
                    rule = new org.apache.commons.lang.time.FastDateFormat.TwelveHourField(selectNumberRule(java.util.Calendar.HOUR, tokenLen));
                    break;
                case 'H' :
                    rule = selectNumberRule(java.util.Calendar.HOUR_OF_DAY, tokenLen);
                    break;
                case 'm' :
                    rule = selectNumberRule(java.util.Calendar.MINUTE, tokenLen);
                    break;
                case 's' :
                    rule = selectNumberRule(java.util.Calendar.SECOND, tokenLen);
                    break;
                case 'S' :
                    rule = selectNumberRule(java.util.Calendar.MILLISECOND, tokenLen);
                    break;
                case 'E' :
                    rule = new org.apache.commons.lang.time.FastDateFormat.TextField(java.util.Calendar.DAY_OF_WEEK, (tokenLen < 4 ? shortWeekdays : weekdays));
                    break;
                case 'D' :
                    rule = selectNumberRule(java.util.Calendar.DAY_OF_YEAR, tokenLen);
                    break;
                case 'F' :
                    rule = selectNumberRule(java.util.Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);
                    break;
                case 'w' :
                    rule = selectNumberRule(java.util.Calendar.WEEK_OF_YEAR, tokenLen);
                    break;
                case 'W' :
                    rule = selectNumberRule(java.util.Calendar.WEEK_OF_MONTH, tokenLen);
                    break;
                case 'a' :
                    rule = new org.apache.commons.lang.time.FastDateFormat.TextField(java.util.Calendar.AM_PM, AmPmStrings);
                    break;
                case 'k' :
                    rule = new org.apache.commons.lang.time.FastDateFormat.TwentyFourHourField(selectNumberRule(java.util.Calendar.HOUR_OF_DAY, tokenLen));
                    break;
                case 'K' :
                    rule = selectNumberRule(java.util.Calendar.HOUR, tokenLen);
                    break;
                case 'z' :
                    if (tokenLen >= 4) {
                        rule = new org.apache.commons.lang.time.FastDateFormat.TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, java.util.TimeZone.LONG);
                    }else {
                        rule = new org.apache.commons.lang.time.FastDateFormat.TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, java.util.TimeZone.SHORT);
                    }
                    break;
                case 'Z' :
                    if (tokenLen == 1) {
                        rule = org.apache.commons.lang.time.FastDateFormat.TimeZoneNumberRule.INSTANCE_NO_COLON;
                    }else {
                        rule = org.apache.commons.lang.time.FastDateFormat.TimeZoneNumberRule.INSTANCE_COLON;
                    }
                    break;
                case '\'' :
                    java.lang.String sub = token.substring(1);
                    boolean spoonDefaultValue = false;
                    try {
                        spoonDefaultValue = true;
                    } catch (java.lang.Exception __NopolProcessorException) {
                    }
                    boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                    if (fr.inria.lille.commons.trace.RuntimeValues.instance(67).isEnabled()) {
                        fr.inria.lille.commons.trace.RuntimeValues.instance(67).collectionStarts();
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(67).collectInput("shortMonths",shortMonths);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(67).collectInput("org.apache.commons.lang.time.FastDateFormat.this.mMaxLengthEstimate",org.apache.commons.lang.time.FastDateFormat.this.mMaxLengthEstimate);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(67).collectInput("org.apache.commons.lang.time.FastDateFormat.this.mTimeZoneForced",org.apache.commons.lang.time.FastDateFormat.this.mTimeZoneForced);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(67).collectInput("shortWeekdays",shortWeekdays);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(67).collectInput("rules",rules);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(67).collectInput("org.apache.commons.lang.time.FastDateFormat.MEDIUM",org.apache.commons.lang.time.FastDateFormat.MEDIUM);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(67).collectInput("symbols",symbols);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(67).collectInput("indexRef",indexRef);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(67).collectInput("org.apache.commons.lang.time.FastDateFormat.this.mRules",org.apache.commons.lang.time.FastDateFormat.this.mRules);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(67).collectInput("org.apache.commons.lang.time.FastDateFormat.this.mTimeZone",org.apache.commons.lang.time.FastDateFormat.this.mTimeZone);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(67).collectInput("org.apache.commons.lang.time.FastDateFormat.cTimeInstanceCache",org.apache.commons.lang.time.FastDateFormat.cTimeInstanceCache);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(67).collectInput("org.apache.commons.lang.time.FastDateFormat.this.mLocaleForced",org.apache.commons.lang.time.FastDateFormat.this.mLocaleForced);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(67).collectInput("ERAs",ERAs);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(67).collectInput("org.apache.commons.lang.time.FastDateFormat.this.mPattern",org.apache.commons.lang.time.FastDateFormat.this.mPattern);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(67).collectInput("org.apache.commons.lang.time.FastDateFormat.SHORT",org.apache.commons.lang.time.FastDateFormat.SHORT);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(67).collectInput("c",c);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(67).collectInput("months",months);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(67).collectInput("weekdays",weekdays);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(67).collectInput("org.apache.commons.lang.time.FastDateFormat.cDateInstanceCache",org.apache.commons.lang.time.FastDateFormat.cDateInstanceCache);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(67).collectInput("length",length);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(67).collectInput("org.apache.commons.lang.time.FastDateFormat.LONG",org.apache.commons.lang.time.FastDateFormat.LONG);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(67).collectInput("tokenLen",tokenLen);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(67).collectInput("org.apache.commons.lang.time.FastDateFormat.cInstanceCache",org.apache.commons.lang.time.FastDateFormat.cInstanceCache);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(67).collectInput("org.apache.commons.lang.time.FastDateFormat.this.mLocale",org.apache.commons.lang.time.FastDateFormat.this.mLocale);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(67).collectInput("token",token);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(67).collectInput("org.apache.commons.lang.time.FastDateFormat.cTimeZoneDisplayCache",org.apache.commons.lang.time.FastDateFormat.cTimeZoneDisplayCache);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(67).collectInput("AmPmStrings",AmPmStrings);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(67).collectInput("org.apache.commons.lang.time.FastDateFormat.cDateTimeInstanceCache",org.apache.commons.lang.time.FastDateFormat.cDateTimeInstanceCache);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(67).collectInput("1",1);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(67).collectInput("org.apache.commons.lang.time.FastDateFormat.cDefaultPattern",org.apache.commons.lang.time.FastDateFormat.cDefaultPattern);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(67).collectInput("org.apache.commons.lang.time.FastDateFormat.FULL",org.apache.commons.lang.time.FastDateFormat.FULL);} catch (Exception ex1) {ex1.printStackTrace();};
                        fr.inria.lille.commons.trace.RuntimeValues.instance(67).collectOutput(runtimeAngelicValue);
                        fr.inria.lille.commons.trace.RuntimeValues.instance(67).collectionEnds();
                    }
                    if (runtimeAngelicValue) if ((sub.length()) == 1) {
                        rule = new org.apache.commons.lang.time.FastDateFormat.CharacterLiteral(sub.charAt(0));
                    }else {
                        rule = new org.apache.commons.lang.time.FastDateFormat.StringLiteral(sub);
                    }
                    break;
                default :
                    throw new java.lang.IllegalArgumentException(("Illegal pattern component: " + token));
            }
            rules.add(rule);
        }
        return rules;
    }

    protected java.lang.String parseToken(java.lang.String pattern, int[] indexRef) {
        java.lang.StringBuffer buf = new java.lang.StringBuffer();
        int i = indexRef[0];
        int length = pattern.length();
        char c = pattern.charAt(i);
        if (((c >= 'A') && (c <= 'Z')) || ((c >= 'a') && (c <= 'z'))) {
            buf.append(c);
            while ((i + 1) < length) {
                char peek = pattern.charAt((i + 1));
                if (peek == c) {
                    buf.append(c);
                    i++;
                }else {
                    break;
                }
            } 
        }else {
            buf.append('\'');
            boolean inLiteral = false;
            for (; i < length; i++) {
                c = pattern.charAt(i);
                if (c == '\'') {
                    if (((i + 1) < length) && ((pattern.charAt((i + 1))) == '\'')) {
                        i++;
                        buf.append(c);
                    }else {
                        inLiteral = !inLiteral;
                    }
                }else
                    if ((!inLiteral) && (((c >= 'A') && (c <= 'Z')) || ((c >= 'a') && (c <= 'z')))) {
                        i--;
                        break;
                    }else {
                        buf.append(c);
                    }

            }
        }
        indexRef[0] = i;
        return buf.toString();
    }

    protected org.apache.commons.lang.time.FastDateFormat.NumberRule selectNumberRule(int field, int padding) {
        switch (padding) {
            case 1 :
                return new org.apache.commons.lang.time.FastDateFormat.UnpaddedNumberField(field);
            case 2 :
                return new org.apache.commons.lang.time.FastDateFormat.TwoDigitNumberField(field);
            default :
                return new org.apache.commons.lang.time.FastDateFormat.PaddedNumberField(field, padding);
        }
    }

    public java.lang.StringBuffer format(java.lang.Object obj, java.lang.StringBuffer toAppendTo, java.text.FieldPosition pos) {
        if (obj instanceof java.util.Date) {
            return format(((java.util.Date) (obj)), toAppendTo);
        }else
            if (obj instanceof java.util.Calendar) {
                return format(((java.util.Calendar) (obj)), toAppendTo);
            }else
                if (obj instanceof java.lang.Long) {
                    return format(((java.lang.Long) (obj)).longValue(), toAppendTo);
                }else {
                    throw new java.lang.IllegalArgumentException(("Unknown class: " + (obj == null ? "<null>" : obj.getClass().getName())));
                }


    }

    public java.lang.String format(long millis) {
        return format(new java.util.Date(millis));
    }

    public java.lang.String format(java.util.Date date) {
        java.util.Calendar c = new java.util.GregorianCalendar(mTimeZone);
        c.setTime(date);
        return applyRules(c, new java.lang.StringBuffer(mMaxLengthEstimate)).toString();
    }

    public java.lang.String format(java.util.Calendar calendar) {
        return format(calendar, new java.lang.StringBuffer(mMaxLengthEstimate)).toString();
    }

    public java.lang.StringBuffer format(long millis, java.lang.StringBuffer buf) {
        return format(new java.util.Date(millis), buf);
    }

    public java.lang.StringBuffer format(java.util.Date date, java.lang.StringBuffer buf) {
        java.util.Calendar c = new java.util.GregorianCalendar(mTimeZone);
        c.setTime(date);
        return applyRules(c, buf);
    }

    public java.lang.StringBuffer format(java.util.Calendar calendar, java.lang.StringBuffer buf) {
        if (mTimeZoneForced) {
            calendar = ((java.util.Calendar) (calendar.clone()));
            calendar.setTimeZone(mTimeZone);
        }
        return applyRules(calendar, buf);
    }

    protected java.lang.StringBuffer applyRules(java.util.Calendar calendar, java.lang.StringBuffer buf) {
        org.apache.commons.lang.time.FastDateFormat.Rule[] rules = mRules;
        int len = mRules.length;
        for (int i = 0; i < len; i++) {
            rules[i].appendTo(buf, calendar);
        }
        return buf;
    }

    public java.lang.Object parseObject(java.lang.String source, java.text.ParsePosition pos) {
        pos.setIndex(0);
        pos.setErrorIndex(0);
        return null;
    }

    public java.lang.String getPattern() {
        return mPattern;
    }

    public java.util.TimeZone getTimeZone() {
        return mTimeZone;
    }

    public boolean getTimeZoneOverridesCalendar() {
        return mTimeZoneForced;
    }

    public java.util.Locale getLocale() {
        return mLocale;
    }

    public int getMaxLengthEstimate() {
        return mMaxLengthEstimate;
    }

    public boolean equals(java.lang.Object obj) {
        if ((obj instanceof org.apache.commons.lang.time.FastDateFormat) == false) {
            return false;
        }
        org.apache.commons.lang.time.FastDateFormat other = ((org.apache.commons.lang.time.FastDateFormat) (obj));
        if (((((((mPattern) == (other.mPattern)) || (mPattern.equals(other.mPattern))) && (((mTimeZone) == (other.mTimeZone)) || (mTimeZone.equals(other.mTimeZone)))) && (((mLocale) == (other.mLocale)) || (mLocale.equals(other.mLocale)))) && ((mTimeZoneForced) == (other.mTimeZoneForced))) && ((mLocaleForced) == (other.mLocaleForced))) {
            return true;
        }
        return false;
    }

    public int hashCode() {
        int total = 0;
        total += mPattern.hashCode();
        total += mTimeZone.hashCode();
        total += (mTimeZoneForced) ? 1 : 0;
        total += mLocale.hashCode();
        total += (mLocaleForced) ? 1 : 0;
        return total;
    }

    public java.lang.String toString() {
        return ("FastDateFormat[" + (mPattern)) + "]";
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
        in.defaultReadObject();
        init();
    }

    private interface Rule {
        int estimateLength();

        void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar);
    }

    private interface NumberRule extends org.apache.commons.lang.time.FastDateFormat.Rule {
        void appendTo(java.lang.StringBuffer buffer, int value);
    }

    private static class CharacterLiteral implements org.apache.commons.lang.time.FastDateFormat.Rule {
        private final char mValue;

        CharacterLiteral(char value) {
            mValue = value;
        }

        public int estimateLength() {
            return 1;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            buffer.append(mValue);
        }
    }

    private static class StringLiteral implements org.apache.commons.lang.time.FastDateFormat.Rule {
        private final java.lang.String mValue;

        StringLiteral(java.lang.String value) {
            mValue = value;
        }

        public int estimateLength() {
            return mValue.length();
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            buffer.append(mValue);
        }
    }

    private static class TextField implements org.apache.commons.lang.time.FastDateFormat.Rule {
        private final int mField;

        private final java.lang.String[] mValues;

        TextField(int field, java.lang.String[] values) {
            mField = field;
            mValues = values;
        }

        public int estimateLength() {
            int max = 0;
            for (int i = mValues.length; (--i) >= 0;) {
                int len = mValues[i].length();
                if (len > max) {
                    max = len;
                }
            }
            return max;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            buffer.append(mValues[calendar.get(mField)]);
        }
    }

    private static class UnpaddedNumberField implements org.apache.commons.lang.time.FastDateFormat.NumberRule {
        static final org.apache.commons.lang.time.FastDateFormat.UnpaddedNumberField INSTANCE_YEAR = new org.apache.commons.lang.time.FastDateFormat.UnpaddedNumberField(java.util.Calendar.YEAR);

        private final int mField;

        UnpaddedNumberField(int field) {
            mField = field;
        }

        public int estimateLength() {
            return 4;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            appendTo(buffer, calendar.get(mField));
        }

        public final void appendTo(java.lang.StringBuffer buffer, int value) {
            if (value < 10) {
                buffer.append(((char) (value + '0')));
            }else
                if (value < 100) {
                    buffer.append(((char) ((value / 10) + '0')));
                    buffer.append(((char) ((value % 10) + '0')));
                }else {
                    buffer.append(java.lang.Integer.toString(value));
                }

        }
    }

    private static class UnpaddedMonthField implements org.apache.commons.lang.time.FastDateFormat.NumberRule {
        static final org.apache.commons.lang.time.FastDateFormat.UnpaddedMonthField INSTANCE = new org.apache.commons.lang.time.FastDateFormat.UnpaddedMonthField();

        UnpaddedMonthField() {
            super();
        }

        public int estimateLength() {
            return 2;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            appendTo(buffer, ((calendar.get(java.util.Calendar.MONTH)) + 1));
        }

        public final void appendTo(java.lang.StringBuffer buffer, int value) {
            if (value < 10) {
                buffer.append(((char) (value + '0')));
            }else {
                buffer.append(((char) ((value / 10) + '0')));
                buffer.append(((char) ((value % 10) + '0')));
            }
        }
    }

    private static class PaddedNumberField implements org.apache.commons.lang.time.FastDateFormat.NumberRule {
        private final int mField;

        private final int mSize;

        PaddedNumberField(int field, int size) {
            if (size < 3) {
                throw new java.lang.IllegalArgumentException();
            }
            mField = field;
            mSize = size;
        }

        public int estimateLength() {
            return 4;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            appendTo(buffer, calendar.get(mField));
        }

        public final void appendTo(java.lang.StringBuffer buffer, int value) {
            if (value < 100) {
                for (int i = mSize; (--i) >= 2;) {
                    buffer.append('0');
                }
                buffer.append(((char) ((value / 10) + '0')));
                buffer.append(((char) ((value % 10) + '0')));
            }else {
                int digits;
                if (value < 1000) {
                    digits = 3;
                }else {
                    org.apache.commons.lang.Validate.isTrue((value > (-1)), "Negative values should not be possible", value);
                    digits = java.lang.Integer.toString(value).length();
                }
                for (int i = mSize; (--i) >= digits;) {
                    buffer.append('0');
                }
                buffer.append(java.lang.Integer.toString(value));
            }
        }
    }

    private static class TwoDigitNumberField implements org.apache.commons.lang.time.FastDateFormat.NumberRule {
        private final int mField;

        TwoDigitNumberField(int field) {
            mField = field;
        }

        public int estimateLength() {
            return 2;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            appendTo(buffer, calendar.get(mField));
        }

        public final void appendTo(java.lang.StringBuffer buffer, int value) {
            if (value < 100) {
                buffer.append(((char) ((value / 10) + '0')));
                buffer.append(((char) ((value % 10) + '0')));
            }else {
                buffer.append(java.lang.Integer.toString(value));
            }
        }
    }

    private static class TwoDigitYearField implements org.apache.commons.lang.time.FastDateFormat.NumberRule {
        static final org.apache.commons.lang.time.FastDateFormat.TwoDigitYearField INSTANCE = new org.apache.commons.lang.time.FastDateFormat.TwoDigitYearField();

        TwoDigitYearField() {
            super();
        }

        public int estimateLength() {
            return 2;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            appendTo(buffer, ((calendar.get(java.util.Calendar.YEAR)) % 100));
        }

        public final void appendTo(java.lang.StringBuffer buffer, int value) {
            buffer.append(((char) ((value / 10) + '0')));
            buffer.append(((char) ((value % 10) + '0')));
        }
    }

    private static class TwoDigitMonthField implements org.apache.commons.lang.time.FastDateFormat.NumberRule {
        static final org.apache.commons.lang.time.FastDateFormat.TwoDigitMonthField INSTANCE = new org.apache.commons.lang.time.FastDateFormat.TwoDigitMonthField();

        TwoDigitMonthField() {
            super();
        }

        public int estimateLength() {
            return 2;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            appendTo(buffer, ((calendar.get(java.util.Calendar.MONTH)) + 1));
        }

        public final void appendTo(java.lang.StringBuffer buffer, int value) {
            buffer.append(((char) ((value / 10) + '0')));
            buffer.append(((char) ((value % 10) + '0')));
        }
    }

    private static class TwelveHourField implements org.apache.commons.lang.time.FastDateFormat.NumberRule {
        private final org.apache.commons.lang.time.FastDateFormat.NumberRule mRule;

        TwelveHourField(org.apache.commons.lang.time.FastDateFormat.NumberRule rule) {
            mRule = rule;
        }

        public int estimateLength() {
            return mRule.estimateLength();
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            int value = calendar.get(java.util.Calendar.HOUR);
            if (value == 0) {
                value = (calendar.getLeastMaximum(java.util.Calendar.HOUR)) + 1;
            }
            mRule.appendTo(buffer, value);
        }

        public void appendTo(java.lang.StringBuffer buffer, int value) {
            mRule.appendTo(buffer, value);
        }
    }

    private static class TwentyFourHourField implements org.apache.commons.lang.time.FastDateFormat.NumberRule {
        private final org.apache.commons.lang.time.FastDateFormat.NumberRule mRule;

        TwentyFourHourField(org.apache.commons.lang.time.FastDateFormat.NumberRule rule) {
            mRule = rule;
        }

        public int estimateLength() {
            return mRule.estimateLength();
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            int value = calendar.get(java.util.Calendar.HOUR_OF_DAY);
            if (value == 0) {
                value = (calendar.getMaximum(java.util.Calendar.HOUR_OF_DAY)) + 1;
            }
            mRule.appendTo(buffer, value);
        }

        public void appendTo(java.lang.StringBuffer buffer, int value) {
            mRule.appendTo(buffer, value);
        }
    }

    private static class TimeZoneNameRule implements org.apache.commons.lang.time.FastDateFormat.Rule {
        private final java.util.TimeZone mTimeZone;

        private final boolean mTimeZoneForced;

        private final java.util.Locale mLocale;

        private final int mStyle;

        private final java.lang.String mStandard;

        private final java.lang.String mDaylight;

        TimeZoneNameRule(java.util.TimeZone timeZone, boolean timeZoneForced, java.util.Locale locale, int style) {
            mTimeZone = timeZone;
            mTimeZoneForced = timeZoneForced;
            mLocale = locale;
            mStyle = style;
            if (timeZoneForced) {
                mStandard = org.apache.commons.lang.time.FastDateFormat.getTimeZoneDisplay(timeZone, false, style, locale);
                mDaylight = org.apache.commons.lang.time.FastDateFormat.getTimeZoneDisplay(timeZone, true, style, locale);
            }else {
                mStandard = null;
                mDaylight = null;
            }
        }

        public int estimateLength() {
            if (mTimeZoneForced) {
                return java.lang.Math.max(mStandard.length(), mDaylight.length());
            }else
                if ((mStyle) == (java.util.TimeZone.SHORT)) {
                    return 4;
                }else {
                    return 40;
                }

        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            if (mTimeZoneForced) {
                if ((mTimeZone.useDaylightTime()) && ((calendar.get(java.util.Calendar.DST_OFFSET)) != 0)) {
                    buffer.append(mDaylight);
                }else {
                    buffer.append(mStandard);
                }
            }else {
                java.util.TimeZone timeZone = calendar.getTimeZone();
                if ((timeZone.useDaylightTime()) && ((calendar.get(java.util.Calendar.DST_OFFSET)) != 0)) {
                    buffer.append(org.apache.commons.lang.time.FastDateFormat.getTimeZoneDisplay(timeZone, true, mStyle, mLocale));
                }else {
                    buffer.append(org.apache.commons.lang.time.FastDateFormat.getTimeZoneDisplay(timeZone, false, mStyle, mLocale));
                }
            }
        }
    }

    private static class TimeZoneNumberRule implements org.apache.commons.lang.time.FastDateFormat.Rule {
        static final org.apache.commons.lang.time.FastDateFormat.TimeZoneNumberRule INSTANCE_COLON = new org.apache.commons.lang.time.FastDateFormat.TimeZoneNumberRule(true);

        static final org.apache.commons.lang.time.FastDateFormat.TimeZoneNumberRule INSTANCE_NO_COLON = new org.apache.commons.lang.time.FastDateFormat.TimeZoneNumberRule(false);

        final boolean mColon;

        TimeZoneNumberRule(boolean colon) {
            mColon = colon;
        }

        public int estimateLength() {
            return 5;
        }

        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            int offset = (calendar.get(java.util.Calendar.ZONE_OFFSET)) + (calendar.get(java.util.Calendar.DST_OFFSET));
            if (offset < 0) {
                buffer.append('-');
                offset = -offset;
            }else {
                buffer.append('+');
            }
            int hours = offset / ((60 * 60) * 1000);
            buffer.append(((char) ((hours / 10) + '0')));
            buffer.append(((char) ((hours % 10) + '0')));
            if (mColon) {
                buffer.append(':');
            }
            int minutes = (offset / (60 * 1000)) - (60 * hours);
            buffer.append(((char) ((minutes / 10) + '0')));
            buffer.append(((char) ((minutes % 10) + '0')));
        }
    }

    private static class TimeZoneDisplayKey {
        private final java.util.TimeZone mTimeZone;

        private final int mStyle;

        private final java.util.Locale mLocale;

        TimeZoneDisplayKey(java.util.TimeZone timeZone, boolean daylight, int style, java.util.Locale locale) {
            mTimeZone = timeZone;
            if (daylight) {
                style |= -2147483648;
            }
            mStyle = style;
            mLocale = locale;
        }

        public int hashCode() {
            return ((mStyle) * 31) + (mLocale.hashCode());
        }

        public boolean equals(java.lang.Object obj) {
            if ((this) == obj) {
                return true;
            }
            if (obj instanceof org.apache.commons.lang.time.FastDateFormat.TimeZoneDisplayKey) {
                org.apache.commons.lang.time.FastDateFormat.TimeZoneDisplayKey other = ((org.apache.commons.lang.time.FastDateFormat.TimeZoneDisplayKey) (obj));
                return ((mTimeZone.equals(other.mTimeZone)) && ((mStyle) == (other.mStyle))) && (mLocale.equals(other.mLocale));
            }
            return false;
        }
    }

    private static class Pair {
        private final java.lang.Object mObj1;

        private final java.lang.Object mObj2;

        public Pair(java.lang.Object obj1, java.lang.Object obj2) {
            mObj1 = obj1;
            mObj2 = obj2;
        }

        public boolean equals(java.lang.Object obj) {
            if ((this) == obj) {
                return true;
            }
            if (!(obj instanceof org.apache.commons.lang.time.FastDateFormat.Pair)) {
                return false;
            }
            org.apache.commons.lang.time.FastDateFormat.Pair key = ((org.apache.commons.lang.time.FastDateFormat.Pair) (obj));
            return ((mObj1) == null ? (key.mObj1) == null : mObj1.equals(key.mObj1)) && ((mObj2) == null ? (key.mObj2) == null : mObj2.equals(key.mObj2));
        }

        public int hashCode() {
            return ((mObj1) == null ? 0 : mObj1.hashCode()) + ((mObj2) == null ? 0 : mObj2.hashCode());
        }

        public java.lang.String toString() {
            return ((("[" + (mObj1)) + ':') + (mObj2)) + ']';
        }
    }
}
18:46:22.099 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
18:46:22.099 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:46:22.113 [pool-350-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (11 ms)
<> Total tests run: 26
<> Ignored tests: 0
<> Failed tests: 4
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
18:46:22.846 [pool-351-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (4 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:46:22.849 [pool-352-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (3 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
18:46:22.850 [pool-353-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:46:22.851 [pool-354-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

18:46:22.851 [pool-349-thread-1] DEBUG tests.output - Failing tests with false: 
[test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>, test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>]
18:46:22.851 [pool-349-thread-1] DEBUG tests.output - Failing tests with true: 
[test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>, test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>]
18:46:22.851 [pool-349-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.lang.time.FastDateFormat:687.
18:46:22.851 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #83
18:46:22.851 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang.time.FastDateFormat:686 which is executed by 18 tests
-1899260190
18:46:22.940 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #84
18:46:22.940 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang.time.FastDateFormat:217 which is executed by 18 tests
-1899260190
18:46:23.026 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:46:23.040 [pool-356-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (11 ms)
<> Total tests run: 26
<> Ignored tests: 0
<> Failed tests: 4
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
18:46:23.781 [pool-357-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (3 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:46:23.783 [pool-358-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
18:46:23.784 [pool-359-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:46:23.785 [pool-360-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

18:46:23.785 [pool-355-thread-1] DEBUG tests.output - Failing tests with false: 
[test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>, test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>]
18:46:23.785 [pool-355-thread-1] DEBUG tests.output - Failing tests with true: 
[test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>, test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>]
18:46:23.785 [pool-355-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.lang.time.FastDateFormat:217.
18:46:23.785 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #85
18:46:23.785 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang.time.FastDateFormat:216 which is executed by 18 tests
-1899260190
18:46:23.872 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:46:23.886 [pool-362-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (11 ms)
<> Total tests run: 26
<> Ignored tests: 0
<> Failed tests: 4
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
18:46:24.658 [pool-363-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:46:24.660 [pool-364-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
18:46:24.661 [pool-365-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:46:24.662 [pool-366-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

18:46:24.662 [pool-361-thread-1] DEBUG tests.output - Failing tests with false: 
[test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>, test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>]
18:46:24.662 [pool-361-thread-1] DEBUG tests.output - Failing tests with true: 
[test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>, test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>]
18:46:24.662 [pool-361-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.lang.time.FastDateFormat:216.
18:46:24.662 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #86
18:46:24.662 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang.time.FastDateFormat:215 which is executed by 18 tests
-1899260190
18:46:24.749 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:46:24.763 [pool-368-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (11 ms)
<> Total tests run: 26
<> Ignored tests: 0
<> Failed tests: 4
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

java.lang.NullPointerException
    at org.apache.commons.lang.time.FastDateFormat.getInstance(FastDateFormat.java:88)
    at org.apache.commons.lang.time.FastDateFormat.getDateInstance(FastDateFormat.java:122)
    at org.apache.commons.lang.time.FastDateFormat.getDateInstance(FastDateFormat.java:99)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:139)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
18:46:25.503 [pool-369-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (3 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[null]
java.lang.NullPointerException    at org.apache.commons.lang.time.FastDateFormat.getInstance(FastDateFormat.java:88)
    at org.apache.commons.lang.time.FastDateFormat.getDateInstance(FastDateFormat.java:122)
    at org.apache.commons.lang.time.FastDateFormat.getDateInstance(FastDateFormat.java:99)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:139)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.NullPointerException
    at org.apache.commons.lang.time.FastDateFormat.getInstance(FastDateFormat.java:88)
    at org.apache.commons.lang.time.FastDateFormat.getDateTimeInstance(FastDateFormat.java:196)
    at org.apache.commons.lang.time.FastDateFormat.getDateTimeInstance(FastDateFormat.java:173)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:159)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
18:46:25.504 [pool-370-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[null]
java.lang.NullPointerException    at org.apache.commons.lang.time.FastDateFormat.getInstance(FastDateFormat.java:88)
    at org.apache.commons.lang.time.FastDateFormat.getDateTimeInstance(FastDateFormat.java:196)
    at org.apache.commons.lang.time.FastDateFormat.getDateTimeInstance(FastDateFormat.java:173)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:159)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
18:46:25.506 [pool-371-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:46:25.508 [pool-372-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

18:46:25.508 [pool-367-thread-1] DEBUG tests.output - Failing tests with false: 
[test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest): null, test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest): null]
18:46:25.508 [pool-367-thread-1] DEBUG tests.output - Failing tests with true: 
[test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>, test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>]
18:46:25.508 [pool-367-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.lang.time.FastDateFormat:215.
18:46:25.508 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #87
18:46:25.508 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang.time.FastDateFormat$CharacterLiteral:1089 which is executed by 18 tests
-1899260190
18:46:25.596 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #88
18:46:25.596 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang.time.FastDateFormat:770 which is executed by 19 tests
-1899260190
18:46:25.701 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #89
18:46:25.701 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang.time.FastDateFormat:759 which is executed by 19 tests
-1899260190
18:46:25.788 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #90
18:46:25.788 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang.time.FastDateFormat:758 which is executed by 19 tests
-1899260190
18:46:25.875 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:46:25.888 [pool-374-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (11 ms)
<> Total tests run: 26
<> Ignored tests: 0
<> Failed tests: 4
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
18:46:26.615 [pool-375-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (5 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)

java.lang.IllegalArgumentException: Illegal pattern component: U
    at org.apache.commons.lang.time.FastDateFormat.parsePattern(FastDateFormat.java:334)
    at org.apache.commons.lang.time.FastDateFormat.init(FastDateFormat.java:213)
    at org.apache.commons.lang.time.FastDateFormat.getInstance(FastDateFormat.java:60)
    at org.apache.commons.lang.time.FastDateFormat.getDateTimeInstance(FastDateFormat.java:168)
    at org.apache.commons.lang.time.FastDateFormat.getDateTimeInstance(FastDateFormat.java:145)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:159)
18:46:26.618 [pool-376-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[Illegal pattern component: U]
java.lang.IllegalArgumentException: Illegal pattern component: U    at org.apache.commons.lang.time.FastDateFormat.parsePattern(FastDateFormat.java:334)
    at org.apache.commons.lang.time.FastDateFormat.init(FastDateFormat.java:213)
    at org.apache.commons.lang.time.FastDateFormat.getInstance(FastDateFormat.java:60)
    at org.apache.commons.lang.time.FastDateFormat.getDateTimeInstance(FastDateFormat.java:168)
    at org.apache.commons.lang.time.FastDateFormat.getDateTimeInstance(FastDateFormat.java:145)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:159)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
18:46:26.618 [pool-377-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)

junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:46:26.621 [pool-378-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

18:46:26.621 [pool-373-thread-1] DEBUG tests.output - Failing tests with false: 
[test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>, test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest): Illegal pattern component: U]
18:46:26.621 [pool-373-thread-1] DEBUG tests.output - Failing tests with true: 
[test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>, test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest): expected same:<de_DE> was not:<en_US>]
18:46:26.621 [pool-373-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.lang.time.FastDateFormat:758.
18:46:26.621 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #91
18:46:26.621 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang.time.FastDateFormat:730 which is executed by 19 tests
-1899260190
18:46:26.709 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #92
18:46:26.709 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang.time.FastDateFormat:726 which is executed by 19 tests
-1899260190
18:46:26.796 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
18:46:26.809 [pool-380-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (10 ms)
<> Total tests run: 26
<> Ignored tests: 0
<> Failed tests: 4
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)
~ test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang.time.FastDateFormatTest)
[expected same:<de_DE> was not:<en_US>]
junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotSame(Assert.java:325)
    at junit.framework.Assert.assertSame(Assert.java:288)
    at junit.framework.Assert.assertSame(Assert.java:296)
    at junit.framework.TestCase.assertSame(TestCase.java:465)
    at org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)

18:50:09.489 [pool-379-thread-1] DEBUG xxl.java.junit.TestSuiteExecution - Timeout after 200 seconds. Infinite loop?
18:51:55.841 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.TimeoutException
18:52:37.714 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #93
18:52:37.714 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang.time.FastDateFormat:725 which is executed by 19 tests
java.lang.OutOfMemoryError: Java heap space
    at java.util.HashMap.resize(HashMap.java:704)
    at java.util.HashMap.putVal(HashMap.java:663)
    at java.util.HashMap.put(HashMap.java:612)
    at fr.inria.lille.commons.trace.collector.ValueCollector.collectWith(ValueCollector.java:31)
    at fr.inria.lille.commons.trace.collector.ValueCollector.collectFrom(ValueCollector.java:21)
    at fr.inria.lille.commons.trace.RuntimeValues.collectInput(RuntimeValues.java:89)
java.util.concurrent.ExecutionException: java.lang.OutOfMemoryError: Java heap space
	at java.util.concurrent.FutureTask.report(FutureTask.java:122)
	at java.util.concurrent.FutureTask.get(FutureTask.java:206)
	at fr.inria.lille.repair.Main.main(Main.java:106)
19:33:38.838 [pool-381-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2831306 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test_changeDefault_Locale_DateInstance(org.apache.commons.lang.time.FastDateFormatTest)
[Java heap space]
java.lang.OutOfMemoryError: Java heap space    at java.util.HashMap.resize(HashMap.java:704)
    at java.util.HashMap.putVal(HashMap.java:663)
    at java.util.HashMap.put(HashMap.java:612)
    at fr.inria.lille.commons.trace.collector.ValueCollector.collectWith(ValueCollector.java:31)
    at fr.inria.lille.commons.trace.collector.ValueCollector.collectFrom(ValueCollector.java:21)
    at fr.inria.lille.commons.trace.RuntimeValues.collectInput(RuntimeValues.java:89)

Caused by: java.lang.OutOfMemoryError: Java heap space
	at java.lang.String.substring(String.java:1969)
	at java.io.UnixFileSystem.parentOrNull(UnixFileSystem.java:227)
	at java.io.UnixFileSystem.canonicalize(UnixFileSystem.java:160)
	at java.io.File.getCanonicalPath(File.java:618)
	at java.io.File.getCanonicalFile(File.java:643)
	at spoon.support.compiler.FileSystemFile.<init>(FileSystemFile.java:43)
	at spoon.support.compiler.FileSystemFolder.getFiles(FileSystemFolder.java:63)
	at spoon.support.compiler.FileSystemFolder.getAllJavaFiles(FileSystemFolder.java:108)
	at spoon.support.compiler.FileSystemFolder.getAllJavaFiles(FileSystemFolder.java:114)
	at spoon.support.compiler.FileSystemFolder.getAllJavaFiles(FileSystemFolder.java:114)
	at spoon.support.compiler.FileSystemFolder.getAllJavaFiles(FileSystemFolder.java:114)
	at spoon.support.compiler.FileSystemFolder.getAllJavaFiles(FileSystemFolder.java:114)
	at spoon.support.compiler.FileSystemFolder.getAllJavaFiles(FileSystemFolder.java:114)
	at spoon.support.StandardEnvironment.verifySourceClasspath(StandardEnvironment.java:444)
	at spoon.support.StandardEnvironment.setSourceClasspath(StandardEnvironment.java:428)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.setSourceClasspath(JDTBasedSpoonCompiler.java:321)
	at fr.inria.lille.commons.spoon.util.SpoonModelLibrary.modelFor(SpoonModelLibrary.java:47)
	at fr.inria.lille.commons.spoon.SpoonedFile.<init>(SpoonedFile.java:61)
	at fr.inria.lille.commons.spoon.SpoonedClass.<init>(SpoonedClass.java:14)
	at fr.inria.lille.commons.spoon.SpoonedProject.forked(SpoonedProject.java:47)
	at fr.inria.lille.repair.nopol.NoPol.runOnStatement(NoPol.java:222)
	at fr.inria.lille.repair.nopol.NoPol.solveWithMultipleBuild(NoPol.java:213)
	at fr.inria.lille.repair.nopol.NoPol.build(NoPol.java:154)
	at fr.inria.lille.repair.Main$1.call(Main.java:101)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

Usage: java -jar nopol.jar
                          [(-m|--mode) <repair|ranking>] (-e|--type) <condition|precondition|pre_then_cond|loop|arithmetic> [(-o|--oracle) <angelic|symbolic>] [(-y|--synthesis) <smt|dynamoth>] [(-l|--solver) <z3|cvc4>] [(-p|--solver-path) <solverPath>] (-s|--source) source1:source2:...:sourceN  (-c|--classpath) <classpath> [(-t|--test) test1:test2:...:testN ] [--complianceLevel <complianceLevel>] [--maxTime <maxTime>] [--maxTimeType <maxTimeType>] [(-z|--flocal) < cocospoon|dumb|gzoltar>] [--output <outputFolder>] [--json[:<outputJson>]]

  [(-m|--mode) <repair|ranking>]
        Define the mode of execution. (default: repair)

  (-e|--type) <condition|precondition|pre_then_cond|loop|arithmetic>
        The repair type (example fixing only conditions, or adding
        precondition). REQUIRED OPTION (default: condition)

  [(-o|--oracle) <angelic|symbolic>]
        Define the oracle (only used with repair mode). (default: angelic)

  [(-y|--synthesis) <smt|dynamoth>]
        Define the patch synthesis. (default: smt)

  [(-l|--solver) <z3|cvc4>]
        Define the solver (only used with smt synthesis). (default: z3)

  [(-p|--solver-path) <solverPath>]
        Define the solver binary path (only used with smt synthesis).

  (-s|--source) source1:source2:...:sourceN 
        Define the path to the source code of the project.

  (-c|--classpath) <classpath>
        Define the classpath of the project.

  [(-t|--test) test1:test2:...:testN ]
        Define the tests of the project (both failing and passing),
        fully-qualified, separated with ':' (even if the classpath contains
        other tests, only those are considered.

  [--complianceLevel <complianceLevel>]
        The compliance level of the project. (default: 7)

  [--maxTime <maxTime>]
        The maximum time execution in minute for the whole execution of
        Nopol.(default: 10)

  [--maxTimeType <maxTimeType>]
        The maximum time execution in minute for one type of patch. (default: 5)

  [(-z|--flocal) < cocospoon|dumb|gzoltar>]
        Define the fault localizer to be used. (default: gzoltar)

  [--output <outputFolder>]
        Define the location where the patches will be saved. (default: .)

  [--json[:<outputJson>]]
        Output a json file in the current working directory.

Command exited with non-zero status 255
53602.90user 48.29system 55:30.49elapsed 1610%CPU (0avgtext+0avgdata 4648296maxresident)k
56872inputs+13640outputs (7major+1741934minor)pagefaults 0swaps


Node: petitprince-5.luxembourg.grid5000.fr



Date: Wed Nov 28 19:33:39 EST 2018

