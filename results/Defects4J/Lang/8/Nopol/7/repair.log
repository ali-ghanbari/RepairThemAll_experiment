cd /tmp/Nopol_Defects4J_Lang_8;
export JAVA_TOOL_OPTIONS=-Dfile.encoding=UTF8;
TZ="America/New_York"; export TZ;
export PATH="/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/:$PATH";
export JAVA_HOME="/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/";
time java -Xmx4048m -cp /home/tdurieux/defects4j4repair/script/../repair_tools/nopol.jar:/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin//../lib/tools.jar fr.inria.lille.repair.Main \
	--mode repair \
	--type pre_then_cond \
	--oracle angelic \
	--synthesis smt \
	--flocal gzoltar \
	--json \
	--solver z3 \
	--solver-path /home/tdurieux/defects4j4repair/script/../libs/z3/build/z3 \
	--complianceLevel 6 \
	--source src/main/java/ \
	--classpath "target/classes/:target/tests/:/tmp/Nopol_Defects4J_Lang_8/target/classes/:/tmp/Nopol_Defects4J_Lang_8/target/tests/:/home/tdurieux/defects4j4repair/script/../benchmarks/defects4j/framework/projects/Lang/lib/asm.jar:/home/tdurieux/defects4j4repair/script/../benchmarks/defects4j/framework/projects/Lang/lib/cglib.jar:/home/tdurieux/defects4j4repair/script/../benchmarks/defects4j/framework/projects/Lang/lib/commons-io.jar:/home/tdurieux/defects4j4repair/script/../benchmarks/defects4j/framework/projects/Lang/lib/easymock.jar:/home/tdurieux/defects4j4repair/script/../repair_tools/nopol.jar";
	echo "\n\nNode: `hostname`\n";
	echo "\n\nDate: `date`\n";
Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8
19:06:15.795 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Source files: [src/main/java]
19:06:15.800 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Classpath: [file:/tmp/Nopol_Defects4J_Lang_8/target/classes/, file:/tmp/Nopol_Defects4J_Lang_8/target/tests/, file:/tmp/Nopol_Defects4J_Lang_8/target/classes/, file:/tmp/Nopol_Defects4J_Lang_8/target/tests/, file:/home/tdurieux/defects4j4repair/script/../benchmarks/defects4j/framework/projects/Lang/lib/asm.jar, file:/home/tdurieux/defects4j4repair/script/../benchmarks/defects4j/framework/projects/Lang/lib/cglib.jar, file:/home/tdurieux/defects4j4repair/script/../benchmarks/defects4j/framework/projects/Lang/lib/commons-io.jar, file:/home/tdurieux/defects4j4repair/script/../benchmarks/defects4j/framework/projects/Lang/lib/easymock.jar, file:/home/tdurieux/defects4j4repair/script/../repair_tools/nopol.jar]
19:06:15.800 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Statement type: PRE_THEN_COND
19:06:15.800 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Args: [org.apache.commons.lang3.AnnotationUtilsTest, org.apache.commons.lang3.AnnotationUtilsTest, org.apache.commons.lang3.ArrayUtilsAddTest, org.apache.commons.lang3.ArrayUtilsAddTest, org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest, org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest, org.apache.commons.lang3.ArrayUtilsRemoveTest, org.apache.commons.lang3.ArrayUtilsRemoveTest, org.apache.commons.lang3.ArrayUtilsTest, org.apache.commons.lang3.ArrayUtilsTest, org.apache.commons.lang3.BitFieldTest, org.apache.commons.lang3.BitFieldTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.CharEncodingTest, org.apache.commons.lang3.CharEncodingTest, org.apache.commons.lang3.CharRangeTest, org.apache.commons.lang3.CharRangeTest, org.apache.commons.lang3.CharSequenceUtilsTest, org.apache.commons.lang3.CharSequenceUtilsTest, org.apache.commons.lang3.CharSetTest, org.apache.commons.lang3.CharSetTest, org.apache.commons.lang3.CharSetUtilsTest, org.apache.commons.lang3.CharSetUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.ClassUtilsTest, org.apache.commons.lang3.ClassUtilsTest, org.apache.commons.lang3.EnumUtilsTest, org.apache.commons.lang3.EnumUtilsTest, org.apache.commons.lang3.JavaVersionTest, org.apache.commons.lang3.JavaVersionTest, org.apache.commons.lang3.LocaleUtilsTest, org.apache.commons.lang3.LocaleUtilsTest, org.apache.commons.lang3.ObjectUtilsTest, org.apache.commons.lang3.ObjectUtilsTest, org.apache.commons.lang3.RandomStringUtilsTest, org.apache.commons.lang3.RandomStringUtilsTest, org.apache.commons.lang3.RangeTest, org.apache.commons.lang3.RangeTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.StringEscapeUtilsTest, org.apache.commons.lang3.StringEscapeUtilsTest, org.apache.commons.lang3.StringUtilsEqualsIndexOfTest, org.apache.commons.lang3.StringUtilsEqualsIndexOfTest, org.apache.commons.lang3.StringUtilsIsTest, org.apache.commons.lang3.StringUtilsIsTest, org.apache.commons.lang3.StringUtilsStartsEndsWithTest, org.apache.commons.lang3.StringUtilsStartsEndsWithTest, org.apache.commons.lang3.StringUtilsSubstringTest, org.apache.commons.lang3.StringUtilsSubstringTest, org.apache.commons.lang3.StringUtilsTest, org.apache.commons.lang3.StringUtilsTest, org.apache.commons.lang3.StringUtilsTrimEmptyTest, org.apache.commons.lang3.StringUtilsTrimEmptyTest, org.apache.commons.lang3.SystemUtilsTest, org.apache.commons.lang3.SystemUtilsTest, org.apache.commons.lang3.ValidateTest, org.apache.commons.lang3.ValidateTest, org.apache.commons.lang3.builder.CompareToBuilderTest, org.apache.commons.lang3.builder.CompareToBuilderTest, org.apache.commons.lang3.builder.DefaultToStringStyleTest, org.apache.commons.lang3.builder.DefaultToStringStyleTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest, org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest, org.apache.commons.lang3.builder.HashCodeBuilderTest, org.apache.commons.lang3.builder.HashCodeBuilderTest, org.apache.commons.lang3.builder.MultiLineToStringStyleTest, org.apache.commons.lang3.builder.MultiLineToStringStyleTest, org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest, org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest, org.apache.commons.lang3.builder.ReflectionToStringBuilderConcurrencyTest, org.apache.commons.lang3.builder.ReflectionToStringBuilderConcurrencyTest, org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest, org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest, org.apache.commons.lang3.builder.ReflectionToStringBuilderMutateInspectConcurrencyTest, org.apache.commons.lang3.builder.ReflectionToStringBuilderMutateInspectConcurrencyTest, org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest, org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest, org.apache.commons.lang3.builder.SimpleToStringStyleTest, org.apache.commons.lang3.builder.SimpleToStringStyleTest, org.apache.commons.lang3.builder.StandardToStringStyleTest, org.apache.commons.lang3.builder.StandardToStringStyleTest, org.apache.commons.lang3.builder.ToStringBuilderTest, org.apache.commons.lang3.builder.ToStringBuilderTest, org.apache.commons.lang3.builder.ToStringStyleConcurrencyTest, org.apache.commons.lang3.builder.ToStringStyleConcurrencyTest, org.apache.commons.lang3.builder.ToStringStyleTest, org.apache.commons.lang3.builder.ToStringStyleTest, org.apache.commons.lang3.concurrent.AtomicInitializerTest, org.apache.commons.lang3.concurrent.AtomicInitializerTest, org.apache.commons.lang3.concurrent.AtomicSafeInitializerTest, org.apache.commons.lang3.concurrent.AtomicSafeInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BasicThreadFactoryTest, org.apache.commons.lang3.concurrent.BasicThreadFactoryTest, org.apache.commons.lang3.concurrent.CallableBackgroundInitializerTest, org.apache.commons.lang3.concurrent.CallableBackgroundInitializerTest, org.apache.commons.lang3.concurrent.ConcurrentUtilsTest, org.apache.commons.lang3.concurrent.ConcurrentUtilsTest, org.apache.commons.lang3.concurrent.ConstantInitializerTest, org.apache.commons.lang3.concurrent.ConstantInitializerTest, org.apache.commons.lang3.concurrent.LazyInitializerTest, org.apache.commons.lang3.concurrent.LazyInitializerTest, org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest, org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest, org.apache.commons.lang3.concurrent.TimedSemaphoreTest, org.apache.commons.lang3.concurrent.TimedSemaphoreTest, org.apache.commons.lang3.event.EventListenerSupportTest, org.apache.commons.lang3.event.EventListenerSupportTest, org.apache.commons.lang3.event.EventUtilsTest, org.apache.commons.lang3.event.EventUtilsTest, org.apache.commons.lang3.exception.ContextedExceptionTest, org.apache.commons.lang3.exception.ContextedExceptionTest, org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest, org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest, org.apache.commons.lang3.exception.DefaultExceptionContextTest, org.apache.commons.lang3.exception.DefaultExceptionContextTest, org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.math.FractionTest, org.apache.commons.lang3.math.FractionTest, org.apache.commons.lang3.math.IEEE754rUtilsTest, org.apache.commons.lang3.math.IEEE754rUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.mutable.MutableBooleanTest, org.apache.commons.lang3.mutable.MutableBooleanTest, org.apache.commons.lang3.mutable.MutableByteTest, org.apache.commons.lang3.mutable.MutableByteTest, org.apache.commons.lang3.mutable.MutableDoubleTest, org.apache.commons.lang3.mutable.MutableDoubleTest, org.apache.commons.lang3.mutable.MutableFloatTest, org.apache.commons.lang3.mutable.MutableFloatTest, org.apache.commons.lang3.mutable.MutableIntTest, org.apache.commons.lang3.mutable.MutableIntTest, org.apache.commons.lang3.mutable.MutableLongTest, org.apache.commons.lang3.mutable.MutableLongTest, org.apache.commons.lang3.mutable.MutableObjectTest, org.apache.commons.lang3.mutable.MutableObjectTest, org.apache.commons.lang3.mutable.MutableShortTest, org.apache.commons.lang3.mutable.MutableShortTest, org.apache.commons.lang3.reflect.ConstructorUtilsTest, org.apache.commons.lang3.reflect.ConstructorUtilsTest, org.apache.commons.lang3.reflect.FieldUtilsTest, org.apache.commons.lang3.reflect.FieldUtilsTest, org.apache.commons.lang3.reflect.MethodUtilsTest, org.apache.commons.lang3.reflect.MethodUtilsTest, org.apache.commons.lang3.reflect.TypeUtilsTest, org.apache.commons.lang3.reflect.TypeUtilsTest, org.apache.commons.lang3.text.CompositeFormatTest, org.apache.commons.lang3.text.CompositeFormatTest, org.apache.commons.lang3.text.ExtendedMessageFormatTest, org.apache.commons.lang3.text.ExtendedMessageFormatTest, org.apache.commons.lang3.text.FormattableUtilsTest, org.apache.commons.lang3.text.FormattableUtilsTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderTest, org.apache.commons.lang3.text.StrBuilderTest, org.apache.commons.lang3.text.StrLookupTest, org.apache.commons.lang3.text.StrLookupTest, org.apache.commons.lang3.text.StrMatcherTest, org.apache.commons.lang3.text.StrMatcherTest, org.apache.commons.lang3.text.StrSubstitutorTest, org.apache.commons.lang3.text.StrSubstitutorTest, org.apache.commons.lang3.text.StrTokenizerTest, org.apache.commons.lang3.text.StrTokenizerTest, org.apache.commons.lang3.text.WordUtilsTest, org.apache.commons.lang3.text.WordUtilsTest, org.apache.commons.lang3.text.translate.EntityArraysTest, org.apache.commons.lang3.text.translate.EntityArraysTest, org.apache.commons.lang3.text.translate.LookupTranslatorTest, org.apache.commons.lang3.text.translate.LookupTranslatorTest, org.apache.commons.lang3.text.translate.NumericEntityEscaperTest, org.apache.commons.lang3.text.translate.NumericEntityEscaperTest, org.apache.commons.lang3.text.translate.NumericEntityUnescaperTest, org.apache.commons.lang3.text.translate.NumericEntityUnescaperTest, org.apache.commons.lang3.text.translate.OctalUnescaperTest, org.apache.commons.lang3.text.translate.OctalUnescaperTest, org.apache.commons.lang3.text.translate.UnicodeEscaperTest, org.apache.commons.lang3.text.translate.UnicodeEscaperTest, org.apache.commons.lang3.text.translate.UnicodeUnescaperTest, org.apache.commons.lang3.text.translate.UnicodeUnescaperTest, org.apache.commons.lang3.time.DateFormatUtilsTest, org.apache.commons.lang3.time.DateFormatUtilsTest, org.apache.commons.lang3.time.DateUtilsFragmentTest, org.apache.commons.lang3.time.DateUtilsFragmentTest, org.apache.commons.lang3.time.DateUtilsRoundingTest, org.apache.commons.lang3.time.DateUtilsRoundingTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DurationFormatUtilsTest, org.apache.commons.lang3.time.DurationFormatUtilsTest, org.apache.commons.lang3.time.FastDateFormatTest, org.apache.commons.lang3.time.FastDateFormatTest, org.apache.commons.lang3.time.FastDateFormat_ParserTest, org.apache.commons.lang3.time.FastDateFormat_ParserTest, org.apache.commons.lang3.time.FastDateFormat_PrinterTest, org.apache.commons.lang3.time.FastDateFormat_PrinterTest, org.apache.commons.lang3.time.FastDateParserTest, org.apache.commons.lang3.time.FastDateParserTest, org.apache.commons.lang3.time.FastDatePrinterTest, org.apache.commons.lang3.time.FastDatePrinterTest, org.apache.commons.lang3.time.StopWatchTest, org.apache.commons.lang3.time.StopWatchTest, org.apache.commons.lang3.tuple.ImmutablePairTest, org.apache.commons.lang3.tuple.ImmutablePairTest, org.apache.commons.lang3.tuple.ImmutableTripleTest, org.apache.commons.lang3.tuple.ImmutableTripleTest, org.apache.commons.lang3.tuple.MutablePairTest, org.apache.commons.lang3.tuple.MutablePairTest, org.apache.commons.lang3.tuple.MutableTripleTest, org.apache.commons.lang3.tuple.MutableTripleTest, org.apache.commons.lang3.tuple.PairTest, org.apache.commons.lang3.tuple.PairTest, org.apache.commons.lang3.tuple.TripleTest, org.apache.commons.lang3.tuple.TripleTest]
19:06:15.801 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Config: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=true, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=PRE_THEN_COND, synthesis=SMT, oracle=ANGELIC, solver=Z3, solverPath='/home/tdurieux/defects4j4repair/script/../libs/z3/build/z3', projectSources=[src/main/java], projectClasspath='[Ljava.net.URL;@19bb089b', projectTests=[org.apache.commons.lang3.AnnotationUtilsTest, org.apache.commons.lang3.AnnotationUtilsTest, org.apache.commons.lang3.ArrayUtilsAddTest, org.apache.commons.lang3.ArrayUtilsAddTest, org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest, org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest, org.apache.commons.lang3.ArrayUtilsRemoveTest, org.apache.commons.lang3.ArrayUtilsRemoveTest, org.apache.commons.lang3.ArrayUtilsTest, org.apache.commons.lang3.ArrayUtilsTest, org.apache.commons.lang3.BitFieldTest, org.apache.commons.lang3.BitFieldTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.CharEncodingTest, org.apache.commons.lang3.CharEncodingTest, org.apache.commons.lang3.CharRangeTest, org.apache.commons.lang3.CharRangeTest, org.apache.commons.lang3.CharSequenceUtilsTest, org.apache.commons.lang3.CharSequenceUtilsTest, org.apache.commons.lang3.CharSetTest, org.apache.commons.lang3.CharSetTest, org.apache.commons.lang3.CharSetUtilsTest, org.apache.commons.lang3.CharSetUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.ClassUtilsTest, org.apache.commons.lang3.ClassUtilsTest, org.apache.commons.lang3.EnumUtilsTest, org.apache.commons.lang3.EnumUtilsTest, org.apache.commons.lang3.JavaVersionTest, org.apache.commons.lang3.JavaVersionTest, org.apache.commons.lang3.LocaleUtilsTest, org.apache.commons.lang3.LocaleUtilsTest, org.apache.commons.lang3.ObjectUtilsTest, org.apache.commons.lang3.ObjectUtilsTest, org.apache.commons.lang3.RandomStringUtilsTest, org.apache.commons.lang3.RandomStringUtilsTest, org.apache.commons.lang3.RangeTest, org.apache.commons.lang3.RangeTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.StringEscapeUtilsTest, org.apache.commons.lang3.StringEscapeUtilsTest, org.apache.commons.lang3.StringUtilsEqualsIndexOfTest, org.apache.commons.lang3.StringUtilsEqualsIndexOfTest, org.apache.commons.lang3.StringUtilsIsTest, org.apache.commons.lang3.StringUtilsIsTest, org.apache.commons.lang3.StringUtilsStartsEndsWithTest, org.apache.commons.lang3.StringUtilsStartsEndsWithTest, org.apache.commons.lang3.StringUtilsSubstringTest, org.apache.commons.lang3.StringUtilsSubstringTest, org.apache.commons.lang3.StringUtilsTest, org.apache.commons.lang3.StringUtilsTest, org.apache.commons.lang3.StringUtilsTrimEmptyTest, org.apache.commons.lang3.StringUtilsTrimEmptyTest, org.apache.commons.lang3.SystemUtilsTest, org.apache.commons.lang3.SystemUtilsTest, org.apache.commons.lang3.ValidateTest, org.apache.commons.lang3.ValidateTest, org.apache.commons.lang3.builder.CompareToBuilderTest, org.apache.commons.lang3.builder.CompareToBuilderTest, org.apache.commons.lang3.builder.DefaultToStringStyleTest, org.apache.commons.lang3.builder.DefaultToStringStyleTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest, org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest, org.apache.commons.lang3.builder.HashCodeBuilderTest, org.apache.commons.lang3.builder.HashCodeBuilderTest, org.apache.commons.lang3.builder.MultiLineToStringStyleTest, org.apache.commons.lang3.builder.MultiLineToStringStyleTest, org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest, org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest, org.apache.commons.lang3.builder.ReflectionToStringBuilderConcurrencyTest, org.apache.commons.lang3.builder.ReflectionToStringBuilderConcurrencyTest, org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest, org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest, org.apache.commons.lang3.builder.ReflectionToStringBuilderMutateInspectConcurrencyTest, org.apache.commons.lang3.builder.ReflectionToStringBuilderMutateInspectConcurrencyTest, org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest, org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest, org.apache.commons.lang3.builder.SimpleToStringStyleTest, org.apache.commons.lang3.builder.SimpleToStringStyleTest, org.apache.commons.lang3.builder.StandardToStringStyleTest, org.apache.commons.lang3.builder.StandardToStringStyleTest, org.apache.commons.lang3.builder.ToStringBuilderTest, org.apache.commons.lang3.builder.ToStringBuilderTest, org.apache.commons.lang3.builder.ToStringStyleConcurrencyTest, org.apache.commons.lang3.builder.ToStringStyleConcurrencyTest, org.apache.commons.lang3.builder.ToStringStyleTest, org.apache.commons.lang3.builder.ToStringStyleTest, org.apache.commons.lang3.concurrent.AtomicInitializerTest, org.apache.commons.lang3.concurrent.AtomicInitializerTest, org.apache.commons.lang3.concurrent.AtomicSafeInitializerTest, org.apache.commons.lang3.concurrent.AtomicSafeInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BasicThreadFactoryTest, org.apache.commons.lang3.concurrent.BasicThreadFactoryTest, org.apache.commons.lang3.concurrent.CallableBackgroundInitializerTest, org.apache.commons.lang3.concurrent.CallableBackgroundInitializerTest, org.apache.commons.lang3.concurrent.ConcurrentUtilsTest, org.apache.commons.lang3.concurrent.ConcurrentUtilsTest, org.apache.commons.lang3.concurrent.ConstantInitializerTest, org.apache.commons.lang3.concurrent.ConstantInitializerTest, org.apache.commons.lang3.concurrent.LazyInitializerTest, org.apache.commons.lang3.concurrent.LazyInitializerTest, org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest, org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest, org.apache.commons.lang3.concurrent.TimedSemaphoreTest, org.apache.commons.lang3.concurrent.TimedSemaphoreTest, org.apache.commons.lang3.event.EventListenerSupportTest, org.apache.commons.lang3.event.EventListenerSupportTest, org.apache.commons.lang3.event.EventUtilsTest, org.apache.commons.lang3.event.EventUtilsTest, org.apache.commons.lang3.exception.ContextedExceptionTest, org.apache.commons.lang3.exception.ContextedExceptionTest, org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest, org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest, org.apache.commons.lang3.exception.DefaultExceptionContextTest, org.apache.commons.lang3.exception.DefaultExceptionContextTest, org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.math.FractionTest, org.apache.commons.lang3.math.FractionTest, org.apache.commons.lang3.math.IEEE754rUtilsTest, org.apache.commons.lang3.math.IEEE754rUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.mutable.MutableBooleanTest, org.apache.commons.lang3.mutable.MutableBooleanTest, org.apache.commons.lang3.mutable.MutableByteTest, org.apache.commons.lang3.mutable.MutableByteTest, org.apache.commons.lang3.mutable.MutableDoubleTest, org.apache.commons.lang3.mutable.MutableDoubleTest, org.apache.commons.lang3.mutable.MutableFloatTest, org.apache.commons.lang3.mutable.MutableFloatTest, org.apache.commons.lang3.mutable.MutableIntTest, org.apache.commons.lang3.mutable.MutableIntTest, org.apache.commons.lang3.mutable.MutableLongTest, org.apache.commons.lang3.mutable.MutableLongTest, org.apache.commons.lang3.mutable.MutableObjectTest, org.apache.commons.lang3.mutable.MutableObjectTest, org.apache.commons.lang3.mutable.MutableShortTest, org.apache.commons.lang3.mutable.MutableShortTest, org.apache.commons.lang3.reflect.ConstructorUtilsTest, org.apache.commons.lang3.reflect.ConstructorUtilsTest, org.apache.commons.lang3.reflect.FieldUtilsTest, org.apache.commons.lang3.reflect.FieldUtilsTest, org.apache.commons.lang3.reflect.MethodUtilsTest, org.apache.commons.lang3.reflect.MethodUtilsTest, org.apache.commons.lang3.reflect.TypeUtilsTest, org.apache.commons.lang3.reflect.TypeUtilsTest, org.apache.commons.lang3.text.CompositeFormatTest, org.apache.commons.lang3.text.CompositeFormatTest, org.apache.commons.lang3.text.ExtendedMessageFormatTest, org.apache.commons.lang3.text.ExtendedMessageFormatTest, org.apache.commons.lang3.text.FormattableUtilsTest, org.apache.commons.lang3.text.FormattableUtilsTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderTest, org.apache.commons.lang3.text.StrBuilderTest, org.apache.commons.lang3.text.StrLookupTest, org.apache.commons.lang3.text.StrLookupTest, org.apache.commons.lang3.text.StrMatcherTest, org.apache.commons.lang3.text.StrMatcherTest, org.apache.commons.lang3.text.StrSubstitutorTest, org.apache.commons.lang3.text.StrSubstitutorTest, org.apache.commons.lang3.text.StrTokenizerTest, org.apache.commons.lang3.text.StrTokenizerTest, org.apache.commons.lang3.text.WordUtilsTest, org.apache.commons.lang3.text.WordUtilsTest, org.apache.commons.lang3.text.translate.EntityArraysTest, org.apache.commons.lang3.text.translate.EntityArraysTest, org.apache.commons.lang3.text.translate.LookupTranslatorTest, org.apache.commons.lang3.text.translate.LookupTranslatorTest, org.apache.commons.lang3.text.translate.NumericEntityEscaperTest, org.apache.commons.lang3.text.translate.NumericEntityEscaperTest, org.apache.commons.lang3.text.translate.NumericEntityUnescaperTest, org.apache.commons.lang3.text.translate.NumericEntityUnescaperTest, org.apache.commons.lang3.text.translate.OctalUnescaperTest, org.apache.commons.lang3.text.translate.OctalUnescaperTest, org.apache.commons.lang3.text.translate.UnicodeEscaperTest, org.apache.commons.lang3.text.translate.UnicodeEscaperTest, org.apache.commons.lang3.text.translate.UnicodeUnescaperTest, org.apache.commons.lang3.text.translate.UnicodeUnescaperTest, org.apache.commons.lang3.time.DateFormatUtilsTest, org.apache.commons.lang3.time.DateFormatUtilsTest, org.apache.commons.lang3.time.DateUtilsFragmentTest, org.apache.commons.lang3.time.DateUtilsFragmentTest, org.apache.commons.lang3.time.DateUtilsRoundingTest, org.apache.commons.lang3.time.DateUtilsRoundingTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DurationFormatUtilsTest, org.apache.commons.lang3.time.DurationFormatUtilsTest, org.apache.commons.lang3.time.FastDateFormatTest, org.apache.commons.lang3.time.FastDateFormatTest, org.apache.commons.lang3.time.FastDateFormat_ParserTest, org.apache.commons.lang3.time.FastDateFormat_ParserTest, org.apache.commons.lang3.time.FastDateFormat_PrinterTest, org.apache.commons.lang3.time.FastDateFormat_PrinterTest, org.apache.commons.lang3.time.FastDateParserTest, org.apache.commons.lang3.time.FastDateParserTest, org.apache.commons.lang3.time.FastDatePrinterTest, org.apache.commons.lang3.time.FastDatePrinterTest, org.apache.commons.lang3.time.StopWatchTest, org.apache.commons.lang3.time.StopWatchTest, org.apache.commons.lang3.tuple.ImmutablePairTest, org.apache.commons.lang3.tuple.ImmutablePairTest, org.apache.commons.lang3.tuple.ImmutableTripleTest, org.apache.commons.lang3.tuple.ImmutableTripleTest, org.apache.commons.lang3.tuple.MutablePairTest, org.apache.commons.lang3.tuple.MutablePairTest, org.apache.commons.lang3.tuple.MutableTripleTest, org.apache.commons.lang3.tuple.MutableTripleTest, org.apache.commons.lang3.tuple.PairTest, org.apache.commons.lang3.tuple.PairTest, org.apache.commons.lang3.tuple.TripleTest, org.apache.commons.lang3.tuple.TripleTest], complianceLevel=6, outputFolder=., json=true}
19:06:15.802 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Available processors (cores): 24
19:06:15.808 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Free memory: 435 MB
19:06:15.808 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Maximum memory: 3 GB
19:06:15.808 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Total memory available to JVM: 483 MB
19:06:15.808 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Java version: 1.8.0_181
19:06:15.809 [main] INFO  fr.inria.lille.repair.nopol.NoPol - JAVA_HOME: /usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/
19:06:15.810 [main] INFO  fr.inria.lille.repair.nopol.NoPol - PATH: /usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/:/usr/lib/oar/oardodo:/usr/lib/oar/oardodo:/usr/local/bin:/usr/bin:/bin:/usr/games
19:06:38.576 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #1
19:06:38.577 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang3.time.FastDatePrinter:541 which is executed by 10 tests
1615201905
19:06:38.945 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #2
19:06:38.945 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang3.time.FastDatePrinter:540 which is executed by 10 tests
1615201905
19:06:39.190 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #3
19:06:39.191 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang3.time.DateUtils:1706 which is executed by 28 tests
1745874308
19:06:39.325 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #4
19:06:39.325 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang3.time.DateUtils:1690 which is executed by 8 tests
1745874308
19:06:39.457 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
19:06:39.607 [pool-4-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (88 ms)
<> Total tests run: 416
<> Ignored tests: 0
<> Failed tests: 0

19:06:39.609 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
19:06:39.609 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #5
19:06:39.609 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang3.time.DateUtils:1689 which is executed by 8 tests
1745874308
19:06:39.743 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #6
19:06:39.744 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang3.time.DateUtils:1693 which is executed by 8 tests
1745874308
19:06:39.881 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
19:06:39.944 [pool-6-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (49 ms)
<> Total tests run: 416
<> Ignored tests: 0
<> Failed tests: 0

19:06:39.945 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
19:06:39.945 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #7
19:06:39.946 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang3.time.DateUtils:1692 which is executed by 8 tests
1745874308
19:06:40.049 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
19:06:40.138 [pool-8-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (74 ms)
<> Total tests run: 416
<> Ignored tests: 0
<> Failed tests: 0

19:06:40.139 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
19:06:40.139 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #8
19:06:40.139 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang3.time.DateUtils:1709 which is executed by 36 tests
1745874308
19:06:40.255 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #9
19:06:40.255 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang3.time.DateUtils:1712 which is executed by 42 tests
1745874308
19:06:40.371 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #10
19:06:40.371 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang3.time.DateUtils:1716 which is executed by 46 tests
1745874308
19:06:40.472 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
19:06:40.558 [pool-10-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (72 ms)
<> Total tests run: 832
<> Ignored tests: 0
<> Failed tests: 0

19:06:40.559 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
19:06:40.559 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #11
19:06:40.559 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang3.time.DateUtils:1715 which is executed by 46 tests
1745874308
19:06:40.658 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #12
19:06:40.658 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang3.time.DateUtils:1720 which is executed by 48 tests
1745874308
19:06:40.756 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #13
19:06:40.757 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang3.time.DateUtils:1698 which is executed by 50 tests
1745874308
19:06:40.862 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #14
19:06:40.862 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang3.time.DateUtils:1687 which is executed by 50 tests
1745874308
19:06:40.960 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #15
19:06:40.960 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang3.time.DateUtils:1684 which is executed by 50 tests
1745874308
19:06:41.089 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
19:06:41.167 [pool-12-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (67 ms)
<> Total tests run: 832
<> Ignored tests: 0
<> Failed tests: 0

19:06:41.168 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
19:06:41.168 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #16
19:06:41.168 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang3.time.DateUtils:1682 which is executed by 50 tests
1745874308
19:06:41.288 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #17
19:06:41.288 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang3.time.DateUtils:1678 which is executed by 51 tests
1745874308
19:06:41.383 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #18
19:06:41.383 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang3.time.DateFormatUtils:309 which is executed by 4 tests
1234436685
19:06:41.453 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #19
19:06:41.454 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang3.time.DateFormatUtils:297 which is executed by 4 tests
1234436685
19:06:41.523 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #20
19:06:41.523 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang3.time.FormatCache:76 which is executed by 14 tests
-1194929748
19:06:41.600 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.junit.ComparisonFailure: expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected(FastDatePrinterTest.java:286)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
org.junit.ComparisonFailure: expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected(FastDatePrinterTest.java:286)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
19:06:42.655 [pool-14-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (1047 ms)
<> Total tests run: 79
<> Ignored tests: 0
<> Failed tests: 2
~ testCalendarTimezoneRespected(org.apache.commons.lang3.time.FastDateFormat_PrinterTest)
[expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>]
org.junit.ComparisonFailure: expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected(FastDatePrinterTest.java:286)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
~ testCalendarTimezoneRespected(org.apache.commons.lang3.time.FastDatePrinterTest)
[expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>]
org.junit.ComparisonFailure: expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected(FastDatePrinterTest.java:286)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

java.lang.NullPointerException
    at java.util.concurrent.ConcurrentHashMap.get(ConcurrentHashMap.java:936)
    at java.text.DateFormatSymbols.initializeData(DateFormatSymbols.java:693)
    at java.text.DateFormatSymbols.<init>(DateFormatSymbols.java:145)
    at org.apache.commons.lang3.time.FastDatePrinter.parsePattern(FastDatePrinter.java:168)
    at org.apache.commons.lang3.time.FastDatePrinter.init(FastDatePrinter.java:148)
    at org.apache.commons.lang3.time.FastDatePrinter.<init>(FastDatePrinter.java:141)
19:06:43.713 [pool-15-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (9 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testCalendarTimezoneRespected(org.apache.commons.lang3.time.FastDateFormat_PrinterTest)
[null]
java.lang.NullPointerException    at java.util.concurrent.ConcurrentHashMap.get(ConcurrentHashMap.java:936)
    at java.text.DateFormatSymbols.initializeData(DateFormatSymbols.java:693)
    at java.text.DateFormatSymbols.<init>(DateFormatSymbols.java:145)
    at org.apache.commons.lang3.time.FastDatePrinter.parsePattern(FastDatePrinter.java:168)
    at org.apache.commons.lang3.time.FastDatePrinter.init(FastDatePrinter.java:148)
    at org.apache.commons.lang3.time.FastDatePrinter.<init>(FastDatePrinter.java:141)

java.lang.NullPointerException
    at java.util.concurrent.ConcurrentHashMap.get(ConcurrentHashMap.java:936)
    at java.text.DateFormatSymbols.initializeData(DateFormatSymbols.java:693)
    at java.text.DateFormatSymbols.<init>(DateFormatSymbols.java:145)
    at org.apache.commons.lang3.time.FastDatePrinter.parsePattern(FastDatePrinter.java:168)
    at org.apache.commons.lang3.time.FastDatePrinter.init(FastDatePrinter.java:148)
    at org.apache.commons.lang3.time.FastDatePrinter.<init>(FastDatePrinter.java:141)
19:06:43.715 [pool-16-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testCalendarTimezoneRespected(org.apache.commons.lang3.time.FastDatePrinterTest)
[null]
java.lang.NullPointerException    at java.util.concurrent.ConcurrentHashMap.get(ConcurrentHashMap.java:936)
    at java.text.DateFormatSymbols.initializeData(DateFormatSymbols.java:693)
    at java.text.DateFormatSymbols.<init>(DateFormatSymbols.java:145)
    at org.apache.commons.lang3.time.FastDatePrinter.parsePattern(FastDatePrinter.java:168)
    at org.apache.commons.lang3.time.FastDatePrinter.init(FastDatePrinter.java:148)
    at org.apache.commons.lang3.time.FastDatePrinter.<init>(FastDatePrinter.java:141)

org.junit.ComparisonFailure: expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected(FastDatePrinterTest.java:286)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
19:06:43.727 [pool-17-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (11 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testCalendarTimezoneRespected(org.apache.commons.lang3.time.FastDateFormat_PrinterTest)
[expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>]
org.junit.ComparisonFailure: expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected(FastDatePrinterTest.java:286)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected(FastDatePrinterTest.java:286)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
19:06:43.731 [pool-18-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testCalendarTimezoneRespected(org.apache.commons.lang3.time.FastDatePrinterTest)
[expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>]
org.junit.ComparisonFailure: expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected(FastDatePrinterTest.java:286)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

19:06:43.732 [pool-13-thread-1] DEBUG tests.output - Failing tests with false: 
[testCalendarTimezoneRespected(org.apache.commons.lang3.time.FastDateFormat_PrinterTest): null, testCalendarTimezoneRespected(org.apache.commons.lang3.time.FastDatePrinterTest): null]
19:06:43.732 [pool-13-thread-1] DEBUG tests.output - Failing tests with true: 
[testCalendarTimezoneRespected(org.apache.commons.lang3.time.FastDateFormat_PrinterTest): expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>, testCalendarTimezoneRespected(org.apache.commons.lang3.time.FastDatePrinterTest): expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>]
19:06:43.732 [pool-13-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.lang3.time.FormatCache:76.
19:06:43.733 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
org.junit.ComparisonFailure: expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected(FastDatePrinterTest.java:286)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
org.junit.ComparisonFailure: expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected(FastDatePrinterTest.java:286)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
19:06:44.650 [pool-20-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (910 ms)
<> Total tests run: 79
<> Ignored tests: 0
<> Failed tests: 2
~ testCalendarTimezoneRespected(org.apache.commons.lang3.time.FastDateFormat_PrinterTest)
[expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>]
org.junit.ComparisonFailure: expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected(FastDatePrinterTest.java:286)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
~ testCalendarTimezoneRespected(org.apache.commons.lang3.time.FastDatePrinterTest)
[expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>]
org.junit.ComparisonFailure: expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected(FastDatePrinterTest.java:286)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

java.lang.NullPointerException
    at java.util.concurrent.ConcurrentHashMap.get(ConcurrentHashMap.java:936)
    at java.text.DateFormatSymbols.initializeData(DateFormatSymbols.java:693)
    at java.text.DateFormatSymbols.<init>(DateFormatSymbols.java:145)
    at org.apache.commons.lang3.time.FastDatePrinter.parsePattern(FastDatePrinter.java:168)
    at org.apache.commons.lang3.time.FastDatePrinter.init(FastDatePrinter.java:148)
    at org.apache.commons.lang3.time.FastDatePrinter.<init>(FastDatePrinter.java:141)
19:06:44.969 [pool-21-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (5 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testCalendarTimezoneRespected(org.apache.commons.lang3.time.FastDateFormat_PrinterTest)
[null]
java.lang.NullPointerException    at java.util.concurrent.ConcurrentHashMap.get(ConcurrentHashMap.java:936)
    at java.text.DateFormatSymbols.initializeData(DateFormatSymbols.java:693)
    at java.text.DateFormatSymbols.<init>(DateFormatSymbols.java:145)
    at org.apache.commons.lang3.time.FastDatePrinter.parsePattern(FastDatePrinter.java:168)
    at org.apache.commons.lang3.time.FastDatePrinter.init(FastDatePrinter.java:148)
    at org.apache.commons.lang3.time.FastDatePrinter.<init>(FastDatePrinter.java:141)

java.lang.NullPointerException
    at java.util.concurrent.ConcurrentHashMap.get(ConcurrentHashMap.java:936)
    at java.text.DateFormatSymbols.initializeData(DateFormatSymbols.java:693)
    at java.text.DateFormatSymbols.<init>(DateFormatSymbols.java:145)
    at org.apache.commons.lang3.time.FastDatePrinter.parsePattern(FastDatePrinter.java:168)
    at org.apache.commons.lang3.time.FastDatePrinter.init(FastDatePrinter.java:148)
    at org.apache.commons.lang3.time.FastDatePrinter.<init>(FastDatePrinter.java:141)
19:06:44.971 [pool-22-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testCalendarTimezoneRespected(org.apache.commons.lang3.time.FastDatePrinterTest)
[null]
java.lang.NullPointerException    at java.util.concurrent.ConcurrentHashMap.get(ConcurrentHashMap.java:936)
    at java.text.DateFormatSymbols.initializeData(DateFormatSymbols.java:693)
    at java.text.DateFormatSymbols.<init>(DateFormatSymbols.java:145)
    at org.apache.commons.lang3.time.FastDatePrinter.parsePattern(FastDatePrinter.java:168)
    at org.apache.commons.lang3.time.FastDatePrinter.init(FastDatePrinter.java:148)
    at org.apache.commons.lang3.time.FastDatePrinter.<init>(FastDatePrinter.java:141)

org.junit.ComparisonFailure: expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected(FastDatePrinterTest.java:286)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
19:06:44.982 [pool-23-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (9 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testCalendarTimezoneRespected(org.apache.commons.lang3.time.FastDateFormat_PrinterTest)
[expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>]
org.junit.ComparisonFailure: expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected(FastDatePrinterTest.java:286)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected(FastDatePrinterTest.java:286)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
19:06:44.983 [pool-24-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testCalendarTimezoneRespected(org.apache.commons.lang3.time.FastDatePrinterTest)
[expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>]
org.junit.ComparisonFailure: expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected(FastDatePrinterTest.java:286)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

19:06:44.984 [pool-19-thread-1] DEBUG tests.output - Failing tests with false: 
[testCalendarTimezoneRespected(org.apache.commons.lang3.time.FastDateFormat_PrinterTest): null, testCalendarTimezoneRespected(org.apache.commons.lang3.time.FastDatePrinterTest): null]
19:06:44.984 [pool-19-thread-1] DEBUG tests.output - Failing tests with true: 
[testCalendarTimezoneRespected(org.apache.commons.lang3.time.FastDateFormat_PrinterTest): expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>, testCalendarTimezoneRespected(org.apache.commons.lang3.time.FastDatePrinterTest): expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>]
19:06:44.984 [pool-19-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.lang3.time.FormatCache:76.
19:06:44.984 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #21
19:06:44.985 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang3.time.DateFormatUtils:388 which is executed by 8 tests
1234436685
19:06:45.068 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #22
19:06:45.069 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang3.time.DateFormatUtils:387 which is executed by 8 tests
1234436685
19:06:45.139 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #23
19:06:45.139 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang3.time.DurationFormatUtils:82 which is executed by 3 tests
-1439815513
19:06:45.229 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #24
19:06:45.229 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang3.time.DateUtils:1663 which is executed by 25 tests
1745874308
19:06:45.349 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
19:06:45.374 [pool-26-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (19 ms)
<> Total tests run: 416
<> Ignored tests: 0
<> Failed tests: 0

19:06:45.375 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
19:06:45.375 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
19:06:45.400 [pool-28-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (20 ms)
<> Total tests run: 416
<> Ignored tests: 0
<> Failed tests: 0

19:06:45.401 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
19:06:45.401 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #25
19:06:45.401 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang3.time.DateUtils:1662 which is executed by 25 tests
1745874308
19:06:45.517 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #26
19:06:45.518 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang3.time.DateUtils:1661 which is executed by 25 tests
1745874308
19:06:45.612 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #27
19:06:45.612 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang3.time.DateUtils:1658 which is executed by 26 tests
1745874308
19:06:45.706 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #28
19:06:45.706 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang3.time.FastDateFormat:582 which is executed by 11 tests
-1899260190
19:06:45.784 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #29
19:06:45.784 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang3.time.FastDatePrinter:543 which is executed by 44 tests
1615201905
19:06:45.888 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #30
19:06:45.889 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang3.time.FastDatePrinter:539 which is executed by 44 tests
1615201905
19:06:45.994 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #31
19:06:45.994 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang3.time.FastDatePrinter:481 which is executed by 44 tests
1615201905
19:06:46.096 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #32
19:06:46.096 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang3.time.FastDatePrinter:245 which is executed by 22 tests
1615201905
19:06:46.192 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.junit.ComparisonFailure: expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected(FastDatePrinterTest.java:286)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
org.junit.ComparisonFailure: expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected(FastDatePrinterTest.java:286)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
19:06:46.912 [pool-30-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (713 ms)
<> Total tests run: 79
<> Ignored tests: 0
<> Failed tests: 2
~ testCalendarTimezoneRespected(org.apache.commons.lang3.time.FastDateFormat_PrinterTest)
[expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>]
org.junit.ComparisonFailure: expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected(FastDatePrinterTest.java:286)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
~ testCalendarTimezoneRespected(org.apache.commons.lang3.time.FastDatePrinterTest)
[expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>]
org.junit.ComparisonFailure: expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected(FastDatePrinterTest.java:286)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected(FastDatePrinterTest.java:286)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
19:06:47.860 [pool-31-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (12 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testCalendarTimezoneRespected(org.apache.commons.lang3.time.FastDateFormat_PrinterTest)
[expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>]
org.junit.ComparisonFailure: expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected(FastDatePrinterTest.java:286)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected(FastDatePrinterTest.java:286)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
19:06:47.861 [pool-32-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testCalendarTimezoneRespected(org.apache.commons.lang3.time.FastDatePrinterTest)
[expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>]
org.junit.ComparisonFailure: expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected(FastDatePrinterTest.java:286)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected(FastDatePrinterTest.java:286)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
19:06:47.863 [pool-33-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testCalendarTimezoneRespected(org.apache.commons.lang3.time.FastDateFormat_PrinterTest)
[expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>]
org.junit.ComparisonFailure: expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected(FastDatePrinterTest.java:286)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected(FastDatePrinterTest.java:286)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
19:06:47.864 [pool-34-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testCalendarTimezoneRespected(org.apache.commons.lang3.time.FastDatePrinterTest)
[expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>]
org.junit.ComparisonFailure: expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected(FastDatePrinterTest.java:286)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

19:06:47.865 [pool-29-thread-1] DEBUG tests.output - Failing tests with false: 
[testCalendarTimezoneRespected(org.apache.commons.lang3.time.FastDateFormat_PrinterTest): expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>, testCalendarTimezoneRespected(org.apache.commons.lang3.time.FastDatePrinterTest): expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>]
19:06:47.865 [pool-29-thread-1] DEBUG tests.output - Failing tests with true: 
[testCalendarTimezoneRespected(org.apache.commons.lang3.time.FastDateFormat_PrinterTest): expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>, testCalendarTimezoneRespected(org.apache.commons.lang3.time.FastDatePrinterTest): expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>]
19:06:47.865 [pool-29-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.lang3.time.FastDatePrinter:245.
19:06:47.865 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #33
19:06:47.865 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang3.time.FastDatePrinter:244 which is executed by 22 tests
1615201905
19:06:47.961 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.junit.ComparisonFailure: expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected(FastDatePrinterTest.java:286)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
org.junit.ComparisonFailure: expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected(FastDatePrinterTest.java:286)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
19:06:48.678 [pool-36-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (710 ms)
<> Total tests run: 79
<> Ignored tests: 0
<> Failed tests: 2
~ testCalendarTimezoneRespected(org.apache.commons.lang3.time.FastDateFormat_PrinterTest)
[expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>]
org.junit.ComparisonFailure: expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected(FastDatePrinterTest.java:286)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
~ testCalendarTimezoneRespected(org.apache.commons.lang3.time.FastDatePrinterTest)
[expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>]
org.junit.ComparisonFailure: expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected(FastDatePrinterTest.java:286)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

19:06:49.342 [pool-35-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
FastDatePrinter.java:190: error: variable rule might not have been initialized
            rules.add(rule);
                      ^
19:06:49.729 [pool-35-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public class FastDatePrinter implements java.io.Serializable , org.apache.commons.lang3.time.DatePrinter {
    private static final long serialVersionUID = 1L;

    public static final int FULL = java.text.DateFormat.FULL;

    public static final int LONG = java.text.DateFormat.LONG;

    public static final int MEDIUM = java.text.DateFormat.MEDIUM;

    public static final int SHORT = java.text.DateFormat.SHORT;

    private final java.lang.String mPattern;

    private final java.util.TimeZone mTimeZone;

    private final java.util.Locale mLocale;

    private transient org.apache.commons.lang3.time.FastDatePrinter.Rule[] mRules;

    private transient int mMaxLengthEstimate;

    protected FastDatePrinter(java.lang.String pattern, java.util.TimeZone timeZone, java.util.Locale locale) {
        mPattern = pattern;
        mTimeZone = timeZone;
        mLocale = locale;
        init();
    }

    private void init() {
        java.util.List<org.apache.commons.lang3.time.FastDatePrinter.Rule> rulesList = parsePattern();
        mRules = rulesList.toArray(new org.apache.commons.lang3.time.FastDatePrinter.Rule[rulesList.size()]);
        int len = 0;
        for (int i = mRules.length; (--i) >= 0;) {
            len += mRules[i].estimateLength();
        }
        mMaxLengthEstimate = len;
    }

    protected java.util.List<org.apache.commons.lang3.time.FastDatePrinter.Rule> parsePattern() {
        java.text.DateFormatSymbols symbols = new java.text.DateFormatSymbols(mLocale);
        java.util.List<org.apache.commons.lang3.time.FastDatePrinter.Rule> rules = new java.util.ArrayList<org.apache.commons.lang3.time.FastDatePrinter.Rule>();
        java.lang.String[] ERAs = symbols.getEras();
        java.lang.String[] months = symbols.getMonths();
        java.lang.String[] shortMonths = symbols.getShortMonths();
        java.lang.String[] weekdays = symbols.getWeekdays();
        java.lang.String[] shortWeekdays = symbols.getShortWeekdays();
        java.lang.String[] AmPmStrings = symbols.getAmPmStrings();
        int length = mPattern.length();
        int[] indexRef = new int[1];
        for (int i = 0; i < length; i++) {
            indexRef[0] = i;
            java.lang.String token = parseToken(mPattern, indexRef);
            i = indexRef[0];
            int tokenLen = token.length();
            if (tokenLen == 0) {
                break;
            }
            org.apache.commons.lang3.time.FastDatePrinter.Rule rule;
            char c = token.charAt(0);
            switch (c) {
                case 'G' :
                    rule = new org.apache.commons.lang3.time.FastDatePrinter.TextField(java.util.Calendar.ERA, ERAs);
                    break;
                case 'y' :
                    if (tokenLen == 2) {
                        rule = org.apache.commons.lang3.time.FastDatePrinter.TwoDigitYearField.INSTANCE;
                    }else {
                        rule = selectNumberRule(java.util.Calendar.YEAR, (tokenLen < 4 ? 4 : tokenLen));
                    }
                    break;
                case 'M' :
                    if (tokenLen >= 4) {
                        rule = new org.apache.commons.lang3.time.FastDatePrinter.TextField(java.util.Calendar.MONTH, months);
                    }else
                        if (tokenLen == 3) {
                            rule = new org.apache.commons.lang3.time.FastDatePrinter.TextField(java.util.Calendar.MONTH, shortMonths);
                        }else
                            if (tokenLen == 2) {
                                rule = org.apache.commons.lang3.time.FastDatePrinter.TwoDigitMonthField.INSTANCE;
                            }else {
                                rule = org.apache.commons.lang3.time.FastDatePrinter.UnpaddedMonthField.INSTANCE;
                            }


                    break;
                case 'd' :
                    rule = selectNumberRule(java.util.Calendar.DAY_OF_MONTH, tokenLen);
                    break;
                case 'h' :
                    rule = new org.apache.commons.lang3.time.FastDatePrinter.TwelveHourField(selectNumberRule(java.util.Calendar.HOUR, tokenLen));
                    break;
                case 'H' :
                    rule = selectNumberRule(java.util.Calendar.HOUR_OF_DAY, tokenLen);
                    break;
                case 'm' :
                    rule = selectNumberRule(java.util.Calendar.MINUTE, tokenLen);
                    break;
                case 's' :
                    rule = selectNumberRule(java.util.Calendar.SECOND, tokenLen);
                    break;
                case 'S' :
                    rule = selectNumberRule(java.util.Calendar.MILLISECOND, tokenLen);
                    break;
                case 'E' :
                    rule = new org.apache.commons.lang3.time.FastDatePrinter.TextField(java.util.Calendar.DAY_OF_WEEK, (tokenLen < 4 ? shortWeekdays : weekdays));
                    break;
                case 'D' :
                    rule = selectNumberRule(java.util.Calendar.DAY_OF_YEAR, tokenLen);
                    break;
                case 'F' :
                    rule = selectNumberRule(java.util.Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);
                    break;
                case 'w' :
                    boolean spoonDefaultValue = false;
                    try {
                        spoonDefaultValue = true;
                    } catch (java.lang.Exception __NopolProcessorException) {
                    }
                    boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                    if (fr.inria.lille.commons.trace.RuntimeValues.instance(3).isEnabled()) {
                        fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectionStarts();
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("org.apache.commons.lang3.time.FastDatePrinter.MEDIUM",org.apache.commons.lang3.time.FastDatePrinter.MEDIUM);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("org.apache.commons.lang3.time.FastDatePrinter.this.mMaxLengthEstimate",org.apache.commons.lang3.time.FastDatePrinter.this.mMaxLengthEstimate);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("c",c);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("months",months);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("org.apache.commons.lang3.time.FastDatePrinter.cTimeZoneDisplayCache",org.apache.commons.lang3.time.FastDatePrinter.cTimeZoneDisplayCache);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("shortMonths",shortMonths);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("weekdays",weekdays);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("shortWeekdays",shortWeekdays);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("length",length);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("tokenLen",tokenLen);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("rules",rules);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("org.apache.commons.lang3.time.FastDatePrinter.this.mTimeZone",org.apache.commons.lang3.time.FastDatePrinter.this.mTimeZone);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("org.apache.commons.lang3.time.FastDatePrinter.SHORT",org.apache.commons.lang3.time.FastDatePrinter.SHORT);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("symbols",symbols);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("org.apache.commons.lang3.time.FastDatePrinter.FULL",org.apache.commons.lang3.time.FastDatePrinter.FULL);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("org.apache.commons.lang3.time.FastDatePrinter.this.mPattern",org.apache.commons.lang3.time.FastDatePrinter.this.mPattern);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("org.apache.commons.lang3.time.FastDatePrinter.this.mLocale",org.apache.commons.lang3.time.FastDatePrinter.this.mLocale);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("token",token);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("AmPmStrings",AmPmStrings);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("org.apache.commons.lang3.time.FastDatePrinter.this.mRules",org.apache.commons.lang3.time.FastDatePrinter.this.mRules);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("indexRef",indexRef);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("ERAs",ERAs);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("org.apache.commons.lang3.time.FastDatePrinter.LONG",org.apache.commons.lang3.time.FastDatePrinter.LONG);} catch (Exception ex1) {ex1.printStackTrace();};
                        fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectOutput(runtimeAngelicValue);
                        fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectionEnds();
                    }
                    if (runtimeAngelicValue)
                        rule = selectNumberRule(java.util.Calendar.WEEK_OF_YEAR, tokenLen);

                    break;
                case 'W' :
                    rule = selectNumberRule(java.util.Calendar.WEEK_OF_MONTH, tokenLen);
                    break;
                case 'a' :
                    rule = new org.apache.commons.lang3.time.FastDatePrinter.TextField(java.util.Calendar.AM_PM, AmPmStrings);
                    break;
                case 'k' :
                    rule = new org.apache.commons.lang3.time.FastDatePrinter.TwentyFourHourField(selectNumberRule(java.util.Calendar.HOUR_OF_DAY, tokenLen));
                    break;
                case 'K' :
                    rule = selectNumberRule(java.util.Calendar.HOUR, tokenLen);
                    break;
                case 'z' :
                    if (tokenLen >= 4) {
                        rule = new org.apache.commons.lang3.time.FastDatePrinter.TimeZoneNameRule(mTimeZone, mLocale, java.util.TimeZone.LONG);
                    }else {
                        rule = new org.apache.commons.lang3.time.FastDatePrinter.TimeZoneNameRule(mTimeZone, mLocale, java.util.TimeZone.SHORT);
                    }
                    break;
                case 'Z' :
                    if (tokenLen == 1) {
                        rule = org.apache.commons.lang3.time.FastDatePrinter.TimeZoneNumberRule.INSTANCE_NO_COLON;
                    }else {
                        rule = org.apache.commons.lang3.time.FastDatePrinter.TimeZoneNumberRule.INSTANCE_COLON;
                    }
                    break;
                case '\'' :
                    java.lang.String sub = token.substring(1);
                    if ((sub.length()) == 1) {
                        rule = new org.apache.commons.lang3.time.FastDatePrinter.CharacterLiteral(sub.charAt(0));
                    }else {
                        rule = new org.apache.commons.lang3.time.FastDatePrinter.StringLiteral(sub);
                    }
                    break;
                default :
                    throw new java.lang.IllegalArgumentException(("Illegal pattern component: " + token));
            }
            rules.add(rule);
        }
        return rules;
    }

    protected java.lang.String parseToken(java.lang.String pattern, int[] indexRef) {
        java.lang.StringBuilder buf = new java.lang.StringBuilder();
        int i = indexRef[0];
        int length = pattern.length();
        char c = pattern.charAt(i);
        if (((c >= 'A') && (c <= 'Z')) || ((c >= 'a') && (c <= 'z'))) {
            buf.append(c);
            while ((i + 1) < length) {
                char peek = pattern.charAt((i + 1));
                if (peek == c) {
                    buf.append(c);
                    i++;
                }else {
                    break;
                }
            } 
        }else {
            buf.append('\'');
            boolean inLiteral = false;
            for (; i < length; i++) {
                c = pattern.charAt(i);
                if (c == '\'') {
                    if (((i + 1) < length) && ((pattern.charAt((i + 1))) == '\'')) {
                        i++;
                        buf.append(c);
                    }else {
                        inLiteral = !inLiteral;
                    }
                }else
                    if ((!inLiteral) && (((c >= 'A') && (c <= 'Z')) || ((c >= 'a') && (c <= 'z')))) {
                        i--;
                        break;
                    }else {
                        buf.append(c);
                    }

            }
        }
        indexRef[0] = i;
        return buf.toString();
    }

    protected org.apache.commons.lang3.time.FastDatePrinter.NumberRule selectNumberRule(int field, int padding) {
        switch (padding) {
            case 1 :
                return new org.apache.commons.lang3.time.FastDatePrinter.UnpaddedNumberField(field);
            case 2 :
                return new org.apache.commons.lang3.time.FastDatePrinter.TwoDigitNumberField(field);
            default :
                return new org.apache.commons.lang3.time.FastDatePrinter.PaddedNumberField(field, padding);
        }
    }

    @java.lang.Override
    public java.lang.StringBuffer format(java.lang.Object obj, java.lang.StringBuffer toAppendTo, java.text.FieldPosition pos) {
        if (obj instanceof java.util.Date) {
            return format(((java.util.Date) (obj)), toAppendTo);
        }else
            if (obj instanceof java.util.Calendar) {
                return format(((java.util.Calendar) (obj)), toAppendTo);
            }else
                if (obj instanceof java.lang.Long) {
                    return format(((java.lang.Long) (obj)).longValue(), toAppendTo);
                }else {
                    throw new java.lang.IllegalArgumentException(("Unknown class: " + (obj == null ? "<null>" : obj.getClass().getName())));
                }


    }

    @java.lang.Override
    public java.lang.String format(long millis) {
        return format(new java.util.Date(millis));
    }

    @java.lang.Override
    public java.lang.String format(java.util.Date date) {
        java.util.Calendar c = new java.util.GregorianCalendar(mTimeZone, mLocale);
        c.setTime(date);
        return applyRules(c, new java.lang.StringBuffer(mMaxLengthEstimate)).toString();
    }

    @java.lang.Override
    public java.lang.String format(java.util.Calendar calendar) {
        return format(calendar, new java.lang.StringBuffer(mMaxLengthEstimate)).toString();
    }

    @java.lang.Override
    public java.lang.StringBuffer format(long millis, java.lang.StringBuffer buf) {
        return format(new java.util.Date(millis), buf);
    }

    @java.lang.Override
    public java.lang.StringBuffer format(java.util.Date date, java.lang.StringBuffer buf) {
        java.util.Calendar c = new java.util.GregorianCalendar(mTimeZone, mLocale);
        c.setTime(date);
        return applyRules(c, buf);
    }

    @java.lang.Override
    public java.lang.StringBuffer format(java.util.Calendar calendar, java.lang.StringBuffer buf) {
        return applyRules(calendar, buf);
    }

    protected java.lang.StringBuffer applyRules(java.util.Calendar calendar, java.lang.StringBuffer buf) {
        for (org.apache.commons.lang3.time.FastDatePrinter.Rule rule : mRules) {
            rule.appendTo(buf, calendar);
        }
        return buf;
    }

    @java.lang.Override
    public java.lang.String getPattern() {
        return mPattern;
    }

    @java.lang.Override
    public java.util.TimeZone getTimeZone() {
        return mTimeZone;
    }

    @java.lang.Override
    public java.util.Locale getLocale() {
        return mLocale;
    }

    public int getMaxLengthEstimate() {
        return mMaxLengthEstimate;
    }

    @java.lang.Override
    public boolean equals(java.lang.Object obj) {
        if ((obj instanceof org.apache.commons.lang3.time.FastDatePrinter) == false) {
            return false;
        }
        org.apache.commons.lang3.time.FastDatePrinter other = ((org.apache.commons.lang3.time.FastDatePrinter) (obj));
        return ((mPattern.equals(other.mPattern)) && (mTimeZone.equals(other.mTimeZone))) && (mLocale.equals(other.mLocale));
    }

    @java.lang.Override
    public int hashCode() {
        return (mPattern.hashCode()) + (13 * ((mTimeZone.hashCode()) + (13 * (mLocale.hashCode()))));
    }

    @java.lang.Override
    public java.lang.String toString() {
        return ((((("FastDatePrinter[" + (mPattern)) + ",") + (mLocale)) + ",") + (mTimeZone.getID())) + "]";
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
        in.defaultReadObject();
        init();
    }

    private interface Rule {
        int estimateLength();

        void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar);
    }

    private interface NumberRule extends org.apache.commons.lang3.time.FastDatePrinter.Rule {
        void appendTo(java.lang.StringBuffer buffer, int value);
    }

    private static class CharacterLiteral implements org.apache.commons.lang3.time.FastDatePrinter.Rule {
        private final char mValue;

        CharacterLiteral(char value) {
            mValue = value;
        }

        @java.lang.Override
        public int estimateLength() {
            return 1;
        }

        @java.lang.Override
        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            buffer.append(mValue);
        }
    }

    private static class StringLiteral implements org.apache.commons.lang3.time.FastDatePrinter.Rule {
        private final java.lang.String mValue;

        StringLiteral(java.lang.String value) {
            mValue = value;
        }

        @java.lang.Override
        public int estimateLength() {
            return mValue.length();
        }

        @java.lang.Override
        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            buffer.append(mValue);
        }
    }

    private static class TextField implements org.apache.commons.lang3.time.FastDatePrinter.Rule {
        private final int mField;

        private final java.lang.String[] mValues;

        TextField(int field, java.lang.String[] values) {
            mField = field;
            mValues = values;
        }

        @java.lang.Override
        public int estimateLength() {
            int max = 0;
            for (int i = mValues.length; (--i) >= 0;) {
                int len = mValues[i].length();
                if (len > max) {
                    max = len;
                }
            }
            return max;
        }

        @java.lang.Override
        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            buffer.append(mValues[calendar.get(mField)]);
        }
    }

    private static class UnpaddedNumberField implements org.apache.commons.lang3.time.FastDatePrinter.NumberRule {
        private final int mField;

        UnpaddedNumberField(int field) {
            mField = field;
        }

        @java.lang.Override
        public int estimateLength() {
            return 4;
        }

        @java.lang.Override
        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            appendTo(buffer, calendar.get(mField));
        }

        @java.lang.Override
        public final void appendTo(java.lang.StringBuffer buffer, int value) {
            if (value < 10) {
                buffer.append(((char) (value + '0')));
            }else
                if (value < 100) {
                    buffer.append(((char) ((value / 10) + '0')));
                    buffer.append(((char) ((value % 10) + '0')));
                }else {
                    buffer.append(java.lang.Integer.toString(value));
                }

        }
    }

    private static class UnpaddedMonthField implements org.apache.commons.lang3.time.FastDatePrinter.NumberRule {
        static final org.apache.commons.lang3.time.FastDatePrinter.UnpaddedMonthField INSTANCE = new org.apache.commons.lang3.time.FastDatePrinter.UnpaddedMonthField();

        UnpaddedMonthField() {
            super();
        }

        @java.lang.Override
        public int estimateLength() {
            return 2;
        }

        @java.lang.Override
        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            appendTo(buffer, ((calendar.get(java.util.Calendar.MONTH)) + 1));
        }

        @java.lang.Override
        public final void appendTo(java.lang.StringBuffer buffer, int value) {
            if (value < 10) {
                buffer.append(((char) (value + '0')));
            }else {
                buffer.append(((char) ((value / 10) + '0')));
                buffer.append(((char) ((value % 10) + '0')));
            }
        }
    }

    private static class PaddedNumberField implements org.apache.commons.lang3.time.FastDatePrinter.NumberRule {
        private final int mField;

        private final int mSize;

        PaddedNumberField(int field, int size) {
            if (size < 3) {
                throw new java.lang.IllegalArgumentException();
            }
            mField = field;
            mSize = size;
        }

        @java.lang.Override
        public int estimateLength() {
            return 4;
        }

        @java.lang.Override
        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            appendTo(buffer, calendar.get(mField));
        }

        @java.lang.Override
        public final void appendTo(java.lang.StringBuffer buffer, int value) {
            if (value < 100) {
                for (int i = mSize; (--i) >= 2;) {
                    buffer.append('0');
                }
                buffer.append(((char) ((value / 10) + '0')));
                buffer.append(((char) ((value % 10) + '0')));
            }else {
                int digits;
                if (value < 1000) {
                    digits = 3;
                }else {
                    org.apache.commons.lang3.Validate.isTrue((value > (-1)), "Negative values should not be possible", value);
                    digits = java.lang.Integer.toString(value).length();
                }
                for (int i = mSize; (--i) >= digits;) {
                    buffer.append('0');
                }
                buffer.append(java.lang.Integer.toString(value));
            }
        }
    }

    private static class TwoDigitNumberField implements org.apache.commons.lang3.time.FastDatePrinter.NumberRule {
        private final int mField;

        TwoDigitNumberField(int field) {
            mField = field;
        }

        @java.lang.Override
        public int estimateLength() {
            return 2;
        }

        @java.lang.Override
        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            appendTo(buffer, calendar.get(mField));
        }

        @java.lang.Override
        public final void appendTo(java.lang.StringBuffer buffer, int value) {
            if (value < 100) {
                buffer.append(((char) ((value / 10) + '0')));
                buffer.append(((char) ((value % 10) + '0')));
            }else {
                buffer.append(java.lang.Integer.toString(value));
            }
        }
    }

    private static class TwoDigitYearField implements org.apache.commons.lang3.time.FastDatePrinter.NumberRule {
        static final org.apache.commons.lang3.time.FastDatePrinter.TwoDigitYearField INSTANCE = new org.apache.commons.lang3.time.FastDatePrinter.TwoDigitYearField();

        TwoDigitYearField() {
            super();
        }

        @java.lang.Override
        public int estimateLength() {
            return 2;
        }

        @java.lang.Override
        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            appendTo(buffer, ((calendar.get(java.util.Calendar.YEAR)) % 100));
        }

        @java.lang.Override
        public final void appendTo(java.lang.StringBuffer buffer, int value) {
            buffer.append(((char) ((value / 10) + '0')));
            buffer.append(((char) ((value % 10) + '0')));
        }
    }

    private static class TwoDigitMonthField implements org.apache.commons.lang3.time.FastDatePrinter.NumberRule {
        static final org.apache.commons.lang3.time.FastDatePrinter.TwoDigitMonthField INSTANCE = new org.apache.commons.lang3.time.FastDatePrinter.TwoDigitMonthField();

        TwoDigitMonthField() {
            super();
        }

        @java.lang.Override
        public int estimateLength() {
            return 2;
        }

        @java.lang.Override
        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            appendTo(buffer, ((calendar.get(java.util.Calendar.MONTH)) + 1));
        }

        @java.lang.Override
        public final void appendTo(java.lang.StringBuffer buffer, int value) {
            buffer.append(((char) ((value / 10) + '0')));
            buffer.append(((char) ((value % 10) + '0')));
        }
    }

    private static class TwelveHourField implements org.apache.commons.lang3.time.FastDatePrinter.NumberRule {
        private final org.apache.commons.lang3.time.FastDatePrinter.NumberRule mRule;

        TwelveHourField(org.apache.commons.lang3.time.FastDatePrinter.NumberRule rule) {
            mRule = rule;
        }

        @java.lang.Override
        public int estimateLength() {
            return mRule.estimateLength();
        }

        @java.lang.Override
        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            int value = calendar.get(java.util.Calendar.HOUR);
            if (value == 0) {
                value = (calendar.getLeastMaximum(java.util.Calendar.HOUR)) + 1;
            }
            mRule.appendTo(buffer, value);
        }

        @java.lang.Override
        public void appendTo(java.lang.StringBuffer buffer, int value) {
            mRule.appendTo(buffer, value);
        }
    }

    private static class TwentyFourHourField implements org.apache.commons.lang3.time.FastDatePrinter.NumberRule {
        private final org.apache.commons.lang3.time.FastDatePrinter.NumberRule mRule;

        TwentyFourHourField(org.apache.commons.lang3.time.FastDatePrinter.NumberRule rule) {
            mRule = rule;
        }

        @java.lang.Override
        public int estimateLength() {
            return mRule.estimateLength();
        }

        @java.lang.Override
        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            int value = calendar.get(java.util.Calendar.HOUR_OF_DAY);
            if (value == 0) {
                value = (calendar.getMaximum(java.util.Calendar.HOUR_OF_DAY)) + 1;
            }
            mRule.appendTo(buffer, value);
        }

        @java.lang.Override
        public void appendTo(java.lang.StringBuffer buffer, int value) {
            mRule.appendTo(buffer, value);
        }
    }

    private static java.util.concurrent.ConcurrentMap<org.apache.commons.lang3.time.FastDatePrinter.TimeZoneDisplayKey, java.lang.String> cTimeZoneDisplayCache = new java.util.concurrent.ConcurrentHashMap<org.apache.commons.lang3.time.FastDatePrinter.TimeZoneDisplayKey, java.lang.String>(7);

    static java.lang.String getTimeZoneDisplay(java.util.TimeZone tz, boolean daylight, int style, java.util.Locale locale) {
        org.apache.commons.lang3.time.FastDatePrinter.TimeZoneDisplayKey key = new org.apache.commons.lang3.time.FastDatePrinter.TimeZoneDisplayKey(tz, daylight, style, locale);
        java.lang.String value = org.apache.commons.lang3.time.FastDatePrinter.cTimeZoneDisplayCache.get(key);
        if (value == null) {
            value = tz.getDisplayName(daylight, style, locale);
            java.lang.String prior = org.apache.commons.lang3.time.FastDatePrinter.cTimeZoneDisplayCache.putIfAbsent(key, value);
            if (prior != null) {
                value = prior;
            }
        }
        return value;
    }

    private static class TimeZoneNameRule implements org.apache.commons.lang3.time.FastDatePrinter.Rule {
        private final java.util.Locale mLocale;

        private final int mStyle;

        private final java.util.TimeZone zone;

        private final java.lang.String mStandard;

        private final java.lang.String mDaylight;

        TimeZoneNameRule(java.util.TimeZone timeZone, java.util.Locale locale, int style) {
            mLocale = locale;
            mStyle = style;
            zone = timeZone;
            mStandard = org.apache.commons.lang3.time.FastDatePrinter.getTimeZoneDisplay(timeZone, false, style, locale);
            mDaylight = org.apache.commons.lang3.time.FastDatePrinter.getTimeZoneDisplay(timeZone, true, style, locale);
        }

        @java.lang.Override
        public int estimateLength() {
            return java.lang.Math.max(mStandard.length(), mDaylight.length());
        }

        @java.lang.Override
        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            if ((zone.useDaylightTime()) && ((calendar.get(java.util.Calendar.DST_OFFSET)) != 0)) {
                buffer.append(org.apache.commons.lang3.time.FastDatePrinter.getTimeZoneDisplay(zone, true, mStyle, mLocale));
            }else {
                buffer.append(org.apache.commons.lang3.time.FastDatePrinter.getTimeZoneDisplay(zone, false, mStyle, mLocale));
            }
        }
    }

    private static class TimeZoneNumberRule implements org.apache.commons.lang3.time.FastDatePrinter.Rule {
        static final org.apache.commons.lang3.time.FastDatePrinter.TimeZoneNumberRule INSTANCE_COLON = new org.apache.commons.lang3.time.FastDatePrinter.TimeZoneNumberRule(true);

        static final org.apache.commons.lang3.time.FastDatePrinter.TimeZoneNumberRule INSTANCE_NO_COLON = new org.apache.commons.lang3.time.FastDatePrinter.TimeZoneNumberRule(false);

        final boolean mColon;

        TimeZoneNumberRule(boolean colon) {
            mColon = colon;
        }

        @java.lang.Override
        public int estimateLength() {
            return 5;
        }

        @java.lang.Override
        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            int offset = (calendar.get(java.util.Calendar.ZONE_OFFSET)) + (calendar.get(java.util.Calendar.DST_OFFSET));
            if (offset < 0) {
                buffer.append('-');
                offset = -offset;
            }else {
                buffer.append('+');
            }
            int hours = offset / ((60 * 60) * 1000);
            buffer.append(((char) ((hours / 10) + '0')));
            buffer.append(((char) ((hours % 10) + '0')));
            if (mColon) {
                buffer.append(':');
            }
            int minutes = (offset / (60 * 1000)) - (60 * hours);
            buffer.append(((char) ((minutes / 10) + '0')));
            buffer.append(((char) ((minutes % 10) + '0')));
        }
    }

    private static class TimeZoneDisplayKey {
        private final java.util.TimeZone mTimeZone;

        private final int mStyle;

        private final java.util.Locale mLocale;

        TimeZoneDisplayKey(java.util.TimeZone timeZone, boolean daylight, int style, java.util.Locale locale) {
            mTimeZone = timeZone;
            if (daylight) {
                style |= -2147483648;
            }
            mStyle = style;
            mLocale = locale;
        }

        @java.lang.Override
        public int hashCode() {
            return ((((mStyle) * 31) + (mLocale.hashCode())) * 31) + (mTimeZone.hashCode());
        }

        @java.lang.Override
        public boolean equals(java.lang.Object obj) {
            if ((this) == obj) {
                return true;
            }
            if (obj instanceof org.apache.commons.lang3.time.FastDatePrinter.TimeZoneDisplayKey) {
                org.apache.commons.lang3.time.FastDatePrinter.TimeZoneDisplayKey other = ((org.apache.commons.lang3.time.FastDatePrinter.TimeZoneDisplayKey) (obj));
                return ((mTimeZone.equals(other.mTimeZone)) && ((mStyle) == (other.mStyle))) && (mLocale.equals(other.mLocale));
            }
            return false;
        }
    }
}
19:06:49.729 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
19:06:49.729 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #34
19:06:49.730 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang3.time.FastDateFormat:445 which is executed by 37 tests
-1899260190
19:06:49.805 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #35
19:06:49.806 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang3.time.FastDatePrinter$CharacterLiteral:824 which is executed by 46 tests
1615201905
19:06:49.900 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #36
19:06:49.900 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang3.time.FastDatePrinter$CharacterLiteral:823 which is executed by 46 tests
1615201905
19:06:49.994 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #37
19:06:49.994 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang3.time.FastDatePrinter$TwoDigitNumberField:1080 which is executed by 48 tests
1615201905
19:06:50.089 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #38
19:06:50.089 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang3.time.FastDatePrinter$TwoDigitNumberField:1076 which is executed by 48 tests
1615201905
19:06:50.183 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #39
19:06:50.183 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang3.time.FastDatePrinter$TwoDigitNumberField:1075 which is executed by 48 tests
1615201905
19:06:50.285 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #40
19:06:50.285 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang3.time.FastDatePrinter$TwoDigitNumberField:1068 which is executed by 48 tests
1615201905
19:06:50.399 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #41
19:06:50.399 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang3.time.FastDatePrinter$TwoDigitNumberField:1067 which is executed by 48 tests
1615201905
19:06:50.510 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #42
19:06:50.510 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang3.time.FastDatePrinter$TwelveHourField:1193 which is executed by 2 tests
1615201905
19:06:50.624 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.junit.ComparisonFailure: expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected(FastDatePrinterTest.java:286)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
org.junit.ComparisonFailure: expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected(FastDatePrinterTest.java:286)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
19:06:50.666 [pool-38-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (37 ms)
<> Total tests run: 28
<> Ignored tests: 0
<> Failed tests: 2
~ testCalendarTimezoneRespected(org.apache.commons.lang3.time.FastDateFormat_PrinterTest)
[expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>]
org.junit.ComparisonFailure: expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected(FastDatePrinterTest.java:286)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
~ testCalendarTimezoneRespected(org.apache.commons.lang3.time.FastDatePrinterTest)
[expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>]
org.junit.ComparisonFailure: expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected(FastDatePrinterTest.java:286)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

19:06:50.817 [pool-37-thread-1] WARN  f.i.l.c.s.util.SpoonReferenceLibrary - spoon.SpoonException: Cannot create MethodTypingContext for method declared in different ClassTypingContext
19:06:50.821 [pool-37-thread-1] WARN  f.i.l.c.s.util.SpoonReferenceLibrary - spoon.SpoonException: Cannot create MethodTypingContext for method declared in different ClassTypingContext
org.junit.ComparisonFailure: expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected(FastDatePrinterTest.java:286)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
19:06:51.361 [pool-39-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (11 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testCalendarTimezoneRespected(org.apache.commons.lang3.time.FastDateFormat_PrinterTest)
[expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>]
org.junit.ComparisonFailure: expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected(FastDatePrinterTest.java:286)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected(FastDatePrinterTest.java:286)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
19:06:51.362 [pool-40-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testCalendarTimezoneRespected(org.apache.commons.lang3.time.FastDatePrinterTest)
[expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>]
org.junit.ComparisonFailure: expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected(FastDatePrinterTest.java:286)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected(FastDatePrinterTest.java:286)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
19:06:51.364 [pool-41-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testCalendarTimezoneRespected(org.apache.commons.lang3.time.FastDateFormat_PrinterTest)
[expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>]
org.junit.ComparisonFailure: expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected(FastDatePrinterTest.java:286)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected(FastDatePrinterTest.java:286)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
19:06:51.365 [pool-42-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testCalendarTimezoneRespected(org.apache.commons.lang3.time.FastDatePrinterTest)
[expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>]
org.junit.ComparisonFailure: expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected(FastDatePrinterTest.java:286)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

19:06:51.365 [pool-37-thread-1] DEBUG tests.output - Failing tests with false: 
[testCalendarTimezoneRespected(org.apache.commons.lang3.time.FastDateFormat_PrinterTest): expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>, testCalendarTimezoneRespected(org.apache.commons.lang3.time.FastDatePrinterTest): expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>]
19:06:51.366 [pool-37-thread-1] DEBUG tests.output - Failing tests with true: 
[testCalendarTimezoneRespected(org.apache.commons.lang3.time.FastDateFormat_PrinterTest): expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>, testCalendarTimezoneRespected(org.apache.commons.lang3.time.FastDatePrinterTest): expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>]
19:06:51.366 [pool-37-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.lang3.time.FastDatePrinter$TwelveHourField:1193.
19:06:51.366 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #43
19:06:51.366 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang3.time.FastDatePrinter$TwelveHourField:1192 which is executed by 2 tests
1615201905
19:06:51.479 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #44
19:06:51.479 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang3.time.FastDatePrinter$TwelveHourField:1189 which is executed by 2 tests
1615201905
19:06:51.572 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.junit.ComparisonFailure: expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected(FastDatePrinterTest.java:286)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
org.junit.ComparisonFailure: expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected(FastDatePrinterTest.java:286)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
19:06:51.610 [pool-44-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (34 ms)
<> Total tests run: 28
<> Ignored tests: 0
<> Failed tests: 2
~ testCalendarTimezoneRespected(org.apache.commons.lang3.time.FastDateFormat_PrinterTest)
[expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>]
org.junit.ComparisonFailure: expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected(FastDatePrinterTest.java:286)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
~ testCalendarTimezoneRespected(org.apache.commons.lang3.time.FastDatePrinterTest)
[expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>]
org.junit.ComparisonFailure: expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected(FastDatePrinterTest.java:286)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

19:06:51.746 [pool-43-thread-1] WARN  f.i.l.c.s.util.SpoonReferenceLibrary - spoon.SpoonException: Cannot create MethodTypingContext for method declared in different ClassTypingContext
19:06:51.751 [pool-43-thread-1] WARN  f.i.l.c.s.util.SpoonReferenceLibrary - spoon.SpoonException: Cannot create MethodTypingContext for method declared in different ClassTypingContext
org.junit.ComparisonFailure: expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected(FastDatePrinterTest.java:286)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
19:06:52.269 [pool-45-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (12 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testCalendarTimezoneRespected(org.apache.commons.lang3.time.FastDateFormat_PrinterTest)
[expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>]
org.junit.ComparisonFailure: expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected(FastDatePrinterTest.java:286)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected(FastDatePrinterTest.java:286)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
19:06:52.270 [pool-46-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testCalendarTimezoneRespected(org.apache.commons.lang3.time.FastDatePrinterTest)
[expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>]
org.junit.ComparisonFailure: expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected(FastDatePrinterTest.java:286)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected(FastDatePrinterTest.java:286)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
19:06:52.271 [pool-47-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testCalendarTimezoneRespected(org.apache.commons.lang3.time.FastDateFormat_PrinterTest)
[expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>]
org.junit.ComparisonFailure: expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected(FastDatePrinterTest.java:286)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected(FastDatePrinterTest.java:286)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
19:06:52.273 [pool-48-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testCalendarTimezoneRespected(org.apache.commons.lang3.time.FastDatePrinterTest)
[expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>]
org.junit.ComparisonFailure: expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected(FastDatePrinterTest.java:286)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

19:06:52.274 [pool-43-thread-1] DEBUG tests.output - Failing tests with false: 
[testCalendarTimezoneRespected(org.apache.commons.lang3.time.FastDateFormat_PrinterTest): expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>, testCalendarTimezoneRespected(org.apache.commons.lang3.time.FastDatePrinterTest): expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>]
19:06:52.274 [pool-43-thread-1] DEBUG tests.output - Failing tests with true: 
[testCalendarTimezoneRespected(org.apache.commons.lang3.time.FastDateFormat_PrinterTest): expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>, testCalendarTimezoneRespected(org.apache.commons.lang3.time.FastDatePrinterTest): expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>]
19:06:52.274 [pool-43-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.lang3.time.FastDatePrinter$TwelveHourField:1189.
19:06:52.274 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #45
19:06:52.274 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang3.time.FastDatePrinter$TwelveHourField:1188 which is executed by 2 tests
1615201905
19:06:52.379 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.junit.ComparisonFailure: expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected(FastDatePrinterTest.java:286)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
org.junit.ComparisonFailure: expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected(FastDatePrinterTest.java:286)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
19:06:52.425 [pool-50-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (42 ms)
<> Total tests run: 28
<> Ignored tests: 0
<> Failed tests: 2
~ testCalendarTimezoneRespected(org.apache.commons.lang3.time.FastDateFormat_PrinterTest)
[expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>]
org.junit.ComparisonFailure: expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected(FastDatePrinterTest.java:286)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
~ testCalendarTimezoneRespected(org.apache.commons.lang3.time.FastDatePrinterTest)
[expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>]
org.junit.ComparisonFailure: expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected(FastDatePrinterTest.java:286)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

19:06:52.555 [pool-49-thread-1] WARN  f.i.l.c.s.util.SpoonReferenceLibrary - spoon.SpoonException: Cannot create MethodTypingContext for method declared in different ClassTypingContext
19:06:52.559 [pool-49-thread-1] WARN  f.i.l.c.s.util.SpoonReferenceLibrary - spoon.SpoonException: Cannot create MethodTypingContext for method declared in different ClassTypingContext
org.junit.ComparisonFailure: expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected(FastDatePrinterTest.java:286)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
19:06:53.032 [pool-51-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (10 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testCalendarTimezoneRespected(org.apache.commons.lang3.time.FastDateFormat_PrinterTest)
[expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>]
org.junit.ComparisonFailure: expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected(FastDatePrinterTest.java:286)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected(FastDatePrinterTest.java:286)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
19:06:53.034 [pool-52-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testCalendarTimezoneRespected(org.apache.commons.lang3.time.FastDatePrinterTest)
[expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>]
org.junit.ComparisonFailure: expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected(FastDatePrinterTest.java:286)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected(FastDatePrinterTest.java:286)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
19:06:53.035 [pool-53-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testCalendarTimezoneRespected(org.apache.commons.lang3.time.FastDateFormat_PrinterTest)
[expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>]
org.junit.ComparisonFailure: expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected(FastDatePrinterTest.java:286)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected(FastDatePrinterTest.java:286)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
19:06:53.036 [pool-54-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testCalendarTimezoneRespected(org.apache.commons.lang3.time.FastDatePrinterTest)
[expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>]
org.junit.ComparisonFailure: expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected(FastDatePrinterTest.java:286)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

19:06:53.037 [pool-49-thread-1] DEBUG tests.output - Failing tests with false: 
[testCalendarTimezoneRespected(org.apache.commons.lang3.time.FastDateFormat_PrinterTest): expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>, testCalendarTimezoneRespected(org.apache.commons.lang3.time.FastDatePrinterTest): expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>]
19:06:53.037 [pool-49-thread-1] DEBUG tests.output - Failing tests with true: 
[testCalendarTimezoneRespected(org.apache.commons.lang3.time.FastDateFormat_PrinterTest): expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>, testCalendarTimezoneRespected(org.apache.commons.lang3.time.FastDatePrinterTest): expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>]
19:06:53.037 [pool-49-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.lang3.time.FastDatePrinter$TwelveHourField:1188.
19:06:53.037 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
org.junit.ComparisonFailure: expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected(FastDatePrinterTest.java:286)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
org.junit.ComparisonFailure: expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected(FastDatePrinterTest.java:286)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
19:06:53.072 [pool-56-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (32 ms)
<> Total tests run: 28
<> Ignored tests: 0
<> Failed tests: 2
~ testCalendarTimezoneRespected(org.apache.commons.lang3.time.FastDateFormat_PrinterTest)
[expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>]
org.junit.ComparisonFailure: expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected(FastDatePrinterTest.java:286)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
~ testCalendarTimezoneRespected(org.apache.commons.lang3.time.FastDatePrinterTest)
[expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>]
org.junit.ComparisonFailure: expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected(FastDatePrinterTest.java:286)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

19:06:53.210 [pool-55-thread-1] WARN  f.i.l.c.s.util.SpoonReferenceLibrary - spoon.SpoonException: Cannot create MethodTypingContext for method declared in different ClassTypingContext
19:06:53.214 [pool-55-thread-1] WARN  f.i.l.c.s.util.SpoonReferenceLibrary - spoon.SpoonException: Cannot create MethodTypingContext for method declared in different ClassTypingContext
org.junit.ComparisonFailure: expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected(FastDatePrinterTest.java:286)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
19:06:53.692 [pool-57-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (11 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testCalendarTimezoneRespected(org.apache.commons.lang3.time.FastDateFormat_PrinterTest)
[expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>]
org.junit.ComparisonFailure: expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected(FastDatePrinterTest.java:286)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected(FastDatePrinterTest.java:286)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
19:06:53.694 [pool-58-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testCalendarTimezoneRespected(org.apache.commons.lang3.time.FastDatePrinterTest)
[expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>]
org.junit.ComparisonFailure: expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected(FastDatePrinterTest.java:286)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected(FastDatePrinterTest.java:286)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
19:06:53.695 [pool-59-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testCalendarTimezoneRespected(org.apache.commons.lang3.time.FastDateFormat_PrinterTest)
[expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>]
org.junit.ComparisonFailure: expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected(FastDatePrinterTest.java:286)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected(FastDatePrinterTest.java:286)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
19:06:53.696 [pool-60-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testCalendarTimezoneRespected(org.apache.commons.lang3.time.FastDatePrinterTest)
[expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>]
org.junit.ComparisonFailure: expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected(FastDatePrinterTest.java:286)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

19:06:53.696 [pool-55-thread-1] DEBUG tests.output - Failing tests with false: 
[testCalendarTimezoneRespected(org.apache.commons.lang3.time.FastDateFormat_PrinterTest): expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>, testCalendarTimezoneRespected(org.apache.commons.lang3.time.FastDatePrinterTest): expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>]
19:06:53.696 [pool-55-thread-1] DEBUG tests.output - Failing tests with true: 
[testCalendarTimezoneRespected(org.apache.commons.lang3.time.FastDateFormat_PrinterTest): expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>, testCalendarTimezoneRespected(org.apache.commons.lang3.time.FastDatePrinterTest): expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>]
19:06:53.696 [pool-55-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.lang3.time.FastDatePrinter$TwelveHourField:1188.
19:06:53.696 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #46
19:06:53.696 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang3.time.DurationFormatUtils:543 which is executed by 8 tests
-1439815513
19:06:53.777 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #47
19:06:53.777 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang3.time.DurationFormatUtils:542 which is executed by 8 tests
-1439815513
19:06:53.857 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #48
19:06:53.858 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang3.time.FastDatePrinter:80 which is executed by 94 tests
1615201905
19:06:53.952 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #49
19:06:53.952 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang3.time.FastDatePrinter:683 which is executed by 50 tests
1615201905
19:06:54.045 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #50
19:06:54.045 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang3.time.FastDatePrinter:682 which is executed by 50 tests
1615201905
19:06:54.138 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #51
19:06:54.138 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang3.time.FastDatePrinter:681 which is executed by 50 tests
1615201905
19:06:54.230 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.junit.ComparisonFailure: expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected(FastDatePrinterTest.java:286)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
org.junit.ComparisonFailure: expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected(FastDatePrinterTest.java:286)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
org.junit.ComparisonFailure: expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected(FastDatePrinterTest.java:286)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
org.junit.ComparisonFailure: expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected(FastDatePrinterTest.java:286)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
19:06:54.914 [pool-62-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (677 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 4
~ testCalendarTimezoneRespected(org.apache.commons.lang3.time.FastDateFormat_PrinterTest)
[expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>]
org.junit.ComparisonFailure: expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected(FastDatePrinterTest.java:286)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
~ testCalendarTimezoneRespected(org.apache.commons.lang3.time.FastDateFormat_PrinterTest)
[expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>]
org.junit.ComparisonFailure: expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected(FastDatePrinterTest.java:286)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
~ testCalendarTimezoneRespected(org.apache.commons.lang3.time.FastDatePrinterTest)
[expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>]
org.junit.ComparisonFailure: expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected(FastDatePrinterTest.java:286)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
~ testCalendarTimezoneRespected(org.apache.commons.lang3.time.FastDatePrinterTest)
[expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>]
org.junit.ComparisonFailure: expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected(FastDatePrinterTest.java:286)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected(FastDatePrinterTest.java:286)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
19:06:55.543 [pool-63-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (11 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testCalendarTimezoneRespected(org.apache.commons.lang3.time.FastDateFormat_PrinterTest)
[expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>]
org.junit.ComparisonFailure: expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected(FastDatePrinterTest.java:286)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected(FastDatePrinterTest.java:286)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
19:06:55.544 [pool-64-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testCalendarTimezoneRespected(org.apache.commons.lang3.time.FastDatePrinterTest)
[expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>]
org.junit.ComparisonFailure: expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected(FastDatePrinterTest.java:286)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected(FastDatePrinterTest.java:286)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
19:06:55.546 [pool-65-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testCalendarTimezoneRespected(org.apache.commons.lang3.time.FastDateFormat_PrinterTest)
[expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>]
org.junit.ComparisonFailure: expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected(FastDatePrinterTest.java:286)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected(FastDatePrinterTest.java:286)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
19:06:55.547 [pool-66-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testCalendarTimezoneRespected(org.apache.commons.lang3.time.FastDatePrinterTest)
[expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>]
org.junit.ComparisonFailure: expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected(FastDatePrinterTest.java:286)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

19:06:55.547 [pool-61-thread-1] DEBUG tests.output - Failing tests with false: 
[testCalendarTimezoneRespected(org.apache.commons.lang3.time.FastDateFormat_PrinterTest): expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>, testCalendarTimezoneRespected(org.apache.commons.lang3.time.FastDatePrinterTest): expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>]
19:06:55.547 [pool-61-thread-1] DEBUG tests.output - Failing tests with true: 
[testCalendarTimezoneRespected(org.apache.commons.lang3.time.FastDateFormat_PrinterTest): expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>, testCalendarTimezoneRespected(org.apache.commons.lang3.time.FastDatePrinterTest): expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>]
19:06:55.548 [pool-61-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.lang3.time.FastDatePrinter:681.
19:06:55.548 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #52
19:06:55.548 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang3.time.FastDatePrinter:578 which is executed by 50 tests
1615201905
19:06:55.643 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #53
19:06:55.643 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang3.time.FastDatePrinter:577 which is executed by 50 tests
1615201905
19:06:55.735 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #54
19:06:55.735 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang3.time.FastDatePrinter:573 which is executed by 50 tests
1615201905
19:06:55.829 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #55
19:06:55.829 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang3.time.FastDatePrinter:572 which is executed by 50 tests
1615201905
19:06:55.924 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #56
19:06:55.925 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang3.time.FastDatePrinter:242 which is executed by 18 tests
1615201905
19:06:56.014 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.junit.ComparisonFailure: expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected(FastDatePrinterTest.java:286)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
19:06:56.676 [pool-68-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (655 ms)
<> Total tests run: 65
<> Ignored tests: 0
<> Failed tests: 1
~ testCalendarTimezoneRespected(org.apache.commons.lang3.time.FastDatePrinterTest)
[expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>]
org.junit.ComparisonFailure: expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected(FastDatePrinterTest.java:286)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected(FastDatePrinterTest.java:286)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
19:06:57.263 [pool-69-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (10 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testCalendarTimezoneRespected(org.apache.commons.lang3.time.FastDatePrinterTest)
[expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>]
org.junit.ComparisonFailure: expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected(FastDatePrinterTest.java:286)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected(FastDatePrinterTest.java:286)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
19:06:57.265 [pool-70-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testCalendarTimezoneRespected(org.apache.commons.lang3.time.FastDatePrinterTest)
[expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>]
org.junit.ComparisonFailure: expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected(FastDatePrinterTest.java:286)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

19:06:57.265 [pool-67-thread-1] DEBUG tests.output - Failing tests with false: 
[testCalendarTimezoneRespected(org.apache.commons.lang3.time.FastDatePrinterTest): expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>]
19:06:57.265 [pool-67-thread-1] DEBUG tests.output - Failing tests with true: 
[testCalendarTimezoneRespected(org.apache.commons.lang3.time.FastDatePrinterTest): expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>]
19:06:57.265 [pool-67-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.lang3.time.FastDatePrinter:242.
19:06:57.265 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #57
19:06:57.266 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang3.time.FastDatePrinter:241 which is executed by 18 tests
1615201905
19:06:57.357 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.junit.ComparisonFailure: expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected(FastDatePrinterTest.java:286)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
19:06:58.026 [pool-72-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (662 ms)
<> Total tests run: 65
<> Ignored tests: 0
<> Failed tests: 1
~ testCalendarTimezoneRespected(org.apache.commons.lang3.time.FastDatePrinterTest)
[expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>]
org.junit.ComparisonFailure: expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected(FastDatePrinterTest.java:286)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

19:06:58.576 [pool-71-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
FastDatePrinter.java:190: error: variable rule might not have been initialized
            rules.add(rule);
                      ^
19:06:58.937 [pool-71-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public class FastDatePrinter implements java.io.Serializable , org.apache.commons.lang3.time.DatePrinter {
    private static final long serialVersionUID = 1L;

    public static final int FULL = java.text.DateFormat.FULL;

    public static final int LONG = java.text.DateFormat.LONG;

    public static final int MEDIUM = java.text.DateFormat.MEDIUM;

    public static final int SHORT = java.text.DateFormat.SHORT;

    private final java.lang.String mPattern;

    private final java.util.TimeZone mTimeZone;

    private final java.util.Locale mLocale;

    private transient org.apache.commons.lang3.time.FastDatePrinter.Rule[] mRules;

    private transient int mMaxLengthEstimate;

    protected FastDatePrinter(java.lang.String pattern, java.util.TimeZone timeZone, java.util.Locale locale) {
        mPattern = pattern;
        mTimeZone = timeZone;
        mLocale = locale;
        init();
    }

    private void init() {
        java.util.List<org.apache.commons.lang3.time.FastDatePrinter.Rule> rulesList = parsePattern();
        mRules = rulesList.toArray(new org.apache.commons.lang3.time.FastDatePrinter.Rule[rulesList.size()]);
        int len = 0;
        for (int i = mRules.length; (--i) >= 0;) {
            len += mRules[i].estimateLength();
        }
        mMaxLengthEstimate = len;
    }

    protected java.util.List<org.apache.commons.lang3.time.FastDatePrinter.Rule> parsePattern() {
        java.text.DateFormatSymbols symbols = new java.text.DateFormatSymbols(mLocale);
        java.util.List<org.apache.commons.lang3.time.FastDatePrinter.Rule> rules = new java.util.ArrayList<org.apache.commons.lang3.time.FastDatePrinter.Rule>();
        java.lang.String[] ERAs = symbols.getEras();
        java.lang.String[] months = symbols.getMonths();
        java.lang.String[] shortMonths = symbols.getShortMonths();
        java.lang.String[] weekdays = symbols.getWeekdays();
        java.lang.String[] shortWeekdays = symbols.getShortWeekdays();
        java.lang.String[] AmPmStrings = symbols.getAmPmStrings();
        int length = mPattern.length();
        int[] indexRef = new int[1];
        for (int i = 0; i < length; i++) {
            indexRef[0] = i;
            java.lang.String token = parseToken(mPattern, indexRef);
            i = indexRef[0];
            int tokenLen = token.length();
            if (tokenLen == 0) {
                break;
            }
            org.apache.commons.lang3.time.FastDatePrinter.Rule rule;
            char c = token.charAt(0);
            switch (c) {
                case 'G' :
                    rule = new org.apache.commons.lang3.time.FastDatePrinter.TextField(java.util.Calendar.ERA, ERAs);
                    break;
                case 'y' :
                    if (tokenLen == 2) {
                        rule = org.apache.commons.lang3.time.FastDatePrinter.TwoDigitYearField.INSTANCE;
                    }else {
                        rule = selectNumberRule(java.util.Calendar.YEAR, (tokenLen < 4 ? 4 : tokenLen));
                    }
                    break;
                case 'M' :
                    if (tokenLen >= 4) {
                        rule = new org.apache.commons.lang3.time.FastDatePrinter.TextField(java.util.Calendar.MONTH, months);
                    }else
                        if (tokenLen == 3) {
                            rule = new org.apache.commons.lang3.time.FastDatePrinter.TextField(java.util.Calendar.MONTH, shortMonths);
                        }else
                            if (tokenLen == 2) {
                                rule = org.apache.commons.lang3.time.FastDatePrinter.TwoDigitMonthField.INSTANCE;
                            }else {
                                rule = org.apache.commons.lang3.time.FastDatePrinter.UnpaddedMonthField.INSTANCE;
                            }


                    break;
                case 'd' :
                    rule = selectNumberRule(java.util.Calendar.DAY_OF_MONTH, tokenLen);
                    break;
                case 'h' :
                    rule = new org.apache.commons.lang3.time.FastDatePrinter.TwelveHourField(selectNumberRule(java.util.Calendar.HOUR, tokenLen));
                    break;
                case 'H' :
                    rule = selectNumberRule(java.util.Calendar.HOUR_OF_DAY, tokenLen);
                    break;
                case 'm' :
                    rule = selectNumberRule(java.util.Calendar.MINUTE, tokenLen);
                    break;
                case 's' :
                    rule = selectNumberRule(java.util.Calendar.SECOND, tokenLen);
                    break;
                case 'S' :
                    rule = selectNumberRule(java.util.Calendar.MILLISECOND, tokenLen);
                    break;
                case 'E' :
                    rule = new org.apache.commons.lang3.time.FastDatePrinter.TextField(java.util.Calendar.DAY_OF_WEEK, (tokenLen < 4 ? shortWeekdays : weekdays));
                    break;
                case 'D' :
                    rule = selectNumberRule(java.util.Calendar.DAY_OF_YEAR, tokenLen);
                    break;
                case 'F' :
                    boolean spoonDefaultValue = false;
                    try {
                        spoonDefaultValue = true;
                    } catch (java.lang.Exception __NopolProcessorException) {
                    }
                    boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                    if (fr.inria.lille.commons.trace.RuntimeValues.instance(10).isEnabled()) {
                        fr.inria.lille.commons.trace.RuntimeValues.instance(10).collectionStarts();
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(10).collectInput("org.apache.commons.lang3.time.FastDatePrinter.MEDIUM",org.apache.commons.lang3.time.FastDatePrinter.MEDIUM);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(10).collectInput("org.apache.commons.lang3.time.FastDatePrinter.this.mMaxLengthEstimate",org.apache.commons.lang3.time.FastDatePrinter.this.mMaxLengthEstimate);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(10).collectInput("c",c);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(10).collectInput("months",months);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(10).collectInput("org.apache.commons.lang3.time.FastDatePrinter.cTimeZoneDisplayCache",org.apache.commons.lang3.time.FastDatePrinter.cTimeZoneDisplayCache);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(10).collectInput("shortMonths",shortMonths);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(10).collectInput("weekdays",weekdays);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(10).collectInput("shortWeekdays",shortWeekdays);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(10).collectInput("length",length);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(10).collectInput("tokenLen",tokenLen);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(10).collectInput("rules",rules);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(10).collectInput("org.apache.commons.lang3.time.FastDatePrinter.this.mTimeZone",org.apache.commons.lang3.time.FastDatePrinter.this.mTimeZone);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(10).collectInput("org.apache.commons.lang3.time.FastDatePrinter.SHORT",org.apache.commons.lang3.time.FastDatePrinter.SHORT);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(10).collectInput("symbols",symbols);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(10).collectInput("org.apache.commons.lang3.time.FastDatePrinter.FULL",org.apache.commons.lang3.time.FastDatePrinter.FULL);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(10).collectInput("org.apache.commons.lang3.time.FastDatePrinter.this.mPattern",org.apache.commons.lang3.time.FastDatePrinter.this.mPattern);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(10).collectInput("org.apache.commons.lang3.time.FastDatePrinter.this.mLocale",org.apache.commons.lang3.time.FastDatePrinter.this.mLocale);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(10).collectInput("token",token);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(10).collectInput("AmPmStrings",AmPmStrings);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(10).collectInput("org.apache.commons.lang3.time.FastDatePrinter.this.mRules",org.apache.commons.lang3.time.FastDatePrinter.this.mRules);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(10).collectInput("indexRef",indexRef);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(10).collectInput("ERAs",ERAs);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(10).collectInput("org.apache.commons.lang3.time.FastDatePrinter.LONG",org.apache.commons.lang3.time.FastDatePrinter.LONG);} catch (Exception ex1) {ex1.printStackTrace();};
                        fr.inria.lille.commons.trace.RuntimeValues.instance(10).collectOutput(runtimeAngelicValue);
                        fr.inria.lille.commons.trace.RuntimeValues.instance(10).collectionEnds();
                    }
                    if (runtimeAngelicValue)
                        rule = selectNumberRule(java.util.Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);

                    break;
                case 'w' :
                    rule = selectNumberRule(java.util.Calendar.WEEK_OF_YEAR, tokenLen);
                    break;
                case 'W' :
                    rule = selectNumberRule(java.util.Calendar.WEEK_OF_MONTH, tokenLen);
                    break;
                case 'a' :
                    rule = new org.apache.commons.lang3.time.FastDatePrinter.TextField(java.util.Calendar.AM_PM, AmPmStrings);
                    break;
                case 'k' :
                    rule = new org.apache.commons.lang3.time.FastDatePrinter.TwentyFourHourField(selectNumberRule(java.util.Calendar.HOUR_OF_DAY, tokenLen));
                    break;
                case 'K' :
                    rule = selectNumberRule(java.util.Calendar.HOUR, tokenLen);
                    break;
                case 'z' :
                    if (tokenLen >= 4) {
                        rule = new org.apache.commons.lang3.time.FastDatePrinter.TimeZoneNameRule(mTimeZone, mLocale, java.util.TimeZone.LONG);
                    }else {
                        rule = new org.apache.commons.lang3.time.FastDatePrinter.TimeZoneNameRule(mTimeZone, mLocale, java.util.TimeZone.SHORT);
                    }
                    break;
                case 'Z' :
                    if (tokenLen == 1) {
                        rule = org.apache.commons.lang3.time.FastDatePrinter.TimeZoneNumberRule.INSTANCE_NO_COLON;
                    }else {
                        rule = org.apache.commons.lang3.time.FastDatePrinter.TimeZoneNumberRule.INSTANCE_COLON;
                    }
                    break;
                case '\'' :
                    java.lang.String sub = token.substring(1);
                    if ((sub.length()) == 1) {
                        rule = new org.apache.commons.lang3.time.FastDatePrinter.CharacterLiteral(sub.charAt(0));
                    }else {
                        rule = new org.apache.commons.lang3.time.FastDatePrinter.StringLiteral(sub);
                    }
                    break;
                default :
                    throw new java.lang.IllegalArgumentException(("Illegal pattern component: " + token));
            }
            rules.add(rule);
        }
        return rules;
    }

    protected java.lang.String parseToken(java.lang.String pattern, int[] indexRef) {
        java.lang.StringBuilder buf = new java.lang.StringBuilder();
        int i = indexRef[0];
        int length = pattern.length();
        char c = pattern.charAt(i);
        if (((c >= 'A') && (c <= 'Z')) || ((c >= 'a') && (c <= 'z'))) {
            buf.append(c);
            while ((i + 1) < length) {
                char peek = pattern.charAt((i + 1));
                if (peek == c) {
                    buf.append(c);
                    i++;
                }else {
                    break;
                }
            } 
        }else {
            buf.append('\'');
            boolean inLiteral = false;
            for (; i < length; i++) {
                c = pattern.charAt(i);
                if (c == '\'') {
                    if (((i + 1) < length) && ((pattern.charAt((i + 1))) == '\'')) {
                        i++;
                        buf.append(c);
                    }else {
                        inLiteral = !inLiteral;
                    }
                }else
                    if ((!inLiteral) && (((c >= 'A') && (c <= 'Z')) || ((c >= 'a') && (c <= 'z')))) {
                        i--;
                        break;
                    }else {
                        buf.append(c);
                    }

            }
        }
        indexRef[0] = i;
        return buf.toString();
    }

    protected org.apache.commons.lang3.time.FastDatePrinter.NumberRule selectNumberRule(int field, int padding) {
        switch (padding) {
            case 1 :
                return new org.apache.commons.lang3.time.FastDatePrinter.UnpaddedNumberField(field);
            case 2 :
                return new org.apache.commons.lang3.time.FastDatePrinter.TwoDigitNumberField(field);
            default :
                return new org.apache.commons.lang3.time.FastDatePrinter.PaddedNumberField(field, padding);
        }
    }

    @java.lang.Override
    public java.lang.StringBuffer format(java.lang.Object obj, java.lang.StringBuffer toAppendTo, java.text.FieldPosition pos) {
        if (obj instanceof java.util.Date) {
            return format(((java.util.Date) (obj)), toAppendTo);
        }else
            if (obj instanceof java.util.Calendar) {
                return format(((java.util.Calendar) (obj)), toAppendTo);
            }else
                if (obj instanceof java.lang.Long) {
                    return format(((java.lang.Long) (obj)).longValue(), toAppendTo);
                }else {
                    throw new java.lang.IllegalArgumentException(("Unknown class: " + (obj == null ? "<null>" : obj.getClass().getName())));
                }


    }

    @java.lang.Override
    public java.lang.String format(long millis) {
        return format(new java.util.Date(millis));
    }

    @java.lang.Override
    public java.lang.String format(java.util.Date date) {
        java.util.Calendar c = new java.util.GregorianCalendar(mTimeZone, mLocale);
        c.setTime(date);
        return applyRules(c, new java.lang.StringBuffer(mMaxLengthEstimate)).toString();
    }

    @java.lang.Override
    public java.lang.String format(java.util.Calendar calendar) {
        return format(calendar, new java.lang.StringBuffer(mMaxLengthEstimate)).toString();
    }

    @java.lang.Override
    public java.lang.StringBuffer format(long millis, java.lang.StringBuffer buf) {
        return format(new java.util.Date(millis), buf);
    }

    @java.lang.Override
    public java.lang.StringBuffer format(java.util.Date date, java.lang.StringBuffer buf) {
        java.util.Calendar c = new java.util.GregorianCalendar(mTimeZone, mLocale);
        c.setTime(date);
        return applyRules(c, buf);
    }

    @java.lang.Override
    public java.lang.StringBuffer format(java.util.Calendar calendar, java.lang.StringBuffer buf) {
        return applyRules(calendar, buf);
    }

    protected java.lang.StringBuffer applyRules(java.util.Calendar calendar, java.lang.StringBuffer buf) {
        for (org.apache.commons.lang3.time.FastDatePrinter.Rule rule : mRules) {
            rule.appendTo(buf, calendar);
        }
        return buf;
    }

    @java.lang.Override
    public java.lang.String getPattern() {
        return mPattern;
    }

    @java.lang.Override
    public java.util.TimeZone getTimeZone() {
        return mTimeZone;
    }

    @java.lang.Override
    public java.util.Locale getLocale() {
        return mLocale;
    }

    public int getMaxLengthEstimate() {
        return mMaxLengthEstimate;
    }

    @java.lang.Override
    public boolean equals(java.lang.Object obj) {
        if ((obj instanceof org.apache.commons.lang3.time.FastDatePrinter) == false) {
            return false;
        }
        org.apache.commons.lang3.time.FastDatePrinter other = ((org.apache.commons.lang3.time.FastDatePrinter) (obj));
        return ((mPattern.equals(other.mPattern)) && (mTimeZone.equals(other.mTimeZone))) && (mLocale.equals(other.mLocale));
    }

    @java.lang.Override
    public int hashCode() {
        return (mPattern.hashCode()) + (13 * ((mTimeZone.hashCode()) + (13 * (mLocale.hashCode()))));
    }

    @java.lang.Override
    public java.lang.String toString() {
        return ((((("FastDatePrinter[" + (mPattern)) + ",") + (mLocale)) + ",") + (mTimeZone.getID())) + "]";
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
        in.defaultReadObject();
        init();
    }

    private interface Rule {
        int estimateLength();

        void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar);
    }

    private interface NumberRule extends org.apache.commons.lang3.time.FastDatePrinter.Rule {
        void appendTo(java.lang.StringBuffer buffer, int value);
    }

    private static class CharacterLiteral implements org.apache.commons.lang3.time.FastDatePrinter.Rule {
        private final char mValue;

        CharacterLiteral(char value) {
            mValue = value;
        }

        @java.lang.Override
        public int estimateLength() {
            return 1;
        }

        @java.lang.Override
        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            buffer.append(mValue);
        }
    }

    private static class StringLiteral implements org.apache.commons.lang3.time.FastDatePrinter.Rule {
        private final java.lang.String mValue;

        StringLiteral(java.lang.String value) {
            mValue = value;
        }

        @java.lang.Override
        public int estimateLength() {
            return mValue.length();
        }

        @java.lang.Override
        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            buffer.append(mValue);
        }
    }

    private static class TextField implements org.apache.commons.lang3.time.FastDatePrinter.Rule {
        private final int mField;

        private final java.lang.String[] mValues;

        TextField(int field, java.lang.String[] values) {
            mField = field;
            mValues = values;
        }

        @java.lang.Override
        public int estimateLength() {
            int max = 0;
            for (int i = mValues.length; (--i) >= 0;) {
                int len = mValues[i].length();
                if (len > max) {
                    max = len;
                }
            }
            return max;
        }

        @java.lang.Override
        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            buffer.append(mValues[calendar.get(mField)]);
        }
    }

    private static class UnpaddedNumberField implements org.apache.commons.lang3.time.FastDatePrinter.NumberRule {
        private final int mField;

        UnpaddedNumberField(int field) {
            mField = field;
        }

        @java.lang.Override
        public int estimateLength() {
            return 4;
        }

        @java.lang.Override
        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            appendTo(buffer, calendar.get(mField));
        }

        @java.lang.Override
        public final void appendTo(java.lang.StringBuffer buffer, int value) {
            if (value < 10) {
                buffer.append(((char) (value + '0')));
            }else
                if (value < 100) {
                    buffer.append(((char) ((value / 10) + '0')));
                    buffer.append(((char) ((value % 10) + '0')));
                }else {
                    buffer.append(java.lang.Integer.toString(value));
                }

        }
    }

    private static class UnpaddedMonthField implements org.apache.commons.lang3.time.FastDatePrinter.NumberRule {
        static final org.apache.commons.lang3.time.FastDatePrinter.UnpaddedMonthField INSTANCE = new org.apache.commons.lang3.time.FastDatePrinter.UnpaddedMonthField();

        UnpaddedMonthField() {
            super();
        }

        @java.lang.Override
        public int estimateLength() {
            return 2;
        }

        @java.lang.Override
        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            appendTo(buffer, ((calendar.get(java.util.Calendar.MONTH)) + 1));
        }

        @java.lang.Override
        public final void appendTo(java.lang.StringBuffer buffer, int value) {
            if (value < 10) {
                buffer.append(((char) (value + '0')));
            }else {
                buffer.append(((char) ((value / 10) + '0')));
                buffer.append(((char) ((value % 10) + '0')));
            }
        }
    }

    private static class PaddedNumberField implements org.apache.commons.lang3.time.FastDatePrinter.NumberRule {
        private final int mField;

        private final int mSize;

        PaddedNumberField(int field, int size) {
            if (size < 3) {
                throw new java.lang.IllegalArgumentException();
            }
            mField = field;
            mSize = size;
        }

        @java.lang.Override
        public int estimateLength() {
            return 4;
        }

        @java.lang.Override
        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            appendTo(buffer, calendar.get(mField));
        }

        @java.lang.Override
        public final void appendTo(java.lang.StringBuffer buffer, int value) {
            if (value < 100) {
                for (int i = mSize; (--i) >= 2;) {
                    buffer.append('0');
                }
                buffer.append(((char) ((value / 10) + '0')));
                buffer.append(((char) ((value % 10) + '0')));
            }else {
                int digits;
                if (value < 1000) {
                    digits = 3;
                }else {
                    org.apache.commons.lang3.Validate.isTrue((value > (-1)), "Negative values should not be possible", value);
                    digits = java.lang.Integer.toString(value).length();
                }
                for (int i = mSize; (--i) >= digits;) {
                    buffer.append('0');
                }
                buffer.append(java.lang.Integer.toString(value));
            }
        }
    }

    private static class TwoDigitNumberField implements org.apache.commons.lang3.time.FastDatePrinter.NumberRule {
        private final int mField;

        TwoDigitNumberField(int field) {
            mField = field;
        }

        @java.lang.Override
        public int estimateLength() {
            return 2;
        }

        @java.lang.Override
        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            appendTo(buffer, calendar.get(mField));
        }

        @java.lang.Override
        public final void appendTo(java.lang.StringBuffer buffer, int value) {
            if (value < 100) {
                buffer.append(((char) ((value / 10) + '0')));
                buffer.append(((char) ((value % 10) + '0')));
            }else {
                buffer.append(java.lang.Integer.toString(value));
            }
        }
    }

    private static class TwoDigitYearField implements org.apache.commons.lang3.time.FastDatePrinter.NumberRule {
        static final org.apache.commons.lang3.time.FastDatePrinter.TwoDigitYearField INSTANCE = new org.apache.commons.lang3.time.FastDatePrinter.TwoDigitYearField();

        TwoDigitYearField() {
            super();
        }

        @java.lang.Override
        public int estimateLength() {
            return 2;
        }

        @java.lang.Override
        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            appendTo(buffer, ((calendar.get(java.util.Calendar.YEAR)) % 100));
        }

        @java.lang.Override
        public final void appendTo(java.lang.StringBuffer buffer, int value) {
            buffer.append(((char) ((value / 10) + '0')));
            buffer.append(((char) ((value % 10) + '0')));
        }
    }

    private static class TwoDigitMonthField implements org.apache.commons.lang3.time.FastDatePrinter.NumberRule {
        static final org.apache.commons.lang3.time.FastDatePrinter.TwoDigitMonthField INSTANCE = new org.apache.commons.lang3.time.FastDatePrinter.TwoDigitMonthField();

        TwoDigitMonthField() {
            super();
        }

        @java.lang.Override
        public int estimateLength() {
            return 2;
        }

        @java.lang.Override
        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            appendTo(buffer, ((calendar.get(java.util.Calendar.MONTH)) + 1));
        }

        @java.lang.Override
        public final void appendTo(java.lang.StringBuffer buffer, int value) {
            buffer.append(((char) ((value / 10) + '0')));
            buffer.append(((char) ((value % 10) + '0')));
        }
    }

    private static class TwelveHourField implements org.apache.commons.lang3.time.FastDatePrinter.NumberRule {
        private final org.apache.commons.lang3.time.FastDatePrinter.NumberRule mRule;

        TwelveHourField(org.apache.commons.lang3.time.FastDatePrinter.NumberRule rule) {
            mRule = rule;
        }

        @java.lang.Override
        public int estimateLength() {
            return mRule.estimateLength();
        }

        @java.lang.Override
        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            int value = calendar.get(java.util.Calendar.HOUR);
            if (value == 0) {
                value = (calendar.getLeastMaximum(java.util.Calendar.HOUR)) + 1;
            }
            mRule.appendTo(buffer, value);
        }

        @java.lang.Override
        public void appendTo(java.lang.StringBuffer buffer, int value) {
            mRule.appendTo(buffer, value);
        }
    }

    private static class TwentyFourHourField implements org.apache.commons.lang3.time.FastDatePrinter.NumberRule {
        private final org.apache.commons.lang3.time.FastDatePrinter.NumberRule mRule;

        TwentyFourHourField(org.apache.commons.lang3.time.FastDatePrinter.NumberRule rule) {
            mRule = rule;
        }

        @java.lang.Override
        public int estimateLength() {
            return mRule.estimateLength();
        }

        @java.lang.Override
        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            int value = calendar.get(java.util.Calendar.HOUR_OF_DAY);
            if (value == 0) {
                value = (calendar.getMaximum(java.util.Calendar.HOUR_OF_DAY)) + 1;
            }
            mRule.appendTo(buffer, value);
        }

        @java.lang.Override
        public void appendTo(java.lang.StringBuffer buffer, int value) {
            mRule.appendTo(buffer, value);
        }
    }

    private static java.util.concurrent.ConcurrentMap<org.apache.commons.lang3.time.FastDatePrinter.TimeZoneDisplayKey, java.lang.String> cTimeZoneDisplayCache = new java.util.concurrent.ConcurrentHashMap<org.apache.commons.lang3.time.FastDatePrinter.TimeZoneDisplayKey, java.lang.String>(7);

    static java.lang.String getTimeZoneDisplay(java.util.TimeZone tz, boolean daylight, int style, java.util.Locale locale) {
        org.apache.commons.lang3.time.FastDatePrinter.TimeZoneDisplayKey key = new org.apache.commons.lang3.time.FastDatePrinter.TimeZoneDisplayKey(tz, daylight, style, locale);
        java.lang.String value = org.apache.commons.lang3.time.FastDatePrinter.cTimeZoneDisplayCache.get(key);
        if (value == null) {
            value = tz.getDisplayName(daylight, style, locale);
            java.lang.String prior = org.apache.commons.lang3.time.FastDatePrinter.cTimeZoneDisplayCache.putIfAbsent(key, value);
            if (prior != null) {
                value = prior;
            }
        }
        return value;
    }

    private static class TimeZoneNameRule implements org.apache.commons.lang3.time.FastDatePrinter.Rule {
        private final java.util.Locale mLocale;

        private final int mStyle;

        private final java.util.TimeZone zone;

        private final java.lang.String mStandard;

        private final java.lang.String mDaylight;

        TimeZoneNameRule(java.util.TimeZone timeZone, java.util.Locale locale, int style) {
            mLocale = locale;
            mStyle = style;
            zone = timeZone;
            mStandard = org.apache.commons.lang3.time.FastDatePrinter.getTimeZoneDisplay(timeZone, false, style, locale);
            mDaylight = org.apache.commons.lang3.time.FastDatePrinter.getTimeZoneDisplay(timeZone, true, style, locale);
        }

        @java.lang.Override
        public int estimateLength() {
            return java.lang.Math.max(mStandard.length(), mDaylight.length());
        }

        @java.lang.Override
        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            if ((zone.useDaylightTime()) && ((calendar.get(java.util.Calendar.DST_OFFSET)) != 0)) {
                buffer.append(org.apache.commons.lang3.time.FastDatePrinter.getTimeZoneDisplay(zone, true, mStyle, mLocale));
            }else {
                buffer.append(org.apache.commons.lang3.time.FastDatePrinter.getTimeZoneDisplay(zone, false, mStyle, mLocale));
            }
        }
    }

    private static class TimeZoneNumberRule implements org.apache.commons.lang3.time.FastDatePrinter.Rule {
        static final org.apache.commons.lang3.time.FastDatePrinter.TimeZoneNumberRule INSTANCE_COLON = new org.apache.commons.lang3.time.FastDatePrinter.TimeZoneNumberRule(true);

        static final org.apache.commons.lang3.time.FastDatePrinter.TimeZoneNumberRule INSTANCE_NO_COLON = new org.apache.commons.lang3.time.FastDatePrinter.TimeZoneNumberRule(false);

        final boolean mColon;

        TimeZoneNumberRule(boolean colon) {
            mColon = colon;
        }

        @java.lang.Override
        public int estimateLength() {
            return 5;
        }

        @java.lang.Override
        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            int offset = (calendar.get(java.util.Calendar.ZONE_OFFSET)) + (calendar.get(java.util.Calendar.DST_OFFSET));
            if (offset < 0) {
                buffer.append('-');
                offset = -offset;
            }else {
                buffer.append('+');
            }
            int hours = offset / ((60 * 60) * 1000);
            buffer.append(((char) ((hours / 10) + '0')));
            buffer.append(((char) ((hours % 10) + '0')));
            if (mColon) {
                buffer.append(':');
            }
            int minutes = (offset / (60 * 1000)) - (60 * hours);
            buffer.append(((char) ((minutes / 10) + '0')));
            buffer.append(((char) ((minutes % 10) + '0')));
        }
    }

    private static class TimeZoneDisplayKey {
        private final java.util.TimeZone mTimeZone;

        private final int mStyle;

        private final java.util.Locale mLocale;

        TimeZoneDisplayKey(java.util.TimeZone timeZone, boolean daylight, int style, java.util.Locale locale) {
            mTimeZone = timeZone;
            if (daylight) {
                style |= -2147483648;
            }
            mStyle = style;
            mLocale = locale;
        }

        @java.lang.Override
        public int hashCode() {
            return ((((mStyle) * 31) + (mLocale.hashCode())) * 31) + (mTimeZone.hashCode());
        }

        @java.lang.Override
        public boolean equals(java.lang.Object obj) {
            if ((this) == obj) {
                return true;
            }
            if (obj instanceof org.apache.commons.lang3.time.FastDatePrinter.TimeZoneDisplayKey) {
                org.apache.commons.lang3.time.FastDatePrinter.TimeZoneDisplayKey other = ((org.apache.commons.lang3.time.FastDatePrinter.TimeZoneDisplayKey) (obj));
                return ((mTimeZone.equals(other.mTimeZone)) && ((mStyle) == (other.mStyle))) && (mLocale.equals(other.mLocale));
            }
            return false;
        }
    }
}
19:06:58.937 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
19:06:58.937 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #58
19:06:58.938 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang3.time.FastDatePrinter:248 which is executed by 20 tests
1615201905
19:06:59.028 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.junit.ComparisonFailure: expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected(FastDatePrinterTest.java:286)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
19:06:59.683 [pool-74-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (648 ms)
<> Total tests run: 65
<> Ignored tests: 0
<> Failed tests: 1
~ testCalendarTimezoneRespected(org.apache.commons.lang3.time.FastDatePrinterTest)
[expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>]
org.junit.ComparisonFailure: expected:<7:06AM [IC]T> but was:<7:06AM [ES]T>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected(FastDatePrinterTest.java:286)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<7:07AM [IC]T> but was:<7:07AM [ES]T>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected(FastDatePrinterTest.java:286)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
19:07:00.319 [pool-75-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (12 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testCalendarTimezoneRespected(org.apache.commons.lang3.time.FastDatePrinterTest)
[expected:<7:07AM [IC]T> but was:<7:07AM [ES]T>]
org.junit.ComparisonFailure: expected:<7:07AM [IC]T> but was:<7:07AM [ES]T>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected(FastDatePrinterTest.java:286)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<7:07AM [IC]T> but was:<7:07AM [ES]T>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected(FastDatePrinterTest.java:286)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
19:07:00.321 [pool-76-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testCalendarTimezoneRespected(org.apache.commons.lang3.time.FastDatePrinterTest)
[expected:<7:07AM [IC]T> but was:<7:07AM [ES]T>]
org.junit.ComparisonFailure: expected:<7:07AM [IC]T> but was:<7:07AM [ES]T>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected(FastDatePrinterTest.java:286)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

19:07:00.321 [pool-73-thread-1] DEBUG tests.output - Failing tests with false: 
[testCalendarTimezoneRespected(org.apache.commons.lang3.time.FastDatePrinterTest): expected:<7:07AM [IC]T> but was:<7:07AM [ES]T>]
19:07:00.321 [pool-73-thread-1] DEBUG tests.output - Failing tests with true: 
[testCalendarTimezoneRespected(org.apache.commons.lang3.time.FastDatePrinterTest): expected:<7:07AM [IC]T> but was:<7:07AM [ES]T>]
19:07:00.322 [pool-73-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.lang3.time.FastDatePrinter:248.
19:07:00.322 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #59
19:07:00.322 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang3.time.FastDatePrinter:247 which is executed by 20 tests
1615201905
19:07:00.430 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.junit.ComparisonFailure: expected:<7:07AM [IC]T> but was:<7:07AM [ES]T>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected(FastDatePrinterTest.java:286)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
19:07:01.104 [pool-78-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (668 ms)
<> Total tests run: 65
<> Ignored tests: 0
<> Failed tests: 1
~ testCalendarTimezoneRespected(org.apache.commons.lang3.time.FastDatePrinterTest)
[expected:<7:07AM [IC]T> but was:<7:07AM [ES]T>]
org.junit.ComparisonFailure: expected:<7:07AM [IC]T> but was:<7:07AM [ES]T>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected(FastDatePrinterTest.java:286)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

19:07:01.625 [pool-77-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
FastDatePrinter.java:190: error: variable rule might not have been initialized
            rules.add(rule);
                      ^
19:07:01.982 [pool-77-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public class FastDatePrinter implements java.io.Serializable , org.apache.commons.lang3.time.DatePrinter {
    private static final long serialVersionUID = 1L;

    public static final int FULL = java.text.DateFormat.FULL;

    public static final int LONG = java.text.DateFormat.LONG;

    public static final int MEDIUM = java.text.DateFormat.MEDIUM;

    public static final int SHORT = java.text.DateFormat.SHORT;

    private final java.lang.String mPattern;

    private final java.util.TimeZone mTimeZone;

    private final java.util.Locale mLocale;

    private transient org.apache.commons.lang3.time.FastDatePrinter.Rule[] mRules;

    private transient int mMaxLengthEstimate;

    protected FastDatePrinter(java.lang.String pattern, java.util.TimeZone timeZone, java.util.Locale locale) {
        mPattern = pattern;
        mTimeZone = timeZone;
        mLocale = locale;
        init();
    }

    private void init() {
        java.util.List<org.apache.commons.lang3.time.FastDatePrinter.Rule> rulesList = parsePattern();
        mRules = rulesList.toArray(new org.apache.commons.lang3.time.FastDatePrinter.Rule[rulesList.size()]);
        int len = 0;
        for (int i = mRules.length; (--i) >= 0;) {
            len += mRules[i].estimateLength();
        }
        mMaxLengthEstimate = len;
    }

    protected java.util.List<org.apache.commons.lang3.time.FastDatePrinter.Rule> parsePattern() {
        java.text.DateFormatSymbols symbols = new java.text.DateFormatSymbols(mLocale);
        java.util.List<org.apache.commons.lang3.time.FastDatePrinter.Rule> rules = new java.util.ArrayList<org.apache.commons.lang3.time.FastDatePrinter.Rule>();
        java.lang.String[] ERAs = symbols.getEras();
        java.lang.String[] months = symbols.getMonths();
        java.lang.String[] shortMonths = symbols.getShortMonths();
        java.lang.String[] weekdays = symbols.getWeekdays();
        java.lang.String[] shortWeekdays = symbols.getShortWeekdays();
        java.lang.String[] AmPmStrings = symbols.getAmPmStrings();
        int length = mPattern.length();
        int[] indexRef = new int[1];
        for (int i = 0; i < length; i++) {
            indexRef[0] = i;
            java.lang.String token = parseToken(mPattern, indexRef);
            i = indexRef[0];
            int tokenLen = token.length();
            if (tokenLen == 0) {
                break;
            }
            org.apache.commons.lang3.time.FastDatePrinter.Rule rule;
            char c = token.charAt(0);
            switch (c) {
                case 'G' :
                    rule = new org.apache.commons.lang3.time.FastDatePrinter.TextField(java.util.Calendar.ERA, ERAs);
                    break;
                case 'y' :
                    if (tokenLen == 2) {
                        rule = org.apache.commons.lang3.time.FastDatePrinter.TwoDigitYearField.INSTANCE;
                    }else {
                        rule = selectNumberRule(java.util.Calendar.YEAR, (tokenLen < 4 ? 4 : tokenLen));
                    }
                    break;
                case 'M' :
                    if (tokenLen >= 4) {
                        rule = new org.apache.commons.lang3.time.FastDatePrinter.TextField(java.util.Calendar.MONTH, months);
                    }else
                        if (tokenLen == 3) {
                            rule = new org.apache.commons.lang3.time.FastDatePrinter.TextField(java.util.Calendar.MONTH, shortMonths);
                        }else
                            if (tokenLen == 2) {
                                rule = org.apache.commons.lang3.time.FastDatePrinter.TwoDigitMonthField.INSTANCE;
                            }else {
                                rule = org.apache.commons.lang3.time.FastDatePrinter.UnpaddedMonthField.INSTANCE;
                            }


                    break;
                case 'd' :
                    rule = selectNumberRule(java.util.Calendar.DAY_OF_MONTH, tokenLen);
                    break;
                case 'h' :
                    rule = new org.apache.commons.lang3.time.FastDatePrinter.TwelveHourField(selectNumberRule(java.util.Calendar.HOUR, tokenLen));
                    break;
                case 'H' :
                    rule = selectNumberRule(java.util.Calendar.HOUR_OF_DAY, tokenLen);
                    break;
                case 'm' :
                    rule = selectNumberRule(java.util.Calendar.MINUTE, tokenLen);
                    break;
                case 's' :
                    rule = selectNumberRule(java.util.Calendar.SECOND, tokenLen);
                    break;
                case 'S' :
                    rule = selectNumberRule(java.util.Calendar.MILLISECOND, tokenLen);
                    break;
                case 'E' :
                    rule = new org.apache.commons.lang3.time.FastDatePrinter.TextField(java.util.Calendar.DAY_OF_WEEK, (tokenLen < 4 ? shortWeekdays : weekdays));
                    break;
                case 'D' :
                    rule = selectNumberRule(java.util.Calendar.DAY_OF_YEAR, tokenLen);
                    break;
                case 'F' :
                    rule = selectNumberRule(java.util.Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);
                    break;
                case 'w' :
                    rule = selectNumberRule(java.util.Calendar.WEEK_OF_YEAR, tokenLen);
                    break;
                case 'W' :
                    boolean spoonDefaultValue = false;
                    try {
                        spoonDefaultValue = true;
                    } catch (java.lang.Exception __NopolProcessorException) {
                    }
                    boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                    if (fr.inria.lille.commons.trace.RuntimeValues.instance(12).isEnabled()) {
                        fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectionStarts();
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("org.apache.commons.lang3.time.FastDatePrinter.MEDIUM",org.apache.commons.lang3.time.FastDatePrinter.MEDIUM);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("org.apache.commons.lang3.time.FastDatePrinter.this.mMaxLengthEstimate",org.apache.commons.lang3.time.FastDatePrinter.this.mMaxLengthEstimate);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("c",c);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("months",months);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("org.apache.commons.lang3.time.FastDatePrinter.cTimeZoneDisplayCache",org.apache.commons.lang3.time.FastDatePrinter.cTimeZoneDisplayCache);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("shortMonths",shortMonths);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("weekdays",weekdays);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("shortWeekdays",shortWeekdays);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("length",length);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("tokenLen",tokenLen);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("rules",rules);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("org.apache.commons.lang3.time.FastDatePrinter.this.mTimeZone",org.apache.commons.lang3.time.FastDatePrinter.this.mTimeZone);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("org.apache.commons.lang3.time.FastDatePrinter.SHORT",org.apache.commons.lang3.time.FastDatePrinter.SHORT);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("symbols",symbols);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("org.apache.commons.lang3.time.FastDatePrinter.FULL",org.apache.commons.lang3.time.FastDatePrinter.FULL);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("org.apache.commons.lang3.time.FastDatePrinter.this.mPattern",org.apache.commons.lang3.time.FastDatePrinter.this.mPattern);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("org.apache.commons.lang3.time.FastDatePrinter.this.mLocale",org.apache.commons.lang3.time.FastDatePrinter.this.mLocale);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("token",token);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("AmPmStrings",AmPmStrings);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("org.apache.commons.lang3.time.FastDatePrinter.this.mRules",org.apache.commons.lang3.time.FastDatePrinter.this.mRules);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("indexRef",indexRef);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("ERAs",ERAs);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("org.apache.commons.lang3.time.FastDatePrinter.LONG",org.apache.commons.lang3.time.FastDatePrinter.LONG);} catch (Exception ex1) {ex1.printStackTrace();};
                        fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectOutput(runtimeAngelicValue);
                        fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectionEnds();
                    }
                    if (runtimeAngelicValue)
                        rule = selectNumberRule(java.util.Calendar.WEEK_OF_MONTH, tokenLen);

                    break;
                case 'a' :
                    rule = new org.apache.commons.lang3.time.FastDatePrinter.TextField(java.util.Calendar.AM_PM, AmPmStrings);
                    break;
                case 'k' :
                    rule = new org.apache.commons.lang3.time.FastDatePrinter.TwentyFourHourField(selectNumberRule(java.util.Calendar.HOUR_OF_DAY, tokenLen));
                    break;
                case 'K' :
                    rule = selectNumberRule(java.util.Calendar.HOUR, tokenLen);
                    break;
                case 'z' :
                    if (tokenLen >= 4) {
                        rule = new org.apache.commons.lang3.time.FastDatePrinter.TimeZoneNameRule(mTimeZone, mLocale, java.util.TimeZone.LONG);
                    }else {
                        rule = new org.apache.commons.lang3.time.FastDatePrinter.TimeZoneNameRule(mTimeZone, mLocale, java.util.TimeZone.SHORT);
                    }
                    break;
                case 'Z' :
                    if (tokenLen == 1) {
                        rule = org.apache.commons.lang3.time.FastDatePrinter.TimeZoneNumberRule.INSTANCE_NO_COLON;
                    }else {
                        rule = org.apache.commons.lang3.time.FastDatePrinter.TimeZoneNumberRule.INSTANCE_COLON;
                    }
                    break;
                case '\'' :
                    java.lang.String sub = token.substring(1);
                    if ((sub.length()) == 1) {
                        rule = new org.apache.commons.lang3.time.FastDatePrinter.CharacterLiteral(sub.charAt(0));
                    }else {
                        rule = new org.apache.commons.lang3.time.FastDatePrinter.StringLiteral(sub);
                    }
                    break;
                default :
                    throw new java.lang.IllegalArgumentException(("Illegal pattern component: " + token));
            }
            rules.add(rule);
        }
        return rules;
    }

    protected java.lang.String parseToken(java.lang.String pattern, int[] indexRef) {
        java.lang.StringBuilder buf = new java.lang.StringBuilder();
        int i = indexRef[0];
        int length = pattern.length();
        char c = pattern.charAt(i);
        if (((c >= 'A') && (c <= 'Z')) || ((c >= 'a') && (c <= 'z'))) {
            buf.append(c);
            while ((i + 1) < length) {
                char peek = pattern.charAt((i + 1));
                if (peek == c) {
                    buf.append(c);
                    i++;
                }else {
                    break;
                }
            } 
        }else {
            buf.append('\'');
            boolean inLiteral = false;
            for (; i < length; i++) {
                c = pattern.charAt(i);
                if (c == '\'') {
                    if (((i + 1) < length) && ((pattern.charAt((i + 1))) == '\'')) {
                        i++;
                        buf.append(c);
                    }else {
                        inLiteral = !inLiteral;
                    }
                }else
                    if ((!inLiteral) && (((c >= 'A') && (c <= 'Z')) || ((c >= 'a') && (c <= 'z')))) {
                        i--;
                        break;
                    }else {
                        buf.append(c);
                    }

            }
        }
        indexRef[0] = i;
        return buf.toString();
    }

    protected org.apache.commons.lang3.time.FastDatePrinter.NumberRule selectNumberRule(int field, int padding) {
        switch (padding) {
            case 1 :
                return new org.apache.commons.lang3.time.FastDatePrinter.UnpaddedNumberField(field);
            case 2 :
                return new org.apache.commons.lang3.time.FastDatePrinter.TwoDigitNumberField(field);
            default :
                return new org.apache.commons.lang3.time.FastDatePrinter.PaddedNumberField(field, padding);
        }
    }

    @java.lang.Override
    public java.lang.StringBuffer format(java.lang.Object obj, java.lang.StringBuffer toAppendTo, java.text.FieldPosition pos) {
        if (obj instanceof java.util.Date) {
            return format(((java.util.Date) (obj)), toAppendTo);
        }else
            if (obj instanceof java.util.Calendar) {
                return format(((java.util.Calendar) (obj)), toAppendTo);
            }else
                if (obj instanceof java.lang.Long) {
                    return format(((java.lang.Long) (obj)).longValue(), toAppendTo);
                }else {
                    throw new java.lang.IllegalArgumentException(("Unknown class: " + (obj == null ? "<null>" : obj.getClass().getName())));
                }


    }

    @java.lang.Override
    public java.lang.String format(long millis) {
        return format(new java.util.Date(millis));
    }

    @java.lang.Override
    public java.lang.String format(java.util.Date date) {
        java.util.Calendar c = new java.util.GregorianCalendar(mTimeZone, mLocale);
        c.setTime(date);
        return applyRules(c, new java.lang.StringBuffer(mMaxLengthEstimate)).toString();
    }

    @java.lang.Override
    public java.lang.String format(java.util.Calendar calendar) {
        return format(calendar, new java.lang.StringBuffer(mMaxLengthEstimate)).toString();
    }

    @java.lang.Override
    public java.lang.StringBuffer format(long millis, java.lang.StringBuffer buf) {
        return format(new java.util.Date(millis), buf);
    }

    @java.lang.Override
    public java.lang.StringBuffer format(java.util.Date date, java.lang.StringBuffer buf) {
        java.util.Calendar c = new java.util.GregorianCalendar(mTimeZone, mLocale);
        c.setTime(date);
        return applyRules(c, buf);
    }

    @java.lang.Override
    public java.lang.StringBuffer format(java.util.Calendar calendar, java.lang.StringBuffer buf) {
        return applyRules(calendar, buf);
    }

    protected java.lang.StringBuffer applyRules(java.util.Calendar calendar, java.lang.StringBuffer buf) {
        for (org.apache.commons.lang3.time.FastDatePrinter.Rule rule : mRules) {
            rule.appendTo(buf, calendar);
        }
        return buf;
    }

    @java.lang.Override
    public java.lang.String getPattern() {
        return mPattern;
    }

    @java.lang.Override
    public java.util.TimeZone getTimeZone() {
        return mTimeZone;
    }

    @java.lang.Override
    public java.util.Locale getLocale() {
        return mLocale;
    }

    public int getMaxLengthEstimate() {
        return mMaxLengthEstimate;
    }

    @java.lang.Override
    public boolean equals(java.lang.Object obj) {
        if ((obj instanceof org.apache.commons.lang3.time.FastDatePrinter) == false) {
            return false;
        }
        org.apache.commons.lang3.time.FastDatePrinter other = ((org.apache.commons.lang3.time.FastDatePrinter) (obj));
        return ((mPattern.equals(other.mPattern)) && (mTimeZone.equals(other.mTimeZone))) && (mLocale.equals(other.mLocale));
    }

    @java.lang.Override
    public int hashCode() {
        return (mPattern.hashCode()) + (13 * ((mTimeZone.hashCode()) + (13 * (mLocale.hashCode()))));
    }

    @java.lang.Override
    public java.lang.String toString() {
        return ((((("FastDatePrinter[" + (mPattern)) + ",") + (mLocale)) + ",") + (mTimeZone.getID())) + "]";
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
        in.defaultReadObject();
        init();
    }

    private interface Rule {
        int estimateLength();

        void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar);
    }

    private interface NumberRule extends org.apache.commons.lang3.time.FastDatePrinter.Rule {
        void appendTo(java.lang.StringBuffer buffer, int value);
    }

    private static class CharacterLiteral implements org.apache.commons.lang3.time.FastDatePrinter.Rule {
        private final char mValue;

        CharacterLiteral(char value) {
            mValue = value;
        }

        @java.lang.Override
        public int estimateLength() {
            return 1;
        }

        @java.lang.Override
        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            buffer.append(mValue);
        }
    }

    private static class StringLiteral implements org.apache.commons.lang3.time.FastDatePrinter.Rule {
        private final java.lang.String mValue;

        StringLiteral(java.lang.String value) {
            mValue = value;
        }

        @java.lang.Override
        public int estimateLength() {
            return mValue.length();
        }

        @java.lang.Override
        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            buffer.append(mValue);
        }
    }

    private static class TextField implements org.apache.commons.lang3.time.FastDatePrinter.Rule {
        private final int mField;

        private final java.lang.String[] mValues;

        TextField(int field, java.lang.String[] values) {
            mField = field;
            mValues = values;
        }

        @java.lang.Override
        public int estimateLength() {
            int max = 0;
            for (int i = mValues.length; (--i) >= 0;) {
                int len = mValues[i].length();
                if (len > max) {
                    max = len;
                }
            }
            return max;
        }

        @java.lang.Override
        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            buffer.append(mValues[calendar.get(mField)]);
        }
    }

    private static class UnpaddedNumberField implements org.apache.commons.lang3.time.FastDatePrinter.NumberRule {
        private final int mField;

        UnpaddedNumberField(int field) {
            mField = field;
        }

        @java.lang.Override
        public int estimateLength() {
            return 4;
        }

        @java.lang.Override
        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            appendTo(buffer, calendar.get(mField));
        }

        @java.lang.Override
        public final void appendTo(java.lang.StringBuffer buffer, int value) {
            if (value < 10) {
                buffer.append(((char) (value + '0')));
            }else
                if (value < 100) {
                    buffer.append(((char) ((value / 10) + '0')));
                    buffer.append(((char) ((value % 10) + '0')));
                }else {
                    buffer.append(java.lang.Integer.toString(value));
                }

        }
    }

    private static class UnpaddedMonthField implements org.apache.commons.lang3.time.FastDatePrinter.NumberRule {
        static final org.apache.commons.lang3.time.FastDatePrinter.UnpaddedMonthField INSTANCE = new org.apache.commons.lang3.time.FastDatePrinter.UnpaddedMonthField();

        UnpaddedMonthField() {
            super();
        }

        @java.lang.Override
        public int estimateLength() {
            return 2;
        }

        @java.lang.Override
        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            appendTo(buffer, ((calendar.get(java.util.Calendar.MONTH)) + 1));
        }

        @java.lang.Override
        public final void appendTo(java.lang.StringBuffer buffer, int value) {
            if (value < 10) {
                buffer.append(((char) (value + '0')));
            }else {
                buffer.append(((char) ((value / 10) + '0')));
                buffer.append(((char) ((value % 10) + '0')));
            }
        }
    }

    private static class PaddedNumberField implements org.apache.commons.lang3.time.FastDatePrinter.NumberRule {
        private final int mField;

        private final int mSize;

        PaddedNumberField(int field, int size) {
            if (size < 3) {
                throw new java.lang.IllegalArgumentException();
            }
            mField = field;
            mSize = size;
        }

        @java.lang.Override
        public int estimateLength() {
            return 4;
        }

        @java.lang.Override
        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            appendTo(buffer, calendar.get(mField));
        }

        @java.lang.Override
        public final void appendTo(java.lang.StringBuffer buffer, int value) {
            if (value < 100) {
                for (int i = mSize; (--i) >= 2;) {
                    buffer.append('0');
                }
                buffer.append(((char) ((value / 10) + '0')));
                buffer.append(((char) ((value % 10) + '0')));
            }else {
                int digits;
                if (value < 1000) {
                    digits = 3;
                }else {
                    org.apache.commons.lang3.Validate.isTrue((value > (-1)), "Negative values should not be possible", value);
                    digits = java.lang.Integer.toString(value).length();
                }
                for (int i = mSize; (--i) >= digits;) {
                    buffer.append('0');
                }
                buffer.append(java.lang.Integer.toString(value));
            }
        }
    }

    private static class TwoDigitNumberField implements org.apache.commons.lang3.time.FastDatePrinter.NumberRule {
        private final int mField;

        TwoDigitNumberField(int field) {
            mField = field;
        }

        @java.lang.Override
        public int estimateLength() {
            return 2;
        }

        @java.lang.Override
        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            appendTo(buffer, calendar.get(mField));
        }

        @java.lang.Override
        public final void appendTo(java.lang.StringBuffer buffer, int value) {
            if (value < 100) {
                buffer.append(((char) ((value / 10) + '0')));
                buffer.append(((char) ((value % 10) + '0')));
            }else {
                buffer.append(java.lang.Integer.toString(value));
            }
        }
    }

    private static class TwoDigitYearField implements org.apache.commons.lang3.time.FastDatePrinter.NumberRule {
        static final org.apache.commons.lang3.time.FastDatePrinter.TwoDigitYearField INSTANCE = new org.apache.commons.lang3.time.FastDatePrinter.TwoDigitYearField();

        TwoDigitYearField() {
            super();
        }

        @java.lang.Override
        public int estimateLength() {
            return 2;
        }

        @java.lang.Override
        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            appendTo(buffer, ((calendar.get(java.util.Calendar.YEAR)) % 100));
        }

        @java.lang.Override
        public final void appendTo(java.lang.StringBuffer buffer, int value) {
            buffer.append(((char) ((value / 10) + '0')));
            buffer.append(((char) ((value % 10) + '0')));
        }
    }

    private static class TwoDigitMonthField implements org.apache.commons.lang3.time.FastDatePrinter.NumberRule {
        static final org.apache.commons.lang3.time.FastDatePrinter.TwoDigitMonthField INSTANCE = new org.apache.commons.lang3.time.FastDatePrinter.TwoDigitMonthField();

        TwoDigitMonthField() {
            super();
        }

        @java.lang.Override
        public int estimateLength() {
            return 2;
        }

        @java.lang.Override
        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            appendTo(buffer, ((calendar.get(java.util.Calendar.MONTH)) + 1));
        }

        @java.lang.Override
        public final void appendTo(java.lang.StringBuffer buffer, int value) {
            buffer.append(((char) ((value / 10) + '0')));
            buffer.append(((char) ((value % 10) + '0')));
        }
    }

    private static class TwelveHourField implements org.apache.commons.lang3.time.FastDatePrinter.NumberRule {
        private final org.apache.commons.lang3.time.FastDatePrinter.NumberRule mRule;

        TwelveHourField(org.apache.commons.lang3.time.FastDatePrinter.NumberRule rule) {
            mRule = rule;
        }

        @java.lang.Override
        public int estimateLength() {
            return mRule.estimateLength();
        }

        @java.lang.Override
        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            int value = calendar.get(java.util.Calendar.HOUR);
            if (value == 0) {
                value = (calendar.getLeastMaximum(java.util.Calendar.HOUR)) + 1;
            }
            mRule.appendTo(buffer, value);
        }

        @java.lang.Override
        public void appendTo(java.lang.StringBuffer buffer, int value) {
            mRule.appendTo(buffer, value);
        }
    }

    private static class TwentyFourHourField implements org.apache.commons.lang3.time.FastDatePrinter.NumberRule {
        private final org.apache.commons.lang3.time.FastDatePrinter.NumberRule mRule;

        TwentyFourHourField(org.apache.commons.lang3.time.FastDatePrinter.NumberRule rule) {
            mRule = rule;
        }

        @java.lang.Override
        public int estimateLength() {
            return mRule.estimateLength();
        }

        @java.lang.Override
        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            int value = calendar.get(java.util.Calendar.HOUR_OF_DAY);
            if (value == 0) {
                value = (calendar.getMaximum(java.util.Calendar.HOUR_OF_DAY)) + 1;
            }
            mRule.appendTo(buffer, value);
        }

        @java.lang.Override
        public void appendTo(java.lang.StringBuffer buffer, int value) {
            mRule.appendTo(buffer, value);
        }
    }

    private static java.util.concurrent.ConcurrentMap<org.apache.commons.lang3.time.FastDatePrinter.TimeZoneDisplayKey, java.lang.String> cTimeZoneDisplayCache = new java.util.concurrent.ConcurrentHashMap<org.apache.commons.lang3.time.FastDatePrinter.TimeZoneDisplayKey, java.lang.String>(7);

    static java.lang.String getTimeZoneDisplay(java.util.TimeZone tz, boolean daylight, int style, java.util.Locale locale) {
        org.apache.commons.lang3.time.FastDatePrinter.TimeZoneDisplayKey key = new org.apache.commons.lang3.time.FastDatePrinter.TimeZoneDisplayKey(tz, daylight, style, locale);
        java.lang.String value = org.apache.commons.lang3.time.FastDatePrinter.cTimeZoneDisplayCache.get(key);
        if (value == null) {
            value = tz.getDisplayName(daylight, style, locale);
            java.lang.String prior = org.apache.commons.lang3.time.FastDatePrinter.cTimeZoneDisplayCache.putIfAbsent(key, value);
            if (prior != null) {
                value = prior;
            }
        }
        return value;
    }

    private static class TimeZoneNameRule implements org.apache.commons.lang3.time.FastDatePrinter.Rule {
        private final java.util.Locale mLocale;

        private final int mStyle;

        private final java.util.TimeZone zone;

        private final java.lang.String mStandard;

        private final java.lang.String mDaylight;

        TimeZoneNameRule(java.util.TimeZone timeZone, java.util.Locale locale, int style) {
            mLocale = locale;
            mStyle = style;
            zone = timeZone;
            mStandard = org.apache.commons.lang3.time.FastDatePrinter.getTimeZoneDisplay(timeZone, false, style, locale);
            mDaylight = org.apache.commons.lang3.time.FastDatePrinter.getTimeZoneDisplay(timeZone, true, style, locale);
        }

        @java.lang.Override
        public int estimateLength() {
            return java.lang.Math.max(mStandard.length(), mDaylight.length());
        }

        @java.lang.Override
        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            if ((zone.useDaylightTime()) && ((calendar.get(java.util.Calendar.DST_OFFSET)) != 0)) {
                buffer.append(org.apache.commons.lang3.time.FastDatePrinter.getTimeZoneDisplay(zone, true, mStyle, mLocale));
            }else {
                buffer.append(org.apache.commons.lang3.time.FastDatePrinter.getTimeZoneDisplay(zone, false, mStyle, mLocale));
            }
        }
    }

    private static class TimeZoneNumberRule implements org.apache.commons.lang3.time.FastDatePrinter.Rule {
        static final org.apache.commons.lang3.time.FastDatePrinter.TimeZoneNumberRule INSTANCE_COLON = new org.apache.commons.lang3.time.FastDatePrinter.TimeZoneNumberRule(true);

        static final org.apache.commons.lang3.time.FastDatePrinter.TimeZoneNumberRule INSTANCE_NO_COLON = new org.apache.commons.lang3.time.FastDatePrinter.TimeZoneNumberRule(false);

        final boolean mColon;

        TimeZoneNumberRule(boolean colon) {
            mColon = colon;
        }

        @java.lang.Override
        public int estimateLength() {
            return 5;
        }

        @java.lang.Override
        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            int offset = (calendar.get(java.util.Calendar.ZONE_OFFSET)) + (calendar.get(java.util.Calendar.DST_OFFSET));
            if (offset < 0) {
                buffer.append('-');
                offset = -offset;
            }else {
                buffer.append('+');
            }
            int hours = offset / ((60 * 60) * 1000);
            buffer.append(((char) ((hours / 10) + '0')));
            buffer.append(((char) ((hours % 10) + '0')));
            if (mColon) {
                buffer.append(':');
            }
            int minutes = (offset / (60 * 1000)) - (60 * hours);
            buffer.append(((char) ((minutes / 10) + '0')));
            buffer.append(((char) ((minutes % 10) + '0')));
        }
    }

    private static class TimeZoneDisplayKey {
        private final java.util.TimeZone mTimeZone;

        private final int mStyle;

        private final java.util.Locale mLocale;

        TimeZoneDisplayKey(java.util.TimeZone timeZone, boolean daylight, int style, java.util.Locale locale) {
            mTimeZone = timeZone;
            if (daylight) {
                style |= -2147483648;
            }
            mStyle = style;
            mLocale = locale;
        }

        @java.lang.Override
        public int hashCode() {
            return ((((mStyle) * 31) + (mLocale.hashCode())) * 31) + (mTimeZone.hashCode());
        }

        @java.lang.Override
        public boolean equals(java.lang.Object obj) {
            if ((this) == obj) {
                return true;
            }
            if (obj instanceof org.apache.commons.lang3.time.FastDatePrinter.TimeZoneDisplayKey) {
                org.apache.commons.lang3.time.FastDatePrinter.TimeZoneDisplayKey other = ((org.apache.commons.lang3.time.FastDatePrinter.TimeZoneDisplayKey) (obj));
                return ((mTimeZone.equals(other.mTimeZone)) && ((mStyle) == (other.mStyle))) && (mLocale.equals(other.mLocale));
            }
            return false;
        }
    }
}
19:07:01.983 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
19:07:01.983 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #60
19:07:01.983 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang3.time.DurationFormatUtils:458 which is executed by 5 tests
-1439815513
19:07:02.063 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
19:07:12.211 [pool-80-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (10143 ms)
<> Total tests run: 29
<> Ignored tests: 0
<> Failed tests: 0

19:07:12.212 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
19:07:12.212 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #61
19:07:12.212 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang3.time.DurationFormatUtils:457 which is executed by 5 tests
-1439815513
19:07:12.305 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #62
19:07:12.305 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang3.time.DurationFormatUtils:456 which is executed by 5 tests
-1439815513
19:07:12.387 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
19:07:22.534 [pool-82-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (10142 ms)
<> Total tests run: 29
<> Ignored tests: 0
<> Failed tests: 0

19:07:22.534 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
19:07:22.534 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #63
19:07:22.534 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang3.time.FastDatePrinter:588 which is executed by 14 tests
1615201905
19:07:22.628 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #64
19:07:22.628 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang3.time.DurationFormatUtils:554 which is executed by 10 tests
-1439815513
19:07:22.708 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
19:07:33.403 [pool-84-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (10690 ms)
<> Total tests run: 44
<> Ignored tests: 0
<> Failed tests: 0

19:07:33.403 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
19:07:33.403 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #65
19:07:33.403 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang3.time.DurationFormatUtils$Token:621 which is executed by 10 tests
-1439815513
19:07:33.491 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #66
19:07:33.491 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang3.time.DurationFormatUtils$Token:620 which is executed by 10 tests
-1439815513
19:07:33.582 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
19:07:44.201 [pool-86-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (10614 ms)
<> Total tests run: 44
<> Ignored tests: 0
<> Failed tests: 0

19:07:44.202 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
19:07:44.202 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
19:07:54.828 [pool-88-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (10621 ms)
<> Total tests run: 44
<> Ignored tests: 0
<> Failed tests: 0

19:07:54.828 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
19:07:54.828 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #67
19:07:54.829 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang3.time.FastDatePrinter$TwoDigitNumberField:1059 which is executed by 42 tests
1615201905
19:07:54.927 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #68
19:07:54.928 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang3.time.FastDatePrinter:387 which is executed by 42 tests
1615201905
19:07:55.016 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.junit.ComparisonFailure: expected:<7:07AM [IC]T> but was:<7:07AM [ES]T>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected(FastDatePrinterTest.java:286)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
org.junit.ComparisonFailure: expected:<7:07AM [IC]T> but was:<7:07AM [ES]T>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected(FastDatePrinterTest.java:286)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
19:07:55.702 [pool-90-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (678 ms)
<> Total tests run: 88
<> Ignored tests: 0
<> Failed tests: 2
~ testCalendarTimezoneRespected(org.apache.commons.lang3.time.FastDateFormat_PrinterTest)
[expected:<7:07AM [IC]T> but was:<7:07AM [ES]T>]
org.junit.ComparisonFailure: expected:<7:07AM [IC]T> but was:<7:07AM [ES]T>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected(FastDatePrinterTest.java:286)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
~ testCalendarTimezoneRespected(org.apache.commons.lang3.time.FastDatePrinterTest)
[expected:<7:07AM [IC]T> but was:<7:07AM [ES]T>]
org.junit.ComparisonFailure: expected:<7:07AM [IC]T> but was:<7:07AM [ES]T>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected(FastDatePrinterTest.java:286)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

19:07:56.236 [pool-89-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
FastDatePrinter.java:253: error: missing return statement
    }
    ^
19:07:56.609 [pool-89-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public class FastDatePrinter implements java.io.Serializable , org.apache.commons.lang3.time.DatePrinter {
    private static final long serialVersionUID = 1L;

    public static final int FULL = java.text.DateFormat.FULL;

    public static final int LONG = java.text.DateFormat.LONG;

    public static final int MEDIUM = java.text.DateFormat.MEDIUM;

    public static final int SHORT = java.text.DateFormat.SHORT;

    private final java.lang.String mPattern;

    private final java.util.TimeZone mTimeZone;

    private final java.util.Locale mLocale;

    private transient org.apache.commons.lang3.time.FastDatePrinter.Rule[] mRules;

    private transient int mMaxLengthEstimate;

    protected FastDatePrinter(java.lang.String pattern, java.util.TimeZone timeZone, java.util.Locale locale) {
        mPattern = pattern;
        mTimeZone = timeZone;
        mLocale = locale;
        init();
    }

    private void init() {
        java.util.List<org.apache.commons.lang3.time.FastDatePrinter.Rule> rulesList = parsePattern();
        mRules = rulesList.toArray(new org.apache.commons.lang3.time.FastDatePrinter.Rule[rulesList.size()]);
        int len = 0;
        for (int i = mRules.length; (--i) >= 0;) {
            len += mRules[i].estimateLength();
        }
        mMaxLengthEstimate = len;
    }

    protected java.util.List<org.apache.commons.lang3.time.FastDatePrinter.Rule> parsePattern() {
        java.text.DateFormatSymbols symbols = new java.text.DateFormatSymbols(mLocale);
        java.util.List<org.apache.commons.lang3.time.FastDatePrinter.Rule> rules = new java.util.ArrayList<org.apache.commons.lang3.time.FastDatePrinter.Rule>();
        java.lang.String[] ERAs = symbols.getEras();
        java.lang.String[] months = symbols.getMonths();
        java.lang.String[] shortMonths = symbols.getShortMonths();
        java.lang.String[] weekdays = symbols.getWeekdays();
        java.lang.String[] shortWeekdays = symbols.getShortWeekdays();
        java.lang.String[] AmPmStrings = symbols.getAmPmStrings();
        int length = mPattern.length();
        int[] indexRef = new int[1];
        for (int i = 0; i < length; i++) {
            indexRef[0] = i;
            java.lang.String token = parseToken(mPattern, indexRef);
            i = indexRef[0];
            int tokenLen = token.length();
            if (tokenLen == 0) {
                break;
            }
            org.apache.commons.lang3.time.FastDatePrinter.Rule rule;
            char c = token.charAt(0);
            switch (c) {
                case 'G' :
                    rule = new org.apache.commons.lang3.time.FastDatePrinter.TextField(java.util.Calendar.ERA, ERAs);
                    break;
                case 'y' :
                    if (tokenLen == 2) {
                        rule = org.apache.commons.lang3.time.FastDatePrinter.TwoDigitYearField.INSTANCE;
                    }else {
                        rule = selectNumberRule(java.util.Calendar.YEAR, (tokenLen < 4 ? 4 : tokenLen));
                    }
                    break;
                case 'M' :
                    if (tokenLen >= 4) {
                        rule = new org.apache.commons.lang3.time.FastDatePrinter.TextField(java.util.Calendar.MONTH, months);
                    }else
                        if (tokenLen == 3) {
                            rule = new org.apache.commons.lang3.time.FastDatePrinter.TextField(java.util.Calendar.MONTH, shortMonths);
                        }else
                            if (tokenLen == 2) {
                                rule = org.apache.commons.lang3.time.FastDatePrinter.TwoDigitMonthField.INSTANCE;
                            }else {
                                rule = org.apache.commons.lang3.time.FastDatePrinter.UnpaddedMonthField.INSTANCE;
                            }


                    break;
                case 'd' :
                    rule = selectNumberRule(java.util.Calendar.DAY_OF_MONTH, tokenLen);
                    break;
                case 'h' :
                    rule = new org.apache.commons.lang3.time.FastDatePrinter.TwelveHourField(selectNumberRule(java.util.Calendar.HOUR, tokenLen));
                    break;
                case 'H' :
                    rule = selectNumberRule(java.util.Calendar.HOUR_OF_DAY, tokenLen);
                    break;
                case 'm' :
                    rule = selectNumberRule(java.util.Calendar.MINUTE, tokenLen);
                    break;
                case 's' :
                    rule = selectNumberRule(java.util.Calendar.SECOND, tokenLen);
                    break;
                case 'S' :
                    rule = selectNumberRule(java.util.Calendar.MILLISECOND, tokenLen);
                    break;
                case 'E' :
                    rule = new org.apache.commons.lang3.time.FastDatePrinter.TextField(java.util.Calendar.DAY_OF_WEEK, (tokenLen < 4 ? shortWeekdays : weekdays));
                    break;
                case 'D' :
                    rule = selectNumberRule(java.util.Calendar.DAY_OF_YEAR, tokenLen);
                    break;
                case 'F' :
                    rule = selectNumberRule(java.util.Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);
                    break;
                case 'w' :
                    rule = selectNumberRule(java.util.Calendar.WEEK_OF_YEAR, tokenLen);
                    break;
                case 'W' :
                    rule = selectNumberRule(java.util.Calendar.WEEK_OF_MONTH, tokenLen);
                    break;
                case 'a' :
                    rule = new org.apache.commons.lang3.time.FastDatePrinter.TextField(java.util.Calendar.AM_PM, AmPmStrings);
                    break;
                case 'k' :
                    rule = new org.apache.commons.lang3.time.FastDatePrinter.TwentyFourHourField(selectNumberRule(java.util.Calendar.HOUR_OF_DAY, tokenLen));
                    break;
                case 'K' :
                    rule = selectNumberRule(java.util.Calendar.HOUR, tokenLen);
                    break;
                case 'z' :
                    if (tokenLen >= 4) {
                        rule = new org.apache.commons.lang3.time.FastDatePrinter.TimeZoneNameRule(mTimeZone, mLocale, java.util.TimeZone.LONG);
                    }else {
                        rule = new org.apache.commons.lang3.time.FastDatePrinter.TimeZoneNameRule(mTimeZone, mLocale, java.util.TimeZone.SHORT);
                    }
                    break;
                case 'Z' :
                    if (tokenLen == 1) {
                        rule = org.apache.commons.lang3.time.FastDatePrinter.TimeZoneNumberRule.INSTANCE_NO_COLON;
                    }else {
                        rule = org.apache.commons.lang3.time.FastDatePrinter.TimeZoneNumberRule.INSTANCE_COLON;
                    }
                    break;
                case '\'' :
                    java.lang.String sub = token.substring(1);
                    if ((sub.length()) == 1) {
                        rule = new org.apache.commons.lang3.time.FastDatePrinter.CharacterLiteral(sub.charAt(0));
                    }else {
                        rule = new org.apache.commons.lang3.time.FastDatePrinter.StringLiteral(sub);
                    }
                    break;
                default :
                    throw new java.lang.IllegalArgumentException(("Illegal pattern component: " + token));
            }
            rules.add(rule);
        }
        return rules;
    }

    protected java.lang.String parseToken(java.lang.String pattern, int[] indexRef) {
        java.lang.StringBuilder buf = new java.lang.StringBuilder();
        int i = indexRef[0];
        int length = pattern.length();
        char c = pattern.charAt(i);
        if (((c >= 'A') && (c <= 'Z')) || ((c >= 'a') && (c <= 'z'))) {
            buf.append(c);
            while ((i + 1) < length) {
                char peek = pattern.charAt((i + 1));
                if (peek == c) {
                    buf.append(c);
                    i++;
                }else {
                    break;
                }
            } 
        }else {
            buf.append('\'');
            boolean inLiteral = false;
            for (; i < length; i++) {
                c = pattern.charAt(i);
                if (c == '\'') {
                    if (((i + 1) < length) && ((pattern.charAt((i + 1))) == '\'')) {
                        i++;
                        buf.append(c);
                    }else {
                        inLiteral = !inLiteral;
                    }
                }else
                    if ((!inLiteral) && (((c >= 'A') && (c <= 'Z')) || ((c >= 'a') && (c <= 'z')))) {
                        i--;
                        break;
                    }else {
                        buf.append(c);
                    }

            }
        }
        indexRef[0] = i;
        return buf.toString();
    }

    protected org.apache.commons.lang3.time.FastDatePrinter.NumberRule selectNumberRule(int field, int padding) {
        switch (padding) {
            case 1 :
                return new org.apache.commons.lang3.time.FastDatePrinter.UnpaddedNumberField(field);
            case 2 :
                return new org.apache.commons.lang3.time.FastDatePrinter.TwoDigitNumberField(field);
            default :
                return new org.apache.commons.lang3.time.FastDatePrinter.PaddedNumberField(field, padding);
        }
    }

    @java.lang.Override
    public java.lang.StringBuffer format(java.lang.Object obj, java.lang.StringBuffer toAppendTo, java.text.FieldPosition pos) {
        if (obj instanceof java.util.Date) {
            return format(((java.util.Date) (obj)), toAppendTo);
        }else
            if (obj instanceof java.util.Calendar) {
                return format(((java.util.Calendar) (obj)), toAppendTo);
            }else
                if (obj instanceof java.lang.Long) {
                    return format(((java.lang.Long) (obj)).longValue(), toAppendTo);
                }else {
                    boolean spoonDefaultValue = false;
                    try {
                        spoonDefaultValue = true;
                    } catch (java.lang.Exception __NopolProcessorException) {
                    }
                    boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                    if (fr.inria.lille.commons.trace.RuntimeValues.instance(13).isEnabled()) {
                        fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectionStarts();
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("org.apache.commons.lang3.time.FastDatePrinter.MEDIUM",org.apache.commons.lang3.time.FastDatePrinter.MEDIUM);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("org.apache.commons.lang3.time.FastDatePrinter.this.mMaxLengthEstimate",org.apache.commons.lang3.time.FastDatePrinter.this.mMaxLengthEstimate);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("org.apache.commons.lang3.time.FastDatePrinter.cTimeZoneDisplayCache",org.apache.commons.lang3.time.FastDatePrinter.cTimeZoneDisplayCache);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("org.apache.commons.lang3.time.FastDatePrinter.this.mTimeZone",org.apache.commons.lang3.time.FastDatePrinter.this.mTimeZone);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("toAppendTo",toAppendTo);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("org.apache.commons.lang3.time.FastDatePrinter.SHORT",org.apache.commons.lang3.time.FastDatePrinter.SHORT);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("org.apache.commons.lang3.time.FastDatePrinter.FULL",org.apache.commons.lang3.time.FastDatePrinter.FULL);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("org.apache.commons.lang3.time.FastDatePrinter.this.mPattern",org.apache.commons.lang3.time.FastDatePrinter.this.mPattern);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("org.apache.commons.lang3.time.FastDatePrinter.this.mLocale",org.apache.commons.lang3.time.FastDatePrinter.this.mLocale);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("org.apache.commons.lang3.time.FastDatePrinter.this.mRules",org.apache.commons.lang3.time.FastDatePrinter.this.mRules);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("pos",pos);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("obj",obj);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("org.apache.commons.lang3.time.FastDatePrinter.LONG",org.apache.commons.lang3.time.FastDatePrinter.LONG);} catch (Exception ex1) {ex1.printStackTrace();};
                        fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectOutput(runtimeAngelicValue);
                        fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectionEnds();
                    }
                    if (runtimeAngelicValue)
                        throw new java.lang.IllegalArgumentException(("Unknown class: " + (obj == null ? "<null>" : obj.getClass().getName())));

                }


    }

    @java.lang.Override
    public java.lang.String format(long millis) {
        return format(new java.util.Date(millis));
    }

    @java.lang.Override
    public java.lang.String format(java.util.Date date) {
        java.util.Calendar c = new java.util.GregorianCalendar(mTimeZone, mLocale);
        c.setTime(date);
        return applyRules(c, new java.lang.StringBuffer(mMaxLengthEstimate)).toString();
    }

    @java.lang.Override
    public java.lang.String format(java.util.Calendar calendar) {
        return format(calendar, new java.lang.StringBuffer(mMaxLengthEstimate)).toString();
    }

    @java.lang.Override
    public java.lang.StringBuffer format(long millis, java.lang.StringBuffer buf) {
        return format(new java.util.Date(millis), buf);
    }

    @java.lang.Override
    public java.lang.StringBuffer format(java.util.Date date, java.lang.StringBuffer buf) {
        java.util.Calendar c = new java.util.GregorianCalendar(mTimeZone, mLocale);
        c.setTime(date);
        return applyRules(c, buf);
    }

    @java.lang.Override
    public java.lang.StringBuffer format(java.util.Calendar calendar, java.lang.StringBuffer buf) {
        return applyRules(calendar, buf);
    }

    protected java.lang.StringBuffer applyRules(java.util.Calendar calendar, java.lang.StringBuffer buf) {
        for (org.apache.commons.lang3.time.FastDatePrinter.Rule rule : mRules) {
            rule.appendTo(buf, calendar);
        }
        return buf;
    }

    @java.lang.Override
    public java.lang.String getPattern() {
        return mPattern;
    }

    @java.lang.Override
    public java.util.TimeZone getTimeZone() {
        return mTimeZone;
    }

    @java.lang.Override
    public java.util.Locale getLocale() {
        return mLocale;
    }

    public int getMaxLengthEstimate() {
        return mMaxLengthEstimate;
    }

    @java.lang.Override
    public boolean equals(java.lang.Object obj) {
        if ((obj instanceof org.apache.commons.lang3.time.FastDatePrinter) == false) {
            return false;
        }
        org.apache.commons.lang3.time.FastDatePrinter other = ((org.apache.commons.lang3.time.FastDatePrinter) (obj));
        return ((mPattern.equals(other.mPattern)) && (mTimeZone.equals(other.mTimeZone))) && (mLocale.equals(other.mLocale));
    }

    @java.lang.Override
    public int hashCode() {
        return (mPattern.hashCode()) + (13 * ((mTimeZone.hashCode()) + (13 * (mLocale.hashCode()))));
    }

    @java.lang.Override
    public java.lang.String toString() {
        return ((((("FastDatePrinter[" + (mPattern)) + ",") + (mLocale)) + ",") + (mTimeZone.getID())) + "]";
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
        in.defaultReadObject();
        init();
    }

    private interface Rule {
        int estimateLength();

        void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar);
    }

    private interface NumberRule extends org.apache.commons.lang3.time.FastDatePrinter.Rule {
        void appendTo(java.lang.StringBuffer buffer, int value);
    }

    private static class CharacterLiteral implements org.apache.commons.lang3.time.FastDatePrinter.Rule {
        private final char mValue;

        CharacterLiteral(char value) {
            mValue = value;
        }

        @java.lang.Override
        public int estimateLength() {
            return 1;
        }

        @java.lang.Override
        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            buffer.append(mValue);
        }
    }

    private static class StringLiteral implements org.apache.commons.lang3.time.FastDatePrinter.Rule {
        private final java.lang.String mValue;

        StringLiteral(java.lang.String value) {
            mValue = value;
        }

        @java.lang.Override
        public int estimateLength() {
            return mValue.length();
        }

        @java.lang.Override
        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            buffer.append(mValue);
        }
    }

    private static class TextField implements org.apache.commons.lang3.time.FastDatePrinter.Rule {
        private final int mField;

        private final java.lang.String[] mValues;

        TextField(int field, java.lang.String[] values) {
            mField = field;
            mValues = values;
        }

        @java.lang.Override
        public int estimateLength() {
            int max = 0;
            for (int i = mValues.length; (--i) >= 0;) {
                int len = mValues[i].length();
                if (len > max) {
                    max = len;
                }
            }
            return max;
        }

        @java.lang.Override
        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            buffer.append(mValues[calendar.get(mField)]);
        }
    }

    private static class UnpaddedNumberField implements org.apache.commons.lang3.time.FastDatePrinter.NumberRule {
        private final int mField;

        UnpaddedNumberField(int field) {
            mField = field;
        }

        @java.lang.Override
        public int estimateLength() {
            return 4;
        }

        @java.lang.Override
        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            appendTo(buffer, calendar.get(mField));
        }

        @java.lang.Override
        public final void appendTo(java.lang.StringBuffer buffer, int value) {
            if (value < 10) {
                buffer.append(((char) (value + '0')));
            }else
                if (value < 100) {
                    buffer.append(((char) ((value / 10) + '0')));
                    buffer.append(((char) ((value % 10) + '0')));
                }else {
                    buffer.append(java.lang.Integer.toString(value));
                }

        }
    }

    private static class UnpaddedMonthField implements org.apache.commons.lang3.time.FastDatePrinter.NumberRule {
        static final org.apache.commons.lang3.time.FastDatePrinter.UnpaddedMonthField INSTANCE = new org.apache.commons.lang3.time.FastDatePrinter.UnpaddedMonthField();

        UnpaddedMonthField() {
            super();
        }

        @java.lang.Override
        public int estimateLength() {
            return 2;
        }

        @java.lang.Override
        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            appendTo(buffer, ((calendar.get(java.util.Calendar.MONTH)) + 1));
        }

        @java.lang.Override
        public final void appendTo(java.lang.StringBuffer buffer, int value) {
            if (value < 10) {
                buffer.append(((char) (value + '0')));
            }else {
                buffer.append(((char) ((value / 10) + '0')));
                buffer.append(((char) ((value % 10) + '0')));
            }
        }
    }

    private static class PaddedNumberField implements org.apache.commons.lang3.time.FastDatePrinter.NumberRule {
        private final int mField;

        private final int mSize;

        PaddedNumberField(int field, int size) {
            if (size < 3) {
                throw new java.lang.IllegalArgumentException();
            }
            mField = field;
            mSize = size;
        }

        @java.lang.Override
        public int estimateLength() {
            return 4;
        }

        @java.lang.Override
        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            appendTo(buffer, calendar.get(mField));
        }

        @java.lang.Override
        public final void appendTo(java.lang.StringBuffer buffer, int value) {
            if (value < 100) {
                for (int i = mSize; (--i) >= 2;) {
                    buffer.append('0');
                }
                buffer.append(((char) ((value / 10) + '0')));
                buffer.append(((char) ((value % 10) + '0')));
            }else {
                int digits;
                if (value < 1000) {
                    digits = 3;
                }else {
                    org.apache.commons.lang3.Validate.isTrue((value > (-1)), "Negative values should not be possible", value);
                    digits = java.lang.Integer.toString(value).length();
                }
                for (int i = mSize; (--i) >= digits;) {
                    buffer.append('0');
                }
                buffer.append(java.lang.Integer.toString(value));
            }
        }
    }

    private static class TwoDigitNumberField implements org.apache.commons.lang3.time.FastDatePrinter.NumberRule {
        private final int mField;

        TwoDigitNumberField(int field) {
            mField = field;
        }

        @java.lang.Override
        public int estimateLength() {
            return 2;
        }

        @java.lang.Override
        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            appendTo(buffer, calendar.get(mField));
        }

        @java.lang.Override
        public final void appendTo(java.lang.StringBuffer buffer, int value) {
            if (value < 100) {
                buffer.append(((char) ((value / 10) + '0')));
                buffer.append(((char) ((value % 10) + '0')));
            }else {
                buffer.append(java.lang.Integer.toString(value));
            }
        }
    }

    private static class TwoDigitYearField implements org.apache.commons.lang3.time.FastDatePrinter.NumberRule {
        static final org.apache.commons.lang3.time.FastDatePrinter.TwoDigitYearField INSTANCE = new org.apache.commons.lang3.time.FastDatePrinter.TwoDigitYearField();

        TwoDigitYearField() {
            super();
        }

        @java.lang.Override
        public int estimateLength() {
            return 2;
        }

        @java.lang.Override
        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            appendTo(buffer, ((calendar.get(java.util.Calendar.YEAR)) % 100));
        }

        @java.lang.Override
        public final void appendTo(java.lang.StringBuffer buffer, int value) {
            buffer.append(((char) ((value / 10) + '0')));
            buffer.append(((char) ((value % 10) + '0')));
        }
    }

    private static class TwoDigitMonthField implements org.apache.commons.lang3.time.FastDatePrinter.NumberRule {
        static final org.apache.commons.lang3.time.FastDatePrinter.TwoDigitMonthField INSTANCE = new org.apache.commons.lang3.time.FastDatePrinter.TwoDigitMonthField();

        TwoDigitMonthField() {
            super();
        }

        @java.lang.Override
        public int estimateLength() {
            return 2;
        }

        @java.lang.Override
        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            appendTo(buffer, ((calendar.get(java.util.Calendar.MONTH)) + 1));
        }

        @java.lang.Override
        public final void appendTo(java.lang.StringBuffer buffer, int value) {
            buffer.append(((char) ((value / 10) + '0')));
            buffer.append(((char) ((value % 10) + '0')));
        }
    }

    private static class TwelveHourField implements org.apache.commons.lang3.time.FastDatePrinter.NumberRule {
        private final org.apache.commons.lang3.time.FastDatePrinter.NumberRule mRule;

        TwelveHourField(org.apache.commons.lang3.time.FastDatePrinter.NumberRule rule) {
            mRule = rule;
        }

        @java.lang.Override
        public int estimateLength() {
            return mRule.estimateLength();
        }

        @java.lang.Override
        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            int value = calendar.get(java.util.Calendar.HOUR);
            if (value == 0) {
                value = (calendar.getLeastMaximum(java.util.Calendar.HOUR)) + 1;
            }
            mRule.appendTo(buffer, value);
        }

        @java.lang.Override
        public void appendTo(java.lang.StringBuffer buffer, int value) {
            mRule.appendTo(buffer, value);
        }
    }

    private static class TwentyFourHourField implements org.apache.commons.lang3.time.FastDatePrinter.NumberRule {
        private final org.apache.commons.lang3.time.FastDatePrinter.NumberRule mRule;

        TwentyFourHourField(org.apache.commons.lang3.time.FastDatePrinter.NumberRule rule) {
            mRule = rule;
        }

        @java.lang.Override
        public int estimateLength() {
            return mRule.estimateLength();
        }

        @java.lang.Override
        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            int value = calendar.get(java.util.Calendar.HOUR_OF_DAY);
            if (value == 0) {
                value = (calendar.getMaximum(java.util.Calendar.HOUR_OF_DAY)) + 1;
            }
            mRule.appendTo(buffer, value);
        }

        @java.lang.Override
        public void appendTo(java.lang.StringBuffer buffer, int value) {
            mRule.appendTo(buffer, value);
        }
    }

    private static java.util.concurrent.ConcurrentMap<org.apache.commons.lang3.time.FastDatePrinter.TimeZoneDisplayKey, java.lang.String> cTimeZoneDisplayCache = new java.util.concurrent.ConcurrentHashMap<org.apache.commons.lang3.time.FastDatePrinter.TimeZoneDisplayKey, java.lang.String>(7);

    static java.lang.String getTimeZoneDisplay(java.util.TimeZone tz, boolean daylight, int style, java.util.Locale locale) {
        org.apache.commons.lang3.time.FastDatePrinter.TimeZoneDisplayKey key = new org.apache.commons.lang3.time.FastDatePrinter.TimeZoneDisplayKey(tz, daylight, style, locale);
        java.lang.String value = org.apache.commons.lang3.time.FastDatePrinter.cTimeZoneDisplayCache.get(key);
        if (value == null) {
            value = tz.getDisplayName(daylight, style, locale);
            java.lang.String prior = org.apache.commons.lang3.time.FastDatePrinter.cTimeZoneDisplayCache.putIfAbsent(key, value);
            if (prior != null) {
                value = prior;
            }
        }
        return value;
    }

    private static class TimeZoneNameRule implements org.apache.commons.lang3.time.FastDatePrinter.Rule {
        private final java.util.Locale mLocale;

        private final int mStyle;

        private final java.util.TimeZone zone;

        private final java.lang.String mStandard;

        private final java.lang.String mDaylight;

        TimeZoneNameRule(java.util.TimeZone timeZone, java.util.Locale locale, int style) {
            mLocale = locale;
            mStyle = style;
            zone = timeZone;
            mStandard = org.apache.commons.lang3.time.FastDatePrinter.getTimeZoneDisplay(timeZone, false, style, locale);
            mDaylight = org.apache.commons.lang3.time.FastDatePrinter.getTimeZoneDisplay(timeZone, true, style, locale);
        }

        @java.lang.Override
        public int estimateLength() {
            return java.lang.Math.max(mStandard.length(), mDaylight.length());
        }

        @java.lang.Override
        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            if ((zone.useDaylightTime()) && ((calendar.get(java.util.Calendar.DST_OFFSET)) != 0)) {
                buffer.append(org.apache.commons.lang3.time.FastDatePrinter.getTimeZoneDisplay(zone, true, mStyle, mLocale));
            }else {
                buffer.append(org.apache.commons.lang3.time.FastDatePrinter.getTimeZoneDisplay(zone, false, mStyle, mLocale));
            }
        }
    }

    private static class TimeZoneNumberRule implements org.apache.commons.lang3.time.FastDatePrinter.Rule {
        static final org.apache.commons.lang3.time.FastDatePrinter.TimeZoneNumberRule INSTANCE_COLON = new org.apache.commons.lang3.time.FastDatePrinter.TimeZoneNumberRule(true);

        static final org.apache.commons.lang3.time.FastDatePrinter.TimeZoneNumberRule INSTANCE_NO_COLON = new org.apache.commons.lang3.time.FastDatePrinter.TimeZoneNumberRule(false);

        final boolean mColon;

        TimeZoneNumberRule(boolean colon) {
            mColon = colon;
        }

        @java.lang.Override
        public int estimateLength() {
            return 5;
        }

        @java.lang.Override
        public void appendTo(java.lang.StringBuffer buffer, java.util.Calendar calendar) {
            int offset = (calendar.get(java.util.Calendar.ZONE_OFFSET)) + (calendar.get(java.util.Calendar.DST_OFFSET));
            if (offset < 0) {
                buffer.append('-');
                offset = -offset;
            }else {
                buffer.append('+');
            }
            int hours = offset / ((60 * 60) * 1000);
            buffer.append(((char) ((hours / 10) + '0')));
            buffer.append(((char) ((hours % 10) + '0')));
            if (mColon) {
                buffer.append(':');
            }
            int minutes = (offset / (60 * 1000)) - (60 * hours);
            buffer.append(((char) ((minutes / 10) + '0')));
            buffer.append(((char) ((minutes % 10) + '0')));
        }
    }

    private static class TimeZoneDisplayKey {
        private final java.util.TimeZone mTimeZone;

        private final int mStyle;

        private final java.util.Locale mLocale;

        TimeZoneDisplayKey(java.util.TimeZone timeZone, boolean daylight, int style, java.util.Locale locale) {
            mTimeZone = timeZone;
            if (daylight) {
                style |= -2147483648;
            }
            mStyle = style;
            mLocale = locale;
        }

        @java.lang.Override
        public int hashCode() {
            return ((((mStyle) * 31) + (mLocale.hashCode())) * 31) + (mTimeZone.hashCode());
        }

        @java.lang.Override
        public boolean equals(java.lang.Object obj) {
            if ((this) == obj) {
                return true;
            }
            if (obj instanceof org.apache.commons.lang3.time.FastDatePrinter.TimeZoneDisplayKey) {
                org.apache.commons.lang3.time.FastDatePrinter.TimeZoneDisplayKey other = ((org.apache.commons.lang3.time.FastDatePrinter.TimeZoneDisplayKey) (obj));
                return ((mTimeZone.equals(other.mTimeZone)) && ((mStyle) == (other.mStyle))) && (mLocale.equals(other.mLocale));
            }
            return false;
        }
    }
}
19:07:56.609 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
19:07:56.609 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #69
19:07:56.610 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang3.time.DurationFormatUtils:113 which is executed by 6 tests
-1439815513
19:07:56.698 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #70
19:07:56.699 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang3.time.DurationFormatUtils:549 which is executed by 11 tests
-1439815513
19:07:56.782 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #71
19:07:56.782 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang3.time.DurationFormatUtils:547 which is executed by 11 tests
-1439815513
19:07:56.862 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #72
19:07:56.863 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang3.time.DurationFormatUtils:546 which is executed by 11 tests
-1439815513
19:07:56.951 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #73
19:07:56.951 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang3.time.DurationFormatUtils:545 which is executed by 11 tests
-1439815513
19:07:57.044 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #74
19:07:57.044 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang3.time.DurationFormatUtils:540 which is executed by 11 tests
-1439815513
19:07:57.133 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #75
19:07:57.133 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang3.time.DurationFormatUtils:539 which is executed by 11 tests
-1439815513
19:07:57.211 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #76
19:07:57.211 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang3.time.DurationFormatUtils:537 which is executed by 11 tests
-1439815513
19:07:57.290 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #77
19:07:57.290 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang3.time.DurationFormatUtils:536 which is executed by 11 tests
-1439815513
19:07:57.374 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #78
19:07:57.374 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang3.time.DurationFormatUtils:534 which is executed by 11 tests
-1439815513
19:07:57.460 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #79
19:07:57.460 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang3.time.DurationFormatUtils:533 which is executed by 11 tests
-1439815513
19:07:57.540 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
19:08:08.149 [pool-92-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (10604 ms)
<> Total tests run: 44
<> Ignored tests: 0
<> Failed tests: 0

19:08:08.149 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
19:08:08.149 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #80
19:08:08.149 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang3.time.FastDatePrinter:473 which is executed by 37 tests
1615201905
19:08:08.241 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #81
19:08:08.241 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang3.time.FastDatePrinter:472 which is executed by 37 tests
1615201905
19:08:08.331 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #82
19:08:08.332 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang3.time.FastDatePrinter:471 which is executed by 37 tests
1615201905
19:08:08.432 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #83
19:08:08.432 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang3.time.FastDatePrinter:463 which is executed by 37 tests
1615201905
19:08:08.533 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #84
19:08:08.534 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang3.time.FastDatePrinter:455 which is executed by 37 tests
1615201905
19:08:08.622 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #85
19:08:08.623 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang3.time.FastDatePrinter:343 which is executed by 49 tests
1615201905
19:08:08.711 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #86
19:08:08.711 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang3.time.FastDatePrinter:339 which is executed by 49 tests
1615201905
19:08:08.800 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #87
19:08:08.800 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang3.time.FastDatePrinter:338 which is executed by 49 tests
1615201905
19:08:08.888 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.junit.ComparisonFailure: expected:<7:08AM [IC]T> but was:<7:08AM [ES]T>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected(FastDatePrinterTest.java:286)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
org.junit.ComparisonFailure: expected:<7:08AM [IC]T> but was:<7:08AM [ES]T>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected(FastDatePrinterTest.java:286)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
19:08:09.576 [pool-94-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (681 ms)
<> Total tests run: 88
<> Ignored tests: 0
<> Failed tests: 2
~ testCalendarTimezoneRespected(org.apache.commons.lang3.time.FastDateFormat_PrinterTest)
[expected:<7:08AM [IC]T> but was:<7:08AM [ES]T>]
org.junit.ComparisonFailure: expected:<7:08AM [IC]T> but was:<7:08AM [ES]T>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected(FastDatePrinterTest.java:286)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
~ testCalendarTimezoneRespected(org.apache.commons.lang3.time.FastDatePrinterTest)
[expected:<7:08AM [IC]T> but was:<7:08AM [ES]T>]
org.junit.ComparisonFailure: expected:<7:08AM [IC]T> but was:<7:08AM [ES]T>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected(FastDatePrinterTest.java:286)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

19:11:33.862 [pool-93-thread-1] DEBUG xxl.java.junit.TestSuiteExecution - Timeout after 200 seconds. Infinite loop?
19:11:33.863 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.TimeoutException
19:11:33.863 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #88
19:11:33.863 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.lang3.time.FastDatePrinter$TextField:900 which is executed by 7 tests
java.lang.OutOfMemoryError: GC overhead limit exceeded
    at java.util.HashMap.resize(HashMap.java:704)
    at java.util.HashMap.putVal(HashMap.java:663)
    at java.util.HashMap.put(HashMap.java:612)
    at fr.inria.lille.commons.trace.collector.ValueCollector.collectWith(ValueCollector.java:31)
    at fr.inria.lille.commons.trace.collector.ValueCollector.collectFrom(ValueCollector.java:21)
    at fr.inria.lille.commons.trace.RuntimeValues.collectInput(RuntimeValues.java:89)
19:12:02.226 [pool-95-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (232110 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testCalendarTimezoneRespected(org.apache.commons.lang3.time.FastDateFormat_PrinterTest)
[GC overhead limit exceeded]
java.lang.OutOfMemoryError: GC overhead limit exceeded    at java.util.HashMap.resize(HashMap.java:704)
    at java.util.HashMap.putVal(HashMap.java:663)
    at java.util.HashMap.put(HashMap.java:612)
    at fr.inria.lille.commons.trace.collector.ValueCollector.collectWith(ValueCollector.java:31)
    at fr.inria.lille.commons.trace.collector.ValueCollector.collectFrom(ValueCollector.java:21)
    at fr.inria.lille.commons.trace.RuntimeValues.collectInput(RuntimeValues.java:89)

java.util.concurrent.ExecutionException: java.lang.OutOfMemoryError: GC overhead limit exceeded
	at java.util.concurrent.FutureTask.report(FutureTask.java:122)
	at java.util.concurrent.FutureTask.get(FutureTask.java:206)
	at fr.inria.lille.repair.Main.main(Main.java:106)
Caused by: java.lang.OutOfMemoryError: GC overhead limit exceeded
	at java.util.zip.ZipFile.getEntryBytes(Native Method)
	at java.util.zip.ZipFile.getZipEntry(ZipFile.java:577)
	at java.util.zip.ZipFile.access$900(ZipFile.java:60)
	at java.util.zip.ZipFile$ZipEntryIterator.next(ZipFile.java:539)
	at java.util.zip.ZipFile$ZipEntryIterator.nextElement(ZipFile.java:514)
	at java.util.zip.ZipFile$ZipEntryIterator.nextElement(ZipFile.java:495)
	at org.eclipse.jdt.internal.compiler.batch.ClasspathJar.getModulesDeclaringPackage(ClasspathJar.java:234)
	at org.eclipse.jdt.internal.compiler.batch.ClasspathLocation.isPackage(ClasspathLocation.java:177)
	at org.eclipse.jdt.internal.compiler.batch.ClasspathJar.findClass(ClasspathJar.java:111)
	at org.eclipse.jdt.internal.compiler.batch.FileSystem.internalFindClass(FileSystem.java:443)
	at org.eclipse.jdt.internal.compiler.batch.FileSystem.findClass(FileSystem.java:385)
	at org.eclipse.jdt.internal.compiler.batch.FileSystem.findType(FileSystem.java:529)
	at org.eclipse.jdt.internal.compiler.env.IModuleAwareNameEnvironment.findType(IModuleAwareNameEnvironment.java:94)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createPackage(LookupEnvironment.java:1094)
	at org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.buildTypeBindings(CompilationUnitScope.java:129)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.buildTypeBindings(LookupEnvironment.java:457)
	at org.eclipse.jdt.internal.compiler.Compiler.internalBeginToCompile(Compiler.java:838)
	at org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:387)
	at spoon.support.compiler.jdt.TreeBuilderCompiler.buildUnits(TreeBuilderCompiler.java:73)
	at spoon.support.compiler.jdt.JDTBatchCompiler.getUnits(JDTBatchCompiler.java:266)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildUnits(JDTBasedSpoonCompiler.java:444)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildUnitsAndModel(JDTBasedSpoonCompiler.java:388)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildSources(JDTBasedSpoonCompiler.java:340)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:129)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:113)
	at fr.inria.lille.commons.spoon.util.SpoonModelLibrary.modelFor(SpoonModelLibrary.java:53)
	at fr.inria.lille.commons.spoon.SpoonedFile.<init>(SpoonedFile.java:61)
	at fr.inria.lille.commons.spoon.SpoonedClass.<init>(SpoonedClass.java:14)
	at fr.inria.lille.commons.spoon.SpoonedProject.forked(SpoonedProject.java:47)
	at fr.inria.lille.repair.nopol.NoPol.runOnStatement(NoPol.java:222)
	at fr.inria.lille.repair.nopol.NoPol.solveWithMultipleBuild(NoPol.java:213)
	at fr.inria.lille.repair.nopol.NoPol.build(NoPol.java:154)

Usage: java -jar nopol.jar
                          [(-m|--mode) <repair|ranking>] (-e|--type) <condition|precondition|pre_then_cond|loop|arithmetic> [(-o|--oracle) <angelic|symbolic>] [(-y|--synthesis) <smt|dynamoth>] [(-l|--solver) <z3|cvc4>] [(-p|--solver-path) <solverPath>] (-s|--source) source1:source2:...:sourceN  (-c|--classpath) <classpath> [(-t|--test) test1:test2:...:testN ] [--complianceLevel <complianceLevel>] [--maxTime <maxTime>] [--maxTimeType <maxTimeType>] [(-z|--flocal) < cocospoon|dumb|gzoltar>] [--output <outputFolder>] [--json[:<outputJson>]]

  [(-m|--mode) <repair|ranking>]
        Define the mode of execution. (default: repair)

  (-e|--type) <condition|precondition|pre_then_cond|loop|arithmetic>
        The repair type (example fixing only conditions, or adding
        precondition). REQUIRED OPTION (default: condition)

  [(-o|--oracle) <angelic|symbolic>]
        Define the oracle (only used with repair mode). (default: angelic)

  [(-y|--synthesis) <smt|dynamoth>]
        Define the patch synthesis. (default: smt)

  [(-l|--solver) <z3|cvc4>]
        Define the solver (only used with smt synthesis). (default: z3)

  [(-p|--solver-path) <solverPath>]
        Define the solver binary path (only used with smt synthesis).

  (-s|--source) source1:source2:...:sourceN 
        Define the path to the source code of the project.

  (-c|--classpath) <classpath>
        Define the classpath of the project.

  [(-t|--test) test1:test2:...:testN ]
        Define the tests of the project (both failing and passing),
        fully-qualified, separated with ':' (even if the classpath contains
        other tests, only those are considered.

  [--complianceLevel <complianceLevel>]
        The compliance level of the project. (default: 7)

  [--maxTime <maxTime>]
        The maximum time execution in minute for the whole execution of
        Nopol.(default: 10)

  [--maxTimeType <maxTimeType>]
        The maximum time execution in minute for one type of patch. (default: 5)

  [(-z|--flocal) < cocospoon|dumb|gzoltar>]
        Define the fault localizer to be used. (default: gzoltar)

  [--output <outputFolder>]
        Define the location where the patches will be saved. (default: .)

  [--json[:<outputJson>]]
        Output a json file in the current working directory.

Command exited with non-zero status 255
4750.00user 12.52system 6:28.07elapsed 1227%CPU (0avgtext+0avgdata 4674936maxresident)k
59824inputs+6824outputs (5major+1864280minor)pagefaults 0swaps


Node: petitprince-14.luxembourg.grid5000.fr



Date: Wed Nov 28 19:12:42 EST 2018

