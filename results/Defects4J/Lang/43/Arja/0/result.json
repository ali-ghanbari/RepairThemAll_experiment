{
  "repair_end": "2018-12-01 12:32:10.895536", 
  "repair_begin": "2018-12-01 11:13:11.877072", 
  "patches": [
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:13:04.265756743 -0500\n+++ /tmp/Arja_Defects4J_Lang_43/patches_21ag/Patch_90/patched/tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:23:30.170916141 -0500\n@@ -151,12 +151,53 @@\n \n         ParsePosition pos = new ParsePosition(0);\n         char[] c = pattern.toCharArray();\n-        int fmtCount = 0;\n+        toPattern = super.toPattern();\n+\t\tint fmtCount = 0;\n         while (pos.getIndex() < pattern.length()) {\n             switch (c[pos.getIndex()]) {\n             case QUOTE:\n                 appendQuotedString(pattern, pos, stripCustom, true);\n-                break;\n+                {\n+\t\t\t\t\twhile (pos.getIndex() < pattern.length()) {\n+\t\t\t\t\t\tswitch (c[pos.getIndex()]) {\n+\t\t\t\t\t\tcase QUOTE:\n+\t\t\t\t\t\t\tappendQuotedString(pattern, pos, stripCustom, true);\n+\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\tcase START_FE:\n+\t\t\t\t\t\t\tfmtCount++;\n+\t\t\t\t\t\t\tseekNonWs(pattern, pos);\n+\t\t\t\t\t\t\tint start = pos.getIndex();\n+\t\t\t\t\t\t\tint index = readArgumentIndex(pattern, next(pos));\n+\t\t\t\t\t\t\tstripCustom.append(START_FE).append(index);\n+\t\t\t\t\t\t\tseekNonWs(pattern, pos);\n+\t\t\t\t\t\t\tFormat format = null;\n+\t\t\t\t\t\t\tString formatDescription = null;\n+\t\t\t\t\t\t\tif (c[pos.getIndex()] == START_FMT) {\n+\t\t\t\t\t\t\t\tformatDescription = parseFormatDescription(\n+\t\t\t\t\t\t\t\t\t\tpattern, next(pos));\n+\t\t\t\t\t\t\t\tformat = getFormat(formatDescription);\n+\t\t\t\t\t\t\t\tif (format == null) {\n+\t\t\t\t\t\t\t\t\tstripCustom.append(START_FMT).append(\n+\t\t\t\t\t\t\t\t\t\t\tformatDescription);\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tfoundFormats.add(format);\n+\t\t\t\t\t\t\tfoundDescriptions.add(format == null ? null\n+\t\t\t\t\t\t\t\t\t: formatDescription);\n+\t\t\t\t\t\t\tValidate.isTrue(foundFormats.size() == fmtCount);\n+\t\t\t\t\t\t\tValidate.isTrue(foundDescriptions.size() == fmtCount);\n+\t\t\t\t\t\t\tif (c[pos.getIndex()] != END_FE) {\n+\t\t\t\t\t\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\t\t\t\t\t\"Unreadable format element at position \"\n+\t\t\t\t\t\t\t\t\t\t\t\t+ start);\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\tdefault:\n+\t\t\t\t\t\t\tstripCustom.append(c[pos.getIndex()]);\n+\t\t\t\t\t\t\tnext(pos);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n             case START_FE:\n                 fmtCount++;\n                 seekNonWs(pattern, pos);\n@@ -417,7 +458,8 @@\n     private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n             StringBuffer appendTo, boolean escapingOn) {\n         int start = pos.getIndex();\n-        char[] c = pattern.toCharArray();\n+        pos.setIndex(pos.getIndex() + 1);\n+\t\tchar[] c = pattern.toCharArray();\n         if (escapingOn && c[start] == QUOTE) {\n             return appendTo == null ? null : appendTo.append(QUOTE);\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 420, 
          "faulty": "char[] c=pattern.toCharArray();", 
          "type": "InsertBefore", 
          "seed": "pos.setIndex(pos.getIndex() + 1);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 154, 
          "faulty": "int fmtCount=0;", 
          "type": "InsertBefore", 
          "seed": "toPattern=super.toPattern();"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 159, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "while (pos.getIndex() < pattern.length()) {\nswitch (c[pos.getIndex()]) {\ncase QUOTE:\n    appendQuotedString(pattern,pos,stripCustom,true);\n  break;\ncase START_FE:\nfmtCount++;\nseekNonWs(pattern,pos);\nint start=pos.getIndex();\nint index=readArgumentIndex(pattern,next(pos));\nstripCustom.append(START_FE).append(index);\nseekNonWs(pattern,pos);\nFormat format=null;\nString formatDescription=null;\nif (c[pos.getIndex()] == START_FMT) {\nformatDescription=parseFormatDescription(pattern,next(pos));\nformat=getFormat(formatDescription);\nif (format == null) {\nstripCustom.append(START_FMT).append(formatDescription);\n}\n}\nfoundFormats.add(format);\nfoundDescriptions.add(format == null ? null : formatDescription);\nValidate.isTrue(foundFormats.size() == fmtCount);\nValidate.isTrue(foundDescriptions.size() == fmtCount);\nif (c[pos.getIndex()] != END_FE) {\nthrow new IllegalArgumentException(\"Unreadable format element at position \" + start);\n}\ndefault :\nstripCustom.append(c[pos.getIndex()]);\nnext(pos);\n}\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:13:04.265756743 -0500\n+++ /tmp/Arja_Defects4J_Lang_43/patches_21ag/Patch_1109/patched/tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 06:04:50.923842613 -0500\n@@ -143,9 +143,19 @@\n         if (registry == null) {\n             super.applyPattern(pattern);\n             toPattern = super.toPattern();\n-            return;\n+            if (registry == null) {\n+\t\t\t\tsuper.applyPattern(pattern);\n+\t\t\t\ttoPattern = super.toPattern();\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t\treturn;\n         }\n-        ArrayList foundFormats = new ArrayList();\n+        if (registry == null) {\n+\t\t\tsuper.applyPattern(pattern);\n+\t\t\ttoPattern = super.toPattern();\n+\t\t\treturn;\n+\t\t}\n+\t\tArrayList foundFormats = new ArrayList();\n         ArrayList foundDescriptions = new ArrayList();\n         StringBuffer stripCustom = new StringBuffer(pattern.length());\n \n@@ -156,7 +166,10 @@\n             switch (c[pos.getIndex()]) {\n             case QUOTE:\n                 appendQuotedString(pattern, pos, stripCustom, true);\n-                break;\n+                {\n+\t\t\t\t\tpos.setIndex(pos.getIndex() + 1);\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n             case START_FE:\n                 fmtCount++;\n                 seekNonWs(pattern, pos);\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 146, 
          "faulty": "return;", 
          "type": "InsertBefore", 
          "seed": "if (registry == null) {\n  super.applyPattern(pattern);\n  toPattern=super.toPattern();\n  return;\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 148, 
          "faulty": "ArrayList foundFormats=new ArrayList();", 
          "type": "InsertBefore", 
          "seed": "if (registry == null) {\n  super.applyPattern(pattern);\n  toPattern=super.toPattern();\n  return;\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 159, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "pos.setIndex(pos.getIndex() + 1);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:13:04.265756743 -0500\n+++ /tmp/Arja_Defects4J_Lang_43/patches_21ag/Patch_669/patched/tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:47:41.511065606 -0500\n@@ -146,7 +146,12 @@\n             return;\n         }\n         ArrayList foundFormats = new ArrayList();\n-        ArrayList foundDescriptions = new ArrayList();\n+        if (registry == null) {\n+\t\t\tsuper.applyPattern(pattern);\n+\t\t\ttoPattern = super.toPattern();\n+\t\t\treturn;\n+\t\t}\n+\t\tArrayList foundDescriptions = new ArrayList();\n         StringBuffer stripCustom = new StringBuffer(pattern.length());\n \n         ParsePosition pos = new ParsePosition(0);\n@@ -417,7 +422,8 @@\n     private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n             StringBuffer appendTo, boolean escapingOn) {\n         int start = pos.getIndex();\n-        char[] c = pattern.toCharArray();\n+        pos.setIndex(pos.getIndex() + 1);\n+\t\tchar[] c = pattern.toCharArray();\n         if (escapingOn && c[start] == QUOTE) {\n             return appendTo == null ? null : appendTo.append(QUOTE);\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 420, 
          "faulty": "char[] c=pattern.toCharArray();", 
          "type": "InsertBefore", 
          "seed": "pos.setIndex(pos.getIndex() + 1);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 149, 
          "faulty": "ArrayList foundDescriptions=new ArrayList();", 
          "type": "InsertBefore", 
          "seed": "if (registry == null) {\n  super.applyPattern(pattern);\n  toPattern=super.toPattern();\n  return;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:13:04.265756743 -0500\n+++ /tmp/Arja_Defects4J_Lang_43/patches_21ag/Patch_242/patched/tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:30:10.710539891 -0500\n@@ -419,7 +419,7 @@\n         int start = pos.getIndex();\n         char[] c = pattern.toCharArray();\n         if (escapingOn && c[start] == QUOTE) {\n-            return appendTo == null ? null : appendTo.append(QUOTE);\n+            pos.setIndex(pos.getIndex() + 1);\n         }\n         int lastHold = start;\n         for (int i = pos.getIndex(); i < pattern.length(); i++) {\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 422, 
          "faulty": "return appendTo == null ? null : appendTo.append(QUOTE);", 
          "type": "Replace", 
          "seed": "pos.setIndex(pos.getIndex() + 1);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:13:04.265756743 -0500\n+++ /tmp/Arja_Defects4J_Lang_43/patches_21ag/Patch_646/patched/tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:46:43.675697042 -0500\n@@ -141,7 +141,11 @@\n      */\n     public final void applyPattern(String pattern) {\n         if (registry == null) {\n-            super.applyPattern(pattern);\n+            if (registry == null) {\n+\t\t\t\tsuper.applyPattern(pattern);\n+\t\t\t\ttoPattern = super.toPattern();\n+\t\t\t\treturn;\n+\t\t\t}\n             toPattern = super.toPattern();\n             return;\n         }\n@@ -156,7 +160,10 @@\n             switch (c[pos.getIndex()]) {\n             case QUOTE:\n                 appendQuotedString(pattern, pos, stripCustom, true);\n-                break;\n+                {\n+\t\t\t\t\tpos.setIndex(pos.getIndex() + 1);\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n             case START_FE:\n                 fmtCount++;\n                 seekNonWs(pattern, pos);\n@@ -417,7 +424,8 @@\n     private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n             StringBuffer appendTo, boolean escapingOn) {\n         int start = pos.getIndex();\n-        char[] c = pattern.toCharArray();\n+        this.registry = registry;\n+\t\tchar[] c = pattern.toCharArray();\n         if (escapingOn && c[start] == QUOTE) {\n             return appendTo == null ? null : appendTo.append(QUOTE);\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 144, 
          "faulty": "super.applyPattern(pattern);", 
          "type": "Replace", 
          "seed": "if (registry == null) {\n  super.applyPattern(pattern);\n  toPattern=super.toPattern();\n  return;\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 420, 
          "faulty": "char[] c=pattern.toCharArray();", 
          "type": "InsertBefore", 
          "seed": "this.registry=registry;"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 159, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "pos.setIndex(pos.getIndex() + 1);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:13:04.265756743 -0500\n+++ /tmp/Arja_Defects4J_Lang_43/patches_21ag/Patch_1009/patched/tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 06:00:52.222444105 -0500\n@@ -156,7 +156,10 @@\n             switch (c[pos.getIndex()]) {\n             case QUOTE:\n                 appendQuotedString(pattern, pos, stripCustom, true);\n-                break;\n+                {\n+\t\t\t\t\tpos.setIndex(pos.getIndex() + 1);\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n             case START_FE:\n                 fmtCount++;\n                 seekNonWs(pattern, pos);\n@@ -416,7 +419,8 @@\n      */\n     private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n             StringBuffer appendTo, boolean escapingOn) {\n-        int start = pos.getIndex();\n+        seekNonWs(pattern, pos);\n+\t\tint start = pos.getIndex();\n         char[] c = pattern.toCharArray();\n         if (escapingOn && c[start] == QUOTE) {\n             return appendTo == null ? null : appendTo.append(QUOTE);\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 419, 
          "faulty": "int start=pos.getIndex();", 
          "type": "InsertBefore", 
          "seed": "seekNonWs(pattern,pos);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 159, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "pos.setIndex(pos.getIndex() + 1);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:13:04.265756743 -0500\n+++ /tmp/Arja_Defects4J_Lang_43/patches_21ag/Patch_171/patched/tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:27:04.736571712 -0500\n@@ -156,7 +156,10 @@\n             switch (c[pos.getIndex()]) {\n             case QUOTE:\n                 appendQuotedString(pattern, pos, stripCustom, true);\n-                break;\n+                {\n+\t\t\t\t\ttoPattern = super.toPattern();\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n             case START_FE:\n                 fmtCount++;\n                 seekNonWs(pattern, pos);\n@@ -417,7 +420,8 @@\n     private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n             StringBuffer appendTo, boolean escapingOn) {\n         int start = pos.getIndex();\n-        char[] c = pattern.toCharArray();\n+        pos.setIndex(pos.getIndex() + 1);\n+\t\tchar[] c = pattern.toCharArray();\n         if (escapingOn && c[start] == QUOTE) {\n             return appendTo == null ? null : appendTo.append(QUOTE);\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 420, 
          "faulty": "char[] c=pattern.toCharArray();", 
          "type": "InsertBefore", 
          "seed": "pos.setIndex(pos.getIndex() + 1);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 159, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "toPattern=super.toPattern();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:13:04.265756743 -0500\n+++ /tmp/Arja_Defects4J_Lang_43/patches_21ag/Patch_1768/patched/tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 06:30:29.615077745 -0500\n@@ -140,11 +140,6 @@\n      * @param pattern String\n      */\n     public final void applyPattern(String pattern) {\n-        if (registry == null) {\n-            super.applyPattern(pattern);\n-            toPattern = super.toPattern();\n-            return;\n-        }\n         ArrayList foundFormats = new ArrayList();\n         ArrayList foundDescriptions = new ArrayList();\n         StringBuffer stripCustom = new StringBuffer(pattern.length());\n@@ -156,7 +151,10 @@\n             switch (c[pos.getIndex()]) {\n             case QUOTE:\n                 appendQuotedString(pattern, pos, stripCustom, true);\n-                break;\n+                {\n+\t\t\t\t\tpos.setIndex(pos.getIndex() + 1);\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n             case START_FE:\n                 fmtCount++;\n                 seekNonWs(pattern, pos);\n@@ -184,7 +182,10 @@\n                 }\n                 // fall through\n             default:\n-                stripCustom.append(c[pos.getIndex()]);\n+                {\n+\t\t\t\t\tindex = 0;\n+\t\t\t\t\tstripCustom.append(c[pos.getIndex()]);\n+\t\t\t\t}\n                 next(pos);\n             }\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 143, 
          "faulty": "if (registry == null) {\n  super.applyPattern(pattern);\n  toPattern=super.toPattern();\n  return;\n}", 
          "type": "Delete", 
          "seed": "this.registry=registry;"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 159, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "pos.setIndex(pos.getIndex() + 1);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 187, 
          "faulty": "stripCustom.append(c[pos.getIndex()]);", 
          "type": "InsertBefore", 
          "seed": "index=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:13:04.265756743 -0500\n+++ /tmp/Arja_Defects4J_Lang_43/patches_21ag/Patch_321/patched/tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:32:59.556695349 -0500\n@@ -146,7 +146,12 @@\n             return;\n         }\n         ArrayList foundFormats = new ArrayList();\n-        ArrayList foundDescriptions = new ArrayList();\n+        if (registry == null) {\n+\t\t\tsuper.applyPattern(pattern);\n+\t\t\ttoPattern = super.toPattern();\n+\t\t\treturn;\n+\t\t}\n+\t\tArrayList foundDescriptions = new ArrayList();\n         StringBuffer stripCustom = new StringBuffer(pattern.length());\n \n         ParsePosition pos = new ParsePosition(0);\n@@ -156,7 +161,10 @@\n             switch (c[pos.getIndex()]) {\n             case QUOTE:\n                 appendQuotedString(pattern, pos, stripCustom, true);\n-                break;\n+                {\n+\t\t\t\t\tpos.setIndex(pos.getIndex() + 1);\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n             case START_FE:\n                 fmtCount++;\n                 seekNonWs(pattern, pos);\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 149, 
          "faulty": "ArrayList foundDescriptions=new ArrayList();", 
          "type": "InsertBefore", 
          "seed": "if (registry == null) {\n  super.applyPattern(pattern);\n  toPattern=super.toPattern();\n  return;\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 159, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "pos.setIndex(pos.getIndex() + 1);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:13:04.265756743 -0500\n+++ /tmp/Arja_Defects4J_Lang_43/patches_21ag/Patch_1373/patched/tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 06:15:24.284942000 -0500\n@@ -150,7 +150,18 @@\n         StringBuffer stripCustom = new StringBuffer(pattern.length());\n \n         ParsePosition pos = new ParsePosition(0);\n-        char[] c = pattern.toCharArray();\n+        if (containsElements(foundFormats)) {\n+\t\t\tFormat[] origFormats = getFormats();\n+\t\t\tint i = 0;\n+\t\t\tfor (Iterator it = foundFormats.iterator(); it.hasNext(); i++) {\n+\t\t\t\tFormat f = (Format) it.next();\n+\t\t\t\tif (f != null) {\n+\t\t\t\t\torigFormats[i] = f;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tsuper.setFormats(origFormats);\n+\t\t}\n+\t\tchar[] c = pattern.toCharArray();\n         int fmtCount = 0;\n         while (pos.getIndex() < pattern.length()) {\n             switch (c[pos.getIndex()]) {\n@@ -417,7 +428,8 @@\n     private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n             StringBuffer appendTo, boolean escapingOn) {\n         int start = pos.getIndex();\n-        char[] c = pattern.toCharArray();\n+        next(pos);\n+\t\tchar[] c = pattern.toCharArray();\n         if (escapingOn && c[start] == QUOTE) {\n             return appendTo == null ? null : appendTo.append(QUOTE);\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 420, 
          "faulty": "char[] c=pattern.toCharArray();", 
          "type": "InsertBefore", 
          "seed": "next(pos);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 153, 
          "faulty": "char[] c=pattern.toCharArray();", 
          "type": "InsertBefore", 
          "seed": "if (containsElements(foundFormats)) {\n  Format[] origFormats=getFormats();\n  int i=0;\n  for (Iterator it=foundFormats.iterator(); it.hasNext(); i++) {\n    Format f=(Format)it.next();\n    if (f != null) {\n      origFormats[i]=f;\n    }\n  }\n  super.setFormats(origFormats);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:13:04.265756743 -0500\n+++ /tmp/Arja_Defects4J_Lang_43/patches_21ag/Patch_641/patched/tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:46:31.563829278 -0500\n@@ -143,9 +143,9 @@\n         if (registry == null) {\n             super.applyPattern(pattern);\n             toPattern = super.toPattern();\n-            return;\n         }\n-        ArrayList foundFormats = new ArrayList();\n+        this.registry = registry;\n+\t\tArrayList foundFormats = new ArrayList();\n         ArrayList foundDescriptions = new ArrayList();\n         StringBuffer stripCustom = new StringBuffer(pattern.length());\n \n@@ -156,7 +156,10 @@\n             switch (c[pos.getIndex()]) {\n             case QUOTE:\n                 appendQuotedString(pattern, pos, stripCustom, true);\n-                break;\n+                {\n+\t\t\t\t\tpos.setIndex(pos.getIndex() + 1);\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n             case START_FE:\n                 fmtCount++;\n                 seekNonWs(pattern, pos);\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 146, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "throw new StringIndexOutOfBoundsException(\"end < start\");"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 148, 
          "faulty": "ArrayList foundFormats=new ArrayList();", 
          "type": "InsertBefore", 
          "seed": "this.registry=registry;"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 159, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "pos.setIndex(pos.getIndex() + 1);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:13:04.265756743 -0500\n+++ /tmp/Arja_Defects4J_Lang_43/patches_21ag/Patch_456/patched/tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:38:45.520917514 -0500\n@@ -142,7 +142,8 @@\n     public final void applyPattern(String pattern) {\n         if (registry == null) {\n             super.applyPattern(pattern);\n-            toPattern = super.toPattern();\n+            this.registry = registry;\n+\t\t\ttoPattern = super.toPattern();\n             return;\n         }\n         ArrayList foundFormats = new ArrayList();\n@@ -417,7 +418,8 @@\n     private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n             StringBuffer appendTo, boolean escapingOn) {\n         int start = pos.getIndex();\n-        char[] c = pattern.toCharArray();\n+        next(pos);\n+\t\tchar[] c = pattern.toCharArray();\n         if (escapingOn && c[start] == QUOTE) {\n             return appendTo == null ? null : appendTo.append(QUOTE);\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 420, 
          "faulty": "char[] c=pattern.toCharArray();", 
          "type": "InsertBefore", 
          "seed": "next(pos);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 145, 
          "faulty": "toPattern=super.toPattern();", 
          "type": "InsertBefore", 
          "seed": "this.registry=registry;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:13:04.265756743 -0500\n+++ /tmp/Arja_Defects4J_Lang_43/patches_21ag/Patch_303/patched/tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:32:28.373036001 -0500\n@@ -156,7 +156,10 @@\n             switch (c[pos.getIndex()]) {\n             case QUOTE:\n                 appendQuotedString(pattern, pos, stripCustom, true);\n-                break;\n+                {\n+\t\t\t\t\tpos.setIndex(pos.getIndex() + 1);\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n             case START_FE:\n                 fmtCount++;\n                 seekNonWs(pattern, pos);\n@@ -184,7 +187,10 @@\n                 }\n                 // fall through\n             default:\n-                stripCustom.append(c[pos.getIndex()]);\n+                {\n+\t\t\t\t\tindex = 0;\n+\t\t\t\t\tstripCustom.append(c[pos.getIndex()]);\n+\t\t\t\t}\n                 next(pos);\n             }\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 159, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "pos.setIndex(pos.getIndex() + 1);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 187, 
          "faulty": "stripCustom.append(c[pos.getIndex()]);", 
          "type": "InsertBefore", 
          "seed": "index=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:13:04.265756743 -0500\n+++ /tmp/Arja_Defects4J_Lang_43/patches_21ag/Patch_791/patched/tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:52:54.475650094 -0500\n@@ -184,7 +184,10 @@\n                 }\n                 // fall through\n             default:\n-                stripCustom.append(c[pos.getIndex()]);\n+                {\n+\t\t\t\t\tindex = 0;\n+\t\t\t\t\tstripCustom.append(c[pos.getIndex()]);\n+\t\t\t\t}\n                 next(pos);\n             }\n         }\n@@ -417,7 +420,8 @@\n     private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n             StringBuffer appendTo, boolean escapingOn) {\n         int start = pos.getIndex();\n-        char[] c = pattern.toCharArray();\n+        next(pos);\n+\t\tchar[] c = pattern.toCharArray();\n         if (escapingOn && c[start] == QUOTE) {\n             return appendTo == null ? null : appendTo.append(QUOTE);\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 420, 
          "faulty": "char[] c=pattern.toCharArray();", 
          "type": "InsertBefore", 
          "seed": "next(pos);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 187, 
          "faulty": "stripCustom.append(c[pos.getIndex()]);", 
          "type": "InsertBefore", 
          "seed": "index=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:13:04.265756743 -0500\n+++ /tmp/Arja_Defects4J_Lang_43/patches_21ag/Patch_1070/patched/tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 06:03:13.044909377 -0500\n@@ -141,7 +141,8 @@\n      */\n     public final void applyPattern(String pattern) {\n         if (registry == null) {\n-            super.applyPattern(pattern);\n+            this.registry = registry;\n+\t\t\tsuper.applyPattern(pattern);\n             toPattern = super.toPattern();\n             return;\n         }\n@@ -155,7 +156,11 @@\n         while (pos.getIndex() < pattern.length()) {\n             switch (c[pos.getIndex()]) {\n             case QUOTE:\n-                appendQuotedString(pattern, pos, stripCustom, true);\n+                {\n+\t\t\t\t\ttoPattern = insertFormats(super.toPattern(),\n+\t\t\t\t\t\t\tfoundDescriptions);\n+\t\t\t\t\tappendQuotedString(pattern, pos, stripCustom, true);\n+\t\t\t\t}\n                 break;\n             case START_FE:\n                 fmtCount++;\n@@ -417,7 +422,8 @@\n     private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n             StringBuffer appendTo, boolean escapingOn) {\n         int start = pos.getIndex();\n-        char[] c = pattern.toCharArray();\n+        pos.setIndex(pos.getIndex() + 1);\n+\t\tchar[] c = pattern.toCharArray();\n         if (escapingOn && c[start] == QUOTE) {\n             return appendTo == null ? null : appendTo.append(QUOTE);\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 144, 
          "faulty": "super.applyPattern(pattern);", 
          "type": "InsertBefore", 
          "seed": "this.registry=registry;"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 420, 
          "faulty": "char[] c=pattern.toCharArray();", 
          "type": "InsertBefore", 
          "seed": "pos.setIndex(pos.getIndex() + 1);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 158, 
          "faulty": "appendQuotedString(pattern,pos,stripCustom,true);", 
          "type": "InsertBefore", 
          "seed": "toPattern=insertFormats(super.toPattern(),foundDescriptions);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:13:04.265756743 -0500\n+++ /tmp/Arja_Defects4J_Lang_43/patches_21ag/Patch_931/patched/tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:57:51.048418473 -0500\n@@ -141,7 +141,11 @@\n      */\n     public final void applyPattern(String pattern) {\n         if (registry == null) {\n-            super.applyPattern(pattern);\n+            if (registry == null) {\n+\t\t\t\tsuper.applyPattern(pattern);\n+\t\t\t\ttoPattern = super.toPattern();\n+\t\t\t\treturn;\n+\t\t\t}\n             toPattern = super.toPattern();\n             return;\n         }\n@@ -417,10 +421,8 @@\n     private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n             StringBuffer appendTo, boolean escapingOn) {\n         int start = pos.getIndex();\n-        char[] c = pattern.toCharArray();\n-        if (escapingOn && c[start] == QUOTE) {\n-            return appendTo == null ? null : appendTo.append(QUOTE);\n-        }\n+        next(pos);\n+\t\tchar[] c = pattern.toCharArray();\n         int lastHold = start;\n         for (int i = pos.getIndex(); i < pattern.length(); i++) {\n             if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 144, 
          "faulty": "super.applyPattern(pattern);", 
          "type": "Replace", 
          "seed": "if (registry == null) {\n  super.applyPattern(pattern);\n  toPattern=super.toPattern();\n  return;\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 420, 
          "faulty": "char[] c=pattern.toCharArray();", 
          "type": "InsertBefore", 
          "seed": "next(pos);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 421, 
          "faulty": "if (escapingOn && c[start] == QUOTE) {\n  return appendTo == null ? null : appendTo.append(QUOTE);\n}", 
          "type": "Delete", 
          "seed": "pos.setIndex(pos.getIndex() + 1);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:13:04.265756743 -0500\n+++ /tmp/Arja_Defects4J_Lang_43/patches_21ag/Patch_1631/patched/tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 06:24:57.986691869 -0500\n@@ -142,8 +142,14 @@\n     public final void applyPattern(String pattern) {\n         if (registry == null) {\n             super.applyPattern(pattern);\n+\t\t\tsuper.applyPattern(pattern);\n             toPattern = super.toPattern();\n-            return;\n+            if (registry == null) {\n+\t\t\t\tsuper.applyPattern(pattern);\n+\t\t\t\ttoPattern = super.toPattern();\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t\treturn;\n         }\n         ArrayList foundFormats = new ArrayList();\n         ArrayList foundDescriptions = new ArrayList();\n@@ -156,7 +162,10 @@\n             switch (c[pos.getIndex()]) {\n             case QUOTE:\n                 appendQuotedString(pattern, pos, stripCustom, true);\n-                break;\n+                {\n+\t\t\t\t\tpos.setIndex(pos.getIndex() + 1);\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n             case START_FE:\n                 fmtCount++;\n                 seekNonWs(pattern, pos);\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 144, 
          "faulty": "super.applyPattern(pattern);", 
          "type": "InsertBefore", 
          "seed": "super.applyPattern(pattern);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 146, 
          "faulty": "return;", 
          "type": "InsertBefore", 
          "seed": "if (registry == null) {\n  super.applyPattern(pattern);\n  toPattern=super.toPattern();\n  return;\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 159, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "pos.setIndex(pos.getIndex() + 1);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:13:04.265756743 -0500\n+++ /tmp/Arja_Defects4J_Lang_43/patches_21ag/Patch_275/patched/tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:31:23.429745462 -0500\n@@ -143,7 +143,6 @@\n         if (registry == null) {\n             super.applyPattern(pattern);\n             toPattern = super.toPattern();\n-            return;\n         }\n         ArrayList foundFormats = new ArrayList();\n         ArrayList foundDescriptions = new ArrayList();\n@@ -156,7 +155,10 @@\n             switch (c[pos.getIndex()]) {\n             case QUOTE:\n                 appendQuotedString(pattern, pos, stripCustom, true);\n-                break;\n+                {\n+\t\t\t\t\tpos.setIndex(pos.getIndex() + 1);\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n             case START_FE:\n                 fmtCount++;\n                 seekNonWs(pattern, pos);\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 146, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "throw new IndexOutOfBoundsException();"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 159, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "pos.setIndex(pos.getIndex() + 1);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:13:04.265756743 -0500\n+++ /tmp/Arja_Defects4J_Lang_43/patches_21ag/Patch_413/patched/tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:37:09.625964506 -0500\n@@ -141,7 +141,11 @@\n      */\n     public final void applyPattern(String pattern) {\n         if (registry == null) {\n-            super.applyPattern(pattern);\n+            if (registry == null) {\n+\t\t\t\tsuper.applyPattern(pattern);\n+\t\t\t\ttoPattern = super.toPattern();\n+\t\t\t\treturn;\n+\t\t\t}\n             toPattern = super.toPattern();\n             return;\n         }\n@@ -156,7 +160,10 @@\n             switch (c[pos.getIndex()]) {\n             case QUOTE:\n                 appendQuotedString(pattern, pos, stripCustom, true);\n-                break;\n+                {\n+\t\t\t\t\tpos.setIndex(pos.getIndex() + 1);\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n             case START_FE:\n                 fmtCount++;\n                 seekNonWs(pattern, pos);\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 144, 
          "faulty": "super.applyPattern(pattern);", 
          "type": "Replace", 
          "seed": "if (registry == null) {\n  super.applyPattern(pattern);\n  toPattern=super.toPattern();\n  return;\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 159, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "pos.setIndex(pos.getIndex() + 1);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:13:04.265756743 -0500\n+++ /tmp/Arja_Defects4J_Lang_43/patches_21ag/Patch_913/patched/tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:57:17.044789016 -0500\n@@ -149,14 +149,18 @@\n         ArrayList foundDescriptions = new ArrayList();\n         StringBuffer stripCustom = new StringBuffer(pattern.length());\n \n-        ParsePosition pos = new ParsePosition(0);\n+        toPattern = insertFormats(super.toPattern(), foundDescriptions);\n+\t\tParsePosition pos = new ParsePosition(0);\n         char[] c = pattern.toCharArray();\n         int fmtCount = 0;\n         while (pos.getIndex() < pattern.length()) {\n             switch (c[pos.getIndex()]) {\n             case QUOTE:\n                 appendQuotedString(pattern, pos, stripCustom, true);\n-                break;\n+                {\n+\t\t\t\t\tpos.setIndex(pos.getIndex() + 1);\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n             case START_FE:\n                 fmtCount++;\n                 seekNonWs(pattern, pos);\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 152, 
          "faulty": "ParsePosition pos=new ParsePosition(0);", 
          "type": "InsertBefore", 
          "seed": "toPattern=insertFormats(super.toPattern(),foundDescriptions);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 159, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "pos.setIndex(pos.getIndex() + 1);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:13:04.265756743 -0500\n+++ /tmp/Arja_Defects4J_Lang_43/patches_21ag/Patch_466/patched/tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:39:13.928607357 -0500\n@@ -145,7 +145,12 @@\n             toPattern = super.toPattern();\n             return;\n         }\n-        ArrayList foundFormats = new ArrayList();\n+        if (registry == null) {\n+\t\t\tsuper.applyPattern(pattern);\n+\t\t\ttoPattern = super.toPattern();\n+\t\t\treturn;\n+\t\t}\n+\t\tArrayList foundFormats = new ArrayList();\n         ArrayList foundDescriptions = new ArrayList();\n         StringBuffer stripCustom = new StringBuffer(pattern.length());\n \n@@ -156,7 +161,10 @@\n             switch (c[pos.getIndex()]) {\n             case QUOTE:\n                 appendQuotedString(pattern, pos, stripCustom, true);\n-                break;\n+                {\n+\t\t\t\t\tpos.setIndex(pos.getIndex() + 1);\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n             case START_FE:\n                 fmtCount++;\n                 seekNonWs(pattern, pos);\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 148, 
          "faulty": "ArrayList foundFormats=new ArrayList();", 
          "type": "InsertBefore", 
          "seed": "if (registry == null) {\n  super.applyPattern(pattern);\n  toPattern=super.toPattern();\n  return;\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 159, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "pos.setIndex(pos.getIndex() + 1);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:13:04.265756743 -0500\n+++ /tmp/Arja_Defects4J_Lang_43/patches_21ag/Patch_543/patched/tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:42:34.290419804 -0500\n@@ -143,7 +143,12 @@\n         if (registry == null) {\n             super.applyPattern(pattern);\n             toPattern = super.toPattern();\n-            return;\n+            if (registry == null) {\n+\t\t\t\tsuper.applyPattern(pattern);\n+\t\t\t\ttoPattern = super.toPattern();\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t\treturn;\n         }\n         ArrayList foundFormats = new ArrayList();\n         ArrayList foundDescriptions = new ArrayList();\n@@ -156,7 +161,10 @@\n             switch (c[pos.getIndex()]) {\n             case QUOTE:\n                 appendQuotedString(pattern, pos, stripCustom, true);\n-                break;\n+                {\n+\t\t\t\t\tpos.setIndex(pos.getIndex() + 1);\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n             case START_FE:\n                 fmtCount++;\n                 seekNonWs(pattern, pos);\n@@ -418,7 +426,8 @@\n             StringBuffer appendTo, boolean escapingOn) {\n         int start = pos.getIndex();\n         char[] c = pattern.toCharArray();\n-        if (escapingOn && c[start] == QUOTE) {\n+        this.registry = registry;\n+\t\tif (escapingOn && c[start] == QUOTE) {\n             return appendTo == null ? null : appendTo.append(QUOTE);\n         }\n         int lastHold = start;\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 146, 
          "faulty": "return;", 
          "type": "InsertBefore", 
          "seed": "if (registry == null) {\n  super.applyPattern(pattern);\n  toPattern=super.toPattern();\n  return;\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 421, 
          "faulty": "if (escapingOn && c[start] == QUOTE) {\n  return appendTo == null ? null : appendTo.append(QUOTE);\n}", 
          "type": "InsertBefore", 
          "seed": "this.registry=registry;"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 159, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "pos.setIndex(pos.getIndex() + 1);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:13:04.265756743 -0500\n+++ /tmp/Arja_Defects4J_Lang_43/patches_21ag/Patch_52/patched/tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:21:45.244062713 -0500\n@@ -417,7 +417,8 @@\n     private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n             StringBuffer appendTo, boolean escapingOn) {\n         int start = pos.getIndex();\n-        char[] c = pattern.toCharArray();\n+        pos.setIndex(pos.getIndex() + 1);\n+\t\tchar[] c = pattern.toCharArray();\n         if (escapingOn && c[start] == QUOTE) {\n             return appendTo == null ? null : appendTo.append(QUOTE);\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 420, 
          "faulty": "char[] c=pattern.toCharArray();", 
          "type": "InsertBefore", 
          "seed": "pos.setIndex(pos.getIndex() + 1);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:13:04.265756743 -0500\n+++ /tmp/Arja_Defects4J_Lang_43/patches_21ag/Patch_392/patched/tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:35:55.806770476 -0500\n@@ -143,7 +143,12 @@\n         if (registry == null) {\n             super.applyPattern(pattern);\n             toPattern = super.toPattern();\n-            return;\n+            if (registry == null) {\n+\t\t\t\tsuper.applyPattern(pattern);\n+\t\t\t\ttoPattern = super.toPattern();\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t\treturn;\n         }\n         ArrayList foundFormats = new ArrayList();\n         ArrayList foundDescriptions = new ArrayList();\n@@ -417,7 +422,8 @@\n     private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n             StringBuffer appendTo, boolean escapingOn) {\n         int start = pos.getIndex();\n-        char[] c = pattern.toCharArray();\n+        pos.setIndex(pos.getIndex() + 1);\n+\t\tchar[] c = pattern.toCharArray();\n         if (escapingOn && c[start] == QUOTE) {\n             return appendTo == null ? null : appendTo.append(QUOTE);\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 420, 
          "faulty": "char[] c=pattern.toCharArray();", 
          "type": "InsertBefore", 
          "seed": "pos.setIndex(pos.getIndex() + 1);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 146, 
          "faulty": "return;", 
          "type": "InsertBefore", 
          "seed": "if (registry == null) {\n  super.applyPattern(pattern);\n  toPattern=super.toPattern();\n  return;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:13:04.265756743 -0500\n+++ /tmp/Arja_Defects4J_Lang_43/patches_21ag/Patch_863/patched/tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:55:25.314006526 -0500\n@@ -156,7 +156,10 @@\n             switch (c[pos.getIndex()]) {\n             case QUOTE:\n                 appendQuotedString(pattern, pos, stripCustom, true);\n-                break;\n+                {\n+\t\t\t\t\tthis.registry = registry;\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n             case START_FE:\n                 fmtCount++;\n                 seekNonWs(pattern, pos);\n@@ -419,7 +422,7 @@\n         int start = pos.getIndex();\n         char[] c = pattern.toCharArray();\n         if (escapingOn && c[start] == QUOTE) {\n-            return appendTo == null ? null : appendTo.append(QUOTE);\n+            pos.setIndex(pos.getIndex() + 1);\n         }\n         int lastHold = start;\n         for (int i = pos.getIndex(); i < pattern.length(); i++) {\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 422, 
          "faulty": "return appendTo == null ? null : appendTo.append(QUOTE);", 
          "type": "Replace", 
          "seed": "pos.setIndex(pos.getIndex() + 1);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 159, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "this.registry=registry;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:13:04.265756743 -0500\n+++ /tmp/Arja_Defects4J_Lang_43/patches_21ag/Patch_636/patched/tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:46:19.207964177 -0500\n@@ -140,11 +140,7 @@\n      * @param pattern String\n      */\n     public final void applyPattern(String pattern) {\n-        if (registry == null) {\n-            super.applyPattern(pattern);\n-            toPattern = super.toPattern();\n-            return;\n-        }\n+        this.registry = registry;\n         ArrayList foundFormats = new ArrayList();\n         ArrayList foundDescriptions = new ArrayList();\n         StringBuffer stripCustom = new StringBuffer(pattern.length());\n@@ -156,7 +152,10 @@\n             switch (c[pos.getIndex()]) {\n             case QUOTE:\n                 appendQuotedString(pattern, pos, stripCustom, true);\n-                break;\n+                {\n+\t\t\t\t\tpos.setIndex(pos.getIndex() + 1);\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n             case START_FE:\n                 fmtCount++;\n                 seekNonWs(pattern, pos);\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 143, 
          "faulty": "if (registry == null) {\n  super.applyPattern(pattern);\n  toPattern=super.toPattern();\n  return;\n}", 
          "type": "Replace", 
          "seed": "this.registry=registry;"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 159, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "pos.setIndex(pos.getIndex() + 1);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:13:04.265756743 -0500\n+++ /tmp/Arja_Defects4J_Lang_43/patches_21ag/Patch_735/patched/tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:50:29.037236595 -0500\n@@ -184,7 +184,10 @@\n                 }\n                 // fall through\n             default:\n-                stripCustom.append(c[pos.getIndex()]);\n+                {\n+\t\t\t\t\tindex = 0;\n+\t\t\t\t\tstripCustom.append(c[pos.getIndex()]);\n+\t\t\t\t}\n                 next(pos);\n             }\n         }\n@@ -419,7 +422,7 @@\n         int start = pos.getIndex();\n         char[] c = pattern.toCharArray();\n         if (escapingOn && c[start] == QUOTE) {\n-            return appendTo == null ? null : appendTo.append(QUOTE);\n+            pos.setIndex(pos.getIndex() + 1);\n         }\n         int lastHold = start;\n         for (int i = pos.getIndex(); i < pattern.length(); i++) {\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 422, 
          "faulty": "return appendTo == null ? null : appendTo.append(QUOTE);", 
          "type": "Replace", 
          "seed": "pos.setIndex(pos.getIndex() + 1);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 187, 
          "faulty": "stripCustom.append(c[pos.getIndex()]);", 
          "type": "InsertBefore", 
          "seed": "index=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:13:04.265756743 -0500\n+++ /tmp/Arja_Defects4J_Lang_43/patches_21ag/Patch_1567/patched/tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 06:22:31.628286511 -0500\n@@ -145,7 +145,12 @@\n             toPattern = super.toPattern();\n             return;\n         }\n-        ArrayList foundFormats = new ArrayList();\n+        if (registry == null) {\n+\t\t\tsuper.applyPattern(pattern);\n+\t\t\ttoPattern = super.toPattern();\n+\t\t\treturn;\n+\t\t}\n+\t\tArrayList foundFormats = new ArrayList();\n         ArrayList foundDescriptions = new ArrayList();\n         StringBuffer stripCustom = new StringBuffer(pattern.length());\n \n@@ -156,7 +161,10 @@\n             switch (c[pos.getIndex()]) {\n             case QUOTE:\n                 appendQuotedString(pattern, pos, stripCustom, true);\n-                break;\n+                {\n+\t\t\t\t\tpos.setIndex(pos.getIndex() + 1);\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n             case START_FE:\n                 fmtCount++;\n                 seekNonWs(pattern, pos);\n@@ -184,7 +192,10 @@\n                 }\n                 // fall through\n             default:\n-                stripCustom.append(c[pos.getIndex()]);\n+                {\n+\t\t\t\t\tindex = 0;\n+\t\t\t\t\tstripCustom.append(c[pos.getIndex()]);\n+\t\t\t\t}\n                 next(pos);\n             }\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 148, 
          "faulty": "ArrayList foundFormats=new ArrayList();", 
          "type": "InsertBefore", 
          "seed": "if (registry == null) {\n  super.applyPattern(pattern);\n  toPattern=super.toPattern();\n  return;\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 159, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "pos.setIndex(pos.getIndex() + 1);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 187, 
          "faulty": "stripCustom.append(c[pos.getIndex()]);", 
          "type": "InsertBefore", 
          "seed": "index=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:13:04.265756743 -0500\n+++ /tmp/Arja_Defects4J_Lang_43/patches_21ag/Patch_1396/patched/tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 06:16:24.952281147 -0500\n@@ -141,7 +141,8 @@\n      */\n     public final void applyPattern(String pattern) {\n         if (registry == null) {\n-            super.applyPattern(pattern);\n+            this.registry = registry;\n+\t\t\tsuper.applyPattern(pattern);\n             toPattern = super.toPattern();\n             return;\n         }\n@@ -156,7 +157,10 @@\n             switch (c[pos.getIndex()]) {\n             case QUOTE:\n                 appendQuotedString(pattern, pos, stripCustom, true);\n-                break;\n+                {\n+\t\t\t\t\tpos.setIndex(pos.getIndex() + 1);\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n             case START_FE:\n                 fmtCount++;\n                 seekNonWs(pattern, pos);\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 144, 
          "faulty": "super.applyPattern(pattern);", 
          "type": "InsertBefore", 
          "seed": "this.registry=registry;"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 159, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "pos.setIndex(pos.getIndex() + 1);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:13:04.265756743 -0500\n+++ /tmp/Arja_Defects4J_Lang_43/patches_21ag/Patch_406/patched/tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:36:45.294230163 -0500\n@@ -143,7 +143,12 @@\n         if (registry == null) {\n             super.applyPattern(pattern);\n             toPattern = super.toPattern();\n-            return;\n+            if (registry == null) {\n+\t\t\t\tsuper.applyPattern(pattern);\n+\t\t\t\ttoPattern = super.toPattern();\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t\treturn;\n         }\n         ArrayList foundFormats = new ArrayList();\n         ArrayList foundDescriptions = new ArrayList();\n@@ -156,7 +161,10 @@\n             switch (c[pos.getIndex()]) {\n             case QUOTE:\n                 appendQuotedString(pattern, pos, stripCustom, true);\n-                break;\n+                {\n+\t\t\t\t\tpos.setIndex(pos.getIndex() + 1);\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n             case START_FE:\n                 fmtCount++;\n                 seekNonWs(pattern, pos);\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 146, 
          "faulty": "return;", 
          "type": "InsertBefore", 
          "seed": "if (registry == null) {\n  super.applyPattern(pattern);\n  toPattern=super.toPattern();\n  return;\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 159, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "pos.setIndex(pos.getIndex() + 1);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:13:04.265756743 -0500\n+++ /tmp/Arja_Defects4J_Lang_43/patches_21ag/Patch_1145/patched/tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 06:06:07.671006134 -0500\n@@ -142,6 +142,7 @@\n     public final void applyPattern(String pattern) {\n         if (registry == null) {\n             super.applyPattern(pattern);\n+\t\t\tsuper.applyPattern(pattern);\n             toPattern = super.toPattern();\n             return;\n         }\n@@ -153,10 +154,14 @@\n         char[] c = pattern.toCharArray();\n         int fmtCount = 0;\n         while (pos.getIndex() < pattern.length()) {\n-            switch (c[pos.getIndex()]) {\n+            toPattern = insertFormats(super.toPattern(), foundDescriptions);\n+\t\t\tswitch (c[pos.getIndex()]) {\n             case QUOTE:\n                 appendQuotedString(pattern, pos, stripCustom, true);\n-                break;\n+                {\n+\t\t\t\t\tpos.setIndex(pos.getIndex() + 1);\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n             case START_FE:\n                 fmtCount++;\n                 seekNonWs(pattern, pos);\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 144, 
          "faulty": "super.applyPattern(pattern);", 
          "type": "InsertBefore", 
          "seed": "super.applyPattern(pattern);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 156, 
          "faulty": "switch (c[pos.getIndex()]) {\ncase QUOTE:\n  appendQuotedString(pattern,pos,stripCustom,true);\nbreak;\ncase START_FE:\nfmtCount++;\nseekNonWs(pattern,pos);\nint start=pos.getIndex();\nint index=readArgumentIndex(pattern,next(pos));\nstripCustom.append(START_FE).append(index);\nseekNonWs(pattern,pos);\nFormat format=null;\nString formatDescription=null;\nif (c[pos.getIndex()] == START_FMT) {\nformatDescription=parseFormatDescription(pattern,next(pos));\nformat=getFormat(formatDescription);\nif (format == null) {\nstripCustom.append(START_FMT).append(formatDescription);\n}\n}\nfoundFormats.add(format);\nfoundDescriptions.add(format == null ? null : formatDescription);\nValidate.isTrue(foundFormats.size() == fmtCount);\nValidate.isTrue(foundDescriptions.size() == fmtCount);\nif (c[pos.getIndex()] != END_FE) {\nthrow new IllegalArgumentException(\"Unreadable format element at position \" + start);\n}\ndefault :\nstripCustom.append(c[pos.getIndex()]);\nnext(pos);\n}", 
          "type": "InsertBefore", 
          "seed": "toPattern=insertFormats(super.toPattern(),foundDescriptions);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 159, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "pos.setIndex(pos.getIndex() + 1);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:13:04.265756743 -0500\n+++ /tmp/Arja_Defects4J_Lang_43/patches_21ag/Patch_1484/patched/tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 06:19:36.714192143 -0500\n@@ -146,7 +146,12 @@\n             return;\n         }\n         ArrayList foundFormats = new ArrayList();\n-        ArrayList foundDescriptions = new ArrayList();\n+        if (registry == null) {\n+\t\t\tsuper.applyPattern(pattern);\n+\t\t\ttoPattern = super.toPattern();\n+\t\t\treturn;\n+\t\t}\n+\t\tArrayList foundDescriptions = new ArrayList();\n         StringBuffer stripCustom = new StringBuffer(pattern.length());\n \n         ParsePosition pos = new ParsePosition(0);\n@@ -417,7 +422,8 @@\n     private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n             StringBuffer appendTo, boolean escapingOn) {\n         int start = pos.getIndex();\n-        char[] c = pattern.toCharArray();\n+        next(pos);\n+\t\tchar[] c = pattern.toCharArray();\n         if (escapingOn && c[start] == QUOTE) {\n             return appendTo == null ? null : appendTo.append(QUOTE);\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 420, 
          "faulty": "char[] c=pattern.toCharArray();", 
          "type": "InsertBefore", 
          "seed": "next(pos);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 149, 
          "faulty": "ArrayList foundDescriptions=new ArrayList();", 
          "type": "InsertBefore", 
          "seed": "if (registry == null) {\n  super.applyPattern(pattern);\n  toPattern=super.toPattern();\n  return;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:13:04.265756743 -0500\n+++ /tmp/Arja_Defects4J_Lang_43/patches_21ag/Patch_902/patched/tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:56:50.625076911 -0500\n@@ -149,7 +149,8 @@\n         ArrayList foundDescriptions = new ArrayList();\n         StringBuffer stripCustom = new StringBuffer(pattern.length());\n \n-        ParsePosition pos = new ParsePosition(0);\n+        toPattern = insertFormats(super.toPattern(), foundDescriptions);\n+\t\tParsePosition pos = new ParsePosition(0);\n         char[] c = pattern.toCharArray();\n         int fmtCount = 0;\n         while (pos.getIndex() < pattern.length()) {\n@@ -417,10 +418,8 @@\n     private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n             StringBuffer appendTo, boolean escapingOn) {\n         int start = pos.getIndex();\n-        char[] c = pattern.toCharArray();\n-        if (escapingOn && c[start] == QUOTE) {\n-            return appendTo == null ? null : appendTo.append(QUOTE);\n-        }\n+        pos.setIndex(pos.getIndex() + 1);\n+\t\tchar[] c = pattern.toCharArray();\n         int lastHold = start;\n         for (int i = pos.getIndex(); i < pattern.length(); i++) {\n             if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 420, 
          "faulty": "char[] c=pattern.toCharArray();", 
          "type": "InsertBefore", 
          "seed": "pos.setIndex(pos.getIndex() + 1);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 422, 
          "faulty": "return appendTo == null ? null : appendTo.append(QUOTE);", 
          "type": "InsertBefore", 
          "seed": "seekNonWs(pattern,pos);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 421, 
          "faulty": "if (escapingOn && c[start] == QUOTE) {\n  return appendTo == null ? null : appendTo.append(QUOTE);\n}", 
          "type": "Delete", 
          "seed": "this.registry=registry;"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 152, 
          "faulty": "ParsePosition pos=new ParsePosition(0);", 
          "type": "InsertBefore", 
          "seed": "toPattern=insertFormats(super.toPattern(),foundDescriptions);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:13:04.265756743 -0500\n+++ /tmp/Arja_Defects4J_Lang_43/patches_21ag/Patch_1240/patched/tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 06:09:59.092483997 -0500\n@@ -155,8 +155,11 @@\n         while (pos.getIndex() < pattern.length()) {\n             switch (c[pos.getIndex()]) {\n             case QUOTE:\n-                appendQuotedString(pattern, pos, stripCustom, true);\n-                break;\n+                stripCustom.append(c[pos.getIndex()]);\n+                {\n+\t\t\t\t\tpos.setIndex(pos.getIndex() + 1);\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n             case START_FE:\n                 fmtCount++;\n                 seekNonWs(pattern, pos);\n@@ -417,7 +420,8 @@\n     private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n             StringBuffer appendTo, boolean escapingOn) {\n         int start = pos.getIndex();\n-        char[] c = pattern.toCharArray();\n+        super.applyPattern(pattern);\n+\t\tchar[] c = pattern.toCharArray();\n         if (escapingOn && c[start] == QUOTE) {\n             return appendTo == null ? null : appendTo.append(QUOTE);\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 420, 
          "faulty": "char[] c=pattern.toCharArray();", 
          "type": "InsertBefore", 
          "seed": "super.applyPattern(pattern);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 158, 
          "faulty": "appendQuotedString(pattern,pos,stripCustom,true);", 
          "type": "Replace", 
          "seed": "stripCustom.append(c[pos.getIndex()]);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 159, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "pos.setIndex(pos.getIndex() + 1);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:13:04.265756743 -0500\n+++ /tmp/Arja_Defects4J_Lang_43/patches_21ag/Patch_1495/patched/tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 06:19:54.809995001 -0500\n@@ -153,10 +153,14 @@\n         char[] c = pattern.toCharArray();\n         int fmtCount = 0;\n         while (pos.getIndex() < pattern.length()) {\n-            switch (c[pos.getIndex()]) {\n+            toPattern = insertFormats(super.toPattern(), foundDescriptions);\n+\t\t\tswitch (c[pos.getIndex()]) {\n             case QUOTE:\n                 appendQuotedString(pattern, pos, stripCustom, true);\n-                break;\n+                {\n+\t\t\t\t\tpos.setIndex(pos.getIndex() + 1);\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n             case START_FE:\n                 fmtCount++;\n                 seekNonWs(pattern, pos);\n@@ -417,7 +421,8 @@\n     private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n             StringBuffer appendTo, boolean escapingOn) {\n         int start = pos.getIndex();\n-        char[] c = pattern.toCharArray();\n+        seekNonWs(pattern, pos);\n+\t\tchar[] c = pattern.toCharArray();\n         if (escapingOn && c[start] == QUOTE) {\n             return appendTo == null ? null : appendTo.append(QUOTE);\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 420, 
          "faulty": "char[] c=pattern.toCharArray();", 
          "type": "InsertBefore", 
          "seed": "seekNonWs(pattern,pos);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 156, 
          "faulty": "switch (c[pos.getIndex()]) {\ncase QUOTE:\n  appendQuotedString(pattern,pos,stripCustom,true);\nbreak;\ncase START_FE:\nfmtCount++;\nseekNonWs(pattern,pos);\nint start=pos.getIndex();\nint index=readArgumentIndex(pattern,next(pos));\nstripCustom.append(START_FE).append(index);\nseekNonWs(pattern,pos);\nFormat format=null;\nString formatDescription=null;\nif (c[pos.getIndex()] == START_FMT) {\nformatDescription=parseFormatDescription(pattern,next(pos));\nformat=getFormat(formatDescription);\nif (format == null) {\nstripCustom.append(START_FMT).append(formatDescription);\n}\n}\nfoundFormats.add(format);\nfoundDescriptions.add(format == null ? null : formatDescription);\nValidate.isTrue(foundFormats.size() == fmtCount);\nValidate.isTrue(foundDescriptions.size() == fmtCount);\nif (c[pos.getIndex()] != END_FE) {\nthrow new IllegalArgumentException(\"Unreadable format element at position \" + start);\n}\ndefault :\nstripCustom.append(c[pos.getIndex()]);\nnext(pos);\n}", 
          "type": "InsertBefore", 
          "seed": "toPattern=insertFormats(super.toPattern(),foundDescriptions);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 159, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "pos.setIndex(pos.getIndex() + 1);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:13:04.265756743 -0500\n+++ /tmp/Arja_Defects4J_Lang_43/patches_21ag/Patch_1677/patched/tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 06:26:46.581508558 -0500\n@@ -143,7 +143,6 @@\n         if (registry == null) {\n             super.applyPattern(pattern);\n             toPattern = super.toPattern();\n-            return;\n         }\n         ArrayList foundFormats = new ArrayList();\n         ArrayList foundDescriptions = new ArrayList();\n@@ -156,7 +155,10 @@\n             switch (c[pos.getIndex()]) {\n             case QUOTE:\n                 appendQuotedString(pattern, pos, stripCustom, true);\n-                break;\n+                {\n+\t\t\t\t\tpos.setIndex(pos.getIndex() + 1);\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n             case START_FE:\n                 fmtCount++;\n                 seekNonWs(pattern, pos);\n@@ -418,7 +420,8 @@\n             StringBuffer appendTo, boolean escapingOn) {\n         int start = pos.getIndex();\n         char[] c = pattern.toCharArray();\n-        if (escapingOn && c[start] == QUOTE) {\n+        this.registry = registry;\n+\t\tif (escapingOn && c[start] == QUOTE) {\n             return appendTo == null ? null : appendTo.append(QUOTE);\n         }\n         int lastHold = start;\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 146, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "throw new IndexOutOfBoundsException();"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 421, 
          "faulty": "if (escapingOn && c[start] == QUOTE) {\n  return appendTo == null ? null : appendTo.append(QUOTE);\n}", 
          "type": "InsertBefore", 
          "seed": "this.registry=registry;"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 159, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "pos.setIndex(pos.getIndex() + 1);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:13:04.265756743 -0500\n+++ /tmp/Arja_Defects4J_Lang_43/patches_21ag/Patch_1209/patched/tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 06:08:41.601328353 -0500\n@@ -149,14 +149,18 @@\n         ArrayList foundDescriptions = new ArrayList();\n         StringBuffer stripCustom = new StringBuffer(pattern.length());\n \n-        ParsePosition pos = new ParsePosition(0);\n+        toPattern = super.toPattern();\n+\t\tParsePosition pos = new ParsePosition(0);\n         char[] c = pattern.toCharArray();\n         int fmtCount = 0;\n         while (pos.getIndex() < pattern.length()) {\n             switch (c[pos.getIndex()]) {\n             case QUOTE:\n                 appendQuotedString(pattern, pos, stripCustom, true);\n-                break;\n+                {\n+\t\t\t\t\tpos.setIndex(pos.getIndex() + 1);\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n             case START_FE:\n                 fmtCount++;\n                 seekNonWs(pattern, pos);\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 152, 
          "faulty": "ParsePosition pos=new ParsePosition(0);", 
          "type": "InsertBefore", 
          "seed": "toPattern=super.toPattern();"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 159, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "pos.setIndex(pos.getIndex() + 1);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:13:04.265756743 -0500\n+++ /tmp/Arja_Defects4J_Lang_43/patches_21ag/Patch_113/patched/tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:24:25.002317006 -0500\n@@ -156,7 +156,47 @@\n             switch (c[pos.getIndex()]) {\n             case QUOTE:\n                 appendQuotedString(pattern, pos, stripCustom, true);\n-                break;\n+                {\n+\t\t\t\t\twhile (pos.getIndex() < pattern.length()) {\n+\t\t\t\t\t\tswitch (c[pos.getIndex()]) {\n+\t\t\t\t\t\tcase QUOTE:\n+\t\t\t\t\t\t\tappendQuotedString(pattern, pos, stripCustom, true);\n+\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\tcase START_FE:\n+\t\t\t\t\t\t\tfmtCount++;\n+\t\t\t\t\t\t\tseekNonWs(pattern, pos);\n+\t\t\t\t\t\t\tint start = pos.getIndex();\n+\t\t\t\t\t\t\tint index = readArgumentIndex(pattern, next(pos));\n+\t\t\t\t\t\t\tstripCustom.append(START_FE).append(index);\n+\t\t\t\t\t\t\tseekNonWs(pattern, pos);\n+\t\t\t\t\t\t\tFormat format = null;\n+\t\t\t\t\t\t\tString formatDescription = null;\n+\t\t\t\t\t\t\tif (c[pos.getIndex()] == START_FMT) {\n+\t\t\t\t\t\t\t\tformatDescription = parseFormatDescription(\n+\t\t\t\t\t\t\t\t\t\tpattern, next(pos));\n+\t\t\t\t\t\t\t\tformat = getFormat(formatDescription);\n+\t\t\t\t\t\t\t\tif (format == null) {\n+\t\t\t\t\t\t\t\t\tstripCustom.append(START_FMT).append(\n+\t\t\t\t\t\t\t\t\t\t\tformatDescription);\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tfoundFormats.add(format);\n+\t\t\t\t\t\t\tfoundDescriptions.add(format == null ? null\n+\t\t\t\t\t\t\t\t\t: formatDescription);\n+\t\t\t\t\t\t\tValidate.isTrue(foundFormats.size() == fmtCount);\n+\t\t\t\t\t\t\tValidate.isTrue(foundDescriptions.size() == fmtCount);\n+\t\t\t\t\t\t\tif (c[pos.getIndex()] != END_FE) {\n+\t\t\t\t\t\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\t\t\t\t\t\"Unreadable format element at position \"\n+\t\t\t\t\t\t\t\t\t\t\t\t+ start);\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\tdefault:\n+\t\t\t\t\t\t\tstripCustom.append(c[pos.getIndex()]);\n+\t\t\t\t\t\t\tnext(pos);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n             case START_FE:\n                 fmtCount++;\n                 seekNonWs(pattern, pos);\n@@ -417,7 +457,8 @@\n     private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n             StringBuffer appendTo, boolean escapingOn) {\n         int start = pos.getIndex();\n-        char[] c = pattern.toCharArray();\n+        pos.setIndex(pos.getIndex() + 1);\n+\t\tchar[] c = pattern.toCharArray();\n         if (escapingOn && c[start] == QUOTE) {\n             return appendTo == null ? null : appendTo.append(QUOTE);\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 420, 
          "faulty": "char[] c=pattern.toCharArray();", 
          "type": "InsertBefore", 
          "seed": "pos.setIndex(pos.getIndex() + 1);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 159, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "while (pos.getIndex() < pattern.length()) {\nswitch (c[pos.getIndex()]) {\ncase QUOTE:\n    appendQuotedString(pattern,pos,stripCustom,true);\n  break;\ncase START_FE:\nfmtCount++;\nseekNonWs(pattern,pos);\nint start=pos.getIndex();\nint index=readArgumentIndex(pattern,next(pos));\nstripCustom.append(START_FE).append(index);\nseekNonWs(pattern,pos);\nFormat format=null;\nString formatDescription=null;\nif (c[pos.getIndex()] == START_FMT) {\nformatDescription=parseFormatDescription(pattern,next(pos));\nformat=getFormat(formatDescription);\nif (format == null) {\nstripCustom.append(START_FMT).append(formatDescription);\n}\n}\nfoundFormats.add(format);\nfoundDescriptions.add(format == null ? null : formatDescription);\nValidate.isTrue(foundFormats.size() == fmtCount);\nValidate.isTrue(foundDescriptions.size() == fmtCount);\nif (c[pos.getIndex()] != END_FE) {\nthrow new IllegalArgumentException(\"Unreadable format element at position \" + start);\n}\ndefault :\nstripCustom.append(c[pos.getIndex()]);\nnext(pos);\n}\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:13:04.265756743 -0500\n+++ /tmp/Arja_Defects4J_Lang_43/patches_21ag/Patch_1785/patched/tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 06:31:15.214580739 -0500\n@@ -401,7 +401,8 @@\n      */\n     private ParsePosition next(ParsePosition pos) {\n         pos.setIndex(pos.getIndex() + 1);\n-        return pos;\n+        this.registry = registry;\n+\t\treturn pos;\n     }\n \n     /**\n@@ -417,7 +418,8 @@\n     private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n             StringBuffer appendTo, boolean escapingOn) {\n         int start = pos.getIndex();\n-        char[] c = pattern.toCharArray();\n+        pos.setIndex(pos.getIndex() + 1);\n+\t\tchar[] c = pattern.toCharArray();\n         if (escapingOn && c[start] == QUOTE) {\n             return appendTo == null ? null : appendTo.append(QUOTE);\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 404, 
          "faulty": "return pos;", 
          "type": "InsertBefore", 
          "seed": "this.registry=registry;"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 420, 
          "faulty": "char[] c=pattern.toCharArray();", 
          "type": "InsertBefore", 
          "seed": "pos.setIndex(pos.getIndex() + 1);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:13:04.265756743 -0500\n+++ /tmp/Arja_Defects4J_Lang_43/patches_21ag/Patch_1416/patched/tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 06:16:57.339928338 -0500\n@@ -145,7 +145,8 @@\n             toPattern = super.toPattern();\n             return;\n         }\n-        ArrayList foundFormats = new ArrayList();\n+        this.registry = registry;\n+\t\tArrayList foundFormats = new ArrayList();\n         ArrayList foundDescriptions = new ArrayList();\n         StringBuffer stripCustom = new StringBuffer(pattern.length());\n \n@@ -417,7 +418,8 @@\n     private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n             StringBuffer appendTo, boolean escapingOn) {\n         int start = pos.getIndex();\n-        char[] c = pattern.toCharArray();\n+        next(pos);\n+\t\tchar[] c = pattern.toCharArray();\n         if (escapingOn && c[start] == QUOTE) {\n             return appendTo == null ? null : appendTo.append(QUOTE);\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 420, 
          "faulty": "char[] c=pattern.toCharArray();", 
          "type": "InsertBefore", 
          "seed": "next(pos);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 148, 
          "faulty": "ArrayList foundFormats=new ArrayList();", 
          "type": "InsertBefore", 
          "seed": "this.registry=registry;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:13:04.265756743 -0500\n+++ /tmp/Arja_Defects4J_Lang_43/patches_21ag/Patch_623/patched/tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:45:47.196313676 -0500\n@@ -147,7 +147,18 @@\n         }\n         ArrayList foundFormats = new ArrayList();\n         ArrayList foundDescriptions = new ArrayList();\n-        StringBuffer stripCustom = new StringBuffer(pattern.length());\n+        if (containsElements(foundFormats)) {\n+\t\t\tFormat[] origFormats = getFormats();\n+\t\t\tint i = 0;\n+\t\t\tfor (Iterator it = foundFormats.iterator(); it.hasNext(); i++) {\n+\t\t\t\tFormat f = (Format) it.next();\n+\t\t\t\tif (f != null) {\n+\t\t\t\t\torigFormats[i] = f;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tsuper.setFormats(origFormats);\n+\t\t}\n+\t\tStringBuffer stripCustom = new StringBuffer(pattern.length());\n \n         ParsePosition pos = new ParsePosition(0);\n         char[] c = pattern.toCharArray();\n@@ -156,7 +167,10 @@\n             switch (c[pos.getIndex()]) {\n             case QUOTE:\n                 appendQuotedString(pattern, pos, stripCustom, true);\n-                break;\n+                {\n+\t\t\t\t\tpos.setIndex(pos.getIndex() + 1);\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n             case START_FE:\n                 fmtCount++;\n                 seekNonWs(pattern, pos);\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 150, 
          "faulty": "StringBuffer stripCustom=new StringBuffer(pattern.length());", 
          "type": "InsertBefore", 
          "seed": "if (containsElements(foundFormats)) {\n  Format[] origFormats=getFormats();\n  int i=0;\n  for (Iterator it=foundFormats.iterator(); it.hasNext(); i++) {\n    Format f=(Format)it.next();\n    if (f != null) {\n      origFormats[i]=f;\n    }\n  }\n  super.setFormats(origFormats);\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 159, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "pos.setIndex(pos.getIndex() + 1);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:13:04.265756743 -0500\n+++ /tmp/Arja_Defects4J_Lang_43/patches_21ag/Patch_479/patched/tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:39:37.244352794 -0500\n@@ -142,6 +142,7 @@\n     public final void applyPattern(String pattern) {\n         if (registry == null) {\n             super.applyPattern(pattern);\n+\t\t\tsuper.applyPattern(pattern);\n             toPattern = super.toPattern();\n             return;\n         }\n@@ -156,7 +157,10 @@\n             switch (c[pos.getIndex()]) {\n             case QUOTE:\n                 appendQuotedString(pattern, pos, stripCustom, true);\n-                break;\n+                {\n+\t\t\t\t\tpos.setIndex(pos.getIndex() + 1);\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n             case START_FE:\n                 fmtCount++;\n                 seekNonWs(pattern, pos);\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 144, 
          "faulty": "super.applyPattern(pattern);", 
          "type": "InsertBefore", 
          "seed": "super.applyPattern(pattern);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 159, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "pos.setIndex(pos.getIndex() + 1);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:13:04.265756743 -0500\n+++ /tmp/Arja_Defects4J_Lang_43/patches_21ag/Patch_911/patched/tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:57:15.044810810 -0500\n@@ -140,11 +140,6 @@\n      * @param pattern String\n      */\n     public final void applyPattern(String pattern) {\n-        if (registry == null) {\n-            super.applyPattern(pattern);\n-            toPattern = super.toPattern();\n-            return;\n-        }\n         ArrayList foundFormats = new ArrayList();\n         ArrayList foundDescriptions = new ArrayList();\n         StringBuffer stripCustom = new StringBuffer(pattern.length());\n@@ -156,7 +151,10 @@\n             switch (c[pos.getIndex()]) {\n             case QUOTE:\n                 appendQuotedString(pattern, pos, stripCustom, true);\n-                break;\n+                {\n+\t\t\t\t\tpos.setIndex(pos.getIndex() + 1);\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n             case START_FE:\n                 fmtCount++;\n                 seekNonWs(pattern, pos);\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 143, 
          "faulty": "if (registry == null) {\n  super.applyPattern(pattern);\n  toPattern=super.toPattern();\n  return;\n}", 
          "type": "Delete", 
          "seed": "this.registry=registry;"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 145, 
          "faulty": "toPattern=super.toPattern();", 
          "type": "Delete", 
          "seed": "applyPattern(pattern);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 159, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "pos.setIndex(pos.getIndex() + 1);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:13:04.265756743 -0500\n+++ /tmp/Arja_Defects4J_Lang_43/patches_21ag/Patch_1282/patched/tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 06:11:31.631476124 -0500\n@@ -149,14 +149,18 @@\n         ArrayList foundDescriptions = new ArrayList();\n         StringBuffer stripCustom = new StringBuffer(pattern.length());\n \n-        ParsePosition pos = new ParsePosition(0);\n+        toPattern = super.toPattern();\n+\t\tParsePosition pos = new ParsePosition(0);\n         char[] c = pattern.toCharArray();\n         int fmtCount = 0;\n         while (pos.getIndex() < pattern.length()) {\n             switch (c[pos.getIndex()]) {\n             case QUOTE:\n                 appendQuotedString(pattern, pos, stripCustom, true);\n-                break;\n+                {\n+\t\t\t\t\tpos.setIndex(pos.getIndex() + 1);\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n             case START_FE:\n                 fmtCount++;\n                 seekNonWs(pattern, pos);\n@@ -184,7 +188,10 @@\n                 }\n                 // fall through\n             default:\n-                stripCustom.append(c[pos.getIndex()]);\n+                {\n+\t\t\t\t\tindex = 0;\n+\t\t\t\t\tstripCustom.append(c[pos.getIndex()]);\n+\t\t\t\t}\n                 next(pos);\n             }\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 152, 
          "faulty": "ParsePosition pos=new ParsePosition(0);", 
          "type": "InsertBefore", 
          "seed": "toPattern=super.toPattern();"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 159, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "pos.setIndex(pos.getIndex() + 1);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 187, 
          "faulty": "stripCustom.append(c[pos.getIndex()]);", 
          "type": "InsertBefore", 
          "seed": "index=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:13:04.265756743 -0500\n+++ /tmp/Arja_Defects4J_Lang_43/patches_21ag/Patch_1479/patched/tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 06:19:24.722322784 -0500\n@@ -143,7 +143,12 @@\n         if (registry == null) {\n             super.applyPattern(pattern);\n             toPattern = super.toPattern();\n-            return;\n+            if (registry == null) {\n+\t\t\t\tsuper.applyPattern(pattern);\n+\t\t\t\ttoPattern = super.toPattern();\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t\treturn;\n         }\n         ArrayList foundFormats = new ArrayList();\n         ArrayList foundDescriptions = new ArrayList();\n@@ -155,8 +160,52 @@\n         while (pos.getIndex() < pattern.length()) {\n             switch (c[pos.getIndex()]) {\n             case QUOTE:\n-                appendQuotedString(pattern, pos, stripCustom, true);\n-                break;\n+                {\n+\t\t\t\t\ttoPattern = insertFormats(super.toPattern(),\n+\t\t\t\t\t\t\tfoundDescriptions);\n+\t\t\t\t\tappendQuotedString(pattern, pos, stripCustom, true);\n+\t\t\t\t}\n+                {\n+\t\t\t\t\twhile (pos.getIndex() < pattern.length()) {\n+\t\t\t\t\t\tswitch (c[pos.getIndex()]) {\n+\t\t\t\t\t\tcase QUOTE:\n+\t\t\t\t\t\t\tappendQuotedString(pattern, pos, stripCustom, true);\n+\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\tcase START_FE:\n+\t\t\t\t\t\t\tfmtCount++;\n+\t\t\t\t\t\t\tseekNonWs(pattern, pos);\n+\t\t\t\t\t\t\tint start = pos.getIndex();\n+\t\t\t\t\t\t\tint index = readArgumentIndex(pattern, next(pos));\n+\t\t\t\t\t\t\tstripCustom.append(START_FE).append(index);\n+\t\t\t\t\t\t\tseekNonWs(pattern, pos);\n+\t\t\t\t\t\t\tFormat format = null;\n+\t\t\t\t\t\t\tString formatDescription = null;\n+\t\t\t\t\t\t\tif (c[pos.getIndex()] == START_FMT) {\n+\t\t\t\t\t\t\t\tformatDescription = parseFormatDescription(\n+\t\t\t\t\t\t\t\t\t\tpattern, next(pos));\n+\t\t\t\t\t\t\t\tformat = getFormat(formatDescription);\n+\t\t\t\t\t\t\t\tif (format == null) {\n+\t\t\t\t\t\t\t\t\tstripCustom.append(START_FMT).append(\n+\t\t\t\t\t\t\t\t\t\t\tformatDescription);\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tfoundFormats.add(format);\n+\t\t\t\t\t\t\tfoundDescriptions.add(format == null ? null\n+\t\t\t\t\t\t\t\t\t: formatDescription);\n+\t\t\t\t\t\t\tValidate.isTrue(foundFormats.size() == fmtCount);\n+\t\t\t\t\t\t\tValidate.isTrue(foundDescriptions.size() == fmtCount);\n+\t\t\t\t\t\t\tif (c[pos.getIndex()] != END_FE) {\n+\t\t\t\t\t\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\t\t\t\t\t\"Unreadable format element at position \"\n+\t\t\t\t\t\t\t\t\t\t\t\t+ start);\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\tdefault:\n+\t\t\t\t\t\t\tstripCustom.append(c[pos.getIndex()]);\n+\t\t\t\t\t\t\tnext(pos);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n             case START_FE:\n                 fmtCount++;\n                 seekNonWs(pattern, pos);\n@@ -417,7 +466,8 @@\n     private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n             StringBuffer appendTo, boolean escapingOn) {\n         int start = pos.getIndex();\n-        char[] c = pattern.toCharArray();\n+        pos.setIndex(pos.getIndex() + 1);\n+\t\tchar[] c = pattern.toCharArray();\n         if (escapingOn && c[start] == QUOTE) {\n             return appendTo == null ? null : appendTo.append(QUOTE);\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 420, 
          "faulty": "char[] c=pattern.toCharArray();", 
          "type": "InsertBefore", 
          "seed": "pos.setIndex(pos.getIndex() + 1);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 146, 
          "faulty": "return;", 
          "type": "InsertBefore", 
          "seed": "if (registry == null) {\n  super.applyPattern(pattern);\n  toPattern=super.toPattern();\n  return;\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 158, 
          "faulty": "appendQuotedString(pattern,pos,stripCustom,true);", 
          "type": "InsertBefore", 
          "seed": "toPattern=insertFormats(super.toPattern(),foundDescriptions);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 159, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "while (pos.getIndex() < pattern.length()) {\nswitch (c[pos.getIndex()]) {\ncase QUOTE:\n    appendQuotedString(pattern,pos,stripCustom,true);\n  break;\ncase START_FE:\nfmtCount++;\nseekNonWs(pattern,pos);\nint start=pos.getIndex();\nint index=readArgumentIndex(pattern,next(pos));\nstripCustom.append(START_FE).append(index);\nseekNonWs(pattern,pos);\nFormat format=null;\nString formatDescription=null;\nif (c[pos.getIndex()] == START_FMT) {\nformatDescription=parseFormatDescription(pattern,next(pos));\nformat=getFormat(formatDescription);\nif (format == null) {\nstripCustom.append(START_FMT).append(formatDescription);\n}\n}\nfoundFormats.add(format);\nfoundDescriptions.add(format == null ? null : formatDescription);\nValidate.isTrue(foundFormats.size() == fmtCount);\nValidate.isTrue(foundDescriptions.size() == fmtCount);\nif (c[pos.getIndex()] != END_FE) {\nthrow new IllegalArgumentException(\"Unreadable format element at position \" + start);\n}\ndefault :\nstripCustom.append(c[pos.getIndex()]);\nnext(pos);\n}\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:13:04.265756743 -0500\n+++ /tmp/Arja_Defects4J_Lang_43/patches_21ag/Patch_1518/patched/tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 06:20:47.101425314 -0500\n@@ -417,9 +417,10 @@\n     private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n             StringBuffer appendTo, boolean escapingOn) {\n         int start = pos.getIndex();\n-        char[] c = pattern.toCharArray();\n+        seekNonWs(pattern, pos);\n+\t\tchar[] c = pattern.toCharArray();\n         if (escapingOn && c[start] == QUOTE) {\n-            return appendTo == null ? null : appendTo.append(QUOTE);\n+            pos.setIndex(pos.getIndex() + 1);\n         }\n         int lastHold = start;\n         for (int i = pos.getIndex(); i < pattern.length(); i++) {\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 420, 
          "faulty": "char[] c=pattern.toCharArray();", 
          "type": "InsertBefore", 
          "seed": "seekNonWs(pattern,pos);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 422, 
          "faulty": "return appendTo == null ? null : appendTo.append(QUOTE);", 
          "type": "Replace", 
          "seed": "pos.setIndex(pos.getIndex() + 1);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:13:04.265756743 -0500\n+++ /tmp/Arja_Defects4J_Lang_43/patches_21ag/Patch_552/patched/tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:42:57.054171271 -0500\n@@ -156,7 +156,10 @@\n             switch (c[pos.getIndex()]) {\n             case QUOTE:\n                 appendQuotedString(pattern, pos, stripCustom, true);\n-                break;\n+                {\n+\t\t\t\t\tpos.setIndex(pos.getIndex() + 1);\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n             case START_FE:\n                 fmtCount++;\n                 seekNonWs(pattern, pos);\n@@ -184,7 +187,14 @@\n                 }\n                 // fall through\n             default:\n-                stripCustom.append(c[pos.getIndex()]);\n+                {\n+\t\t\t\t\tif (registry == null) {\n+\t\t\t\t\t\tsuper.applyPattern(pattern);\n+\t\t\t\t\t\ttoPattern = super.toPattern();\n+\t\t\t\t\t\treturn;\n+\t\t\t\t\t}\n+\t\t\t\t\tstripCustom.append(c[pos.getIndex()]);\n+\t\t\t\t}\n                 next(pos);\n             }\n         }\n@@ -417,7 +427,8 @@\n     private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n             StringBuffer appendTo, boolean escapingOn) {\n         int start = pos.getIndex();\n-        char[] c = pattern.toCharArray();\n+        seekNonWs(pattern, pos);\n+\t\tchar[] c = pattern.toCharArray();\n         if (escapingOn && c[start] == QUOTE) {\n             return appendTo == null ? null : appendTo.append(QUOTE);\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 420, 
          "faulty": "char[] c=pattern.toCharArray();", 
          "type": "InsertBefore", 
          "seed": "seekNonWs(pattern,pos);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 159, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "pos.setIndex(pos.getIndex() + 1);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 187, 
          "faulty": "stripCustom.append(c[pos.getIndex()]);", 
          "type": "InsertBefore", 
          "seed": "if (registry == null) {\n  super.applyPattern(pattern);\n  toPattern=super.toPattern();\n  return;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:13:04.265756743 -0500\n+++ /tmp/Arja_Defects4J_Lang_43/patches_21ag/Patch_1267/patched/tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 06:10:56.331860590 -0500\n@@ -146,7 +146,12 @@\n             return;\n         }\n         ArrayList foundFormats = new ArrayList();\n-        ArrayList foundDescriptions = new ArrayList();\n+        if (registry == null) {\n+\t\t\tsuper.applyPattern(pattern);\n+\t\t\ttoPattern = super.toPattern();\n+\t\t\treturn;\n+\t\t}\n+\t\tArrayList foundDescriptions = new ArrayList();\n         StringBuffer stripCustom = new StringBuffer(pattern.length());\n \n         ParsePosition pos = new ParsePosition(0);\n@@ -419,7 +424,7 @@\n         int start = pos.getIndex();\n         char[] c = pattern.toCharArray();\n         if (escapingOn && c[start] == QUOTE) {\n-            return appendTo == null ? null : appendTo.append(QUOTE);\n+            pos.setIndex(pos.getIndex() + 1);\n         }\n         int lastHold = start;\n         for (int i = pos.getIndex(); i < pattern.length(); i++) {\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 422, 
          "faulty": "return appendTo == null ? null : appendTo.append(QUOTE);", 
          "type": "Replace", 
          "seed": "pos.setIndex(pos.getIndex() + 1);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 149, 
          "faulty": "ArrayList foundDescriptions=new ArrayList();", 
          "type": "InsertBefore", 
          "seed": "if (registry == null) {\n  super.applyPattern(pattern);\n  toPattern=super.toPattern();\n  return;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:13:04.265756743 -0500\n+++ /tmp/Arja_Defects4J_Lang_43/patches_21ag/Patch_855/patched/tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:55:07.306202749 -0500\n@@ -151,12 +151,16 @@\n \n         ParsePosition pos = new ParsePosition(0);\n         char[] c = pattern.toCharArray();\n-        int fmtCount = 0;\n+        toPattern = super.toPattern();\n+\t\tint fmtCount = 0;\n         while (pos.getIndex() < pattern.length()) {\n             switch (c[pos.getIndex()]) {\n             case QUOTE:\n                 appendQuotedString(pattern, pos, stripCustom, true);\n-                break;\n+                {\n+\t\t\t\t\tpos.setIndex(pos.getIndex() + 1);\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n             case START_FE:\n                 fmtCount++;\n                 seekNonWs(pattern, pos);\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 154, 
          "faulty": "int fmtCount=0;", 
          "type": "InsertBefore", 
          "seed": "toPattern=super.toPattern();"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 159, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "pos.setIndex(pos.getIndex() + 1);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:13:04.265756743 -0500\n+++ /tmp/Arja_Defects4J_Lang_43/patches_21ag/Patch_1033/patched/tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 06:01:46.293854828 -0500\n@@ -156,7 +156,10 @@\n             switch (c[pos.getIndex()]) {\n             case QUOTE:\n                 appendQuotedString(pattern, pos, stripCustom, true);\n-                break;\n+                {\n+\t\t\t\t\tpos.setIndex(pos.getIndex() + 1);\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n             case START_FE:\n                 fmtCount++;\n                 seekNonWs(pattern, pos);\n@@ -400,7 +403,8 @@\n      * @return <code>pos</code>\n      */\n     private ParsePosition next(ParsePosition pos) {\n-        pos.setIndex(pos.getIndex() + 1);\n+        this.registry = registry;\n+\t\tpos.setIndex(pos.getIndex() + 1);\n         return pos;\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 403, 
          "faulty": "pos.setIndex(pos.getIndex() + 1);", 
          "type": "InsertBefore", 
          "seed": "this.registry=registry;"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 159, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "pos.setIndex(pos.getIndex() + 1);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:13:04.265756743 -0500\n+++ /tmp/Arja_Defects4J_Lang_43/patches_21ag/Patch_678/patched/tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:47:56.390903151 -0500\n@@ -417,10 +417,8 @@\n     private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n             StringBuffer appendTo, boolean escapingOn) {\n         int start = pos.getIndex();\n-        char[] c = pattern.toCharArray();\n-        if (escapingOn && c[start] == QUOTE) {\n-            return appendTo == null ? null : appendTo.append(QUOTE);\n-        }\n+        pos.setIndex(pos.getIndex() + 1);\n+\t\tchar[] c = pattern.toCharArray();\n         int lastHold = start;\n         for (int i = pos.getIndex(); i < pattern.length(); i++) {\n             if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 420, 
          "faulty": "char[] c=pattern.toCharArray();", 
          "type": "InsertBefore", 
          "seed": "pos.setIndex(pos.getIndex() + 1);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 421, 
          "faulty": "if (escapingOn && c[start] == QUOTE) {\n  return appendTo == null ? null : appendTo.append(QUOTE);\n}", 
          "type": "Delete", 
          "seed": "this.registry=registry;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:13:04.265756743 -0500\n+++ /tmp/Arja_Defects4J_Lang_43/patches_21ag/Patch_612/patched/tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:45:16.448649374 -0500\n@@ -149,14 +149,55 @@\n         ArrayList foundDescriptions = new ArrayList();\n         StringBuffer stripCustom = new StringBuffer(pattern.length());\n \n-        ParsePosition pos = new ParsePosition(0);\n+        toPattern = insertFormats(super.toPattern(), foundDescriptions);\n+\t\tParsePosition pos = new ParsePosition(0);\n         char[] c = pattern.toCharArray();\n         int fmtCount = 0;\n         while (pos.getIndex() < pattern.length()) {\n             switch (c[pos.getIndex()]) {\n             case QUOTE:\n                 appendQuotedString(pattern, pos, stripCustom, true);\n-                break;\n+                {\n+\t\t\t\t\twhile (pos.getIndex() < pattern.length()) {\n+\t\t\t\t\t\tswitch (c[pos.getIndex()]) {\n+\t\t\t\t\t\tcase QUOTE:\n+\t\t\t\t\t\t\tappendQuotedString(pattern, pos, stripCustom, true);\n+\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\tcase START_FE:\n+\t\t\t\t\t\t\tfmtCount++;\n+\t\t\t\t\t\t\tseekNonWs(pattern, pos);\n+\t\t\t\t\t\t\tint start = pos.getIndex();\n+\t\t\t\t\t\t\tint index = readArgumentIndex(pattern, next(pos));\n+\t\t\t\t\t\t\tstripCustom.append(START_FE).append(index);\n+\t\t\t\t\t\t\tseekNonWs(pattern, pos);\n+\t\t\t\t\t\t\tFormat format = null;\n+\t\t\t\t\t\t\tString formatDescription = null;\n+\t\t\t\t\t\t\tif (c[pos.getIndex()] == START_FMT) {\n+\t\t\t\t\t\t\t\tformatDescription = parseFormatDescription(\n+\t\t\t\t\t\t\t\t\t\tpattern, next(pos));\n+\t\t\t\t\t\t\t\tformat = getFormat(formatDescription);\n+\t\t\t\t\t\t\t\tif (format == null) {\n+\t\t\t\t\t\t\t\t\tstripCustom.append(START_FMT).append(\n+\t\t\t\t\t\t\t\t\t\t\tformatDescription);\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tfoundFormats.add(format);\n+\t\t\t\t\t\t\tfoundDescriptions.add(format == null ? null\n+\t\t\t\t\t\t\t\t\t: formatDescription);\n+\t\t\t\t\t\t\tValidate.isTrue(foundFormats.size() == fmtCount);\n+\t\t\t\t\t\t\tValidate.isTrue(foundDescriptions.size() == fmtCount);\n+\t\t\t\t\t\t\tif (c[pos.getIndex()] != END_FE) {\n+\t\t\t\t\t\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\t\t\t\t\t\"Unreadable format element at position \"\n+\t\t\t\t\t\t\t\t\t\t\t\t+ start);\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\tdefault:\n+\t\t\t\t\t\t\tstripCustom.append(c[pos.getIndex()]);\n+\t\t\t\t\t\t\tnext(pos);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n             case START_FE:\n                 fmtCount++;\n                 seekNonWs(pattern, pos);\n@@ -417,7 +458,8 @@\n     private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n             StringBuffer appendTo, boolean escapingOn) {\n         int start = pos.getIndex();\n-        char[] c = pattern.toCharArray();\n+        pos.setIndex(pos.getIndex() + 1);\n+\t\tchar[] c = pattern.toCharArray();\n         if (escapingOn && c[start] == QUOTE) {\n             return appendTo == null ? null : appendTo.append(QUOTE);\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 420, 
          "faulty": "char[] c=pattern.toCharArray();", 
          "type": "InsertBefore", 
          "seed": "pos.setIndex(pos.getIndex() + 1);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 152, 
          "faulty": "ParsePosition pos=new ParsePosition(0);", 
          "type": "InsertBefore", 
          "seed": "toPattern=insertFormats(super.toPattern(),foundDescriptions);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 159, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "while (pos.getIndex() < pattern.length()) {\nswitch (c[pos.getIndex()]) {\ncase QUOTE:\n    appendQuotedString(pattern,pos,stripCustom,true);\n  break;\ncase START_FE:\nfmtCount++;\nseekNonWs(pattern,pos);\nint start=pos.getIndex();\nint index=readArgumentIndex(pattern,next(pos));\nstripCustom.append(START_FE).append(index);\nseekNonWs(pattern,pos);\nFormat format=null;\nString formatDescription=null;\nif (c[pos.getIndex()] == START_FMT) {\nformatDescription=parseFormatDescription(pattern,next(pos));\nformat=getFormat(formatDescription);\nif (format == null) {\nstripCustom.append(START_FMT).append(formatDescription);\n}\n}\nfoundFormats.add(format);\nfoundDescriptions.add(format == null ? null : formatDescription);\nValidate.isTrue(foundFormats.size() == fmtCount);\nValidate.isTrue(foundDescriptions.size() == fmtCount);\nif (c[pos.getIndex()] != END_FE) {\nthrow new IllegalArgumentException(\"Unreadable format element at position \" + start);\n}\ndefault :\nstripCustom.append(c[pos.getIndex()]);\nnext(pos);\n}\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:13:04.265756743 -0500\n+++ /tmp/Arja_Defects4J_Lang_43/patches_21ag/Patch_282/patched/tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:31:33.441636086 -0500\n@@ -147,7 +147,8 @@\n         }\n         ArrayList foundFormats = new ArrayList();\n         ArrayList foundDescriptions = new ArrayList();\n-        StringBuffer stripCustom = new StringBuffer(pattern.length());\n+        this.registry = registry;\n+\t\tStringBuffer stripCustom = new StringBuffer(pattern.length());\n \n         ParsePosition pos = new ParsePosition(0);\n         char[] c = pattern.toCharArray();\n@@ -156,7 +157,10 @@\n             switch (c[pos.getIndex()]) {\n             case QUOTE:\n                 appendQuotedString(pattern, pos, stripCustom, true);\n-                break;\n+                {\n+\t\t\t\t\tpos.setIndex(pos.getIndex() + 1);\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n             case START_FE:\n                 fmtCount++;\n                 seekNonWs(pattern, pos);\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 150, 
          "faulty": "StringBuffer stripCustom=new StringBuffer(pattern.length());", 
          "type": "InsertBefore", 
          "seed": "this.registry=registry;"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 159, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "pos.setIndex(pos.getIndex() + 1);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:13:04.265756743 -0500\n+++ /tmp/Arja_Defects4J_Lang_43/patches_21ag/Patch_213/patched/tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:29:11.003192193 -0500\n@@ -417,9 +417,11 @@\n     private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n             StringBuffer appendTo, boolean escapingOn) {\n         int start = pos.getIndex();\n-        char[] c = pattern.toCharArray();\n+        pos.setIndex(pos.getIndex() + 1);\n+\t\tchar[] c = pattern.toCharArray();\n         if (escapingOn && c[start] == QUOTE) {\n-            return appendTo == null ? null : appendTo.append(QUOTE);\n+            seekNonWs(pattern, pos);\n+\t\t\treturn appendTo == null ? null : appendTo.append(QUOTE);\n         }\n         int lastHold = start;\n         for (int i = pos.getIndex(); i < pattern.length(); i++) {\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 420, 
          "faulty": "char[] c=pattern.toCharArray();", 
          "type": "InsertBefore", 
          "seed": "pos.setIndex(pos.getIndex() + 1);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 422, 
          "faulty": "return appendTo == null ? null : appendTo.append(QUOTE);", 
          "type": "InsertBefore", 
          "seed": "seekNonWs(pattern,pos);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:13:04.265756743 -0500\n+++ /tmp/Arja_Defects4J_Lang_43/patches_21ag/Patch_1611/patched/tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 06:24:22.239081364 -0500\n@@ -143,10 +143,20 @@\n         if (registry == null) {\n             super.applyPattern(pattern);\n             toPattern = super.toPattern();\n-            return;\n+            if (registry == null) {\n+\t\t\t\tsuper.applyPattern(pattern);\n+\t\t\t\ttoPattern = super.toPattern();\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t\treturn;\n         }\n         ArrayList foundFormats = new ArrayList();\n-        ArrayList foundDescriptions = new ArrayList();\n+        if (registry == null) {\n+\t\t\tsuper.applyPattern(pattern);\n+\t\t\ttoPattern = super.toPattern();\n+\t\t\treturn;\n+\t\t}\n+\t\tArrayList foundDescriptions = new ArrayList();\n         StringBuffer stripCustom = new StringBuffer(pattern.length());\n \n         ParsePosition pos = new ParsePosition(0);\n@@ -419,7 +429,7 @@\n         int start = pos.getIndex();\n         char[] c = pattern.toCharArray();\n         if (escapingOn && c[start] == QUOTE) {\n-            return appendTo == null ? null : appendTo.append(QUOTE);\n+            pos.setIndex(pos.getIndex() + 1);\n         }\n         int lastHold = start;\n         for (int i = pos.getIndex(); i < pattern.length(); i++) {\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 146, 
          "faulty": "return;", 
          "type": "InsertBefore", 
          "seed": "if (registry == null) {\n  super.applyPattern(pattern);\n  toPattern=super.toPattern();\n  return;\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 422, 
          "faulty": "return appendTo == null ? null : appendTo.append(QUOTE);", 
          "type": "Replace", 
          "seed": "pos.setIndex(pos.getIndex() + 1);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 149, 
          "faulty": "ArrayList foundDescriptions=new ArrayList();", 
          "type": "InsertBefore", 
          "seed": "if (registry == null) {\n  super.applyPattern(pattern);\n  toPattern=super.toPattern();\n  return;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:13:04.265756743 -0500\n+++ /tmp/Arja_Defects4J_Lang_43/patches_21ag/Patch_472/patched/tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:39:23.864498876 -0500\n@@ -145,7 +145,8 @@\n             toPattern = super.toPattern();\n             return;\n         }\n-        ArrayList foundFormats = new ArrayList();\n+        this.registry = registry;\n+\t\tArrayList foundFormats = new ArrayList();\n         ArrayList foundDescriptions = new ArrayList();\n         StringBuffer stripCustom = new StringBuffer(pattern.length());\n \n@@ -156,7 +157,10 @@\n             switch (c[pos.getIndex()]) {\n             case QUOTE:\n                 appendQuotedString(pattern, pos, stripCustom, true);\n-                break;\n+                {\n+\t\t\t\t\tpos.setIndex(pos.getIndex() + 1);\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n             case START_FE:\n                 fmtCount++;\n                 seekNonWs(pattern, pos);\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 148, 
          "faulty": "ArrayList foundFormats=new ArrayList();", 
          "type": "InsertBefore", 
          "seed": "this.registry=registry;"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 159, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "pos.setIndex(pos.getIndex() + 1);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:13:04.265756743 -0500\n+++ /tmp/Arja_Defects4J_Lang_43/patches_21ag/Patch_850/patched/tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:54:59.310289876 -0500\n@@ -142,8 +142,8 @@\n     public final void applyPattern(String pattern) {\n         if (registry == null) {\n             super.applyPattern(pattern);\n+\t\t\tsuper.applyPattern(pattern);\n             toPattern = super.toPattern();\n-            return;\n         }\n         ArrayList foundFormats = new ArrayList();\n         ArrayList foundDescriptions = new ArrayList();\n@@ -156,7 +156,10 @@\n             switch (c[pos.getIndex()]) {\n             case QUOTE:\n                 appendQuotedString(pattern, pos, stripCustom, true);\n-                break;\n+                {\n+\t\t\t\t\tpos.setIndex(pos.getIndex() + 1);\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n             case START_FE:\n                 fmtCount++;\n                 seekNonWs(pattern, pos);\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 144, 
          "faulty": "super.applyPattern(pattern);", 
          "type": "InsertBefore", 
          "seed": "super.applyPattern(pattern);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 146, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "if (registry == null) {\n  super.applyPattern(pattern);\n  toPattern=super.toPattern();\n  return;\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 159, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "pos.setIndex(pos.getIndex() + 1);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:13:04.265756743 -0500\n+++ /tmp/Arja_Defects4J_Lang_43/patches_21ag/Patch_277/patched/tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:31:25.481723044 -0500\n@@ -145,7 +145,8 @@\n             toPattern = super.toPattern();\n             return;\n         }\n-        ArrayList foundFormats = new ArrayList();\n+        toPattern = super.toPattern();\n+\t\tArrayList foundFormats = new ArrayList();\n         ArrayList foundDescriptions = new ArrayList();\n         StringBuffer stripCustom = new StringBuffer(pattern.length());\n \n@@ -156,7 +157,10 @@\n             switch (c[pos.getIndex()]) {\n             case QUOTE:\n                 appendQuotedString(pattern, pos, stripCustom, true);\n-                break;\n+                {\n+\t\t\t\t\tpos.setIndex(pos.getIndex() + 1);\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n             case START_FE:\n                 fmtCount++;\n                 seekNonWs(pattern, pos);\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 148, 
          "faulty": "ArrayList foundFormats=new ArrayList();", 
          "type": "InsertBefore", 
          "seed": "toPattern=super.toPattern();"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 159, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "pos.setIndex(pos.getIndex() + 1);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:13:04.265756743 -0500\n+++ /tmp/Arja_Defects4J_Lang_43/patches_21ag/Patch_835/patched/tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:54:23.142683972 -0500\n@@ -141,7 +141,11 @@\n      */\n     public final void applyPattern(String pattern) {\n         if (registry == null) {\n-            super.applyPattern(pattern);\n+            if (registry == null) {\n+\t\t\t\tsuper.applyPattern(pattern);\n+\t\t\t\ttoPattern = super.toPattern();\n+\t\t\t\treturn;\n+\t\t\t}\n             toPattern = super.toPattern();\n             return;\n         }\n@@ -152,11 +156,19 @@\n         ParsePosition pos = new ParsePosition(0);\n         char[] c = pattern.toCharArray();\n         int fmtCount = 0;\n-        while (pos.getIndex() < pattern.length()) {\n+        if (registry == null) {\n+\t\t\tsuper.applyPattern(pattern);\n+\t\t\ttoPattern = super.toPattern();\n+\t\t\treturn;\n+\t\t}\n+\t\twhile (pos.getIndex() < pattern.length()) {\n             switch (c[pos.getIndex()]) {\n             case QUOTE:\n                 appendQuotedString(pattern, pos, stripCustom, true);\n-                break;\n+                {\n+\t\t\t\t\tpos.setIndex(pos.getIndex() + 1);\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n             case START_FE:\n                 fmtCount++;\n                 seekNonWs(pattern, pos);\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 144, 
          "faulty": "super.applyPattern(pattern);", 
          "type": "Replace", 
          "seed": "if (registry == null) {\n  super.applyPattern(pattern);\n  toPattern=super.toPattern();\n  return;\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 155, 
          "faulty": "while (pos.getIndex() < pattern.length()) {\nswitch (c[pos.getIndex()]) {\ncase QUOTE:\n    appendQuotedString(pattern,pos,stripCustom,true);\n  break;\ncase START_FE:\nfmtCount++;\nseekNonWs(pattern,pos);\nint start=pos.getIndex();\nint index=readArgumentIndex(pattern,next(pos));\nstripCustom.append(START_FE).append(index);\nseekNonWs(pattern,pos);\nFormat format=null;\nString formatDescription=null;\nif (c[pos.getIndex()] == START_FMT) {\nformatDescription=parseFormatDescription(pattern,next(pos));\nformat=getFormat(formatDescription);\nif (format == null) {\nstripCustom.append(START_FMT).append(formatDescription);\n}\n}\nfoundFormats.add(format);\nfoundDescriptions.add(format == null ? null : formatDescription);\nValidate.isTrue(foundFormats.size() == fmtCount);\nValidate.isTrue(foundDescriptions.size() == fmtCount);\nif (c[pos.getIndex()] != END_FE) {\nthrow new IllegalArgumentException(\"Unreadable format element at position \" + start);\n}\ndefault :\nstripCustom.append(c[pos.getIndex()]);\nnext(pos);\n}\n}", 
          "type": "InsertBefore", 
          "seed": "if (registry == null) {\n  super.applyPattern(pattern);\n  toPattern=super.toPattern();\n  return;\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 159, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "pos.setIndex(pos.getIndex() + 1);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:13:04.265756743 -0500\n+++ /tmp/Arja_Defects4J_Lang_43/patches_21ag/Patch_541/patched/tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:42:32.182442819 -0500\n@@ -142,7 +142,8 @@\n     public final void applyPattern(String pattern) {\n         if (registry == null) {\n             super.applyPattern(pattern);\n-            toPattern = super.toPattern();\n+            this.registry = registry;\n+\t\t\ttoPattern = super.toPattern();\n             return;\n         }\n         ArrayList foundFormats = new ArrayList();\n@@ -156,7 +157,10 @@\n             switch (c[pos.getIndex()]) {\n             case QUOTE:\n                 appendQuotedString(pattern, pos, stripCustom, true);\n-                break;\n+                {\n+\t\t\t\t\tpos.setIndex(pos.getIndex() + 1);\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n             case START_FE:\n                 fmtCount++;\n                 seekNonWs(pattern, pos);\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 145, 
          "faulty": "toPattern=super.toPattern();", 
          "type": "InsertBefore", 
          "seed": "this.registry=registry;"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 159, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "pos.setIndex(pos.getIndex() + 1);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:13:04.265756743 -0500\n+++ /tmp/Arja_Defects4J_Lang_43/patches_21ag/Patch_246/patched/tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:30:15.450488109 -0500\n@@ -417,9 +417,10 @@\n     private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n             StringBuffer appendTo, boolean escapingOn) {\n         int start = pos.getIndex();\n-        char[] c = pattern.toCharArray();\n+        pos.setIndex(pos.getIndex() + 1);\n+\t\tchar[] c = pattern.toCharArray();\n         if (escapingOn && c[start] == QUOTE) {\n-            return appendTo == null ? null : appendTo.append(QUOTE);\n+            seekNonWs(pattern, pos);\n         }\n         int lastHold = start;\n         for (int i = pos.getIndex(); i < pattern.length(); i++) {\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 420, 
          "faulty": "char[] c=pattern.toCharArray();", 
          "type": "InsertBefore", 
          "seed": "pos.setIndex(pos.getIndex() + 1);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 422, 
          "faulty": "return appendTo == null ? null : appendTo.append(QUOTE);", 
          "type": "Replace", 
          "seed": "seekNonWs(pattern,pos);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:13:04.265756743 -0500\n+++ /tmp/Arja_Defects4J_Lang_43/patches_21ag/Patch_939/patched/tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:58:09.132221408 -0500\n@@ -143,7 +143,8 @@\n         if (registry == null) {\n             super.applyPattern(pattern);\n             toPattern = super.toPattern();\n-            return;\n+            this.registry = registry;\n+\t\t\treturn;\n         }\n         ArrayList foundFormats = new ArrayList();\n         ArrayList foundDescriptions = new ArrayList();\n@@ -156,7 +157,10 @@\n             switch (c[pos.getIndex()]) {\n             case QUOTE:\n                 appendQuotedString(pattern, pos, stripCustom, true);\n-                break;\n+                {\n+\t\t\t\t\tpos.setIndex(pos.getIndex() + 1);\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n             case START_FE:\n                 fmtCount++;\n                 seekNonWs(pattern, pos);\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 146, 
          "faulty": "return;", 
          "type": "InsertBefore", 
          "seed": "this.registry=registry;"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 159, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "pos.setIndex(pos.getIndex() + 1);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:13:04.265756743 -0500\n+++ /tmp/Arja_Defects4J_Lang_43/patches_21ag/Patch_1534/patched/tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 06:21:18.201086495 -0500\n@@ -152,11 +152,19 @@\n         ParsePosition pos = new ParsePosition(0);\n         char[] c = pattern.toCharArray();\n         int fmtCount = 0;\n-        while (pos.getIndex() < pattern.length()) {\n+        if (registry == null) {\n+\t\t\tsuper.applyPattern(pattern);\n+\t\t\ttoPattern = super.toPattern();\n+\t\t\treturn;\n+\t\t}\n+\t\twhile (pos.getIndex() < pattern.length()) {\n             switch (c[pos.getIndex()]) {\n             case QUOTE:\n                 appendQuotedString(pattern, pos, stripCustom, true);\n-                break;\n+                {\n+\t\t\t\t\tpos.setIndex(pos.getIndex() + 1);\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n             case START_FE:\n                 fmtCount++;\n                 seekNonWs(pattern, pos);\n@@ -400,7 +408,8 @@\n      * @return <code>pos</code>\n      */\n     private ParsePosition next(ParsePosition pos) {\n-        pos.setIndex(pos.getIndex() + 1);\n+        this.registry = registry;\n+\t\tpos.setIndex(pos.getIndex() + 1);\n         return pos;\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 403, 
          "faulty": "pos.setIndex(pos.getIndex() + 1);", 
          "type": "InsertBefore", 
          "seed": "this.registry=registry;"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 155, 
          "faulty": "while (pos.getIndex() < pattern.length()) {\nswitch (c[pos.getIndex()]) {\ncase QUOTE:\n    appendQuotedString(pattern,pos,stripCustom,true);\n  break;\ncase START_FE:\nfmtCount++;\nseekNonWs(pattern,pos);\nint start=pos.getIndex();\nint index=readArgumentIndex(pattern,next(pos));\nstripCustom.append(START_FE).append(index);\nseekNonWs(pattern,pos);\nFormat format=null;\nString formatDescription=null;\nif (c[pos.getIndex()] == START_FMT) {\nformatDescription=parseFormatDescription(pattern,next(pos));\nformat=getFormat(formatDescription);\nif (format == null) {\nstripCustom.append(START_FMT).append(formatDescription);\n}\n}\nfoundFormats.add(format);\nfoundDescriptions.add(format == null ? null : formatDescription);\nValidate.isTrue(foundFormats.size() == fmtCount);\nValidate.isTrue(foundDescriptions.size() == fmtCount);\nif (c[pos.getIndex()] != END_FE) {\nthrow new IllegalArgumentException(\"Unreadable format element at position \" + start);\n}\ndefault :\nstripCustom.append(c[pos.getIndex()]);\nnext(pos);\n}\n}", 
          "type": "InsertBefore", 
          "seed": "if (registry == null) {\n  super.applyPattern(pattern);\n  toPattern=super.toPattern();\n  return;\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 159, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "pos.setIndex(pos.getIndex() + 1);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:13:04.265756743 -0500\n+++ /tmp/Arja_Defects4J_Lang_43/patches_21ag/Patch_149/patched/tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:26:15.561108999 -0500\n@@ -156,7 +156,10 @@\n             switch (c[pos.getIndex()]) {\n             case QUOTE:\n                 appendQuotedString(pattern, pos, stripCustom, true);\n-                break;\n+                {\n+\t\t\t\t\tsuper.applyPattern(stripCustom.toString());\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n             case START_FE:\n                 fmtCount++;\n                 seekNonWs(pattern, pos);\n@@ -417,7 +420,8 @@\n     private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n             StringBuffer appendTo, boolean escapingOn) {\n         int start = pos.getIndex();\n-        char[] c = pattern.toCharArray();\n+        pos.setIndex(pos.getIndex() + 1);\n+\t\tchar[] c = pattern.toCharArray();\n         if (escapingOn && c[start] == QUOTE) {\n             return appendTo == null ? null : appendTo.append(QUOTE);\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 420, 
          "faulty": "char[] c=pattern.toCharArray();", 
          "type": "InsertBefore", 
          "seed": "pos.setIndex(pos.getIndex() + 1);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 159, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "super.applyPattern(stripCustom.toString());"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:13:04.265756743 -0500\n+++ /tmp/Arja_Defects4J_Lang_43/patches_21ag/Patch_207/patched/tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:29:01.051300918 -0500\n@@ -145,7 +145,8 @@\n             toPattern = super.toPattern();\n             return;\n         }\n-        ArrayList foundFormats = new ArrayList();\n+        this.registry = registry;\n+\t\tArrayList foundFormats = new ArrayList();\n         ArrayList foundDescriptions = new ArrayList();\n         StringBuffer stripCustom = new StringBuffer(pattern.length());\n \n@@ -417,10 +418,8 @@\n     private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n             StringBuffer appendTo, boolean escapingOn) {\n         int start = pos.getIndex();\n-        char[] c = pattern.toCharArray();\n-        if (escapingOn && c[start] == QUOTE) {\n-            return appendTo == null ? null : appendTo.append(QUOTE);\n-        }\n+        pos.setIndex(pos.getIndex() + 1);\n+\t\tchar[] c = pattern.toCharArray();\n         int lastHold = start;\n         for (int i = pos.getIndex(); i < pattern.length(); i++) {\n             if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 420, 
          "faulty": "char[] c=pattern.toCharArray();", 
          "type": "InsertBefore", 
          "seed": "pos.setIndex(pos.getIndex() + 1);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 148, 
          "faulty": "ArrayList foundFormats=new ArrayList();", 
          "type": "InsertBefore", 
          "seed": "this.registry=registry;"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 421, 
          "faulty": "if (escapingOn && c[start] == QUOTE) {\n  return appendTo == null ? null : appendTo.append(QUOTE);\n}", 
          "type": "Delete", 
          "seed": "if (c[pos.getIndex()] != END_FE) {\n  throw new IllegalArgumentException(\"Unreadable format element at position \" + start);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:13:04.265756743 -0500\n+++ /tmp/Arja_Defects4J_Lang_43/patches_21ag/Patch_963/patched/tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:58:59.979667302 -0500\n@@ -150,13 +150,17 @@\n         StringBuffer stripCustom = new StringBuffer(pattern.length());\n \n         ParsePosition pos = new ParsePosition(0);\n-        char[] c = pattern.toCharArray();\n+        toPattern = insertFormats(super.toPattern(), foundDescriptions);\n+\t\tchar[] c = pattern.toCharArray();\n         int fmtCount = 0;\n         while (pos.getIndex() < pattern.length()) {\n             switch (c[pos.getIndex()]) {\n             case QUOTE:\n                 appendQuotedString(pattern, pos, stripCustom, true);\n-                break;\n+                {\n+\t\t\t\t\tpos.setIndex(pos.getIndex() + 1);\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n             case START_FE:\n                 fmtCount++;\n                 seekNonWs(pattern, pos);\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 153, 
          "faulty": "char[] c=pattern.toCharArray();", 
          "type": "InsertBefore", 
          "seed": "toPattern=insertFormats(super.toPattern(),foundDescriptions);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 159, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "pos.setIndex(pos.getIndex() + 1);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:13:04.265756743 -0500\n+++ /tmp/Arja_Defects4J_Lang_43/patches_21ag/Patch_1277/patched/tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 06:11:25.267545437 -0500\n@@ -143,7 +143,12 @@\n         if (registry == null) {\n             super.applyPattern(pattern);\n             toPattern = super.toPattern();\n-            return;\n+            if (registry == null) {\n+\t\t\t\tsuper.applyPattern(pattern);\n+\t\t\t\ttoPattern = super.toPattern();\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t\treturn;\n         }\n         ArrayList foundFormats = new ArrayList();\n         ArrayList foundDescriptions = new ArrayList();\n@@ -417,10 +422,8 @@\n     private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n             StringBuffer appendTo, boolean escapingOn) {\n         int start = pos.getIndex();\n-        char[] c = pattern.toCharArray();\n-        if (escapingOn && c[start] == QUOTE) {\n-            return appendTo == null ? null : appendTo.append(QUOTE);\n-        }\n+        pos.setIndex(pos.getIndex() + 1);\n+\t\tchar[] c = pattern.toCharArray();\n         int lastHold = start;\n         for (int i = pos.getIndex(); i < pattern.length(); i++) {\n             if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 420, 
          "faulty": "char[] c=pattern.toCharArray();", 
          "type": "InsertBefore", 
          "seed": "pos.setIndex(pos.getIndex() + 1);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 146, 
          "faulty": "return;", 
          "type": "InsertBefore", 
          "seed": "if (registry == null) {\n  super.applyPattern(pattern);\n  toPattern=super.toPattern();\n  return;\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 421, 
          "faulty": "if (escapingOn && c[start] == QUOTE) {\n  return appendTo == null ? null : appendTo.append(QUOTE);\n}", 
          "type": "Delete", 
          "seed": "this.registry=registry;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:13:04.265756743 -0500\n+++ /tmp/Arja_Defects4J_Lang_43/patches_21ag/Patch_794/patched/tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:52:58.599605160 -0500\n@@ -143,7 +143,12 @@\n         if (registry == null) {\n             super.applyPattern(pattern);\n             toPattern = super.toPattern();\n-            return;\n+            if (registry == null) {\n+\t\t\t\tsuper.applyPattern(pattern);\n+\t\t\t\ttoPattern = super.toPattern();\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t\treturn;\n         }\n         ArrayList foundFormats = new ArrayList();\n         ArrayList foundDescriptions = new ArrayList();\n@@ -153,10 +158,14 @@\n         char[] c = pattern.toCharArray();\n         int fmtCount = 0;\n         while (pos.getIndex() < pattern.length()) {\n-            switch (c[pos.getIndex()]) {\n+            toPattern = insertFormats(super.toPattern(), foundDescriptions);\n+\t\t\tswitch (c[pos.getIndex()]) {\n             case QUOTE:\n                 appendQuotedString(pattern, pos, stripCustom, true);\n-                break;\n+                {\n+\t\t\t\t\tpos.setIndex(pos.getIndex() + 1);\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n             case START_FE:\n                 fmtCount++;\n                 seekNonWs(pattern, pos);\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 146, 
          "faulty": "return;", 
          "type": "InsertBefore", 
          "seed": "if (registry == null) {\n  super.applyPattern(pattern);\n  toPattern=super.toPattern();\n  return;\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 156, 
          "faulty": "switch (c[pos.getIndex()]) {\ncase QUOTE:\n  appendQuotedString(pattern,pos,stripCustom,true);\nbreak;\ncase START_FE:\nfmtCount++;\nseekNonWs(pattern,pos);\nint start=pos.getIndex();\nint index=readArgumentIndex(pattern,next(pos));\nstripCustom.append(START_FE).append(index);\nseekNonWs(pattern,pos);\nFormat format=null;\nString formatDescription=null;\nif (c[pos.getIndex()] == START_FMT) {\nformatDescription=parseFormatDescription(pattern,next(pos));\nformat=getFormat(formatDescription);\nif (format == null) {\nstripCustom.append(START_FMT).append(formatDescription);\n}\n}\nfoundFormats.add(format);\nfoundDescriptions.add(format == null ? null : formatDescription);\nValidate.isTrue(foundFormats.size() == fmtCount);\nValidate.isTrue(foundDescriptions.size() == fmtCount);\nif (c[pos.getIndex()] != END_FE) {\nthrow new IllegalArgumentException(\"Unreadable format element at position \" + start);\n}\ndefault :\nstripCustom.append(c[pos.getIndex()]);\nnext(pos);\n}", 
          "type": "InsertBefore", 
          "seed": "toPattern=insertFormats(super.toPattern(),foundDescriptions);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 159, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "pos.setIndex(pos.getIndex() + 1);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:13:04.265756743 -0500\n+++ /tmp/Arja_Defects4J_Lang_43/patches_21ag/Patch_1787/patched/tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 06:31:17.230558766 -0500\n@@ -151,12 +151,53 @@\n \n         ParsePosition pos = new ParsePosition(0);\n         char[] c = pattern.toCharArray();\n-        int fmtCount = 0;\n+        super.applyPattern(stripCustom.toString());\n+\t\tint fmtCount = 0;\n         while (pos.getIndex() < pattern.length()) {\n             switch (c[pos.getIndex()]) {\n             case QUOTE:\n                 appendQuotedString(pattern, pos, stripCustom, true);\n-                break;\n+                {\n+\t\t\t\t\twhile (pos.getIndex() < pattern.length()) {\n+\t\t\t\t\t\tswitch (c[pos.getIndex()]) {\n+\t\t\t\t\t\tcase QUOTE:\n+\t\t\t\t\t\t\tappendQuotedString(pattern, pos, stripCustom, true);\n+\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\tcase START_FE:\n+\t\t\t\t\t\t\tfmtCount++;\n+\t\t\t\t\t\t\tseekNonWs(pattern, pos);\n+\t\t\t\t\t\t\tint start = pos.getIndex();\n+\t\t\t\t\t\t\tint index = readArgumentIndex(pattern, next(pos));\n+\t\t\t\t\t\t\tstripCustom.append(START_FE).append(index);\n+\t\t\t\t\t\t\tseekNonWs(pattern, pos);\n+\t\t\t\t\t\t\tFormat format = null;\n+\t\t\t\t\t\t\tString formatDescription = null;\n+\t\t\t\t\t\t\tif (c[pos.getIndex()] == START_FMT) {\n+\t\t\t\t\t\t\t\tformatDescription = parseFormatDescription(\n+\t\t\t\t\t\t\t\t\t\tpattern, next(pos));\n+\t\t\t\t\t\t\t\tformat = getFormat(formatDescription);\n+\t\t\t\t\t\t\t\tif (format == null) {\n+\t\t\t\t\t\t\t\t\tstripCustom.append(START_FMT).append(\n+\t\t\t\t\t\t\t\t\t\t\tformatDescription);\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tfoundFormats.add(format);\n+\t\t\t\t\t\t\tfoundDescriptions.add(format == null ? null\n+\t\t\t\t\t\t\t\t\t: formatDescription);\n+\t\t\t\t\t\t\tValidate.isTrue(foundFormats.size() == fmtCount);\n+\t\t\t\t\t\t\tValidate.isTrue(foundDescriptions.size() == fmtCount);\n+\t\t\t\t\t\t\tif (c[pos.getIndex()] != END_FE) {\n+\t\t\t\t\t\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\t\t\t\t\t\"Unreadable format element at position \"\n+\t\t\t\t\t\t\t\t\t\t\t\t+ start);\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\tdefault:\n+\t\t\t\t\t\t\tstripCustom.append(c[pos.getIndex()]);\n+\t\t\t\t\t\t\tnext(pos);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n             case START_FE:\n                 fmtCount++;\n                 seekNonWs(pattern, pos);\n@@ -417,7 +458,8 @@\n     private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n             StringBuffer appendTo, boolean escapingOn) {\n         int start = pos.getIndex();\n-        char[] c = pattern.toCharArray();\n+        pos.setIndex(pos.getIndex() + 1);\n+\t\tchar[] c = pattern.toCharArray();\n         if (escapingOn && c[start] == QUOTE) {\n             return appendTo == null ? null : appendTo.append(QUOTE);\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 420, 
          "faulty": "char[] c=pattern.toCharArray();", 
          "type": "InsertBefore", 
          "seed": "pos.setIndex(pos.getIndex() + 1);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 154, 
          "faulty": "int fmtCount=0;", 
          "type": "InsertBefore", 
          "seed": "super.applyPattern(stripCustom.toString());"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 159, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "while (pos.getIndex() < pattern.length()) {\nswitch (c[pos.getIndex()]) {\ncase QUOTE:\n    appendQuotedString(pattern,pos,stripCustom,true);\n  break;\ncase START_FE:\nfmtCount++;\nseekNonWs(pattern,pos);\nint start=pos.getIndex();\nint index=readArgumentIndex(pattern,next(pos));\nstripCustom.append(START_FE).append(index);\nseekNonWs(pattern,pos);\nFormat format=null;\nString formatDescription=null;\nif (c[pos.getIndex()] == START_FMT) {\nformatDescription=parseFormatDescription(pattern,next(pos));\nformat=getFormat(formatDescription);\nif (format == null) {\nstripCustom.append(START_FMT).append(formatDescription);\n}\n}\nfoundFormats.add(format);\nfoundDescriptions.add(format == null ? null : formatDescription);\nValidate.isTrue(foundFormats.size() == fmtCount);\nValidate.isTrue(foundDescriptions.size() == fmtCount);\nif (c[pos.getIndex()] != END_FE) {\nthrow new IllegalArgumentException(\"Unreadable format element at position \" + start);\n}\ndefault :\nstripCustom.append(c[pos.getIndex()]);\nnext(pos);\n}\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:13:04.265756743 -0500\n+++ /tmp/Arja_Defects4J_Lang_43/patches_21ag/Patch_558/patched/tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:43:07.186060651 -0500\n@@ -140,11 +140,6 @@\n      * @param pattern String\n      */\n     public final void applyPattern(String pattern) {\n-        if (registry == null) {\n-            super.applyPattern(pattern);\n-            toPattern = super.toPattern();\n-            return;\n-        }\n         ArrayList foundFormats = new ArrayList();\n         ArrayList foundDescriptions = new ArrayList();\n         StringBuffer stripCustom = new StringBuffer(pattern.length());\n@@ -156,7 +151,10 @@\n             switch (c[pos.getIndex()]) {\n             case QUOTE:\n                 appendQuotedString(pattern, pos, stripCustom, true);\n-                break;\n+                {\n+\t\t\t\t\tpos.setIndex(pos.getIndex() + 1);\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n             case START_FE:\n                 fmtCount++;\n                 seekNonWs(pattern, pos);\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 143, 
          "faulty": "if (registry == null) {\n  super.applyPattern(pattern);\n  toPattern=super.toPattern();\n  return;\n}", 
          "type": "Delete", 
          "seed": "this.registry=registry;"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 159, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "pos.setIndex(pos.getIndex() + 1);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:13:04.265756743 -0500\n+++ /tmp/Arja_Defects4J_Lang_43/patches_21ag/Patch_1473/patched/tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 06:19:14.582433250 -0500\n@@ -143,7 +143,6 @@\n         if (registry == null) {\n             super.applyPattern(pattern);\n             toPattern = super.toPattern();\n-            return;\n         }\n         ArrayList foundFormats = new ArrayList();\n         ArrayList foundDescriptions = new ArrayList();\n@@ -419,7 +418,7 @@\n         int start = pos.getIndex();\n         char[] c = pattern.toCharArray();\n         if (escapingOn && c[start] == QUOTE) {\n-            return appendTo == null ? null : appendTo.append(QUOTE);\n+            pos.setIndex(pos.getIndex() + 1);\n         }\n         int lastHold = start;\n         for (int i = pos.getIndex(); i < pattern.length(); i++) {\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 146, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "throw new IndexOutOfBoundsException();"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 422, 
          "faulty": "return appendTo == null ? null : appendTo.append(QUOTE);", 
          "type": "Replace", 
          "seed": "pos.setIndex(pos.getIndex() + 1);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:13:04.265756743 -0500\n+++ /tmp/Arja_Defects4J_Lang_43/patches_21ag/Patch_220/patched/tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:29:29.482990299 -0500\n@@ -141,7 +141,12 @@\n      */\n     public final void applyPattern(String pattern) {\n         if (registry == null) {\n-            super.applyPattern(pattern);\n+            if (registry == null) {\n+\t\t\t\tsuper.applyPattern(pattern);\n+\t\t\t\ttoPattern = super.toPattern();\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t\tsuper.applyPattern(pattern);\n             toPattern = super.toPattern();\n             return;\n         }\n@@ -417,7 +422,8 @@\n     private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n             StringBuffer appendTo, boolean escapingOn) {\n         int start = pos.getIndex();\n-        char[] c = pattern.toCharArray();\n+        next(pos);\n+\t\tchar[] c = pattern.toCharArray();\n         if (escapingOn && c[start] == QUOTE) {\n             return appendTo == null ? null : appendTo.append(QUOTE);\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 144, 
          "faulty": "super.applyPattern(pattern);", 
          "type": "InsertBefore", 
          "seed": "if (registry == null) {\n  super.applyPattern(pattern);\n  toPattern=super.toPattern();\n  return;\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 420, 
          "faulty": "char[] c=pattern.toCharArray();", 
          "type": "InsertBefore", 
          "seed": "next(pos);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:13:04.265756743 -0500\n+++ /tmp/Arja_Defects4J_Lang_43/patches_21ag/Patch_871/patched/tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:55:37.337875507 -0500\n@@ -153,10 +153,14 @@\n         char[] c = pattern.toCharArray();\n         int fmtCount = 0;\n         while (pos.getIndex() < pattern.length()) {\n-            switch (c[pos.getIndex()]) {\n+            toPattern = insertFormats(super.toPattern(), foundDescriptions);\n+\t\t\tswitch (c[pos.getIndex()]) {\n             case QUOTE:\n                 appendQuotedString(pattern, pos, stripCustom, true);\n-                break;\n+                {\n+\t\t\t\t\tpos.setIndex(pos.getIndex() + 1);\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n             case START_FE:\n                 fmtCount++;\n                 seekNonWs(pattern, pos);\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 156, 
          "faulty": "switch (c[pos.getIndex()]) {\ncase QUOTE:\n  appendQuotedString(pattern,pos,stripCustom,true);\nbreak;\ncase START_FE:\nfmtCount++;\nseekNonWs(pattern,pos);\nint start=pos.getIndex();\nint index=readArgumentIndex(pattern,next(pos));\nstripCustom.append(START_FE).append(index);\nseekNonWs(pattern,pos);\nFormat format=null;\nString formatDescription=null;\nif (c[pos.getIndex()] == START_FMT) {\nformatDescription=parseFormatDescription(pattern,next(pos));\nformat=getFormat(formatDescription);\nif (format == null) {\nstripCustom.append(START_FMT).append(formatDescription);\n}\n}\nfoundFormats.add(format);\nfoundDescriptions.add(format == null ? null : formatDescription);\nValidate.isTrue(foundFormats.size() == fmtCount);\nValidate.isTrue(foundDescriptions.size() == fmtCount);\nif (c[pos.getIndex()] != END_FE) {\nthrow new IllegalArgumentException(\"Unreadable format element at position \" + start);\n}\ndefault :\nstripCustom.append(c[pos.getIndex()]);\nnext(pos);\n}", 
          "type": "InsertBefore", 
          "seed": "toPattern=insertFormats(super.toPattern(),foundDescriptions);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 159, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "pos.setIndex(pos.getIndex() + 1);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:13:04.265756743 -0500\n+++ /tmp/Arja_Defects4J_Lang_43/patches_21ag/Patch_893/patched/tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:56:32.149278240 -0500\n@@ -149,14 +149,18 @@\n         ArrayList foundDescriptions = new ArrayList();\n         StringBuffer stripCustom = new StringBuffer(pattern.length());\n \n-        ParsePosition pos = new ParsePosition(0);\n+        this.registry = registry;\n+\t\tParsePosition pos = new ParsePosition(0);\n         char[] c = pattern.toCharArray();\n         int fmtCount = 0;\n         while (pos.getIndex() < pattern.length()) {\n             switch (c[pos.getIndex()]) {\n             case QUOTE:\n                 appendQuotedString(pattern, pos, stripCustom, true);\n-                break;\n+                {\n+\t\t\t\t\tpos.setIndex(pos.getIndex() + 1);\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n             case START_FE:\n                 fmtCount++;\n                 seekNonWs(pattern, pos);\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 152, 
          "faulty": "ParsePosition pos=new ParsePosition(0);", 
          "type": "InsertBefore", 
          "seed": "this.registry=registry;"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 159, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "pos.setIndex(pos.getIndex() + 1);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:13:04.265756743 -0500\n+++ /tmp/Arja_Defects4J_Lang_43/patches_21ag/Patch_883/patched/tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:56:11.749500534 -0500\n@@ -152,11 +152,19 @@\n         ParsePosition pos = new ParsePosition(0);\n         char[] c = pattern.toCharArray();\n         int fmtCount = 0;\n-        while (pos.getIndex() < pattern.length()) {\n+        if (registry == null) {\n+\t\t\tsuper.applyPattern(pattern);\n+\t\t\ttoPattern = super.toPattern();\n+\t\t\treturn;\n+\t\t}\n+\t\twhile (pos.getIndex() < pattern.length()) {\n             switch (c[pos.getIndex()]) {\n             case QUOTE:\n                 appendQuotedString(pattern, pos, stripCustom, true);\n-                break;\n+                {\n+\t\t\t\t\tpos.setIndex(pos.getIndex() + 1);\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n             case START_FE:\n                 fmtCount++;\n                 seekNonWs(pattern, pos);\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 155, 
          "faulty": "while (pos.getIndex() < pattern.length()) {\nswitch (c[pos.getIndex()]) {\ncase QUOTE:\n    appendQuotedString(pattern,pos,stripCustom,true);\n  break;\ncase START_FE:\nfmtCount++;\nseekNonWs(pattern,pos);\nint start=pos.getIndex();\nint index=readArgumentIndex(pattern,next(pos));\nstripCustom.append(START_FE).append(index);\nseekNonWs(pattern,pos);\nFormat format=null;\nString formatDescription=null;\nif (c[pos.getIndex()] == START_FMT) {\nformatDescription=parseFormatDescription(pattern,next(pos));\nformat=getFormat(formatDescription);\nif (format == null) {\nstripCustom.append(START_FMT).append(formatDescription);\n}\n}\nfoundFormats.add(format);\nfoundDescriptions.add(format == null ? null : formatDescription);\nValidate.isTrue(foundFormats.size() == fmtCount);\nValidate.isTrue(foundDescriptions.size() == fmtCount);\nif (c[pos.getIndex()] != END_FE) {\nthrow new IllegalArgumentException(\"Unreadable format element at position \" + start);\n}\ndefault :\nstripCustom.append(c[pos.getIndex()]);\nnext(pos);\n}\n}", 
          "type": "InsertBefore", 
          "seed": "if (registry == null) {\n  super.applyPattern(pattern);\n  toPattern=super.toPattern();\n  return;\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 159, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "pos.setIndex(pos.getIndex() + 1);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:13:04.265756743 -0500\n+++ /tmp/Arja_Defects4J_Lang_43/patches_21ag/Patch_41/patched/tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:21:26.068272261 -0500\n@@ -156,7 +156,10 @@\n             switch (c[pos.getIndex()]) {\n             case QUOTE:\n                 appendQuotedString(pattern, pos, stripCustom, true);\n-                break;\n+                {\n+\t\t\t\t\tpos.setIndex(pos.getIndex() + 1);\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n             case START_FE:\n                 fmtCount++;\n                 seekNonWs(pattern, pos);\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 159, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "pos.setIndex(pos.getIndex() + 1);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:13:04.265756743 -0500\n+++ /tmp/Arja_Defects4J_Lang_43/patches_21ag/Patch_127/patched/tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:25:05.949869589 -0500\n@@ -142,10 +142,18 @@\n     public final void applyPattern(String pattern) {\n         if (registry == null) {\n             super.applyPattern(pattern);\n-            toPattern = super.toPattern();\n-            return;\n+            if (registry == null) {\n+\t\t\t\tsuper.applyPattern(pattern);\n+\t\t\t\ttoPattern = super.toPattern();\n+\t\t\t\treturn;\n+\t\t\t}\n         }\n-        ArrayList foundFormats = new ArrayList();\n+        if (registry == null) {\n+\t\t\tsuper.applyPattern(pattern);\n+\t\t\ttoPattern = super.toPattern();\n+\t\t\treturn;\n+\t\t}\n+\t\tArrayList foundFormats = new ArrayList();\n         ArrayList foundDescriptions = new ArrayList();\n         StringBuffer stripCustom = new StringBuffer(pattern.length());\n \n@@ -156,7 +164,10 @@\n             switch (c[pos.getIndex()]) {\n             case QUOTE:\n                 appendQuotedString(pattern, pos, stripCustom, true);\n-                break;\n+                {\n+\t\t\t\t\tpos.setIndex(pos.getIndex() + 1);\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n             case START_FE:\n                 fmtCount++;\n                 seekNonWs(pattern, pos);\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 145, 
          "faulty": "toPattern=super.toPattern();", 
          "type": "Delete", 
          "seed": "applyPattern(pattern);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 146, 
          "faulty": "return;", 
          "type": "Replace", 
          "seed": "if (registry == null) {\n  super.applyPattern(pattern);\n  toPattern=super.toPattern();\n  return;\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 148, 
          "faulty": "ArrayList foundFormats=new ArrayList();", 
          "type": "InsertBefore", 
          "seed": "if (registry == null) {\n  super.applyPattern(pattern);\n  toPattern=super.toPattern();\n  return;\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 159, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "pos.setIndex(pos.getIndex() + 1);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:13:04.265756743 -0500\n+++ /tmp/Arja_Defects4J_Lang_43/patches_21ag/Patch_306/patched/tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:32:30.757009958 -0500\n@@ -417,7 +417,8 @@\n     private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n             StringBuffer appendTo, boolean escapingOn) {\n         int start = pos.getIndex();\n-        char[] c = pattern.toCharArray();\n+        next(pos);\n+\t\tchar[] c = pattern.toCharArray();\n         if (escapingOn && c[start] == QUOTE) {\n             return appendTo == null ? null : appendTo.append(QUOTE);\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 420, 
          "faulty": "char[] c=pattern.toCharArray();", 
          "type": "InsertBefore", 
          "seed": "next(pos);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:13:04.265756743 -0500\n+++ /tmp/Arja_Defects4J_Lang_43/patches_21ag/Patch_1089/patched/tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 06:03:58.252416674 -0500\n@@ -143,10 +143,20 @@\n         if (registry == null) {\n             super.applyPattern(pattern);\n             toPattern = super.toPattern();\n-            return;\n+            if (registry == null) {\n+\t\t\t\tsuper.applyPattern(pattern);\n+\t\t\t\ttoPattern = super.toPattern();\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t\treturn;\n         }\n         ArrayList foundFormats = new ArrayList();\n-        ArrayList foundDescriptions = new ArrayList();\n+        if (registry == null) {\n+\t\t\tsuper.applyPattern(pattern);\n+\t\t\ttoPattern = super.toPattern();\n+\t\t\treturn;\n+\t\t}\n+\t\tArrayList foundDescriptions = new ArrayList();\n         StringBuffer stripCustom = new StringBuffer(pattern.length());\n \n         ParsePosition pos = new ParsePosition(0);\n@@ -156,7 +166,10 @@\n             switch (c[pos.getIndex()]) {\n             case QUOTE:\n                 appendQuotedString(pattern, pos, stripCustom, true);\n-                break;\n+                {\n+\t\t\t\t\tpos.setIndex(pos.getIndex() + 1);\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n             case START_FE:\n                 fmtCount++;\n                 seekNonWs(pattern, pos);\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 146, 
          "faulty": "return;", 
          "type": "InsertBefore", 
          "seed": "if (registry == null) {\n  super.applyPattern(pattern);\n  toPattern=super.toPattern();\n  return;\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 149, 
          "faulty": "ArrayList foundDescriptions=new ArrayList();", 
          "type": "InsertBefore", 
          "seed": "if (registry == null) {\n  super.applyPattern(pattern);\n  toPattern=super.toPattern();\n  return;\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 159, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "pos.setIndex(pos.getIndex() + 1);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:13:04.265756743 -0500\n+++ /tmp/Arja_Defects4J_Lang_43/patches_21ag/Patch_807/patched/tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:53:30.899253224 -0500\n@@ -140,11 +140,7 @@\n      * @param pattern String\n      */\n     public final void applyPattern(String pattern) {\n-        if (registry == null) {\n-            super.applyPattern(pattern);\n-            toPattern = super.toPattern();\n-            return;\n-        }\n+        this.registry = registry;\n         ArrayList foundFormats = new ArrayList();\n         ArrayList foundDescriptions = new ArrayList();\n         StringBuffer stripCustom = new StringBuffer(pattern.length());\n@@ -156,7 +152,10 @@\n             switch (c[pos.getIndex()]) {\n             case QUOTE:\n                 appendQuotedString(pattern, pos, stripCustom, true);\n-                break;\n+                {\n+\t\t\t\t\tpos.setIndex(pos.getIndex() + 1);\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n             case START_FE:\n                 fmtCount++;\n                 seekNonWs(pattern, pos);\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 143, 
          "faulty": "if (registry == null) {\n  super.applyPattern(pattern);\n  toPattern=super.toPattern();\n  return;\n}", 
          "type": "Replace", 
          "seed": "this.registry=registry;"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 144, 
          "faulty": "super.applyPattern(pattern);", 
          "type": "Replace", 
          "seed": "toPattern=super.toPattern();"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 159, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "pos.setIndex(pos.getIndex() + 1);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:13:04.265756743 -0500\n+++ /tmp/Arja_Defects4J_Lang_43/patches_21ag/Patch_381/patched/tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:35:32.867020936 -0500\n@@ -156,7 +156,10 @@\n             switch (c[pos.getIndex()]) {\n             case QUOTE:\n                 appendQuotedString(pattern, pos, stripCustom, true);\n-                break;\n+                {\n+\t\t\t\t\tpos.setIndex(pos.getIndex() + 1);\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n             case START_FE:\n                 fmtCount++;\n                 seekNonWs(pattern, pos);\n@@ -417,7 +420,8 @@\n     private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n             StringBuffer appendTo, boolean escapingOn) {\n         int start = pos.getIndex();\n-        char[] c = pattern.toCharArray();\n+        this.registry = registry;\n+\t\tchar[] c = pattern.toCharArray();\n         if (escapingOn && c[start] == QUOTE) {\n             return appendTo == null ? null : appendTo.append(QUOTE);\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 420, 
          "faulty": "char[] c=pattern.toCharArray();", 
          "type": "InsertBefore", 
          "seed": "this.registry=registry;"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 159, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "pos.setIndex(pos.getIndex() + 1);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:13:04.265756743 -0500\n+++ /tmp/Arja_Defects4J_Lang_43/patches_21ag/Patch_130/patched/tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:25:10.281822257 -0500\n@@ -145,7 +145,8 @@\n             toPattern = super.toPattern();\n             return;\n         }\n-        ArrayList foundFormats = new ArrayList();\n+        toPattern = super.toPattern();\n+\t\tArrayList foundFormats = new ArrayList();\n         ArrayList foundDescriptions = new ArrayList();\n         StringBuffer stripCustom = new StringBuffer(pattern.length());\n \n@@ -156,7 +157,47 @@\n             switch (c[pos.getIndex()]) {\n             case QUOTE:\n                 appendQuotedString(pattern, pos, stripCustom, true);\n-                break;\n+                {\n+\t\t\t\t\twhile (pos.getIndex() < pattern.length()) {\n+\t\t\t\t\t\tswitch (c[pos.getIndex()]) {\n+\t\t\t\t\t\tcase QUOTE:\n+\t\t\t\t\t\t\tappendQuotedString(pattern, pos, stripCustom, true);\n+\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\tcase START_FE:\n+\t\t\t\t\t\t\tfmtCount++;\n+\t\t\t\t\t\t\tseekNonWs(pattern, pos);\n+\t\t\t\t\t\t\tint start = pos.getIndex();\n+\t\t\t\t\t\t\tint index = readArgumentIndex(pattern, next(pos));\n+\t\t\t\t\t\t\tstripCustom.append(START_FE).append(index);\n+\t\t\t\t\t\t\tseekNonWs(pattern, pos);\n+\t\t\t\t\t\t\tFormat format = null;\n+\t\t\t\t\t\t\tString formatDescription = null;\n+\t\t\t\t\t\t\tif (c[pos.getIndex()] == START_FMT) {\n+\t\t\t\t\t\t\t\tformatDescription = parseFormatDescription(\n+\t\t\t\t\t\t\t\t\t\tpattern, next(pos));\n+\t\t\t\t\t\t\t\tformat = getFormat(formatDescription);\n+\t\t\t\t\t\t\t\tif (format == null) {\n+\t\t\t\t\t\t\t\t\tstripCustom.append(START_FMT).append(\n+\t\t\t\t\t\t\t\t\t\t\tformatDescription);\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tfoundFormats.add(format);\n+\t\t\t\t\t\t\tfoundDescriptions.add(format == null ? null\n+\t\t\t\t\t\t\t\t\t: formatDescription);\n+\t\t\t\t\t\t\tValidate.isTrue(foundFormats.size() == fmtCount);\n+\t\t\t\t\t\t\tValidate.isTrue(foundDescriptions.size() == fmtCount);\n+\t\t\t\t\t\t\tif (c[pos.getIndex()] != END_FE) {\n+\t\t\t\t\t\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\t\t\t\t\t\"Unreadable format element at position \"\n+\t\t\t\t\t\t\t\t\t\t\t\t+ start);\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\tdefault:\n+\t\t\t\t\t\t\tstripCustom.append(c[pos.getIndex()]);\n+\t\t\t\t\t\t\tnext(pos);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n             case START_FE:\n                 fmtCount++;\n                 seekNonWs(pattern, pos);\n@@ -417,7 +458,8 @@\n     private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n             StringBuffer appendTo, boolean escapingOn) {\n         int start = pos.getIndex();\n-        char[] c = pattern.toCharArray();\n+        pos.setIndex(pos.getIndex() + 1);\n+\t\tchar[] c = pattern.toCharArray();\n         if (escapingOn && c[start] == QUOTE) {\n             return appendTo == null ? null : appendTo.append(QUOTE);\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 420, 
          "faulty": "char[] c=pattern.toCharArray();", 
          "type": "InsertBefore", 
          "seed": "pos.setIndex(pos.getIndex() + 1);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 148, 
          "faulty": "ArrayList foundFormats=new ArrayList();", 
          "type": "InsertBefore", 
          "seed": "toPattern=super.toPattern();"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 159, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "while (pos.getIndex() < pattern.length()) {\nswitch (c[pos.getIndex()]) {\ncase QUOTE:\n    appendQuotedString(pattern,pos,stripCustom,true);\n  break;\ncase START_FE:\nfmtCount++;\nseekNonWs(pattern,pos);\nint start=pos.getIndex();\nint index=readArgumentIndex(pattern,next(pos));\nstripCustom.append(START_FE).append(index);\nseekNonWs(pattern,pos);\nFormat format=null;\nString formatDescription=null;\nif (c[pos.getIndex()] == START_FMT) {\nformatDescription=parseFormatDescription(pattern,next(pos));\nformat=getFormat(formatDescription);\nif (format == null) {\nstripCustom.append(START_FMT).append(formatDescription);\n}\n}\nfoundFormats.add(format);\nfoundDescriptions.add(format == null ? null : formatDescription);\nValidate.isTrue(foundFormats.size() == fmtCount);\nValidate.isTrue(foundDescriptions.size() == fmtCount);\nif (c[pos.getIndex()] != END_FE) {\nthrow new IllegalArgumentException(\"Unreadable format element at position \" + start);\n}\ndefault :\nstripCustom.append(c[pos.getIndex()]);\nnext(pos);\n}\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:13:04.265756743 -0500\n+++ /tmp/Arja_Defects4J_Lang_43/patches_21ag/Patch_1074/patched/tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 06:03:19.068843725 -0500\n@@ -145,7 +145,12 @@\n             toPattern = super.toPattern();\n             return;\n         }\n-        ArrayList foundFormats = new ArrayList();\n+        if (registry == null) {\n+\t\t\tsuper.applyPattern(pattern);\n+\t\t\ttoPattern = super.toPattern();\n+\t\t\treturn;\n+\t\t}\n+\t\tArrayList foundFormats = new ArrayList();\n         ArrayList foundDescriptions = new ArrayList();\n         StringBuffer stripCustom = new StringBuffer(pattern.length());\n \n@@ -156,7 +161,10 @@\n             switch (c[pos.getIndex()]) {\n             case QUOTE:\n                 appendQuotedString(pattern, pos, stripCustom, true);\n-                break;\n+                {\n+\t\t\t\t\tpos.setIndex(pos.getIndex() + 1);\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n             case START_FE:\n                 fmtCount++;\n                 seekNonWs(pattern, pos);\n@@ -417,7 +425,8 @@\n     private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n             StringBuffer appendTo, boolean escapingOn) {\n         int start = pos.getIndex();\n-        char[] c = pattern.toCharArray();\n+        seekNonWs(pattern, pos);\n+\t\tchar[] c = pattern.toCharArray();\n         if (escapingOn && c[start] == QUOTE) {\n             return appendTo == null ? null : appendTo.append(QUOTE);\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 420, 
          "faulty": "char[] c=pattern.toCharArray();", 
          "type": "InsertBefore", 
          "seed": "seekNonWs(pattern,pos);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 148, 
          "faulty": "ArrayList foundFormats=new ArrayList();", 
          "type": "InsertBefore", 
          "seed": "if (registry == null) {\n  super.applyPattern(pattern);\n  toPattern=super.toPattern();\n  return;\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 159, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "pos.setIndex(pos.getIndex() + 1);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:13:04.265756743 -0500\n+++ /tmp/Arja_Defects4J_Lang_43/patches_21ag/Patch_763/patched/tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:51:47.308382055 -0500\n@@ -140,7 +140,8 @@\n      * @param pattern String\n      */\n     public final void applyPattern(String pattern) {\n-        if (registry == null) {\n+        this.registry = registry;\n+\t\tif (registry == null) {\n             super.applyPattern(pattern);\n             toPattern = super.toPattern();\n             return;\n@@ -156,7 +157,10 @@\n             switch (c[pos.getIndex()]) {\n             case QUOTE:\n                 appendQuotedString(pattern, pos, stripCustom, true);\n-                break;\n+                {\n+\t\t\t\t\tpos.setIndex(pos.getIndex() + 1);\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n             case START_FE:\n                 fmtCount++;\n                 seekNonWs(pattern, pos);\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 143, 
          "faulty": "if (registry == null) {\n  super.applyPattern(pattern);\n  toPattern=super.toPattern();\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "this.registry=registry;"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 159, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "pos.setIndex(pos.getIndex() + 1);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:13:04.265756743 -0500\n+++ /tmp/Arja_Defects4J_Lang_43/patches_21ag/Patch_959/patched/tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:58:54.031732120 -0500\n@@ -143,7 +143,12 @@\n         if (registry == null) {\n             super.applyPattern(pattern);\n             toPattern = super.toPattern();\n-            return;\n+            if (registry == null) {\n+\t\t\t\tsuper.applyPattern(pattern);\n+\t\t\t\ttoPattern = super.toPattern();\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t\treturn;\n         }\n         ArrayList foundFormats = new ArrayList();\n         ArrayList foundDescriptions = new ArrayList();\n@@ -417,7 +422,8 @@\n     private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n             StringBuffer appendTo, boolean escapingOn) {\n         int start = pos.getIndex();\n-        char[] c = pattern.toCharArray();\n+        next(pos);\n+\t\tchar[] c = pattern.toCharArray();\n         if (escapingOn && c[start] == QUOTE) {\n             return appendTo == null ? null : appendTo.append(QUOTE);\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 420, 
          "faulty": "char[] c=pattern.toCharArray();", 
          "type": "InsertBefore", 
          "seed": "next(pos);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 146, 
          "faulty": "return;", 
          "type": "InsertBefore", 
          "seed": "if (registry == null) {\n  super.applyPattern(pattern);\n  toPattern=super.toPattern();\n  return;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:13:04.265756743 -0500\n+++ /tmp/Arja_Defects4J_Lang_43/patches_21ag/Patch_1622/patched/tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 06:24:39.314895312 -0500\n@@ -156,7 +156,10 @@\n             switch (c[pos.getIndex()]) {\n             case QUOTE:\n                 appendQuotedString(pattern, pos, stripCustom, true);\n-                break;\n+                {\n+\t\t\t\t\tpos.setIndex(pos.getIndex() + 1);\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n             case START_FE:\n                 fmtCount++;\n                 seekNonWs(pattern, pos);\n@@ -184,7 +187,14 @@\n                 }\n                 // fall through\n             default:\n-                stripCustom.append(c[pos.getIndex()]);\n+                {\n+\t\t\t\t\tif (registry == null) {\n+\t\t\t\t\t\tsuper.applyPattern(pattern);\n+\t\t\t\t\t\ttoPattern = super.toPattern();\n+\t\t\t\t\t\treturn;\n+\t\t\t\t\t}\n+\t\t\t\t\tstripCustom.append(c[pos.getIndex()]);\n+\t\t\t\t}\n                 next(pos);\n             }\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 159, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "pos.setIndex(pos.getIndex() + 1);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 187, 
          "faulty": "stripCustom.append(c[pos.getIndex()]);", 
          "type": "InsertBefore", 
          "seed": "if (registry == null) {\n  super.applyPattern(pattern);\n  toPattern=super.toPattern();\n  return;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:13:04.265756743 -0500\n+++ /tmp/Arja_Defects4J_Lang_43/patches_21ag/Patch_259/patched/tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:30:47.798134721 -0500\n@@ -146,7 +146,12 @@\n             return;\n         }\n         ArrayList foundFormats = new ArrayList();\n-        ArrayList foundDescriptions = new ArrayList();\n+        if (registry == null) {\n+\t\t\tsuper.applyPattern(pattern);\n+\t\t\ttoPattern = super.toPattern();\n+\t\t\treturn;\n+\t\t}\n+\t\tArrayList foundDescriptions = new ArrayList();\n         StringBuffer stripCustom = new StringBuffer(pattern.length());\n \n         ParsePosition pos = new ParsePosition(0);\n@@ -156,7 +161,10 @@\n             switch (c[pos.getIndex()]) {\n             case QUOTE:\n                 appendQuotedString(pattern, pos, stripCustom, true);\n-                break;\n+                {\n+\t\t\t\t\tsuper.applyPattern(stripCustom.toString());\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n             case START_FE:\n                 fmtCount++;\n                 seekNonWs(pattern, pos);\n@@ -417,7 +425,8 @@\n     private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n             StringBuffer appendTo, boolean escapingOn) {\n         int start = pos.getIndex();\n-        char[] c = pattern.toCharArray();\n+        pos.setIndex(pos.getIndex() + 1);\n+\t\tchar[] c = pattern.toCharArray();\n         if (escapingOn && c[start] == QUOTE) {\n             return appendTo == null ? null : appendTo.append(QUOTE);\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 420, 
          "faulty": "char[] c=pattern.toCharArray();", 
          "type": "InsertBefore", 
          "seed": "pos.setIndex(pos.getIndex() + 1);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 149, 
          "faulty": "ArrayList foundDescriptions=new ArrayList();", 
          "type": "InsertBefore", 
          "seed": "if (registry == null) {\n  super.applyPattern(pattern);\n  toPattern=super.toPattern();\n  return;\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 159, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "super.applyPattern(stripCustom.toString());"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:13:04.265756743 -0500\n+++ /tmp/Arja_Defects4J_Lang_43/patches_21ag/Patch_1581/patched/tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 06:23:09.835870232 -0500\n@@ -156,7 +156,10 @@\n             switch (c[pos.getIndex()]) {\n             case QUOTE:\n                 appendQuotedString(pattern, pos, stripCustom, true);\n-                break;\n+                {\n+\t\t\t\t\tpos.setIndex(pos.getIndex() + 1);\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n             case START_FE:\n                 fmtCount++;\n                 seekNonWs(pattern, pos);\n@@ -184,7 +187,10 @@\n                 }\n                 // fall through\n             default:\n-                stripCustom.append(c[pos.getIndex()]);\n+                {\n+\t\t\t\t\tValidate.isTrue(foundFormats.size() == fmtCount);\n+\t\t\t\t\tstripCustom.append(c[pos.getIndex()]);\n+\t\t\t\t}\n                 next(pos);\n             }\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 159, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "pos.setIndex(pos.getIndex() + 1);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 187, 
          "faulty": "stripCustom.append(c[pos.getIndex()]);", 
          "type": "InsertBefore", 
          "seed": "Validate.isTrue(foundFormats.size() == fmtCount);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:13:04.265756743 -0500\n+++ /tmp/Arja_Defects4J_Lang_43/patches_21ag/Patch_1713/patched/tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 06:28:23.768449355 -0500\n@@ -156,7 +156,10 @@\n             switch (c[pos.getIndex()]) {\n             case QUOTE:\n                 appendQuotedString(pattern, pos, stripCustom, true);\n-                break;\n+                {\n+\t\t\t\t\tpos.setIndex(pos.getIndex() + 1);\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n             case START_FE:\n                 fmtCount++;\n                 seekNonWs(pattern, pos);\n@@ -418,7 +421,8 @@\n             StringBuffer appendTo, boolean escapingOn) {\n         int start = pos.getIndex();\n         char[] c = pattern.toCharArray();\n-        if (escapingOn && c[start] == QUOTE) {\n+        toPattern = super.toPattern();\n+\t\tif (escapingOn && c[start] == QUOTE) {\n             return appendTo == null ? null : appendTo.append(QUOTE);\n         }\n         int lastHold = start;\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 421, 
          "faulty": "if (escapingOn && c[start] == QUOTE) {\n  return appendTo == null ? null : appendTo.append(QUOTE);\n}", 
          "type": "InsertBefore", 
          "seed": "toPattern=super.toPattern();"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 159, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "pos.setIndex(pos.getIndex() + 1);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:13:04.265756743 -0500\n+++ /tmp/Arja_Defects4J_Lang_43/patches_21ag/Patch_577/patched/tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:44:01.301469822 -0500\n@@ -143,7 +143,8 @@\n         if (registry == null) {\n             super.applyPattern(pattern);\n             toPattern = super.toPattern();\n-            return;\n+            super.applyPattern(pattern);\n+\t\t\treturn;\n         }\n         ArrayList foundFormats = new ArrayList();\n         ArrayList foundDescriptions = new ArrayList();\n@@ -156,7 +157,10 @@\n             switch (c[pos.getIndex()]) {\n             case QUOTE:\n                 appendQuotedString(pattern, pos, stripCustom, true);\n-                break;\n+                {\n+\t\t\t\t\tpos.setIndex(pos.getIndex() + 1);\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n             case START_FE:\n                 fmtCount++;\n                 seekNonWs(pattern, pos);\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 146, 
          "faulty": "return;", 
          "type": "InsertBefore", 
          "seed": "super.applyPattern(pattern);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 159, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "pos.setIndex(pos.getIndex() + 1);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:13:04.265756743 -0500\n+++ /tmp/Arja_Defects4J_Lang_43/patches_21ag/Patch_1644/patched/tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 06:25:25.958387093 -0500\n@@ -156,7 +156,10 @@\n             switch (c[pos.getIndex()]) {\n             case QUOTE:\n                 appendQuotedString(pattern, pos, stripCustom, true);\n-                break;\n+                {\n+\t\t\t\t\tpos.setIndex(pos.getIndex() + 1);\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n             case START_FE:\n                 fmtCount++;\n                 seekNonWs(pattern, pos);\n@@ -185,7 +188,18 @@\n                 // fall through\n             default:\n                 stripCustom.append(c[pos.getIndex()]);\n-                next(pos);\n+                {\n+\t\t\t\t\tif (c[pos.getIndex()] == START_FMT) {\n+\t\t\t\t\t\tformatDescription = parseFormatDescription(pattern,\n+\t\t\t\t\t\t\t\tnext(pos));\n+\t\t\t\t\t\tformat = getFormat(formatDescription);\n+\t\t\t\t\t\tif (format == null) {\n+\t\t\t\t\t\t\tstripCustom.append(START_FMT).append(\n+\t\t\t\t\t\t\t\t\tformatDescription);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tnext(pos);\n+\t\t\t\t}\n             }\n         }\n         super.applyPattern(stripCustom.toString());\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 159, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "pos.setIndex(pos.getIndex() + 1);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 188, 
          "faulty": "next(pos);", 
          "type": "InsertBefore", 
          "seed": "if (c[pos.getIndex()] == START_FMT) {\n  formatDescription=parseFormatDescription(pattern,next(pos));\n  format=getFormat(formatDescription);\n  if (format == null) {\n    stripCustom.append(START_FMT).append(formatDescription);\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:13:04.265756743 -0500\n+++ /tmp/Arja_Defects4J_Lang_43/patches_21ag/Patch_159/patched/tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:26:31.888930601 -0500\n@@ -149,7 +149,8 @@\n         ArrayList foundDescriptions = new ArrayList();\n         StringBuffer stripCustom = new StringBuffer(pattern.length());\n \n-        ParsePosition pos = new ParsePosition(0);\n+        toPattern = insertFormats(super.toPattern(), foundDescriptions);\n+\t\tParsePosition pos = new ParsePosition(0);\n         char[] c = pattern.toCharArray();\n         int fmtCount = 0;\n         while (pos.getIndex() < pattern.length()) {\n@@ -419,7 +420,7 @@\n         int start = pos.getIndex();\n         char[] c = pattern.toCharArray();\n         if (escapingOn && c[start] == QUOTE) {\n-            return appendTo == null ? null : appendTo.append(QUOTE);\n+            pos.setIndex(pos.getIndex() + 1);\n         }\n         int lastHold = start;\n         for (int i = pos.getIndex(); i < pattern.length(); i++) {\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 422, 
          "faulty": "return appendTo == null ? null : appendTo.append(QUOTE);", 
          "type": "Replace", 
          "seed": "pos.setIndex(pos.getIndex() + 1);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 152, 
          "faulty": "ParsePosition pos=new ParsePosition(0);", 
          "type": "InsertBefore", 
          "seed": "toPattern=insertFormats(super.toPattern(),foundDescriptions);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:13:04.265756743 -0500\n+++ /tmp/Arja_Defects4J_Lang_43/patches_21ag/Patch_1198/patched/tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 06:08:19.225572245 -0500\n@@ -143,7 +143,12 @@\n         if (registry == null) {\n             super.applyPattern(pattern);\n             toPattern = super.toPattern();\n-            return;\n+            if (registry == null) {\n+\t\t\t\tsuper.applyPattern(pattern);\n+\t\t\t\ttoPattern = super.toPattern();\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t\treturn;\n         }\n         ArrayList foundFormats = new ArrayList();\n         ArrayList foundDescriptions = new ArrayList();\n@@ -419,7 +424,7 @@\n         int start = pos.getIndex();\n         char[] c = pattern.toCharArray();\n         if (escapingOn && c[start] == QUOTE) {\n-            return appendTo == null ? null : appendTo.append(QUOTE);\n+            pos.setIndex(pos.getIndex() + 1);\n         }\n         int lastHold = start;\n         for (int i = pos.getIndex(); i < pattern.length(); i++) {\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 146, 
          "faulty": "return;", 
          "type": "InsertBefore", 
          "seed": "if (registry == null) {\n  super.applyPattern(pattern);\n  toPattern=super.toPattern();\n  return;\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 422, 
          "faulty": "return appendTo == null ? null : appendTo.append(QUOTE);", 
          "type": "Replace", 
          "seed": "pos.setIndex(pos.getIndex() + 1);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:13:04.265756743 -0500\n+++ /tmp/Arja_Defects4J_Lang_43/patches_21ag/Patch_300/patched/tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:32:20.037127064 -0500\n@@ -140,11 +140,7 @@\n      * @param pattern String\n      */\n     public final void applyPattern(String pattern) {\n-        if (registry == null) {\n-            super.applyPattern(pattern);\n-            toPattern = super.toPattern();\n-            return;\n-        }\n+        this.registry = registry;\n         ArrayList foundFormats = new ArrayList();\n         ArrayList foundDescriptions = new ArrayList();\n         StringBuffer stripCustom = new StringBuffer(pattern.length());\n@@ -419,7 +415,7 @@\n         int start = pos.getIndex();\n         char[] c = pattern.toCharArray();\n         if (escapingOn && c[start] == QUOTE) {\n-            return appendTo == null ? null : appendTo.append(QUOTE);\n+            pos.setIndex(pos.getIndex() + 1);\n         }\n         int lastHold = start;\n         for (int i = pos.getIndex(); i < pattern.length(); i++) {\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 143, 
          "faulty": "if (registry == null) {\n  super.applyPattern(pattern);\n  toPattern=super.toPattern();\n  return;\n}", 
          "type": "Replace", 
          "seed": "this.registry=registry;"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 422, 
          "faulty": "return appendTo == null ? null : appendTo.append(QUOTE);", 
          "type": "Replace", 
          "seed": "pos.setIndex(pos.getIndex() + 1);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:13:04.265756743 -0500\n+++ /tmp/Arja_Defects4J_Lang_43/patches_21ag/Patch_361/patched/tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:34:39.867599595 -0500\n@@ -150,13 +150,17 @@\n         StringBuffer stripCustom = new StringBuffer(pattern.length());\n \n         ParsePosition pos = new ParsePosition(0);\n-        char[] c = pattern.toCharArray();\n+        toPattern = super.toPattern();\n+\t\tchar[] c = pattern.toCharArray();\n         int fmtCount = 0;\n         while (pos.getIndex() < pattern.length()) {\n             switch (c[pos.getIndex()]) {\n             case QUOTE:\n                 appendQuotedString(pattern, pos, stripCustom, true);\n-                break;\n+                {\n+\t\t\t\t\tpos.setIndex(pos.getIndex() + 1);\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n             case START_FE:\n                 fmtCount++;\n                 seekNonWs(pattern, pos);\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 153, 
          "faulty": "char[] c=pattern.toCharArray();", 
          "type": "InsertBefore", 
          "seed": "toPattern=super.toPattern();"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 159, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "pos.setIndex(pos.getIndex() + 1);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:13:04.265756743 -0500\n+++ /tmp/Arja_Defects4J_Lang_43/patches_21ag/Patch_314/patched/tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:32:48.884811929 -0500\n@@ -141,7 +141,12 @@\n      */\n     public final void applyPattern(String pattern) {\n         if (registry == null) {\n-            super.applyPattern(pattern);\n+            if (registry == null) {\n+\t\t\t\tsuper.applyPattern(pattern);\n+\t\t\t\ttoPattern = super.toPattern();\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t\tsuper.applyPattern(pattern);\n             toPattern = super.toPattern();\n             return;\n         }\n@@ -156,7 +161,10 @@\n             switch (c[pos.getIndex()]) {\n             case QUOTE:\n                 appendQuotedString(pattern, pos, stripCustom, true);\n-                break;\n+                {\n+\t\t\t\t\tpos.setIndex(pos.getIndex() + 1);\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n             case START_FE:\n                 fmtCount++;\n                 seekNonWs(pattern, pos);\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 144, 
          "faulty": "super.applyPattern(pattern);", 
          "type": "InsertBefore", 
          "seed": "if (registry == null) {\n  super.applyPattern(pattern);\n  toPattern=super.toPattern();\n  return;\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 159, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "pos.setIndex(pos.getIndex() + 1);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:13:04.265756743 -0500\n+++ /tmp/Arja_Defects4J_Lang_43/patches_21ag/Patch_867/patched/tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:55:31.277941540 -0500\n@@ -142,7 +142,8 @@\n     public final void applyPattern(String pattern) {\n         if (registry == null) {\n             super.applyPattern(pattern);\n-            toPattern = super.toPattern();\n+            this.registry = registry;\n+\t\t\ttoPattern = super.toPattern();\n             return;\n         }\n         ArrayList foundFormats = new ArrayList();\n@@ -417,7 +418,8 @@\n     private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n             StringBuffer appendTo, boolean escapingOn) {\n         int start = pos.getIndex();\n-        char[] c = pattern.toCharArray();\n+        pos.setIndex(pos.getIndex() + 1);\n+\t\tchar[] c = pattern.toCharArray();\n         if (escapingOn && c[start] == QUOTE) {\n             return appendTo == null ? null : appendTo.append(QUOTE);\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 420, 
          "faulty": "char[] c=pattern.toCharArray();", 
          "type": "InsertBefore", 
          "seed": "pos.setIndex(pos.getIndex() + 1);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 145, 
          "faulty": "toPattern=super.toPattern();", 
          "type": "InsertBefore", 
          "seed": "this.registry=registry;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:13:04.265756743 -0500\n+++ /tmp/Arja_Defects4J_Lang_43/patches_21ag/Patch_1398/patched/tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 06:16:26.872260232 -0500\n@@ -156,7 +156,47 @@\n             switch (c[pos.getIndex()]) {\n             case QUOTE:\n                 appendQuotedString(pattern, pos, stripCustom, true);\n-                break;\n+                {\n+\t\t\t\t\twhile (pos.getIndex() < pattern.length()) {\n+\t\t\t\t\t\tswitch (c[pos.getIndex()]) {\n+\t\t\t\t\t\tcase QUOTE:\n+\t\t\t\t\t\t\tappendQuotedString(pattern, pos, stripCustom, true);\n+\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\tcase START_FE:\n+\t\t\t\t\t\t\tfmtCount++;\n+\t\t\t\t\t\t\tseekNonWs(pattern, pos);\n+\t\t\t\t\t\t\tint start = pos.getIndex();\n+\t\t\t\t\t\t\tint index = readArgumentIndex(pattern, next(pos));\n+\t\t\t\t\t\t\tstripCustom.append(START_FE).append(index);\n+\t\t\t\t\t\t\tseekNonWs(pattern, pos);\n+\t\t\t\t\t\t\tFormat format = null;\n+\t\t\t\t\t\t\tString formatDescription = null;\n+\t\t\t\t\t\t\tif (c[pos.getIndex()] == START_FMT) {\n+\t\t\t\t\t\t\t\tformatDescription = parseFormatDescription(\n+\t\t\t\t\t\t\t\t\t\tpattern, next(pos));\n+\t\t\t\t\t\t\t\tformat = getFormat(formatDescription);\n+\t\t\t\t\t\t\t\tif (format == null) {\n+\t\t\t\t\t\t\t\t\tstripCustom.append(START_FMT).append(\n+\t\t\t\t\t\t\t\t\t\t\tformatDescription);\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tfoundFormats.add(format);\n+\t\t\t\t\t\t\tfoundDescriptions.add(format == null ? null\n+\t\t\t\t\t\t\t\t\t: formatDescription);\n+\t\t\t\t\t\t\tValidate.isTrue(foundFormats.size() == fmtCount);\n+\t\t\t\t\t\t\tValidate.isTrue(foundDescriptions.size() == fmtCount);\n+\t\t\t\t\t\t\tif (c[pos.getIndex()] != END_FE) {\n+\t\t\t\t\t\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\t\t\t\t\t\"Unreadable format element at position \"\n+\t\t\t\t\t\t\t\t\t\t\t\t+ start);\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\tdefault:\n+\t\t\t\t\t\t\tstripCustom.append(c[pos.getIndex()]);\n+\t\t\t\t\t\t\tnext(pos);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n             case START_FE:\n                 fmtCount++;\n                 seekNonWs(pattern, pos);\n@@ -417,10 +457,8 @@\n     private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n             StringBuffer appendTo, boolean escapingOn) {\n         int start = pos.getIndex();\n-        char[] c = pattern.toCharArray();\n-        if (escapingOn && c[start] == QUOTE) {\n-            return appendTo == null ? null : appendTo.append(QUOTE);\n-        }\n+        pos.setIndex(pos.getIndex() + 1);\n+\t\tchar[] c = pattern.toCharArray();\n         int lastHold = start;\n         for (int i = pos.getIndex(); i < pattern.length(); i++) {\n             if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 420, 
          "faulty": "char[] c=pattern.toCharArray();", 
          "type": "InsertBefore", 
          "seed": "pos.setIndex(pos.getIndex() + 1);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 421, 
          "faulty": "if (escapingOn && c[start] == QUOTE) {\n  return appendTo == null ? null : appendTo.append(QUOTE);\n}", 
          "type": "Delete", 
          "seed": "applyPattern(pattern);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 159, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "while (pos.getIndex() < pattern.length()) {\nswitch (c[pos.getIndex()]) {\ncase QUOTE:\n    appendQuotedString(pattern,pos,stripCustom,true);\n  break;\ncase START_FE:\nfmtCount++;\nseekNonWs(pattern,pos);\nint start=pos.getIndex();\nint index=readArgumentIndex(pattern,next(pos));\nstripCustom.append(START_FE).append(index);\nseekNonWs(pattern,pos);\nFormat format=null;\nString formatDescription=null;\nif (c[pos.getIndex()] == START_FMT) {\nformatDescription=parseFormatDescription(pattern,next(pos));\nformat=getFormat(formatDescription);\nif (format == null) {\nstripCustom.append(START_FMT).append(formatDescription);\n}\n}\nfoundFormats.add(format);\nfoundDescriptions.add(format == null ? null : formatDescription);\nValidate.isTrue(foundFormats.size() == fmtCount);\nValidate.isTrue(foundDescriptions.size() == fmtCount);\nif (c[pos.getIndex()] != END_FE) {\nthrow new IllegalArgumentException(\"Unreadable format element at position \" + start);\n}\ndefault :\nstripCustom.append(c[pos.getIndex()]);\nnext(pos);\n}\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:13:04.265756743 -0500\n+++ /tmp/Arja_Defects4J_Lang_43/patches_21ag/Patch_199/patched/tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:28:34.699588817 -0500\n@@ -156,7 +156,10 @@\n             switch (c[pos.getIndex()]) {\n             case QUOTE:\n                 appendQuotedString(pattern, pos, stripCustom, true);\n-                break;\n+                {\n+\t\t\t\t\tpos.setIndex(pos.getIndex() + 1);\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n             case START_FE:\n                 fmtCount++;\n                 seekNonWs(pattern, pos);\n@@ -417,7 +420,8 @@\n     private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n             StringBuffer appendTo, boolean escapingOn) {\n         int start = pos.getIndex();\n-        char[] c = pattern.toCharArray();\n+        seekNonWs(pattern, pos);\n+\t\tchar[] c = pattern.toCharArray();\n         if (escapingOn && c[start] == QUOTE) {\n             return appendTo == null ? null : appendTo.append(QUOTE);\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 420, 
          "faulty": "char[] c=pattern.toCharArray();", 
          "type": "InsertBefore", 
          "seed": "seekNonWs(pattern,pos);"
        }, 
        {
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", 
          "line": 159, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "pos.setIndex(pos.getIndex() + 1);"
        }
      ]
    }
  ]
}