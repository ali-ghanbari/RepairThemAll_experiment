{
  "repair_end": "2018-12-02 11:28:34.036163", 
  "repair_begin": "2018-12-02 11:05:49.197200", 
  "patches": [
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 485, 
          "faulty": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > -1 && expPos < str.length() - 1) {\n  exp=str.substring(expPos + 1,str.length());\n}\n else {\n  exp=null;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 474, 
          "faulty": "if (expPos > -1) {\n  if (expPos < decPos || expPos > str.length()) {\n    throw new NumberFormatException(str + \" is not a valid number.\");\n  }\n  dec=str.substring(decPos + 1,expPos);\n}\n else {\n  dec=str.substring(decPos + 1);\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 485, 
          "faulty": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > -1 && expPos < str.length() - 1) {\n  exp=str.substring(expPos + 1,str.length());\n}\n else {\n  exp=null;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 485, 
          "faulty": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > -1 && expPos < str.length() - 1) {\n  exp=str.substring(expPos + 1,str.length());\n}\n else {\n  exp=null;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 485, 
          "faulty": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > -1 && expPos < str.length() - 1) {\n  exp=str.substring(expPos + 1,str.length());\n}\n else {\n  exp=null;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "double x2=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 485, 
          "faulty": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}", 
          "type": "InsertBefore", 
          "seed": "int i=1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-02 05:05:38.013361696 -0500\n+++ /tmp/GenProg_Defects4J_Lang_7/patches_e3r9/Patch_1286/patched/tmp/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-02 05:24:52.786068366 -0500\n@@ -450,7 +450,6 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n@@ -471,7 +470,10 @@\n \n         if (decPos > -1) {\n \n-            if (expPos > -1) {\n+            if (expPos > str.length()) {\n+\t\t\t\tthrow new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t}\n+\t\t\tif (expPos > -1) {\n                 if (expPos < decPos || expPos > str.length()) {\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n                 }\n@@ -482,7 +484,28 @@\n             mant = str.substring(0, decPos);\n         } else {\n             if (expPos > -1) {\n-                if (expPos > str.length()) {\n+                if (expPos > -1 && expPos < str.length() - 1) {\n+\t\t\t\t\texp = str.substring(expPos + 1, str.length());\n+\t\t\t\t} else {\n+\t\t\t\t\texp = null;\n+\t\t\t\t}\n+\t\t\t\tif (expPos > -1 && expPos < str.length() - 1) {\n+\t\t\t\t\texp = str.substring(expPos + 1, str.length());\n+\t\t\t\t} else {\n+\t\t\t\t\texp = null;\n+\t\t\t\t}\n+\t\t\t\tif (expPos > -1 && expPos < str.length() - 1) {\n+\t\t\t\t\texp = str.substring(expPos + 1, str.length());\n+\t\t\t\t} else {\n+\t\t\t\t\texp = null;\n+\t\t\t\t}\n+\t\t\t\tif (expPos > -1 && expPos < str.length() - 1) {\n+\t\t\t\t\texp = str.substring(expPos + 1, str.length());\n+\t\t\t\t} else {\n+\t\t\t\t\texp = null;\n+\t\t\t\t}\n+\t\t\t\tint i = 1;\n+\t\t\t\tif (expPos > str.length()) {\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n                 }\n                 mant = str.substring(0, expPos);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 474, 
          "faulty": "if (expPos > -1) {\n  if (expPos < decPos || expPos > str.length()) {\n    throw new NumberFormatException(str + \" is not a valid number.\");\n  }\n  dec=str.substring(decPos + 1,expPos);\n}\n else {\n  dec=str.substring(decPos + 1);\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "double x2=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 456, 
          "faulty": "int hexDigits=str.length() - 2;", 
          "type": "InsertBefore", 
          "seed": "int i=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 474, 
          "faulty": "if (expPos > -1) {\n  if (expPos < decPos || expPos > str.length()) {\n    throw new NumberFormatException(str + \" is not a valid number.\");\n  }\n  dec=str.substring(decPos + 1,expPos);\n}\n else {\n  dec=str.substring(decPos + 1);\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 474, 
          "faulty": "if (expPos > -1) {\n  if (expPos < decPos || expPos > str.length()) {\n    throw new NumberFormatException(str + \" is not a valid number.\");\n  }\n  dec=str.substring(decPos + 1,expPos);\n}\n else {\n  dec=str.substring(decPos + 1);\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "double x2=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 556, 
          "faulty": "exp=str.substring(expPos + 1,str.length());", 
          "type": "InsertBefore", 
          "seed": "dec=str.substring(decPos + 1);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-02 05:05:38.013361696 -0500\n+++ /tmp/GenProg_Defects4J_Lang_7/patches_e3r9/Patch_1380/patched/tmp/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-02 05:25:56.520543998 -0500\n@@ -450,10 +450,10 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n-            int hexDigits = str.length() - 2; // drop 0x\n+            int i = 1;\n+\t\t\tint hexDigits = str.length() - 2; // drop 0x\n             if (str.startsWith(\"-\")) { // drop -\n                 hexDigits--;\n             }\n@@ -471,7 +471,16 @@\n \n         if (decPos > -1) {\n \n-            if (expPos > -1) {\n+            if (expPos > str.length()) {\n+\t\t\t\tthrow new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t}\n+\t\t\tif (expPos > str.length()) {\n+\t\t\t\tthrow new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t}\n+\t\t\tif (expPos > str.length()) {\n+\t\t\t\tthrow new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t}\n+\t\t\tif (expPos > -1) {\n                 if (expPos < decPos || expPos > str.length()) {\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n                 }\n@@ -553,7 +562,8 @@\n             //User doesn't have a preference on the return type, so let's start\n             //small and go from there...\n             if (expPos > -1 && expPos < str.length() - 1) {\n-                exp = str.substring(expPos + 1, str.length());\n+                dec = str.substring(decPos + 1);\n+\t\t\t\texp = str.substring(expPos + 1, str.length());\n             } else {\n                 exp = null;\n             }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 485, 
          "faulty": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > -1 && expPos < str.length() - 1) {\n  exp=str.substring(expPos + 1,str.length());\n}\n else {\n  exp=null;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 474, 
          "faulty": "if (expPos > -1) {\n  if (expPos < decPos || expPos > str.length()) {\n    throw new NumberFormatException(str + \" is not a valid number.\");\n  }\n  dec=str.substring(decPos + 1,expPos);\n}\n else {\n  dec=str.substring(decPos + 1);\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 485, 
          "faulty": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > -1 && expPos < str.length() - 1) {\n  exp=str.substring(expPos + 1,str.length());\n}\n else {\n  exp=null;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 474, 
          "faulty": "if (expPos > -1) {\n  if (expPos < decPos || expPos > str.length()) {\n    throw new NumberFormatException(str + \" is not a valid number.\");\n  }\n  dec=str.substring(decPos + 1,expPos);\n}\n else {\n  dec=str.substring(decPos + 1);\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "double x2=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 456, 
          "faulty": "int hexDigits=str.length() - 2;", 
          "type": "InsertBefore", 
          "seed": "int i=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 587, 
          "faulty": "if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n  return d;\n}", 
          "type": "InsertBefore", 
          "seed": "if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n  return d;\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-02 05:05:38.013361696 -0500\n+++ /tmp/GenProg_Defects4J_Lang_7/patches_e3r9/Patch_1328/patched/tmp/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-02 05:25:21.043173315 -0500\n@@ -450,10 +450,10 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n-            int hexDigits = str.length() - 2; // drop 0x\n+            int i = 1;\n+\t\t\tint hexDigits = str.length() - 2; // drop 0x\n             if (str.startsWith(\"-\")) { // drop -\n                 hexDigits--;\n             }\n@@ -471,7 +471,13 @@\n \n         if (decPos > -1) {\n \n-            if (expPos > -1) {\n+            if (expPos > str.length()) {\n+\t\t\t\tthrow new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t}\n+\t\t\tif (expPos > str.length()) {\n+\t\t\t\tthrow new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t}\n+\t\t\tif (expPos > -1) {\n                 if (expPos < decPos || expPos > str.length()) {\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n                 }\n@@ -482,7 +488,17 @@\n             mant = str.substring(0, decPos);\n         } else {\n             if (expPos > -1) {\n-                if (expPos > str.length()) {\n+                if (expPos > -1 && expPos < str.length() - 1) {\n+\t\t\t\t\texp = str.substring(expPos + 1, str.length());\n+\t\t\t\t} else {\n+\t\t\t\t\texp = null;\n+\t\t\t\t}\n+\t\t\t\tif (expPos > -1 && expPos < str.length() - 1) {\n+\t\t\t\t\texp = str.substring(expPos + 1, str.length());\n+\t\t\t\t} else {\n+\t\t\t\t\texp = null;\n+\t\t\t\t}\n+\t\t\t\tif (expPos > str.length()) {\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n                 }\n                 mant = str.substring(0, expPos);\n@@ -585,6 +601,9 @@\n                 try {\n                     Double d = createDouble(str);\n                     if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n+\t\t\t\t\t\treturn d;\n+\t\t\t\t\t}\n+\t\t\t\t\tif (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                         return d;\n                     }\n                 } catch (NumberFormatException nfe) { // NOPMD\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "double x2=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 587, 
          "faulty": "if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n  return d;\n}", 
          "type": "InsertBefore", 
          "seed": "if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n  return d;\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-02 05:05:38.013361696 -0500\n+++ /tmp/GenProg_Defects4J_Lang_7/patches_e3r9/Patch_1272/patched/tmp/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-02 05:24:42.533664275 -0500\n@@ -450,7 +450,6 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n@@ -585,6 +584,9 @@\n                 try {\n                     Double d = createDouble(str);\n                     if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n+\t\t\t\t\t\treturn d;\n+\t\t\t\t\t}\n+\t\t\t\t\tif (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                         return d;\n                     }\n                 } catch (NumberFormatException nfe) { // NOPMD\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 474, 
          "faulty": "if (expPos > -1) {\n  if (expPos < decPos || expPos > str.length()) {\n    throw new NumberFormatException(str + \" is not a valid number.\");\n  }\n  dec=str.substring(decPos + 1,expPos);\n}\n else {\n  dec=str.substring(decPos + 1);\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "double x2=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 474, 
          "faulty": "if (expPos > -1) {\n  if (expPos < decPos || expPos > str.length()) {\n    throw new NumberFormatException(str + \" is not a valid number.\");\n  }\n  dec=str.substring(decPos + 1,expPos);\n}\n else {\n  dec=str.substring(decPos + 1);\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "double x2=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 587, 
          "faulty": "if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n  return d;\n}", 
          "type": "InsertBefore", 
          "seed": "if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n  return d;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 535, 
          "faulty": "Double d=NumberUtils.createDouble(numeric);", 
          "type": "InsertBefore", 
          "seed": "if (expPos > -1) {\n  if (expPos < decPos || expPos > str.length()) {\n    throw new NumberFormatException(str + \" is not a valid number.\");\n  }\n  dec=str.substring(decPos + 1,expPos);\n}\n else {\n  dec=str.substring(decPos + 1);\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-02 05:05:38.013361696 -0500\n+++ /tmp/GenProg_Defects4J_Lang_7/patches_e3r9/Patch_1463/patched/tmp/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-02 05:26:54.634755162 -0500\n@@ -450,7 +450,6 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n@@ -471,7 +470,13 @@\n \n         if (decPos > -1) {\n \n-            if (expPos > -1) {\n+            if (expPos > str.length()) {\n+\t\t\t\tthrow new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t}\n+\t\t\tif (expPos > str.length()) {\n+\t\t\t\tthrow new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t}\n+\t\t\tif (expPos > -1) {\n                 if (expPos < decPos || expPos > str.length()) {\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n                 }\n@@ -532,7 +537,16 @@\n                 case 'd' :\n                 case 'D' :\n                     try {\n-                        Double d = NumberUtils.createDouble(numeric);\n+                        if (expPos > -1) {\n+\t\t\t\t\t\t\tif (expPos < decPos || expPos > str.length()) {\n+\t\t\t\t\t\t\t\tthrow new NumberFormatException(str\n+\t\t\t\t\t\t\t\t\t\t+ \" is not a valid number.\");\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tdec = str.substring(decPos + 1, expPos);\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tdec = str.substring(decPos + 1);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tDouble d = NumberUtils.createDouble(numeric);\n                         if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {\n                             return d;\n                         }\n@@ -585,6 +599,9 @@\n                 try {\n                     Double d = createDouble(str);\n                     if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n+\t\t\t\t\t\treturn d;\n+\t\t\t\t\t}\n+\t\t\t\t\tif (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                         return d;\n                     }\n                 } catch (NumberFormatException nfe) { // NOPMD\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 485, 
          "faulty": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > -1 && expPos < str.length() - 1) {\n  exp=str.substring(expPos + 1,str.length());\n}\n else {\n  exp=null;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 474, 
          "faulty": "if (expPos > -1) {\n  if (expPos < decPos || expPos > str.length()) {\n    throw new NumberFormatException(str + \" is not a valid number.\");\n  }\n  dec=str.substring(decPos + 1,expPos);\n}\n else {\n  dec=str.substring(decPos + 1);\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 485, 
          "faulty": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > -1 && expPos < str.length() - 1) {\n  exp=str.substring(expPos + 1,str.length());\n}\n else {\n  exp=null;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 474, 
          "faulty": "if (expPos > -1) {\n  if (expPos < decPos || expPos > str.length()) {\n    throw new NumberFormatException(str + \" is not a valid number.\");\n  }\n  dec=str.substring(decPos + 1,expPos);\n}\n else {\n  dec=str.substring(decPos + 1);\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "double x2=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 568, 
          "faulty": "return createLong(str);", 
          "type": "InsertBefore", 
          "seed": "double x1=1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-02 05:05:38.013361696 -0500\n+++ /tmp/GenProg_Defects4J_Lang_7/patches_e3r9/Patch_1588/patched/tmp/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-02 05:28:23.918179566 -0500\n@@ -450,7 +450,6 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n@@ -471,7 +470,13 @@\n \n         if (decPos > -1) {\n \n-            if (expPos > -1) {\n+            if (expPos > str.length()) {\n+\t\t\t\tthrow new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t}\n+\t\t\tif (expPos > str.length()) {\n+\t\t\t\tthrow new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t}\n+\t\t\tif (expPos > -1) {\n                 if (expPos < decPos || expPos > str.length()) {\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n                 }\n@@ -482,7 +487,17 @@\n             mant = str.substring(0, decPos);\n         } else {\n             if (expPos > -1) {\n-                if (expPos > str.length()) {\n+                if (expPos > -1 && expPos < str.length() - 1) {\n+\t\t\t\t\texp = str.substring(expPos + 1, str.length());\n+\t\t\t\t} else {\n+\t\t\t\t\texp = null;\n+\t\t\t\t}\n+\t\t\t\tif (expPos > -1 && expPos < str.length() - 1) {\n+\t\t\t\t\texp = str.substring(expPos + 1, str.length());\n+\t\t\t\t} else {\n+\t\t\t\t\texp = null;\n+\t\t\t\t}\n+\t\t\t\tif (expPos > str.length()) {\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n                 }\n                 mant = str.substring(0, expPos);\n@@ -565,7 +580,8 @@\n                     // ignore the bad number\n                 }\n                 try {\n-                    return createLong(str);\n+                    double x1 = 1;\n+\t\t\t\t\treturn createLong(str);\n                 } catch (NumberFormatException nfe) { // NOPMD\n                     // ignore the bad number\n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 485, 
          "faulty": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > -1 && expPos < str.length() - 1) {\n  exp=str.substring(expPos + 1,str.length());\n}\n else {\n  exp=null;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 474, 
          "faulty": "if (expPos > -1) {\n  if (expPos < decPos || expPos > str.length()) {\n    throw new NumberFormatException(str + \" is not a valid number.\");\n  }\n  dec=str.substring(decPos + 1,expPos);\n}\n else {\n  dec=str.substring(decPos + 1);\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 485, 
          "faulty": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > -1 && expPos < str.length() - 1) {\n  exp=str.substring(expPos + 1,str.length());\n}\n else {\n  exp=null;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 474, 
          "faulty": "if (expPos > -1) {\n  if (expPos < decPos || expPos > str.length()) {\n    throw new NumberFormatException(str + \" is not a valid number.\");\n  }\n  dec=str.substring(decPos + 1,expPos);\n}\n else {\n  dec=str.substring(decPos + 1);\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "double x2=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "double x2=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 457, 
          "faulty": "if (str.startsWith(\"-\")) {\n  hexDigits--;\n}", 
          "type": "Replace", 
          "seed": "double delta1, delta2=Double.MAX_VALUE;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-02 05:05:38.013361696 -0500\n+++ /tmp/GenProg_Defects4J_Lang_7/patches_e3r9/Patch_1480/patched/tmp/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-02 05:27:07.307232441 -0500\n@@ -450,13 +450,10 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n-            if (str.startsWith(\"-\")) { // drop -\n-                hexDigits--;\n-            }\n+            double delta1, delta2 = Double.MAX_VALUE;\n             if (hexDigits > 8) { // too many for an int\n                 return createLong(str);\n             }\n@@ -471,7 +468,13 @@\n \n         if (decPos > -1) {\n \n-            if (expPos > -1) {\n+            if (expPos > str.length()) {\n+\t\t\t\tthrow new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t}\n+\t\t\tif (expPos > str.length()) {\n+\t\t\t\tthrow new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t}\n+\t\t\tif (expPos > -1) {\n                 if (expPos < decPos || expPos > str.length()) {\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n                 }\n@@ -482,7 +485,17 @@\n             mant = str.substring(0, decPos);\n         } else {\n             if (expPos > -1) {\n-                if (expPos > str.length()) {\n+                if (expPos > -1 && expPos < str.length() - 1) {\n+\t\t\t\t\texp = str.substring(expPos + 1, str.length());\n+\t\t\t\t} else {\n+\t\t\t\t\texp = null;\n+\t\t\t\t}\n+\t\t\t\tif (expPos > -1 && expPos < str.length() - 1) {\n+\t\t\t\t\texp = str.substring(expPos + 1, str.length());\n+\t\t\t\t} else {\n+\t\t\t\t\texp = null;\n+\t\t\t\t}\n+\t\t\t\tif (expPos > str.length()) {\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n                 }\n                 mant = str.substring(0, expPos);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "double x2=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 456, 
          "faulty": "int hexDigits=str.length() - 2;", 
          "type": "InsertBefore", 
          "seed": "int i=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "double x2=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 563, 
          "faulty": "return createInteger(str);", 
          "type": "InsertBefore", 
          "seed": "int numer0=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-02 05:05:38.013361696 -0500\n+++ /tmp/GenProg_Defects4J_Lang_7/patches_e3r9/Patch_1090/patched/tmp/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-02 05:22:30.544797757 -0500\n@@ -450,10 +450,10 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n-            int hexDigits = str.length() - 2; // drop 0x\n+            int i = 1;\n+\t\t\tint hexDigits = str.length() - 2; // drop 0x\n             if (str.startsWith(\"-\")) { // drop -\n                 hexDigits--;\n             }\n@@ -560,7 +560,8 @@\n             if (dec == null && exp == null) {\n                 //Must be an int,long,bigint\n                 try {\n-                    return createInteger(str);\n+                    int numer0 = 0;\n+\t\t\t\t\treturn createInteger(str);\n                 } catch (NumberFormatException nfe) { // NOPMD\n                     // ignore the bad number\n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 485, 
          "faulty": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > -1 && expPos < str.length() - 1) {\n  exp=str.substring(expPos + 1,str.length());\n}\n else {\n  exp=null;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 456, 
          "faulty": "int hexDigits=str.length() - 2;", 
          "type": "InsertBefore", 
          "seed": "int i=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "double x2=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-02 05:05:38.013361696 -0500\n+++ /tmp/GenProg_Defects4J_Lang_7/patches_e3r9/Patch_1265/patched/tmp/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-02 05:24:38.621509607 -0500\n@@ -450,10 +450,10 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n-            int hexDigits = str.length() - 2; // drop 0x\n+            int i = 1;\n+\t\t\tint hexDigits = str.length() - 2; // drop 0x\n             if (str.startsWith(\"-\")) { // drop -\n                 hexDigits--;\n             }\n@@ -482,7 +482,12 @@\n             mant = str.substring(0, decPos);\n         } else {\n             if (expPos > -1) {\n-                if (expPos > str.length()) {\n+                if (expPos > -1 && expPos < str.length() - 1) {\n+\t\t\t\t\texp = str.substring(expPos + 1, str.length());\n+\t\t\t\t} else {\n+\t\t\t\t\texp = null;\n+\t\t\t\t}\n+\t\t\t\tif (expPos > str.length()) {\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n                 }\n                 mant = str.substring(0, expPos);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 485, 
          "faulty": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > -1 && expPos < str.length() - 1) {\n  exp=str.substring(expPos + 1,str.length());\n}\n else {\n  exp=null;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 474, 
          "faulty": "if (expPos > -1) {\n  if (expPos < decPos || expPos > str.length()) {\n    throw new NumberFormatException(str + \" is not a valid number.\");\n  }\n  dec=str.substring(decPos + 1,expPos);\n}\n else {\n  dec=str.substring(decPos + 1);\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 485, 
          "faulty": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > -1 && expPos < str.length() - 1) {\n  exp=str.substring(expPos + 1,str.length());\n}\n else {\n  exp=null;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 474, 
          "faulty": "if (expPos > -1) {\n  if (expPos < decPos || expPos > str.length()) {\n    throw new NumberFormatException(str + \" is not a valid number.\");\n  }\n  dec=str.substring(decPos + 1,expPos);\n}\n else {\n  dec=str.substring(decPos + 1);\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "double x2=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 587, 
          "faulty": "if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n  return d;\n}", 
          "type": "InsertBefore", 
          "seed": "if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n  return d;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 535, 
          "faulty": "Double d=NumberUtils.createDouble(numeric);", 
          "type": "InsertBefore", 
          "seed": "if (expPos > -1) {\n  if (expPos < decPos || expPos > str.length()) {\n    throw new NumberFormatException(str + \" is not a valid number.\");\n  }\n  dec=str.substring(decPos + 1,expPos);\n}\n else {\n  dec=str.substring(decPos + 1);\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-02 05:05:38.013361696 -0500\n+++ /tmp/GenProg_Defects4J_Lang_7/patches_e3r9/Patch_1317/patched/tmp/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-02 05:25:13.986898551 -0500\n@@ -450,7 +450,6 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n@@ -471,7 +470,13 @@\n \n         if (decPos > -1) {\n \n-            if (expPos > -1) {\n+            if (expPos > str.length()) {\n+\t\t\t\tthrow new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t}\n+\t\t\tif (expPos > str.length()) {\n+\t\t\t\tthrow new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t}\n+\t\t\tif (expPos > -1) {\n                 if (expPos < decPos || expPos > str.length()) {\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n                 }\n@@ -482,7 +487,17 @@\n             mant = str.substring(0, decPos);\n         } else {\n             if (expPos > -1) {\n-                if (expPos > str.length()) {\n+                if (expPos > -1 && expPos < str.length() - 1) {\n+\t\t\t\t\texp = str.substring(expPos + 1, str.length());\n+\t\t\t\t} else {\n+\t\t\t\t\texp = null;\n+\t\t\t\t}\n+\t\t\t\tif (expPos > -1 && expPos < str.length() - 1) {\n+\t\t\t\t\texp = str.substring(expPos + 1, str.length());\n+\t\t\t\t} else {\n+\t\t\t\t\texp = null;\n+\t\t\t\t}\n+\t\t\t\tif (expPos > str.length()) {\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n                 }\n                 mant = str.substring(0, expPos);\n@@ -532,7 +547,16 @@\n                 case 'd' :\n                 case 'D' :\n                     try {\n-                        Double d = NumberUtils.createDouble(numeric);\n+                        if (expPos > -1) {\n+\t\t\t\t\t\t\tif (expPos < decPos || expPos > str.length()) {\n+\t\t\t\t\t\t\t\tthrow new NumberFormatException(str\n+\t\t\t\t\t\t\t\t\t\t+ \" is not a valid number.\");\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tdec = str.substring(decPos + 1, expPos);\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tdec = str.substring(decPos + 1);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tDouble d = NumberUtils.createDouble(numeric);\n                         if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {\n                             return d;\n                         }\n@@ -585,6 +609,9 @@\n                 try {\n                     Double d = createDouble(str);\n                     if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n+\t\t\t\t\t\treturn d;\n+\t\t\t\t\t}\n+\t\t\t\t\tif (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                         return d;\n                     }\n                 } catch (NumberFormatException nfe) { // NOPMD\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 485, 
          "faulty": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > -1 && expPos < str.length() - 1) {\n  exp=str.substring(expPos + 1,str.length());\n}\n else {\n  exp=null;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 474, 
          "faulty": "if (expPos > -1) {\n  if (expPos < decPos || expPos > str.length()) {\n    throw new NumberFormatException(str + \" is not a valid number.\");\n  }\n  dec=str.substring(decPos + 1,expPos);\n}\n else {\n  dec=str.substring(decPos + 1);\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 485, 
          "faulty": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > -1 && expPos < str.length() - 1) {\n  exp=str.substring(expPos + 1,str.length());\n}\n else {\n  exp=null;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 474, 
          "faulty": "if (expPos > -1) {\n  if (expPos < decPos || expPos > str.length()) {\n    throw new NumberFormatException(str + \" is not a valid number.\");\n  }\n  dec=str.substring(decPos + 1,expPos);\n}\n else {\n  dec=str.substring(decPos + 1);\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "double x2=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 555, 
          "faulty": "if (expPos > -1 && expPos < str.length() - 1) {\n  exp=str.substring(expPos + 1,str.length());\n}\n else {\n  exp=null;\n}", 
          "type": "InsertBefore", 
          "seed": "int denom0=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java", 
          "line": 231, 
          "faulty": "testObjectOutputStream=new ObjectOutputStream(new ByteArrayOutputStream());", 
          "type": "Delete", 
          "seed": "return listeners.size();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java\t2018-12-02 05:05:34.361361824 -0500\n+++ /tmp/GenProg_Defects4J_Lang_7/patches_e3r9/Patch_1519/patched/tmp/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java\t2018-12-02 05:27:35.384284417 -0500\n@@ -227,8 +227,6 @@\n                 testObjectOutputStream.writeObject(listener);\n                 serializableListeners.add(listener);\n             } catch (IOException exception) {\n-                //recreate test stream in case of indeterminate state\n-                testObjectOutputStream = new ObjectOutputStream(new ByteArrayOutputStream());\n             }\n         }\n         /*\n\n\n--- /tmp/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-02 05:05:38.013361696 -0500\n+++ /tmp/GenProg_Defects4J_Lang_7/patches_e3r9/Patch_1519/patched/tmp/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-02 05:27:35.388284566 -0500\n@@ -450,7 +450,6 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n@@ -471,7 +470,13 @@\n \n         if (decPos > -1) {\n \n-            if (expPos > -1) {\n+            if (expPos > str.length()) {\n+\t\t\t\tthrow new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t}\n+\t\t\tif (expPos > str.length()) {\n+\t\t\t\tthrow new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t}\n+\t\t\tif (expPos > -1) {\n                 if (expPos < decPos || expPos > str.length()) {\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n                 }\n@@ -482,7 +487,17 @@\n             mant = str.substring(0, decPos);\n         } else {\n             if (expPos > -1) {\n-                if (expPos > str.length()) {\n+                if (expPos > -1 && expPos < str.length() - 1) {\n+\t\t\t\t\texp = str.substring(expPos + 1, str.length());\n+\t\t\t\t} else {\n+\t\t\t\t\texp = null;\n+\t\t\t\t}\n+\t\t\t\tif (expPos > -1 && expPos < str.length() - 1) {\n+\t\t\t\t\texp = str.substring(expPos + 1, str.length());\n+\t\t\t\t} else {\n+\t\t\t\t\texp = null;\n+\t\t\t\t}\n+\t\t\t\tif (expPos > str.length()) {\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n                 }\n                 mant = str.substring(0, expPos);\n@@ -550,7 +565,8 @@\n \n             }\n         } else {\n-            //User doesn't have a preference on the return type, so let's start\n+            int denom0 = 1;\n+\t\t\t//User doesn't have a preference on the return type, so let's start\n             //small and go from there...\n             if (expPos > -1 && expPos < str.length() - 1) {\n                 exp = str.substring(expPos + 1, str.length());\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 474, 
          "faulty": "if (expPos > -1) {\n  if (expPos < decPos || expPos > str.length()) {\n    throw new NumberFormatException(str + \" is not a valid number.\");\n  }\n  dec=str.substring(decPos + 1,expPos);\n}\n else {\n  dec=str.substring(decPos + 1);\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "double x2=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 474, 
          "faulty": "if (expPos > -1) {\n  if (expPos < decPos || expPos > str.length()) {\n    throw new NumberFormatException(str + \" is not a valid number.\");\n  }\n  dec=str.substring(decPos + 1,expPos);\n}\n else {\n  dec=str.substring(decPos + 1);\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "double x2=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 456, 
          "faulty": "int hexDigits=str.length() - 2;", 
          "type": "InsertBefore", 
          "seed": "int i=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 485, 
          "faulty": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > -1 && expPos < str.length() - 1) {\n  exp=str.substring(expPos + 1,str.length());\n}\n else {\n  exp=null;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 485, 
          "faulty": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > -1 && expPos < str.length() - 1) {\n  exp=str.substring(expPos + 1,str.length());\n}\n else {\n  exp=null;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "double x2=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 485, 
          "faulty": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}", 
          "type": "InsertBefore", 
          "seed": "int i=1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-02 05:05:38.013361696 -0500\n+++ /tmp/GenProg_Defects4J_Lang_7/patches_e3r9/Patch_1321/patched/tmp/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-02 05:25:16.306988973 -0500\n@@ -450,10 +450,10 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n-            int hexDigits = str.length() - 2; // drop 0x\n+            int i = 1;\n+\t\t\tint hexDigits = str.length() - 2; // drop 0x\n             if (str.startsWith(\"-\")) { // drop -\n                 hexDigits--;\n             }\n@@ -471,7 +471,13 @@\n \n         if (decPos > -1) {\n \n-            if (expPos > -1) {\n+            if (expPos > str.length()) {\n+\t\t\t\tthrow new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t}\n+\t\t\tif (expPos > str.length()) {\n+\t\t\t\tthrow new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t}\n+\t\t\tif (expPos > -1) {\n                 if (expPos < decPos || expPos > str.length()) {\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n                 }\n@@ -482,7 +488,18 @@\n             mant = str.substring(0, decPos);\n         } else {\n             if (expPos > -1) {\n-                if (expPos > str.length()) {\n+                if (expPos > -1 && expPos < str.length() - 1) {\n+\t\t\t\t\texp = str.substring(expPos + 1, str.length());\n+\t\t\t\t} else {\n+\t\t\t\t\texp = null;\n+\t\t\t\t}\n+\t\t\t\tif (expPos > -1 && expPos < str.length() - 1) {\n+\t\t\t\t\texp = str.substring(expPos + 1, str.length());\n+\t\t\t\t} else {\n+\t\t\t\t\texp = null;\n+\t\t\t\t}\n+\t\t\t\tint i = 1;\n+\t\t\t\tif (expPos > str.length()) {\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n                 }\n                 mant = str.substring(0, expPos);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 556, 
          "faulty": "exp=str.substring(expPos + 1,str.length());", 
          "type": "Replace", 
          "seed": "exp=str.substring(expPos + 1,str.length());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 456, 
          "faulty": "int hexDigits=str.length() - 2;", 
          "type": "InsertBefore", 
          "seed": "int i=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "double x2=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-02 05:05:38.013361696 -0500\n+++ /tmp/GenProg_Defects4J_Lang_7/patches_e3r9/Patch_1049/patched/tmp/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-02 05:21:59.431721548 -0500\n@@ -450,10 +450,10 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n-            int hexDigits = str.length() - 2; // drop 0x\n+            int i = 1;\n+\t\t\tint hexDigits = str.length() - 2; // drop 0x\n             if (str.startsWith(\"-\")) { // drop -\n                 hexDigits--;\n             }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 485, 
          "faulty": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > -1 && expPos < str.length() - 1) {\n  exp=str.substring(expPos + 1,str.length());\n}\n else {\n  exp=null;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 474, 
          "faulty": "if (expPos > -1) {\n  if (expPos < decPos || expPos > str.length()) {\n    throw new NumberFormatException(str + \" is not a valid number.\");\n  }\n  dec=str.substring(decPos + 1,expPos);\n}\n else {\n  dec=str.substring(decPos + 1);\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 485, 
          "faulty": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > -1 && expPos < str.length() - 1) {\n  exp=str.substring(expPos + 1,str.length());\n}\n else {\n  exp=null;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 485, 
          "faulty": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > -1 && expPos < str.length() - 1) {\n  exp=str.substring(expPos + 1,str.length());\n}\n else {\n  exp=null;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 474, 
          "faulty": "if (expPos > -1) {\n  if (expPos < decPos || expPos > str.length()) {\n    throw new NumberFormatException(str + \" is not a valid number.\");\n  }\n  dec=str.substring(decPos + 1,expPos);\n}\n else {\n  dec=str.substring(decPos + 1);\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 456, 
          "faulty": "int hexDigits=str.length() - 2;", 
          "type": "InsertBefore", 
          "seed": "int i=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "double x2=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 563, 
          "faulty": "return createInteger(str);", 
          "type": "InsertBefore", 
          "seed": "int numer0=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-02 05:05:38.013361696 -0500\n+++ /tmp/GenProg_Defects4J_Lang_7/patches_e3r9/Patch_1203/patched/tmp/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-02 05:23:55.319850795 -0500\n@@ -450,10 +450,10 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n-            int hexDigits = str.length() - 2; // drop 0x\n+            int i = 1;\n+\t\t\tint hexDigits = str.length() - 2; // drop 0x\n             if (str.startsWith(\"-\")) { // drop -\n                 hexDigits--;\n             }\n@@ -471,7 +471,13 @@\n \n         if (decPos > -1) {\n \n-            if (expPos > -1) {\n+            if (expPos > str.length()) {\n+\t\t\t\tthrow new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t}\n+\t\t\tif (expPos > str.length()) {\n+\t\t\t\tthrow new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t}\n+\t\t\tif (expPos > -1) {\n                 if (expPos < decPos || expPos > str.length()) {\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n                 }\n@@ -482,7 +488,22 @@\n             mant = str.substring(0, decPos);\n         } else {\n             if (expPos > -1) {\n-                if (expPos > str.length()) {\n+                if (expPos > -1 && expPos < str.length() - 1) {\n+\t\t\t\t\texp = str.substring(expPos + 1, str.length());\n+\t\t\t\t} else {\n+\t\t\t\t\texp = null;\n+\t\t\t\t}\n+\t\t\t\tif (expPos > -1 && expPos < str.length() - 1) {\n+\t\t\t\t\texp = str.substring(expPos + 1, str.length());\n+\t\t\t\t} else {\n+\t\t\t\t\texp = null;\n+\t\t\t\t}\n+\t\t\t\tif (expPos > -1 && expPos < str.length() - 1) {\n+\t\t\t\t\texp = str.substring(expPos + 1, str.length());\n+\t\t\t\t} else {\n+\t\t\t\t\texp = null;\n+\t\t\t\t}\n+\t\t\t\tif (expPos > str.length()) {\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n                 }\n                 mant = str.substring(0, expPos);\n@@ -560,7 +581,8 @@\n             if (dec == null && exp == null) {\n                 //Must be an int,long,bigint\n                 try {\n-                    return createInteger(str);\n+                    int numer0 = 0;\n+\t\t\t\t\treturn createInteger(str);\n                 } catch (NumberFormatException nfe) { // NOPMD\n                     // ignore the bad number\n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "double x2=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 474, 
          "faulty": "if (expPos > -1) {\n  if (expPos < decPos || expPos > str.length()) {\n    throw new NumberFormatException(str + \" is not a valid number.\");\n  }\n  dec=str.substring(decPos + 1,expPos);\n}\n else {\n  dec=str.substring(decPos + 1);\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 474, 
          "faulty": "if (expPos > -1) {\n  if (expPos < decPos || expPos > str.length()) {\n    throw new NumberFormatException(str + \" is not a valid number.\");\n  }\n  dec=str.substring(decPos + 1,expPos);\n}\n else {\n  dec=str.substring(decPos + 1);\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "double x2=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 587, 
          "faulty": "if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n  return d;\n}", 
          "type": "InsertBefore", 
          "seed": "if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n  return d;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 474, 
          "faulty": "if (expPos > -1) {\n  if (expPos < decPos || expPos > str.length()) {\n    throw new NumberFormatException(str + \" is not a valid number.\");\n  }\n  dec=str.substring(decPos + 1,expPos);\n}\n else {\n  dec=str.substring(decPos + 1);\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "double x2=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 555, 
          "faulty": "if (expPos > -1 && expPos < str.length() - 1) {\n  exp=str.substring(expPos + 1,str.length());\n}\n else {\n  exp=null;\n}", 
          "type": "InsertBefore", 
          "seed": "int denom0=1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-02 05:05:38.013361696 -0500\n+++ /tmp/GenProg_Defects4J_Lang_7/patches_e3r9/Patch_1437/patched/tmp/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-02 05:26:37.210096197 -0500\n@@ -450,7 +450,6 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n@@ -471,7 +470,16 @@\n \n         if (decPos > -1) {\n \n-            if (expPos > -1) {\n+            if (expPos > str.length()) {\n+\t\t\t\tthrow new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t}\n+\t\t\tif (expPos > str.length()) {\n+\t\t\t\tthrow new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t}\n+\t\t\tif (expPos > str.length()) {\n+\t\t\t\tthrow new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t}\n+\t\t\tif (expPos > -1) {\n                 if (expPos < decPos || expPos > str.length()) {\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n                 }\n@@ -550,7 +558,8 @@\n \n             }\n         } else {\n-            //User doesn't have a preference on the return type, so let's start\n+            int denom0 = 1;\n+\t\t\t//User doesn't have a preference on the return type, so let's start\n             //small and go from there...\n             if (expPos > -1 && expPos < str.length() - 1) {\n                 exp = str.substring(expPos + 1, str.length());\n@@ -585,6 +594,9 @@\n                 try {\n                     Double d = createDouble(str);\n                     if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n+\t\t\t\t\t\treturn d;\n+\t\t\t\t\t}\n+\t\t\t\t\tif (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                         return d;\n                     }\n                 } catch (NumberFormatException nfe) { // NOPMD\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "double x2=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-02 05:05:38.013361696 -0500\n+++ /tmp/GenProg_Defects4J_Lang_7/patches_e3r9/Patch_984/patched/tmp/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-02 05:21:10.742038566 -0500\n@@ -450,7 +450,6 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 474, 
          "faulty": "if (expPos > -1) {\n  if (expPos < decPos || expPos > str.length()) {\n    throw new NumberFormatException(str + \" is not a valid number.\");\n  }\n  dec=str.substring(decPos + 1,expPos);\n}\n else {\n  dec=str.substring(decPos + 1);\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "double x2=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 457, 
          "faulty": "if (str.startsWith(\"-\")) {\n  hexDigits--;\n}", 
          "type": "Replace", 
          "seed": "double delta1, delta2=Double.MAX_VALUE;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-02 05:05:38.013361696 -0500\n+++ /tmp/GenProg_Defects4J_Lang_7/patches_e3r9/Patch_1442/patched/tmp/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-02 05:26:40.350215191 -0500\n@@ -450,13 +450,10 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n-            if (str.startsWith(\"-\")) { // drop -\n-                hexDigits--;\n-            }\n+            double delta1, delta2 = Double.MAX_VALUE;\n             if (hexDigits > 8) { // too many for an int\n                 return createLong(str);\n             }\n@@ -471,7 +468,10 @@\n \n         if (decPos > -1) {\n \n-            if (expPos > -1) {\n+            if (expPos > str.length()) {\n+\t\t\t\tthrow new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t}\n+\t\t\tif (expPos > -1) {\n                 if (expPos < decPos || expPos > str.length()) {\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 485, 
          "faulty": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > -1 && expPos < str.length() - 1) {\n  exp=str.substring(expPos + 1,str.length());\n}\n else {\n  exp=null;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 474, 
          "faulty": "if (expPos > -1) {\n  if (expPos < decPos || expPos > str.length()) {\n    throw new NumberFormatException(str + \" is not a valid number.\");\n  }\n  dec=str.substring(decPos + 1,expPos);\n}\n else {\n  dec=str.substring(decPos + 1);\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 485, 
          "faulty": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > -1 && expPos < str.length() - 1) {\n  exp=str.substring(expPos + 1,str.length());\n}\n else {\n  exp=null;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 474, 
          "faulty": "if (expPos > -1) {\n  if (expPos < decPos || expPos > str.length()) {\n    throw new NumberFormatException(str + \" is not a valid number.\");\n  }\n  dec=str.substring(decPos + 1,expPos);\n}\n else {\n  dec=str.substring(decPos + 1);\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 474, 
          "faulty": "if (expPos > -1) {\n  if (expPos < decPos || expPos > str.length()) {\n    throw new NumberFormatException(str + \" is not a valid number.\");\n  }\n  dec=str.substring(decPos + 1,expPos);\n}\n else {\n  dec=str.substring(decPos + 1);\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 474, 
          "faulty": "if (expPos > -1) {\n  if (expPos < decPos || expPos > str.length()) {\n    throw new NumberFormatException(str + \" is not a valid number.\");\n  }\n  dec=str.substring(decPos + 1,expPos);\n}\n else {\n  dec=str.substring(decPos + 1);\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "double x2=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 458, 
          "faulty": "hexDigits--;", 
          "type": "Delete", 
          "seed": "return toByte(str,(byte)0);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-02 05:05:38.013361696 -0500\n+++ /tmp/GenProg_Defects4J_Lang_7/patches_e3r9/Patch_1245/patched/tmp/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-02 05:24:26.025009766 -0500\n@@ -450,12 +450,11 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n             if (str.startsWith(\"-\")) { // drop -\n-                hexDigits--;\n+                \n             }\n             if (hexDigits > 8) { // too many for an int\n                 return createLong(str);\n@@ -471,7 +470,19 @@\n \n         if (decPos > -1) {\n \n-            if (expPos > -1) {\n+            if (expPos > str.length()) {\n+\t\t\t\tthrow new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t}\n+\t\t\tif (expPos > str.length()) {\n+\t\t\t\tthrow new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t}\n+\t\t\tif (expPos > str.length()) {\n+\t\t\t\tthrow new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t}\n+\t\t\tif (expPos > str.length()) {\n+\t\t\t\tthrow new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t}\n+\t\t\tif (expPos > -1) {\n                 if (expPos < decPos || expPos > str.length()) {\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n                 }\n@@ -482,7 +493,17 @@\n             mant = str.substring(0, decPos);\n         } else {\n             if (expPos > -1) {\n-                if (expPos > str.length()) {\n+                if (expPos > -1 && expPos < str.length() - 1) {\n+\t\t\t\t\texp = str.substring(expPos + 1, str.length());\n+\t\t\t\t} else {\n+\t\t\t\t\texp = null;\n+\t\t\t\t}\n+\t\t\t\tif (expPos > -1 && expPos < str.length() - 1) {\n+\t\t\t\t\texp = str.substring(expPos + 1, str.length());\n+\t\t\t\t} else {\n+\t\t\t\t\texp = null;\n+\t\t\t\t}\n+\t\t\t\tif (expPos > str.length()) {\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n                 }\n                 mant = str.substring(0, expPos);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "double x2=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 556, 
          "faulty": "exp=str.substring(expPos + 1,str.length());", 
          "type": "InsertBefore", 
          "seed": "dec=str.substring(decPos + 1);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-02 05:05:38.013361696 -0500\n+++ /tmp/GenProg_Defects4J_Lang_7/patches_e3r9/Patch_1418/patched/tmp/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-02 05:26:23.885590054 -0500\n@@ -450,7 +450,6 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n@@ -553,7 +552,8 @@\n             //User doesn't have a preference on the return type, so let's start\n             //small and go from there...\n             if (expPos > -1 && expPos < str.length() - 1) {\n-                exp = str.substring(expPos + 1, str.length());\n+                dec = str.substring(decPos + 1);\n+\t\t\t\texp = str.substring(expPos + 1, str.length());\n             } else {\n                 exp = null;\n             }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 474, 
          "faulty": "if (expPos > -1) {\n  if (expPos < decPos || expPos > str.length()) {\n    throw new NumberFormatException(str + \" is not a valid number.\");\n  }\n  dec=str.substring(decPos + 1,expPos);\n}\n else {\n  dec=str.substring(decPos + 1);\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "double x2=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 555, 
          "faulty": "if (expPos > -1 && expPos < str.length() - 1) {\n  exp=str.substring(expPos + 1,str.length());\n}\n else {\n  exp=null;\n}", 
          "type": "InsertBefore", 
          "seed": "int denom0=1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-02 05:05:38.013361696 -0500\n+++ /tmp/GenProg_Defects4J_Lang_7/patches_e3r9/Patch_1427/patched/tmp/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-02 05:26:30.189829775 -0500\n@@ -450,7 +450,6 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n@@ -471,7 +470,10 @@\n \n         if (decPos > -1) {\n \n-            if (expPos > -1) {\n+            if (expPos > str.length()) {\n+\t\t\t\tthrow new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t}\n+\t\t\tif (expPos > -1) {\n                 if (expPos < decPos || expPos > str.length()) {\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n                 }\n@@ -550,7 +552,8 @@\n \n             }\n         } else {\n-            //User doesn't have a preference on the return type, so let's start\n+            int denom0 = 1;\n+\t\t\t//User doesn't have a preference on the return type, so let's start\n             //small and go from there...\n             if (expPos > -1 && expPos < str.length() - 1) {\n                 exp = str.substring(expPos + 1, str.length());\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 485, 
          "faulty": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > -1 && expPos < str.length() - 1) {\n  exp=str.substring(expPos + 1,str.length());\n}\n else {\n  exp=null;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 474, 
          "faulty": "if (expPos > -1) {\n  if (expPos < decPos || expPos > str.length()) {\n    throw new NumberFormatException(str + \" is not a valid number.\");\n  }\n  dec=str.substring(decPos + 1,expPos);\n}\n else {\n  dec=str.substring(decPos + 1);\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 474, 
          "faulty": "if (expPos > -1) {\n  if (expPos < decPos || expPos > str.length()) {\n    throw new NumberFormatException(str + \" is not a valid number.\");\n  }\n  dec=str.substring(decPos + 1,expPos);\n}\n else {\n  dec=str.substring(decPos + 1);\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 587, 
          "faulty": "if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n  return d;\n}", 
          "type": "InsertBefore", 
          "seed": "if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n  return d;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "double x2=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 587, 
          "faulty": "if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n  return d;\n}", 
          "type": "InsertBefore", 
          "seed": "if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n  return d;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 588, 
          "faulty": "return d;", 
          "type": "Replace", 
          "seed": "int i=1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-02 05:05:38.013361696 -0500\n+++ /tmp/GenProg_Defects4J_Lang_7/patches_e3r9/Patch_1572/patched/tmp/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-02 05:28:13.017753560 -0500\n@@ -450,7 +450,6 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n@@ -471,7 +470,13 @@\n \n         if (decPos > -1) {\n \n-            if (expPos > -1) {\n+            if (expPos > str.length()) {\n+\t\t\t\tthrow new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t}\n+\t\t\tif (expPos > str.length()) {\n+\t\t\t\tthrow new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t}\n+\t\t\tif (expPos > -1) {\n                 if (expPos < decPos || expPos > str.length()) {\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n                 }\n@@ -482,7 +487,12 @@\n             mant = str.substring(0, decPos);\n         } else {\n             if (expPos > -1) {\n-                if (expPos > str.length()) {\n+                if (expPos > -1 && expPos < str.length() - 1) {\n+\t\t\t\t\texp = str.substring(expPos + 1, str.length());\n+\t\t\t\t} else {\n+\t\t\t\t\texp = null;\n+\t\t\t\t}\n+\t\t\t\tif (expPos > str.length()) {\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n                 }\n                 mant = str.substring(0, expPos);\n@@ -585,7 +595,13 @@\n                 try {\n                     Double d = createDouble(str);\n                     if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n-                        return d;\n+\t\t\t\t\t\treturn d;\n+\t\t\t\t\t}\n+\t\t\t\t\tif (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n+\t\t\t\t\t\treturn d;\n+\t\t\t\t\t}\n+\t\t\t\t\tif (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n+                        int i = 1;\n                     }\n                 } catch (NumberFormatException nfe) { // NOPMD\n                     // ignore the bad number\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 485, 
          "faulty": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > -1 && expPos < str.length() - 1) {\n  exp=str.substring(expPos + 1,str.length());\n}\n else {\n  exp=null;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 587, 
          "faulty": "if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n  return d;\n}", 
          "type": "InsertBefore", 
          "seed": "if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n  return d;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 474, 
          "faulty": "if (expPos > -1) {\n  if (expPos < decPos || expPos > str.length()) {\n    throw new NumberFormatException(str + \" is not a valid number.\");\n  }\n  dec=str.substring(decPos + 1,expPos);\n}\n else {\n  dec=str.substring(decPos + 1);\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "double x2=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 568, 
          "faulty": "return createLong(str);", 
          "type": "InsertBefore", 
          "seed": "double x1=1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-02 05:05:38.013361696 -0500\n+++ /tmp/GenProg_Defects4J_Lang_7/patches_e3r9/Patch_1548/patched/tmp/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-02 05:27:55.757075299 -0500\n@@ -450,7 +450,6 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n@@ -471,7 +470,10 @@\n \n         if (decPos > -1) {\n \n-            if (expPos > -1) {\n+            if (expPos > str.length()) {\n+\t\t\t\tthrow new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t}\n+\t\t\tif (expPos > -1) {\n                 if (expPos < decPos || expPos > str.length()) {\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n                 }\n@@ -482,7 +484,12 @@\n             mant = str.substring(0, decPos);\n         } else {\n             if (expPos > -1) {\n-                if (expPos > str.length()) {\n+                if (expPos > -1 && expPos < str.length() - 1) {\n+\t\t\t\t\texp = str.substring(expPos + 1, str.length());\n+\t\t\t\t} else {\n+\t\t\t\t\texp = null;\n+\t\t\t\t}\n+\t\t\t\tif (expPos > str.length()) {\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n                 }\n                 mant = str.substring(0, expPos);\n@@ -565,7 +572,8 @@\n                     // ignore the bad number\n                 }\n                 try {\n-                    return createLong(str);\n+                    double x1 = 1;\n+\t\t\t\t\treturn createLong(str);\n                 } catch (NumberFormatException nfe) { // NOPMD\n                     // ignore the bad number\n                 }\n@@ -585,6 +593,9 @@\n                 try {\n                     Double d = createDouble(str);\n                     if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n+\t\t\t\t\t\treturn d;\n+\t\t\t\t\t}\n+\t\t\t\t\tif (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                         return d;\n                     }\n                 } catch (NumberFormatException nfe) { // NOPMD\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 485, 
          "faulty": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > -1 && expPos < str.length() - 1) {\n  exp=str.substring(expPos + 1,str.length());\n}\n else {\n  exp=null;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 485, 
          "faulty": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > -1 && expPos < str.length() - 1) {\n  exp=str.substring(expPos + 1,str.length());\n}\n else {\n  exp=null;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "double x2=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 486, 
          "faulty": "throw new NumberFormatException(str + \" is not a valid number.\");", 
          "type": "InsertBefore", 
          "seed": "char[] chars=str.toCharArray();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-02 05:05:38.013361696 -0500\n+++ /tmp/GenProg_Defects4J_Lang_7/patches_e3r9/Patch_1347/patched/tmp/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-02 05:25:34.567697901 -0500\n@@ -450,7 +450,6 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n@@ -482,8 +481,19 @@\n             mant = str.substring(0, decPos);\n         } else {\n             if (expPos > -1) {\n-                if (expPos > str.length()) {\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+                if (expPos > -1 && expPos < str.length() - 1) {\n+\t\t\t\t\texp = str.substring(expPos + 1, str.length());\n+\t\t\t\t} else {\n+\t\t\t\t\texp = null;\n+\t\t\t\t}\n+\t\t\t\tif (expPos > -1 && expPos < str.length() - 1) {\n+\t\t\t\t\texp = str.substring(expPos + 1, str.length());\n+\t\t\t\t} else {\n+\t\t\t\t\texp = null;\n+\t\t\t\t}\n+\t\t\t\tif (expPos > str.length()) {\n+                    char[] chars = str.toCharArray();\n+\t\t\t\t\tthrow new NumberFormatException(str + \" is not a valid number.\");\n                 }\n                 mant = str.substring(0, expPos);\n             } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "double x2=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 535, 
          "faulty": "Double d=NumberUtils.createDouble(numeric);", 
          "type": "InsertBefore", 
          "seed": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\")|| str.startsWith(\"-0X\")) {\n  int hexDigits=str.length() - 2;\n  if (str.startsWith(\"-\")) {\n    hexDigits--;\n  }\n  if (hexDigits > 8) {\n    return createLong(str);\n  }\n  return createInteger(str);\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-02 05:05:38.013361696 -0500\n+++ /tmp/GenProg_Defects4J_Lang_7/patches_e3r9/Patch_1295/patched/tmp/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-02 05:24:59.146318175 -0500\n@@ -450,7 +450,6 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n@@ -532,7 +531,19 @@\n                 case 'd' :\n                 case 'D' :\n                     try {\n-                        Double d = NumberUtils.createDouble(numeric);\n+                        if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")\n+\t\t\t\t\t\t\t\t|| str.startsWith(\"0X\")\n+\t\t\t\t\t\t\t\t|| str.startsWith(\"-0X\")) {\n+\t\t\t\t\t\t\tint hexDigits = str.length() - 2;\n+\t\t\t\t\t\t\tif (str.startsWith(\"-\")) {\n+\t\t\t\t\t\t\t\thexDigits--;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tif (hexDigits > 8) {\n+\t\t\t\t\t\t\t\treturn createLong(str);\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\treturn createInteger(str);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tDouble d = NumberUtils.createDouble(numeric);\n                         if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {\n                             return d;\n                         }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 485, 
          "faulty": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > -1 && expPos < str.length() - 1) {\n  exp=str.substring(expPos + 1,str.length());\n}\n else {\n  exp=null;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 474, 
          "faulty": "if (expPos > -1) {\n  if (expPos < decPos || expPos > str.length()) {\n    throw new NumberFormatException(str + \" is not a valid number.\");\n  }\n  dec=str.substring(decPos + 1,expPos);\n}\n else {\n  dec=str.substring(decPos + 1);\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 485, 
          "faulty": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > -1 && expPos < str.length() - 1) {\n  exp=str.substring(expPos + 1,str.length());\n}\n else {\n  exp=null;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 474, 
          "faulty": "if (expPos > -1) {\n  if (expPos < decPos || expPos > str.length()) {\n    throw new NumberFormatException(str + \" is not a valid number.\");\n  }\n  dec=str.substring(decPos + 1,expPos);\n}\n else {\n  dec=str.substring(decPos + 1);\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "double x2=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 456, 
          "faulty": "int hexDigits=str.length() - 2;", 
          "type": "InsertBefore", 
          "seed": "int i=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 485, 
          "faulty": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > -1 && expPos < str.length() - 1) {\n  exp=str.substring(expPos + 1,str.length());\n}\n else {\n  exp=null;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 587, 
          "faulty": "if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n  return d;\n}", 
          "type": "InsertBefore", 
          "seed": "if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n  return d;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "double x2=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 587, 
          "faulty": "if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n  return d;\n}", 
          "type": "InsertBefore", 
          "seed": "if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n  return d;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 588, 
          "faulty": "return d;", 
          "type": "Replace", 
          "seed": "int i=1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-02 05:05:38.013361696 -0500\n+++ /tmp/GenProg_Defects4J_Lang_7/patches_e3r9/Patch_1584/patched/tmp/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-02 05:28:21.582088414 -0500\n@@ -450,10 +450,10 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n-            int hexDigits = str.length() - 2; // drop 0x\n+            int i = 1;\n+\t\t\tint hexDigits = str.length() - 2; // drop 0x\n             if (str.startsWith(\"-\")) { // drop -\n                 hexDigits--;\n             }\n@@ -471,7 +471,13 @@\n \n         if (decPos > -1) {\n \n-            if (expPos > -1) {\n+            if (expPos > str.length()) {\n+\t\t\t\tthrow new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t}\n+\t\t\tif (expPos > str.length()) {\n+\t\t\t\tthrow new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t}\n+\t\t\tif (expPos > -1) {\n                 if (expPos < decPos || expPos > str.length()) {\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n                 }\n@@ -482,7 +488,22 @@\n             mant = str.substring(0, decPos);\n         } else {\n             if (expPos > -1) {\n-                if (expPos > str.length()) {\n+                if (expPos > -1 && expPos < str.length() - 1) {\n+\t\t\t\t\texp = str.substring(expPos + 1, str.length());\n+\t\t\t\t} else {\n+\t\t\t\t\texp = null;\n+\t\t\t\t}\n+\t\t\t\tif (expPos > -1 && expPos < str.length() - 1) {\n+\t\t\t\t\texp = str.substring(expPos + 1, str.length());\n+\t\t\t\t} else {\n+\t\t\t\t\texp = null;\n+\t\t\t\t}\n+\t\t\t\tif (expPos > -1 && expPos < str.length() - 1) {\n+\t\t\t\t\texp = str.substring(expPos + 1, str.length());\n+\t\t\t\t} else {\n+\t\t\t\t\texp = null;\n+\t\t\t\t}\n+\t\t\t\tif (expPos > str.length()) {\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n                 }\n                 mant = str.substring(0, expPos);\n@@ -585,7 +606,13 @@\n                 try {\n                     Double d = createDouble(str);\n                     if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n-                        return d;\n+\t\t\t\t\t\treturn d;\n+\t\t\t\t\t}\n+\t\t\t\t\tif (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n+\t\t\t\t\t\treturn d;\n+\t\t\t\t\t}\n+\t\t\t\t\tif (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n+                        int i = 1;\n                     }\n                 } catch (NumberFormatException nfe) { // NOPMD\n                     // ignore the bad number\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 485, 
          "faulty": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > -1 && expPos < str.length() - 1) {\n  exp=str.substring(expPos + 1,str.length());\n}\n else {\n  exp=null;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 474, 
          "faulty": "if (expPos > -1) {\n  if (expPos < decPos || expPos > str.length()) {\n    throw new NumberFormatException(str + \" is not a valid number.\");\n  }\n  dec=str.substring(decPos + 1,expPos);\n}\n else {\n  dec=str.substring(decPos + 1);\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 485, 
          "faulty": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > -1 && expPos < str.length() - 1) {\n  exp=str.substring(expPos + 1,str.length());\n}\n else {\n  exp=null;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 474, 
          "faulty": "if (expPos > -1) {\n  if (expPos < decPos || expPos > str.length()) {\n    throw new NumberFormatException(str + \" is not a valid number.\");\n  }\n  dec=str.substring(decPos + 1,expPos);\n}\n else {\n  dec=str.substring(decPos + 1);\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "double x2=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 587, 
          "faulty": "if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n  return d;\n}", 
          "type": "InsertBefore", 
          "seed": "if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n  return d;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 474, 
          "faulty": "if (expPos > -1) {\n  if (expPos < decPos || expPos > str.length()) {\n    throw new NumberFormatException(str + \" is not a valid number.\");\n  }\n  dec=str.substring(decPos + 1,expPos);\n}\n else {\n  dec=str.substring(decPos + 1);\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "double x2=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 555, 
          "faulty": "if (expPos > -1 && expPos < str.length() - 1) {\n  exp=str.substring(expPos + 1,str.length());\n}\n else {\n  exp=null;\n}", 
          "type": "InsertBefore", 
          "seed": "int denom0=1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-02 05:05:38.013361696 -0500\n+++ /tmp/GenProg_Defects4J_Lang_7/patches_e3r9/Patch_1416/patched/tmp/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-02 05:26:23.013556859 -0500\n@@ -450,7 +450,6 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n@@ -471,7 +470,16 @@\n \n         if (decPos > -1) {\n \n-            if (expPos > -1) {\n+            if (expPos > str.length()) {\n+\t\t\t\tthrow new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t}\n+\t\t\tif (expPos > str.length()) {\n+\t\t\t\tthrow new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t}\n+\t\t\tif (expPos > str.length()) {\n+\t\t\t\tthrow new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t}\n+\t\t\tif (expPos > -1) {\n                 if (expPos < decPos || expPos > str.length()) {\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n                 }\n@@ -482,7 +490,17 @@\n             mant = str.substring(0, decPos);\n         } else {\n             if (expPos > -1) {\n-                if (expPos > str.length()) {\n+                if (expPos > -1 && expPos < str.length() - 1) {\n+\t\t\t\t\texp = str.substring(expPos + 1, str.length());\n+\t\t\t\t} else {\n+\t\t\t\t\texp = null;\n+\t\t\t\t}\n+\t\t\t\tif (expPos > -1 && expPos < str.length() - 1) {\n+\t\t\t\t\texp = str.substring(expPos + 1, str.length());\n+\t\t\t\t} else {\n+\t\t\t\t\texp = null;\n+\t\t\t\t}\n+\t\t\t\tif (expPos > str.length()) {\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n                 }\n                 mant = str.substring(0, expPos);\n@@ -550,7 +568,8 @@\n \n             }\n         } else {\n-            //User doesn't have a preference on the return type, so let's start\n+            int denom0 = 1;\n+\t\t\t//User doesn't have a preference on the return type, so let's start\n             //small and go from there...\n             if (expPos > -1 && expPos < str.length() - 1) {\n                 exp = str.substring(expPos + 1, str.length());\n@@ -585,6 +604,9 @@\n                 try {\n                     Double d = createDouble(str);\n                     if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n+\t\t\t\t\t\treturn d;\n+\t\t\t\t\t}\n+\t\t\t\t\tif (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                         return d;\n                     }\n                 } catch (NumberFormatException nfe) { // NOPMD\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "double x2=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 474, 
          "faulty": "if (expPos > -1) {\n  if (expPos < decPos || expPos > str.length()) {\n    throw new NumberFormatException(str + \" is not a valid number.\");\n  }\n  dec=str.substring(decPos + 1,expPos);\n}\n else {\n  dec=str.substring(decPos + 1);\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "double x2=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 460, 
          "faulty": "if (hexDigits > 8) {\n  return createLong(str);\n}", 
          "type": "InsertBefore", 
          "seed": "int pos=str.indexOf('.');"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-02 05:05:38.013361696 -0500\n+++ /tmp/GenProg_Defects4J_Lang_7/patches_e3r9/Patch_1366/patched/tmp/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-02 05:25:47.916213146 -0500\n@@ -450,14 +450,14 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n             if (str.startsWith(\"-\")) { // drop -\n                 hexDigits--;\n             }\n-            if (hexDigits > 8) { // too many for an int\n+            int pos = str.indexOf('.');\n+\t\t\tif (hexDigits > 8) { // too many for an int\n                 return createLong(str);\n             }\n             return createInteger(str);\n@@ -471,7 +471,10 @@\n \n         if (decPos > -1) {\n \n-            if (expPos > -1) {\n+            if (expPos > str.length()) {\n+\t\t\t\tthrow new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t}\n+\t\t\tif (expPos > -1) {\n                 if (expPos < decPos || expPos > str.length()) {\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 485, 
          "faulty": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > -1 && expPos < str.length() - 1) {\n  exp=str.substring(expPos + 1,str.length());\n}\n else {\n  exp=null;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 485, 
          "faulty": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > -1 && expPos < str.length() - 1) {\n  exp=str.substring(expPos + 1,str.length());\n}\n else {\n  exp=null;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "double x2=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 587, 
          "faulty": "if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n  return d;\n}", 
          "type": "InsertBefore", 
          "seed": "if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n  return d;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 535, 
          "faulty": "Double d=NumberUtils.createDouble(numeric);", 
          "type": "InsertBefore", 
          "seed": "if (expPos > -1) {\n  if (expPos < decPos || expPos > str.length()) {\n    throw new NumberFormatException(str + \" is not a valid number.\");\n  }\n  dec=str.substring(decPos + 1,expPos);\n}\n else {\n  dec=str.substring(decPos + 1);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return toShort(str,(short)0);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-02 05:05:38.013361696 -0500\n+++ /tmp/GenProg_Defects4J_Lang_7/patches_e3r9/Patch_1375/patched/tmp/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-02 05:25:54.156453191 -0500\n@@ -450,7 +450,6 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n@@ -482,7 +481,17 @@\n             mant = str.substring(0, decPos);\n         } else {\n             if (expPos > -1) {\n-                if (expPos > str.length()) {\n+                if (expPos > -1 && expPos < str.length() - 1) {\n+\t\t\t\t\texp = str.substring(expPos + 1, str.length());\n+\t\t\t\t} else {\n+\t\t\t\t\texp = null;\n+\t\t\t\t}\n+\t\t\t\tif (expPos > -1 && expPos < str.length() - 1) {\n+\t\t\t\t\texp = str.substring(expPos + 1, str.length());\n+\t\t\t\t} else {\n+\t\t\t\t\texp = null;\n+\t\t\t\t}\n+\t\t\t\tif (expPos > str.length()) {\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n                 }\n                 mant = str.substring(0, expPos);\n@@ -532,7 +541,16 @@\n                 case 'd' :\n                 case 'D' :\n                     try {\n-                        Double d = NumberUtils.createDouble(numeric);\n+                        if (expPos > -1) {\n+\t\t\t\t\t\t\tif (expPos < decPos || expPos > str.length()) {\n+\t\t\t\t\t\t\t\tthrow new NumberFormatException(str\n+\t\t\t\t\t\t\t\t\t\t+ \" is not a valid number.\");\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tdec = str.substring(decPos + 1, expPos);\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tdec = str.substring(decPos + 1);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tDouble d = NumberUtils.createDouble(numeric);\n                         if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {\n                             return d;\n                         }\n@@ -585,6 +603,9 @@\n                 try {\n                     Double d = createDouble(str);\n                     if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n+\t\t\t\t\t\treturn d;\n+\t\t\t\t\t}\n+\t\t\t\t\tif (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                         return d;\n                     }\n                 } catch (NumberFormatException nfe) { // NOPMD\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 456, 
          "faulty": "int hexDigits=str.length() - 2;", 
          "type": "InsertBefore", 
          "seed": "int i=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 474, 
          "faulty": "if (expPos > -1) {\n  if (expPos < decPos || expPos > str.length()) {\n    throw new NumberFormatException(str + \" is not a valid number.\");\n  }\n  dec=str.substring(decPos + 1,expPos);\n}\n else {\n  dec=str.substring(decPos + 1);\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "double x2=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-02 05:05:38.013361696 -0500\n+++ /tmp/GenProg_Defects4J_Lang_7/patches_e3r9/Patch_1085/patched/tmp/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-02 05:22:27.412689391 -0500\n@@ -450,10 +450,10 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n-            int hexDigits = str.length() - 2; // drop 0x\n+            int i = 1;\n+\t\t\tint hexDigits = str.length() - 2; // drop 0x\n             if (str.startsWith(\"-\")) { // drop -\n                 hexDigits--;\n             }\n@@ -471,7 +471,10 @@\n \n         if (decPos > -1) {\n \n-            if (expPos > -1) {\n+            if (expPos > str.length()) {\n+\t\t\t\tthrow new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t}\n+\t\t\tif (expPos > -1) {\n                 if (expPos < decPos || expPos > str.length()) {\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 485, 
          "faulty": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > -1 && expPos < str.length() - 1) {\n  exp=str.substring(expPos + 1,str.length());\n}\n else {\n  exp=null;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 474, 
          "faulty": "if (expPos > -1) {\n  if (expPos < decPos || expPos > str.length()) {\n    throw new NumberFormatException(str + \" is not a valid number.\");\n  }\n  dec=str.substring(decPos + 1,expPos);\n}\n else {\n  dec=str.substring(decPos + 1);\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 485, 
          "faulty": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > -1 && expPos < str.length() - 1) {\n  exp=str.substring(expPos + 1,str.length());\n}\n else {\n  exp=null;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "double x2=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 587, 
          "faulty": "if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n  return d;\n}", 
          "type": "InsertBefore", 
          "seed": "if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n  return d;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 525, 
          "faulty": "return f;", 
          "type": "InsertBefore", 
          "seed": "if (str == null) {\n  throw new IllegalArgumentException(\"The string must not be null\");\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-02 05:05:38.013361696 -0500\n+++ /tmp/GenProg_Defects4J_Lang_7/patches_e3r9/Patch_1378/patched/tmp/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-02 05:25:55.740514044 -0500\n@@ -450,7 +450,6 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n@@ -471,7 +470,10 @@\n \n         if (decPos > -1) {\n \n-            if (expPos > -1) {\n+            if (expPos > str.length()) {\n+\t\t\t\tthrow new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t}\n+\t\t\tif (expPos > -1) {\n                 if (expPos < decPos || expPos > str.length()) {\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n                 }\n@@ -482,7 +484,17 @@\n             mant = str.substring(0, decPos);\n         } else {\n             if (expPos > -1) {\n-                if (expPos > str.length()) {\n+                if (expPos > -1 && expPos < str.length() - 1) {\n+\t\t\t\t\texp = str.substring(expPos + 1, str.length());\n+\t\t\t\t} else {\n+\t\t\t\t\texp = null;\n+\t\t\t\t}\n+\t\t\t\tif (expPos > -1 && expPos < str.length() - 1) {\n+\t\t\t\t\texp = str.substring(expPos + 1, str.length());\n+\t\t\t\t} else {\n+\t\t\t\t\texp = null;\n+\t\t\t\t}\n+\t\t\t\tif (expPos > str.length()) {\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n                 }\n                 mant = str.substring(0, expPos);\n@@ -520,7 +532,11 @@\n                     try {\n                         Float f = NumberUtils.createFloat(numeric);\n                         if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n-                            //If it's too big for a float or the float value = 0 and the string\n+                            if (str == null) {\n+\t\t\t\t\t\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\t\t\t\t\t\"The string must not be null\");\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t//If it's too big for a float or the float value = 0 and the string\n                             //has non-zeros in it, then float does not have the precision we want\n                             return f;\n                         }\n@@ -585,6 +601,9 @@\n                 try {\n                     Double d = createDouble(str);\n                     if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n+\t\t\t\t\t\treturn d;\n+\t\t\t\t\t}\n+\t\t\t\t\tif (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                         return d;\n                     }\n                 } catch (NumberFormatException nfe) { // NOPMD\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 474, 
          "faulty": "if (expPos > -1) {\n  if (expPos < decPos || expPos > str.length()) {\n    throw new NumberFormatException(str + \" is not a valid number.\");\n  }\n  dec=str.substring(decPos + 1,expPos);\n}\n else {\n  dec=str.substring(decPos + 1);\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 474, 
          "faulty": "if (expPos > -1) {\n  if (expPos < decPos || expPos > str.length()) {\n    throw new NumberFormatException(str + \" is not a valid number.\");\n  }\n  dec=str.substring(decPos + 1,expPos);\n}\n else {\n  dec=str.substring(decPos + 1);\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 456, 
          "faulty": "int hexDigits=str.length() - 2;", 
          "type": "InsertBefore", 
          "seed": "int i=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "double x2=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 563, 
          "faulty": "return createInteger(str);", 
          "type": "InsertBefore", 
          "seed": "int numer0=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-02 05:05:38.013361696 -0500\n+++ /tmp/GenProg_Defects4J_Lang_7/patches_e3r9/Patch_1255/patched/tmp/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-02 05:24:33.017287577 -0500\n@@ -450,10 +450,10 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n-            int hexDigits = str.length() - 2; // drop 0x\n+            int i = 1;\n+\t\t\tint hexDigits = str.length() - 2; // drop 0x\n             if (str.startsWith(\"-\")) { // drop -\n                 hexDigits--;\n             }\n@@ -471,7 +471,13 @@\n \n         if (decPos > -1) {\n \n-            if (expPos > -1) {\n+            if (expPos > str.length()) {\n+\t\t\t\tthrow new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t}\n+\t\t\tif (expPos > str.length()) {\n+\t\t\t\tthrow new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t}\n+\t\t\tif (expPos > -1) {\n                 if (expPos < decPos || expPos > str.length()) {\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n                 }\n@@ -560,7 +566,8 @@\n             if (dec == null && exp == null) {\n                 //Must be an int,long,bigint\n                 try {\n-                    return createInteger(str);\n+                    int numer0 = 0;\n+\t\t\t\t\treturn createInteger(str);\n                 } catch (NumberFormatException nfe) { // NOPMD\n                     // ignore the bad number\n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 474, 
          "faulty": "if (expPos > -1) {\n  if (expPos < decPos || expPos > str.length()) {\n    throw new NumberFormatException(str + \" is not a valid number.\");\n  }\n  dec=str.substring(decPos + 1,expPos);\n}\n else {\n  dec=str.substring(decPos + 1);\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "double x2=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 474, 
          "faulty": "if (expPos > -1) {\n  if (expPos < decPos || expPos > str.length()) {\n    throw new NumberFormatException(str + \" is not a valid number.\");\n  }\n  dec=str.substring(decPos + 1,expPos);\n}\n else {\n  dec=str.substring(decPos + 1);\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "double x2=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 456, 
          "faulty": "int hexDigits=str.length() - 2;", 
          "type": "InsertBefore", 
          "seed": "int i=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 485, 
          "faulty": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > -1 && expPos < str.length() - 1) {\n  exp=str.substring(expPos + 1,str.length());\n}\n else {\n  exp=null;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 485, 
          "faulty": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > -1 && expPos < str.length() - 1) {\n  exp=str.substring(expPos + 1,str.length());\n}\n else {\n  exp=null;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "double x2=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 485, 
          "faulty": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}", 
          "type": "InsertBefore", 
          "seed": "int i=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 587, 
          "faulty": "if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n  return d;\n}", 
          "type": "InsertBefore", 
          "seed": "mant=str.substring(0,expPos);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-02 05:05:38.013361696 -0500\n+++ /tmp/GenProg_Defects4J_Lang_7/patches_e3r9/Patch_1352/patched/tmp/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-02 05:25:37.699819019 -0500\n@@ -450,10 +450,10 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n-            int hexDigits = str.length() - 2; // drop 0x\n+            int i = 1;\n+\t\t\tint hexDigits = str.length() - 2; // drop 0x\n             if (str.startsWith(\"-\")) { // drop -\n                 hexDigits--;\n             }\n@@ -471,7 +471,13 @@\n \n         if (decPos > -1) {\n \n-            if (expPos > -1) {\n+            if (expPos > str.length()) {\n+\t\t\t\tthrow new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t}\n+\t\t\tif (expPos > str.length()) {\n+\t\t\t\tthrow new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t}\n+\t\t\tif (expPos > -1) {\n                 if (expPos < decPos || expPos > str.length()) {\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n                 }\n@@ -482,7 +488,18 @@\n             mant = str.substring(0, decPos);\n         } else {\n             if (expPos > -1) {\n-                if (expPos > str.length()) {\n+                if (expPos > -1 && expPos < str.length() - 1) {\n+\t\t\t\t\texp = str.substring(expPos + 1, str.length());\n+\t\t\t\t} else {\n+\t\t\t\t\texp = null;\n+\t\t\t\t}\n+\t\t\t\tif (expPos > -1 && expPos < str.length() - 1) {\n+\t\t\t\t\texp = str.substring(expPos + 1, str.length());\n+\t\t\t\t} else {\n+\t\t\t\t\texp = null;\n+\t\t\t\t}\n+\t\t\t\tint i = 1;\n+\t\t\t\tif (expPos > str.length()) {\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n                 }\n                 mant = str.substring(0, expPos);\n@@ -584,7 +601,8 @@\n                 }\n                 try {\n                     Double d = createDouble(str);\n-                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n+                    mant = str.substring(0, expPos);\n+\t\t\t\t\tif (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                         return d;\n                     }\n                 } catch (NumberFormatException nfe) { // NOPMD\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 474, 
          "faulty": "if (expPos > -1) {\n  if (expPos < decPos || expPos > str.length()) {\n    throw new NumberFormatException(str + \" is not a valid number.\");\n  }\n  dec=str.substring(decPos + 1,expPos);\n}\n else {\n  dec=str.substring(decPos + 1);\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "double x2=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 474, 
          "faulty": "if (expPos > -1) {\n  if (expPos < decPos || expPos > str.length()) {\n    throw new NumberFormatException(str + \" is not a valid number.\");\n  }\n  dec=str.substring(decPos + 1,expPos);\n}\n else {\n  dec=str.substring(decPos + 1);\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "double x2=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 456, 
          "faulty": "int hexDigits=str.length() - 2;", 
          "type": "InsertBefore", 
          "seed": "int i=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 485, 
          "faulty": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > -1 && expPos < str.length() - 1) {\n  exp=str.substring(expPos + 1,str.length());\n}\n else {\n  exp=null;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 485, 
          "faulty": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > -1 && expPos < str.length() - 1) {\n  exp=str.substring(expPos + 1,str.length());\n}\n else {\n  exp=null;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "double x2=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 474, 
          "faulty": "if (expPos > -1) {\n  if (expPos < decPos || expPos > str.length()) {\n    throw new NumberFormatException(str + \" is not a valid number.\");\n  }\n  dec=str.substring(decPos + 1,expPos);\n}\n else {\n  dec=str.substring(decPos + 1);\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "double x2=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 457, 
          "faulty": "if (str.startsWith(\"-\")) {\n  hexDigits--;\n}", 
          "type": "InsertBefore", 
          "seed": "if (hexDigits > 8) {\n  return createLong(str);\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-02 05:05:38.013361696 -0500\n+++ /tmp/GenProg_Defects4J_Lang_7/patches_e3r9/Patch_1444/patched/tmp/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-02 05:26:41.126244581 -0500\n@@ -450,11 +450,14 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n-            int hexDigits = str.length() - 2; // drop 0x\n-            if (str.startsWith(\"-\")) { // drop -\n+            int i = 1;\n+\t\t\tint hexDigits = str.length() - 2; // drop 0x\n+            if (hexDigits > 8) {\n+\t\t\t\treturn createLong(str);\n+\t\t\t}\n+\t\t\tif (str.startsWith(\"-\")) { // drop -\n                 hexDigits--;\n             }\n             if (hexDigits > 8) { // too many for an int\n@@ -471,7 +474,16 @@\n \n         if (decPos > -1) {\n \n-            if (expPos > -1) {\n+            if (expPos > str.length()) {\n+\t\t\t\tthrow new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t}\n+\t\t\tif (expPos > str.length()) {\n+\t\t\t\tthrow new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t}\n+\t\t\tif (expPos > str.length()) {\n+\t\t\t\tthrow new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t}\n+\t\t\tif (expPos > -1) {\n                 if (expPos < decPos || expPos > str.length()) {\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n                 }\n@@ -482,7 +494,17 @@\n             mant = str.substring(0, decPos);\n         } else {\n             if (expPos > -1) {\n-                if (expPos > str.length()) {\n+                if (expPos > -1 && expPos < str.length() - 1) {\n+\t\t\t\t\texp = str.substring(expPos + 1, str.length());\n+\t\t\t\t} else {\n+\t\t\t\t\texp = null;\n+\t\t\t\t}\n+\t\t\t\tif (expPos > -1 && expPos < str.length() - 1) {\n+\t\t\t\t\texp = str.substring(expPos + 1, str.length());\n+\t\t\t\t} else {\n+\t\t\t\t\texp = null;\n+\t\t\t\t}\n+\t\t\t\tif (expPos > str.length()) {\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n                 }\n                 mant = str.substring(0, expPos);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 485, 
          "faulty": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > -1 && expPos < str.length() - 1) {\n  exp=str.substring(expPos + 1,str.length());\n}\n else {\n  exp=null;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 456, 
          "faulty": "int hexDigits=str.length() - 2;", 
          "type": "InsertBefore", 
          "seed": "int i=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 474, 
          "faulty": "if (expPos > -1) {\n  if (expPos < decPos || expPos > str.length()) {\n    throw new NumberFormatException(str + \" is not a valid number.\");\n  }\n  dec=str.substring(decPos + 1,expPos);\n}\n else {\n  dec=str.substring(decPos + 1);\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 474, 
          "faulty": "if (expPos > -1) {\n  if (expPos < decPos || expPos > str.length()) {\n    throw new NumberFormatException(str + \" is not a valid number.\");\n  }\n  dec=str.substring(decPos + 1,expPos);\n}\n else {\n  dec=str.substring(decPos + 1);\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "double x2=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-02 05:05:38.013361696 -0500\n+++ /tmp/GenProg_Defects4J_Lang_7/patches_e3r9/Patch_1232/patched/tmp/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-02 05:24:16.604635313 -0500\n@@ -450,10 +450,10 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n-            int hexDigits = str.length() - 2; // drop 0x\n+            int i = 1;\n+\t\t\tint hexDigits = str.length() - 2; // drop 0x\n             if (str.startsWith(\"-\")) { // drop -\n                 hexDigits--;\n             }\n@@ -471,7 +471,13 @@\n \n         if (decPos > -1) {\n \n-            if (expPos > -1) {\n+            if (expPos > str.length()) {\n+\t\t\t\tthrow new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t}\n+\t\t\tif (expPos > str.length()) {\n+\t\t\t\tthrow new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t}\n+\t\t\tif (expPos > -1) {\n                 if (expPos < decPos || expPos > str.length()) {\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n                 }\n@@ -482,7 +488,12 @@\n             mant = str.substring(0, decPos);\n         } else {\n             if (expPos > -1) {\n-                if (expPos > str.length()) {\n+                if (expPos > -1 && expPos < str.length() - 1) {\n+\t\t\t\t\texp = str.substring(expPos + 1, str.length());\n+\t\t\t\t} else {\n+\t\t\t\t\texp = null;\n+\t\t\t\t}\n+\t\t\t\tif (expPos > str.length()) {\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n                 }\n                 mant = str.substring(0, expPos);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 456, 
          "faulty": "int hexDigits=str.length() - 2;", 
          "type": "InsertBefore", 
          "seed": "int i=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 485, 
          "faulty": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > -1 && expPos < str.length() - 1) {\n  exp=str.substring(expPos + 1,str.length());\n}\n else {\n  exp=null;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "double x2=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 485, 
          "faulty": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}", 
          "type": "InsertBefore", 
          "seed": "int i=1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-02 05:05:38.013361696 -0500\n+++ /tmp/GenProg_Defects4J_Lang_7/patches_e3r9/Patch_1260/patched/tmp/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-02 05:24:36.217414428 -0500\n@@ -450,10 +450,10 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n-            int hexDigits = str.length() - 2; // drop 0x\n+            int i = 1;\n+\t\t\tint hexDigits = str.length() - 2; // drop 0x\n             if (str.startsWith(\"-\")) { // drop -\n                 hexDigits--;\n             }\n@@ -482,7 +482,13 @@\n             mant = str.substring(0, decPos);\n         } else {\n             if (expPos > -1) {\n-                if (expPos > str.length()) {\n+                if (expPos > -1 && expPos < str.length() - 1) {\n+\t\t\t\t\texp = str.substring(expPos + 1, str.length());\n+\t\t\t\t} else {\n+\t\t\t\t\texp = null;\n+\t\t\t\t}\n+\t\t\t\tint i = 1;\n+\t\t\t\tif (expPos > str.length()) {\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n                 }\n                 mant = str.substring(0, expPos);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 456, 
          "faulty": "int hexDigits=str.length() - 2;", 
          "type": "InsertBefore", 
          "seed": "int i=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 474, 
          "faulty": "if (expPos > -1) {\n  if (expPos < decPos || expPos > str.length()) {\n    throw new NumberFormatException(str + \" is not a valid number.\");\n  }\n  dec=str.substring(decPos + 1,expPos);\n}\n else {\n  dec=str.substring(decPos + 1);\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 474, 
          "faulty": "if (expPos > -1) {\n  if (expPos < decPos || expPos > str.length()) {\n    throw new NumberFormatException(str + \" is not a valid number.\");\n  }\n  dec=str.substring(decPos + 1,expPos);\n}\n else {\n  dec=str.substring(decPos + 1);\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "double x2=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 514, 
          "faulty": "return createBigInteger(numeric);", 
          "type": "InsertBefore", 
          "seed": "dec=null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-02 05:05:38.013361696 -0500\n+++ /tmp/GenProg_Defects4J_Lang_7/patches_e3r9/Patch_1214/patched/tmp/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-02 05:24:04.112175260 -0500\n@@ -450,10 +450,10 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n-            int hexDigits = str.length() - 2; // drop 0x\n+            int i = 1;\n+\t\t\tint hexDigits = str.length() - 2; // drop 0x\n             if (str.startsWith(\"-\")) { // drop -\n                 hexDigits--;\n             }\n@@ -471,7 +471,13 @@\n \n         if (decPos > -1) {\n \n-            if (expPos > -1) {\n+            if (expPos > str.length()) {\n+\t\t\t\tthrow new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t}\n+\t\t\tif (expPos > str.length()) {\n+\t\t\t\tthrow new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t}\n+\t\t\tif (expPos > -1) {\n                 if (expPos < decPos || expPos > str.length()) {\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n                 }\n@@ -511,7 +517,8 @@\n                         } catch (NumberFormatException nfe) { // NOPMD\n                             // Too big for a long\n                         }\n-                        return createBigInteger(numeric);\n+                        dec = null;\n+\t\t\t\t\t\treturn createBigInteger(numeric);\n \n                     }\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 456, 
          "faulty": "int hexDigits=str.length() - 2;", 
          "type": "InsertBefore", 
          "seed": "int i=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "double x2=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-02 05:05:38.013361696 -0500\n+++ /tmp/GenProg_Defects4J_Lang_7/patches_e3r9/Patch_988/patched/tmp/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-02 05:21:13.098119967 -0500\n@@ -450,10 +450,10 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n-            int hexDigits = str.length() - 2; // drop 0x\n+            int i = 1;\n+\t\t\tint hexDigits = str.length() - 2; // drop 0x\n             if (str.startsWith(\"-\")) { // drop -\n                 hexDigits--;\n             }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "double x2=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 458, 
          "faulty": "hexDigits--;", 
          "type": "Replace", 
          "seed": "int k=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-02 05:05:38.013361696 -0500\n+++ /tmp/GenProg_Defects4J_Lang_7/patches_e3r9/Patch_1120/patched/tmp/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-02 05:22:52.709564763 -0500\n@@ -450,12 +450,11 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n             if (str.startsWith(\"-\")) { // drop -\n-                hexDigits--;\n+                int k = 0;\n             }\n             if (hexDigits > 8) { // too many for an int\n                 return createLong(str);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 485, 
          "faulty": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > -1 && expPos < str.length() - 1) {\n  exp=str.substring(expPos + 1,str.length());\n}\n else {\n  exp=null;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 474, 
          "faulty": "if (expPos > -1) {\n  if (expPos < decPos || expPos > str.length()) {\n    throw new NumberFormatException(str + \" is not a valid number.\");\n  }\n  dec=str.substring(decPos + 1,expPos);\n}\n else {\n  dec=str.substring(decPos + 1);\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 485, 
          "faulty": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > -1 && expPos < str.length() - 1) {\n  exp=str.substring(expPos + 1,str.length());\n}\n else {\n  exp=null;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 485, 
          "faulty": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > -1 && expPos < str.length() - 1) {\n  exp=str.substring(expPos + 1,str.length());\n}\n else {\n  exp=null;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 587, 
          "faulty": "if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n  return d;\n}", 
          "type": "InsertBefore", 
          "seed": "if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n  return d;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "double x2=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 555, 
          "faulty": "if (expPos > -1 && expPos < str.length() - 1) {\n  exp=str.substring(expPos + 1,str.length());\n}\n else {\n  exp=null;\n}", 
          "type": "InsertBefore", 
          "seed": "int denom0=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return -1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java", 
          "line": 231, 
          "faulty": "testObjectOutputStream=new ObjectOutputStream(new ByteArrayOutputStream());", 
          "type": "Delete", 
          "seed": "return listeners.toArray(prototypeArray);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java\t2018-12-02 05:05:34.361361824 -0500\n+++ /tmp/GenProg_Defects4J_Lang_7/patches_e3r9/Patch_1567/patched/tmp/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java\t2018-12-02 05:28:09.869630197 -0500\n@@ -227,8 +227,6 @@\n                 testObjectOutputStream.writeObject(listener);\n                 serializableListeners.add(listener);\n             } catch (IOException exception) {\n-                //recreate test stream in case of indeterminate state\n-                testObjectOutputStream = new ObjectOutputStream(new ByteArrayOutputStream());\n             }\n         }\n         /*\n\n\n--- /tmp/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-02 05:05:38.013361696 -0500\n+++ /tmp/GenProg_Defects4J_Lang_7/patches_e3r9/Patch_1567/patched/tmp/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-02 05:28:09.869630197 -0500\n@@ -450,7 +450,6 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n@@ -471,7 +470,10 @@\n \n         if (decPos > -1) {\n \n-            if (expPos > -1) {\n+            if (expPos > str.length()) {\n+\t\t\t\tthrow new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t}\n+\t\t\tif (expPos > -1) {\n                 if (expPos < decPos || expPos > str.length()) {\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n                 }\n@@ -482,7 +484,22 @@\n             mant = str.substring(0, decPos);\n         } else {\n             if (expPos > -1) {\n-                if (expPos > str.length()) {\n+                if (expPos > -1 && expPos < str.length() - 1) {\n+\t\t\t\t\texp = str.substring(expPos + 1, str.length());\n+\t\t\t\t} else {\n+\t\t\t\t\texp = null;\n+\t\t\t\t}\n+\t\t\t\tif (expPos > -1 && expPos < str.length() - 1) {\n+\t\t\t\t\texp = str.substring(expPos + 1, str.length());\n+\t\t\t\t} else {\n+\t\t\t\t\texp = null;\n+\t\t\t\t}\n+\t\t\t\tif (expPos > -1 && expPos < str.length() - 1) {\n+\t\t\t\t\texp = str.substring(expPos + 1, str.length());\n+\t\t\t\t} else {\n+\t\t\t\t\texp = null;\n+\t\t\t\t}\n+\t\t\t\tif (expPos > str.length()) {\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n                 }\n                 mant = str.substring(0, expPos);\n@@ -550,7 +567,8 @@\n \n             }\n         } else {\n-            //User doesn't have a preference on the return type, so let's start\n+            int denom0 = 1;\n+\t\t\t//User doesn't have a preference on the return type, so let's start\n             //small and go from there...\n             if (expPos > -1 && expPos < str.length() - 1) {\n                 exp = str.substring(expPos + 1, str.length());\n@@ -585,6 +603,9 @@\n                 try {\n                     Double d = createDouble(str);\n                     if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n+\t\t\t\t\t\treturn d;\n+\t\t\t\t\t}\n+\t\t\t\t\tif (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                         return d;\n                     }\n                 } catch (NumberFormatException nfe) { // NOPMD\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 485, 
          "faulty": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > -1 && expPos < str.length() - 1) {\n  exp=str.substring(expPos + 1,str.length());\n}\n else {\n  exp=null;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 474, 
          "faulty": "if (expPos > -1) {\n  if (expPos < decPos || expPos > str.length()) {\n    throw new NumberFormatException(str + \" is not a valid number.\");\n  }\n  dec=str.substring(decPos + 1,expPos);\n}\n else {\n  dec=str.substring(decPos + 1);\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 485, 
          "faulty": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > -1 && expPos < str.length() - 1) {\n  exp=str.substring(expPos + 1,str.length());\n}\n else {\n  exp=null;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 485, 
          "faulty": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > -1 && expPos < str.length() - 1) {\n  exp=str.substring(expPos + 1,str.length());\n}\n else {\n  exp=null;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "double x2=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 486, 
          "faulty": "throw new NumberFormatException(str + \" is not a valid number.\");", 
          "type": "InsertBefore", 
          "seed": "char[] chars=str.toCharArray();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-02 05:05:38.013361696 -0500\n+++ /tmp/GenProg_Defects4J_Lang_7/patches_e3r9/Patch_1299/patched/tmp/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-02 05:25:01.494410232 -0500\n@@ -450,7 +450,6 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n@@ -471,7 +470,10 @@\n \n         if (decPos > -1) {\n \n-            if (expPos > -1) {\n+            if (expPos > str.length()) {\n+\t\t\t\tthrow new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t}\n+\t\t\tif (expPos > -1) {\n                 if (expPos < decPos || expPos > str.length()) {\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n                 }\n@@ -482,8 +484,24 @@\n             mant = str.substring(0, decPos);\n         } else {\n             if (expPos > -1) {\n-                if (expPos > str.length()) {\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+                if (expPos > -1 && expPos < str.length() - 1) {\n+\t\t\t\t\texp = str.substring(expPos + 1, str.length());\n+\t\t\t\t} else {\n+\t\t\t\t\texp = null;\n+\t\t\t\t}\n+\t\t\t\tif (expPos > -1 && expPos < str.length() - 1) {\n+\t\t\t\t\texp = str.substring(expPos + 1, str.length());\n+\t\t\t\t} else {\n+\t\t\t\t\texp = null;\n+\t\t\t\t}\n+\t\t\t\tif (expPos > -1 && expPos < str.length() - 1) {\n+\t\t\t\t\texp = str.substring(expPos + 1, str.length());\n+\t\t\t\t} else {\n+\t\t\t\t\texp = null;\n+\t\t\t\t}\n+\t\t\t\tif (expPos > str.length()) {\n+                    char[] chars = str.toCharArray();\n+\t\t\t\t\tthrow new NumberFormatException(str + \" is not a valid number.\");\n                 }\n                 mant = str.substring(0, expPos);\n             } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 485, 
          "faulty": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > -1 && expPos < str.length() - 1) {\n  exp=str.substring(expPos + 1,str.length());\n}\n else {\n  exp=null;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 485, 
          "faulty": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > -1 && expPos < str.length() - 1) {\n  exp=str.substring(expPos + 1,str.length());\n}\n else {\n  exp=null;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 485, 
          "faulty": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > -1 && expPos < str.length() - 1) {\n  exp=str.substring(expPos + 1,str.length());\n}\n else {\n  exp=null;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "double x2=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 485, 
          "faulty": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}", 
          "type": "InsertBefore", 
          "seed": "int i=1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-02 05:05:38.013361696 -0500\n+++ /tmp/GenProg_Defects4J_Lang_7/patches_e3r9/Patch_1333/patched/tmp/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-02 05:25:24.207296280 -0500\n@@ -450,7 +450,6 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n@@ -482,7 +481,23 @@\n             mant = str.substring(0, decPos);\n         } else {\n             if (expPos > -1) {\n-                if (expPos > str.length()) {\n+                if (expPos > -1 && expPos < str.length() - 1) {\n+\t\t\t\t\texp = str.substring(expPos + 1, str.length());\n+\t\t\t\t} else {\n+\t\t\t\t\texp = null;\n+\t\t\t\t}\n+\t\t\t\tif (expPos > -1 && expPos < str.length() - 1) {\n+\t\t\t\t\texp = str.substring(expPos + 1, str.length());\n+\t\t\t\t} else {\n+\t\t\t\t\texp = null;\n+\t\t\t\t}\n+\t\t\t\tif (expPos > -1 && expPos < str.length() - 1) {\n+\t\t\t\t\texp = str.substring(expPos + 1, str.length());\n+\t\t\t\t} else {\n+\t\t\t\t\texp = null;\n+\t\t\t\t}\n+\t\t\t\tint i = 1;\n+\t\t\t\tif (expPos > str.length()) {\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n                 }\n                 mant = str.substring(0, expPos);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 474, 
          "faulty": "if (expPos > -1) {\n  if (expPos < decPos || expPos > str.length()) {\n    throw new NumberFormatException(str + \" is not a valid number.\");\n  }\n  dec=str.substring(decPos + 1,expPos);\n}\n else {\n  dec=str.substring(decPos + 1);\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 474, 
          "faulty": "if (expPos > -1) {\n  if (expPos < decPos || expPos > str.length()) {\n    throw new NumberFormatException(str + \" is not a valid number.\");\n  }\n  dec=str.substring(decPos + 1,expPos);\n}\n else {\n  dec=str.substring(decPos + 1);\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "double x2=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 536, 
          "faulty": "if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {\n  return d;\n}", 
          "type": "InsertBefore", 
          "seed": "double x1=1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-02 05:05:38.013361696 -0500\n+++ /tmp/GenProg_Defects4J_Lang_7/patches_e3r9/Patch_1305/patched/tmp/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-02 05:25:05.354561382 -0500\n@@ -450,7 +450,6 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n@@ -471,7 +470,13 @@\n \n         if (decPos > -1) {\n \n-            if (expPos > -1) {\n+            if (expPos > str.length()) {\n+\t\t\t\tthrow new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t}\n+\t\t\tif (expPos > str.length()) {\n+\t\t\t\tthrow new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t}\n+\t\t\tif (expPos > -1) {\n                 if (expPos < decPos || expPos > str.length()) {\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n                 }\n@@ -533,7 +538,8 @@\n                 case 'D' :\n                     try {\n                         Double d = NumberUtils.createDouble(numeric);\n-                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {\n+                        double x1 = 1;\n+\t\t\t\t\t\tif (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {\n                             return d;\n                         }\n                     } catch (NumberFormatException nfe) { // NOPMD\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 474, 
          "faulty": "if (expPos > -1) {\n  if (expPos < decPos || expPos > str.length()) {\n    throw new NumberFormatException(str + \" is not a valid number.\");\n  }\n  dec=str.substring(decPos + 1,expPos);\n}\n else {\n  dec=str.substring(decPos + 1);\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "double x2=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 587, 
          "faulty": "if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n  return d;\n}", 
          "type": "InsertBefore", 
          "seed": "if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n  return d;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 474, 
          "faulty": "if (expPos > -1) {\n  if (expPos < decPos || expPos > str.length()) {\n    throw new NumberFormatException(str + \" is not a valid number.\");\n  }\n  dec=str.substring(decPos + 1,expPos);\n}\n else {\n  dec=str.substring(decPos + 1);\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "double x2=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "double x2=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 555, 
          "faulty": "if (expPos > -1 && expPos < str.length() - 1) {\n  exp=str.substring(expPos + 1,str.length());\n}\n else {\n  exp=null;\n}", 
          "type": "InsertBefore", 
          "seed": "int denom0=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 568, 
          "faulty": "return createLong(str);", 
          "type": "InsertBefore", 
          "seed": "double x1=1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-02 05:05:38.013361696 -0500\n+++ /tmp/GenProg_Defects4J_Lang_7/patches_e3r9/Patch_1501/patched/tmp/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-02 05:27:22.115788187 -0500\n@@ -450,7 +450,6 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n@@ -471,7 +470,13 @@\n \n         if (decPos > -1) {\n \n-            if (expPos > -1) {\n+            if (expPos > str.length()) {\n+\t\t\t\tthrow new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t}\n+\t\t\tif (expPos > str.length()) {\n+\t\t\t\tthrow new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t}\n+\t\t\tif (expPos > -1) {\n                 if (expPos < decPos || expPos > str.length()) {\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n                 }\n@@ -550,7 +555,8 @@\n \n             }\n         } else {\n-            //User doesn't have a preference on the return type, so let's start\n+            int denom0 = 1;\n+\t\t\t//User doesn't have a preference on the return type, so let's start\n             //small and go from there...\n             if (expPos > -1 && expPos < str.length() - 1) {\n                 exp = str.substring(expPos + 1, str.length());\n@@ -565,7 +571,8 @@\n                     // ignore the bad number\n                 }\n                 try {\n-                    return createLong(str);\n+                    double x1 = 1;\n+\t\t\t\t\treturn createLong(str);\n                 } catch (NumberFormatException nfe) { // NOPMD\n                     // ignore the bad number\n                 }\n@@ -585,6 +592,9 @@\n                 try {\n                     Double d = createDouble(str);\n                     if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n+\t\t\t\t\t\treturn d;\n+\t\t\t\t\t}\n+\t\t\t\t\tif (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                         return d;\n                     }\n                 } catch (NumberFormatException nfe) { // NOPMD\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 474, 
          "faulty": "if (expPos > -1) {\n  if (expPos < decPos || expPos > str.length()) {\n    throw new NumberFormatException(str + \" is not a valid number.\");\n  }\n  dec=str.substring(decPos + 1,expPos);\n}\n else {\n  dec=str.substring(decPos + 1);\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "double x2=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "double x2=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 555, 
          "faulty": "if (expPos > -1 && expPos < str.length() - 1) {\n  exp=str.substring(expPos + 1,str.length());\n}\n else {\n  exp=null;\n}", 
          "type": "InsertBefore", 
          "seed": "int denom0=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 568, 
          "faulty": "return createLong(str);", 
          "type": "InsertBefore", 
          "seed": "double x1=1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-02 05:05:38.013361696 -0500\n+++ /tmp/GenProg_Defects4J_Lang_7/patches_e3r9/Patch_1485/patched/tmp/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-02 05:27:10.431349859 -0500\n@@ -450,7 +450,6 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n@@ -471,7 +470,10 @@\n \n         if (decPos > -1) {\n \n-            if (expPos > -1) {\n+            if (expPos > str.length()) {\n+\t\t\t\tthrow new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t}\n+\t\t\tif (expPos > -1) {\n                 if (expPos < decPos || expPos > str.length()) {\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n                 }\n@@ -550,7 +552,8 @@\n \n             }\n         } else {\n-            //User doesn't have a preference on the return type, so let's start\n+            int denom0 = 1;\n+\t\t\t//User doesn't have a preference on the return type, so let's start\n             //small and go from there...\n             if (expPos > -1 && expPos < str.length() - 1) {\n                 exp = str.substring(expPos + 1, str.length());\n@@ -565,7 +568,8 @@\n                     // ignore the bad number\n                 }\n                 try {\n-                    return createLong(str);\n+                    double x1 = 1;\n+\t\t\t\t\treturn createLong(str);\n                 } catch (NumberFormatException nfe) { // NOPMD\n                     // ignore the bad number\n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 485, 
          "faulty": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > -1 && expPos < str.length() - 1) {\n  exp=str.substring(expPos + 1,str.length());\n}\n else {\n  exp=null;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 474, 
          "faulty": "if (expPos > -1) {\n  if (expPos < decPos || expPos > str.length()) {\n    throw new NumberFormatException(str + \" is not a valid number.\");\n  }\n  dec=str.substring(decPos + 1,expPos);\n}\n else {\n  dec=str.substring(decPos + 1);\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 485, 
          "faulty": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > -1 && expPos < str.length() - 1) {\n  exp=str.substring(expPos + 1,str.length());\n}\n else {\n  exp=null;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "double x2=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 587, 
          "faulty": "if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n  return d;\n}", 
          "type": "InsertBefore", 
          "seed": "if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n  return d;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "double x2=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 587, 
          "faulty": "if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n  return d;\n}", 
          "type": "InsertBefore", 
          "seed": "if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n  return d;\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-02 05:05:38.013361696 -0500\n+++ /tmp/GenProg_Defects4J_Lang_7/patches_e3r9/Patch_1412/patched/tmp/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-02 05:26:20.669467582 -0500\n@@ -450,7 +450,6 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n@@ -471,7 +470,10 @@\n \n         if (decPos > -1) {\n \n-            if (expPos > -1) {\n+            if (expPos > str.length()) {\n+\t\t\t\tthrow new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t}\n+\t\t\tif (expPos > -1) {\n                 if (expPos < decPos || expPos > str.length()) {\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n                 }\n@@ -482,7 +484,17 @@\n             mant = str.substring(0, decPos);\n         } else {\n             if (expPos > -1) {\n-                if (expPos > str.length()) {\n+                if (expPos > -1 && expPos < str.length() - 1) {\n+\t\t\t\t\texp = str.substring(expPos + 1, str.length());\n+\t\t\t\t} else {\n+\t\t\t\t\texp = null;\n+\t\t\t\t}\n+\t\t\t\tif (expPos > -1 && expPos < str.length() - 1) {\n+\t\t\t\t\texp = str.substring(expPos + 1, str.length());\n+\t\t\t\t} else {\n+\t\t\t\t\texp = null;\n+\t\t\t\t}\n+\t\t\t\tif (expPos > str.length()) {\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n                 }\n                 mant = str.substring(0, expPos);\n@@ -585,6 +597,12 @@\n                 try {\n                     Double d = createDouble(str);\n                     if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n+\t\t\t\t\t\treturn d;\n+\t\t\t\t\t}\n+\t\t\t\t\tif (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n+\t\t\t\t\t\treturn d;\n+\t\t\t\t\t}\n+\t\t\t\t\tif (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                         return d;\n                     }\n                 } catch (NumberFormatException nfe) { // NOPMD\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 485, 
          "faulty": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > -1 && expPos < str.length() - 1) {\n  exp=str.substring(expPos + 1,str.length());\n}\n else {\n  exp=null;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "double x2=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-02 05:05:38.013361696 -0500\n+++ /tmp/GenProg_Defects4J_Lang_7/patches_e3r9/Patch_1181/patched/tmp/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-02 05:23:38.867242071 -0500\n@@ -450,7 +450,6 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n@@ -482,7 +481,12 @@\n             mant = str.substring(0, decPos);\n         } else {\n             if (expPos > -1) {\n-                if (expPos > str.length()) {\n+                if (expPos > -1 && expPos < str.length() - 1) {\n+\t\t\t\t\texp = str.substring(expPos + 1, str.length());\n+\t\t\t\t} else {\n+\t\t\t\t\texp = null;\n+\t\t\t\t}\n+\t\t\t\tif (expPos > str.length()) {\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n                 }\n                 mant = str.substring(0, expPos);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 485, 
          "faulty": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > -1 && expPos < str.length() - 1) {\n  exp=str.substring(expPos + 1,str.length());\n}\n else {\n  exp=null;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 474, 
          "faulty": "if (expPos > -1) {\n  if (expPos < decPos || expPos > str.length()) {\n    throw new NumberFormatException(str + \" is not a valid number.\");\n  }\n  dec=str.substring(decPos + 1,expPos);\n}\n else {\n  dec=str.substring(decPos + 1);\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 485, 
          "faulty": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > -1 && expPos < str.length() - 1) {\n  exp=str.substring(expPos + 1,str.length());\n}\n else {\n  exp=null;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 474, 
          "faulty": "if (expPos > -1) {\n  if (expPos < decPos || expPos > str.length()) {\n    throw new NumberFormatException(str + \" is not a valid number.\");\n  }\n  dec=str.substring(decPos + 1,expPos);\n}\n else {\n  dec=str.substring(decPos + 1);\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "double x2=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 555, 
          "faulty": "if (expPos > -1 && expPos < str.length() - 1) {\n  exp=str.substring(expPos + 1,str.length());\n}\n else {\n  exp=null;\n}", 
          "type": "InsertBefore", 
          "seed": "int denom0=1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-02 05:05:38.013361696 -0500\n+++ /tmp/GenProg_Defects4J_Lang_7/patches_e3r9/Patch_1456/patched/tmp/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-02 05:26:49.738570323 -0500\n@@ -450,7 +450,6 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n@@ -471,7 +470,13 @@\n \n         if (decPos > -1) {\n \n-            if (expPos > -1) {\n+            if (expPos > str.length()) {\n+\t\t\t\tthrow new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t}\n+\t\t\tif (expPos > str.length()) {\n+\t\t\t\tthrow new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t}\n+\t\t\tif (expPos > -1) {\n                 if (expPos < decPos || expPos > str.length()) {\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n                 }\n@@ -482,7 +487,17 @@\n             mant = str.substring(0, decPos);\n         } else {\n             if (expPos > -1) {\n-                if (expPos > str.length()) {\n+                if (expPos > -1 && expPos < str.length() - 1) {\n+\t\t\t\t\texp = str.substring(expPos + 1, str.length());\n+\t\t\t\t} else {\n+\t\t\t\t\texp = null;\n+\t\t\t\t}\n+\t\t\t\tif (expPos > -1 && expPos < str.length() - 1) {\n+\t\t\t\t\texp = str.substring(expPos + 1, str.length());\n+\t\t\t\t} else {\n+\t\t\t\t\texp = null;\n+\t\t\t\t}\n+\t\t\t\tif (expPos > str.length()) {\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n                 }\n                 mant = str.substring(0, expPos);\n@@ -550,7 +565,8 @@\n \n             }\n         } else {\n-            //User doesn't have a preference on the return type, so let's start\n+            int denom0 = 1;\n+\t\t\t//User doesn't have a preference on the return type, so let's start\n             //small and go from there...\n             if (expPos > -1 && expPos < str.length() - 1) {\n                 exp = str.substring(expPos + 1, str.length());\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 485, 
          "faulty": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > -1 && expPos < str.length() - 1) {\n  exp=str.substring(expPos + 1,str.length());\n}\n else {\n  exp=null;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 474, 
          "faulty": "if (expPos > -1) {\n  if (expPos < decPos || expPos > str.length()) {\n    throw new NumberFormatException(str + \" is not a valid number.\");\n  }\n  dec=str.substring(decPos + 1,expPos);\n}\n else {\n  dec=str.substring(decPos + 1);\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 485, 
          "faulty": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > -1 && expPos < str.length() - 1) {\n  exp=str.substring(expPos + 1,str.length());\n}\n else {\n  exp=null;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 474, 
          "faulty": "if (expPos > -1) {\n  if (expPos < decPos || expPos > str.length()) {\n    throw new NumberFormatException(str + \" is not a valid number.\");\n  }\n  dec=str.substring(decPos + 1,expPos);\n}\n else {\n  dec=str.substring(decPos + 1);\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "double x2=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 535, 
          "faulty": "Double d=NumberUtils.createDouble(numeric);", 
          "type": "InsertBefore", 
          "seed": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\")|| str.startsWith(\"-0X\")) {\n  int hexDigits=str.length() - 2;\n  if (str.startsWith(\"-\")) {\n    hexDigits--;\n  }\n  if (hexDigits > 8) {\n    return createLong(str);\n  }\n  return createInteger(str);\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-02 05:05:38.013361696 -0500\n+++ /tmp/GenProg_Defects4J_Lang_7/patches_e3r9/Patch_1220/patched/tmp/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-02 05:24:08.080321513 -0500\n@@ -450,7 +450,6 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n@@ -471,7 +470,13 @@\n \n         if (decPos > -1) {\n \n-            if (expPos > -1) {\n+            if (expPos > str.length()) {\n+\t\t\t\tthrow new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t}\n+\t\t\tif (expPos > str.length()) {\n+\t\t\t\tthrow new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t}\n+\t\t\tif (expPos > -1) {\n                 if (expPos < decPos || expPos > str.length()) {\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n                 }\n@@ -482,7 +487,17 @@\n             mant = str.substring(0, decPos);\n         } else {\n             if (expPos > -1) {\n-                if (expPos > str.length()) {\n+                if (expPos > -1 && expPos < str.length() - 1) {\n+\t\t\t\t\texp = str.substring(expPos + 1, str.length());\n+\t\t\t\t} else {\n+\t\t\t\t\texp = null;\n+\t\t\t\t}\n+\t\t\t\tif (expPos > -1 && expPos < str.length() - 1) {\n+\t\t\t\t\texp = str.substring(expPos + 1, str.length());\n+\t\t\t\t} else {\n+\t\t\t\t\texp = null;\n+\t\t\t\t}\n+\t\t\t\tif (expPos > str.length()) {\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n                 }\n                 mant = str.substring(0, expPos);\n@@ -532,7 +547,19 @@\n                 case 'd' :\n                 case 'D' :\n                     try {\n-                        Double d = NumberUtils.createDouble(numeric);\n+                        if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")\n+\t\t\t\t\t\t\t\t|| str.startsWith(\"0X\")\n+\t\t\t\t\t\t\t\t|| str.startsWith(\"-0X\")) {\n+\t\t\t\t\t\t\tint hexDigits = str.length() - 2;\n+\t\t\t\t\t\t\tif (str.startsWith(\"-\")) {\n+\t\t\t\t\t\t\t\thexDigits--;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tif (hexDigits > 8) {\n+\t\t\t\t\t\t\t\treturn createLong(str);\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\treturn createInteger(str);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tDouble d = NumberUtils.createDouble(numeric);\n                         if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {\n                             return d;\n                         }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "double x2=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 563, 
          "faulty": "return createInteger(str);", 
          "type": "InsertBefore", 
          "seed": "int numer0=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 460, 
          "faulty": "if (hexDigits > 8) {\n  return createLong(str);\n}", 
          "type": "Delete", 
          "seed": "return createLong(str);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-02 05:05:38.013361696 -0500\n+++ /tmp/GenProg_Defects4J_Lang_7/patches_e3r9/Patch_1262/patched/tmp/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-02 05:24:36.985444847 -0500\n@@ -450,16 +450,12 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n             if (str.startsWith(\"-\")) { // drop -\n                 hexDigits--;\n             }\n-            if (hexDigits > 8) { // too many for an int\n-                return createLong(str);\n-            }\n             return createInteger(str);\n         }   \n         char lastChar = str.charAt(str.length() - 1);\n@@ -560,7 +556,8 @@\n             if (dec == null && exp == null) {\n                 //Must be an int,long,bigint\n                 try {\n-                    return createInteger(str);\n+                    int numer0 = 0;\n+\t\t\t\t\treturn createInteger(str);\n                 } catch (NumberFormatException nfe) { // NOPMD\n                     // ignore the bad number\n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 485, 
          "faulty": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > -1 && expPos < str.length() - 1) {\n  exp=str.substring(expPos + 1,str.length());\n}\n else {\n  exp=null;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 474, 
          "faulty": "if (expPos > -1) {\n  if (expPos < decPos || expPos > str.length()) {\n    throw new NumberFormatException(str + \" is not a valid number.\");\n  }\n  dec=str.substring(decPos + 1,expPos);\n}\n else {\n  dec=str.substring(decPos + 1);\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 485, 
          "faulty": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > -1 && expPos < str.length() - 1) {\n  exp=str.substring(expPos + 1,str.length());\n}\n else {\n  exp=null;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 474, 
          "faulty": "if (expPos > -1) {\n  if (expPos < decPos || expPos > str.length()) {\n    throw new NumberFormatException(str + \" is not a valid number.\");\n  }\n  dec=str.substring(decPos + 1,expPos);\n}\n else {\n  dec=str.substring(decPos + 1);\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "double x2=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-02 05:05:38.013361696 -0500\n+++ /tmp/GenProg_Defects4J_Lang_7/patches_e3r9/Patch_1099/patched/tmp/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-02 05:22:36.909017963 -0500\n@@ -450,7 +450,6 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n@@ -471,7 +470,13 @@\n \n         if (decPos > -1) {\n \n-            if (expPos > -1) {\n+            if (expPos > str.length()) {\n+\t\t\t\tthrow new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t}\n+\t\t\tif (expPos > str.length()) {\n+\t\t\t\tthrow new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t}\n+\t\t\tif (expPos > -1) {\n                 if (expPos < decPos || expPos > str.length()) {\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n                 }\n@@ -482,7 +487,17 @@\n             mant = str.substring(0, decPos);\n         } else {\n             if (expPos > -1) {\n-                if (expPos > str.length()) {\n+                if (expPos > -1 && expPos < str.length() - 1) {\n+\t\t\t\t\texp = str.substring(expPos + 1, str.length());\n+\t\t\t\t} else {\n+\t\t\t\t\texp = null;\n+\t\t\t\t}\n+\t\t\t\tif (expPos > -1 && expPos < str.length() - 1) {\n+\t\t\t\t\texp = str.substring(expPos + 1, str.length());\n+\t\t\t\t} else {\n+\t\t\t\t\texp = null;\n+\t\t\t\t}\n+\t\t\t\tif (expPos > str.length()) {\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n                 }\n                 mant = str.substring(0, expPos);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 556, 
          "faulty": "exp=str.substring(expPos + 1,str.length());", 
          "type": "Replace", 
          "seed": "exp=str.substring(expPos + 1,str.length());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 474, 
          "faulty": "if (expPos > -1) {\n  if (expPos < decPos || expPos > str.length()) {\n    throw new NumberFormatException(str + \" is not a valid number.\");\n  }\n  dec=str.substring(decPos + 1,expPos);\n}\n else {\n  dec=str.substring(decPos + 1);\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 456, 
          "faulty": "int hexDigits=str.length() - 2;", 
          "type": "InsertBefore", 
          "seed": "int i=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "double x2=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-02 05:05:38.013361696 -0500\n+++ /tmp/GenProg_Defects4J_Lang_7/patches_e3r9/Patch_1059/patched/tmp/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-02 05:22:07.508000855 -0500\n@@ -450,10 +450,10 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n-            int hexDigits = str.length() - 2; // drop 0x\n+            int i = 1;\n+\t\t\tint hexDigits = str.length() - 2; // drop 0x\n             if (str.startsWith(\"-\")) { // drop -\n                 hexDigits--;\n             }\n@@ -471,7 +471,10 @@\n \n         if (decPos > -1) {\n \n-            if (expPos > -1) {\n+            if (expPos > str.length()) {\n+\t\t\t\tthrow new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t}\n+\t\t\tif (expPos > -1) {\n                 if (expPos < decPos || expPos > str.length()) {\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 474, 
          "faulty": "if (expPos > -1) {\n  if (expPos < decPos || expPos > str.length()) {\n    throw new NumberFormatException(str + \" is not a valid number.\");\n  }\n  dec=str.substring(decPos + 1,expPos);\n}\n else {\n  dec=str.substring(decPos + 1);\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "double x2=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-02 05:05:38.013361696 -0500\n+++ /tmp/GenProg_Defects4J_Lang_7/patches_e3r9/Patch_1021/patched/tmp/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-02 05:21:38.210987850 -0500\n@@ -450,7 +450,6 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n@@ -471,7 +470,10 @@\n \n         if (decPos > -1) {\n \n-            if (expPos > -1) {\n+            if (expPos > str.length()) {\n+\t\t\t\tthrow new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t}\n+\t\t\tif (expPos > -1) {\n                 if (expPos < decPos || expPos > str.length()) {\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 474, 
          "faulty": "if (expPos > -1) {\n  if (expPos < decPos || expPos > str.length()) {\n    throw new NumberFormatException(str + \" is not a valid number.\");\n  }\n  dec=str.substring(decPos + 1,expPos);\n}\n else {\n  dec=str.substring(decPos + 1);\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 587, 
          "faulty": "if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n  return d;\n}", 
          "type": "InsertBefore", 
          "seed": "if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n  return d;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "double x2=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 587, 
          "faulty": "if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n  return d;\n}", 
          "type": "InsertBefore", 
          "seed": "if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n  return d;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 588, 
          "faulty": "return d;", 
          "type": "Replace", 
          "seed": "int i=1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-02 05:05:38.013361696 -0500\n+++ /tmp/GenProg_Defects4J_Lang_7/patches_e3r9/Patch_1538/patched/tmp/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-02 05:27:48.668795395 -0500\n@@ -450,7 +450,6 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n@@ -471,7 +470,10 @@\n \n         if (decPos > -1) {\n \n-            if (expPos > -1) {\n+            if (expPos > str.length()) {\n+\t\t\t\tthrow new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t}\n+\t\t\tif (expPos > -1) {\n                 if (expPos < decPos || expPos > str.length()) {\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n                 }\n@@ -585,7 +587,13 @@\n                 try {\n                     Double d = createDouble(str);\n                     if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n-                        return d;\n+\t\t\t\t\t\treturn d;\n+\t\t\t\t\t}\n+\t\t\t\t\tif (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n+\t\t\t\t\t\treturn d;\n+\t\t\t\t\t}\n+\t\t\t\t\tif (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n+                        int i = 1;\n                     }\n                 } catch (NumberFormatException nfe) { // NOPMD\n                     // ignore the bad number\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 474, 
          "faulty": "if (expPos > -1) {\n  if (expPos < decPos || expPos > str.length()) {\n    throw new NumberFormatException(str + \" is not a valid number.\");\n  }\n  dec=str.substring(decPos + 1,expPos);\n}\n else {\n  dec=str.substring(decPos + 1);\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "double x2=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 587, 
          "faulty": "if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n  return d;\n}", 
          "type": "InsertBefore", 
          "seed": "if (str.startsWith(\"--\")) {\n  return null;\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-02 05:05:38.013361696 -0500\n+++ /tmp/GenProg_Defects4J_Lang_7/patches_e3r9/Patch_1269/patched/tmp/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-02 05:24:40.997603580 -0500\n@@ -450,7 +450,6 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n@@ -471,7 +470,10 @@\n \n         if (decPos > -1) {\n \n-            if (expPos > -1) {\n+            if (expPos > str.length()) {\n+\t\t\t\tthrow new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t}\n+\t\t\tif (expPos > -1) {\n                 if (expPos < decPos || expPos > str.length()) {\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n                 }\n@@ -584,7 +586,10 @@\n                 }\n                 try {\n                     Double d = createDouble(str);\n-                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n+                    if (str.startsWith(\"--\")) {\n+\t\t\t\t\t\treturn null;\n+\t\t\t\t\t}\n+\t\t\t\t\tif (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                         return d;\n                     }\n                 } catch (NumberFormatException nfe) { // NOPMD\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 474, 
          "faulty": "if (expPos > -1) {\n  if (expPos < decPos || expPos > str.length()) {\n    throw new NumberFormatException(str + \" is not a valid number.\");\n  }\n  dec=str.substring(decPos + 1,expPos);\n}\n else {\n  dec=str.substring(decPos + 1);\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "double x2=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 587, 
          "faulty": "if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n  return d;\n}", 
          "type": "InsertBefore", 
          "seed": "if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n  return d;\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-02 05:05:38.013361696 -0500\n+++ /tmp/GenProg_Defects4J_Lang_7/patches_e3r9/Patch_1403/patched/tmp/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-02 05:26:14.325225632 -0500\n@@ -450,7 +450,6 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n@@ -471,7 +470,10 @@\n \n         if (decPos > -1) {\n \n-            if (expPos > -1) {\n+            if (expPos > str.length()) {\n+\t\t\t\tthrow new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t}\n+\t\t\tif (expPos > -1) {\n                 if (expPos < decPos || expPos > str.length()) {\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n                 }\n@@ -585,6 +587,9 @@\n                 try {\n                     Double d = createDouble(str);\n                     if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n+\t\t\t\t\t\treturn d;\n+\t\t\t\t\t}\n+\t\t\t\t\tif (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                         return d;\n                     }\n                 } catch (NumberFormatException nfe) { // NOPMD\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "double x2=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 474, 
          "faulty": "if (expPos > -1) {\n  if (expPos < decPos || expPos > str.length()) {\n    throw new NumberFormatException(str + \" is not a valid number.\");\n  }\n  dec=str.substring(decPos + 1,expPos);\n}\n else {\n  dec=str.substring(decPos + 1);\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "double x2=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java", 
          "line": 231, 
          "faulty": "testObjectOutputStream=new ObjectOutputStream(new ByteArrayOutputStream());", 
          "type": "Delete", 
          "seed": "Validate.notNull(listener,\"Listener object cannot be null.\");"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java\t2018-12-02 05:05:34.361361824 -0500\n+++ /tmp/GenProg_Defects4J_Lang_7/patches_e3r9/Patch_1164/patched/tmp/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java\t2018-12-02 05:23:26.322776498 -0500\n@@ -227,8 +227,6 @@\n                 testObjectOutputStream.writeObject(listener);\n                 serializableListeners.add(listener);\n             } catch (IOException exception) {\n-                //recreate test stream in case of indeterminate state\n-                testObjectOutputStream = new ObjectOutputStream(new ByteArrayOutputStream());\n             }\n         }\n         /*\n\n\n--- /tmp/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-02 05:05:38.013361696 -0500\n+++ /tmp/GenProg_Defects4J_Lang_7/patches_e3r9/Patch_1164/patched/tmp/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-02 05:23:26.326776645 -0500\n@@ -450,7 +450,6 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n@@ -471,7 +470,10 @@\n \n         if (decPos > -1) {\n \n-            if (expPos > -1) {\n+            if (expPos > str.length()) {\n+\t\t\t\tthrow new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t}\n+\t\t\tif (expPos > -1) {\n                 if (expPos < decPos || expPos > str.length()) {\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 485, 
          "faulty": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > -1 && expPos < str.length() - 1) {\n  exp=str.substring(expPos + 1,str.length());\n}\n else {\n  exp=null;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 474, 
          "faulty": "if (expPos > -1) {\n  if (expPos < decPos || expPos > str.length()) {\n    throw new NumberFormatException(str + \" is not a valid number.\");\n  }\n  dec=str.substring(decPos + 1,expPos);\n}\n else {\n  dec=str.substring(decPos + 1);\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 485, 
          "faulty": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > -1 && expPos < str.length() - 1) {\n  exp=str.substring(expPos + 1,str.length());\n}\n else {\n  exp=null;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 485, 
          "faulty": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > -1 && expPos < str.length() - 1) {\n  exp=str.substring(expPos + 1,str.length());\n}\n else {\n  exp=null;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 587, 
          "faulty": "if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n  return d;\n}", 
          "type": "InsertBefore", 
          "seed": "if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n  return d;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 474, 
          "faulty": "if (expPos > -1) {\n  if (expPos < decPos || expPos > str.length()) {\n    throw new NumberFormatException(str + \" is not a valid number.\");\n  }\n  dec=str.substring(decPos + 1,expPos);\n}\n else {\n  dec=str.substring(decPos + 1);\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "double x2=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "double x2=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 555, 
          "faulty": "if (expPos > -1 && expPos < str.length() - 1) {\n  exp=str.substring(expPos + 1,str.length());\n}\n else {\n  exp=null;\n}", 
          "type": "InsertBefore", 
          "seed": "int denom0=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 587, 
          "faulty": "if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n  return d;\n}", 
          "type": "Replace", 
          "seed": "if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n  return d;\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-02 05:05:38.013361696 -0500\n+++ /tmp/GenProg_Defects4J_Lang_7/patches_e3r9/Patch_1536/patched/tmp/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-02 05:27:47.888764544 -0500\n@@ -450,7 +450,6 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n@@ -471,7 +470,13 @@\n \n         if (decPos > -1) {\n \n-            if (expPos > -1) {\n+            if (expPos > str.length()) {\n+\t\t\t\tthrow new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t}\n+\t\t\tif (expPos > str.length()) {\n+\t\t\t\tthrow new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t}\n+\t\t\tif (expPos > -1) {\n                 if (expPos < decPos || expPos > str.length()) {\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n                 }\n@@ -482,7 +487,22 @@\n             mant = str.substring(0, decPos);\n         } else {\n             if (expPos > -1) {\n-                if (expPos > str.length()) {\n+                if (expPos > -1 && expPos < str.length() - 1) {\n+\t\t\t\t\texp = str.substring(expPos + 1, str.length());\n+\t\t\t\t} else {\n+\t\t\t\t\texp = null;\n+\t\t\t\t}\n+\t\t\t\tif (expPos > -1 && expPos < str.length() - 1) {\n+\t\t\t\t\texp = str.substring(expPos + 1, str.length());\n+\t\t\t\t} else {\n+\t\t\t\t\texp = null;\n+\t\t\t\t}\n+\t\t\t\tif (expPos > -1 && expPos < str.length() - 1) {\n+\t\t\t\t\texp = str.substring(expPos + 1, str.length());\n+\t\t\t\t} else {\n+\t\t\t\t\texp = null;\n+\t\t\t\t}\n+\t\t\t\tif (expPos > str.length()) {\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n                 }\n                 mant = str.substring(0, expPos);\n@@ -550,7 +570,8 @@\n \n             }\n         } else {\n-            //User doesn't have a preference on the return type, so let's start\n+            int denom0 = 1;\n+\t\t\t//User doesn't have a preference on the return type, so let's start\n             //small and go from there...\n             if (expPos > -1 && expPos < str.length() - 1) {\n                 exp = str.substring(expPos + 1, str.length());\n@@ -585,8 +606,11 @@\n                 try {\n                     Double d = createDouble(str);\n                     if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n-                        return d;\n-                    }\n+\t\t\t\t\t\treturn d;\n+\t\t\t\t\t}\n+\t\t\t\t\tif (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n+\t\t\t\t\t\treturn d;\n+\t\t\t\t\t}\n                 } catch (NumberFormatException nfe) { // NOPMD\n                     // ignore the bad number\n                 }\n\n\n"
    }
  ]
}