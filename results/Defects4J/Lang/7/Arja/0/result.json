{
  "repair_end": "2018-12-01 11:51:05.895107", 
  "repair_begin": "2018-12-01 11:41:48.061748", 
  "patches": [
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:41:40.203962304 -0500\n+++ /tmp/Arja_Defects4J_Lang_7/patches_nbfi/Patch_286/patched/tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:44:45.196154948 -0500\n@@ -450,14 +450,16 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n             if (str.startsWith(\"-\")) { // drop -\n                 hexDigits--;\n             }\n-            if (hexDigits > 8) { // too many for an int\n+            if (str.startsWith(\"-\")) {\n+\t\t\t\thexDigits--;\n+\t\t\t}\n+\t\t\tif (hexDigits > 8) { // too many for an int\n                 return createLong(str);\n             }\n             return createInteger(str);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 460, 
          "faulty": "if (hexDigits > 8) {\n  return createLong(str);\n}", 
          "type": "InsertBefore", 
          "seed": "if (str.startsWith(\"-\")) {\n  hexDigits--;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return 1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:41:40.203962304 -0500\n+++ /tmp/Arja_Defects4J_Lang_7/patches_nbfi/Patch_965/patched/tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:47:34.349890389 -0500\n@@ -450,7 +450,6 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n@@ -482,7 +481,11 @@\n             mant = str.substring(0, decPos);\n         } else {\n             if (expPos > -1) {\n-                if (expPos > str.length()) {\n+                if (expPos < decPos || expPos > str.length()) {\n+\t\t\t\t\tthrow new NumberFormatException(str\n+\t\t\t\t\t\t\t+ \" is not a valid number.\");\n+\t\t\t\t}\n+\t\t\t\tif (expPos > str.length()) {\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n                 }\n                 mant = str.substring(0, expPos);\n@@ -518,9 +521,11 @@\n                 case 'f' :\n                 case 'F' :\n                     try {\n-                        Float f = NumberUtils.createFloat(numeric);\n+                        dec = str.substring(decPos + 1);\n+\t\t\t\t\t\tFloat f = NumberUtils.createFloat(numeric);\n                         if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n-                            //If it's too big for a float or the float value = 0 and the string\n+                            mant = str.substring(0, decPos);\n+\t\t\t\t\t\t\t//If it's too big for a float or the float value = 0 and the string\n                             //has non-zeros in it, then float does not have the precision we want\n                             return f;\n                         }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 485, 
          "faulty": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos < decPos || expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 521, 
          "faulty": "Float f=NumberUtils.createFloat(numeric);", 
          "type": "InsertBefore", 
          "seed": "dec=str.substring(decPos + 1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 525, 
          "faulty": "return f;", 
          "type": "InsertBefore", 
          "seed": "mant=str.substring(0,decPos);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return createLong(str);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:41:40.203962304 -0500\n+++ /tmp/Arja_Defects4J_Lang_7/patches_nbfi/Patch_1600/patched/tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:50:15.198996335 -0500\n@@ -450,7 +450,6 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 543, 
          "faulty": "return createBigDecimal(numeric);", 
          "type": "Replace", 
          "seed": "return createBigDecimal(numeric);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return createLong(str);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:41:40.203962304 -0500\n+++ /tmp/Arja_Defects4J_Lang_7/patches_nbfi/Patch_298/patched/tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:44:48.188235535 -0500\n@@ -450,7 +450,6 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n@@ -533,7 +532,8 @@\n                 case 'D' :\n                     try {\n                         Double d = NumberUtils.createDouble(numeric);\n-                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {\n+                        dec = str.substring(decPos + 1);\n+\t\t\t\t\t\tif (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {\n                             return d;\n                         }\n                     } catch (NumberFormatException nfe) { // NOPMD\n@@ -575,7 +575,8 @@\n                 //Must be a float,double,BigDec\n                 boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n                 try {\n-                    Float f = createFloat(str);\n+                    exp = str.substring(expPos + 1, str.length() - 1);\n+\t\t\t\t\tFloat f = createFloat(str);\n                     if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                         return f;\n                     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 578, 
          "faulty": "Float f=createFloat(str);", 
          "type": "InsertBefore", 
          "seed": "exp=str.substring(expPos + 1,str.length() - 1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 536, 
          "faulty": "if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {\n  return d;\n}", 
          "type": "InsertBefore", 
          "seed": "dec=str.substring(decPos + 1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return new BigDecimal(str);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:41:40.203962304 -0500\n+++ /tmp/Arja_Defects4J_Lang_7/patches_nbfi/Patch_220/patched/tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:44:29.955647683 -0500\n@@ -450,7 +450,6 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n@@ -518,7 +517,12 @@\n                 case 'f' :\n                 case 'F' :\n                     try {\n-                        Float f = NumberUtils.createFloat(numeric);\n+                        if (expPos > -1 && expPos < str.length() - 1) {\n+\t\t\t\t\t\t\texp = str.substring(expPos + 1, str.length());\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\texp = null;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tFloat f = NumberUtils.createFloat(numeric);\n                         if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                             //If it's too big for a float or the float value = 0 and the string\n                             //has non-zeros in it, then float does not have the precision we want\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 521, 
          "faulty": "Float f=NumberUtils.createFloat(numeric);", 
          "type": "InsertBefore", 
          "seed": "if (expPos > -1 && expPos < str.length() - 1) {\n  exp=str.substring(expPos + 1,str.length());\n}\n else {\n  exp=null;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return 1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:41:40.203962304 -0500\n+++ /tmp/Arja_Defects4J_Lang_7/patches_nbfi/Patch_480/patched/tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:45:32.304879283 -0500\n@@ -450,7 +450,6 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n@@ -532,7 +531,16 @@\n                 case 'd' :\n                 case 'D' :\n                     try {\n-                        Double d = NumberUtils.createDouble(numeric);\n+                        if (expPos > -1) {\n+\t\t\t\t\t\t\tif (expPos > str.length()) {\n+\t\t\t\t\t\t\t\tthrow new NumberFormatException(str\n+\t\t\t\t\t\t\t\t\t\t+ \" is not a valid number.\");\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tmant = str.substring(0, expPos);\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tmant = str;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tDouble d = NumberUtils.createDouble(numeric);\n                         if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {\n                             return d;\n                         }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 535, 
          "faulty": "Double d=NumberUtils.createDouble(numeric);", 
          "type": "InsertBefore", 
          "seed": "if (expPos > -1) {\n  if (expPos > str.length()) {\n    throw new NumberFormatException(str + \" is not a valid number.\");\n  }\n  mant=str.substring(0,expPos);\n}\n else {\n  mant=str;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return 0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:41:40.203962304 -0500\n+++ /tmp/Arja_Defects4J_Lang_7/patches_nbfi/Patch_1502/patched/tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:49:49.502805637 -0500\n@@ -450,7 +450,6 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 572, 
          "faulty": "return createBigInteger(str);", 
          "type": "Replace", 
          "seed": "return createBigInteger(str);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return Short.parseShort(str);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:41:40.203962304 -0500\n+++ /tmp/Arja_Defects4J_Lang_7/patches_nbfi/Patch_1455/patched/tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:49:37.734719370 -0500\n@@ -450,7 +450,6 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n@@ -518,7 +517,19 @@\n                 case 'f' :\n                 case 'F' :\n                     try {\n-                        Float f = NumberUtils.createFloat(numeric);\n+                        if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")\n+\t\t\t\t\t\t\t\t|| str.startsWith(\"0X\")\n+\t\t\t\t\t\t\t\t|| str.startsWith(\"-0X\")) {\n+\t\t\t\t\t\t\tint hexDigits = str.length() - 2;\n+\t\t\t\t\t\t\tif (str.startsWith(\"-\")) {\n+\t\t\t\t\t\t\t\thexDigits--;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tif (hexDigits > 8) {\n+\t\t\t\t\t\t\t\treturn createLong(str);\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\treturn createInteger(str);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tFloat f = NumberUtils.createFloat(numeric);\n                         if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                             //If it's too big for a float or the float value = 0 and the string\n                             //has non-zeros in it, then float does not have the precision we want\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 521, 
          "faulty": "Float f=NumberUtils.createFloat(numeric);", 
          "type": "InsertBefore", 
          "seed": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\")|| str.startsWith(\"-0X\")) {\n  int hexDigits=str.length() - 2;\n  if (str.startsWith(\"-\")) {\n    hexDigits--;\n  }\n  if (hexDigits > 8) {\n    return createLong(str);\n  }\n  return createInteger(str);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return toFloat(str,0.0f);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:41:40.203962304 -0500\n+++ /tmp/Arja_Defects4J_Lang_7/patches_nbfi/Patch_666/patched/tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:46:18.525315150 -0500\n@@ -450,7 +450,6 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n@@ -572,7 +571,16 @@\n                 return createBigInteger(str);\n \n             } else {\n-                //Must be a float,double,BigDec\n+                if (expPos > -1) {\n+\t\t\t\t\tif (expPos > str.length()) {\n+\t\t\t\t\t\tthrow new NumberFormatException(str\n+\t\t\t\t\t\t\t\t+ \" is not a valid number.\");\n+\t\t\t\t\t}\n+\t\t\t\t\tmant = str.substring(0, expPos);\n+\t\t\t\t} else {\n+\t\t\t\t\tmant = str;\n+\t\t\t\t}\n+\t\t\t\t//Must be a float,double,BigDec\n                 boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n                 try {\n                     Float f = createFloat(str);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 576, 
          "faulty": "boolean allZeros=isAllZeros(mant) && isAllZeros(exp);", 
          "type": "InsertBefore", 
          "seed": "if (expPos > -1) {\n  if (expPos > str.length()) {\n    throw new NumberFormatException(str + \" is not a valid number.\");\n  }\n  mant=str.substring(0,expPos);\n}\n else {\n  mant=str;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:41:40.203962304 -0500\n+++ /tmp/Arja_Defects4J_Lang_7/patches_nbfi/Patch_568/patched/tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:45:53.673081493 -0500\n@@ -450,16 +450,12 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n-            if (str.startsWith(\"-\")) { // drop -\n-                hexDigits--;\n-            }\n-            if (hexDigits > 8) { // too many for an int\n-                return createLong(str);\n-            }\n+            if (str.startsWith(\"--\")) {\n+\t\t\t\treturn null;\n+\t\t\t}\n             return createInteger(str);\n         }   \n         char lastChar = str.charAt(str.length() - 1);\n@@ -482,9 +478,10 @@\n             mant = str.substring(0, decPos);\n         } else {\n             if (expPos > -1) {\n-                if (expPos > str.length()) {\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n-                }\n+                if (expPos < decPos || expPos > str.length()) {\n+\t\t\t\t\tthrow new NumberFormatException(str\n+\t\t\t\t\t\t\t+ \" is not a valid number.\");\n+\t\t\t\t}\n                 mant = str.substring(0, expPos);\n             } else {\n                 mant = str;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 460, 
          "faulty": "if (hexDigits > 8) {\n  return createLong(str);\n}", 
          "type": "Replace", 
          "seed": "if (str.startsWith(\"--\")) {\n  return null;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 485, 
          "faulty": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}", 
          "type": "Replace", 
          "seed": "if (expPos < decPos || expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 457, 
          "faulty": "if (str.startsWith(\"-\")) {\n  hexDigits--;\n}", 
          "type": "Delete", 
          "seed": "if (str.startsWith(\"-\")) {\n  hexDigits--;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return Double.NaN;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:41:40.203962304 -0500\n+++ /tmp/Arja_Defects4J_Lang_7/patches_nbfi/Patch_385/patched/tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:45:09.036657585 -0500\n@@ -449,8 +449,10 @@\n         if (StringUtils.isBlank(str)) {\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n-        if (str.startsWith(\"--\")) {\n-            return null;\n+        if (str == null) {\n+\t\t\tthrow new IllegalArgumentException(\"The string must not be null\");\n+\t\t}\n+\t\tif (str.startsWith(\"--\")) {\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 452, 
          "faulty": "if (str.startsWith(\"--\")) {\n  return null;\n}", 
          "type": "InsertBefore", 
          "seed": "if (str == null) {\n  throw new IllegalArgumentException(\"The string must not be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return toFloat(str,0.0f);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:41:40.203962304 -0500\n+++ /tmp/Arja_Defects4J_Lang_7/patches_nbfi/Patch_1254/patched/tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:48:46.394357869 -0500\n@@ -450,14 +450,16 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n             if (str.startsWith(\"-\")) { // drop -\n                 hexDigits--;\n             }\n-            if (hexDigits > 8) { // too many for an int\n+            if (str.startsWith(\"-\")) {\n+\t\t\t\thexDigits--;\n+\t\t\t}\n+\t\t\tif (hexDigits > 8) { // too many for an int\n                 return createLong(str);\n             }\n             return createInteger(str);\n@@ -493,7 +495,90 @@\n         }\n         if (!Character.isDigit(lastChar) && lastChar != '.') {\n             if (expPos > -1 && expPos < str.length() - 1) {\n-                exp = str.substring(expPos + 1, str.length() - 1);\n+                if (!Character.isDigit(lastChar) && lastChar != '.') {\n+\t\t\t\t\tif (expPos > -1 && expPos < str.length() - 1) {\n+\t\t\t\t\t\texp = str.substring(expPos + 1, str.length() - 1);\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\texp = null;\n+\t\t\t\t\t}\n+\t\t\t\t\tString numeric = str.substring(0, str.length() - 1);\n+\t\t\t\t\tboolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n+\t\t\t\t\tswitch (lastChar) {\n+\t\t\t\t\tcase 'l':\n+\t\t\t\t\tcase 'L':\n+\t\t\t\t\t\tif (dec == null\n+\t\t\t\t\t\t\t\t&& exp == null\n+\t\t\t\t\t\t\t\t&& (numeric.charAt(0) == '-'\n+\t\t\t\t\t\t\t\t\t\t&& isDigits(numeric.substring(1)) || isDigits(numeric))) {\n+\t\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\t\treturn createLong(numeric);\n+\t\t\t\t\t\t\t} catch (NumberFormatException nfe) {\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\treturn createBigInteger(numeric);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tthrow new NumberFormatException(str\n+\t\t\t\t\t\t\t\t+ \" is not a valid number.\");\n+\t\t\t\t\tcase 'f':\n+\t\t\t\t\tcase 'F':\n+\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\tFloat f = NumberUtils.createFloat(numeric);\n+\t\t\t\t\t\t\tif (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n+\t\t\t\t\t\t\t\treturn f;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t} catch (NumberFormatException nfe) {\n+\t\t\t\t\t\t}\n+\t\t\t\t\tcase 'd':\n+\t\t\t\t\tcase 'D':\n+\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\tDouble d = NumberUtils.createDouble(numeric);\n+\t\t\t\t\t\t\tif (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {\n+\t\t\t\t\t\t\t\treturn d;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t} catch (NumberFormatException nfe) {\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\treturn createBigDecimal(numeric);\n+\t\t\t\t\t\t} catch (NumberFormatException e) {\n+\t\t\t\t\t\t}\n+\t\t\t\t\tdefault:\n+\t\t\t\t\t\tthrow new NumberFormatException(str\n+\t\t\t\t\t\t\t\t+ \" is not a valid number.\");\n+\t\t\t\t\t}\n+\t\t\t\t} else {\n+\t\t\t\t\tif (expPos > -1 && expPos < str.length() - 1) {\n+\t\t\t\t\t\texp = str.substring(expPos + 1, str.length());\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\texp = null;\n+\t\t\t\t\t}\n+\t\t\t\t\tif (dec == null && exp == null) {\n+\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\treturn createInteger(str);\n+\t\t\t\t\t\t} catch (NumberFormatException nfe) {\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\treturn createLong(str);\n+\t\t\t\t\t\t} catch (NumberFormatException nfe) {\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\treturn createBigInteger(str);\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tboolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n+\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\tFloat f = createFloat(str);\n+\t\t\t\t\t\t\tif (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n+\t\t\t\t\t\t\t\treturn f;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t} catch (NumberFormatException nfe) {\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\tDouble d = createDouble(str);\n+\t\t\t\t\t\t\tif (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n+\t\t\t\t\t\t\t\treturn d;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t} catch (NumberFormatException nfe) {\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\treturn createBigDecimal(str);\n+\t\t\t\t\t}\n+\t\t\t\t}\n             } else {\n                 exp = null;\n             }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 460, 
          "faulty": "if (hexDigits > 8) {\n  return createLong(str);\n}", 
          "type": "InsertBefore", 
          "seed": "if (str.startsWith(\"-\")) {\n  hexDigits--;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return 1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 496, 
          "faulty": "exp=str.substring(expPos + 1,str.length() - 1);", 
          "type": "Replace", 
          "seed": "if (!Character.isDigit(lastChar) && lastChar != '.') {\n  if (expPos > -1 && expPos < str.length() - 1) {\n    exp=str.substring(expPos + 1,str.length() - 1);\n  }\n else {\n    exp=null;\n  }\n  String numeric=str.substring(0,str.length() - 1);\n  boolean allZeros=isAllZeros(mant) && isAllZeros(exp);\nswitch (lastChar) {\ncase 'l':\ncase 'L':\n    if (dec == null && exp == null && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {\n      try {\n        return createLong(numeric);\n      }\n catch (      NumberFormatException nfe) {\n      }\n      return createBigInteger(numeric);\n    }\n  throw new NumberFormatException(str + \" is not a valid number.\");\ncase 'f':\ncase 'F':\ntry {\n  Float f=NumberUtils.createFloat(numeric);\n  if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n    return f;\n  }\n}\n catch (NumberFormatException nfe) {\n}\ncase 'd':\ncase 'D':\ntry {\nDouble d=NumberUtils.createDouble(numeric);\nif (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {\n  return d;\n}\n}\n catch (NumberFormatException nfe) {\n}\ntry {\nreturn createBigDecimal(numeric);\n}\n catch (NumberFormatException e) {\n}\ndefault :\nthrow new NumberFormatException(str + \" is not a valid number.\");\n}\n}\n else {\nif (expPos > -1 && expPos < str.length() - 1) {\nexp=str.substring(expPos + 1,str.length());\n}\n else {\nexp=null;\n}\nif (dec == null && exp == null) {\ntry {\nreturn createInteger(str);\n}\n catch (NumberFormatException nfe) {\n}\ntry {\nreturn createLong(str);\n}\n catch (NumberFormatException nfe) {\n}\nreturn createBigInteger(str);\n}\n else {\nboolean allZeros=isAllZeros(mant) && isAllZeros(exp);\ntry {\nFloat f=createFloat(str);\nif (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\nreturn f;\n}\n}\n catch (NumberFormatException nfe) {\n}\ntry {\nDouble d=createDouble(str);\nif (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\nreturn d;\n}\n}\n catch (NumberFormatException nfe) {\n}\nreturn createBigDecimal(str);\n}\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:41:40.203962304 -0500\n+++ /tmp/Arja_Defects4J_Lang_7/patches_nbfi/Patch_1335/patched/tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:49:06.918496949 -0500\n@@ -450,7 +450,7 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n+            return createInteger(str);\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Replace", 
          "seed": "return createInteger(str);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:41:40.203962304 -0500\n+++ /tmp/Arja_Defects4J_Lang_7/patches_nbfi/Patch_713/patched/tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:46:30.593428064 -0500\n@@ -450,7 +450,6 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n@@ -482,7 +481,11 @@\n             mant = str.substring(0, decPos);\n         } else {\n             if (expPos > -1) {\n-                if (expPos > str.length()) {\n+                if (expPos < decPos || expPos > str.length()) {\n+\t\t\t\t\tthrow new NumberFormatException(str\n+\t\t\t\t\t\t\t+ \" is not a valid number.\");\n+\t\t\t\t}\n+\t\t\t\tif (expPos > str.length()) {\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n                 }\n                 mant = str.substring(0, expPos);\n@@ -511,7 +514,11 @@\n                         } catch (NumberFormatException nfe) { // NOPMD\n                             // Too big for a long\n                         }\n-                        return createBigInteger(numeric);\n+                        if (str == null) {\n+\t\t\t\t\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\t\t\t\t\"The string must not be null\");\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\treturn createBigInteger(numeric);\n \n                     }\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 485, 
          "faulty": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos < decPos || expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return Short.parseShort(str);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 514, 
          "faulty": "return createBigInteger(numeric);", 
          "type": "InsertBefore", 
          "seed": "if (str == null) {\n  throw new IllegalArgumentException(\"The string must not be null\");\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:41:40.203962304 -0500\n+++ /tmp/Arja_Defects4J_Lang_7/patches_nbfi/Patch_747/patched/tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:46:38.725503961 -0500\n@@ -450,7 +450,6 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n@@ -472,7 +471,8 @@\n         if (decPos > -1) {\n \n             if (expPos > -1) {\n-                if (expPos < decPos || expPos > str.length()) {\n+                mant = str.substring(0, expPos);\n+\t\t\t\tif (expPos < decPos || expPos > str.length()) {\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n                 }\n                 dec = str.substring(decPos + 1, expPos);\n@@ -482,7 +482,11 @@\n             mant = str.substring(0, decPos);\n         } else {\n             if (expPos > -1) {\n-                if (expPos > str.length()) {\n+                if (expPos < decPos || expPos > str.length()) {\n+\t\t\t\t\tthrow new NumberFormatException(str\n+\t\t\t\t\t\t\t+ \" is not a valid number.\");\n+\t\t\t\t}\n+\t\t\t\tif (expPos > str.length()) {\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n                 }\n                 mant = str.substring(0, expPos);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 485, 
          "faulty": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos < decPos || expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 475, 
          "faulty": "if (expPos < decPos || expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}", 
          "type": "InsertBefore", 
          "seed": "mant=str.substring(0,expPos);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return 0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:41:40.203962304 -0500\n+++ /tmp/Arja_Defects4J_Lang_7/patches_nbfi/Patch_322/patched/tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:44:53.600369459 -0500\n@@ -450,7 +450,6 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n@@ -482,7 +481,11 @@\n             mant = str.substring(0, decPos);\n         } else {\n             if (expPos > -1) {\n-                if (expPos > str.length()) {\n+                if (expPos < decPos || expPos > str.length()) {\n+\t\t\t\t\tthrow new NumberFormatException(str\n+\t\t\t\t\t\t\t+ \" is not a valid number.\");\n+\t\t\t\t}\n+\t\t\t\tif (expPos > str.length()) {\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n                 }\n                 mant = str.substring(0, expPos);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 485, 
          "faulty": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos < decPos || expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return createLong(str);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:41:40.203962304 -0500\n+++ /tmp/Arja_Defects4J_Lang_7/patches_nbfi/Patch_388/patched/tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:45:09.596662940 -0500\n@@ -450,14 +450,16 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n             if (str.startsWith(\"-\")) { // drop -\n                 hexDigits--;\n             }\n-            if (hexDigits > 8) { // too many for an int\n+            if (str.startsWith(\"-\")) {\n+\t\t\t\thexDigits--;\n+\t\t\t}\n+\t\t\tif (hexDigits > 8) { // too many for an int\n                 return createLong(str);\n             }\n             return createInteger(str);\n@@ -533,7 +535,8 @@\n                 case 'D' :\n                     try {\n                         Double d = NumberUtils.createDouble(numeric);\n-                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {\n+                        dec = str.substring(decPos + 1);\n+\t\t\t\t\t\tif (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {\n                             return d;\n                         }\n                     } catch (NumberFormatException nfe) { // NOPMD\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 460, 
          "faulty": "if (hexDigits > 8) {\n  return createLong(str);\n}", 
          "type": "InsertBefore", 
          "seed": "if (str.startsWith(\"-\")) {\n  hexDigits--;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 536, 
          "faulty": "if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {\n  return d;\n}", 
          "type": "InsertBefore", 
          "seed": "dec=str.substring(decPos + 1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return 1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:41:40.203962304 -0500\n+++ /tmp/Arja_Defects4J_Lang_7/patches_nbfi/Patch_1711/patched/tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:50:44.403216632 -0500\n@@ -450,7 +450,7 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n+            return Short.parseShort(str);\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n@@ -575,7 +575,10 @@\n                 //Must be a float,double,BigDec\n                 boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n                 try {\n-                    Float f = createFloat(str);\n+                    if (str.startsWith(\"--\")) {\n+\t\t\t\t\t\treturn null;\n+\t\t\t\t\t}\n+\t\t\t\t\tFloat f = createFloat(str);\n                     if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                         return f;\n                     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 578, 
          "faulty": "Float f=createFloat(str);", 
          "type": "InsertBefore", 
          "seed": "if (str.startsWith(\"--\")) {\n  return null;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Replace", 
          "seed": "return Short.parseShort(str);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:41:40.203962304 -0500\n+++ /tmp/Arja_Defects4J_Lang_7/patches_nbfi/Patch_34/patched/tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:43:40.748993134 -0500\n@@ -450,7 +450,6 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return createLong(str);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:41:40.203962304 -0500\n+++ /tmp/Arja_Defects4J_Lang_7/patches_nbfi/Patch_1060/patched/tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:47:58.262046061 -0500\n@@ -450,7 +450,6 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n@@ -572,7 +571,18 @@\n                 return createBigInteger(str);\n \n             } else {\n-                //Must be a float,double,BigDec\n+                if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")\n+\t\t\t\t\t\t|| str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n+\t\t\t\t\tint hexDigits = str.length() - 2;\n+\t\t\t\t\tif (str.startsWith(\"-\")) {\n+\t\t\t\t\t\thexDigits--;\n+\t\t\t\t\t}\n+\t\t\t\t\tif (hexDigits > 8) {\n+\t\t\t\t\t\treturn createLong(str);\n+\t\t\t\t\t}\n+\t\t\t\t\treturn createInteger(str);\n+\t\t\t\t}\n+\t\t\t\t//Must be a float,double,BigDec\n                 boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n                 try {\n                     Float f = createFloat(str);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return Short.parseShort(str);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 576, 
          "faulty": "boolean allZeros=isAllZeros(mant) && isAllZeros(exp);", 
          "type": "InsertBefore", 
          "seed": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\")|| str.startsWith(\"-0X\")) {\n  int hexDigits=str.length() - 2;\n  if (str.startsWith(\"-\")) {\n    hexDigits--;\n  }\n  if (hexDigits > 8) {\n    return createLong(str);\n  }\n  return createInteger(str);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:41:40.203962304 -0500\n+++ /tmp/Arja_Defects4J_Lang_7/patches_nbfi/Patch_465/patched/tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:45:29.068848547 -0500\n@@ -450,7 +450,6 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n@@ -493,7 +492,30 @@\n         }\n         if (!Character.isDigit(lastChar) && lastChar != '.') {\n             if (expPos > -1 && expPos < str.length() - 1) {\n-                exp = str.substring(expPos + 1, str.length() - 1);\n+                if (decPos > -1) {\n+\t\t\t\t\tif (expPos > -1) {\n+\t\t\t\t\t\tif (expPos < decPos || expPos > str.length()) {\n+\t\t\t\t\t\t\tthrow new NumberFormatException(str\n+\t\t\t\t\t\t\t\t\t+ \" is not a valid number.\");\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tdec = str.substring(decPos + 1, expPos);\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tdec = str.substring(decPos + 1);\n+\t\t\t\t\t}\n+\t\t\t\t\tmant = str.substring(0, decPos);\n+\t\t\t\t} else {\n+\t\t\t\t\tif (expPos > -1) {\n+\t\t\t\t\t\tif (expPos > str.length()) {\n+\t\t\t\t\t\t\tthrow new NumberFormatException(str\n+\t\t\t\t\t\t\t\t\t+ \" is not a valid number.\");\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tmant = str.substring(0, expPos);\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tmant = str;\n+\t\t\t\t\t}\n+\t\t\t\t\tdec = null;\n+\t\t\t\t}\n+\t\t\t\texp = str.substring(expPos + 1, str.length() - 1);\n             } else {\n                 exp = null;\n             }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return toFloat(str,0.0f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 496, 
          "faulty": "exp=str.substring(expPos + 1,str.length() - 1);", 
          "type": "InsertBefore", 
          "seed": "if (decPos > -1) {\n  if (expPos > -1) {\n    if (expPos < decPos || expPos > str.length()) {\n      throw new NumberFormatException(str + \" is not a valid number.\");\n    }\n    dec=str.substring(decPos + 1,expPos);\n  }\n else {\n    dec=str.substring(decPos + 1);\n  }\n  mant=str.substring(0,decPos);\n}\n else {\n  if (expPos > -1) {\n    if (expPos > str.length()) {\n      throw new NumberFormatException(str + \" is not a valid number.\");\n    }\n    mant=str.substring(0,expPos);\n  }\n else {\n    mant=str;\n  }\n  dec=null;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:41:40.203962304 -0500\n+++ /tmp/Arja_Defects4J_Lang_7/patches_nbfi/Patch_232/patched/tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:44:32.719753943 -0500\n@@ -450,7 +450,6 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n@@ -518,7 +517,16 @@\n                 case 'f' :\n                 case 'F' :\n                     try {\n-                        Float f = NumberUtils.createFloat(numeric);\n+                        if (expPos > -1) {\n+\t\t\t\t\t\t\tif (expPos < decPos || expPos > str.length()) {\n+\t\t\t\t\t\t\t\tthrow new NumberFormatException(str\n+\t\t\t\t\t\t\t\t\t\t+ \" is not a valid number.\");\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tdec = str.substring(decPos + 1, expPos);\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tdec = str.substring(decPos + 1);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tFloat f = NumberUtils.createFloat(numeric);\n                         if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                             //If it's too big for a float or the float value = 0 and the string\n                             //has non-zeros in it, then float does not have the precision we want\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 521, 
          "faulty": "Float f=NumberUtils.createFloat(numeric);", 
          "type": "InsertBefore", 
          "seed": "if (expPos > -1) {\n  if (expPos < decPos || expPos > str.length()) {\n    throw new NumberFormatException(str + \" is not a valid number.\");\n  }\n  dec=str.substring(decPos + 1,expPos);\n}\n else {\n  dec=str.substring(decPos + 1);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return new BigDecimal(str);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:41:40.203962304 -0500\n+++ /tmp/Arja_Defects4J_Lang_7/patches_nbfi/Patch_1365/patched/tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:49:14.142548617 -0500\n@@ -450,7 +450,6 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n@@ -482,7 +481,8 @@\n             mant = str.substring(0, decPos);\n         } else {\n             if (expPos > -1) {\n-                if (expPos > str.length()) {\n+                exp = null;\n+\t\t\t\tif (expPos > str.length()) {\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n                 }\n                 mant = str.substring(0, expPos);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 485, 
          "faulty": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}", 
          "type": "InsertBefore", 
          "seed": "exp=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return Short.parseShort(str);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:41:40.203962304 -0500\n+++ /tmp/Arja_Defects4J_Lang_7/patches_nbfi/Patch_1065/patched/tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:47:59.062051304 -0500\n@@ -450,7 +450,6 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n@@ -565,7 +564,18 @@\n                     // ignore the bad number\n                 }\n                 try {\n-                    return createLong(str);\n+                    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")\n+\t\t\t\t\t\t\t|| str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n+\t\t\t\t\t\tint hexDigits = str.length() - 2;\n+\t\t\t\t\t\tif (str.startsWith(\"-\")) {\n+\t\t\t\t\t\t\thexDigits--;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tif (hexDigits > 8) {\n+\t\t\t\t\t\t\treturn createLong(str);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\treturn createInteger(str);\n+\t\t\t\t\t}\n+\t\t\t\t\treturn createLong(str);\n                 } catch (NumberFormatException nfe) { // NOPMD\n                     // ignore the bad number\n                 }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return 1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 568, 
          "faulty": "return createLong(str);", 
          "type": "InsertBefore", 
          "seed": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\")|| str.startsWith(\"-0X\")) {\n  int hexDigits=str.length() - 2;\n  if (str.startsWith(\"-\")) {\n    hexDigits--;\n  }\n  if (hexDigits > 8) {\n    return createLong(str);\n  }\n  return createInteger(str);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:41:40.203962304 -0500\n+++ /tmp/Arja_Defects4J_Lang_7/patches_nbfi/Patch_554/patched/tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:45:50.445051026 -0500\n@@ -450,7 +450,6 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n@@ -553,7 +552,8 @@\n             //User doesn't have a preference on the return type, so let's start\n             //small and go from there...\n             if (expPos > -1 && expPos < str.length() - 1) {\n-                exp = str.substring(expPos + 1, str.length());\n+                mant = str;\n+\t\t\t\texp = str.substring(expPos + 1, str.length());\n             } else {\n                 exp = null;\n             }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 556, 
          "faulty": "exp=str.substring(expPos + 1,str.length());", 
          "type": "InsertBefore", 
          "seed": "mant=str;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return new BigDecimal(str);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:41:40.203962304 -0500\n+++ /tmp/Arja_Defects4J_Lang_7/patches_nbfi/Patch_1188/patched/tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:48:29.402245647 -0500\n@@ -450,7 +450,6 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n@@ -583,7 +582,8 @@\n                     // ignore the bad number\n                 }\n                 try {\n-                    Double d = createDouble(str);\n+                    dec = null;\n+\t\t\t\t\tDouble d = createDouble(str);\n                     if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                         return d;\n                     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 586, 
          "faulty": "Double d=createDouble(str);", 
          "type": "InsertBefore", 
          "seed": "dec=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return Short.parseShort(str);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:41:40.203962304 -0500\n+++ /tmp/Arja_Defects4J_Lang_7/patches_nbfi/Patch_394/patched/tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:45:10.948675866 -0500\n@@ -446,11 +446,13 @@\n         if (str == null) {\n             return null;\n         }\n-        if (StringUtils.isBlank(str)) {\n+        if (str == null) {\n+\t\t\tthrow new IllegalArgumentException(\"The string must not be null\");\n+\t\t}\n+\t\tif (StringUtils.isBlank(str)) {\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n@@ -577,7 +579,11 @@\n                 try {\n                     Float f = createFloat(str);\n                     if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n-                        return f;\n+                        if (expPos > str.length()) {\n+\t\t\t\t\t\t\tthrow new NumberFormatException(str\n+\t\t\t\t\t\t\t\t\t+ \" is not a valid number.\");\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\treturn f;\n                     }\n                 } catch (NumberFormatException nfe) { // NOPMD\n                     // ignore the bad number\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 449, 
          "faulty": "if (StringUtils.isBlank(str)) {\n  throw new NumberFormatException(\"A blank string is not a valid number\");\n}", 
          "type": "InsertBefore", 
          "seed": "if (str == null) {\n  throw new IllegalArgumentException(\"The string must not be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 580, 
          "faulty": "return f;", 
          "type": "InsertBefore", 
          "seed": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return 0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:41:40.203962304 -0500\n+++ /tmp/Arja_Defects4J_Lang_7/patches_nbfi/Patch_1325/patched/tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:49:04.510479959 -0500\n@@ -450,16 +450,15 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n             if (str.startsWith(\"-\")) { // drop -\n                 hexDigits--;\n             }\n-            if (hexDigits > 8) { // too many for an int\n-                return createLong(str);\n-            }\n+            if (str.startsWith(\"--\")) {\n+\t\t\t\treturn null;\n+\t\t\t}\n             return createInteger(str);\n         }   \n         char lastChar = str.charAt(str.length() - 1);\n@@ -482,7 +481,8 @@\n             mant = str.substring(0, decPos);\n         } else {\n             if (expPos > -1) {\n-                if (expPos > str.length()) {\n+                mant = str;\n+\t\t\t\tif (expPos > str.length()) {\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n                 }\n                 mant = str.substring(0, expPos);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 460, 
          "faulty": "if (hexDigits > 8) {\n  return createLong(str);\n}", 
          "type": "Replace", 
          "seed": "if (str.startsWith(\"--\")) {\n  return null;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 485, 
          "faulty": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}", 
          "type": "InsertBefore", 
          "seed": "mant=str;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return toFloat(str,0.0f);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:41:40.203962304 -0500\n+++ /tmp/Arja_Defects4J_Lang_7/patches_nbfi/Patch_1127/patched/tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:48:14.354148249 -0500\n@@ -450,16 +450,15 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n             if (str.startsWith(\"-\")) { // drop -\n                 hexDigits--;\n             }\n-            if (hexDigits > 8) { // too many for an int\n-                return createLong(str);\n-            }\n+            if (str.startsWith(\"--\")) {\n+\t\t\t\treturn null;\n+\t\t\t}\n             return createInteger(str);\n         }   \n         char lastChar = str.charAt(str.length() - 1);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 460, 
          "faulty": "if (hexDigits > 8) {\n  return createLong(str);\n}", 
          "type": "Replace", 
          "seed": "if (str.startsWith(\"--\")) {\n  return null;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return toFloat(str,0.0f);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:41:40.203962304 -0500\n+++ /tmp/Arja_Defects4J_Lang_7/patches_nbfi/Patch_869/patched/tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:47:09.317732890 -0500\n@@ -449,8 +449,10 @@\n         if (StringUtils.isBlank(str)) {\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n-        if (str.startsWith(\"--\")) {\n-            return null;\n+        if (str == null) {\n+\t\t\treturn null;\n+\t\t}\n+\t\tif (str.startsWith(\"--\")) {\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 452, 
          "faulty": "if (str.startsWith(\"--\")) {\n  return null;\n}", 
          "type": "InsertBefore", 
          "seed": "if (str == null) {\n  return null;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return toFloat(str,0.0f);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:41:40.203962304 -0500\n+++ /tmp/Arja_Defects4J_Lang_7/patches_nbfi/Patch_412/patched/tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:45:15.556719874 -0500\n@@ -450,7 +450,6 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n@@ -585,7 +584,7 @@\n                 try {\n                     Double d = createDouble(str);\n                     if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n-                        return d;\n+                        return Double.valueOf(str);\n                     }\n                 } catch (NumberFormatException nfe) { // NOPMD\n                     // ignore the bad number\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 588, 
          "faulty": "return d;", 
          "type": "Replace", 
          "seed": "return Double.valueOf(str);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return Short.parseShort(str);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:41:40.203962304 -0500\n+++ /tmp/Arja_Defects4J_Lang_7/patches_nbfi/Patch_1510/patched/tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:49:51.390819540 -0500\n@@ -450,7 +450,6 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n@@ -482,7 +481,11 @@\n             mant = str.substring(0, decPos);\n         } else {\n             if (expPos > -1) {\n-                if (expPos > str.length()) {\n+                if (expPos < decPos || expPos > str.length()) {\n+\t\t\t\t\tthrow new NumberFormatException(str\n+\t\t\t\t\t\t\t+ \" is not a valid number.\");\n+\t\t\t\t}\n+\t\t\t\tif (expPos > str.length()) {\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n                 }\n                 mant = str.substring(0, expPos);\n@@ -572,7 +575,11 @@\n                 return createBigInteger(str);\n \n             } else {\n-                //Must be a float,double,BigDec\n+                if (str == null) {\n+\t\t\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\t\t\"The string must not be null\");\n+\t\t\t\t}\n+\t\t\t\t//Must be a float,double,BigDec\n                 boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n                 try {\n                     Float f = createFloat(str);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 485, 
          "faulty": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos < decPos || expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return 1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 576, 
          "faulty": "boolean allZeros=isAllZeros(mant) && isAllZeros(exp);", 
          "type": "InsertBefore", 
          "seed": "if (str == null) {\n  throw new IllegalArgumentException(\"The string must not be null\");\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:41:40.203962304 -0500\n+++ /tmp/Arja_Defects4J_Lang_7/patches_nbfi/Patch_1085/patched/tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:48:03.898081733 -0500\n@@ -450,7 +450,6 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n@@ -560,7 +559,91 @@\n             if (dec == null && exp == null) {\n                 //Must be an int,long,bigint\n                 try {\n-                    return createInteger(str);\n+                    if (!Character.isDigit(lastChar) && lastChar != '.') {\n+\t\t\t\t\t\tif (expPos > -1 && expPos < str.length() - 1) {\n+\t\t\t\t\t\t\texp = str.substring(expPos + 1, str.length() - 1);\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\texp = null;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tString numeric = str.substring(0, str.length() - 1);\n+\t\t\t\t\t\tboolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n+\t\t\t\t\t\tswitch (lastChar) {\n+\t\t\t\t\t\tcase 'l':\n+\t\t\t\t\t\tcase 'L':\n+\t\t\t\t\t\t\tif (dec == null\n+\t\t\t\t\t\t\t\t\t&& exp == null\n+\t\t\t\t\t\t\t\t\t&& (numeric.charAt(0) == '-'\n+\t\t\t\t\t\t\t\t\t\t\t&& isDigits(numeric.substring(1)) || isDigits(numeric))) {\n+\t\t\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\t\t\treturn createLong(numeric);\n+\t\t\t\t\t\t\t\t} catch (NumberFormatException nfe) {\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\treturn createBigInteger(numeric);\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tthrow new NumberFormatException(str\n+\t\t\t\t\t\t\t\t\t+ \" is not a valid number.\");\n+\t\t\t\t\t\tcase 'f':\n+\t\t\t\t\t\tcase 'F':\n+\t\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\t\tFloat f = NumberUtils.createFloat(numeric);\n+\t\t\t\t\t\t\t\tif (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n+\t\t\t\t\t\t\t\t\treturn f;\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t} catch (NumberFormatException nfe) {\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\tcase 'd':\n+\t\t\t\t\t\tcase 'D':\n+\t\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\t\tDouble d = NumberUtils.createDouble(numeric);\n+\t\t\t\t\t\t\t\tif (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {\n+\t\t\t\t\t\t\t\t\treturn d;\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t} catch (NumberFormatException nfe) {\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\t\treturn createBigDecimal(numeric);\n+\t\t\t\t\t\t\t} catch (NumberFormatException e) {\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\tdefault:\n+\t\t\t\t\t\t\tthrow new NumberFormatException(str\n+\t\t\t\t\t\t\t\t\t+ \" is not a valid number.\");\n+\t\t\t\t\t\t}\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tif (expPos > -1 && expPos < str.length() - 1) {\n+\t\t\t\t\t\t\texp = str.substring(expPos + 1, str.length());\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\texp = null;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tif (dec == null && exp == null) {\n+\t\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\t\treturn createInteger(str);\n+\t\t\t\t\t\t\t} catch (NumberFormatException nfe) {\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\t\treturn createLong(str);\n+\t\t\t\t\t\t\t} catch (NumberFormatException nfe) {\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\treturn createBigInteger(str);\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tboolean allZeros = isAllZeros(mant)\n+\t\t\t\t\t\t\t\t\t&& isAllZeros(exp);\n+\t\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\t\tFloat f = createFloat(str);\n+\t\t\t\t\t\t\t\tif (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n+\t\t\t\t\t\t\t\t\treturn f;\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t} catch (NumberFormatException nfe) {\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\t\tDouble d = createDouble(str);\n+\t\t\t\t\t\t\t\tif (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n+\t\t\t\t\t\t\t\t\treturn d;\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t} catch (NumberFormatException nfe) {\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\treturn createBigDecimal(str);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n                 } catch (NumberFormatException nfe) { // NOPMD\n                     // ignore the bad number\n                 }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 563, 
          "faulty": "return createInteger(str);", 
          "type": "Replace", 
          "seed": "if (!Character.isDigit(lastChar) && lastChar != '.') {\n  if (expPos > -1 && expPos < str.length() - 1) {\n    exp=str.substring(expPos + 1,str.length() - 1);\n  }\n else {\n    exp=null;\n  }\n  String numeric=str.substring(0,str.length() - 1);\n  boolean allZeros=isAllZeros(mant) && isAllZeros(exp);\nswitch (lastChar) {\ncase 'l':\ncase 'L':\n    if (dec == null && exp == null && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {\n      try {\n        return createLong(numeric);\n      }\n catch (      NumberFormatException nfe) {\n      }\n      return createBigInteger(numeric);\n    }\n  throw new NumberFormatException(str + \" is not a valid number.\");\ncase 'f':\ncase 'F':\ntry {\n  Float f=NumberUtils.createFloat(numeric);\n  if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n    return f;\n  }\n}\n catch (NumberFormatException nfe) {\n}\ncase 'd':\ncase 'D':\ntry {\nDouble d=NumberUtils.createDouble(numeric);\nif (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {\n  return d;\n}\n}\n catch (NumberFormatException nfe) {\n}\ntry {\nreturn createBigDecimal(numeric);\n}\n catch (NumberFormatException e) {\n}\ndefault :\nthrow new NumberFormatException(str + \" is not a valid number.\");\n}\n}\n else {\nif (expPos > -1 && expPos < str.length() - 1) {\nexp=str.substring(expPos + 1,str.length());\n}\n else {\nexp=null;\n}\nif (dec == null && exp == null) {\ntry {\nreturn createInteger(str);\n}\n catch (NumberFormatException nfe) {\n}\ntry {\nreturn createLong(str);\n}\n catch (NumberFormatException nfe) {\n}\nreturn createBigInteger(str);\n}\n else {\nboolean allZeros=isAllZeros(mant) && isAllZeros(exp);\ntry {\nFloat f=createFloat(str);\nif (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\nreturn f;\n}\n}\n catch (NumberFormatException nfe) {\n}\ntry {\nDouble d=createDouble(str);\nif (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\nreturn d;\n}\n}\n catch (NumberFormatException nfe) {\n}\nreturn createBigDecimal(str);\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return 0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:41:40.203962304 -0500\n+++ /tmp/Arja_Defects4J_Lang_7/patches_nbfi/Patch_256/patched/tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:44:38.419951570 -0500\n@@ -450,11 +450,13 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n-            if (str.startsWith(\"-\")) { // drop -\n+            if (str.startsWith(\"-\")) {\n+\t\t\t\thexDigits--;\n+\t\t\t}\n+\t\t\tif (str.startsWith(\"-\")) { // drop -\n                 hexDigits--;\n             }\n             if (hexDigits > 8) { // too many for an int\n@@ -532,7 +534,7 @@\n                 case 'd' :\n                 case 'D' :\n                     try {\n-                        Double d = NumberUtils.createDouble(numeric);\n+                        Double d = createDouble(str);\n                         if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {\n                             return d;\n                         }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 535, 
          "faulty": "Double d=NumberUtils.createDouble(numeric);", 
          "type": "Replace", 
          "seed": "Double d=createDouble(str);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 457, 
          "faulty": "if (str.startsWith(\"-\")) {\n  hexDigits--;\n}", 
          "type": "InsertBefore", 
          "seed": "if (str.startsWith(\"-\")) {\n  hexDigits--;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return 1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:41:40.203962304 -0500\n+++ /tmp/Arja_Defects4J_Lang_7/patches_nbfi/Patch_238/patched/tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:44:34.083803166 -0500\n@@ -449,9 +449,17 @@\n         if (StringUtils.isBlank(str)) {\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n-        if (str.startsWith(\"--\")) {\n-            return null;\n-        }\n+        if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")\n+\t\t\t\t|| str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n+\t\t\tint hexDigits = str.length() - 2;\n+\t\t\tif (str.startsWith(\"-\")) {\n+\t\t\t\thexDigits--;\n+\t\t\t}\n+\t\t\tif (hexDigits > 8) {\n+\t\t\t\treturn createLong(str);\n+\t\t\t}\n+\t\t\treturn createInteger(str);\n+\t\t}\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n             if (str.startsWith(\"-\")) { // drop -\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 452, 
          "faulty": "if (str.startsWith(\"--\")) {\n  return null;\n}", 
          "type": "Replace", 
          "seed": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\")|| str.startsWith(\"-0X\")) {\n  int hexDigits=str.length() - 2;\n  if (str.startsWith(\"-\")) {\n    hexDigits--;\n  }\n  if (hexDigits > 8) {\n    return createLong(str);\n  }\n  return createInteger(str);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return 1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:41:40.203962304 -0500\n+++ /tmp/Arja_Defects4J_Lang_7/patches_nbfi/Patch_953/patched/tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:47:31.389871463 -0500\n@@ -449,9 +449,9 @@\n         if (StringUtils.isBlank(str)) {\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n-        if (str.startsWith(\"--\")) {\n-            return null;\n-        }\n+        if (str == null) {\n+\t\t\treturn null;\n+\t\t}\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n             if (str.startsWith(\"-\")) { // drop -\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 452, 
          "faulty": "if (str.startsWith(\"--\")) {\n  return null;\n}", 
          "type": "Replace", 
          "seed": "if (str == null) {\n  return null;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:41:40.203962304 -0500\n+++ /tmp/Arja_Defects4J_Lang_7/patches_nbfi/Patch_315/patched/tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:44:51.972330529 -0500\n@@ -450,7 +450,6 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n@@ -519,7 +518,8 @@\n                 case 'F' :\n                     try {\n                         Float f = NumberUtils.createFloat(numeric);\n-                        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n+                        exp = str.substring(expPos + 1, str.length() - 1);\n+\t\t\t\t\t\tif (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                             //If it's too big for a float or the float value = 0 and the string\n                             //has non-zeros in it, then float does not have the precision we want\n                             return f;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 522, 
          "faulty": "if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n  return f;\n}", 
          "type": "InsertBefore", 
          "seed": "exp=str.substring(expPos + 1,str.length() - 1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return createLong(str);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:41:40.203962304 -0500\n+++ /tmp/Arja_Defects4J_Lang_7/patches_nbfi/Patch_526/patched/tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:45:43.720987473 -0500\n@@ -450,11 +450,13 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n-            if (str.startsWith(\"-\")) { // drop -\n+            if (str.startsWith(\"-\")) {\n+\t\t\t\thexDigits--;\n+\t\t\t}\n+\t\t\tif (str.startsWith(\"-\")) { // drop -\n                 hexDigits--;\n             }\n             if (hexDigits > 8) { // too many for an int\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 457, 
          "faulty": "if (str.startsWith(\"-\")) {\n  hexDigits--;\n}", 
          "type": "InsertBefore", 
          "seed": "if (str.startsWith(\"-\")) {\n  hexDigits--;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return createLong(str);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:41:40.203962304 -0500\n+++ /tmp/Arja_Defects4J_Lang_7/patches_nbfi/Patch_721/patched/tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:46:32.205443121 -0500\n@@ -450,7 +450,6 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n@@ -532,7 +531,7 @@\n                 case 'd' :\n                 case 'D' :\n                     try {\n-                        Double d = NumberUtils.createDouble(numeric);\n+                        Double d = createDouble(str);\n                         if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {\n                             return d;\n                         }\n@@ -583,7 +582,12 @@\n                     // ignore the bad number\n                 }\n                 try {\n-                    Double d = createDouble(str);\n+                    if (expPos > -1 && expPos < str.length() - 1) {\n+\t\t\t\t\t\texp = str.substring(expPos + 1, str.length());\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\texp = null;\n+\t\t\t\t\t}\n+\t\t\t\t\tDouble d = createDouble(str);\n                     if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                         return d;\n                     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 535, 
          "faulty": "Double d=NumberUtils.createDouble(numeric);", 
          "type": "Replace", 
          "seed": "Double d=createDouble(str);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 586, 
          "faulty": "Double d=createDouble(str);", 
          "type": "InsertBefore", 
          "seed": "if (expPos > -1 && expPos < str.length() - 1) {\n  exp=str.substring(expPos + 1,str.length());\n}\n else {\n  exp=null;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return 1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:41:40.203962304 -0500\n+++ /tmp/Arja_Defects4J_Lang_7/patches_nbfi/Patch_775/patched/tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:46:45.725569175 -0500\n@@ -449,9 +449,9 @@\n         if (StringUtils.isBlank(str)) {\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n-        if (str.startsWith(\"--\")) {\n-            return null;\n-        }\n+        if (str == null) {\n+\t\t\tthrow new IllegalArgumentException(\"The string must not be null\");\n+\t\t}\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n             if (str.startsWith(\"-\")) { // drop -\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 452, 
          "faulty": "if (str.startsWith(\"--\")) {\n  return null;\n}", 
          "type": "Replace", 
          "seed": "if (str == null) {\n  throw new IllegalArgumentException(\"The string must not be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return Short.parseShort(str);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:41:40.203962304 -0500\n+++ /tmp/Arja_Defects4J_Lang_7/patches_nbfi/Patch_586/patched/tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:45:57.953121847 -0500\n@@ -450,7 +450,6 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n@@ -585,7 +584,8 @@\n                 try {\n                     Double d = createDouble(str);\n                     if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n-                        return d;\n+                        mant = str.substring(0, expPos);\n+\t\t\t\t\t\treturn d;\n                     }\n                 } catch (NumberFormatException nfe) { // NOPMD\n                     // ignore the bad number\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 588, 
          "faulty": "return d;", 
          "type": "InsertBefore", 
          "seed": "mant=str.substring(0,expPos);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return Short.parseShort(str);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:41:40.203962304 -0500\n+++ /tmp/Arja_Defects4J_Lang_7/patches_nbfi/Patch_1097/patched/tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:48:06.582098714 -0500\n@@ -450,7 +450,7 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n+            return Short.parseShort(str);\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n@@ -583,7 +583,12 @@\n                     // ignore the bad number\n                 }\n                 try {\n-                    Double d = createDouble(str);\n+                    if (expPos > -1 && expPos < str.length() - 1) {\n+\t\t\t\t\t\texp = str.substring(expPos + 1, str.length());\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\texp = null;\n+\t\t\t\t\t}\n+\t\t\t\t\tDouble d = createDouble(str);\n                     if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                         return d;\n                     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 586, 
          "faulty": "Double d=createDouble(str);", 
          "type": "InsertBefore", 
          "seed": "if (expPos > -1 && expPos < str.length() - 1) {\n  exp=str.substring(expPos + 1,str.length());\n}\n else {\n  exp=null;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Replace", 
          "seed": "return Short.parseShort(str);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:41:40.203962304 -0500\n+++ /tmp/Arja_Defects4J_Lang_7/patches_nbfi/Patch_978/patched/tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:47:37.569911065 -0500\n@@ -450,7 +450,6 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n@@ -511,7 +510,16 @@\n                         } catch (NumberFormatException nfe) { // NOPMD\n                             // Too big for a long\n                         }\n-                        return createBigInteger(numeric);\n+                        if (expPos > -1) {\n+\t\t\t\t\t\t\tif (expPos > str.length()) {\n+\t\t\t\t\t\t\t\tthrow new NumberFormatException(str\n+\t\t\t\t\t\t\t\t\t\t+ \" is not a valid number.\");\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tmant = str.substring(0, expPos);\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tmant = str;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\treturn createBigInteger(numeric);\n \n                     }\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return createLong(str);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 514, 
          "faulty": "return createBigInteger(numeric);", 
          "type": "InsertBefore", 
          "seed": "if (expPos > -1) {\n  if (expPos > str.length()) {\n    throw new NumberFormatException(str + \" is not a valid number.\");\n  }\n  mant=str.substring(0,expPos);\n}\n else {\n  mant=str;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:41:40.203962304 -0500\n+++ /tmp/Arja_Defects4J_Lang_7/patches_nbfi/Patch_283/patched/tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:44:44.652139898 -0500\n@@ -450,7 +450,7 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n+            return new BigDecimal(str);\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Replace", 
          "seed": "return new BigDecimal(str);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:41:40.203962304 -0500\n+++ /tmp/Arja_Defects4J_Lang_7/patches_nbfi/Patch_541/patched/tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:45:47.189020267 -0500\n@@ -450,14 +450,16 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n             if (str.startsWith(\"-\")) { // drop -\n                 hexDigits--;\n             }\n-            if (hexDigits > 8) { // too many for an int\n+            if (str.startsWith(\"--\")) {\n+\t\t\t\treturn null;\n+\t\t\t}\n+\t\t\tif (hexDigits > 8) { // too many for an int\n                 return createLong(str);\n             }\n             return createInteger(str);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 460, 
          "faulty": "if (hexDigits > 8) {\n  return createLong(str);\n}", 
          "type": "InsertBefore", 
          "seed": "if (str.startsWith(\"--\")) {\n  return null;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return toFloat(str,0.0f);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:41:40.203962304 -0500\n+++ /tmp/Arja_Defects4J_Lang_7/patches_nbfi/Patch_830/patched/tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:46:59.401672170 -0500\n@@ -450,7 +450,6 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n@@ -585,7 +584,8 @@\n                 try {\n                     Double d = createDouble(str);\n                     if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n-                        return d;\n+                        dec = str.substring(decPos + 1);\n+\t\t\t\t\t\treturn d;\n                     }\n                 } catch (NumberFormatException nfe) { // NOPMD\n                     // ignore the bad number\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 588, 
          "faulty": "return d;", 
          "type": "InsertBefore", 
          "seed": "dec=str.substring(decPos + 1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return 0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:41:40.203962304 -0500\n+++ /tmp/Arja_Defects4J_Lang_7/patches_nbfi/Patch_1352/patched/tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:49:10.978525950 -0500\n@@ -450,13 +450,10 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n+            return Short.parseShort(str);\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n-            if (str.startsWith(\"-\")) { // drop -\n-                hexDigits--;\n-            }\n             if (hexDigits > 8) { // too many for an int\n                 return createLong(str);\n             }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 457, 
          "faulty": "if (str.startsWith(\"-\")) {\n  hexDigits--;\n}", 
          "type": "Delete", 
          "seed": "if (str.startsWith(\"-\")) {\n  hexDigits--;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Replace", 
          "seed": "return Short.parseShort(str);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:41:40.203962304 -0500\n+++ /tmp/Arja_Defects4J_Lang_7/patches_nbfi/Patch_1148/patched/tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:48:19.298180036 -0500\n@@ -450,7 +450,6 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n@@ -472,7 +471,8 @@\n         if (decPos > -1) {\n \n             if (expPos > -1) {\n-                if (expPos < decPos || expPos > str.length()) {\n+                mant = str;\n+\t\t\t\tif (expPos < decPos || expPos > str.length()) {\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n                 }\n                 dec = str.substring(decPos + 1, expPos);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 475, 
          "faulty": "if (expPos < decPos || expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}", 
          "type": "InsertBefore", 
          "seed": "mant=str;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return 1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:41:40.203962304 -0500\n+++ /tmp/Arja_Defects4J_Lang_7/patches_nbfi/Patch_572/patched/tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:45:54.493089228 -0500\n@@ -447,10 +447,13 @@\n             return null;\n         }\n         if (StringUtils.isBlank(str)) {\n+\t\t\tthrow new NumberFormatException(\n+\t\t\t\t\t\"A blank string is not a valid number\");\n+\t\t}\n+\t\tif (StringUtils.isBlank(str)) {\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 449, 
          "faulty": "if (StringUtils.isBlank(str)) {\n  throw new NumberFormatException(\"A blank string is not a valid number\");\n}", 
          "type": "InsertBefore", 
          "seed": "if (StringUtils.isBlank(str)) {\n  throw new NumberFormatException(\"A blank string is not a valid number\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return 1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:41:40.203962304 -0500\n+++ /tmp/Arja_Defects4J_Lang_7/patches_nbfi/Patch_1215/patched/tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:48:36.286290833 -0500\n@@ -450,7 +450,6 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n@@ -569,7 +568,11 @@\n                 } catch (NumberFormatException nfe) { // NOPMD\n                     // ignore the bad number\n                 }\n-                return createBigInteger(str);\n+                if (str == null) {\n+\t\t\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\t\t\"The string must not be null\");\n+\t\t\t\t}\n+\t\t\t\treturn createBigInteger(str);\n \n             } else {\n                 //Must be a float,double,BigDec\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 572, 
          "faulty": "return createBigInteger(str);", 
          "type": "InsertBefore", 
          "seed": "if (str == null) {\n  throw new IllegalArgumentException(\"The string must not be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return Short.parseShort(str);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:41:40.203962304 -0500\n+++ /tmp/Arja_Defects4J_Lang_7/patches_nbfi/Patch_716/patched/tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:46:31.121432997 -0500\n@@ -450,7 +450,7 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n+            return createLong(str);\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Replace", 
          "seed": "return createLong(str);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:41:40.203962304 -0500\n+++ /tmp/Arja_Defects4J_Lang_7/patches_nbfi/Patch_350/patched/tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:45:00.328516296 -0500\n@@ -450,7 +450,6 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n@@ -583,7 +582,12 @@\n                     // ignore the bad number\n                 }\n                 try {\n-                    Double d = createDouble(str);\n+                    if (expPos > -1 && expPos < str.length() - 1) {\n+\t\t\t\t\t\texp = str.substring(expPos + 1, str.length());\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\texp = null;\n+\t\t\t\t\t}\n+\t\t\t\t\tDouble d = createDouble(str);\n                     if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                         return d;\n                     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 586, 
          "faulty": "Double d=createDouble(str);", 
          "type": "InsertBefore", 
          "seed": "if (expPos > -1 && expPos < str.length() - 1) {\n  exp=str.substring(expPos + 1,str.length());\n}\n else {\n  exp=null;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return Double.NaN;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:41:40.203962304 -0500\n+++ /tmp/Arja_Defects4J_Lang_7/patches_nbfi/Patch_244/patched/tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:44:35.459851787 -0500\n@@ -449,9 +449,6 @@\n         if (StringUtils.isBlank(str)) {\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n-        if (str.startsWith(\"--\")) {\n-            return null;\n-        }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n             if (str.startsWith(\"-\")) { // drop -\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 452, 
          "faulty": "if (str.startsWith(\"--\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "if (str == null) {\n  return null;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return toFloat(str,0.0f);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:41:40.203962304 -0500\n+++ /tmp/Arja_Defects4J_Lang_7/patches_nbfi/Patch_651/patched/tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:46:14.745279710 -0500\n@@ -449,9 +449,9 @@\n         if (StringUtils.isBlank(str)) {\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n-        if (str.startsWith(\"--\")) {\n-            return null;\n-        }\n+        if (str == null) {\n+\t\t\treturn null;\n+\t\t}\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n             if (str.startsWith(\"-\")) { // drop -\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 452, 
          "faulty": "if (str.startsWith(\"--\")) {\n  return null;\n}", 
          "type": "Replace", 
          "seed": "if (str == null) {\n  return null;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return toFloat(str,0.0f);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:41:40.203962304 -0500\n+++ /tmp/Arja_Defects4J_Lang_7/patches_nbfi/Patch_536/patched/tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:45:46.129010247 -0500\n@@ -450,7 +450,6 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n@@ -511,7 +510,16 @@\n                         } catch (NumberFormatException nfe) { // NOPMD\n                             // Too big for a long\n                         }\n-                        return createBigInteger(numeric);\n+                        if (expPos > -1) {\n+\t\t\t\t\t\t\tif (expPos > str.length()) {\n+\t\t\t\t\t\t\t\tthrow new NumberFormatException(str\n+\t\t\t\t\t\t\t\t\t\t+ \" is not a valid number.\");\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tmant = str.substring(0, expPos);\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tmant = str;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\treturn createBigInteger(numeric);\n \n                     }\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n@@ -532,7 +540,7 @@\n                 case 'd' :\n                 case 'D' :\n                     try {\n-                        Double d = NumberUtils.createDouble(numeric);\n+                        Double d = createDouble(str);\n                         if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {\n                             return d;\n                         }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 535, 
          "faulty": "Double d=NumberUtils.createDouble(numeric);", 
          "type": "Replace", 
          "seed": "Double d=createDouble(str);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 514, 
          "faulty": "return createBigInteger(numeric);", 
          "type": "InsertBefore", 
          "seed": "if (expPos > -1) {\n  if (expPos > str.length()) {\n    throw new NumberFormatException(str + \" is not a valid number.\");\n  }\n  mant=str.substring(0,expPos);\n}\n else {\n  mant=str;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:41:40.203962304 -0500\n+++ /tmp/Arja_Defects4J_Lang_7/patches_nbfi/Patch_268/patched/tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:44:41.100035922 -0500\n@@ -450,7 +450,6 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n@@ -572,7 +571,8 @@\n                 return createBigInteger(str);\n \n             } else {\n-                //Must be a float,double,BigDec\n+                dec = null;\n+\t\t\t\t//Must be a float,double,BigDec\n                 boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n                 try {\n                     Float f = createFloat(str);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return createLong(str);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 576, 
          "faulty": "boolean allZeros=isAllZeros(mant) && isAllZeros(exp);", 
          "type": "InsertBefore", 
          "seed": "dec=null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:41:40.203962304 -0500\n+++ /tmp/Arja_Defects4J_Lang_7/patches_nbfi/Patch_346/patched/tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:44:59.500499186 -0500\n@@ -450,7 +450,6 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n@@ -560,7 +559,10 @@\n             if (dec == null && exp == null) {\n                 //Must be an int,long,bigint\n                 try {\n-                    return createInteger(str);\n+                    if (str.startsWith(\"--\")) {\n+\t\t\t\t\t\treturn null;\n+\t\t\t\t\t}\n+\t\t\t\t\treturn createInteger(str);\n                 } catch (NumberFormatException nfe) { // NOPMD\n                     // ignore the bad number\n                 }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 563, 
          "faulty": "return createInteger(str);", 
          "type": "InsertBefore", 
          "seed": "if (str.startsWith(\"--\")) {\n  return null;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return toFloat(str,0.0f);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:41:40.203962304 -0500\n+++ /tmp/Arja_Defects4J_Lang_7/patches_nbfi/Patch_1043/patched/tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:47:53.950017636 -0500\n@@ -450,7 +450,6 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n@@ -518,7 +517,16 @@\n                 case 'f' :\n                 case 'F' :\n                     try {\n-                        Float f = NumberUtils.createFloat(numeric);\n+                        if (expPos > -1) {\n+\t\t\t\t\t\t\tif (expPos < decPos || expPos > str.length()) {\n+\t\t\t\t\t\t\t\tthrow new NumberFormatException(str\n+\t\t\t\t\t\t\t\t\t\t+ \" is not a valid number.\");\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tdec = str.substring(decPos + 1, expPos);\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tdec = str.substring(decPos + 1);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tFloat f = NumberUtils.createFloat(numeric);\n                         if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                             //If it's too big for a float or the float value = 0 and the string\n                             //has non-zeros in it, then float does not have the precision we want\n@@ -532,7 +540,7 @@\n                 case 'd' :\n                 case 'D' :\n                     try {\n-                        Double d = NumberUtils.createDouble(numeric);\n+                        Double d = createDouble(str);\n                         if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {\n                             return d;\n                         }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 535, 
          "faulty": "Double d=NumberUtils.createDouble(numeric);", 
          "type": "Replace", 
          "seed": "Double d=createDouble(str);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 521, 
          "faulty": "Float f=NumberUtils.createFloat(numeric);", 
          "type": "InsertBefore", 
          "seed": "if (expPos > -1) {\n  if (expPos < decPos || expPos > str.length()) {\n    throw new NumberFormatException(str + \" is not a valid number.\");\n  }\n  dec=str.substring(decPos + 1,expPos);\n}\n else {\n  dec=str.substring(decPos + 1);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return new BigDecimal(str);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:41:40.203962304 -0500\n+++ /tmp/Arja_Defects4J_Lang_7/patches_nbfi/Patch_370/patched/tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:45:05.168612207 -0500\n@@ -450,12 +450,12 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n+            return Short.parseShort(str);\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n             if (str.startsWith(\"-\")) { // drop -\n-                hexDigits--;\n+                \n             }\n             if (hexDigits > 8) { // too many for an int\n                 return createLong(str);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 458, 
          "faulty": "hexDigits--;", 
          "type": "Delete", 
          "seed": "return Double.parseDouble(str);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Replace", 
          "seed": "return Short.parseShort(str);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:41:40.203962304 -0500\n+++ /tmp/Arja_Defects4J_Lang_7/patches_nbfi/Patch_791/patched/tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:46:49.721606355 -0500\n@@ -450,7 +450,6 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n@@ -511,7 +510,11 @@\n                         } catch (NumberFormatException nfe) { // NOPMD\n                             // Too big for a long\n                         }\n-                        return createBigInteger(numeric);\n+                        if (str == null) {\n+\t\t\t\t\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\t\t\t\t\"The string must not be null\");\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\treturn createBigInteger(numeric);\n \n                     }\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return createLong(str);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 514, 
          "faulty": "return createBigInteger(numeric);", 
          "type": "InsertBefore", 
          "seed": "if (str == null) {\n  throw new IllegalArgumentException(\"The string must not be null\");\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:41:40.203962304 -0500\n+++ /tmp/Arja_Defects4J_Lang_7/patches_nbfi/Patch_837/patched/tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:47:01.049682192 -0500\n@@ -450,7 +450,7 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n+            return Short.parseShort(str);\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n@@ -540,7 +540,11 @@\n                         // ignore the bad number\n                     }\n                     try {\n-                        return createBigDecimal(numeric);\n+                        if (expPos > str.length()) {\n+\t\t\t\t\t\t\tthrow new NumberFormatException(str\n+\t\t\t\t\t\t\t\t\t+ \" is not a valid number.\");\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\treturn createBigDecimal(numeric);\n                     } catch (NumberFormatException e) { // NOPMD\n                         // ignore the bad number\n                     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 543, 
          "faulty": "return createBigDecimal(numeric);", 
          "type": "InsertBefore", 
          "seed": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Replace", 
          "seed": "return Short.parseShort(str);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:41:40.203962304 -0500\n+++ /tmp/Arja_Defects4J_Lang_7/patches_nbfi/Patch_725/patched/tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:46:32.997450517 -0500\n@@ -450,10 +450,20 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n-            int hexDigits = str.length() - 2; // drop 0x\n+            if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")\n+\t\t\t\t\t|| str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n+\t\t\t\tint hexDigits = str.length() - 2;\n+\t\t\t\tif (str.startsWith(\"-\")) {\n+\t\t\t\t\thexDigits--;\n+\t\t\t\t}\n+\t\t\t\tif (hexDigits > 8) {\n+\t\t\t\t\treturn createLong(str);\n+\t\t\t\t}\n+\t\t\t\treturn createInteger(str);\n+\t\t\t}\n+\t\t\tint hexDigits = str.length() - 2; // drop 0x\n             if (str.startsWith(\"-\")) { // drop -\n                 hexDigits--;\n             }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 456, 
          "faulty": "int hexDigits=str.length() - 2;", 
          "type": "InsertBefore", 
          "seed": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\")|| str.startsWith(\"-0X\")) {\n  int hexDigits=str.length() - 2;\n  if (str.startsWith(\"-\")) {\n    hexDigits--;\n  }\n  if (hexDigits > 8) {\n    return createLong(str);\n  }\n  return createInteger(str);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return 1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:41:40.203962304 -0500\n+++ /tmp/Arja_Defects4J_Lang_7/patches_nbfi/Patch_1003/patched/tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:47:43.977952483 -0500\n@@ -450,7 +450,6 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n@@ -482,7 +481,8 @@\n             mant = str.substring(0, decPos);\n         } else {\n             if (expPos > -1) {\n-                if (expPos > str.length()) {\n+                mant = str;\n+\t\t\t\tif (expPos > str.length()) {\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n                 }\n                 mant = str.substring(0, expPos);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 485, 
          "faulty": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}", 
          "type": "InsertBefore", 
          "seed": "mant=str;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return toFloat(str,0.0f);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:41:40.203962304 -0500\n+++ /tmp/Arja_Defects4J_Lang_7/patches_nbfi/Patch_1134/patched/tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:48:15.974158640 -0500\n@@ -450,12 +450,11 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n             if (str.startsWith(\"-\")) { // drop -\n-                hexDigits--;\n+                \n             }\n             if (hexDigits > 8) { // too many for an int\n                 return createLong(str);\n@@ -493,7 +492,90 @@\n         }\n         if (!Character.isDigit(lastChar) && lastChar != '.') {\n             if (expPos > -1 && expPos < str.length() - 1) {\n-                exp = str.substring(expPos + 1, str.length() - 1);\n+                if (!Character.isDigit(lastChar) && lastChar != '.') {\n+\t\t\t\t\tif (expPos > -1 && expPos < str.length() - 1) {\n+\t\t\t\t\t\texp = str.substring(expPos + 1, str.length() - 1);\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\texp = null;\n+\t\t\t\t\t}\n+\t\t\t\t\tString numeric = str.substring(0, str.length() - 1);\n+\t\t\t\t\tboolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n+\t\t\t\t\tswitch (lastChar) {\n+\t\t\t\t\tcase 'l':\n+\t\t\t\t\tcase 'L':\n+\t\t\t\t\t\tif (dec == null\n+\t\t\t\t\t\t\t\t&& exp == null\n+\t\t\t\t\t\t\t\t&& (numeric.charAt(0) == '-'\n+\t\t\t\t\t\t\t\t\t\t&& isDigits(numeric.substring(1)) || isDigits(numeric))) {\n+\t\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\t\treturn createLong(numeric);\n+\t\t\t\t\t\t\t} catch (NumberFormatException nfe) {\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\treturn createBigInteger(numeric);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tthrow new NumberFormatException(str\n+\t\t\t\t\t\t\t\t+ \" is not a valid number.\");\n+\t\t\t\t\tcase 'f':\n+\t\t\t\t\tcase 'F':\n+\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\tFloat f = NumberUtils.createFloat(numeric);\n+\t\t\t\t\t\t\tif (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n+\t\t\t\t\t\t\t\treturn f;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t} catch (NumberFormatException nfe) {\n+\t\t\t\t\t\t}\n+\t\t\t\t\tcase 'd':\n+\t\t\t\t\tcase 'D':\n+\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\tDouble d = NumberUtils.createDouble(numeric);\n+\t\t\t\t\t\t\tif (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {\n+\t\t\t\t\t\t\t\treturn d;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t} catch (NumberFormatException nfe) {\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\treturn createBigDecimal(numeric);\n+\t\t\t\t\t\t} catch (NumberFormatException e) {\n+\t\t\t\t\t\t}\n+\t\t\t\t\tdefault:\n+\t\t\t\t\t\tthrow new NumberFormatException(str\n+\t\t\t\t\t\t\t\t+ \" is not a valid number.\");\n+\t\t\t\t\t}\n+\t\t\t\t} else {\n+\t\t\t\t\tif (expPos > -1 && expPos < str.length() - 1) {\n+\t\t\t\t\t\texp = str.substring(expPos + 1, str.length());\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\texp = null;\n+\t\t\t\t\t}\n+\t\t\t\t\tif (dec == null && exp == null) {\n+\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\treturn createInteger(str);\n+\t\t\t\t\t\t} catch (NumberFormatException nfe) {\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\treturn createLong(str);\n+\t\t\t\t\t\t} catch (NumberFormatException nfe) {\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\treturn createBigInteger(str);\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tboolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n+\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\tFloat f = createFloat(str);\n+\t\t\t\t\t\t\tif (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n+\t\t\t\t\t\t\t\treturn f;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t} catch (NumberFormatException nfe) {\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\tDouble d = createDouble(str);\n+\t\t\t\t\t\t\tif (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n+\t\t\t\t\t\t\t\treturn d;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t} catch (NumberFormatException nfe) {\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\treturn createBigDecimal(str);\n+\t\t\t\t\t}\n+\t\t\t\t}\n             } else {\n                 exp = null;\n             }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 458, 
          "faulty": "hexDigits--;", 
          "type": "Delete", 
          "seed": "return Long.parseLong(str);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return 1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 496, 
          "faulty": "exp=str.substring(expPos + 1,str.length() - 1);", 
          "type": "Replace", 
          "seed": "if (!Character.isDigit(lastChar) && lastChar != '.') {\n  if (expPos > -1 && expPos < str.length() - 1) {\n    exp=str.substring(expPos + 1,str.length() - 1);\n  }\n else {\n    exp=null;\n  }\n  String numeric=str.substring(0,str.length() - 1);\n  boolean allZeros=isAllZeros(mant) && isAllZeros(exp);\nswitch (lastChar) {\ncase 'l':\ncase 'L':\n    if (dec == null && exp == null && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {\n      try {\n        return createLong(numeric);\n      }\n catch (      NumberFormatException nfe) {\n      }\n      return createBigInteger(numeric);\n    }\n  throw new NumberFormatException(str + \" is not a valid number.\");\ncase 'f':\ncase 'F':\ntry {\n  Float f=NumberUtils.createFloat(numeric);\n  if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n    return f;\n  }\n}\n catch (NumberFormatException nfe) {\n}\ncase 'd':\ncase 'D':\ntry {\nDouble d=NumberUtils.createDouble(numeric);\nif (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {\n  return d;\n}\n}\n catch (NumberFormatException nfe) {\n}\ntry {\nreturn createBigDecimal(numeric);\n}\n catch (NumberFormatException e) {\n}\ndefault :\nthrow new NumberFormatException(str + \" is not a valid number.\");\n}\n}\n else {\nif (expPos > -1 && expPos < str.length() - 1) {\nexp=str.substring(expPos + 1,str.length());\n}\n else {\nexp=null;\n}\nif (dec == null && exp == null) {\ntry {\nreturn createInteger(str);\n}\n catch (NumberFormatException nfe) {\n}\ntry {\nreturn createLong(str);\n}\n catch (NumberFormatException nfe) {\n}\nreturn createBigInteger(str);\n}\n else {\nboolean allZeros=isAllZeros(mant) && isAllZeros(exp);\ntry {\nFloat f=createFloat(str);\nif (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\nreturn f;\n}\n}\n catch (NumberFormatException nfe) {\n}\ntry {\nDouble d=createDouble(str);\nif (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\nreturn d;\n}\n}\n catch (NumberFormatException nfe) {\n}\nreturn createBigDecimal(str);\n}\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:41:40.203962304 -0500\n+++ /tmp/Arja_Defects4J_Lang_7/patches_nbfi/Patch_1343/patched/tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:49:08.766510138 -0500\n@@ -450,7 +450,7 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n+            return Short.parseShort(str);\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n@@ -519,7 +519,30 @@\n                 case 'F' :\n                     try {\n                         Float f = NumberUtils.createFloat(numeric);\n-                        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n+                        if (decPos > -1) {\n+\t\t\t\t\t\t\tif (expPos > -1) {\n+\t\t\t\t\t\t\t\tif (expPos < decPos || expPos > str.length()) {\n+\t\t\t\t\t\t\t\t\tthrow new NumberFormatException(str\n+\t\t\t\t\t\t\t\t\t\t\t+ \" is not a valid number.\");\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\tdec = str.substring(decPos + 1, expPos);\n+\t\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\t\tdec = str.substring(decPos + 1);\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tmant = str.substring(0, decPos);\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tif (expPos > -1) {\n+\t\t\t\t\t\t\t\tif (expPos > str.length()) {\n+\t\t\t\t\t\t\t\t\tthrow new NumberFormatException(str\n+\t\t\t\t\t\t\t\t\t\t\t+ \" is not a valid number.\");\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\tmant = str.substring(0, expPos);\n+\t\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\t\tmant = str;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tdec = null;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tif (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                             //If it's too big for a float or the float value = 0 and the string\n                             //has non-zeros in it, then float does not have the precision we want\n                             return f;\n@@ -583,7 +606,16 @@\n                     // ignore the bad number\n                 }\n                 try {\n-                    Double d = createDouble(str);\n+                    if (expPos > -1) {\n+\t\t\t\t\t\tif (expPos > str.length()) {\n+\t\t\t\t\t\t\tthrow new NumberFormatException(str\n+\t\t\t\t\t\t\t\t\t+ \" is not a valid number.\");\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tmant = str.substring(0, expPos);\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tmant = str;\n+\t\t\t\t\t}\n+\t\t\t\t\tDouble d = createDouble(str);\n                     if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                         return d;\n                     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 522, 
          "faulty": "if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n  return f;\n}", 
          "type": "InsertBefore", 
          "seed": "if (decPos > -1) {\n  if (expPos > -1) {\n    if (expPos < decPos || expPos > str.length()) {\n      throw new NumberFormatException(str + \" is not a valid number.\");\n    }\n    dec=str.substring(decPos + 1,expPos);\n  }\n else {\n    dec=str.substring(decPos + 1);\n  }\n  mant=str.substring(0,decPos);\n}\n else {\n  if (expPos > -1) {\n    if (expPos > str.length()) {\n      throw new NumberFormatException(str + \" is not a valid number.\");\n    }\n    mant=str.substring(0,expPos);\n  }\n else {\n    mant=str;\n  }\n  dec=null;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 586, 
          "faulty": "Double d=createDouble(str);", 
          "type": "InsertBefore", 
          "seed": "if (expPos > -1) {\n  if (expPos > str.length()) {\n    throw new NumberFormatException(str + \" is not a valid number.\");\n  }\n  mant=str.substring(0,expPos);\n}\n else {\n  mant=str;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Replace", 
          "seed": "return Short.parseShort(str);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:41:40.203962304 -0500\n+++ /tmp/Arja_Defects4J_Lang_7/patches_nbfi/Patch_1316/patched/tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:49:02.358465336 -0500\n@@ -450,7 +450,7 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n+            return Short.parseShort(str);\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n@@ -540,7 +540,11 @@\n                         // ignore the bad number\n                     }\n                     try {\n-                        return createBigDecimal(numeric);\n+                        if (str == null) {\n+\t\t\t\t\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\t\t\t\t\"The string must not be null\");\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\treturn createBigDecimal(numeric);\n                     } catch (NumberFormatException e) { // NOPMD\n                         // ignore the bad number\n                     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 543, 
          "faulty": "return createBigDecimal(numeric);", 
          "type": "InsertBefore", 
          "seed": "if (str == null) {\n  throw new IllegalArgumentException(\"The string must not be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Replace", 
          "seed": "return Short.parseShort(str);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:41:40.203962304 -0500\n+++ /tmp/Arja_Defects4J_Lang_7/patches_nbfi/Patch_435/patched/tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:45:21.456776126 -0500\n@@ -450,7 +450,6 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n@@ -572,7 +571,11 @@\n                 return createBigInteger(str);\n \n             } else {\n-                //Must be a float,double,BigDec\n+                if (str == null) {\n+\t\t\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\t\t\"The string must not be null\");\n+\t\t\t\t}\n+\t\t\t\t//Must be a float,double,BigDec\n                 boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n                 try {\n                     Float f = createFloat(str);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return 1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 576, 
          "faulty": "boolean allZeros=isAllZeros(mant) && isAllZeros(exp);", 
          "type": "InsertBefore", 
          "seed": "if (str == null) {\n  throw new IllegalArgumentException(\"The string must not be null\");\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:41:40.203962304 -0500\n+++ /tmp/Arja_Defects4J_Lang_7/patches_nbfi/Patch_226/patched/tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:44:31.375702690 -0500\n@@ -450,7 +450,6 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n@@ -518,7 +517,11 @@\n                 case 'f' :\n                 case 'F' :\n                     try {\n-                        Float f = NumberUtils.createFloat(numeric);\n+                        if (StringUtils.isBlank(str)) {\n+\t\t\t\t\t\t\tthrow new NumberFormatException(\n+\t\t\t\t\t\t\t\t\t\"A blank string is not a valid number\");\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tFloat f = NumberUtils.createFloat(numeric);\n                         if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                             //If it's too big for a float or the float value = 0 and the string\n                             //has non-zeros in it, then float does not have the precision we want\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 521, 
          "faulty": "Float f=NumberUtils.createFloat(numeric);", 
          "type": "InsertBefore", 
          "seed": "if (StringUtils.isBlank(str)) {\n  throw new NumberFormatException(\"A blank string is not a valid number\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return Short.parseShort(str);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:41:40.203962304 -0500\n+++ /tmp/Arja_Defects4J_Lang_7/patches_nbfi/Patch_159/patched/tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:44:14.302880830 -0500\n@@ -450,7 +450,6 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n@@ -553,7 +552,10 @@\n             //User doesn't have a preference on the return type, so let's start\n             //small and go from there...\n             if (expPos > -1 && expPos < str.length() - 1) {\n-                exp = str.substring(expPos + 1, str.length());\n+                if (str == null) {\n+\t\t\t\t\treturn null;\n+\t\t\t\t}\n+\t\t\t\texp = str.substring(expPos + 1, str.length());\n             } else {\n                 exp = null;\n             }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 556, 
          "faulty": "exp=str.substring(expPos + 1,str.length());", 
          "type": "InsertBefore", 
          "seed": "if (str == null) {\n  return null;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return toFloat(str,0.0f);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:41:40.203962304 -0500\n+++ /tmp/Arja_Defects4J_Lang_7/patches_nbfi/Patch_265/patched/tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:44:40.560019364 -0500\n@@ -450,7 +450,6 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n@@ -575,7 +574,8 @@\n                 //Must be a float,double,BigDec\n                 boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n                 try {\n-                    Float f = createFloat(str);\n+                    exp = str.substring(expPos + 1, str.length() - 1);\n+\t\t\t\t\tFloat f = createFloat(str);\n                     if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                         return f;\n                     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 578, 
          "faulty": "Float f=createFloat(str);", 
          "type": "InsertBefore", 
          "seed": "exp=str.substring(expPos + 1,str.length() - 1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return new BigDecimal(str);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:41:40.203962304 -0500\n+++ /tmp/Arja_Defects4J_Lang_7/patches_nbfi/Patch_472/patched/tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:45:30.668863748 -0500\n@@ -450,7 +450,6 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n@@ -583,7 +582,8 @@\n                     // ignore the bad number\n                 }\n                 try {\n-                    Double d = createDouble(str);\n+                    exp = null;\n+\t\t\t\t\tDouble d = createDouble(str);\n                     if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                         return d;\n                     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 586, 
          "faulty": "Double d=createDouble(str);", 
          "type": "InsertBefore", 
          "seed": "exp=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return createLong(str);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:41:40.203962304 -0500\n+++ /tmp/Arja_Defects4J_Lang_7/patches_nbfi/Patch_756/patched/tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:46:40.881524059 -0500\n@@ -450,12 +450,11 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n             if (str.startsWith(\"-\")) { // drop -\n-                hexDigits--;\n+                \n             }\n             if (hexDigits > 8) { // too many for an int\n                 return createLong(str);\n@@ -482,7 +481,8 @@\n             mant = str.substring(0, decPos);\n         } else {\n             if (expPos > -1) {\n-                if (expPos > str.length()) {\n+                mant = str;\n+\t\t\t\tif (expPos > str.length()) {\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n                 }\n                 mant = str.substring(0, expPos);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 485, 
          "faulty": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}", 
          "type": "InsertBefore", 
          "seed": "mant=str;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 458, 
          "faulty": "hexDigits--;", 
          "type": "Delete", 
          "seed": "return Double.parseDouble(str);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return Short.parseShort(str);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:41:40.203962304 -0500\n+++ /tmp/Arja_Defects4J_Lang_7/patches_nbfi/Patch_1144/patched/tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:48:18.466174671 -0500\n@@ -450,16 +450,16 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n             if (str.startsWith(\"-\")) { // drop -\n                 hexDigits--;\n             }\n-            if (hexDigits > 8) { // too many for an int\n-                return createLong(str);\n-            }\n+            if (str == null) {\n+\t\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\t\"The string must not be null\");\n+\t\t\t}\n             return createInteger(str);\n         }   \n         char lastChar = str.charAt(str.length() - 1);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 460, 
          "faulty": "if (hexDigits > 8) {\n  return createLong(str);\n}", 
          "type": "Replace", 
          "seed": "if (str == null) {\n  throw new IllegalArgumentException(\"The string must not be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return 0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:41:40.203962304 -0500\n+++ /tmp/Arja_Defects4J_Lang_7/patches_nbfi/Patch_100/patched/tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:43:59.366054284 -0500\n@@ -450,7 +450,6 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n@@ -532,7 +531,7 @@\n                 case 'd' :\n                 case 'D' :\n                     try {\n-                        Double d = NumberUtils.createDouble(numeric);\n+                        Double d = createDouble(str);\n                         if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {\n                             return d;\n                         }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 535, 
          "faulty": "Double d=NumberUtils.createDouble(numeric);", 
          "type": "Replace", 
          "seed": "Double d=createDouble(str);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return Short.parseShort(str);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:41:40.203962304 -0500\n+++ /tmp/Arja_Defects4J_Lang_7/patches_nbfi/Patch_556/patched/tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:45:50.713053557 -0500\n@@ -450,7 +450,6 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n@@ -572,7 +571,12 @@\n                 return createBigInteger(str);\n \n             } else {\n-                //Must be a float,double,BigDec\n+                if (expPos > -1 && expPos < str.length() - 1) {\n+\t\t\t\t\texp = str.substring(expPos + 1, str.length());\n+\t\t\t\t} else {\n+\t\t\t\t\texp = null;\n+\t\t\t\t}\n+\t\t\t\t//Must be a float,double,BigDec\n                 boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n                 try {\n                     Float f = createFloat(str);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return Short.parseShort(str);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 576, 
          "faulty": "boolean allZeros=isAllZeros(mant) && isAllZeros(exp);", 
          "type": "InsertBefore", 
          "seed": "if (expPos > -1 && expPos < str.length() - 1) {\n  exp=str.substring(expPos + 1,str.length());\n}\n else {\n  exp=null;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:41:40.203962304 -0500\n+++ /tmp/Arja_Defects4J_Lang_7/patches_nbfi/Patch_1480/patched/tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:49:44.206766727 -0500\n@@ -446,18 +446,31 @@\n         if (str == null) {\n             return null;\n         }\n-        if (StringUtils.isBlank(str)) {\n+        if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")\n+\t\t\t\t|| str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n+\t\t\tint hexDigits = str.length() - 2;\n+\t\t\tif (str.startsWith(\"-\")) {\n+\t\t\t\thexDigits--;\n+\t\t\t}\n+\t\t\tif (hexDigits > 8) {\n+\t\t\t\treturn createLong(str);\n+\t\t\t}\n+\t\t\treturn createInteger(str);\n+\t\t}\n+\t\tif (StringUtils.isBlank(str)) {\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n             if (str.startsWith(\"-\")) { // drop -\n                 hexDigits--;\n             }\n-            if (hexDigits > 8) { // too many for an int\n+            if (str.startsWith(\"--\")) {\n+\t\t\t\treturn null;\n+\t\t\t}\n+\t\t\tif (hexDigits > 8) { // too many for an int\n                 return createLong(str);\n             }\n             return createInteger(str);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 460, 
          "faulty": "if (hexDigits > 8) {\n  return createLong(str);\n}", 
          "type": "InsertBefore", 
          "seed": "if (str.startsWith(\"--\")) {\n  return null;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 449, 
          "faulty": "if (StringUtils.isBlank(str)) {\n  throw new NumberFormatException(\"A blank string is not a valid number\");\n}", 
          "type": "InsertBefore", 
          "seed": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\")|| str.startsWith(\"-0X\")) {\n  int hexDigits=str.length() - 2;\n  if (str.startsWith(\"-\")) {\n    hexDigits--;\n  }\n  if (hexDigits > 8) {\n    return createLong(str);\n  }\n  return createInteger(str);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return Double.NaN;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:41:40.203962304 -0500\n+++ /tmp/Arja_Defects4J_Lang_7/patches_nbfi/Patch_1089/patched/tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:48:04.694086762 -0500\n@@ -446,18 +446,24 @@\n         if (str == null) {\n             return null;\n         }\n-        if (StringUtils.isBlank(str)) {\n+        if (str == null) {\n+\t\t\tthrow new IllegalArgumentException(\"The string must not be null\");\n+\t\t}\n+\t\tif (StringUtils.isBlank(str)) {\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n             if (str.startsWith(\"-\")) { // drop -\n                 hexDigits--;\n             }\n-            if (hexDigits > 8) { // too many for an int\n+            if (str == null) {\n+\t\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\t\"The string must not be null\");\n+\t\t\t}\n+\t\t\tif (hexDigits > 8) { // too many for an int\n                 return createLong(str);\n             }\n             return createInteger(str);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 460, 
          "faulty": "if (hexDigits > 8) {\n  return createLong(str);\n}", 
          "type": "InsertBefore", 
          "seed": "if (str == null) {\n  throw new IllegalArgumentException(\"The string must not be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 449, 
          "faulty": "if (StringUtils.isBlank(str)) {\n  throw new NumberFormatException(\"A blank string is not a valid number\");\n}", 
          "type": "InsertBefore", 
          "seed": "if (str == null) {\n  throw new IllegalArgumentException(\"The string must not be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return 0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:41:40.203962304 -0500\n+++ /tmp/Arja_Defects4J_Lang_7/patches_nbfi/Patch_313/patched/tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:44:51.700324092 -0500\n@@ -450,7 +450,6 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n@@ -583,7 +582,12 @@\n                     // ignore the bad number\n                 }\n                 try {\n-                    Double d = createDouble(str);\n+                    if (expPos > -1 && expPos < str.length() - 1) {\n+\t\t\t\t\t\texp = str.substring(expPos + 1, str.length() - 1);\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\texp = null;\n+\t\t\t\t\t}\n+\t\t\t\t\tDouble d = createDouble(str);\n                     if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                         return d;\n                     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 586, 
          "faulty": "Double d=createDouble(str);", 
          "type": "InsertBefore", 
          "seed": "if (expPos > -1 && expPos < str.length() - 1) {\n  exp=str.substring(expPos + 1,str.length() - 1);\n}\n else {\n  exp=null;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return createLong(str);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:41:40.203962304 -0500\n+++ /tmp/Arja_Defects4J_Lang_7/patches_nbfi/Patch_634/patched/tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:46:10.397238903 -0500\n@@ -444,13 +444,15 @@\n      */\n     public static Number createNumber(String str) throws NumberFormatException {\n         if (str == null) {\n+\t\t\treturn null;\n+\t\t}\n+\t\tif (str == null) {\n             return null;\n         }\n         if (StringUtils.isBlank(str)) {\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 446, 
          "faulty": "if (str == null) {\n  return null;\n}", 
          "type": "InsertBefore", 
          "seed": "if (str == null) {\n  return null;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return Short.parseShort(str);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:41:40.203962304 -0500\n+++ /tmp/Arja_Defects4J_Lang_7/patches_nbfi/Patch_478/patched/tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:45:32.036876739 -0500\n@@ -450,7 +450,6 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n@@ -572,7 +571,12 @@\n                 return createBigInteger(str);\n \n             } else {\n-                //Must be a float,double,BigDec\n+                if (expPos > -1 && expPos < str.length() - 1) {\n+\t\t\t\t\texp = str.substring(expPos + 1, str.length() - 1);\n+\t\t\t\t} else {\n+\t\t\t\t\texp = null;\n+\t\t\t\t}\n+\t\t\t\t//Must be a float,double,BigDec\n                 boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n                 try {\n                     Float f = createFloat(str);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return Short.parseShort(str);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 576, 
          "faulty": "boolean allZeros=isAllZeros(mant) && isAllZeros(exp);", 
          "type": "InsertBefore", 
          "seed": "if (expPos > -1 && expPos < str.length() - 1) {\n  exp=str.substring(expPos + 1,str.length() - 1);\n}\n else {\n  exp=null;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:41:40.203962304 -0500\n+++ /tmp/Arja_Defects4J_Lang_7/patches_nbfi/Patch_272/patched/tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:44:41.932061436 -0500\n@@ -450,7 +450,6 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n@@ -482,7 +481,11 @@\n             mant = str.substring(0, decPos);\n         } else {\n             if (expPos > -1) {\n-                if (expPos > str.length()) {\n+                if (expPos < decPos || expPos > str.length()) {\n+\t\t\t\t\tthrow new NumberFormatException(str\n+\t\t\t\t\t\t\t+ \" is not a valid number.\");\n+\t\t\t\t}\n+\t\t\t\tif (expPos > str.length()) {\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n                 }\n                 mant = str.substring(0, expPos);\n@@ -575,7 +578,18 @@\n                 //Must be a float,double,BigDec\n                 boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n                 try {\n-                    Float f = createFloat(str);\n+                    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")\n+\t\t\t\t\t\t\t|| str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n+\t\t\t\t\t\tint hexDigits = str.length() - 2;\n+\t\t\t\t\t\tif (str.startsWith(\"-\")) {\n+\t\t\t\t\t\t\thexDigits--;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tif (hexDigits > 8) {\n+\t\t\t\t\t\t\treturn createLong(str);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\treturn createInteger(str);\n+\t\t\t\t\t}\n+\t\t\t\t\tFloat f = createFloat(str);\n                     if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                         return f;\n                     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 485, 
          "faulty": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos < decPos || expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 578, 
          "faulty": "Float f=createFloat(str);", 
          "type": "InsertBefore", 
          "seed": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\")|| str.startsWith(\"-0X\")) {\n  int hexDigits=str.length() - 2;\n  if (str.startsWith(\"-\")) {\n    hexDigits--;\n  }\n  if (hexDigits > 8) {\n    return createLong(str);\n  }\n  return createInteger(str);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return Short.parseShort(str);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:41:40.203962304 -0500\n+++ /tmp/Arja_Defects4J_Lang_7/patches_nbfi/Patch_117/patched/tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:44:03.534228804 -0500\n@@ -450,7 +450,6 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n@@ -576,7 +575,8 @@\n                 boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n                 try {\n                     Float f = createFloat(str);\n-                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n+                    dec = null;\n+\t\t\t\t\tif (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                         return f;\n                     }\n                 } catch (NumberFormatException nfe) { // NOPMD\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 579, 
          "faulty": "if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n  return f;\n}", 
          "type": "InsertBefore", 
          "seed": "dec=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return Double.NaN;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:41:40.203962304 -0500\n+++ /tmp/Arja_Defects4J_Lang_7/patches_nbfi/Patch_1295/patched/tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:48:57.058429446 -0500\n@@ -450,7 +450,6 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n@@ -518,7 +517,16 @@\n                 case 'f' :\n                 case 'F' :\n                     try {\n-                        Float f = NumberUtils.createFloat(numeric);\n+                        if (expPos > -1) {\n+\t\t\t\t\t\t\tif (expPos < decPos || expPos > str.length()) {\n+\t\t\t\t\t\t\t\tthrow new NumberFormatException(str\n+\t\t\t\t\t\t\t\t\t\t+ \" is not a valid number.\");\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tdec = str.substring(decPos + 1, expPos);\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tdec = str.substring(decPos + 1);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tFloat f = NumberUtils.createFloat(numeric);\n                         if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                             //If it's too big for a float or the float value = 0 and the string\n                             //has non-zeros in it, then float does not have the precision we want\n@@ -575,7 +583,8 @@\n                 //Must be a float,double,BigDec\n                 boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n                 try {\n-                    Float f = createFloat(str);\n+                    exp = str.substring(expPos + 1, str.length() - 1);\n+\t\t\t\t\tFloat f = createFloat(str);\n                     if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                         return f;\n                     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 521, 
          "faulty": "Float f=NumberUtils.createFloat(numeric);", 
          "type": "InsertBefore", 
          "seed": "if (expPos > -1) {\n  if (expPos < decPos || expPos > str.length()) {\n    throw new NumberFormatException(str + \" is not a valid number.\");\n  }\n  dec=str.substring(decPos + 1,expPos);\n}\n else {\n  dec=str.substring(decPos + 1);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 578, 
          "faulty": "Float f=createFloat(str);", 
          "type": "InsertBefore", 
          "seed": "exp=str.substring(expPos + 1,str.length() - 1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return new BigDecimal(str);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:41:40.203962304 -0500\n+++ /tmp/Arja_Defects4J_Lang_7/patches_nbfi/Patch_692/patched/tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:46:25.273378329 -0500\n@@ -450,7 +450,6 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n@@ -583,7 +582,8 @@\n                     // ignore the bad number\n                 }\n                 try {\n-                    Double d = createDouble(str);\n+                    exp = str.substring(expPos + 1, str.length());\n+\t\t\t\t\tDouble d = createDouble(str);\n                     if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                         return d;\n                     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 586, 
          "faulty": "Double d=createDouble(str);", 
          "type": "InsertBefore", 
          "seed": "exp=str.substring(expPos + 1,str.length());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return Short.parseShort(str);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:41:40.203962304 -0500\n+++ /tmp/Arja_Defects4J_Lang_7/patches_nbfi/Patch_114/patched/tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:44:02.986207048 -0500\n@@ -446,11 +446,13 @@\n         if (str == null) {\n             return null;\n         }\n-        if (StringUtils.isBlank(str)) {\n+        if (str == null) {\n+\t\t\tthrow new IllegalArgumentException(\"The string must not be null\");\n+\t\t}\n+\t\tif (StringUtils.isBlank(str)) {\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 449, 
          "faulty": "if (StringUtils.isBlank(str)) {\n  throw new NumberFormatException(\"A blank string is not a valid number\");\n}", 
          "type": "InsertBefore", 
          "seed": "if (str == null) {\n  throw new IllegalArgumentException(\"The string must not be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return 0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:41:40.203962304 -0500\n+++ /tmp/Arja_Defects4J_Lang_7/patches_nbfi/Patch_1156/patched/tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:48:21.162192074 -0500\n@@ -449,9 +449,6 @@\n         if (StringUtils.isBlank(str)) {\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n-        if (str.startsWith(\"--\")) {\n-            return null;\n-        }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n             if (str.startsWith(\"-\")) { // drop -\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 452, 
          "faulty": "if (str.startsWith(\"--\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\")|| str.startsWith(\"-0X\")) {\n  int hexDigits=str.length() - 2;\n  if (str.startsWith(\"-\")) {\n    hexDigits--;\n  }\n  if (hexDigits > 8) {\n    return createLong(str);\n  }\n  return createInteger(str);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Replace", 
          "seed": "return 1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:41:40.203962304 -0500\n+++ /tmp/Arja_Defects4J_Lang_7/patches_nbfi/Patch_157/patched/tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:44:14.030864601 -0500\n@@ -450,13 +450,9 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n-            if (str.startsWith(\"-\")) { // drop -\n-                hexDigits--;\n-            }\n             if (hexDigits > 8) { // too many for an int\n                 return createLong(str);\n             }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 457, 
          "faulty": "if (str.startsWith(\"-\")) {\n  hexDigits--;\n}", 
          "type": "Delete", 
          "seed": "if (str == null) {\n  throw new IllegalArgumentException(\"The string must not be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return Short.parseShort(str);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:41:40.203962304 -0500\n+++ /tmp/Arja_Defects4J_Lang_7/patches_nbfi/Patch_818/patched/tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:46:56.437654213 -0500\n@@ -446,11 +446,21 @@\n         if (str == null) {\n             return null;\n         }\n-        if (StringUtils.isBlank(str)) {\n+        if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")\n+\t\t\t\t|| str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n+\t\t\tint hexDigits = str.length() - 2;\n+\t\t\tif (str.startsWith(\"-\")) {\n+\t\t\t\thexDigits--;\n+\t\t\t}\n+\t\t\tif (hexDigits > 8) {\n+\t\t\t\treturn createLong(str);\n+\t\t\t}\n+\t\t\treturn createInteger(str);\n+\t\t}\n+\t\tif (StringUtils.isBlank(str)) {\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n@@ -584,9 +594,7 @@\n                 }\n                 try {\n                     Double d = createDouble(str);\n-                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n-                        return d;\n-                    }\n+                    return d;\n                 } catch (NumberFormatException nfe) { // NOPMD\n                     // ignore the bad number\n                 }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 449, 
          "faulty": "if (StringUtils.isBlank(str)) {\n  throw new NumberFormatException(\"A blank string is not a valid number\");\n}", 
          "type": "InsertBefore", 
          "seed": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\")|| str.startsWith(\"-0X\")) {\n  int hexDigits=str.length() - 2;\n  if (str.startsWith(\"-\")) {\n    hexDigits--;\n  }\n  if (hexDigits > 8) {\n    return createLong(str);\n  }\n  return createInteger(str);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 587, 
          "faulty": "if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n  return d;\n}", 
          "type": "Replace", 
          "seed": "return d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return toFloat(str,0.0f);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:41:40.203962304 -0500\n+++ /tmp/Arja_Defects4J_Lang_7/patches_nbfi/Patch_1041/patched/tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:47:53.682015875 -0500\n@@ -450,7 +450,6 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n@@ -520,7 +519,8 @@\n                     try {\n                         Float f = NumberUtils.createFloat(numeric);\n                         if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n-                            //If it's too big for a float or the float value = 0 and the string\n+                            mant = str.substring(0, decPos);\n+\t\t\t\t\t\t\t//If it's too big for a float or the float value = 0 and the string\n                             //has non-zeros in it, then float does not have the precision we want\n                             return f;\n                         }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 525, 
          "faulty": "return f;", 
          "type": "InsertBefore", 
          "seed": "mant=str.substring(0,decPos);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return createLong(str);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:41:40.203962304 -0500\n+++ /tmp/Arja_Defects4J_Lang_7/patches_nbfi/Patch_447/patched/tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:45:24.436804499 -0500\n@@ -450,7 +450,6 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n@@ -575,7 +574,11 @@\n                 //Must be a float,double,BigDec\n                 boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n                 try {\n-                    Float f = createFloat(str);\n+                    if (StringUtils.isBlank(str)) {\n+\t\t\t\t\t\tthrow new NumberFormatException(\n+\t\t\t\t\t\t\t\t\"A blank string is not a valid number\");\n+\t\t\t\t\t}\n+\t\t\t\t\tFloat f = createFloat(str);\n                     if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                         return f;\n                     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 578, 
          "faulty": "Float f=createFloat(str);", 
          "type": "InsertBefore", 
          "seed": "if (StringUtils.isBlank(str)) {\n  throw new NumberFormatException(\"A blank string is not a valid number\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return Double.valueOf(str);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:41:40.203962304 -0500\n+++ /tmp/Arja_Defects4J_Lang_7/patches_nbfi/Patch_1694/patched/tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:50:40.155184368 -0500\n@@ -444,13 +444,15 @@\n      */\n     public static Number createNumber(String str) throws NumberFormatException {\n         if (str == null) {\n+\t\t\treturn null;\n+\t\t}\n+\t\tif (str == null) {\n             return null;\n         }\n         if (StringUtils.isBlank(str)) {\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n@@ -575,7 +577,11 @@\n                 //Must be a float,double,BigDec\n                 boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n                 try {\n-                    Float f = createFloat(str);\n+                    if (StringUtils.isBlank(str)) {\n+\t\t\t\t\t\tthrow new NumberFormatException(\n+\t\t\t\t\t\t\t\t\"A blank string is not a valid number\");\n+\t\t\t\t\t}\n+\t\t\t\t\tFloat f = createFloat(str);\n                     if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                         return f;\n                     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 578, 
          "faulty": "Float f=createFloat(str);", 
          "type": "InsertBefore", 
          "seed": "if (StringUtils.isBlank(str)) {\n  throw new NumberFormatException(\"A blank string is not a valid number\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 446, 
          "faulty": "if (str == null) {\n  return null;\n}", 
          "type": "InsertBefore", 
          "seed": "if (str == null) {\n  return null;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return Short.parseShort(str);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:41:40.203962304 -0500\n+++ /tmp/Arja_Defects4J_Lang_7/patches_nbfi/Patch_1062/patched/tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:47:58.530047823 -0500\n@@ -450,13 +450,13 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n-            if (str.startsWith(\"-\")) { // drop -\n-                hexDigits--;\n-            }\n+            if (StringUtils.isBlank(str)) {\n+\t\t\t\tthrow new NumberFormatException(\n+\t\t\t\t\t\t\"A blank string is not a valid number\");\n+\t\t\t}\n             if (hexDigits > 8) { // too many for an int\n                 return createLong(str);\n             }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 457, 
          "faulty": "if (str.startsWith(\"-\")) {\n  hexDigits--;\n}", 
          "type": "Replace", 
          "seed": "if (StringUtils.isBlank(str)) {\n  throw new NumberFormatException(\"A blank string is not a valid number\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return createLong(str);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:41:40.203962304 -0500\n+++ /tmp/Arja_Defects4J_Lang_7/patches_nbfi/Patch_808/patched/tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:46:54.009639571 -0500\n@@ -450,7 +450,6 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n@@ -493,7 +492,90 @@\n         }\n         if (!Character.isDigit(lastChar) && lastChar != '.') {\n             if (expPos > -1 && expPos < str.length() - 1) {\n-                exp = str.substring(expPos + 1, str.length() - 1);\n+                if (!Character.isDigit(lastChar) && lastChar != '.') {\n+\t\t\t\t\tif (expPos > -1 && expPos < str.length() - 1) {\n+\t\t\t\t\t\texp = str.substring(expPos + 1, str.length() - 1);\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\texp = null;\n+\t\t\t\t\t}\n+\t\t\t\t\tString numeric = str.substring(0, str.length() - 1);\n+\t\t\t\t\tboolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n+\t\t\t\t\tswitch (lastChar) {\n+\t\t\t\t\tcase 'l':\n+\t\t\t\t\tcase 'L':\n+\t\t\t\t\t\tif (dec == null\n+\t\t\t\t\t\t\t\t&& exp == null\n+\t\t\t\t\t\t\t\t&& (numeric.charAt(0) == '-'\n+\t\t\t\t\t\t\t\t\t\t&& isDigits(numeric.substring(1)) || isDigits(numeric))) {\n+\t\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\t\treturn createLong(numeric);\n+\t\t\t\t\t\t\t} catch (NumberFormatException nfe) {\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\treturn createBigInteger(numeric);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tthrow new NumberFormatException(str\n+\t\t\t\t\t\t\t\t+ \" is not a valid number.\");\n+\t\t\t\t\tcase 'f':\n+\t\t\t\t\tcase 'F':\n+\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\tFloat f = NumberUtils.createFloat(numeric);\n+\t\t\t\t\t\t\tif (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n+\t\t\t\t\t\t\t\treturn f;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t} catch (NumberFormatException nfe) {\n+\t\t\t\t\t\t}\n+\t\t\t\t\tcase 'd':\n+\t\t\t\t\tcase 'D':\n+\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\tDouble d = NumberUtils.createDouble(numeric);\n+\t\t\t\t\t\t\tif (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {\n+\t\t\t\t\t\t\t\treturn d;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t} catch (NumberFormatException nfe) {\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\treturn createBigDecimal(numeric);\n+\t\t\t\t\t\t} catch (NumberFormatException e) {\n+\t\t\t\t\t\t}\n+\t\t\t\t\tdefault:\n+\t\t\t\t\t\tthrow new NumberFormatException(str\n+\t\t\t\t\t\t\t\t+ \" is not a valid number.\");\n+\t\t\t\t\t}\n+\t\t\t\t} else {\n+\t\t\t\t\tif (expPos > -1 && expPos < str.length() - 1) {\n+\t\t\t\t\t\texp = str.substring(expPos + 1, str.length());\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\texp = null;\n+\t\t\t\t\t}\n+\t\t\t\t\tif (dec == null && exp == null) {\n+\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\treturn createInteger(str);\n+\t\t\t\t\t\t} catch (NumberFormatException nfe) {\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\treturn createLong(str);\n+\t\t\t\t\t\t} catch (NumberFormatException nfe) {\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\treturn createBigInteger(str);\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tboolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n+\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\tFloat f = createFloat(str);\n+\t\t\t\t\t\t\tif (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n+\t\t\t\t\t\t\t\treturn f;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t} catch (NumberFormatException nfe) {\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\tDouble d = createDouble(str);\n+\t\t\t\t\t\t\tif (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n+\t\t\t\t\t\t\t\treturn d;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t} catch (NumberFormatException nfe) {\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\treturn createBigDecimal(str);\n+\t\t\t\t\t}\n+\t\t\t\t}\n             } else {\n                 exp = null;\n             }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return 1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 496, 
          "faulty": "exp=str.substring(expPos + 1,str.length() - 1);", 
          "type": "Replace", 
          "seed": "if (!Character.isDigit(lastChar) && lastChar != '.') {\n  if (expPos > -1 && expPos < str.length() - 1) {\n    exp=str.substring(expPos + 1,str.length() - 1);\n  }\n else {\n    exp=null;\n  }\n  String numeric=str.substring(0,str.length() - 1);\n  boolean allZeros=isAllZeros(mant) && isAllZeros(exp);\nswitch (lastChar) {\ncase 'l':\ncase 'L':\n    if (dec == null && exp == null && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {\n      try {\n        return createLong(numeric);\n      }\n catch (      NumberFormatException nfe) {\n      }\n      return createBigInteger(numeric);\n    }\n  throw new NumberFormatException(str + \" is not a valid number.\");\ncase 'f':\ncase 'F':\ntry {\n  Float f=NumberUtils.createFloat(numeric);\n  if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n    return f;\n  }\n}\n catch (NumberFormatException nfe) {\n}\ncase 'd':\ncase 'D':\ntry {\nDouble d=NumberUtils.createDouble(numeric);\nif (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {\n  return d;\n}\n}\n catch (NumberFormatException nfe) {\n}\ntry {\nreturn createBigDecimal(numeric);\n}\n catch (NumberFormatException e) {\n}\ndefault :\nthrow new NumberFormatException(str + \" is not a valid number.\");\n}\n}\n else {\nif (expPos > -1 && expPos < str.length() - 1) {\nexp=str.substring(expPos + 1,str.length());\n}\n else {\nexp=null;\n}\nif (dec == null && exp == null) {\ntry {\nreturn createInteger(str);\n}\n catch (NumberFormatException nfe) {\n}\ntry {\nreturn createLong(str);\n}\n catch (NumberFormatException nfe) {\n}\nreturn createBigInteger(str);\n}\n else {\nboolean allZeros=isAllZeros(mant) && isAllZeros(exp);\ntry {\nFloat f=createFloat(str);\nif (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\nreturn f;\n}\n}\n catch (NumberFormatException nfe) {\n}\ntry {\nDouble d=createDouble(str);\nif (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\nreturn d;\n}\n}\n catch (NumberFormatException nfe) {\n}\nreturn createBigDecimal(str);\n}\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:41:40.203962304 -0500\n+++ /tmp/Arja_Defects4J_Lang_7/patches_nbfi/Patch_1761/patched/tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:50:57.431316026 -0500\n@@ -450,12 +450,11 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n             if (str.startsWith(\"-\")) { // drop -\n-                hexDigits--;\n+                \n             }\n             if (hexDigits > 8) { // too many for an int\n                 return createLong(str);\n@@ -532,7 +531,7 @@\n                 case 'd' :\n                 case 'D' :\n                     try {\n-                        Double d = NumberUtils.createDouble(numeric);\n+                        Double d = createDouble(str);\n                         if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {\n                             return d;\n                         }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 535, 
          "faulty": "Double d=NumberUtils.createDouble(numeric);", 
          "type": "Replace", 
          "seed": "Double d=createDouble(str);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 458, 
          "faulty": "hexDigits--;", 
          "type": "Delete", 
          "seed": "throw new ArithmeticException(\"Numerator too large to represent as an Integer.\");"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return new BigDecimal(str);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:41:40.203962304 -0500\n+++ /tmp/Arja_Defects4J_Lang_7/patches_nbfi/Patch_1723/patched/tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:50:47.335238944 -0500\n@@ -450,7 +450,6 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n@@ -511,7 +510,16 @@\n                         } catch (NumberFormatException nfe) { // NOPMD\n                             // Too big for a long\n                         }\n-                        return createBigInteger(numeric);\n+                        if (expPos > -1) {\n+\t\t\t\t\t\t\tif (expPos > str.length()) {\n+\t\t\t\t\t\t\t\tthrow new NumberFormatException(str\n+\t\t\t\t\t\t\t\t\t\t+ \" is not a valid number.\");\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tmant = str.substring(0, expPos);\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tmant = str;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\treturn createBigInteger(numeric);\n \n                     }\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n@@ -553,7 +561,10 @@\n             //User doesn't have a preference on the return type, so let's start\n             //small and go from there...\n             if (expPos > -1 && expPos < str.length() - 1) {\n-                exp = str.substring(expPos + 1, str.length());\n+                if (str == null) {\n+\t\t\t\t\treturn null;\n+\t\t\t\t}\n+\t\t\t\texp = str.substring(expPos + 1, str.length());\n             } else {\n                 exp = null;\n             }\n@@ -583,7 +594,16 @@\n                     // ignore the bad number\n                 }\n                 try {\n-                    Double d = createDouble(str);\n+                    if (expPos > -1) {\n+\t\t\t\t\t\tif (expPos > str.length()) {\n+\t\t\t\t\t\t\tthrow new NumberFormatException(str\n+\t\t\t\t\t\t\t\t\t+ \" is not a valid number.\");\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tmant = str.substring(0, expPos);\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tmant = str;\n+\t\t\t\t\t}\n+\t\t\t\t\tDouble d = createDouble(str);\n                     if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                         return d;\n                     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 556, 
          "faulty": "exp=str.substring(expPos + 1,str.length());", 
          "type": "InsertBefore", 
          "seed": "if (str == null) {\n  return null;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 586, 
          "faulty": "Double d=createDouble(str);", 
          "type": "InsertBefore", 
          "seed": "if (expPos > -1) {\n  if (expPos > str.length()) {\n    throw new NumberFormatException(str + \" is not a valid number.\");\n  }\n  mant=str.substring(0,expPos);\n}\n else {\n  mant=str;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return toFloat(str,0.0f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 514, 
          "faulty": "return createBigInteger(numeric);", 
          "type": "InsertBefore", 
          "seed": "if (expPos > -1) {\n  if (expPos > str.length()) {\n    throw new NumberFormatException(str + \" is not a valid number.\");\n  }\n  mant=str.substring(0,expPos);\n}\n else {\n  mant=str;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:41:40.203962304 -0500\n+++ /tmp/Arja_Defects4J_Lang_7/patches_nbfi/Patch_613/patched/tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:46:04.977187968 -0500\n@@ -450,7 +450,6 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n@@ -583,7 +582,16 @@\n                     // ignore the bad number\n                 }\n                 try {\n-                    Double d = createDouble(str);\n+                    if (expPos > -1) {\n+\t\t\t\t\t\tif (expPos > str.length()) {\n+\t\t\t\t\t\t\tthrow new NumberFormatException(str\n+\t\t\t\t\t\t\t\t\t+ \" is not a valid number.\");\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tmant = str.substring(0, expPos);\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tmant = str;\n+\t\t\t\t\t}\n+\t\t\t\t\tDouble d = createDouble(str);\n                     if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                         return d;\n                     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 586, 
          "faulty": "Double d=createDouble(str);", 
          "type": "InsertBefore", 
          "seed": "if (expPos > -1) {\n  if (expPos > str.length()) {\n    throw new NumberFormatException(str + \" is not a valid number.\");\n  }\n  mant=str.substring(0,expPos);\n}\n else {\n  mant=str;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return createLong(str);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:41:40.203962304 -0500\n+++ /tmp/Arja_Defects4J_Lang_7/patches_nbfi/Patch_491/patched/tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:45:34.476899896 -0500\n@@ -450,7 +450,6 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n@@ -482,8 +481,11 @@\n             mant = str.substring(0, decPos);\n         } else {\n             if (expPos > -1) {\n-                if (expPos > str.length()) {\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+                if (expPos < decPos || expPos > str.length()) {\n+\t\t\t\t\tthrow new NumberFormatException(str\n+\t\t\t\t\t\t\t+ \" is not a valid number.\");\n+\t\t\t\t}\n+\t\t\t\tif (expPos > str.length()) {\n                 }\n                 mant = str.substring(0, expPos);\n             } else {\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 485, 
          "faulty": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos < decPos || expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 486, 
          "faulty": "throw new NumberFormatException(str + \" is not a valid number.\");", 
          "type": "Delete", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return createLong(str);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:41:40.203962304 -0500\n+++ /tmp/Arja_Defects4J_Lang_7/patches_nbfi/Patch_145/patched/tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:44:10.958671976 -0500\n@@ -450,7 +450,6 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n@@ -584,7 +583,12 @@\n                 }\n                 try {\n                     Double d = createDouble(str);\n-                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n+                    if (expPos > -1 && expPos < str.length() - 1) {\n+\t\t\t\t\t\texp = str.substring(expPos + 1, str.length());\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\texp = null;\n+\t\t\t\t\t}\n+\t\t\t\t\tif (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                         return d;\n                     }\n                 } catch (NumberFormatException nfe) { // NOPMD\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 587, 
          "faulty": "if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n  return d;\n}", 
          "type": "InsertBefore", 
          "seed": "if (expPos > -1 && expPos < str.length() - 1) {\n  exp=str.substring(expPos + 1,str.length());\n}\n else {\n  exp=null;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return Short.parseShort(str);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:41:40.203962304 -0500\n+++ /tmp/Arja_Defects4J_Lang_7/patches_nbfi/Patch_1080/patched/tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:48:02.834075020 -0500\n@@ -450,7 +450,6 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n@@ -540,7 +539,11 @@\n                         // ignore the bad number\n                     }\n                     try {\n-                        return createBigDecimal(numeric);\n+                        if (str == null) {\n+\t\t\t\t\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\t\t\t\t\"The string must not be null\");\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\treturn createBigDecimal(numeric);\n                     } catch (NumberFormatException e) { // NOPMD\n                         // ignore the bad number\n                     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 543, 
          "faulty": "return createBigDecimal(numeric);", 
          "type": "InsertBefore", 
          "seed": "if (str == null) {\n  throw new IllegalArgumentException(\"The string must not be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return 1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:41:40.203962304 -0500\n+++ /tmp/Arja_Defects4J_Lang_7/patches_nbfi/Patch_174/patched/tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:44:18.151099554 -0500\n@@ -449,9 +449,9 @@\n         if (StringUtils.isBlank(str)) {\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n-        if (str.startsWith(\"--\")) {\n-            return null;\n-        }\n+        if (str == null) {\n+\t\t\treturn null;\n+\t\t}\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n             if (str.startsWith(\"-\")) { // drop -\n@@ -511,7 +511,8 @@\n                         } catch (NumberFormatException nfe) { // NOPMD\n                             // Too big for a long\n                         }\n-                        return createBigInteger(numeric);\n+                        mant = str;\n+\t\t\t\t\t\treturn createBigInteger(numeric);\n \n                     }\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 452, 
          "faulty": "if (str.startsWith(\"--\")) {\n  return null;\n}", 
          "type": "Replace", 
          "seed": "if (str == null) {\n  return null;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Replace", 
          "seed": "return Double.NaN;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 514, 
          "faulty": "return createBigInteger(numeric);", 
          "type": "InsertBefore", 
          "seed": "mant=str;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:41:40.203962304 -0500\n+++ /tmp/Arja_Defects4J_Lang_7/patches_nbfi/Patch_485/patched/tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:45:33.408889762 -0500\n@@ -450,13 +450,12 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n-            if (str.startsWith(\"-\")) { // drop -\n-                hexDigits--;\n-            }\n+            if (str == null) {\n+\t\t\t\treturn null;\n+\t\t\t}\n             if (hexDigits > 8) { // too many for an int\n                 return createLong(str);\n             }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 457, 
          "faulty": "if (str.startsWith(\"-\")) {\n  hexDigits--;\n}", 
          "type": "Replace", 
          "seed": "if (str == null) {\n  return null;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return toFloat(str,0.0f);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:41:40.203962304 -0500\n+++ /tmp/Arja_Defects4J_Lang_7/patches_nbfi/Patch_32/patched/tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:43:40.416969023 -0500\n@@ -450,7 +450,7 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n+            return Short.parseShort(str);\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Replace", 
          "seed": "return Short.parseShort(str);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:41:40.203962304 -0500\n+++ /tmp/Arja_Defects4J_Lang_7/patches_nbfi/Patch_334/patched/tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:44:56.568436726 -0500\n@@ -450,7 +450,6 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n@@ -576,7 +575,8 @@\n                 boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n                 try {\n                     Float f = createFloat(str);\n-                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n+                    exp = str.substring(expPos + 1, str.length());\n+\t\t\t\t\tif (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                         return f;\n                     }\n                 } catch (NumberFormatException nfe) { // NOPMD\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 579, 
          "faulty": "if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n  return f;\n}", 
          "type": "InsertBefore", 
          "seed": "exp=str.substring(expPos + 1,str.length());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return createLong(str);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:41:40.203962304 -0500\n+++ /tmp/Arja_Defects4J_Lang_7/patches_nbfi/Patch_1430/patched/tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:49:31.326672695 -0500\n@@ -450,7 +450,6 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n@@ -560,7 +559,12 @@\n             if (dec == null && exp == null) {\n                 //Must be an int,long,bigint\n                 try {\n-                    return createInteger(str);\n+                    if (expPos > -1 && expPos < str.length() - 1) {\n+\t\t\t\t\t\texp = str.substring(expPos + 1, str.length());\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\texp = null;\n+\t\t\t\t\t}\n+\t\t\t\t\treturn createInteger(str);\n                 } catch (NumberFormatException nfe) { // NOPMD\n                     // ignore the bad number\n                 }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 563, 
          "faulty": "return createInteger(str);", 
          "type": "InsertBefore", 
          "seed": "if (expPos > -1 && expPos < str.length() - 1) {\n  exp=str.substring(expPos + 1,str.length());\n}\n else {\n  exp=null;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return createLong(str);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:41:40.203962304 -0500\n+++ /tmp/Arja_Defects4J_Lang_7/patches_nbfi/Patch_189/patched/tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:44:22.039299008 -0500\n@@ -450,7 +450,6 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n@@ -519,7 +518,30 @@\n                 case 'F' :\n                     try {\n                         Float f = NumberUtils.createFloat(numeric);\n-                        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n+                        if (decPos > -1) {\n+\t\t\t\t\t\t\tif (expPos > -1) {\n+\t\t\t\t\t\t\t\tif (expPos < decPos || expPos > str.length()) {\n+\t\t\t\t\t\t\t\t\tthrow new NumberFormatException(str\n+\t\t\t\t\t\t\t\t\t\t\t+ \" is not a valid number.\");\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\tdec = str.substring(decPos + 1, expPos);\n+\t\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\t\tdec = str.substring(decPos + 1);\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tmant = str.substring(0, decPos);\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tif (expPos > -1) {\n+\t\t\t\t\t\t\t\tif (expPos > str.length()) {\n+\t\t\t\t\t\t\t\t\tthrow new NumberFormatException(str\n+\t\t\t\t\t\t\t\t\t\t\t+ \" is not a valid number.\");\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\tmant = str.substring(0, expPos);\n+\t\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\t\tmant = str;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tdec = null;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tif (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                             //If it's too big for a float or the float value = 0 and the string\n                             //has non-zeros in it, then float does not have the precision we want\n                             return f;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 522, 
          "faulty": "if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n  return f;\n}", 
          "type": "InsertBefore", 
          "seed": "if (decPos > -1) {\n  if (expPos > -1) {\n    if (expPos < decPos || expPos > str.length()) {\n      throw new NumberFormatException(str + \" is not a valid number.\");\n    }\n    dec=str.substring(decPos + 1,expPos);\n  }\n else {\n    dec=str.substring(decPos + 1);\n  }\n  mant=str.substring(0,decPos);\n}\n else {\n  if (expPos > -1) {\n    if (expPos > str.length()) {\n      throw new NumberFormatException(str + \" is not a valid number.\");\n    }\n    mant=str.substring(0,expPos);\n  }\n else {\n    mant=str;\n  }\n  dec=null;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return 1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:41:40.203962304 -0500\n+++ /tmp/Arja_Defects4J_Lang_7/patches_nbfi/Patch_1018/patched/tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:47:47.673976534 -0500\n@@ -450,7 +450,7 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n+            return createLong(str);\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n@@ -493,7 +493,8 @@\n         }\n         if (!Character.isDigit(lastChar) && lastChar != '.') {\n             if (expPos > -1 && expPos < str.length() - 1) {\n-                exp = str.substring(expPos + 1, str.length() - 1);\n+                mant = str.substring(0, expPos);\n+\t\t\t\texp = str.substring(expPos + 1, str.length() - 1);\n             } else {\n                 exp = null;\n             }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Replace", 
          "seed": "return createLong(str);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 496, 
          "faulty": "exp=str.substring(expPos + 1,str.length() - 1);", 
          "type": "InsertBefore", 
          "seed": "mant=str.substring(0,expPos);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:41:40.203962304 -0500\n+++ /tmp/Arja_Defects4J_Lang_7/patches_nbfi/Patch_1490/patched/tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:49:46.594784254 -0500\n@@ -450,7 +450,6 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n@@ -518,8 +517,14 @@\n                 case 'f' :\n                 case 'F' :\n                     try {\n-                        Float f = NumberUtils.createFloat(numeric);\n-                        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n+                        if (expPos > -1 && expPos < str.length() - 1) {\n+\t\t\t\t\t\t\texp = str.substring(expPos + 1, str.length());\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\texp = null;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tFloat f = NumberUtils.createFloat(numeric);\n+                        exp = str.substring(expPos + 1, str.length() - 1);\n+\t\t\t\t\t\tif (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                             //If it's too big for a float or the float value = 0 and the string\n                             //has non-zeros in it, then float does not have the precision we want\n                             return f;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 521, 
          "faulty": "Float f=NumberUtils.createFloat(numeric);", 
          "type": "InsertBefore", 
          "seed": "if (expPos > -1 && expPos < str.length() - 1) {\n  exp=str.substring(expPos + 1,str.length());\n}\n else {\n  exp=null;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 522, 
          "faulty": "if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n  return f;\n}", 
          "type": "InsertBefore", 
          "seed": "exp=str.substring(expPos + 1,str.length() - 1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return 1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:41:40.203962304 -0500\n+++ /tmp/Arja_Defects4J_Lang_7/patches_nbfi/Patch_360/patched/tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:45:02.728565166 -0500\n@@ -446,11 +446,21 @@\n         if (str == null) {\n             return null;\n         }\n-        if (StringUtils.isBlank(str)) {\n+        if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")\n+\t\t\t\t|| str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n+\t\t\tint hexDigits = str.length() - 2;\n+\t\t\tif (str.startsWith(\"-\")) {\n+\t\t\t\thexDigits--;\n+\t\t\t}\n+\t\t\tif (hexDigits > 8) {\n+\t\t\t\treturn createLong(str);\n+\t\t\t}\n+\t\t\treturn createInteger(str);\n+\t\t}\n+\t\tif (StringUtils.isBlank(str)) {\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 449, 
          "faulty": "if (StringUtils.isBlank(str)) {\n  throw new NumberFormatException(\"A blank string is not a valid number\");\n}", 
          "type": "InsertBefore", 
          "seed": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\")|| str.startsWith(\"-0X\")) {\n  int hexDigits=str.length() - 2;\n  if (str.startsWith(\"-\")) {\n    hexDigits--;\n  }\n  if (hexDigits > 8) {\n    return createLong(str);\n  }\n  return createInteger(str);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return createLong(str);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:41:40.203962304 -0500\n+++ /tmp/Arja_Defects4J_Lang_7/patches_nbfi/Patch_311/patched/tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:44:51.432317749 -0500\n@@ -450,12 +450,11 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n             if (str.startsWith(\"-\")) { // drop -\n-                hexDigits--;\n+                \n             }\n             if (hexDigits > 8) { // too many for an int\n                 return createLong(str);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 458, 
          "faulty": "hexDigits--;", 
          "type": "Delete", 
          "seed": "return Long.parseLong(str);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return 1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:41:40.203962304 -0500\n+++ /tmp/Arja_Defects4J_Lang_7/patches_nbfi/Patch_212/patched/tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:44:28.075571234 -0500\n@@ -449,8 +449,18 @@\n         if (StringUtils.isBlank(str)) {\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n-        if (str.startsWith(\"--\")) {\n-            return null;\n+        if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")\n+\t\t\t\t|| str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n+\t\t\tint hexDigits = str.length() - 2;\n+\t\t\tif (str.startsWith(\"-\")) {\n+\t\t\t\thexDigits--;\n+\t\t\t}\n+\t\t\tif (hexDigits > 8) {\n+\t\t\t\treturn createLong(str);\n+\t\t\t}\n+\t\t\treturn createInteger(str);\n+\t\t}\n+\t\tif (str.startsWith(\"--\")) {\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 452, 
          "faulty": "if (str.startsWith(\"--\")) {\n  return null;\n}", 
          "type": "InsertBefore", 
          "seed": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\")|| str.startsWith(\"-0X\")) {\n  int hexDigits=str.length() - 2;\n  if (str.startsWith(\"-\")) {\n    hexDigits--;\n  }\n  if (hexDigits > 8) {\n    return createLong(str);\n  }\n  return createInteger(str);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return createLong(str);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:41:40.203962304 -0500\n+++ /tmp/Arja_Defects4J_Lang_7/patches_nbfi/Patch_489/patched/tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:45:34.204897315 -0500\n@@ -450,14 +450,16 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n             if (str.startsWith(\"-\")) { // drop -\n                 hexDigits--;\n             }\n-            if (hexDigits > 8) { // too many for an int\n+            if (hexDigits > 8) {\n+\t\t\t\treturn createLong(str);\n+\t\t\t}\n+\t\t\tif (hexDigits > 8) { // too many for an int\n                 return createLong(str);\n             }\n             return createInteger(str);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 460, 
          "faulty": "if (hexDigits > 8) {\n  return createLong(str);\n}", 
          "type": "InsertBefore", 
          "seed": "if (hexDigits > 8) {\n  return createLong(str);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return createLong(str);"
        }
      ]
    }
  ]
}