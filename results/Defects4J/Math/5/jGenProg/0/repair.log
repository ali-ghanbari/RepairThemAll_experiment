cd /tmp/jGenProg_Defects4J_Math_5;
export JAVA_TOOL_OPTIONS="-Dfile.encoding=UTF8 -Duser.language=en-US -Duser.country=US -Duser.language=en";
TZ="America/New_York"; export TZ;
export PATH="/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/:$PATH";
export JAVA_HOME="/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/";
time java -Xmx4048m -cp /home/tdurieux/defects4j4repair/script/../libs/jtestex7.jar:/home/tdurieux/defects4j4repair/script/../repair_tools/astor.jar fr.inria.main.evolution.AstorMain \
	-mode jgenprog \
	-location . \
	-id Math-5 \
	-failing org.apache.commons.math3.complex.ComplexTest \
	-jvm4testexecution /home/tdurieux/openjdk-1.7.0/bin/ \
	-jvm4evosuitetestexecution /home/tdurieux/openjdk-1.7.0/bin/ \
	-maxgen 1000000 \
	-maxtime 120 \
	-stopfirst true \
	-seed 0 \
	-scope local \
	-population 1 \
	-javacompliancelevel 5 \
	-srcjavafolder src/main/java/ \
	-srctestfolder src/test/java/ \
	-binjavafolder target/classes/ \
	-bintestfolder target/test-classes/ \
	-parameters x:x \
	-dependencies /home/tdurieux/defects4j4repair/script/../benchmarks/defects4j/framework/projects/lib/junit-4.11.jar:/home/tdurieux/defects4j4repair/script/../benchmarks/defects4j/framework/projects/lib/cobertura-2.0.3.jar:/tmp/jGenProg_Defects4J_Math_5/target/classes/:/tmp/jGenProg_Defects4J_Math_5/target/test-classes/:/home/tdurieux/defects4j4repair/script/../benchmarks/defects4j/framework/projects/Math/lib/commons-discovery-0.5.jar;
	echo "\n\nNode: `hostname`\n";
	echo "\n\nDate: `date`\n";
Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8 -Duser.language=en-US -Duser.country=US -Duser.language=en
2018-12-01 19:33:51,221 INFO main - command line arguments: [-mode  jgenprog  -location  .  -id  Math-5  -failing  org.apache.commons.math3.complex.ComplexTest  -jvm4testexecution  /home/tdurieux/openjdk-1.7.0/bin/  -jvm4evosuitetestexecution  /home/tdurieux/openjdk-1.7.0/bin/  -maxgen  1000000  -maxtime  120  -stopfirst  true  -seed  0  -scope  local  -population  1  -javacompliancelevel  5  -srcjavafolder  src/main/java/  -srctestfolder  src/test/java/  -binjavafolder  target/classes/  -bintestfolder  target/test-classes/  -parameters  x:x  -dependencies  /home/tdurieux/defects4j4repair/script/../benchmarks/defects4j/framework/projects/lib/junit-4.11.jar:/home/tdurieux/defects4j4repair/script/../benchmarks/defects4j/framework/projects/lib/cobertura-2.0.3.jar:/tmp/jGenProg_Defects4J_Math_5/target/classes/:/tmp/jGenProg_Defects4J_Math_5/target/test-classes/:/home/tdurieux/defects4j4repair/script/../benchmarks/defects4j/framework/projects/Math/lib/commons-discovery-0.5.jar]
2018-12-01 19:33:51,223 INFO fr.inria.main.evolution.AstorMain - Running Astor on a JDK at /usr/lib/jvm/java-8-openjdk-amd64/jre
[INFO ] fr.inria.main.AbstractMain.determineSourceFolders(AbstractMain.java:842) - Source folders: [/tmp/jGenProg_Defects4J_Math_5/./src/main/java]
[INFO ] fr.inria.main.AbstractMain.determineSourceFolders(AbstractMain.java:861) - Source Test folders: [/tmp/jGenProg_Defects4J_Math_5/./src/test/java]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.calculateSuspicious(GZoltarFaultLocalization.java:75) - -Executing Gzoltar classpath: /tmp/jGenProg_Defects4J_Math_5/./output_astor/AstorMain-Math-5//bin//default from 786 classes with test cases
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:149) - Gzoltar fault localization: min susp value parameter: 0.1
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:169) - -gz-Adding classpath: [/tmp/jGenProg_Defects4J_Math_5/./output_astor/AstorMain-Math-5//bin//default, /home/tdurieux/defects4j4repair/script/../benchmarks/defects4j/framework/projects/lib/cobertura-2.0.3.jar, /tmp/jGenProg_Defects4J_Math_5/target/test-classes/, /home/tdurieux/defects4j4repair/script/../benchmarks/defects4j/framework/projects/Math/lib/commons-discovery-0.5.jar, /tmp/jGenProg_Defects4J_Math_5/target/classes/, /home/tdurieux/defects4j4repair/script/../benchmarks/defects4j/framework/projects/lib/junit-4.11.jar]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:206) - Test failt: org.apache.commons.math3.util.FastMathTest#checkMissingFastMathClasses
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:206) - Test failt: org.apache.commons.math3.complex.ComplexTest#testReciprocalZero
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:218) - Gzoltar Test Result Total:4949, fails: 2, GZoltar suspicious 34448, with positive susp 96
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:226) - nr test results 4949
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:271) - Gzoltar found: 8 with susp > 0.1, we consider: 8
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.initPopulation(AstorCoreEngine.java:689) - 
---- Creating spoon model
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.initModel(AstorCoreEngine.java:781) - Creating model,  Code location from working folder: /tmp/jGenProg_Defects4J_Math_5/./output_astor/AstorMain-Math-5//src//default
[INFO ] fr.inria.astor.core.manipulation.MutationSupporter.buildModel(MutationSupporter.java:65) - building model: /tmp/jGenProg_Defects4J_Math_5/./output_astor/AstorMain-Math-5//src//default, compliance level: 5
[INFO ] fr.inria.astor.core.manipulation.MutationSupporter.buildModel(MutationSupporter.java:78) - Classpath for building SpoonModel [/home/tdurieux/defects4j4repair/script/../benchmarks/defects4j/framework/projects/lib/junit-4.11.jar, /home/tdurieux/defects4j4repair/script/../benchmarks/defects4j/framework/projects/lib/cobertura-2.0.3.jar, /tmp/jGenProg_Defects4J_Math_5/target/classes/, /tmp/jGenProg_Defects4J_Math_5/target/test-classes/, /home/tdurieux/defects4j4repair/script/../benchmarks/defects4j/framework/projects/Math/lib/commons-discovery-0.5.jar]
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.initPopulation(AstorCoreEngine.java:693) - 
---- Initial suspicious size: 8
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createProgramInstance(ProgramVariantFactory.java:127) - Total suspicious from FL: 8,  8
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createProgramInstance(ProgramVariantFactory.java:136) - Total ModPoint created: 8
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createInitialPopulation(ProgramVariantFactory.java:82) - Creating program variant #1, [Variant id: 1, #gens: 8, #ops: 0, parent:-]
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:66) - ----------------------------
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:67) - ---Configuration properties:---Execution values
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:lastJUnitVersion= ./examples/libs/junit-4.11.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:alternativecompliancelevel= 4
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:ignoredTestCases= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:workingDirectory= /tmp/jGenProg_Defects4J_Math_5/./output_astor
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:manipulatesuper= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:validation= process
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jvm4testexecution= /home/tdurieux/openjdk-1.7.0/bin/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:operatorspace= irr-statements
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:disablelog= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:binjavafolder= target/classes/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:synthesis_depth= 3
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:gzoltartestpackagetoexclude= junit.framework
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:skipfitnessinitialpopulation= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evosuiteresultfolder= evosuite
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:flthreshold= 0.1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:regressionforfaultlocalization= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:collectonlyusedmethod= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:preservelinenumbers= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:tmax2= 636104
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:tmax1= 10000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:probagenmutation= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:nomodificationconvergence= 100
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:targetelementprocessor= statements
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:srctestfolder= src/test/java/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:forceExecuteRegression= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:clusteringfilename= clustering.csv
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:failing= org.apache.commons.math3.complex.ComplexTest
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:logtestexecution= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evo_buggy_class= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:numberExecutions= 1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxnumbersolutions= 1000000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evo_affected_by_op= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:population= 1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:considerzerovaluesusp= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxCombinationVariableLimit= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:loglevel= INFO
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:savesolution= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:javacompliancelevel= 5
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:x= x
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:uniqueoptogen= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:gzoltarpackagetonotinstrument= junit.framework
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:projectIdentifier= Math-5
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:modificationpointnavigation= weight
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:stopfirst= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:multipointmodification= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:elementsToMutate= 10
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jsonoutputname= astor_output
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evoDSE= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:bintestfolder= target/test-classes/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:testbystep= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:version-location= ./math-version/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:reintroduce= PARENTS:ORIGINAL
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:executorjar= ./lib/jtestex7.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxGeneration= 1000000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:max_synthesis_step= 10000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxVarCombination= 1000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxtime= 120
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evosuitejar= ./lib/evosuite-master-1.0.4-SNAPSHOT.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jvmversion= 1.7.0-u80-unofficial
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:commandTrunk= 50000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:faultlocalization= gzoltar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:resetmodel= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxsuspcandidates= 1000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:mode= jgenprog
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:learningdir= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jvm4evosuitetestexecution= /home/tdurieux/openjdk-1.7.0/bin/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:filterfaultlocalization= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:mutationrate= 1 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:pathToMVNRepository= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:resourcesfolder= /src/main/resources:/src/test/resources:
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:runjava7code= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:timezone= America/Los_Angeles
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evoRunOnBuggyClass= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:compiler= fr.inria.astor.core.manipulation.bytecode.compiler.SpoonClassCompiler
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:limitbysuspicious= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:logsattemps= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:dependenciespath= /home/tdurieux/defects4j4repair/script/../benchmarks/defects4j/framework/projects/lib/junit-4.11.jar:/home/tdurieux/defects4j4repair/script/../benchmarks/defects4j/framework/projects/lib/cobertura-2.0.3.jar:/tmp/jGenProg_Defects4J_Math_5/target/classes/:/tmp/jGenProg_Defects4J_Math_5/target/test-classes/:/home/tdurieux/defects4j4repair/script/../benchmarks/defects4j/framework/projects/Math/lib/commons-discovery-0.5.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:logpatternlayout= [%-5p] %l - %m%n
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:packageToInstrument= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:skipfaultlocalization= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:scope= local
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:transformingredient= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:fitnessfunction= fr.inria.astor.core.solutionsearch.population.TestCaseFitnessFunction
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxnumvariablesperingredient= 10
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:parsesourcefromoriginal= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:pvariantfoldername= variant-
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:savespoonmodelondisk= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:srcjavafolder= src/main/java/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:populationcontroller= fr.inria.astor.core.solutionsearch.population.TestCaseBasedFitnessPopulationController
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:ignoreflakyinfl= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:cleantemplates= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:applyCrossover= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxmodificationpoints= 1000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:duplicateingredientsinspace= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:saveall= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:seed= 0
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:savecompletepatched= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:resetoperations= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:processoutputinfile= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:location= .
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:probabilistictransformation= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:overridemaxtime= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:allpoints= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:bugId= 280
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evosuitetimeout= 120
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:nrPlaceholders= 1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:forcesubprocesskilling= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:71) - ----------------------------
[INFO ] fr.inria.astor.core.solutionsearch.EvolutionarySearchEngine.startEvolution(EvolutionarySearchEngine.java:40) - 
----Starting Solution Search
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.processCreatedVariant(AstorCoreEngine.java:436) - -Found Solution, child variant #404
[ERROR] fr.inria.astor.core.solutionsearch.AstorCoreEngine.validateReversedOriginalVariant(AstorCoreEngine.java:346) - Error variant :404 the model was not the same from the original after this generation
[ERROR] fr.inria.astor.core.solutionsearch.AstorCoreEngine.validateReversedOriginalVariant(AstorCoreEngine.java:364) - Undo Error: diff: 
/var/lib/oar/.batch_job_bashrc: line 5: /home/tdurieux/.bashrc: No such file or directory
--- org.apache.commons.math3.complex.Complex
+++ org.apache.commons.math3.complex.Complex
@@ -1,21 +1,16 @@
 public class Complex implements java.io.Serializable , org.apache.commons.math3.FieldElement<org.apache.commons.math3.complex.Complex> {
-
 	public static final org.apache.commons.math3.complex.Complex I = new org.apache.commons.math3.complex.Complex(0.0, 1.0);
 
-
 	public static final org.apache.commons.math3.complex.Complex NaN = new org.apache.commons.math3.complex.Complex(java.lang.Double.NaN, java.lang.Double.NaN);
 
-
 	public static final org.apache.commons.math3.complex.Complex INF = new org.apache.commons.math3.complex.Complex(java.lang.Double.POSITIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY);
 
 	public static final org.apache.commons.math3.complex.Complex ONE = new org.apache.commons.math3.complex.Complex(1.0, 0.0);
 
 	public static final org.apache.commons.math3.complex.Complex ZERO = new org.apache.commons.math3.complex.Complex(0.0, 0.0);
 
-
 	private static final long serialVersionUID = -6195664516687396620L;
 
-
 	private final double imaginary;
 
 	private final double real;
@@ -24,38 +19,17 @@
 
 	private final transient boolean isInfinite;
 
-
-
-
-
-
 	public Complex(double real) {
 		this(real, 0.0);
 	}
 
-
-
-
-
-
-
 	public Complex(double real, double imaginary) {
 		this.real = real;
 		this.imaginary = imaginary;
-
 		isNaN = (java.lang.Double.isNaN(real)) || (java.lang.Double.isNaN(imaginary));
-		isInfinite = (!(isNaN)) && 
-		((java.lang.Double.isInfinite(real)) || (java.lang.Double.isInfinite(imaginary)));
+		isInfinite = (!(isNaN)) && ((java.lang.Double.isInfinite(real)) || (java.lang.Double.isInfinite(imaginary)));
 	}
 
-
-
-
-
-
-
-
-
 	public double abs() {
 		if (isNaN) {
 			return java.lang.Double.NaN;
@@ -78,153 +52,52 @@
 		}
 	}
 
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
 	public org.apache.commons.math3.complex.Complex add(org.apache.commons.math3.complex.Complex addend) throws org.apache.commons.math3.exception.NullArgumentException {
 		org.apache.commons.math3.util.MathUtils.checkNotNull(addend);
 		if ((isNaN) || (addend.isNaN)) {
 			return org.apache.commons.math3.complex.Complex.NaN;
 		}
-
-		return createComplex(((real) + (addend.getReal())), 
-		((imaginary) + (addend.getImaginary())));
+		return createComplex(((real) + (addend.getReal())), ((imaginary) + (addend.getImaginary())));
 	}
 
-
-
-
-
-
-
-
-
 	public org.apache.commons.math3.complex.Complex add(double addend) {
 		if ((isNaN) || (java.lang.Double.isNaN(addend))) {
 			return org.apache.commons.math3.complex.Complex.NaN;
 		}
-
 		return createComplex(((real) + addend), imaginary);
 	}
 
-
-
-
-
-
-
-
-
-
-
-
-
-
-
 	public org.apache.commons.math3.complex.Complex conjugate() {
 		if (isNaN) {
 			return org.apache.commons.math3.complex.Complex.NaN;
 		}
-
 		return createComplex(real, (-(imaginary)));
 	}
 
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-	public org.apache.commons.math3.complex.Complex divide(org.apache.commons.math3.complex.Complex divisor) throws 
-	org.apache.commons.math3.exception.NullArgumentException {
+	public org.apache.commons.math3.complex.Complex divide(org.apache.commons.math3.complex.Complex divisor) throws org.apache.commons.math3.exception.NullArgumentException {
 		org.apache.commons.math3.util.MathUtils.checkNotNull(divisor);
 		if ((isNaN) || (divisor.isNaN)) {
 			return org.apache.commons.math3.complex.Complex.NaN;
 		}
-
 		final double c = divisor.getReal();
 		final double d = divisor.getImaginary();
 		if ((c == 0.0) && (d == 0.0)) {
 			return org.apache.commons.math3.complex.Complex.NaN;
 		}
-
 		if ((divisor.isInfinite()) && (!(isInfinite()))) {
 			return org.apache.commons.math3.complex.Complex.ZERO;
 		}
-
 		if ((org.apache.commons.math3.util.FastMath.abs(c)) < (org.apache.commons.math3.util.FastMath.abs(d))) {
 			double q = c / d;
 			double denominator = (c * q) + d;
-			return createComplex(((((real) * q) + (imaginary)) / denominator), 
-			((((imaginary) * q) - (real)) / denominator));
+			return createComplex(((((real) * q) + (imaginary)) / denominator), ((((imaginary) * q) - (real)) / denominator));
 		}else {
 			double q = d / c;
 			double denominator = (d * q) + c;
-			return createComplex(((((imaginary) * q) + (real)) / denominator), 
-			(((imaginary) - ((real) * q)) / denominator));
+			return createComplex(((((imaginary) * q) + (real)) / denominator), (((imaginary) - ((real) * q)) / denominator));
 		}
 	}
 
-
-
-
-
-
-
-
-
 	public org.apache.commons.math3.complex.Complex divide(double divisor) {
 		if ((isNaN) || (java.lang.Double.isNaN(divisor))) {
 			return org.apache.commons.math3.complex.Complex.NaN;
@@ -235,24 +108,19 @@
 		if (java.lang.Double.isInfinite(divisor)) {
 			return !(isInfinite()) ? org.apache.commons.math3.complex.Complex.ZERO : org.apache.commons.math3.complex.Complex.NaN;
 		}
-		return createComplex(((real) / divisor), 
-		((imaginary) / divisor));
+		return createComplex(((real) / divisor), ((imaginary) / divisor));
 	}
 
-
 	public org.apache.commons.math3.complex.Complex reciprocal() {
 		if (isNaN) {
 			return org.apache.commons.math3.complex.Complex.NaN;
 		}
-
 		if (((real) == 0.0) && ((imaginary) == 0.0)) {
 			return org.apache.commons.math3.complex.Complex.NaN;
 		}
-
 		if (isInfinite) {
 			return org.apache.commons.math3.complex.Complex.ZERO;
 		}
-
 		if ((org.apache.commons.math3.util.FastMath.abs(real)) < (org.apache.commons.math3.util.FastMath.abs(imaginary))) {
 			double q = (real) / (imaginary);
 			double scale = 1.0 / (((real) * q) + (imaginary));
@@ -264,21 +132,6 @@
 		}
 	}
 
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
 	@java.lang.Override
 	public boolean equals(java.lang.Object other) {
 		if ((this) == other) {
@@ -295,197 +148,76 @@
 		return false;
 	}
 
-
-
-
-
-
-
-
 	@java.lang.Override
 	public int hashCode() {
 		if (isNaN) {
 			return 7;
 		}
-		return 37 * ((17 * (org.apache.commons.math3.util.MathUtils.hash(imaginary))) + 
-		(org.apache.commons.math3.util.MathUtils.hash(real)));
+		return 37 * ((17 * (org.apache.commons.math3.util.MathUtils.hash(imaginary))) + (org.apache.commons.math3.util.MathUtils.hash(real)));
 	}
 
-
-
-
-
-
 	public double getImaginary() {
 		return imaginary;
 	}
 
-
-
-
-
-
 	public double getReal() {
 		return real;
 	}
 
-
-
-
-
-
-
-
 	public boolean isNaN() {
 		return isNaN;
 	}
 
-
-
-
-
-
-
-
-
-
 	public boolean isInfinite() {
 		return isInfinite;
 	}
 
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-	public org.apache.commons.math3.complex.Complex multiply(org.apache.commons.math3.complex.Complex factor) throws 
-	org.apache.commons.math3.exception.NullArgumentException {
+	public org.apache.commons.math3.complex.Complex multiply(org.apache.commons.math3.complex.Complex factor) throws org.apache.commons.math3.exception.NullArgumentException {
 		org.apache.commons.math3.util.MathUtils.checkNotNull(factor);
 		if ((isNaN) || (factor.isNaN)) {
 			return org.apache.commons.math3.complex.Complex.NaN;
 		}
-		if ((((java.lang.Double.isInfinite(real)) || 
-		(java.lang.Double.isInfinite(imaginary))) || 
-		(java.lang.Double.isInfinite(factor.real))) || 
-		(java.lang.Double.isInfinite(factor.imaginary))) {
-
+		if ((((java.lang.Double.isInfinite(real)) || (java.lang.Double.isInfinite(imaginary))) || (java.lang.Double.isInfinite(factor.real))) || (java.lang.Double.isInfinite(factor.imaginary))) {
 			return org.apache.commons.math3.complex.Complex.INF;
 		}
-		return createComplex((((real) * (factor.real)) - ((imaginary) * (factor.imaginary))), 
-		(((real) * (factor.imaginary)) + ((imaginary) * (factor.real))));
+		return createComplex((((real) * (factor.real)) - ((imaginary) * (factor.imaginary))), (((real) * (factor.imaginary)) + ((imaginary) * (factor.real))));
 	}
 
-
-
-
-
-
-
-
-
 	public org.apache.commons.math3.complex.Complex multiply(final int factor) {
 		if (isNaN) {
 			return org.apache.commons.math3.complex.Complex.NaN;
 		}
-		if ((java.lang.Double.isInfinite(real)) || 
-		(java.lang.Double.isInfinite(imaginary))) {
+		if ((java.lang.Double.isInfinite(real)) || (java.lang.Double.isInfinite(imaginary))) {
 			return org.apache.commons.math3.complex.Complex.INF;
 		}
 		return createComplex(((real) * factor), ((imaginary) * factor));
 	}
 
-
-
-
-
-
-
-
-
 	public org.apache.commons.math3.complex.Complex multiply(double factor) {
 		if ((isNaN) || (java.lang.Double.isNaN(factor))) {
 			return org.apache.commons.math3.complex.Complex.NaN;
 		}
-		if (((java.lang.Double.isInfinite(real)) || 
-		(java.lang.Double.isInfinite(imaginary))) || 
-		(java.lang.Double.isInfinite(factor))) {
-
+		if (((java.lang.Double.isInfinite(real)) || (java.lang.Double.isInfinite(imaginary))) || (java.lang.Double.isInfinite(factor))) {
 			return org.apache.commons.math3.complex.Complex.INF;
 		}
 		return createComplex(((real) * factor), ((imaginary) * factor));
 	}
 
-
-
-
-
-
-
-
 	public org.apache.commons.math3.complex.Complex negate() {
 		if (isNaN) {
 			return org.apache.commons.math3.complex.Complex.NaN;
 		}
-
 		return createComplex((-(real)), (-(imaginary)));
 	}
 
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-	public org.apache.commons.math3.complex.Complex subtract(org.apache.commons.math3.complex.Complex subtrahend) throws 
-	org.apache.commons.math3.exception.NullArgumentException {
+	public org.apache.commons.math3.complex.Complex subtract(org.apache.commons.math3.complex.Complex subtrahend) throws org.apache.commons.math3.exception.NullArgumentException {
 		org.apache.commons.math3.util.MathUtils.checkNotNull(subtrahend);
 		if ((isNaN) || (subtrahend.isNaN)) {
 			return org.apache.commons.math3.complex.Complex.NaN;
 		}
-
-		return createComplex(((real) - (subtrahend.getReal())), 
-		((imaginary) - (subtrahend.getImaginary())));
+		return createComplex(((real) - (subtrahend.getReal())), ((imaginary) - (subtrahend.getImaginary())));
 	}
 
-
-
-
-
-
-
-
-
 	public org.apache.commons.math3.complex.Complex subtract(double subtrahend) {
 		if ((isNaN) || (java.lang.Double.isNaN(subtrahend))) {
 			return org.apache.commons.math3.complex.Complex.NaN;
@@ -493,469 +225,98 @@
 		return createComplex(((real) - subtrahend), imaginary);
 	}
 
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
 	public org.apache.commons.math3.complex.Complex acos() {
 		if (isNaN) {
 			return org.apache.commons.math3.complex.Complex.NaN;
 		}
-
 		return this.add(this.sqrt1z().multiply(org.apache.commons.math3.complex.Complex.I)).log().multiply(org.apache.commons.math3.complex.Complex.I.negate());
 	}
 
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
 	public org.apache.commons.math3.complex.Complex asin() {
 		if (isNaN) {
 			return org.apache.commons.math3.complex.Complex.NaN;
 		}
-
 		return sqrt1z().add(this.multiply(org.apache.commons.math3.complex.Complex.I)).log().multiply(org.apache.commons.math3.complex.Complex.I.negate());
 	}
 
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
 	public org.apache.commons.math3.complex.Complex atan() {
 		if (isNaN) {
 			return org.apache.commons.math3.complex.Complex.NaN;
 		}
-
-		return this.add(org.apache.commons.math3.complex.Complex.I).divide(org.apache.commons.math3.complex.Complex.I.subtract(this)).log().multiply(
-		org.apache.commons.math3.complex.Complex.I.divide(createComplex(2.0, 0.0)));
+		return this.add(org.apache.commons.math3.complex.Complex.I).divide(org.apache.commons.math3.complex.Complex.I.subtract(this)).log().multiply(org.apache.commons.math3.complex.Complex.I.divide(createComplex(2.0, 0.0)));
 	}
 
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
 	public org.apache.commons.math3.complex.Complex cos() {
 		if (isNaN) {
 			return org.apache.commons.math3.complex.Complex.NaN;
 		}
-
-		return createComplex(((org.apache.commons.math3.util.FastMath.cos(real)) * (org.apache.commons.math3.util.FastMath.cosh(imaginary))), 
-		((-(org.apache.commons.math3.util.FastMath.sin(real))) * (org.apache.commons.math3.util.FastMath.sinh(imaginary))));
+		return createComplex(((org.apache.commons.math3.util.FastMath.cos(real)) * (org.apache.commons.math3.util.FastMath.cosh(imaginary))), ((-(org.apache.commons.math3.util.FastMath.sin(real))) * (org.apache.commons.math3.util.FastMath.sinh(imaginary))));
 	}
 
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
 	public org.apache.commons.math3.complex.Complex cosh() {
 		if (isNaN) {
 			return org.apache.commons.math3.complex.Complex.NaN;
 		}
-
-		return createComplex(((org.apache.commons.math3.util.FastMath.cosh(real)) * (org.apache.commons.math3.util.FastMath.cos(imaginary))), 
-		((org.apache.commons.math3.util.FastMath.sinh(real)) * (org.apache.commons.math3.util.FastMath.sin(imaginary))));
+		return createComplex(((org.apache.commons.math3.util.FastMath.cosh(real)) * (org.apache.commons.math3.util.FastMath.cos(imaginary))), ((org.apache.commons.math3.util.FastMath.sinh(real)) * (org.apache.commons.math3.util.FastMath.sin(imaginary))));
 	}
 
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
 	public org.apache.commons.math3.complex.Complex exp() {
 		if (isNaN) {
 			return org.apache.commons.math3.complex.Complex.NaN;
 		}
-
 		double expReal = org.apache.commons.math3.util.FastMath.exp(real);
-		return createComplex((expReal * (org.apache.commons.math3.util.FastMath.cos(imaginary))), 
-		(expReal * (org.apache.commons.math3.util.FastMath.sin(imaginary))));
+		return createComplex((expReal * (org.apache.commons.math3.util.FastMath.cos(imaginary))), (expReal * (org.apache.commons.math3.util.FastMath.sin(imaginary))));
 	}
 
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
 	public org.apache.commons.math3.complex.Complex log() {
 		if (isNaN) {
 			return org.apache.commons.math3.complex.Complex.NaN;
 		}
-
-		return createComplex(org.apache.commons.math3.util.FastMath.log(abs()), 
-		org.apache.commons.math3.util.FastMath.atan2(imaginary, real));
+		return createComplex(org.apache.commons.math3.util.FastMath.log(abs()), org.apache.commons.math3.util.FastMath.atan2(imaginary, real));
 	}
 
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-	public org.apache.commons.math3.complex.Complex pow(org.apache.commons.math3.complex.Complex x) throws 
-	org.apache.commons.math3.exception.NullArgumentException {
+	public org.apache.commons.math3.complex.Complex pow(org.apache.commons.math3.complex.Complex x) throws org.apache.commons.math3.exception.NullArgumentException {
 		org.apache.commons.math3.util.MathUtils.checkNotNull(x);
 		return this.log().multiply(x).exp();
 	}
 
-
-
-
-
-
-
-
 	public org.apache.commons.math3.complex.Complex pow(double x) {
 		return this.log().multiply(x).exp();
 	}
 
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
 	public org.apache.commons.math3.complex.Complex sin() {
 		if (isNaN) {
 			return org.apache.commons.math3.complex.Complex.NaN;
 		}
-
-		return createComplex(((org.apache.commons.math3.util.FastMath.sin(real)) * (org.apache.commons.math3.util.FastMath.cosh(imaginary))), 
-		((org.apache.commons.math3.util.FastMath.cos(real)) * (org.apache.commons.math3.util.FastMath.sinh(imaginary))));
+		return createComplex(((org.apache.commons.math3.util.FastMath.sin(real)) * (org.apache.commons.math3.util.FastMath.cosh(imaginary))), ((org.apache.commons.math3.util.FastMath.cos(real)) * (org.apache.commons.math3.util.FastMath.sinh(imaginary))));
 	}
 
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
 	public org.apache.commons.math3.complex.Complex sinh() {
 		if (isNaN) {
 			return org.apache.commons.math3.complex.Complex.NaN;
 		}
-
-		return createComplex(((org.apache.commons.math3.util.FastMath.sinh(real)) * (org.apache.commons.math3.util.FastMath.cos(imaginary))), 
-		((org.apache.commons.math3.util.FastMath.cosh(real)) * (org.apache.commons.math3.util.FastMath.sin(imaginary))));
+		return createComplex(((org.apache.commons.math3.util.FastMath.sinh(real)) * (org.apache.commons.math3.util.FastMath.cos(imaginary))), ((org.apache.commons.math3.util.FastMath.cosh(real)) * (org.apache.commons.math3.util.FastMath.sin(imaginary))));
 	}
 
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
 	public org.apache.commons.math3.complex.Complex sqrt() {
 		if (isNaN) {
 			return org.apache.commons.math3.complex.Complex.NaN;
 		}
-
 		if (((real) == 0.0) && ((imaginary) == 0.0)) {
 			return createComplex(0.0, 0.0);
 		}
-
 		double t = org.apache.commons.math3.util.FastMath.sqrt((((org.apache.commons.math3.util.FastMath.abs(real)) + (abs())) / 2.0));
 		if ((real) >= 0.0) {
 			return createComplex(t, ((imaginary) / (2.0 * t)));
 		}else {
-			return createComplex(((org.apache.commons.math3.util.FastMath.abs(imaginary)) / (2.0 * t)), 
-			((org.apache.commons.math3.util.FastMath.copySign(1.0, imaginary)) * t));
+			return createComplex(((org.apache.commons.math3.util.FastMath.abs(imaginary)) / (2.0 * t)), ((org.apache.commons.math3.util.FastMath.copySign(1.0, imaginary)) * t));
 		}
 	}
 
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
 	public org.apache.commons.math3.complex.Complex sqrt1z() {
 		return createComplex(1.0, 0.0).subtract(this.multiply(this)).sqrt();
 	}
 
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
 	public org.apache.commons.math3.complex.Complex tan() {
 		if ((isNaN) || (java.lang.Double.isInfinite(real))) {
 			return org.apache.commons.math3.complex.Complex.NaN;
@@ -966,47 +327,12 @@
 		if ((imaginary) < (-20.0)) {
 			return createComplex(0.0, (-1.0));
 		}
-
 		double real2 = 2.0 * (real);
 		double imaginary2 = 2.0 * (imaginary);
 		double d = (org.apache.commons.math3.util.FastMath.cos(real2)) + (org.apache.commons.math3.util.FastMath.cosh(imaginary2));
-
-		return createComplex(((org.apache.commons.math3.util.FastMath.sin(real2)) / d), 
-		((org.apache.commons.math3.util.FastMath.sinh(imaginary2)) / d));
+		return createComplex(((org.apache.commons.math3.util.FastMath.sin(real2)) / d), ((org.apache.commons.math3.util.FastMath.sinh(imaginary2)) / d));
 	}
 
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
 	public org.apache.commons.math3.complex.Complex tanh() {
 		if ((isNaN) || (java.lang.Double.isInfinite(imaginary))) {
 			return org.apache.commons.math3.complex.Complex.NaN;
@@ -1020,65 +346,18 @@
 		double real2 = 2.0 * (real);
 		double imaginary2 = 2.0 * (imaginary);
 		double d = (org.apache.commons.math3.util.FastMath.cosh(real2)) + (org.apache.commons.math3.util.FastMath.cos(imaginary2));
-
-		return createComplex(((org.apache.commons.math3.util.FastMath.sinh(real2)) / d), 
-		((org.apache.commons.math3.util.FastMath.sin(imaginary2)) / d));
+		return createComplex(((org.apache.commons.math3.util.FastMath.sinh(real2)) / d), ((org.apache.commons.math3.util.FastMath.sin(imaginary2)) / d));
 	}
 
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
 	public double getArgument() {
 		return org.apache.commons.math3.util.FastMath.atan2(getImaginary(), getReal());
 	}
 
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
 	public java.util.List<org.apache.commons.math3.complex.Complex> nthRoot(int n) throws org.apache.commons.math3.exception.NotPositiveException {
-
 		if (n <= 0) {
-			throw new org.apache.commons.math3.exception.NotPositiveException(org.apache.commons.math3.exception.util.LocalizedFormats.CANNOT_COMPUTE_NTH_ROOT_FOR_NEGATIVE_N, 
-			n);
+			throw new org.apache.commons.math3.exception.NotPositiveException(org.apache.commons.math3.exception.util.LocalizedFormats.CANNOT_COMPUTE_NTH_ROOT_FOR_NEGATIVE_N, n);
 		}
-
 		final java.util.List<org.apache.commons.math3.complex.Complex> result = new java.util.ArrayList<org.apache.commons.math3.complex.Complex>();
-
 		if (isNaN) {
 			result.add(org.apache.commons.math3.complex.Complex.NaN);
 			return result;
@@ -1087,61 +366,30 @@
 			result.add(org.apache.commons.math3.complex.Complex.INF);
 			return result;
 		}
-
-
 		final double nthRootOfAbs = org.apache.commons.math3.util.FastMath.pow(abs(), (1.0 / n));
-
-
 		final double nthPhi = (getArgument()) / n;
 		final double slice = (2 * (org.apache.commons.math3.util.FastMath.PI)) / n;
 		double innerPart = nthPhi;
 		for (int k = 0; k < n; k++) {
-
 			final double realPart = nthRootOfAbs * (org.apache.commons.math3.util.FastMath.cos(innerPart));
 			final double imaginaryPart = nthRootOfAbs * (org.apache.commons.math3.util.FastMath.sin(innerPart));
 			result.add(createComplex(realPart, imaginaryPart));
 			innerPart += slice;
 		}
-
 		return result;
 	}
 
-
-
-
-
-
-
-
-
-
-	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, 
-	double imaginaryPart) {
+	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) {
 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);
 	}
 
-
-
-
-
-
-
-
-	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, 
-	double imaginaryPart) {
-		if ((java.lang.Double.isNaN(realPart)) || 
-		(java.lang.Double.isNaN(imaginaryPart))) {
+	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) {
+		if ((java.lang.Double.isNaN(realPart)) || (java.lang.Double.isNaN(imaginaryPart))) {
 			return org.apache.commons.math3.complex.Complex.NaN;
 		}
 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);
 	}
 
-
-
-
-
-
-
 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) {
 		if (java.lang.Double.isNaN(realPart)) {
 			return org.apache.commons.math3.complex.Complex.NaN;
@@ -1149,27 +397,16 @@
 		return new org.apache.commons.math3.complex.Complex(realPart);
 	}
 
-
-
-
-
-
-
-
-
 	protected final java.lang.Object readResolve() {
 		return createComplex(real, imaginary);
 	}
 
-
 	public org.apache.commons.math3.complex.ComplexField getField() {
 		return org.apache.commons.math3.complex.ComplexField.getInstance();
 	}
 
-
 	@java.lang.Override
 	public java.lang.String toString() {
 		return ((("(" + (real)) + ", ") + (imaginary)) + ")";
 	}
-
 }
\ No newline at end of file

[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.atEnd(AstorCoreEngine.java:168) - Time Repair Loop (s): 385.019
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.atEnd(AstorCoreEngine.java:170) - generationsexecuted: 202
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.printFinalStatus(AstorCoreEngine.java:234) - 
----SUMMARY_EXECUTION---
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.atEnd(AstorCoreEngine.java:184) - 
 --SOLUTIONS DESCRIPTION--

 ----
ProgramVariant 404
 
time(sec)= 384
operation: ReplaceOp
location= org.apache.commons.math3.complex.Complex
line= 305
lineSuspiciousness= 0.707
lineSuspiciousness= 0
original statement= return org.apache.commons.math3.complex.Complex.NaN
buggy kind= CtReturnImpl|CtBlockImpl
fixed statement= return org.apache.commons.math3.complex.Complex.INF
Patch kind= CtReturnImpl|CtBlockImpl
generation= 202
ingredientScope= LOCAL
validation=|true|0|4949|[]|
diffpatch=/var/lib/oar/.batch_job_bashrc: line 5: /home/tdurieux/.bashrc: No such file or directory
--- org/apache/commons/math3/complex/Complex.java
+++ org/apache/commons/math3/complex/Complex.java
@@ -119,7 +119,7 @@
 			return org.apache.commons.math3.complex.Complex.NaN;
 		}
 		if (((real) == 0.0) && ((imaginary) == 0.0)) {
-			return org.apache.commons.math3.complex.Complex.NaN;
+			return org.apache.commons.math3.complex.Complex.INF;
 		}
 		if (isInfinite) {
 			return org.apache.commons.math3.complex.Complex.ZERO;


diffpatchoriginal=/var/lib/oar/.batch_job_bashrc: line 5: /home/tdurieux/.bashrc: No such file or directory
--- org/apache/commons/math3/complex/Complex.java
+++ org/apache/commons/math3/complex/Complex.java
@@ -302,23 +302,8 @@
 		}
 
 		if (((real) == 0.0) && ((imaginary) == 0.0)) {
-			return org.apache.commons.math3.complex.Complex.NaN;
-		}
 
-		if (isInfinite) {
-			return org.apache.commons.math3.complex.Complex.ZERO;
-		}
 
-		if ((org.apache.commons.math3.util.FastMath.abs(real)) < (org.apache.commons.math3.util.FastMath.abs(imaginary))) {
-			double q = (real) / (imaginary);
-			double scale = 1.0 / (((real) * q) + (imaginary));
-			return createComplex((scale * q), (-scale));
-		}else {
-			double q = (imaginary) / (real);
-			double scale = 1.0 / (((imaginary) * q) + (real));
-			return createComplex(scale, ((-scale) * q));
-		}
-	}
 
 
 
@@ -335,21 +320,6 @@
 
 
 
-	@java.lang.Override
-	public boolean equals(java.lang.Object other) {
-		if ((this) == other) {
-			return true;
-		}
-		if (other instanceof org.apache.commons.math3.complex.Complex) {
-			org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other));
-			if (c.isNaN) {
-				return isNaN;
-			}else {
-				return ((real) == (c.real)) && ((imaginary) == (c.imaginary));
-			}
-		}
-		return false;
-	}
 
 
 
@@ -358,32 +328,18 @@
 
 
 
-	@java.lang.Override
-	public int hashCode() {
-		if (isNaN) {
-			return 7;
-		}
-		return 37 * ((17 * (org.apache.commons.math3.util.MathUtils.hash(imaginary))) + 
-		(org.apache.commons.math3.util.MathUtils.hash(real)));
-	}
 
 
 
 
 
 
-	public double getImaginary() {
-		return imaginary;
-	}
 
 
 
 
 
 
-	public double getReal() {
-		return real;
-	}
 
 
 
@@ -392,9 +348,6 @@
 
 
 
-	public boolean isNaN() {
-		return isNaN;
-	}
 
 
 
@@ -405,9 +358,6 @@
 
 
 
-	public boolean isInfinite() {
-		return isInfinite;
-	}
 
 
 
@@ -433,18 +383,68 @@
 
 
 
-	public org.apache.commons.math3.complex.Complex multiply(org.apache.commons.math3.complex.Complex factor) throws 
-	org.apache.commons.math3.exception.NullArgumentException {
-		org.apache.commons.math3.util.MathUtils.checkNotNull(factor);
-		if ((isNaN) || (factor.isNaN)) {
-			return org.apache.commons.math3.complex.Complex.NaN;
-		}
-		if ((((java.lang.Double.isInfinite(real)) || 
-		(java.lang.Double.isInfinite(imaginary))) || 
-		(java.lang.Double.isInfinite(factor.real))) || 
-		(java.lang.Double.isInfinite(factor.imaginary))) {
 
-			return org.apache.commons.math3.complex.Complex.INF;
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+			return org.apache.commons.math3.complex.Complex.INF;} 		if (isInfinite) { 			return org.apache.commons.math3.complex.Complex.ZERO;} 		if ((org.apache.commons.math3.util.FastMath.abs(real)) < (org.apache.commons.math3.util.FastMath.abs(imaginary))) { 			double q = (real) / (imaginary); 			double scale = 1.0 / (((real) * q) + (imaginary)); 			return createComplex((scale * q), (-scale));}else { 			double q = (imaginary) / (real); 			double scale = 1.0 / (((imaginary) * q) + (real)); 			return createComplex(scale, ((-scale) * q));}} 	@java.lang.Override 	public boolean equals(java.lang.Object other) { 		if ((this) == other) { 			return true;} 		if (other instanceof org.apache.commons.math3.complex.Complex) { 			org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other)); 			if (c.isNaN) { 				return isNaN;}else { 				return ((real) == (c.real)) && ((imaginary) == (c.imaginary));}} 		return false;} 	@java.lang.Override 	public int hashCode() { 		if (isNaN) { 			return 7;} 		return 37 * ((17 * (org.apache.commons.math3.util.MathUtils.hash(imaginary))) + (org.apache.commons.math3.util.MathUtils.hash(real)));} 	public double getImaginary() { 		return imaginary;} 	public double getReal() { 		return real;} 	public boolean isNaN() { 		return isNaN;} 	public boolean isInfinite() { 		return isInfinite;} 	public org.apache.commons.math3.complex.Complex multiply(org.apache.commons.math3.complex.Complex factor) throws org.apache.commons.math3.exception.NullArgumentException { 		org.apache.commons.math3.util.MathUtils.checkNotNull(factor); 		if ((isNaN) || (factor.isNaN)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		if ((((java.lang.Double.isInfinite(real)) || (java.lang.Double.isInfinite(imaginary))) || (java.lang.Double.isInfinite(factor.real))) || (java.lang.Double.isInfinite(factor.imaginary))) { 			return org.apache.commons.math3.complex.Complex.INF;
 		}
 		return createComplex((((real) * (factor.real)) - ((imaginary) * (factor.imaginary))), 
 		(((real) * (factor.imaginary)) + ((imaginary) * (factor.real))));



Astor Output:

General stats:
EXECUTION_IDENTIFIER=Math-5
TOTAL_TIME=385.019
NR_GENERATIONS=202
NR_RIGHT_COMPILATIONS=100
NR_FAILLING_COMPILATIONS=101
NR_ERRONEOUS_VARIANCES=null
NR_FAILING_VALIDATION_PROCESS=null
OUTPUT_STATUS=STOP_BY_PATCH_FOUND

Patch stats:

Patch 1
VARIANT_ID=404
TIME=384
VALIDATION=|true|0|4949|[]|
GENERATION=202
FOLDER_SOLUTION_CODE=/tmp/jGenProg_Defects4J_Math_5/./output_astor/AstorMain-Math-5//bin//variant-404
--Patch Hunk #1
OPERATOR=ReplaceOp

LOCATION=org.apache.commons.math3.complex.Complex

PATH=/tmp/jGenProg_Defects4J_Math_5/output_astor/AstorMain-Math-5/src/default/org/apache/commons/math3/complex/Complex.java

MODIFIED_FILE_PATH=/tmp/jGenProg_Defects4J_Math_5/./output_astor/AstorMain-Math-5//src//variant-404_f/org/apache/commons/math3/complex/Complex.java

LINE=305

SUSPICIOUNESS=0.707

MP_RANKING=0

ORIGINAL_CODE=return org.apache.commons.math3.complex.Complex.NaN

BUGGY_CODE_TYPE=CtReturnImpl|CtBlockImpl

PATCH_HUNK_CODE=return org.apache.commons.math3.complex.Complex.INF

PATCH_HUNK_TYPE=CtReturnImpl|CtBlockImpl

INGREDIENT_SCOPE=LOCAL

INGREDIENT_PARENT=return org.apache.commons.math3.complex.Complex.INF

PATCH_DIFF_ORIG=/var/lib/oar/.batch_job_bashrc: line 5: /home/tdurieux/.bashrc: No such file or directory
--- org/apache/commons/math3/complex/Complex.java
+++ org/apache/commons/math3/complex/Complex.java
@@ -302,23 +302,8 @@
 		}
 
 		if (((real) == 0.0) && ((imaginary) == 0.0)) {
-			return org.apache.commons.math3.complex.Complex.NaN;
-		}
 
-		if (isInfinite) {
-			return org.apache.commons.math3.complex.Complex.ZERO;
-		}
 
-		if ((org.apache.commons.math3.util.FastMath.abs(real)) < (org.apache.commons.math3.util.FastMath.abs(imaginary))) {
-			double q = (real) / (imaginary);
-			double scale = 1.0 / (((real) * q) + (imaginary));
-			return createComplex((scale * q), (-scale));
-		}else {
-			double q = (imaginary) / (real);
-			double scale = 1.0 / (((imaginary) * q) + (real));
-			return createComplex(scale, ((-scale) * q));
-		}
-	}
 
 
 
@@ -335,21 +320,6 @@
 
 
 
-	@java.lang.Override
-	public boolean equals(java.lang.Object other) {
-		if ((this) == other) {
-			return true;
-		}
-		if (other instanceof org.apache.commons.math3.complex.Complex) {
-			org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other));
-			if (c.isNaN) {
-				return isNaN;
-			}else {
-				return ((real) == (c.real)) && ((imaginary) == (c.imaginary));
-			}
-		}
-		return false;
-	}
 
 
 
@@ -358,32 +328,18 @@
 
 
 
-	@java.lang.Override
-	public int hashCode() {
-		if (isNaN) {
-			return 7;
-		}
-		return 37 * ((17 * (org.apache.commons.math3.util.MathUtils.hash(imaginary))) + 
-		(org.apache.commons.math3.util.MathUtils.hash(real)));
-	}
 
 
 
 
 
 
-	public double getImaginary() {
-		return imaginary;
-	}
 
 
 
 
 
 
-	public double getReal() {
-		return real;
-	}
 
 
 
@@ -392,9 +348,6 @@
 
 
 
-	public boolean isNaN() {
-		return isNaN;
-	}
 
 
 
@@ -405,9 +358,6 @@
 
 
 
-	public boolean isInfinite() {
-		return isInfinite;
-	}
 
 
 
@@ -433,18 +383,68 @@
 
 
 
-	public org.apache.commons.math3.complex.Complex multiply(org.apache.commons.math3.complex.Complex factor) throws 
-	org.apache.commons.math3.exception.NullArgumentException {
-		org.apache.commons.math3.util.MathUtils.checkNotNull(factor);
-		if ((isNaN) || (factor.isNaN)) {
-			return org.apache.commons.math3.complex.Complex.NaN;
-		}
-		if ((((java.lang.Double.isInfinite(real)) || 
-		(java.lang.Double.isInfinite(imaginary))) || 
-		(java.lang.Double.isInfinite(factor.real))) || 
-		(java.lang.Double.isInfinite(factor.imaginary))) {
 
-			return org.apache.commons.math3.complex.Complex.INF;
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+			return org.apache.commons.math3.complex.Complex.INF;} 		if (isInfinite) { 			return org.apache.commons.math3.complex.Complex.ZERO;} 		if ((org.apache.commons.math3.util.FastMath.abs(real)) < (org.apache.commons.math3.util.FastMath.abs(imaginary))) { 			double q = (real) / (imaginary); 			double scale = 1.0 / (((real) * q) + (imaginary)); 			return createComplex((scale * q), (-scale));}else { 			double q = (imaginary) / (real); 			double scale = 1.0 / (((imaginary) * q) + (real)); 			return createComplex(scale, ((-scale) * q));}} 	@java.lang.Override 	public boolean equals(java.lang.Object other) { 		if ((this) == other) { 			return true;} 		if (other instanceof org.apache.commons.math3.complex.Complex) { 			org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other)); 			if (c.isNaN) { 				return isNaN;}else { 				return ((real) == (c.real)) && ((imaginary) == (c.imaginary));}} 		return false;} 	@java.lang.Override 	public int hashCode() { 		if (isNaN) { 			return 7;} 		return 37 * ((17 * (org.apache.commons.math3.util.MathUtils.hash(imaginary))) + (org.apache.commons.math3.util.MathUtils.hash(real)));} 	public double getImaginary() { 		return imaginary;} 	public double getReal() { 		return real;} 	public boolean isNaN() { 		return isNaN;} 	public boolean isInfinite() { 		return isInfinite;} 	public org.apache.commons.math3.complex.Complex multiply(org.apache.commons.math3.complex.Complex factor) throws org.apache.commons.math3.exception.NullArgumentException { 		org.apache.commons.math3.util.MathUtils.checkNotNull(factor); 		if ((isNaN) || (factor.isNaN)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		if ((((java.lang.Double.isInfinite(real)) || (java.lang.Double.isInfinite(imaginary))) || (java.lang.Double.isInfinite(factor.real))) || (java.lang.Double.isInfinite(factor.imaginary))) { 			return org.apache.commons.math3.complex.Complex.INF;
 		}
 		return createComplex((((real) * (factor.real)) - ((imaginary) * (factor.imaginary))), 
 		(((real) * (factor.imaginary)) + ((imaginary) * (factor.real))));



[INFO ] fr.inria.astor.core.output.PatchJSONStandarOutput.produceOutput(PatchJSONStandarOutput.java:103) - Storing ing JSON at /tmp/jGenProg_Defects4J_Math_5/./output_astor/AstorMain-Math-5//astor_output.json
[INFO ] fr.inria.astor.core.output.PatchJSONStandarOutput.produceOutput(PatchJSONStandarOutput.java:104) - astor_output:
{"general":{"NR_RIGHT_COMPILATIONS":100,"NR_ERRONEOUS_VARIANCES":null,"EXECUTION_IDENTIFIER":"Math-5","OUTPUT_STATUS":"STOP_BY_PATCH_FOUND","NR_FAILLING_COMPILATIONS":101,"NR_GENERATIONS":202,"TOTAL_TIME":385.019,"NR_FAILING_VALIDATION_PROCESS":null},"patches":[{"VARIANT_ID":"404","VALIDATION":"|true|0|4949|[]|","patchhunks":[{"LOCATION":"org.apache.commons.math3.complex.Complex","PATH":"\\\/tmp\\\/jGenProg_Defects4J_Math_5\\\/output_astor\\\/AstorMain-Math-5\\\/src\\\/default\\\/org\\\/apache\\\/commons\\\/math3\\\/complex\\\/Complex.java","INGREDIENT_SCOPE":"LOCAL","SUSPICIOUNESS":"0.707","INGREDIENT_PARENT":"return org.apache.commons.math3.complex.Complex.INF","PATCH_HUNK_TYPE":"CtReturnImpl|CtBlockImpl","ORIGINAL_CODE":"return org.apache.commons.math3.complex.Complex.NaN","BUGGY_CODE_TYPE":"CtReturnImpl|CtBlockImpl","OPERATOR":"ReplaceOp","MODIFIED_FILE_PATH":"\\\/tmp\\\/jGenProg_Defects4J_Math_5\\\/.\\\/output_astor\\\/AstorMain-Math-5\\\/\\\/src\\\/\\\/variant-404_f\\\/org\\\/apache\\\/commons\\\/math3\\\/complex\\\/Complex.java","LINE":"305","MP_RANKING":"0","PATCH_HUNK_CODE":"return org.apache.commons.math3.complex.Complex.INF"}],"TIME":"384","GENERATION":"202","FOLDER_SOLUTION_CODE":"\\\/tmp\\\/jGenProg_Defects4J_Math_5\\\/.\\\/output_astor\\\/AstorMain-Math-5\\\/\\\/bin\\\/\\\/variant-404","PATCH_DIFF_ORIG":"\\\/var\\\/lib\\\/oar\\\/.batch_job_bashrc: line 5: \\\/home\\\/tdurieux\\\/.bashrc: No such file or directory\\n--- org\\\/apache\\\/commons\\\/math3\\\/complex\\\/Complex.java\\n+++ org\\\/apache\\\/commons\\\/math3\\\/complex\\\/Complex.java\\n@@ -302,23 +302,8 @@\\n \\t\\t}\\n \\n \\t\\tif (((real) == 0.0) && ((imaginary) == 0.0)) {\\n-\\t\\t\\treturn org.apache.commons.math3.complex.Complex.NaN;\\n-\\t\\t}\\n \\n-\\t\\tif (isInfinite) {\\n-\\t\\t\\treturn org.apache.commons.math3.complex.Complex.ZERO;\\n-\\t\\t}\\n \\n-\\t\\tif ((org.apache.commons.math3.util.FastMath.abs(real)) < (org.apache.commons.math3.util.FastMath.abs(imaginary))) {\\n-\\t\\t\\tdouble q = (real) \\\/ (imaginary);\\n-\\t\\t\\tdouble scale = 1.0 \\\/ (((real) * q) + (imaginary));\\n-\\t\\t\\treturn createComplex((scale * q), (-scale));\\n-\\t\\t}else {\\n-\\t\\t\\tdouble q = (imaginary) \\\/ (real);\\n-\\t\\t\\tdouble scale = 1.0 \\\/ (((imaginary) * q) + (real));\\n-\\t\\t\\treturn createComplex(scale, ((-scale) * q));\\n-\\t\\t}\\n-\\t}\\n \\n \\n \\n@@ -335,21 +320,6 @@\\n \\n \\n \\n-\\t@java.lang.Override\\n-\\tpublic boolean equals(java.lang.Object other) {\\n-\\t\\tif ((this) == other) {\\n-\\t\\t\\treturn true;\\n-\\t\\t}\\n-\\t\\tif (other instanceof org.apache.commons.math3.complex.Complex) {\\n-\\t\\t\\torg.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other));\\n-\\t\\t\\tif (c.isNaN) {\\n-\\t\\t\\t\\treturn isNaN;\\n-\\t\\t\\t}else {\\n-\\t\\t\\t\\treturn ((real) == (c.real)) && ((imaginary) == (c.imaginary));\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn false;\\n-\\t}\\n \\n \\n \\n@@ -358,32 +328,18 @@\\n \\n \\n \\n-\\t@java.lang.Override\\n-\\tpublic int hashCode() {\\n-\\t\\tif (isNaN) {\\n-\\t\\t\\treturn 7;\\n-\\t\\t}\\n-\\t\\treturn 37 * ((17 * (org.apache.commons.math3.util.MathUtils.hash(imaginary))) + \\n-\\t\\t(org.apache.commons.math3.util.MathUtils.hash(real)));\\n-\\t}\\n \\n \\n \\n \\n \\n \\n-\\tpublic double getImaginary() {\\n-\\t\\treturn imaginary;\\n-\\t}\\n \\n \\n \\n \\n \\n \\n-\\tpublic double getReal() {\\n-\\t\\treturn real;\\n-\\t}\\n \\n \\n \\n@@ -392,9 +348,6 @@\\n \\n \\n \\n-\\tpublic boolean isNaN() {\\n-\\t\\treturn isNaN;\\n-\\t}\\n \\n \\n \\n@@ -405,9 +358,6 @@\\n \\n \\n \\n-\\tpublic boolean isInfinite() {\\n-\\t\\treturn isInfinite;\\n-\\t}\\n \\n \\n \\n@@ -433,18 +383,68 @@\\n \\n \\n \\n-\\tpublic org.apache.commons.math3.complex.Complex multiply(org.apache.commons.math3.complex.Complex factor) throws \\n-\\torg.apache.commons.math3.exception.NullArgumentException {\\n-\\t\\torg.apache.commons.math3.util.MathUtils.checkNotNull(factor);\\n-\\t\\tif ((isNaN) || (factor.isNaN)) {\\n-\\t\\t\\treturn org.apache.commons.math3.complex.Complex.NaN;\\n-\\t\\t}\\n-\\t\\tif ((((java.lang.Double.isInfinite(real)) || \\n-\\t\\t(java.lang.Double.isInfinite(imaginary))) || \\n-\\t\\t(java.lang.Double.isInfinite(factor.real))) || \\n-\\t\\t(java.lang.Double.isInfinite(factor.imaginary))) {\\n \\n-\\t\\t\\treturn org.apache.commons.math3.complex.Complex.INF;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn org.apache.commons.math3.complex.Complex.INF;} \\t\\tif (isInfinite) { \\t\\t\\treturn org.apache.commons.math3.complex.Complex.ZERO;} \\t\\tif ((org.apache.commons.math3.util.FastMath.abs(real)) < (org.apache.commons.math3.util.FastMath.abs(imaginary))) { \\t\\t\\tdouble q = (real) \\\/ (imaginary); \\t\\t\\tdouble scale = 1.0 \\\/ (((real) * q) + (imaginary)); \\t\\t\\treturn createComplex((scale * q), (-scale));}else { \\t\\t\\tdouble q = (imaginary) \\\/ (real); \\t\\t\\tdouble scale = 1.0 \\\/ (((imaginary) * q) + (real)); \\t\\t\\treturn createComplex(scale, ((-scale) * q));}} \\t@java.lang.Override \\tpublic boolean equals(java.lang.Object other) { \\t\\tif ((this) == other) { \\t\\t\\treturn true;} \\t\\tif (other instanceof org.apache.commons.math3.complex.Complex) { \\t\\t\\torg.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other)); \\t\\t\\tif (c.isNaN) { \\t\\t\\t\\treturn isNaN;}else { \\t\\t\\t\\treturn ((real) == (c.real)) && ((imaginary) == (c.imaginary));}} \\t\\treturn false;} \\t@java.lang.Override \\tpublic int hashCode() { \\t\\tif (isNaN) { \\t\\t\\treturn 7;} \\t\\treturn 37 * ((17 * (org.apache.commons.math3.util.MathUtils.hash(imaginary))) + (org.apache.commons.math3.util.MathUtils.hash(real)));} \\tpublic double getImaginary() { \\t\\treturn imaginary;} \\tpublic double getReal() { \\t\\treturn real;} \\tpublic boolean isNaN() { \\t\\treturn isNaN;} \\tpublic boolean isInfinite() { \\t\\treturn isInfinite;} \\tpublic org.apache.commons.math3.complex.Complex multiply(org.apache.commons.math3.complex.Complex factor) throws org.apache.commons.math3.exception.NullArgumentException { \\t\\torg.apache.commons.math3.util.MathUtils.checkNotNull(factor); \\t\\tif ((isNaN) || (factor.isNaN)) { \\t\\t\\treturn org.apache.commons.math3.complex.Complex.NaN;} \\t\\tif ((((java.lang.Double.isInfinite(real)) || (java.lang.Double.isInfinite(imaginary))) || (java.lang.Double.isInfinite(factor.real))) || (java.lang.Double.isInfinite(factor.imaginary))) { \\t\\t\\treturn org.apache.commons.math3.complex.Complex.INF;\\n \\t\\t}\\n \\t\\treturn createComplex((((real) * (factor.real)) - ((imaginary) * (factor.imaginary))), \\n \\t\\t(((real) * (factor.imaginary)) + ((imaginary) * (factor.real))));\\n\\n"}]}
[INFO ] fr.inria.main.evolution.AstorMain.run(AstorMain.java:200) - Time Total(s): 1518.78
1912.97user 13.88system 25:19.88elapsed 126%CPU (0avgtext+0avgdata 1719032maxresident)k
99360inputs+68128outputs (32major+2031977minor)pagefaults 0swaps


Node: petitprince-11.luxembourg.grid5000.fr



Date: Sat Dec  1 19:59:10 EST 2018

