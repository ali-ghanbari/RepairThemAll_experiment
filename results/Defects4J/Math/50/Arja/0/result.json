{
  "repair_end": "2018-12-01 12:34:37.694843", 
  "repair_begin": "2018-12-01 12:06:27.444849", 
  "patches": [
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:06:15.435478746 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_377/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:23:18.332375335 -0500\n@@ -185,7 +185,6 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n                         f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n\n\n--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-01 06:06:11.755478662 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_377/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-01 06:23:18.336375326 -0500\n@@ -368,7 +368,8 @@\n     public static void verifyBracketing(UnivariateRealFunction function,\n                                         final double lower,\n                                         final double upper) {\n-        if (function == null) {\n+        verifyInterval(lower, upper);\n+\t\tif (function == null) {\n             throw new NullArgumentException(LocalizedFormats.FUNCTION);\n         }\n         verifyInterval(lower, upper);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "return x1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java", 
          "line": 371, 
          "faulty": "if (function == null) {\n  throw new NullArgumentException(LocalizedFormats.FUNCTION);\n}", 
          "type": "InsertBefore", 
          "seed": "verifyInterval(lower,upper);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "x1=x;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:06:15.435478746 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_740/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:26:23.243937360 -0500\n@@ -185,7 +185,6 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n                         f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n\n\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java", 
          "line": 310, 
          "faulty": "return (fLo >= 0 && fHi <= 0) || (fLo <= 0 && fHi >= 0);", 
          "type": "Replace", 
          "seed": "return (fLo >= 0 && fHi <= 0) || (fLo <= 0 && fHi >= 0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "x1=x;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:06:15.435478746 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_28/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:20:15.172779148 -0500\n@@ -185,7 +185,6 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n                         f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "switch (allowed) {\ncase ANY_SIDE:\n  return x1;\ncase LEFT_SIDE:\nreturn inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:06:15.435478746 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_585/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:25:14.936101476 -0500\n@@ -121,7 +121,7 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        return super.solve(maxEval, f, min, max, startValue);\n     }\n \n     /** {@inheritDoc} */\n@@ -185,7 +185,6 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n                         f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "Replace", 
          "seed": "return super.solve(maxEval,f,min,max,startValue);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "switch (allowed) {\ncase ANY_SIDE:\n  return x1;\ncase LEFT_SIDE:\nreturn inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:06:15.435478746 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_810/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:26:53.223864687 -0500\n@@ -138,10 +138,6 @@\n         if (f0 == 0.0) {\n             return x0;\n         }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -185,7 +181,7 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n+                        x1 = x;\n                         f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "if (f1 >= 0) {\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "x1=x;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:06:15.435478746 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_138/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:21:31.104616879 -0500\n@@ -185,7 +185,7 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n+                        x1 = x;\n                         f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n@@ -236,7 +236,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    return inverted ? x1 : x0;\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "return inverted ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "x1=x;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:06:15.435478746 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_1310/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:30:46.607277216 -0500\n@@ -185,8 +185,6 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n                 default:\n\n\n--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-01 06:06:11.755478662 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_1310/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-01 06:30:46.607277216 -0500\n@@ -303,6 +303,10 @@\n                                        final double lower,\n                                        final double upper) {\n         if (function == null) {\n+\t\t\t\t\t\t\t\t\t\t\tthrow new NullArgumentException(\n+\t\t\t\t\t\t\t\t\t\t\t\t\tLocalizedFormats.FUNCTION);\n+\t\t\t\t\t\t\t\t\t\t}\n+\t\tif (function == null) {\n             throw new NullArgumentException(LocalizedFormats.FUNCTION);\n         }\n         final double fLo = function.value(lower);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java", 
          "line": 305, 
          "faulty": "if (function == null) {\n  throw new NullArgumentException(LocalizedFormats.FUNCTION);\n}", 
          "type": "InsertBefore", 
          "seed": "if (function == null) {\n  throw new NullArgumentException(LocalizedFormats.FUNCTION);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "f0*=0.5;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "switch (allowed) {\ncase ANY_SIDE:\n  return x1;\ncase LEFT_SIDE:\nreturn inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:06:15.435478746 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_853/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:27:10.587822441 -0500\n@@ -185,8 +185,10 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n+                        x1 = x;\n+                        if (!inverted) {\n+\t\t\t\t\t\t\treturn x1;\n+\t\t\t\t\t\t}\n                     }\n                     break;\n                 default:\n@@ -236,7 +238,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    return (f1 >= 0) ? x1 : x0;\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "if (!inverted) {\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "x1=x;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:06:15.435478746 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_14/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:20:08.780793126 -0500\n@@ -185,7 +185,7 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n+                        x1 = x;\n                         f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "x1=x;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:06:15.435478746 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_1728/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:34:21.070723832 -0500\n@@ -132,12 +132,6 @@\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n         if (f1 == 0.0) {\n             return x1;\n         }\n@@ -185,7 +179,7 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n+                        f0 *= f1 / (f1 + fx);\n                         f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "f0*=f1 / (f1 + fx);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "if (f1 <= 0) {\n  return x1;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:06:15.435478746 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_882/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:27:27.435781352 -0500\n@@ -121,7 +121,7 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        return super.solve(maxEval, f, min, max, startValue);\n     }\n \n     /** {@inheritDoc} */\n@@ -185,7 +185,7 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n+                        x1 = x;\n                         f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "Replace", 
          "seed": "return super.solve(maxEval,f,min,max,startValue);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "x1=x;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:06:15.435478746 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_1056/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:28:46.335587801 -0500\n@@ -185,7 +185,6 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n                         f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n@@ -234,7 +233,8 @@\n             // are satisfied with the current approximation.\n             if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),\n                                                      atol)) {\n-                switch (allowed) {\n+                f0 = f1;\n+\t\t\t\tswitch (allowed) {\n                 case ANY_SIDE:\n                     return x1;\n                 case LEFT_SIDE:\n\n\n--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-01 06:06:11.755478662 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_1056/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-01 06:28:46.339587791 -0500\n@@ -371,7 +371,12 @@\n         if (function == null) {\n             throw new NullArgumentException(LocalizedFormats.FUNCTION);\n         }\n-        verifyInterval(lower, upper);\n+        if (lower >= upper) {\n+\t\t\tthrow new NumberIsTooLargeException(\n+\t\t\t\t\tLocalizedFormats.ENDPOINTS_NOT_AN_INTERVAL, lower, upper,\n+\t\t\t\t\tfalse);\n+\t\t}\n+\t\tverifyInterval(lower, upper);\n         if (!isBracketing(function, lower, upper)) {\n             throw new NoBracketingException(lower, upper,\n                                             function.value(lower),\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java", 
          "line": 374, 
          "faulty": "verifyInterval(lower,upper);", 
          "type": "InsertBefore", 
          "seed": "if (lower >= upper) {\n  throw new NumberIsTooLargeException(LocalizedFormats.ENDPOINTS_NOT_AN_INTERVAL,lower,upper,false);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 237, 
          "faulty": "switch (allowed) {\ncase ANY_SIDE:\n  return x1;\ncase LEFT_SIDE:\nreturn inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}", 
          "type": "InsertBefore", 
          "seed": "f0=f1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "x1=x;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:06:15.435478746 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_1008/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:28:20.723650816 -0500\n@@ -167,7 +167,10 @@\n                 return x;\n             }\n \n-            // Update the bounds with the new approximation.\n+            if (fx == 0.0) {\n+\t\t\t\treturn x;\n+\t\t\t}\n+\t\t\t// Update the bounds with the new approximation.\n             if (f1 * fx < 0) {\n                 // The value of x1 has switched to the other bound, thus inverting\n                 // the interval.\n@@ -185,7 +188,7 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n+                        f0 *= f1 / (f1 + fx);\n                         f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 171, 
          "faulty": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}", 
          "type": "InsertBefore", 
          "seed": "if (fx == 0.0) {\n  return x;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "f0*=f1 / (f1 + fx);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:06:15.435478746 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_685/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:26:00.171993036 -0500\n@@ -185,7 +185,6 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n                         f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n@@ -234,7 +233,8 @@\n             // are satisfied with the current approximation.\n             if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),\n                                                      atol)) {\n-                switch (allowed) {\n+                f0 = f1;\n+\t\t\t\tswitch (allowed) {\n                 case ANY_SIDE:\n                     return x1;\n                 case LEFT_SIDE:\n\n\n--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-01 06:06:11.755478662 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_685/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-01 06:26:00.171993036 -0500\n@@ -368,9 +368,11 @@\n     public static void verifyBracketing(UnivariateRealFunction function,\n                                         final double lower,\n                                         final double upper) {\n-        if (function == null) {\n-            throw new NullArgumentException(LocalizedFormats.FUNCTION);\n-        }\n+        if (lower >= upper) {\n+\t\t\tthrow new NumberIsTooLargeException(\n+\t\t\t\t\tLocalizedFormats.ENDPOINTS_NOT_AN_INTERVAL, lower, upper,\n+\t\t\t\t\tfalse);\n+\t\t}\n         verifyInterval(lower, upper);\n         if (!isBracketing(function, lower, upper)) {\n             throw new NoBracketingException(lower, upper,\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java", 
          "line": 371, 
          "faulty": "if (function == null) {\n  throw new NullArgumentException(LocalizedFormats.FUNCTION);\n}", 
          "type": "Replace", 
          "seed": "if (lower >= upper) {\n  throw new NumberIsTooLargeException(LocalizedFormats.ENDPOINTS_NOT_AN_INTERVAL,lower,upper,false);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 237, 
          "faulty": "switch (allowed) {\ncase ANY_SIDE:\n  return x1;\ncase LEFT_SIDE:\nreturn inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}", 
          "type": "InsertBefore", 
          "seed": "f0=f1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "x1=x;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:06:15.435478746 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_785/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:26:42.059891789 -0500\n@@ -185,7 +185,6 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n                         f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n\n\n--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-01 06:06:11.755478662 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_785/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-01 06:26:42.059891789 -0500\n@@ -371,7 +371,10 @@\n         if (function == null) {\n             throw new NullArgumentException(LocalizedFormats.FUNCTION);\n         }\n-        verifyInterval(lower, upper);\n+        if (function == null) {\n+\t\t\tthrow new NullArgumentException(LocalizedFormats.FUNCTION);\n+\t\t}\n+\t\tverifyInterval(lower, upper);\n         if (!isBracketing(function, lower, upper)) {\n             throw new NoBracketingException(lower, upper,\n                                             function.value(lower),\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java", 
          "line": 374, 
          "faulty": "verifyInterval(lower,upper);", 
          "type": "InsertBefore", 
          "seed": "if (function == null) {\n  throw new NullArgumentException(LocalizedFormats.FUNCTION);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "x1=x;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:06:15.435478746 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_958/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:27:58.463705443 -0500\n@@ -185,8 +185,10 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n+                        x1 = x;\n+                        if (!inverted) {\n+\t\t\t\t\t\t\treturn x1;\n+\t\t\t\t\t\t}\n                     }\n                     break;\n                 default:\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "if (!inverted) {\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "x1=x;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:06:15.435478746 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_1556/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:32:49.402959417 -0500\n@@ -138,10 +138,6 @@\n         if (f0 == 0.0) {\n             return x0;\n         }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -185,7 +181,6 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n                         f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n\n\n--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-01 06:06:11.755478662 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_1556/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-01 06:32:49.406959407 -0500\n@@ -307,7 +307,12 @@\n         }\n         final double fLo = function.value(lower);\n         final double fHi = function.value(upper);\n-        return (fLo >= 0 && fHi <= 0) || (fLo <= 0 && fHi >= 0);\n+        if (lower >= upper) {\n+\t\t\tthrow new NumberIsTooLargeException(\n+\t\t\t\t\tLocalizedFormats.ENDPOINTS_NOT_AN_INTERVAL, lower, upper,\n+\t\t\t\t\tfalse);\n+\t\t}\n+\t\treturn (fLo >= 0 && fHi <= 0) || (fLo <= 0 && fHi >= 0);\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "if (f1 >= 0) {\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java", 
          "line": 310, 
          "faulty": "return (fLo >= 0 && fHi <= 0) || (fLo <= 0 && fHi >= 0);", 
          "type": "InsertBefore", 
          "seed": "if (lower >= upper) {\n  throw new NumberIsTooLargeException(LocalizedFormats.ENDPOINTS_NOT_AN_INTERVAL,lower,upper,false);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "switch (allowed) {\ncase ANY_SIDE:\n  return x1;\ncase LEFT_SIDE:\nreturn inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:06:15.435478746 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_1395/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:31:22.811183190 -0500\n@@ -145,7 +145,10 @@\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n-        // Get accuracies.\n+        if (f0 == 0.0) {\n+\t\t\treturn x0;\n+\t\t}\n+\t\t// Get accuracies.\n         final double ftol = getFunctionValueAccuracy();\n         final double atol = getAbsoluteAccuracy();\n         final double rtol = getRelativeAccuracy();\n@@ -185,7 +188,6 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n                         f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 149, 
          "faulty": "final double ftol=getFunctionValueAccuracy();", 
          "type": "InsertBefore", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "switch (allowed) {\ncase ANY_SIDE:\n  return x1;\ncase LEFT_SIDE:\nreturn inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:06:15.435478746 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_392/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:23:24.916360137 -0500\n@@ -185,7 +185,10 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n+                        if (FastMath.abs(x1 - x0) < FastMath.max(rtol\n+\t\t\t\t\t\t\t\t* FastMath.abs(x1), atol)) {\n+\t\t\t\t\t\t\treturn x1;\n+\t\t\t\t\t\t}\n                         f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n\n\n--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-01 06:06:11.755478662 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_392/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-01 06:23:24.916360137 -0500\n@@ -368,7 +368,12 @@\n     public static void verifyBracketing(UnivariateRealFunction function,\n                                         final double lower,\n                                         final double upper) {\n-        if (function == null) {\n+        if (lower >= upper) {\n+\t\t\t\t\t\t\t\t\t\t\t\tthrow new NumberIsTooLargeException(\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\tLocalizedFormats.ENDPOINTS_NOT_AN_INTERVAL,\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\tlower, upper, false);\n+\t\t\t\t\t\t\t\t\t\t\t}\n+\t\tif (function == null) {\n             throw new NullArgumentException(LocalizedFormats.FUNCTION);\n         }\n         verifyInterval(lower, upper);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java", 
          "line": 371, 
          "faulty": "if (function == null) {\n  throw new NullArgumentException(LocalizedFormats.FUNCTION);\n}", 
          "type": "InsertBefore", 
          "seed": "if (lower >= upper) {\n  throw new NumberIsTooLargeException(LocalizedFormats.ENDPOINTS_NOT_AN_INTERVAL,lower,upper,false);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\n  return x1;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:06:15.435478746 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_1169/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:29:34.467465631 -0500\n@@ -183,11 +183,23 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    if (FastMath.abs(x1 - x0) < FastMath.max(\n+\t\t\t\t\t\t\trtol * FastMath.abs(x1), atol)) {\n+\t\t\t\t\t\tswitch (allowed) {\n+\t\t\t\t\t\tcase ANY_SIDE:\n+\t\t\t\t\t\t\treturn x1;\n+\t\t\t\t\t\tcase LEFT_SIDE:\n+\t\t\t\t\t\t\treturn inverted ? x1 : x0;\n+\t\t\t\t\t\tcase RIGHT_SIDE:\n+\t\t\t\t\t\t\treturn inverted ? x0 : x1;\n+\t\t\t\t\t\tcase BELOW_SIDE:\n+\t\t\t\t\t\t\treturn (f1 <= 0) ? x1 : x0;\n+\t\t\t\t\t\tcase ABOVE_SIDE:\n+\t\t\t\t\t\t\treturn (f1 >= 0) ? x1 : x0;\n+\t\t\t\t\t\tdefault:\n+\t\t\t\t\t\t\tthrow new MathInternalError();\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n                     break;\n                 default:\n                     // Should never happen.\n\n\n--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-01 06:06:11.755478662 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_1169/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-01 06:29:34.467465631 -0500\n@@ -368,7 +368,8 @@\n     public static void verifyBracketing(UnivariateRealFunction function,\n                                         final double lower,\n                                         final double upper) {\n-        if (function == null) {\n+        verifyInterval(lower, upper);\n+\t\tif (function == null) {\n             throw new NullArgumentException(LocalizedFormats.FUNCTION);\n         }\n         verifyInterval(lower, upper);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java", 
          "line": 371, 
          "faulty": "if (function == null) {\n  throw new NullArgumentException(LocalizedFormats.FUNCTION);\n}", 
          "type": "InsertBefore", 
          "seed": "verifyInterval(lower,upper);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Replace", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:06:15.435478746 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_6/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:20:04.840803678 -0500\n@@ -183,11 +183,23 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    if (FastMath.abs(x1 - x0) < FastMath.max(\n+\t\t\t\t\t\t\trtol * FastMath.abs(x1), atol)) {\n+\t\t\t\t\t\tswitch (allowed) {\n+\t\t\t\t\t\tcase ANY_SIDE:\n+\t\t\t\t\t\t\treturn x1;\n+\t\t\t\t\t\tcase LEFT_SIDE:\n+\t\t\t\t\t\t\treturn inverted ? x1 : x0;\n+\t\t\t\t\t\tcase RIGHT_SIDE:\n+\t\t\t\t\t\t\treturn inverted ? x0 : x1;\n+\t\t\t\t\t\tcase BELOW_SIDE:\n+\t\t\t\t\t\t\treturn (f1 <= 0) ? x1 : x0;\n+\t\t\t\t\t\tcase ABOVE_SIDE:\n+\t\t\t\t\t\t\treturn (f1 >= 0) ? x1 : x0;\n+\t\t\t\t\t\tdefault:\n+\t\t\t\t\t\t\tthrow new MathInternalError();\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n                     break;\n                 default:\n                     // Should never happen.\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Replace", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:06:15.435478746 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_1173/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:29:35.799462138 -0500\n@@ -185,7 +185,7 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n+                        x1 = x;\n                         f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n@@ -234,7 +234,8 @@\n             // are satisfied with the current approximation.\n             if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),\n                                                      atol)) {\n-                switch (allowed) {\n+                f0 = f1;\n+\t\t\t\tswitch (allowed) {\n                 case ANY_SIDE:\n                     return x1;\n                 case LEFT_SIDE:\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 237, 
          "faulty": "switch (allowed) {\ncase ANY_SIDE:\n  return x1;\ncase LEFT_SIDE:\nreturn inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}", 
          "type": "InsertBefore", 
          "seed": "f0=f1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "x1=x;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:06:15.435478746 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_292/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:22:42.912456438 -0500\n@@ -132,12 +132,6 @@\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n         if (f1 == 0.0) {\n             return x1;\n         }\n@@ -185,7 +179,6 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n                         f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "x1=x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "f0=f1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:06:15.435478746 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_216/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:22:10.300530023 -0500\n@@ -185,7 +185,6 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n                         f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n@@ -196,7 +195,8 @@\n             }\n             // Update from [x0, x1] to [x0, x].\n             x1 = x;\n-            f1 = fx;\n+            x1 = x;\n+\t\t\tf1 = fx;\n \n             // If the function value of the last approximation is too small,\n             // given the function value accuracy, then we can't get closer to\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 199, 
          "faulty": "f1=fx;", 
          "type": "InsertBefore", 
          "seed": "x1=x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "x1=x;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:06:15.435478746 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_1080/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:28:56.911561733 -0500\n@@ -185,7 +185,6 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n                         f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n\n\n--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-01 06:06:11.755478662 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_1080/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-01 06:28:56.911561733 -0500\n@@ -305,7 +305,12 @@\n         if (function == null) {\n             throw new NullArgumentException(LocalizedFormats.FUNCTION);\n         }\n-        final double fLo = function.value(lower);\n+        if (lower >= upper) {\n+\t\t\tthrow new NumberIsTooLargeException(\n+\t\t\t\t\tLocalizedFormats.ENDPOINTS_NOT_AN_INTERVAL, lower, upper,\n+\t\t\t\t\tfalse);\n+\t\t}\n+\t\tfinal double fLo = function.value(lower);\n         final double fHi = function.value(upper);\n         return (fLo >= 0 && fHi <= 0) || (fLo <= 0 && fHi >= 0);\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java", 
          "line": 308, 
          "faulty": "final double fLo=function.value(lower);", 
          "type": "InsertBefore", 
          "seed": "if (lower >= upper) {\n  throw new NumberIsTooLargeException(LocalizedFormats.ENDPOINTS_NOT_AN_INTERVAL,lower,upper,false);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "x1=x;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:06:15.435478746 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_1531/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:32:39.050986098 -0500\n@@ -185,7 +185,7 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n+                        x1 = x;\n                         f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n\n\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java", 
          "line": 310, 
          "faulty": "return (fLo >= 0 && fHi <= 0) || (fLo <= 0 && fHi >= 0);", 
          "type": "Replace", 
          "seed": "return (fLo >= 0 && fHi <= 0) || (fLo <= 0 && fHi >= 0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "x1=x;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:06:15.435478746 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_827/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:26:59.603849177 -0500\n@@ -142,7 +142,8 @@\n             return x1;\n         }\n \n-        // Verify bracketing of initial solution.\n+        verifyBracketing(x0, x1);\n+\t\t// Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n         // Get accuracies.\n@@ -185,7 +186,7 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n+                        x1 = x;\n                         f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 146, 
          "faulty": "verifyBracketing(x0,x1);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(x0,x1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "x1=x;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:06:15.435478746 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_1651/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:33:39.582830318 -0500\n@@ -132,12 +132,6 @@\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n         if (f1 == 0.0) {\n             return x1;\n         }\n@@ -169,7 +163,24 @@\n \n             // Update the bounds with the new approximation.\n             if (f1 * fx < 0) {\n-                // The value of x1 has switched to the other bound, thus inverting\n+                if (FastMath.abs(x1 - x0) < FastMath.max(\n+\t\t\t\t\t\trtol * FastMath.abs(x1), atol)) {\n+\t\t\t\t\tswitch (allowed) {\n+\t\t\t\t\tcase ANY_SIDE:\n+\t\t\t\t\t\treturn x1;\n+\t\t\t\t\tcase LEFT_SIDE:\n+\t\t\t\t\t\treturn inverted ? x1 : x0;\n+\t\t\t\t\tcase RIGHT_SIDE:\n+\t\t\t\t\t\treturn inverted ? x0 : x1;\n+\t\t\t\t\tcase BELOW_SIDE:\n+\t\t\t\t\t\treturn (f1 <= 0) ? x1 : x0;\n+\t\t\t\t\tcase ABOVE_SIDE:\n+\t\t\t\t\t\treturn (f1 >= 0) ? x1 : x0;\n+\t\t\t\t\tdefault:\n+\t\t\t\t\t\tthrow new MathInternalError();\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\t// The value of x1 has switched to the other bound, thus inverting\n                 // the interval.\n                 x0 = x1;\n                 f0 = f1;\n@@ -185,7 +196,6 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n                         f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 174, 
          "faulty": "x0=x1;", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "switch (allowed) {\ncase ANY_SIDE:\n  return x1;\ncase LEFT_SIDE:\nreturn inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "f0=f1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:06:15.435478746 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_932/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:27:48.131730752 -0500\n@@ -148,7 +148,10 @@\n         // Get accuracies.\n         final double ftol = getFunctionValueAccuracy();\n         final double atol = getAbsoluteAccuracy();\n-        final double rtol = getRelativeAccuracy();\n+        if (FastMath.abs(f1) <= ftol) {\n+\t\t\treturn x1;\n+\t\t}\n+\t\tfinal double rtol = getRelativeAccuracy();\n \n         // Keep track of inverted intervals, meaning that the left bound is\n         // larger than the right bound.\n@@ -185,7 +188,6 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n                         f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 151, 
          "faulty": "final double rtol=getRelativeAccuracy();", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(f1) <= ftol) {\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\n  return x1;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:06:15.435478746 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_1375/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:31:14.919203660 -0500\n@@ -156,7 +156,24 @@\n \n         // Keep finding better approximations.\n         while (true) {\n-            // Calculate the next approximation.\n+            if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),\n+\t\t\t\t\tatol)) {\n+\t\t\t\tswitch (allowed) {\n+\t\t\t\tcase ANY_SIDE:\n+\t\t\t\t\treturn x1;\n+\t\t\t\tcase LEFT_SIDE:\n+\t\t\t\t\treturn inverted ? x1 : x0;\n+\t\t\t\tcase RIGHT_SIDE:\n+\t\t\t\t\treturn inverted ? x0 : x1;\n+\t\t\t\tcase BELOW_SIDE:\n+\t\t\t\t\treturn (f1 <= 0) ? x1 : x0;\n+\t\t\t\tcase ABOVE_SIDE:\n+\t\t\t\t\treturn (f1 >= 0) ? x1 : x0;\n+\t\t\t\tdefault:\n+\t\t\t\t\tthrow new MathInternalError();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\t// Calculate the next approximation.\n             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n             final double fx = computeObjectiveValue(x);\n \n@@ -185,7 +202,7 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n+                        x1 = x;\n                         f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 160, 
          "faulty": "final double x=x1 - ((f1 * (x1 - x0)) / (f1 - f0));", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "x1=x;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:06:15.435478746 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_1543/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:32:43.994973354 -0500\n@@ -156,7 +156,24 @@\n \n         // Keep finding better approximations.\n         while (true) {\n-            // Calculate the next approximation.\n+            if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),\n+\t\t\t\t\tatol)) {\n+\t\t\t\tswitch (allowed) {\n+\t\t\t\tcase ANY_SIDE:\n+\t\t\t\t\treturn x1;\n+\t\t\t\tcase LEFT_SIDE:\n+\t\t\t\t\treturn inverted ? x1 : x0;\n+\t\t\t\tcase RIGHT_SIDE:\n+\t\t\t\t\treturn inverted ? x0 : x1;\n+\t\t\t\tcase BELOW_SIDE:\n+\t\t\t\t\treturn (f1 <= 0) ? x1 : x0;\n+\t\t\t\tcase ABOVE_SIDE:\n+\t\t\t\t\treturn (f1 >= 0) ? x1 : x0;\n+\t\t\t\tdefault:\n+\t\t\t\t\tthrow new MathInternalError();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\t// Calculate the next approximation.\n             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n             final double fx = computeObjectiveValue(x);\n \n@@ -185,8 +202,6 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n                 default:\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "f0*=0.5;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 160, 
          "faulty": "final double x=x1 - ((f1 * (x1 - x0)) / (f1 - f0));", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "switch (allowed) {\ncase ANY_SIDE:\n  return x1;\ncase LEFT_SIDE:\nreturn inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:06:15.435478746 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_1393/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:31:22.371184331 -0500\n@@ -185,7 +185,6 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n                         f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n@@ -230,7 +229,24 @@\n                 }\n             }\n \n-            // If the current interval is within the given accuracies, we\n+            if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),\n+\t\t\t\t\tatol)) {\n+\t\t\t\tswitch (allowed) {\n+\t\t\t\tcase ANY_SIDE:\n+\t\t\t\t\treturn x1;\n+\t\t\t\tcase LEFT_SIDE:\n+\t\t\t\t\treturn inverted ? x1 : x0;\n+\t\t\t\tcase RIGHT_SIDE:\n+\t\t\t\t\treturn inverted ? x0 : x1;\n+\t\t\t\tcase BELOW_SIDE:\n+\t\t\t\t\treturn (f1 <= 0) ? x1 : x0;\n+\t\t\t\tcase ABOVE_SIDE:\n+\t\t\t\t\treturn (f1 >= 0) ? x1 : x0;\n+\t\t\t\tdefault:\n+\t\t\t\t\tthrow new MathInternalError();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\t// If the current interval is within the given accuracies, we\n             // are satisfied with the current approximation.\n             if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),\n                                                      atol)) {\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 235, 
          "faulty": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "x1=x;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:06:15.435478746 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_365/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:23:13.772385841 -0500\n@@ -185,7 +185,6 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n                         f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n\n\n--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-01 06:06:11.755478662 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_365/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-01 06:23:13.772385841 -0500\n@@ -368,9 +368,7 @@\n     public static void verifyBracketing(UnivariateRealFunction function,\n                                         final double lower,\n                                         final double upper) {\n-        if (function == null) {\n-            throw new NullArgumentException(LocalizedFormats.FUNCTION);\n-        }\n+        verifyInterval(lower, upper);\n         verifyInterval(lower, upper);\n         if (!isBracketing(function, lower, upper)) {\n             throw new NoBracketingException(lower, upper,\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java", 
          "line": 371, 
          "faulty": "if (function == null) {\n  throw new NullArgumentException(LocalizedFormats.FUNCTION);\n}", 
          "type": "Replace", 
          "seed": "verifyInterval(lower,upper);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "x1=x;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:06:15.435478746 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_1198/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:29:52.183419214 -0500\n@@ -185,7 +185,10 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n+                        if (FastMath.abs(x1 - x0) < FastMath.max(rtol\n+\t\t\t\t\t\t\t\t* FastMath.abs(x1), atol)) {\n+\t\t\t\t\t\t\treturn x1;\n+\t\t\t\t\t\t}\n                         f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n\n\n--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-01 06:06:11.755478662 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_1198/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-01 06:29:52.187419204 -0500\n@@ -307,7 +307,12 @@\n         }\n         final double fLo = function.value(lower);\n         final double fHi = function.value(upper);\n-        return (fLo >= 0 && fHi <= 0) || (fLo <= 0 && fHi >= 0);\n+        if (lower >= upper) {\n+\t\t\tthrow new NumberIsTooLargeException(\n+\t\t\t\t\tLocalizedFormats.ENDPOINTS_NOT_AN_INTERVAL, lower, upper,\n+\t\t\t\t\tfalse);\n+\t\t}\n+\t\treturn (fLo >= 0 && fHi <= 0) || (fLo <= 0 && fHi >= 0);\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java", 
          "line": 310, 
          "faulty": "return (fLo >= 0 && fHi <= 0) || (fLo <= 0 && fHi >= 0);", 
          "type": "InsertBefore", 
          "seed": "if (lower >= upper) {\n  throw new NumberIsTooLargeException(LocalizedFormats.ENDPOINTS_NOT_AN_INTERVAL,lower,upper,false);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\n  return x1;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:06:15.435478746 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_369/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:23:15.164382636 -0500\n@@ -185,7 +185,6 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n                         f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 117, 
          "faulty": "return super.solve(maxEval,f,min,max,startValue);", 
          "type": "Replace", 
          "seed": "return super.solve(maxEval,f,min,max,startValue);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "switch (allowed) {\ncase ANY_SIDE:\n  return x1;\ncase LEFT_SIDE:\nreturn inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:06:15.435478746 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_358/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:23:10.940392355 -0500\n@@ -185,8 +185,8 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n+                        incrementEvaluationCount();\n+\t\t\t\t\t\tf0 = computeObjectiveValue(x0);\n                     }\n                     break;\n                 default:\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "incrementEvaluationCount();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "f0*=f1 / (f1 + fx);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:06:15.435478746 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_408/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:23:32.156343383 -0500\n@@ -185,7 +185,6 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n                         f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n\n\n--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-01 06:06:11.755478662 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_408/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-01 06:23:32.156343383 -0500\n@@ -307,7 +307,12 @@\n         }\n         final double fLo = function.value(lower);\n         final double fHi = function.value(upper);\n-        return (fLo >= 0 && fHi <= 0) || (fLo <= 0 && fHi >= 0);\n+        if (lower >= upper) {\n+\t\t\tthrow new NumberIsTooLargeException(\n+\t\t\t\t\tLocalizedFormats.ENDPOINTS_NOT_AN_INTERVAL, lower, upper,\n+\t\t\t\t\tfalse);\n+\t\t}\n+\t\treturn (fLo >= 0 && fHi <= 0) || (fLo <= 0 && fHi >= 0);\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java", 
          "line": 310, 
          "faulty": "return (fLo >= 0 && fHi <= 0) || (fLo <= 0 && fHi >= 0);", 
          "type": "InsertBefore", 
          "seed": "if (lower >= upper) {\n  throw new NumberIsTooLargeException(LocalizedFormats.ENDPOINTS_NOT_AN_INTERVAL,lower,upper,false);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "x1=x;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:06:15.435478746 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_1307/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:30:45.707279558 -0500\n@@ -185,7 +185,7 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n+                        x1 = x;\n                         f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n\n\n--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-01 06:06:11.755478662 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_1307/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-01 06:30:45.711279547 -0500\n@@ -306,7 +306,8 @@\n             throw new NullArgumentException(LocalizedFormats.FUNCTION);\n         }\n         final double fLo = function.value(lower);\n-        final double fHi = function.value(upper);\n+        verifyInterval(lower, upper);\n+\t\tfinal double fHi = function.value(upper);\n         return (fLo >= 0 && fHi <= 0) || (fLo <= 0 && fHi >= 0);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java", 
          "line": 309, 
          "faulty": "final double fHi=function.value(upper);", 
          "type": "InsertBefore", 
          "seed": "verifyInterval(lower,upper);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "x1=x;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:06:15.435478746 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_1591/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:33:10.410905325 -0500\n@@ -185,7 +185,10 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n+                        if (FastMath.abs(x1 - x0) < FastMath.max(rtol\n+\t\t\t\t\t\t\t\t* FastMath.abs(x1), atol)) {\n+\t\t\t\t\t\t\treturn x1;\n+\t\t\t\t\t\t}\n                         f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n@@ -234,7 +237,8 @@\n             // are satisfied with the current approximation.\n             if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),\n                                                      atol)) {\n-                switch (allowed) {\n+                f0 = f1;\n+\t\t\t\tswitch (allowed) {\n                 case ANY_SIDE:\n                     return x1;\n                 case LEFT_SIDE:\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 237, 
          "faulty": "switch (allowed) {\ncase ANY_SIDE:\n  return x1;\ncase LEFT_SIDE:\nreturn inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}", 
          "type": "InsertBefore", 
          "seed": "f0=f1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\n  return x1;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:06:15.435478746 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_1029/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:28:34.567616774 -0500\n@@ -185,7 +185,6 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n                         f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n\n\n--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-01 06:06:11.755478662 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_1029/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-01 06:28:34.571616764 -0500\n@@ -373,6 +373,10 @@\n         }\n         verifyInterval(lower, upper);\n         if (!isBracketing(function, lower, upper)) {\n+\t\t\tthrow new NoBracketingException(lower, upper,\n+\t\t\t\t\tfunction.value(lower), function.value(upper));\n+\t\t}\n+\t\tif (!isBracketing(function, lower, upper)) {\n             throw new NoBracketingException(lower, upper,\n                                             function.value(lower),\n                                             function.value(upper));\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java", 
          "line": 375, 
          "faulty": "if (!isBracketing(function,lower,upper)) {\n  throw new NoBracketingException(lower,upper,function.value(lower),function.value(upper));\n}", 
          "type": "InsertBefore", 
          "seed": "if (!isBracketing(function,lower,upper)) {\n  throw new NoBracketingException(lower,upper,function.value(lower),function.value(upper));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "x1=x;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:06:15.435478746 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_904/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:27:36.003760420 -0500\n@@ -185,8 +185,6 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n                 default:\n\n\n--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-01 06:06:11.755478662 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_904/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-01 06:27:36.003760420 -0500\n@@ -306,7 +306,8 @@\n             throw new NullArgumentException(LocalizedFormats.FUNCTION);\n         }\n         final double fLo = function.value(lower);\n-        final double fHi = function.value(upper);\n+        verifyInterval(lower, upper);\n+\t\tfinal double fHi = function.value(upper);\n         return (fLo >= 0 && fHi <= 0) || (fLo <= 0 && fHi >= 0);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "f0*=0.5;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java", 
          "line": 309, 
          "faulty": "final double fHi=function.value(upper);", 
          "type": "InsertBefore", 
          "seed": "verifyInterval(lower,upper);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "switch (allowed) {\ncase ANY_SIDE:\n  return x1;\ncase LEFT_SIDE:\nreturn inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:06:15.435478746 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_1431/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:31:38.647142157 -0500\n@@ -185,7 +185,6 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n                         f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n@@ -236,7 +235,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    return inverted ? x0 : x1;\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "return inverted ? x0 : x1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "x1=x;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:06:15.435478746 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_246/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:22:22.708502157 -0500\n@@ -186,7 +186,8 @@\n                     // Nothing.\n                     if (x == x1) {\n                         x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n+                        incrementEvaluationCount();\n+\t\t\t\t\t\tf0 = computeObjectiveValue(x0);\n                     }\n                     break;\n                 default:\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "incrementEvaluationCount();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:06:15.435478746 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_90/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:20:55.180694732 -0500\n@@ -185,7 +185,7 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n+                        f0 *= f1 / (f1 + fx);\n                         f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "f0*=f1 / (f1 + fx);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:06:15.435478746 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_730/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:26:19.599946169 -0500\n@@ -142,7 +142,8 @@\n             return x1;\n         }\n \n-        // Verify bracketing of initial solution.\n+        verifyBracketing(x0, x1);\n+\t\t// Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n         // Get accuracies.\n@@ -185,7 +186,6 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n                         f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n\n\n--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-01 06:06:11.755478662 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_730/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-01 06:26:19.599946169 -0500\n@@ -302,9 +302,6 @@\n     public static boolean isBracketing(UnivariateRealFunction function,\n                                        final double lower,\n                                        final double upper) {\n-        if (function == null) {\n-            throw new NullArgumentException(LocalizedFormats.FUNCTION);\n-        }\n         final double fLo = function.value(lower);\n         final double fHi = function.value(upper);\n         return (fLo >= 0 && fHi <= 0) || (fLo <= 0 && fHi >= 0);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 146, 
          "faulty": "verifyBracketing(x0,x1);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(x0,x1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java", 
          "line": 305, 
          "faulty": "if (function == null) {\n  throw new NullArgumentException(LocalizedFormats.FUNCTION);\n}", 
          "type": "Delete", 
          "seed": "if (function == null) {\n  throw new NullArgumentException(LocalizedFormats.FUNCTION);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "switch (allowed) {\ncase ANY_SIDE:\n  return x1;\ncase LEFT_SIDE:\nreturn inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:06:15.435478746 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_177/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:21:53.060568454 -0500\n@@ -185,7 +185,7 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n+                        x1 = x;\n                         f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n\n\n--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-01 06:06:11.755478662 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_177/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-01 06:21:53.060568454 -0500\n@@ -305,7 +305,10 @@\n         if (function == null) {\n             throw new NullArgumentException(LocalizedFormats.FUNCTION);\n         }\n-        final double fLo = function.value(lower);\n+        if (function == null) {\n+\t\t\tthrow new NullArgumentException(LocalizedFormats.FUNCTION);\n+\t\t}\n+\t\tfinal double fLo = function.value(lower);\n         final double fHi = function.value(upper);\n         return (fLo >= 0 && fHi <= 0) || (fLo <= 0 && fHi >= 0);\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java", 
          "line": 308, 
          "faulty": "final double fLo=function.value(lower);", 
          "type": "InsertBefore", 
          "seed": "if (function == null) {\n  throw new NullArgumentException(LocalizedFormats.FUNCTION);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "x1=x;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:06:15.435478746 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_243/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:22:21.820504157 -0500\n@@ -145,7 +145,10 @@\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n-        // Get accuracies.\n+        if (f1 == 0.0) {\n+\t\t\treturn x1;\n+\t\t}\n+\t\t// Get accuracies.\n         final double ftol = getFunctionValueAccuracy();\n         final double atol = getAbsoluteAccuracy();\n         final double rtol = getRelativeAccuracy();\n@@ -183,11 +186,23 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    if (FastMath.abs(x1 - x0) < FastMath.max(\n+\t\t\t\t\t\t\trtol * FastMath.abs(x1), atol)) {\n+\t\t\t\t\t\tswitch (allowed) {\n+\t\t\t\t\t\tcase ANY_SIDE:\n+\t\t\t\t\t\t\treturn x1;\n+\t\t\t\t\t\tcase LEFT_SIDE:\n+\t\t\t\t\t\t\treturn inverted ? x1 : x0;\n+\t\t\t\t\t\tcase RIGHT_SIDE:\n+\t\t\t\t\t\t\treturn inverted ? x0 : x1;\n+\t\t\t\t\t\tcase BELOW_SIDE:\n+\t\t\t\t\t\t\treturn (f1 <= 0) ? x1 : x0;\n+\t\t\t\t\t\tcase ABOVE_SIDE:\n+\t\t\t\t\t\t\treturn (f1 >= 0) ? x1 : x0;\n+\t\t\t\t\t\tdefault:\n+\t\t\t\t\t\t\tthrow new MathInternalError();\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n                     break;\n                 default:\n                     // Should never happen.\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "x0=x1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 149, 
          "faulty": "final double ftol=getFunctionValueAccuracy();", 
          "type": "InsertBefore", 
          "seed": "if (f1 == 0.0) {\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Replace", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:06:15.435478746 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_704/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:26:08.359973305 -0500\n@@ -138,10 +138,6 @@\n         if (f0 == 0.0) {\n             return x0;\n         }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -185,7 +181,6 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n                         f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "x1=x;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:06:15.435478746 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_379/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:23:18.816374220 -0500\n@@ -185,7 +185,6 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n                         f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n\n\n--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-01 06:06:11.755478662 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_379/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-01 06:23:18.816374220 -0500\n@@ -372,6 +372,7 @@\n             throw new NullArgumentException(LocalizedFormats.FUNCTION);\n         }\n         verifyInterval(lower, upper);\n+\t\tverifyInterval(lower, upper);\n         if (!isBracketing(function, lower, upper)) {\n             throw new NoBracketingException(lower, upper,\n                                             function.value(lower),\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java", 
          "line": 374, 
          "faulty": "verifyInterval(lower,upper);", 
          "type": "InsertBefore", 
          "seed": "verifyInterval(lower,upper);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "x1=x;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:06:15.435478746 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_1665/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:33:52.758796476 -0500\n@@ -158,7 +158,35 @@\n         while (true) {\n             // Calculate the next approximation.\n             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n-            final double fx = computeObjectiveValue(x);\n+            if (FastMath.abs(f1) <= ftol) {\n+\t\t\t\tswitch (allowed) {\n+\t\t\t\tcase ANY_SIDE:\n+\t\t\t\t\treturn x1;\n+\t\t\t\tcase LEFT_SIDE:\n+\t\t\t\t\tif (inverted) {\n+\t\t\t\t\t\treturn x1;\n+\t\t\t\t\t}\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase RIGHT_SIDE:\n+\t\t\t\t\tif (!inverted) {\n+\t\t\t\t\t\treturn x1;\n+\t\t\t\t\t}\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase BELOW_SIDE:\n+\t\t\t\t\tif (f1 <= 0) {\n+\t\t\t\t\t\treturn x1;\n+\t\t\t\t\t}\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase ABOVE_SIDE:\n+\t\t\t\t\tif (f1 >= 0) {\n+\t\t\t\t\t\treturn x1;\n+\t\t\t\t\t}\n+\t\t\t\t\tbreak;\n+\t\t\t\tdefault:\n+\t\t\t\t\tthrow new MathInternalError();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tfinal double fx = computeObjectiveValue(x);\n \n             // If the new approximation is the exact root, return it. Since\n             // this is not an under-approximation or an over-approximation,\n@@ -185,7 +213,6 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n                         f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 161, 
          "faulty": "final double fx=computeObjectiveValue(x);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(f1) <= ftol) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  if (inverted) {\n    return x1;\n  }\nbreak;\ncase RIGHT_SIDE:\nif (!inverted) {\nreturn x1;\n}\nbreak;\ncase BELOW_SIDE:\nif (f1 <= 0) {\nreturn x1;\n}\nbreak;\ncase ABOVE_SIDE:\nif (f1 >= 0) {\nreturn x1;\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\n  return x1;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:06:15.435478746 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_39/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:20:20.072768950 -0500\n@@ -183,11 +183,23 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    if (FastMath.abs(x1 - x0) < FastMath.max(\n+\t\t\t\t\t\t\trtol * FastMath.abs(x1), atol)) {\n+\t\t\t\t\t\tswitch (allowed) {\n+\t\t\t\t\t\tcase ANY_SIDE:\n+\t\t\t\t\t\t\treturn x1;\n+\t\t\t\t\t\tcase LEFT_SIDE:\n+\t\t\t\t\t\t\treturn inverted ? x1 : x0;\n+\t\t\t\t\t\tcase RIGHT_SIDE:\n+\t\t\t\t\t\t\treturn inverted ? x0 : x1;\n+\t\t\t\t\t\tcase BELOW_SIDE:\n+\t\t\t\t\t\t\treturn (f1 <= 0) ? x1 : x0;\n+\t\t\t\t\t\tcase ABOVE_SIDE:\n+\t\t\t\t\t\t\treturn (f1 >= 0) ? x1 : x0;\n+\t\t\t\t\t\tdefault:\n+\t\t\t\t\t\t\tthrow new MathInternalError();\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n                     break;\n                 default:\n                     // Should never happen.\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Replace", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:06:15.435478746 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_161/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:21:40.488596256 -0500\n@@ -183,11 +183,23 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    if (FastMath.abs(x1 - x0) < FastMath.max(\n+\t\t\t\t\t\t\trtol * FastMath.abs(x1), atol)) {\n+\t\t\t\t\t\tswitch (allowed) {\n+\t\t\t\t\t\tcase ANY_SIDE:\n+\t\t\t\t\t\t\treturn x1;\n+\t\t\t\t\t\tcase LEFT_SIDE:\n+\t\t\t\t\t\t\treturn inverted ? x1 : x0;\n+\t\t\t\t\t\tcase RIGHT_SIDE:\n+\t\t\t\t\t\t\treturn inverted ? x0 : x1;\n+\t\t\t\t\t\tcase BELOW_SIDE:\n+\t\t\t\t\t\t\treturn (f1 <= 0) ? x1 : x0;\n+\t\t\t\t\t\tcase ABOVE_SIDE:\n+\t\t\t\t\t\t\treturn (f1 >= 0) ? x1 : x0;\n+\t\t\t\t\t\tdefault:\n+\t\t\t\t\t\t\tthrow new MathInternalError();\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n                     break;\n                 default:\n                     // Should never happen.\n\n\n--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-01 06:06:11.755478662 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_161/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-01 06:21:40.488596256 -0500\n@@ -371,7 +371,8 @@\n         if (function == null) {\n             throw new NullArgumentException(LocalizedFormats.FUNCTION);\n         }\n-        verifyInterval(lower, upper);\n+        UnivariateRealSolverUtils.verifyInterval(lower, upper);\n+\t\tverifyInterval(lower, upper);\n         if (!isBracketing(function, lower, upper)) {\n             throw new NoBracketingException(lower, upper,\n                                             function.value(lower),\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java", 
          "line": 374, 
          "faulty": "verifyInterval(lower,upper);", 
          "type": "InsertBefore", 
          "seed": "UnivariateRealSolverUtils.verifyInterval(lower,upper);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Replace", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:06:15.435478746 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_814/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:26:54.567861420 -0500\n@@ -185,7 +185,6 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n                         f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n\n\n--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-01 06:06:11.755478662 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_814/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-01 06:26:54.567861420 -0500\n@@ -368,7 +368,12 @@\n     public static void verifyBracketing(UnivariateRealFunction function,\n                                         final double lower,\n                                         final double upper) {\n-        if (function == null) {\n+        if (lower >= upper) {\n+\t\t\t\t\t\t\t\t\t\t\t\tthrow new NumberIsTooLargeException(\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\tLocalizedFormats.ENDPOINTS_NOT_AN_INTERVAL,\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\tlower, upper, false);\n+\t\t\t\t\t\t\t\t\t\t\t}\n+\t\tif (function == null) {\n             throw new NullArgumentException(LocalizedFormats.FUNCTION);\n         }\n         verifyInterval(lower, upper);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java", 
          "line": 371, 
          "faulty": "if (function == null) {\n  throw new NullArgumentException(LocalizedFormats.FUNCTION);\n}", 
          "type": "InsertBefore", 
          "seed": "if (lower >= upper) {\n  throw new NumberIsTooLargeException(LocalizedFormats.ENDPOINTS_NOT_AN_INTERVAL,lower,upper,false);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "x1=x;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:06:15.435478746 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_432/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:23:41.888320795 -0500\n@@ -185,7 +185,7 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n+                        x1 = x;\n                         f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "Replace", 
          "seed": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "x1=x;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:06:15.435478746 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_310/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:22:50.628438870 -0500\n@@ -183,11 +183,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:06:15.435478746 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_768/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:26:35.167908497 -0500\n@@ -142,7 +142,8 @@\n             return x1;\n         }\n \n-        // Verify bracketing of initial solution.\n+        verifyBracketing(x0, x1);\n+\t\t// Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n         // Get accuracies.\n@@ -185,7 +186,6 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n                         f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 146, 
          "faulty": "verifyBracketing(x0,x1);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(x0,x1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "switch (allowed) {\ncase ANY_SIDE:\n  return x1;\ncase LEFT_SIDE:\nreturn inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:06:15.435478746 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_1457/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:31:52.371106638 -0500\n@@ -172,7 +172,35 @@\n                 // The value of x1 has switched to the other bound, thus inverting\n                 // the interval.\n                 x0 = x1;\n-                f0 = f1;\n+                if (FastMath.abs(f1) <= ftol) {\n+\t\t\t\t\tswitch (allowed) {\n+\t\t\t\t\tcase ANY_SIDE:\n+\t\t\t\t\t\treturn x1;\n+\t\t\t\t\tcase LEFT_SIDE:\n+\t\t\t\t\t\tif (inverted) {\n+\t\t\t\t\t\t\treturn x1;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\tcase RIGHT_SIDE:\n+\t\t\t\t\t\tif (!inverted) {\n+\t\t\t\t\t\t\treturn x1;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\tcase BELOW_SIDE:\n+\t\t\t\t\t\tif (f1 <= 0) {\n+\t\t\t\t\t\t\treturn x1;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\tcase ABOVE_SIDE:\n+\t\t\t\t\t\tif (f1 >= 0) {\n+\t\t\t\t\t\t\treturn x1;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\tdefault:\n+\t\t\t\t\t\tthrow new MathInternalError();\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tf0 = f1;\n                 inverted = !inverted;\n             } else {\n                 switch (method) {\n@@ -185,7 +213,6 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n                         f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n\n\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java", 
          "line": 310, 
          "faulty": "return (fLo >= 0 && fHi <= 0) || (fLo <= 0 && fHi >= 0);", 
          "type": "Replace", 
          "seed": "return (fLo >= 0 && fHi <= 0) || (fLo <= 0 && fHi >= 0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 175, 
          "faulty": "f0=f1;", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(f1) <= ftol) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  if (inverted) {\n    return x1;\n  }\nbreak;\ncase RIGHT_SIDE:\nif (!inverted) {\nreturn x1;\n}\nbreak;\ncase BELOW_SIDE:\nif (f1 <= 0) {\nreturn x1;\n}\nbreak;\ncase ABOVE_SIDE:\nif (f1 >= 0) {\nreturn x1;\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "x1=x;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:06:15.435478746 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_1697/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:34:05.870762821 -0500\n@@ -185,8 +185,6 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n                 default:\n\n\n--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-01 06:06:11.755478662 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_1697/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-01 06:34:05.870762821 -0500\n@@ -305,7 +305,10 @@\n         if (function == null) {\n             throw new NullArgumentException(LocalizedFormats.FUNCTION);\n         }\n-        final double fLo = function.value(lower);\n+        if (function == null) {\n+\t\t\tthrow new NullArgumentException(LocalizedFormats.FUNCTION);\n+\t\t}\n+\t\tfinal double fLo = function.value(lower);\n         final double fHi = function.value(upper);\n         return (fLo >= 0 && fHi <= 0) || (fLo <= 0 && fHi >= 0);\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java", 
          "line": 308, 
          "faulty": "final double fLo=function.value(lower);", 
          "type": "InsertBefore", 
          "seed": "if (function == null) {\n  throw new NullArgumentException(LocalizedFormats.FUNCTION);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "if (!inverted) {\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "x1=x;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:06:15.435478746 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_266/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:22:32.152480839 -0500\n@@ -185,7 +185,10 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n+                        if (FastMath.abs(x1 - x0) < FastMath.max(rtol\n+\t\t\t\t\t\t\t\t* FastMath.abs(x1), atol)) {\n+\t\t\t\t\t\t\treturn x1;\n+\t\t\t\t\t\t}\n                         f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\n  return x1;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:06:15.435478746 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_1137/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:29:21.471499749 -0500\n@@ -138,10 +138,6 @@\n         if (f0 == 0.0) {\n             return x0;\n         }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -183,11 +179,23 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    if (FastMath.abs(x1 - x0) < FastMath.max(\n+\t\t\t\t\t\t\trtol * FastMath.abs(x1), atol)) {\n+\t\t\t\t\t\tswitch (allowed) {\n+\t\t\t\t\t\tcase ANY_SIDE:\n+\t\t\t\t\t\t\treturn x1;\n+\t\t\t\t\t\tcase LEFT_SIDE:\n+\t\t\t\t\t\t\treturn inverted ? x1 : x0;\n+\t\t\t\t\t\tcase RIGHT_SIDE:\n+\t\t\t\t\t\t\treturn inverted ? x0 : x1;\n+\t\t\t\t\t\tcase BELOW_SIDE:\n+\t\t\t\t\t\t\treturn (f1 <= 0) ? x1 : x0;\n+\t\t\t\t\t\tcase ABOVE_SIDE:\n+\t\t\t\t\t\t\treturn (f1 >= 0) ? x1 : x0;\n+\t\t\t\t\t\tdefault:\n+\t\t\t\t\t\t\tthrow new MathInternalError();\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n                     break;\n                 default:\n                     // Should never happen.\n\n\n--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-01 06:06:11.755478662 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_1137/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-01 06:29:21.471499749 -0500\n@@ -305,7 +305,12 @@\n         if (function == null) {\n             throw new NullArgumentException(LocalizedFormats.FUNCTION);\n         }\n-        final double fLo = function.value(lower);\n+        if (lower >= upper) {\n+\t\t\tthrow new NumberIsTooLargeException(\n+\t\t\t\t\tLocalizedFormats.ENDPOINTS_NOT_AN_INTERVAL, lower, upper,\n+\t\t\t\t\tfalse);\n+\t\t}\n+\t\tfinal double fLo = function.value(lower);\n         final double fHi = function.value(upper);\n         return (fLo >= 0 && fHi <= 0) || (fLo <= 0 && fHi >= 0);\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java", 
          "line": 308, 
          "faulty": "final double fLo=function.value(lower);", 
          "type": "InsertBefore", 
          "seed": "if (lower >= upper) {\n  throw new NumberIsTooLargeException(LocalizedFormats.ENDPOINTS_NOT_AN_INTERVAL,lower,upper,false);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Replace", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:06:15.435478746 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_578/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:25:12.236107914 -0500\n@@ -121,7 +121,7 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        return super.solve(maxEval, f, min, max, startValue);\n     }\n \n     /** {@inheritDoc} */\n@@ -185,7 +185,34 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n+                        if (FastMath.abs(f1) <= ftol) {\n+\t\t\t\t\t\t\tswitch (allowed) {\n+\t\t\t\t\t\t\tcase ANY_SIDE:\n+\t\t\t\t\t\t\t\treturn x1;\n+\t\t\t\t\t\t\tcase LEFT_SIDE:\n+\t\t\t\t\t\t\t\tif (inverted) {\n+\t\t\t\t\t\t\t\t\treturn x1;\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\tcase RIGHT_SIDE:\n+\t\t\t\t\t\t\t\tif (!inverted) {\n+\t\t\t\t\t\t\t\t\treturn x1;\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\tcase BELOW_SIDE:\n+\t\t\t\t\t\t\t\tif (f1 <= 0) {\n+\t\t\t\t\t\t\t\t\treturn x1;\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\tcase ABOVE_SIDE:\n+\t\t\t\t\t\t\t\tif (f1 >= 0) {\n+\t\t\t\t\t\t\t\t\treturn x1;\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\tdefault:\n+\t\t\t\t\t\t\t\tthrow new MathInternalError();\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n                         f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "Replace", 
          "seed": "return super.solve(maxEval,f,min,max,startValue);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (FastMath.abs(f1) <= ftol) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  if (inverted) {\n    return x1;\n  }\nbreak;\ncase RIGHT_SIDE:\nif (!inverted) {\nreturn x1;\n}\nbreak;\ncase BELOW_SIDE:\nif (f1 <= 0) {\nreturn x1;\n}\nbreak;\ncase ABOVE_SIDE:\nif (f1 >= 0) {\nreturn x1;\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:06:15.435478746 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_319/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:22:54.324430434 -0500\n@@ -172,7 +172,8 @@\n                 // The value of x1 has switched to the other bound, thus inverting\n                 // the interval.\n                 x0 = x1;\n-                f0 = f1;\n+                x0 = x1;\n+\t\t\t\tf0 = f1;\n                 inverted = !inverted;\n             } else {\n                 switch (method) {\n@@ -185,7 +186,6 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n                         f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 175, 
          "faulty": "f0=f1;", 
          "type": "InsertBefore", 
          "seed": "x0=x1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\n  return x1;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:06:15.435478746 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_536/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:24:42.088179533 -0500\n@@ -142,7 +142,8 @@\n             return x1;\n         }\n \n-        // Verify bracketing of initial solution.\n+        verifyBracketing(x0, x1);\n+\t\t// Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n         // Get accuracies.\n@@ -185,7 +186,6 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n                         f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n\n\n--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-01 06:06:11.755478662 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_536/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-01 06:24:42.088179533 -0500\n@@ -306,7 +306,8 @@\n             throw new NullArgumentException(LocalizedFormats.FUNCTION);\n         }\n         final double fLo = function.value(lower);\n-        final double fHi = function.value(upper);\n+        verifyInterval(lower, upper);\n+\t\tfinal double fHi = function.value(upper);\n         return (fLo >= 0 && fHi <= 0) || (fLo <= 0 && fHi >= 0);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 146, 
          "faulty": "verifyBracketing(x0,x1);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(x0,x1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java", 
          "line": 309, 
          "faulty": "final double fHi=function.value(upper);", 
          "type": "InsertBefore", 
          "seed": "verifyInterval(lower,upper);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\n  return x1;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:06:15.435478746 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_288/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:22:41.568459492 -0500\n@@ -156,7 +156,24 @@\n \n         // Keep finding better approximations.\n         while (true) {\n-            // Calculate the next approximation.\n+            if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),\n+\t\t\t\t\tatol)) {\n+\t\t\t\tswitch (allowed) {\n+\t\t\t\tcase ANY_SIDE:\n+\t\t\t\t\treturn x1;\n+\t\t\t\tcase LEFT_SIDE:\n+\t\t\t\t\treturn inverted ? x1 : x0;\n+\t\t\t\tcase RIGHT_SIDE:\n+\t\t\t\t\treturn inverted ? x0 : x1;\n+\t\t\t\tcase BELOW_SIDE:\n+\t\t\t\t\treturn (f1 <= 0) ? x1 : x0;\n+\t\t\t\tcase ABOVE_SIDE:\n+\t\t\t\t\treturn (f1 >= 0) ? x1 : x0;\n+\t\t\t\tdefault:\n+\t\t\t\t\tthrow new MathInternalError();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\t// Calculate the next approximation.\n             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n             final double fx = computeObjectiveValue(x);\n \n@@ -169,7 +186,24 @@\n \n             // Update the bounds with the new approximation.\n             if (f1 * fx < 0) {\n-                // The value of x1 has switched to the other bound, thus inverting\n+                if (FastMath.abs(x1 - x0) < FastMath.max(\n+\t\t\t\t\t\trtol * FastMath.abs(x1), atol)) {\n+\t\t\t\t\tswitch (allowed) {\n+\t\t\t\t\tcase ANY_SIDE:\n+\t\t\t\t\t\treturn x1;\n+\t\t\t\t\tcase LEFT_SIDE:\n+\t\t\t\t\t\treturn inverted ? x1 : x0;\n+\t\t\t\t\tcase RIGHT_SIDE:\n+\t\t\t\t\t\treturn inverted ? x0 : x1;\n+\t\t\t\t\tcase BELOW_SIDE:\n+\t\t\t\t\t\treturn (f1 <= 0) ? x1 : x0;\n+\t\t\t\t\tcase ABOVE_SIDE:\n+\t\t\t\t\t\treturn (f1 >= 0) ? x1 : x0;\n+\t\t\t\t\tdefault:\n+\t\t\t\t\t\tthrow new MathInternalError();\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\t// The value of x1 has switched to the other bound, thus inverting\n                 // the interval.\n                 x0 = x1;\n                 f0 = f1;\n@@ -185,7 +219,6 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n                         f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 160, 
          "faulty": "final double x=x1 - ((f1 * (x1 - x0)) / (f1 - f0));", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 174, 
          "faulty": "x0=x1;", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "switch (allowed) {\ncase ANY_SIDE:\n  return x1;\ncase LEFT_SIDE:\nreturn inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:06:15.435478746 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_900/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:27:34.659763704 -0500\n@@ -185,7 +185,6 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n                         f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n\n\n--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-01 06:06:11.755478662 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_900/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-01 06:27:34.659763704 -0500\n@@ -306,7 +306,8 @@\n             throw new NullArgumentException(LocalizedFormats.FUNCTION);\n         }\n         final double fLo = function.value(lower);\n-        final double fHi = function.value(upper);\n+        verifyInterval(lower, upper);\n+\t\tfinal double fHi = function.value(upper);\n         return (fLo >= 0 && fHi <= 0) || (fLo <= 0 && fHi >= 0);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java", 
          "line": 309, 
          "faulty": "final double fHi=function.value(upper);", 
          "type": "InsertBefore", 
          "seed": "verifyInterval(lower,upper);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "x1=x;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:06:15.435478746 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_422/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:23:37.732330450 -0500\n@@ -185,7 +185,7 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n+                        x1 = x;\n                         f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n@@ -236,7 +236,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    return inverted ? x0 : x1;\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "return inverted ? x0 : x1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "x1=x;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:06:15.435478746 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_779/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:26:39.759897368 -0500\n@@ -132,12 +132,9 @@\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n+        if (f1 == 0.0) {\n+\t\t\treturn x1;\n+\t\t}\n         if (f1 == 0.0) {\n             return x1;\n         }\n@@ -185,7 +182,6 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n                         f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "switch (allowed) {\ncase ANY_SIDE:\n  return x1;\ncase LEFT_SIDE:\nreturn inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Replace", 
          "seed": "if (f1 == 0.0) {\n  return x1;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:06:15.435478746 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_1688/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:34:02.698770961 -0500\n@@ -185,7 +185,7 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n+                        x1 = x;\n                         f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n\n\n--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-01 06:06:11.755478662 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_1688/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-01 06:34:02.698770961 -0500\n@@ -368,7 +368,12 @@\n     public static void verifyBracketing(UnivariateRealFunction function,\n                                         final double lower,\n                                         final double upper) {\n-        if (function == null) {\n+        if (lower >= upper) {\n+\t\t\t\t\t\t\t\t\t\t\t\tthrow new NumberIsTooLargeException(\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\tLocalizedFormats.ENDPOINTS_NOT_AN_INTERVAL,\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\tlower, upper, false);\n+\t\t\t\t\t\t\t\t\t\t\t}\n+\t\tif (function == null) {\n             throw new NullArgumentException(LocalizedFormats.FUNCTION);\n         }\n         verifyInterval(lower, upper);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java", 
          "line": 371, 
          "faulty": "if (function == null) {\n  throw new NullArgumentException(LocalizedFormats.FUNCTION);\n}", 
          "type": "InsertBefore", 
          "seed": "if (lower >= upper) {\n  throw new NumberIsTooLargeException(LocalizedFormats.ENDPOINTS_NOT_AN_INTERVAL,lower,upper,false);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "x1=x;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:06:15.435478746 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_868/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:27:22.467793478 -0500\n@@ -185,7 +185,6 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n                         f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n@@ -234,7 +233,8 @@\n             // are satisfied with the current approximation.\n             if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),\n                                                      atol)) {\n-                switch (allowed) {\n+                f0 = f1;\n+\t\t\t\tswitch (allowed) {\n                 case ANY_SIDE:\n                     return x1;\n                 case LEFT_SIDE:\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 237, 
          "faulty": "switch (allowed) {\ncase ANY_SIDE:\n  return x1;\ncase LEFT_SIDE:\nreturn inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}", 
          "type": "InsertBefore", 
          "seed": "f0=f1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "x1=x;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:06:15.435478746 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_346/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:23:05.932403858 -0500\n@@ -172,7 +172,35 @@\n                 // The value of x1 has switched to the other bound, thus inverting\n                 // the interval.\n                 x0 = x1;\n-                f0 = f1;\n+                if (FastMath.abs(f1) <= ftol) {\n+\t\t\t\t\tswitch (allowed) {\n+\t\t\t\t\tcase ANY_SIDE:\n+\t\t\t\t\t\treturn x1;\n+\t\t\t\t\tcase LEFT_SIDE:\n+\t\t\t\t\t\tif (inverted) {\n+\t\t\t\t\t\t\treturn x1;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\tcase RIGHT_SIDE:\n+\t\t\t\t\t\tif (!inverted) {\n+\t\t\t\t\t\t\treturn x1;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\tcase BELOW_SIDE:\n+\t\t\t\t\t\tif (f1 <= 0) {\n+\t\t\t\t\t\t\treturn x1;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\tcase ABOVE_SIDE:\n+\t\t\t\t\t\tif (f1 >= 0) {\n+\t\t\t\t\t\t\treturn x1;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\tdefault:\n+\t\t\t\t\t\tthrow new MathInternalError();\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tf0 = f1;\n                 inverted = !inverted;\n             } else {\n                 switch (method) {\n@@ -185,7 +213,6 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n                         f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 175, 
          "faulty": "f0=f1;", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(f1) <= ftol) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  if (inverted) {\n    return x1;\n  }\nbreak;\ncase RIGHT_SIDE:\nif (!inverted) {\nreturn x1;\n}\nbreak;\ncase BELOW_SIDE:\nif (f1 <= 0) {\nreturn x1;\n}\nbreak;\ncase ABOVE_SIDE:\nif (f1 >= 0) {\nreturn x1;\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "x1=x;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:06:15.435478746 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_1025/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:28:27.619633865 -0500\n@@ -185,8 +185,10 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n+                        if (FastMath.abs(x1 - x0) < FastMath.max(rtol\n+\t\t\t\t\t\t\t\t* FastMath.abs(x1), atol)) {\n+\t\t\t\t\t\t\treturn x1;\n+\t\t\t\t\t\t}\n                     }\n                     break;\n                 default:\n@@ -234,7 +236,8 @@\n             // are satisfied with the current approximation.\n             if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),\n                                                      atol)) {\n-                switch (allowed) {\n+                f0 = f1;\n+\t\t\t\tswitch (allowed) {\n                 case ANY_SIDE:\n                     return x1;\n                 case LEFT_SIDE:\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "x0=x1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 237, 
          "faulty": "switch (allowed) {\ncase ANY_SIDE:\n  return x1;\ncase LEFT_SIDE:\nreturn inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}", 
          "type": "InsertBefore", 
          "seed": "f0=f1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\n  return x1;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:06:15.435478746 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_286/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:22:40.468461990 -0500\n@@ -185,7 +185,7 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n+                        x1 = x;\n                         f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n\n\n--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-01 06:06:11.755478662 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_286/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-01 06:22:40.512461890 -0500\n@@ -371,7 +371,10 @@\n         if (function == null) {\n             throw new NullArgumentException(LocalizedFormats.FUNCTION);\n         }\n-        verifyInterval(lower, upper);\n+        if (function == null) {\n+\t\t\tthrow new NullArgumentException(LocalizedFormats.FUNCTION);\n+\t\t}\n+\t\tverifyInterval(lower, upper);\n         if (!isBracketing(function, lower, upper)) {\n             throw new NoBracketingException(lower, upper,\n                                             function.value(lower),\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java", 
          "line": 374, 
          "faulty": "verifyInterval(lower,upper);", 
          "type": "InsertBefore", 
          "seed": "if (function == null) {\n  throw new NullArgumentException(LocalizedFormats.FUNCTION);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "x1=x;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:06:15.435478746 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_1694/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:34:04.978765110 -0500\n@@ -132,12 +132,6 @@\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n         if (f1 == 0.0) {\n             return x1;\n         }\n@@ -185,8 +179,6 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n                 default:\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "f0*=0.5;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "switch (allowed) {\ncase ANY_SIDE:\n  return x1;\ncase LEFT_SIDE:\nreturn inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "if (f1 <= 0) {\n  return x1;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:06:15.435478746 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_949/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:27:55.347713080 -0500\n@@ -185,7 +185,7 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n+                        x1 = x;\n                         f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n\n\n--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-01 06:06:11.755478662 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_949/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-01 06:27:55.351713070 -0500\n@@ -302,9 +302,6 @@\n     public static boolean isBracketing(UnivariateRealFunction function,\n                                        final double lower,\n                                        final double upper) {\n-        if (function == null) {\n-            throw new NullArgumentException(LocalizedFormats.FUNCTION);\n-        }\n         final double fLo = function.value(lower);\n         final double fHi = function.value(upper);\n         return (fLo >= 0 && fHi <= 0) || (fLo <= 0 && fHi >= 0);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java", 
          "line": 305, 
          "faulty": "if (function == null) {\n  throw new NullArgumentException(LocalizedFormats.FUNCTION);\n}", 
          "type": "Delete", 
          "seed": "if (function == null) {\n  throw new NullArgumentException(LocalizedFormats.FUNCTION);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "x1=x;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:06:15.435478746 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_564/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:24:59.336138624 -0500\n@@ -185,7 +185,10 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n+                        if (FastMath.abs(x1 - x0) < FastMath.max(rtol\n+\t\t\t\t\t\t\t\t* FastMath.abs(x1), atol)) {\n+\t\t\t\t\t\t\treturn x1;\n+\t\t\t\t\t\t}\n                         f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n\n\n--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-01 06:06:11.755478662 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_564/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-01 06:24:59.336138624 -0500\n@@ -368,7 +368,8 @@\n     public static void verifyBracketing(UnivariateRealFunction function,\n                                         final double lower,\n                                         final double upper) {\n-        if (function == null) {\n+        verifyInterval(lower, upper);\n+\t\tif (function == null) {\n             throw new NullArgumentException(LocalizedFormats.FUNCTION);\n         }\n         verifyInterval(lower, upper);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java", 
          "line": 371, 
          "faulty": "if (function == null) {\n  throw new NullArgumentException(LocalizedFormats.FUNCTION);\n}", 
          "type": "InsertBefore", 
          "seed": "verifyInterval(lower,upper);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\n  return x1;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:06:15.435478746 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_733/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:26:20.531943916 -0500\n@@ -132,12 +132,6 @@\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n         if (f1 == 0.0) {\n             return x1;\n         }\n@@ -183,11 +177,23 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    if (FastMath.abs(x1 - x0) < FastMath.max(\n+\t\t\t\t\t\t\trtol * FastMath.abs(x1), atol)) {\n+\t\t\t\t\t\tswitch (allowed) {\n+\t\t\t\t\t\tcase ANY_SIDE:\n+\t\t\t\t\t\t\treturn x1;\n+\t\t\t\t\t\tcase LEFT_SIDE:\n+\t\t\t\t\t\t\treturn inverted ? x1 : x0;\n+\t\t\t\t\t\tcase RIGHT_SIDE:\n+\t\t\t\t\t\t\treturn inverted ? x0 : x1;\n+\t\t\t\t\t\tcase BELOW_SIDE:\n+\t\t\t\t\t\t\treturn (f1 <= 0) ? x1 : x0;\n+\t\t\t\t\t\tcase ABOVE_SIDE:\n+\t\t\t\t\t\t\treturn (f1 >= 0) ? x1 : x0;\n+\t\t\t\t\t\tdefault:\n+\t\t\t\t\t\t\tthrow new MathInternalError();\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n                     break;\n                 default:\n                     // Should never happen.\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Replace", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "if (f1 <= 0) {\n  return x1;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:06:15.435478746 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_877/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:27:25.659785688 -0500\n@@ -185,7 +185,7 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n+                        x1 = x;\n                         f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n@@ -236,7 +236,10 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    {\n+\t\t\t\t\t\tf0 *= 0.5;\n+\t\t\t\t\t\treturn x1;\n+\t\t\t\t\t}\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "InsertBefore", 
          "seed": "f0*=0.5;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "x1=x;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:06:15.435478746 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_540/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:24:43.452176305 -0500\n@@ -158,7 +158,35 @@\n         while (true) {\n             // Calculate the next approximation.\n             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n-            final double fx = computeObjectiveValue(x);\n+            if (FastMath.abs(f1) <= ftol) {\n+\t\t\t\tswitch (allowed) {\n+\t\t\t\tcase ANY_SIDE:\n+\t\t\t\t\treturn x1;\n+\t\t\t\tcase LEFT_SIDE:\n+\t\t\t\t\tif (inverted) {\n+\t\t\t\t\t\treturn x1;\n+\t\t\t\t\t}\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase RIGHT_SIDE:\n+\t\t\t\t\tif (!inverted) {\n+\t\t\t\t\t\treturn x1;\n+\t\t\t\t\t}\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase BELOW_SIDE:\n+\t\t\t\t\tif (f1 <= 0) {\n+\t\t\t\t\t\treturn x1;\n+\t\t\t\t\t}\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase ABOVE_SIDE:\n+\t\t\t\t\tif (f1 >= 0) {\n+\t\t\t\t\t\treturn x1;\n+\t\t\t\t\t}\n+\t\t\t\t\tbreak;\n+\t\t\t\tdefault:\n+\t\t\t\t\tthrow new MathInternalError();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tfinal double fx = computeObjectiveValue(x);\n \n             // If the new approximation is the exact root, return it. Since\n             // this is not an under-approximation or an over-approximation,\n@@ -185,7 +213,10 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n+                        if (FastMath.abs(x1 - x0) < FastMath.max(rtol\n+\t\t\t\t\t\t\t\t* FastMath.abs(x1), atol)) {\n+\t\t\t\t\t\t\treturn x1;\n+\t\t\t\t\t\t}\n                         f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 161, 
          "faulty": "final double fx=computeObjectiveValue(x);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(f1) <= ftol) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  if (inverted) {\n    return x1;\n  }\nbreak;\ncase RIGHT_SIDE:\nif (!inverted) {\nreturn x1;\n}\nbreak;\ncase BELOW_SIDE:\nif (f1 <= 0) {\nreturn x1;\n}\nbreak;\ncase ABOVE_SIDE:\nif (f1 >= 0) {\nreturn x1;\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\n  return x1;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:06:15.435478746 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_142/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:21:32.044614818 -0500\n@@ -172,7 +172,35 @@\n                 // The value of x1 has switched to the other bound, thus inverting\n                 // the interval.\n                 x0 = x1;\n-                f0 = f1;\n+                if (FastMath.abs(f1) <= ftol) {\n+\t\t\t\t\tswitch (allowed) {\n+\t\t\t\t\tcase ANY_SIDE:\n+\t\t\t\t\t\treturn x1;\n+\t\t\t\t\tcase LEFT_SIDE:\n+\t\t\t\t\t\tif (inverted) {\n+\t\t\t\t\t\t\treturn x1;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\tcase RIGHT_SIDE:\n+\t\t\t\t\t\tif (!inverted) {\n+\t\t\t\t\t\t\treturn x1;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\tcase BELOW_SIDE:\n+\t\t\t\t\t\tif (f1 <= 0) {\n+\t\t\t\t\t\t\treturn x1;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\tcase ABOVE_SIDE:\n+\t\t\t\t\t\tif (f1 >= 0) {\n+\t\t\t\t\t\t\treturn x1;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\tdefault:\n+\t\t\t\t\t\tthrow new MathInternalError();\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tf0 = f1;\n                 inverted = !inverted;\n             } else {\n                 switch (method) {\n@@ -185,7 +213,7 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n+                        x1 = x;\n                         f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 175, 
          "faulty": "f0=f1;", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(f1) <= ftol) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  if (inverted) {\n    return x1;\n  }\nbreak;\ncase RIGHT_SIDE:\nif (!inverted) {\nreturn x1;\n}\nbreak;\ncase BELOW_SIDE:\nif (f1 <= 0) {\nreturn x1;\n}\nbreak;\ncase ABOVE_SIDE:\nif (f1 >= 0) {\nreturn x1;\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "x1=x;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:06:15.435478746 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_237/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:22:19.512509351 -0500\n@@ -185,8 +185,6 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n                 default:\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "if (!inverted) {\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "x1=x;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:06:15.435478746 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_446/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:23:53.920292767 -0500\n@@ -185,7 +185,7 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n+                        x1 = x;\n                         f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n\n\n--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-01 06:06:11.755478662 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_446/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-01 06:23:53.920292767 -0500\n@@ -302,7 +302,8 @@\n     public static boolean isBracketing(UnivariateRealFunction function,\n                                        final double lower,\n                                        final double upper) {\n-        if (function == null) {\n+        verifyInterval(lower, upper);\n+\t\tif (function == null) {\n             throw new NullArgumentException(LocalizedFormats.FUNCTION);\n         }\n         final double fLo = function.value(lower);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java", 
          "line": 305, 
          "faulty": "if (function == null) {\n  throw new NullArgumentException(LocalizedFormats.FUNCTION);\n}", 
          "type": "InsertBefore", 
          "seed": "verifyInterval(lower,upper);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "x1=x;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:06:15.435478746 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_1597/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:33:12.730899356 -0500\n@@ -147,7 +147,10 @@\n \n         // Get accuracies.\n         final double ftol = getFunctionValueAccuracy();\n-        final double atol = getAbsoluteAccuracy();\n+        if (f1 == 0.0) {\n+\t\t\treturn x1;\n+\t\t}\n+\t\tfinal double atol = getAbsoluteAccuracy();\n         final double rtol = getRelativeAccuracy();\n \n         // Keep track of inverted intervals, meaning that the left bound is\n@@ -185,7 +188,7 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n+                        x1 = x;\n                         f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 150, 
          "faulty": "final double atol=getAbsoluteAccuracy();", 
          "type": "InsertBefore", 
          "seed": "if (f1 == 0.0) {\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "x1=x;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:06:15.435478746 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_272/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:22:34.528475460 -0500\n@@ -169,7 +169,10 @@\n \n             // Update the bounds with the new approximation.\n             if (f1 * fx < 0) {\n-                // The value of x1 has switched to the other bound, thus inverting\n+                if (fx == 0.0) {\n+\t\t\t\t\treturn x;\n+\t\t\t\t}\n+\t\t\t\t// The value of x1 has switched to the other bound, thus inverting\n                 // the interval.\n                 x0 = x1;\n                 f0 = f1;\n@@ -185,7 +188,6 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n                         f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 174, 
          "faulty": "x0=x1;", 
          "type": "InsertBefore", 
          "seed": "if (fx == 0.0) {\n  return x;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "x1=x;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:06:15.435478746 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_485/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:24:15.860241386 -0500\n@@ -185,7 +185,6 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n                         f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n\n\n--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-01 06:06:11.755478662 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_485/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-01 06:24:15.860241386 -0500\n@@ -302,7 +302,8 @@\n     public static boolean isBracketing(UnivariateRealFunction function,\n                                        final double lower,\n                                        final double upper) {\n-        if (function == null) {\n+        verifyInterval(lower, upper);\n+\t\tif (function == null) {\n             throw new NullArgumentException(LocalizedFormats.FUNCTION);\n         }\n         final double fLo = function.value(lower);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java", 
          "line": 305, 
          "faulty": "if (function == null) {\n  throw new NullArgumentException(LocalizedFormats.FUNCTION);\n}", 
          "type": "InsertBefore", 
          "seed": "verifyInterval(lower,upper);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\n  return x1;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:06:15.435478746 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_1159/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:29:30.823475192 -0500\n@@ -121,7 +121,7 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        return super.solve(maxEval, f, min, max, startValue);\n     }\n \n     /** {@inheritDoc} */\n@@ -172,7 +172,35 @@\n                 // The value of x1 has switched to the other bound, thus inverting\n                 // the interval.\n                 x0 = x1;\n-                f0 = f1;\n+                if (FastMath.abs(f1) <= ftol) {\n+\t\t\t\t\tswitch (allowed) {\n+\t\t\t\t\tcase ANY_SIDE:\n+\t\t\t\t\t\treturn x1;\n+\t\t\t\t\tcase LEFT_SIDE:\n+\t\t\t\t\t\tif (inverted) {\n+\t\t\t\t\t\t\treturn x1;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\tcase RIGHT_SIDE:\n+\t\t\t\t\t\tif (!inverted) {\n+\t\t\t\t\t\t\treturn x1;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\tcase BELOW_SIDE:\n+\t\t\t\t\t\tif (f1 <= 0) {\n+\t\t\t\t\t\t\treturn x1;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\tcase ABOVE_SIDE:\n+\t\t\t\t\t\tif (f1 >= 0) {\n+\t\t\t\t\t\t\treturn x1;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\tdefault:\n+\t\t\t\t\t\tthrow new MathInternalError();\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tf0 = f1;\n                 inverted = !inverted;\n             } else {\n                 switch (method) {\n@@ -185,7 +213,7 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n+                        x1 = x;\n                         f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 175, 
          "faulty": "f0=f1;", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(f1) <= ftol) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  if (inverted) {\n    return x1;\n  }\nbreak;\ncase RIGHT_SIDE:\nif (!inverted) {\nreturn x1;\n}\nbreak;\ncase BELOW_SIDE:\nif (f1 <= 0) {\nreturn x1;\n}\nbreak;\ncase ABOVE_SIDE:\nif (f1 >= 0) {\nreturn x1;\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "Replace", 
          "seed": "return super.solve(maxEval,f,min,max,startValue);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "x1=x;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:06:15.435478746 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_831/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:27:00.975845839 -0500\n@@ -185,7 +185,23 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n+                        if (FastMath.abs(x1 - x0) < FastMath.max(rtol\n+\t\t\t\t\t\t\t\t* FastMath.abs(x1), atol)) {\n+\t\t\t\t\t\t\tswitch (allowed) {\n+\t\t\t\t\t\t\tcase ANY_SIDE:\n+\t\t\t\t\t\t\t\treturn x1;\n+\t\t\t\t\t\t\tcase LEFT_SIDE:\n+\t\t\t\t\t\t\t\treturn inverted ? x1 : x0;\n+\t\t\t\t\t\t\tcase RIGHT_SIDE:\n+\t\t\t\t\t\t\t\treturn inverted ? x0 : x1;\n+\t\t\t\t\t\t\tcase BELOW_SIDE:\n+\t\t\t\t\t\t\t\treturn (f1 <= 0) ? x1 : x0;\n+\t\t\t\t\t\t\tcase ABOVE_SIDE:\n+\t\t\t\t\t\t\t\treturn (f1 >= 0) ? x1 : x0;\n+\t\t\t\t\t\t\tdefault:\n+\t\t\t\t\t\t\t\tthrow new MathInternalError();\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n                         f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n\n\n--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-01 06:06:11.755478662 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_831/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-01 06:27:00.975845839 -0500\n@@ -373,6 +373,10 @@\n         }\n         verifyInterval(lower, upper);\n         if (!isBracketing(function, lower, upper)) {\n+\t\t\tthrow new NoBracketingException(lower, upper,\n+\t\t\t\t\tfunction.value(lower), function.value(upper));\n+\t\t}\n+\t\tif (!isBracketing(function, lower, upper)) {\n             throw new NoBracketingException(lower, upper,\n                                             function.value(lower),\n                                             function.value(upper));\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java", 
          "line": 375, 
          "faulty": "if (!isBracketing(function,lower,upper)) {\n  throw new NoBracketingException(lower,upper,function.value(lower),function.value(upper));\n}", 
          "type": "InsertBefore", 
          "seed": "if (!isBracketing(function,lower,upper)) {\n  throw new NoBracketingException(lower,upper,function.value(lower),function.value(upper));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:06:15.435478746 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_954/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:27:57.131708708 -0500\n@@ -113,7 +113,8 @@\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue,\n                         final AllowedSolution allowedSolution) {\n-        this.allowed = allowedSolution;\n+        verifyInterval(min, max);\n+\t\tthis.allowed = allowedSolution;\n         return super.solve(maxEval, f, min, max, startValue);\n     }\n \n@@ -185,7 +186,6 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n                         f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 116, 
          "faulty": "this.allowed=allowedSolution;", 
          "type": "InsertBefore", 
          "seed": "verifyInterval(min,max);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "x1=x;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:06:15.435478746 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_284/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:22:39.264464724 -0500\n@@ -158,7 +158,10 @@\n         while (true) {\n             // Calculate the next approximation.\n             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n-            final double fx = computeObjectiveValue(x);\n+            if (f0 == 0.0) {\n+\t\t\t\treturn x0;\n+\t\t\t}\n+\t\t\tfinal double fx = computeObjectiveValue(x);\n \n             // If the new approximation is the exact root, return it. Since\n             // this is not an under-approximation or an over-approximation,\n@@ -172,7 +175,35 @@\n                 // The value of x1 has switched to the other bound, thus inverting\n                 // the interval.\n                 x0 = x1;\n-                f0 = f1;\n+                if (FastMath.abs(f1) <= ftol) {\n+\t\t\t\t\tswitch (allowed) {\n+\t\t\t\t\tcase ANY_SIDE:\n+\t\t\t\t\t\treturn x1;\n+\t\t\t\t\tcase LEFT_SIDE:\n+\t\t\t\t\t\tif (inverted) {\n+\t\t\t\t\t\t\treturn x1;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\tcase RIGHT_SIDE:\n+\t\t\t\t\t\tif (!inverted) {\n+\t\t\t\t\t\t\treturn x1;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\tcase BELOW_SIDE:\n+\t\t\t\t\t\tif (f1 <= 0) {\n+\t\t\t\t\t\t\treturn x1;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\tcase ABOVE_SIDE:\n+\t\t\t\t\t\tif (f1 >= 0) {\n+\t\t\t\t\t\t\treturn x1;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\tdefault:\n+\t\t\t\t\t\tthrow new MathInternalError();\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tf0 = f1;\n                 inverted = !inverted;\n             } else {\n                 switch (method) {\n@@ -185,7 +216,6 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n                         f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 161, 
          "faulty": "final double fx=computeObjectiveValue(x);", 
          "type": "InsertBefore", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 175, 
          "faulty": "f0=f1;", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(f1) <= ftol) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  if (inverted) {\n    return x1;\n  }\nbreak;\ncase RIGHT_SIDE:\nif (!inverted) {\nreturn x1;\n}\nbreak;\ncase BELOW_SIDE:\nif (f1 <= 0) {\nreturn x1;\n}\nbreak;\ncase ABOVE_SIDE:\nif (f1 >= 0) {\nreturn x1;\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "x1=x;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:06:15.435478746 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_478/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:24:12.940248244 -0500\n@@ -169,7 +169,24 @@\n \n             // Update the bounds with the new approximation.\n             if (f1 * fx < 0) {\n-                // The value of x1 has switched to the other bound, thus inverting\n+                if (FastMath.abs(x1 - x0) < FastMath.max(\n+\t\t\t\t\t\trtol * FastMath.abs(x1), atol)) {\n+\t\t\t\t\tswitch (allowed) {\n+\t\t\t\t\tcase ANY_SIDE:\n+\t\t\t\t\t\treturn x1;\n+\t\t\t\t\tcase LEFT_SIDE:\n+\t\t\t\t\t\treturn inverted ? x1 : x0;\n+\t\t\t\t\tcase RIGHT_SIDE:\n+\t\t\t\t\t\treturn inverted ? x0 : x1;\n+\t\t\t\t\tcase BELOW_SIDE:\n+\t\t\t\t\t\treturn (f1 <= 0) ? x1 : x0;\n+\t\t\t\t\tcase ABOVE_SIDE:\n+\t\t\t\t\t\treturn (f1 >= 0) ? x1 : x0;\n+\t\t\t\t\tdefault:\n+\t\t\t\t\t\tthrow new MathInternalError();\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\t// The value of x1 has switched to the other bound, thus inverting\n                 // the interval.\n                 x0 = x1;\n                 f0 = f1;\n@@ -185,7 +202,6 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n                         f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 174, 
          "faulty": "x0=x1;", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "switch (allowed) {\ncase ANY_SIDE:\n  return x1;\ncase LEFT_SIDE:\nreturn inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:06:15.435478746 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_516/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:24:33.736199278 -0500\n@@ -185,7 +185,6 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n                         f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n\n\n--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-01 06:06:11.755478662 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_516/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-01 06:24:33.736199278 -0500\n@@ -302,9 +302,6 @@\n     public static boolean isBracketing(UnivariateRealFunction function,\n                                        final double lower,\n                                        final double upper) {\n-        if (function == null) {\n-            throw new NullArgumentException(LocalizedFormats.FUNCTION);\n-        }\n         final double fLo = function.value(lower);\n         final double fHi = function.value(upper);\n         return (fLo >= 0 && fHi <= 0) || (fLo <= 0 && fHi >= 0);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java", 
          "line": 305, 
          "faulty": "if (function == null) {\n  throw new NullArgumentException(LocalizedFormats.FUNCTION);\n}", 
          "type": "Delete", 
          "seed": "if (function == null) {\n  throw new NullArgumentException(LocalizedFormats.FUNCTION);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "switch (allowed) {\ncase ANY_SIDE:\n  return x1;\ncase LEFT_SIDE:\nreturn inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:06:15.435478746 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_277/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:22:36.352471328 -0500\n@@ -132,12 +132,6 @@\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n         if (f1 == 0.0) {\n             return x1;\n         }\n@@ -185,7 +179,7 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n+                        x1 = x;\n                         f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "x1=x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "f0*=0.5;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:06:15.435478746 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_420/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:23:37.252331565 -0500\n@@ -132,12 +132,6 @@\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n         if (f1 == 0.0) {\n             return x1;\n         }\n@@ -147,7 +141,10 @@\n \n         // Get accuracies.\n         final double ftol = getFunctionValueAccuracy();\n-        final double atol = getAbsoluteAccuracy();\n+        if (f1 == 0.0) {\n+\t\t\treturn x1;\n+\t\t}\n+\t\tfinal double atol = getAbsoluteAccuracy();\n         final double rtol = getRelativeAccuracy();\n \n         // Keep track of inverted intervals, meaning that the left bound is\n@@ -169,7 +166,10 @@\n \n             // Update the bounds with the new approximation.\n             if (f1 * fx < 0) {\n-                // The value of x1 has switched to the other bound, thus inverting\n+                if (fx == 0.0) {\n+\t\t\t\t\treturn x;\n+\t\t\t\t}\n+\t\t\t\t// The value of x1 has switched to the other bound, thus inverting\n                 // the interval.\n                 x0 = x1;\n                 f0 = f1;\n@@ -185,7 +185,6 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n                         f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 150, 
          "faulty": "final double atol=getAbsoluteAccuracy();", 
          "type": "InsertBefore", 
          "seed": "if (f1 == 0.0) {\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 174, 
          "faulty": "x0=x1;", 
          "type": "InsertBefore", 
          "seed": "if (fx == 0.0) {\n  return x;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "x1=x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "if (f1 <= 0) {\n  return x1;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:06:15.435478746 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_476/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:24:12.460249371 -0500\n@@ -185,7 +185,10 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n+                        if (FastMath.abs(x1 - x0) < FastMath.max(rtol\n+\t\t\t\t\t\t\t\t* FastMath.abs(x1), atol)) {\n+\t\t\t\t\t\t\treturn x1;\n+\t\t\t\t\t\t}\n                         f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n\n\n--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-01 06:06:11.755478662 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_476/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-01 06:24:12.464249361 -0500\n@@ -306,7 +306,8 @@\n             throw new NullArgumentException(LocalizedFormats.FUNCTION);\n         }\n         final double fLo = function.value(lower);\n-        final double fHi = function.value(upper);\n+        verifyInterval(lower, upper);\n+\t\tfinal double fHi = function.value(upper);\n         return (fLo >= 0 && fHi <= 0) || (fLo <= 0 && fHi >= 0);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java", 
          "line": 309, 
          "faulty": "final double fHi=function.value(upper);", 
          "type": "InsertBefore", 
          "seed": "verifyInterval(lower,upper);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\n  return x1;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:06:15.435478746 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_119/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:21:10.912660861 -0500\n@@ -185,8 +185,10 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n+                        x1 = x;\n+                        if (!inverted) {\n+\t\t\t\t\t\t\treturn x1;\n+\t\t\t\t\t\t}\n                     }\n                     break;\n                 default:\n\n\n--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-01 06:06:11.755478662 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_119/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-01 06:21:10.916660853 -0500\n@@ -305,7 +305,8 @@\n         if (function == null) {\n             throw new NullArgumentException(LocalizedFormats.FUNCTION);\n         }\n-        final double fLo = function.value(lower);\n+        verifyInterval(lower, upper);\n+\t\tfinal double fLo = function.value(lower);\n         final double fHi = function.value(upper);\n         return (fLo >= 0 && fHi <= 0) || (fLo <= 0 && fHi >= 0);\n     }\n@@ -372,6 +373,7 @@\n             throw new NullArgumentException(LocalizedFormats.FUNCTION);\n         }\n         verifyInterval(lower, upper);\n+\t\tverifyInterval(lower, upper);\n         if (!isBracketing(function, lower, upper)) {\n             throw new NoBracketingException(lower, upper,\n                                             function.value(lower),\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java", 
          "line": 308, 
          "faulty": "final double fLo=function.value(lower);", 
          "type": "InsertBefore", 
          "seed": "verifyInterval(lower,upper);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "if (!inverted) {\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java", 
          "line": 374, 
          "faulty": "verifyInterval(lower,upper);", 
          "type": "InsertBefore", 
          "seed": "verifyInterval(lower,upper);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "x1=x;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:06:15.435478746 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_460/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:24:05.484265729 -0500\n@@ -158,7 +158,35 @@\n         while (true) {\n             // Calculate the next approximation.\n             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n-            final double fx = computeObjectiveValue(x);\n+            if (FastMath.abs(f1) <= ftol) {\n+\t\t\t\tswitch (allowed) {\n+\t\t\t\tcase ANY_SIDE:\n+\t\t\t\t\treturn x1;\n+\t\t\t\tcase LEFT_SIDE:\n+\t\t\t\t\tif (inverted) {\n+\t\t\t\t\t\treturn x1;\n+\t\t\t\t\t}\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase RIGHT_SIDE:\n+\t\t\t\t\tif (!inverted) {\n+\t\t\t\t\t\treturn x1;\n+\t\t\t\t\t}\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase BELOW_SIDE:\n+\t\t\t\t\tif (f1 <= 0) {\n+\t\t\t\t\t\treturn x1;\n+\t\t\t\t\t}\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase ABOVE_SIDE:\n+\t\t\t\t\tif (f1 >= 0) {\n+\t\t\t\t\t\treturn x1;\n+\t\t\t\t\t}\n+\t\t\t\t\tbreak;\n+\t\t\t\tdefault:\n+\t\t\t\t\tthrow new MathInternalError();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tfinal double fx = computeObjectiveValue(x);\n \n             // If the new approximation is the exact root, return it. Since\n             // this is not an under-approximation or an over-approximation,\n@@ -183,11 +211,23 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    if (FastMath.abs(x1 - x0) < FastMath.max(\n+\t\t\t\t\t\t\trtol * FastMath.abs(x1), atol)) {\n+\t\t\t\t\t\tswitch (allowed) {\n+\t\t\t\t\t\tcase ANY_SIDE:\n+\t\t\t\t\t\t\treturn x1;\n+\t\t\t\t\t\tcase LEFT_SIDE:\n+\t\t\t\t\t\t\treturn inverted ? x1 : x0;\n+\t\t\t\t\t\tcase RIGHT_SIDE:\n+\t\t\t\t\t\t\treturn inverted ? x0 : x1;\n+\t\t\t\t\t\tcase BELOW_SIDE:\n+\t\t\t\t\t\t\treturn (f1 <= 0) ? x1 : x0;\n+\t\t\t\t\t\tcase ABOVE_SIDE:\n+\t\t\t\t\t\t\treturn (f1 >= 0) ? x1 : x0;\n+\t\t\t\t\t\tdefault:\n+\t\t\t\t\t\t\tthrow new MathInternalError();\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n                     break;\n                 default:\n                     // Should never happen.\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 161, 
          "faulty": "final double fx=computeObjectiveValue(x);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(f1) <= ftol) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  if (inverted) {\n    return x1;\n  }\nbreak;\ncase RIGHT_SIDE:\nif (!inverted) {\nreturn x1;\n}\nbreak;\ncase BELOW_SIDE:\nif (f1 <= 0) {\nreturn x1;\n}\nbreak;\ncase ABOVE_SIDE:\nif (f1 >= 0) {\nreturn x1;\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Replace", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:06:15.435478746 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_1022/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:28:26.715636088 -0500\n@@ -185,7 +185,7 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n+                        this.allowed = AllowedSolution.ANY_SIDE;\n                         f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:06:15.435478746 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_718/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:26:14.343958864 -0500\n@@ -169,7 +169,10 @@\n \n             // Update the bounds with the new approximation.\n             if (f1 * fx < 0) {\n-                // The value of x1 has switched to the other bound, thus inverting\n+                if (fx == 0.0) {\n+\t\t\t\t\treturn x;\n+\t\t\t\t}\n+\t\t\t\t// The value of x1 has switched to the other bound, thus inverting\n                 // the interval.\n                 x0 = x1;\n                 f0 = f1;\n@@ -185,7 +188,7 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n+                        x1 = x;\n                         f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 174, 
          "faulty": "x0=x1;", 
          "type": "InsertBefore", 
          "seed": "if (fx == 0.0) {\n  return x;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "x1=x;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:06:15.435478746 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_1205/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:29:54.855412223 -0500\n@@ -183,11 +183,23 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    if (FastMath.abs(x1 - x0) < FastMath.max(\n+\t\t\t\t\t\t\trtol * FastMath.abs(x1), atol)) {\n+\t\t\t\t\t\tswitch (allowed) {\n+\t\t\t\t\t\tcase ANY_SIDE:\n+\t\t\t\t\t\t\treturn x1;\n+\t\t\t\t\t\tcase LEFT_SIDE:\n+\t\t\t\t\t\t\treturn inverted ? x1 : x0;\n+\t\t\t\t\t\tcase RIGHT_SIDE:\n+\t\t\t\t\t\t\treturn inverted ? x0 : x1;\n+\t\t\t\t\t\tcase BELOW_SIDE:\n+\t\t\t\t\t\t\treturn (f1 <= 0) ? x1 : x0;\n+\t\t\t\t\t\tcase ABOVE_SIDE:\n+\t\t\t\t\t\t\treturn (f1 >= 0) ? x1 : x0;\n+\t\t\t\t\t\tdefault:\n+\t\t\t\t\t\t\tthrow new MathInternalError();\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n                     break;\n                 default:\n                     // Should never happen.\n\n\n--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-01 06:06:11.755478662 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_1205/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-01 06:29:54.855412223 -0500\n@@ -306,7 +306,10 @@\n             throw new NullArgumentException(LocalizedFormats.FUNCTION);\n         }\n         final double fLo = function.value(lower);\n-        final double fHi = function.value(upper);\n+        if (function == null) {\n+\t\t\tthrow new NullArgumentException(LocalizedFormats.FUNCTION);\n+\t\t}\n+\t\tfinal double fHi = function.value(upper);\n         return (fLo >= 0 && fHi <= 0) || (fLo <= 0 && fHi >= 0);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java", 
          "line": 309, 
          "faulty": "final double fHi=function.value(upper);", 
          "type": "InsertBefore", 
          "seed": "if (function == null) {\n  throw new NullArgumentException(LocalizedFormats.FUNCTION);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Replace", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:06:15.435478746 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_1133/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:29:20.131503270 -0500\n@@ -185,7 +185,7 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n+                        x1 = x;\n                         f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n@@ -236,7 +236,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    return x;\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "return x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "x1=x;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:06:15.435478746 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_821/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:26:57.359854634 -0500\n@@ -185,8 +185,6 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n                 default:\n@@ -236,7 +234,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    return (f1 <= 0) ? x1 : x0;\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "if (!inverted) {\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "return (f1 <= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "switch (allowed) {\ncase ANY_SIDE:\n  return x1;\ncase LEFT_SIDE:\nreturn inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:06:15.435478746 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_499/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:24:26.892215424 -0500\n@@ -147,7 +147,10 @@\n \n         // Get accuracies.\n         final double ftol = getFunctionValueAccuracy();\n-        final double atol = getAbsoluteAccuracy();\n+        if (f1 == 0.0) {\n+\t\t\treturn x1;\n+\t\t}\n+\t\tfinal double atol = getAbsoluteAccuracy();\n         final double rtol = getRelativeAccuracy();\n \n         // Keep track of inverted intervals, meaning that the left bound is\n@@ -185,7 +188,6 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n                         f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 150, 
          "faulty": "final double atol=getAbsoluteAccuracy();", 
          "type": "InsertBefore", 
          "seed": "if (f1 == 0.0) {\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "x1=x;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:06:15.435478746 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_874/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:27:24.767787864 -0500\n@@ -185,7 +185,7 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n+                        f0 *= f1 / (f1 + fx);\n                         f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n@@ -236,7 +236,12 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    {\n+\t\t\t\t\t\tif (FastMath.abs(f1) <= ftol) {\n+\t\t\t\t\t\t\treturn x1;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\treturn x1;\n+\t\t\t\t\t}\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-01 06:06:11.755478662 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_874/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-01 06:27:24.767787864 -0500\n@@ -368,7 +368,12 @@\n     public static void verifyBracketing(UnivariateRealFunction function,\n                                         final double lower,\n                                         final double upper) {\n-        if (function == null) {\n+        if (lower >= upper) {\n+\t\t\t\t\t\t\t\t\t\t\t\tthrow new NumberIsTooLargeException(\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\tLocalizedFormats.ENDPOINTS_NOT_AN_INTERVAL,\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\tlower, upper, false);\n+\t\t\t\t\t\t\t\t\t\t\t}\n+\t\tif (function == null) {\n             throw new NullArgumentException(LocalizedFormats.FUNCTION);\n         }\n         verifyInterval(lower, upper);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(f1) <= ftol) {\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java", 
          "line": 371, 
          "faulty": "if (function == null) {\n  throw new NullArgumentException(LocalizedFormats.FUNCTION);\n}", 
          "type": "InsertBefore", 
          "seed": "if (lower >= upper) {\n  throw new NumberIsTooLargeException(LocalizedFormats.ENDPOINTS_NOT_AN_INTERVAL,lower,upper,false);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "f0*=f1 / (f1 + fx);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:06:15.435478746 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_1337/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:30:58.123247274 -0500\n@@ -183,11 +183,23 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    if (FastMath.abs(x1 - x0) < FastMath.max(\n+\t\t\t\t\t\t\trtol * FastMath.abs(x1), atol)) {\n+\t\t\t\t\t\tswitch (allowed) {\n+\t\t\t\t\t\tcase ANY_SIDE:\n+\t\t\t\t\t\t\treturn x1;\n+\t\t\t\t\t\tcase LEFT_SIDE:\n+\t\t\t\t\t\t\treturn inverted ? x1 : x0;\n+\t\t\t\t\t\tcase RIGHT_SIDE:\n+\t\t\t\t\t\t\treturn inverted ? x0 : x1;\n+\t\t\t\t\t\tcase BELOW_SIDE:\n+\t\t\t\t\t\t\treturn (f1 <= 0) ? x1 : x0;\n+\t\t\t\t\t\tcase ABOVE_SIDE:\n+\t\t\t\t\t\t\treturn (f1 >= 0) ? x1 : x0;\n+\t\t\t\t\t\tdefault:\n+\t\t\t\t\t\t\tthrow new MathInternalError();\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n                     break;\n                 default:\n                     // Should never happen.\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "x0=x1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Replace", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:06:15.435478746 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_344/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:23:05.476404904 -0500\n@@ -185,7 +185,6 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n                         f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n\n\n--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-01 06:06:11.755478662 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_344/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-01 06:23:05.480404896 -0500\n@@ -368,7 +368,8 @@\n     public static void verifyBracketing(UnivariateRealFunction function,\n                                         final double lower,\n                                         final double upper) {\n-        if (function == null) {\n+        verifyInterval(lower, upper);\n+\t\tif (function == null) {\n             throw new NullArgumentException(LocalizedFormats.FUNCTION);\n         }\n         verifyInterval(lower, upper);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java", 
          "line": 371, 
          "faulty": "if (function == null) {\n  throw new NullArgumentException(LocalizedFormats.FUNCTION);\n}", 
          "type": "InsertBefore", 
          "seed": "verifyInterval(lower,upper);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "x1=x;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:06:15.435478746 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_502/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:24:27.788213312 -0500\n@@ -172,7 +172,10 @@\n                 // The value of x1 has switched to the other bound, thus inverting\n                 // the interval.\n                 x0 = x1;\n-                f0 = f1;\n+                if (fx == 0.0) {\n+\t\t\t\t\treturn x;\n+\t\t\t\t}\n+\t\t\t\tf0 = f1;\n                 inverted = !inverted;\n             } else {\n                 switch (method) {\n@@ -185,7 +188,6 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n                         f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 175, 
          "faulty": "f0=f1;", 
          "type": "InsertBefore", 
          "seed": "if (fx == 0.0) {\n  return x;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "switch (allowed) {\ncase ANY_SIDE:\n  return x1;\ncase LEFT_SIDE:\nreturn inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:06:15.435478746 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_1508/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:32:23.383026513 -0500\n@@ -145,7 +145,10 @@\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n-        // Get accuracies.\n+        if (f0 == 0.0) {\n+\t\t\treturn x0;\n+\t\t}\n+\t\t// Get accuracies.\n         final double ftol = getFunctionValueAccuracy();\n         final double atol = getAbsoluteAccuracy();\n         final double rtol = getRelativeAccuracy();\n@@ -185,7 +188,7 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n+                        x1 = x;\n                         f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 149, 
          "faulty": "final double ftol=getFunctionValueAccuracy();", 
          "type": "InsertBefore", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "x1=x;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:06:15.435478746 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_1162/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:29:31.723472830 -0500\n@@ -183,11 +183,23 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    if (FastMath.abs(x1 - x0) < FastMath.max(\n+\t\t\t\t\t\t\trtol * FastMath.abs(x1), atol)) {\n+\t\t\t\t\t\tswitch (allowed) {\n+\t\t\t\t\t\tcase ANY_SIDE:\n+\t\t\t\t\t\t\treturn x1;\n+\t\t\t\t\t\tcase LEFT_SIDE:\n+\t\t\t\t\t\t\treturn inverted ? x1 : x0;\n+\t\t\t\t\t\tcase RIGHT_SIDE:\n+\t\t\t\t\t\t\treturn inverted ? x0 : x1;\n+\t\t\t\t\t\tcase BELOW_SIDE:\n+\t\t\t\t\t\t\treturn (f1 <= 0) ? x1 : x0;\n+\t\t\t\t\t\tcase ABOVE_SIDE:\n+\t\t\t\t\t\t\treturn (f1 >= 0) ? x1 : x0;\n+\t\t\t\t\t\tdefault:\n+\t\t\t\t\t\t\tthrow new MathInternalError();\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n                     break;\n                 default:\n                     // Should never happen.\n\n\n--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-01 06:06:11.755478662 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_1162/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-01 06:29:31.723472830 -0500\n@@ -368,7 +368,12 @@\n     public static void verifyBracketing(UnivariateRealFunction function,\n                                         final double lower,\n                                         final double upper) {\n-        if (function == null) {\n+        if (lower >= upper) {\n+\t\t\t\t\t\t\t\t\t\t\t\tthrow new NumberIsTooLargeException(\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\tLocalizedFormats.ENDPOINTS_NOT_AN_INTERVAL,\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\tlower, upper, false);\n+\t\t\t\t\t\t\t\t\t\t\t}\n+\t\tif (function == null) {\n             throw new NullArgumentException(LocalizedFormats.FUNCTION);\n         }\n         verifyInterval(lower, upper);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java", 
          "line": 371, 
          "faulty": "if (function == null) {\n  throw new NullArgumentException(LocalizedFormats.FUNCTION);\n}", 
          "type": "InsertBefore", 
          "seed": "if (lower >= upper) {\n  throw new NumberIsTooLargeException(LocalizedFormats.ENDPOINTS_NOT_AN_INTERVAL,lower,upper,false);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Replace", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:06:15.435478746 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_884/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:27:27.883780257 -0500\n@@ -183,11 +183,23 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    if (FastMath.abs(x1 - x0) < FastMath.max(\n+\t\t\t\t\t\t\trtol * FastMath.abs(x1), atol)) {\n+\t\t\t\t\t\tswitch (allowed) {\n+\t\t\t\t\t\tcase ANY_SIDE:\n+\t\t\t\t\t\t\treturn x1;\n+\t\t\t\t\t\tcase LEFT_SIDE:\n+\t\t\t\t\t\t\treturn inverted ? x1 : x0;\n+\t\t\t\t\t\tcase RIGHT_SIDE:\n+\t\t\t\t\t\t\treturn inverted ? x0 : x1;\n+\t\t\t\t\t\tcase BELOW_SIDE:\n+\t\t\t\t\t\t\treturn (f1 <= 0) ? x1 : x0;\n+\t\t\t\t\t\tcase ABOVE_SIDE:\n+\t\t\t\t\t\t\treturn (f1 >= 0) ? x1 : x0;\n+\t\t\t\t\t\tdefault:\n+\t\t\t\t\t\t\tthrow new MathInternalError();\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n                     break;\n                 default:\n                     // Should never happen.\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "x0=x1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Replace", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:06:15.435478746 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_1601/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:33:14.074895897 -0500\n@@ -185,7 +185,6 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n                         f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n\n\n--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-01 06:06:11.755478662 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_1601/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-01 06:33:14.074895897 -0500\n@@ -307,7 +307,8 @@\n         }\n         final double fLo = function.value(lower);\n         final double fHi = function.value(upper);\n-        return (fLo >= 0 && fHi <= 0) || (fLo <= 0 && fHi >= 0);\n+        UnivariateRealSolverUtils.verifyInterval(lower, upper);\n+\t\treturn (fLo >= 0 && fHi <= 0) || (fLo <= 0 && fHi >= 0);\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java", 
          "line": 310, 
          "faulty": "return (fLo >= 0 && fHi <= 0) || (fLo <= 0 && fHi >= 0);", 
          "type": "InsertBefore", 
          "seed": "UnivariateRealSolverUtils.verifyInterval(lower,upper);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "x1=x;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:06:15.435478746 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_604/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:25:23.512080996 -0500\n@@ -185,7 +185,6 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n                         f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "Replace", 
          "seed": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "x1=x;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:06:15.435478746 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_528/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:24:38.920187028 -0500\n@@ -185,8 +185,6 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n                 default:\n@@ -194,7 +192,10 @@\n                     throw new MathInternalError();\n                 }\n             }\n-            // Update from [x0, x1] to [x0, x].\n+            if (f0 == 0.0) {\n+\t\t\t\treturn x0;\n+\t\t\t}\n+\t\t\t// Update from [x0, x1] to [x0, x].\n             x1 = x;\n             f1 = fx;\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "f0*=0.5;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 198, 
          "faulty": "x1=x;", 
          "type": "InsertBefore", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "switch (allowed) {\ncase ANY_SIDE:\n  return x1;\ncase LEFT_SIDE:\nreturn inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:06:15.435478746 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_496/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:24:26.000217526 -0500\n@@ -185,8 +185,11 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n+                        x1 = x;\n+                        if (!inverted) {\n+\t\t\t\t\t\t\treturn x1;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tf0 = computeObjectiveValue(x0);\n                     }\n                     break;\n                 default:\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (!inverted) {\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "x1=x;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:06:15.435478746 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_1754/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:34:33.602691705 -0500\n@@ -185,7 +185,7 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n+                        x1 = x;\n                         f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n@@ -198,7 +198,24 @@\n             x1 = x;\n             f1 = fx;\n \n-            // If the function value of the last approximation is too small,\n+            if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),\n+\t\t\t\t\tatol)) {\n+\t\t\t\tswitch (allowed) {\n+\t\t\t\tcase ANY_SIDE:\n+\t\t\t\t\treturn x1;\n+\t\t\t\tcase LEFT_SIDE:\n+\t\t\t\t\treturn inverted ? x1 : x0;\n+\t\t\t\tcase RIGHT_SIDE:\n+\t\t\t\t\treturn inverted ? x0 : x1;\n+\t\t\t\tcase BELOW_SIDE:\n+\t\t\t\t\treturn (f1 <= 0) ? x1 : x0;\n+\t\t\t\tcase ABOVE_SIDE:\n+\t\t\t\t\treturn (f1 >= 0) ? x1 : x0;\n+\t\t\t\tdefault:\n+\t\t\t\t\tthrow new MathInternalError();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\t// If the function value of the last approximation is too small,\n             // given the function value accuracy, then we can't get closer to\n             // the root than we already are.\n             if (FastMath.abs(f1) <= ftol) {\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 204, 
          "faulty": "if (FastMath.abs(f1) <= ftol) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  if (inverted) {\n    return x1;\n  }\nbreak;\ncase RIGHT_SIDE:\nif (!inverted) {\nreturn x1;\n}\nbreak;\ncase BELOW_SIDE:\nif (f1 <= 0) {\nreturn x1;\n}\nbreak;\ncase ABOVE_SIDE:\nif (f1 >= 0) {\nreturn x1;\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "x1=x;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:06:15.435478746 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_670/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:25:53.800008371 -0500\n@@ -185,7 +185,6 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n                         f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n@@ -234,7 +233,8 @@\n             // are satisfied with the current approximation.\n             if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),\n                                                      atol)) {\n-                switch (allowed) {\n+                f0 = f1;\n+\t\t\t\tswitch (allowed) {\n                 case ANY_SIDE:\n                     return x1;\n                 case LEFT_SIDE:\n\n\n--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-01 06:06:11.755478662 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_670/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-01 06:25:53.800008371 -0500\n@@ -372,6 +372,7 @@\n             throw new NullArgumentException(LocalizedFormats.FUNCTION);\n         }\n         verifyInterval(lower, upper);\n+\t\tverifyInterval(lower, upper);\n         if (!isBracketing(function, lower, upper)) {\n             throw new NoBracketingException(lower, upper,\n                                             function.value(lower),\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java", 
          "line": 374, 
          "faulty": "verifyInterval(lower,upper);", 
          "type": "InsertBefore", 
          "seed": "verifyInterval(lower,upper);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 237, 
          "faulty": "switch (allowed) {\ncase ANY_SIDE:\n  return x1;\ncase LEFT_SIDE:\nreturn inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}", 
          "type": "InsertBefore", 
          "seed": "f0=f1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "x1=x;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:06:15.435478746 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_140/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:21:31.588615817 -0500\n@@ -183,11 +183,23 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    if (FastMath.abs(x1 - x0) < FastMath.max(\n+\t\t\t\t\t\t\trtol * FastMath.abs(x1), atol)) {\n+\t\t\t\t\t\tswitch (allowed) {\n+\t\t\t\t\t\tcase ANY_SIDE:\n+\t\t\t\t\t\t\treturn x1;\n+\t\t\t\t\t\tcase LEFT_SIDE:\n+\t\t\t\t\t\t\treturn inverted ? x1 : x0;\n+\t\t\t\t\t\tcase RIGHT_SIDE:\n+\t\t\t\t\t\t\treturn inverted ? x0 : x1;\n+\t\t\t\t\t\tcase BELOW_SIDE:\n+\t\t\t\t\t\t\treturn (f1 <= 0) ? x1 : x0;\n+\t\t\t\t\t\tcase ABOVE_SIDE:\n+\t\t\t\t\t\t\treturn (f1 >= 0) ? x1 : x0;\n+\t\t\t\t\t\tdefault:\n+\t\t\t\t\t\t\tthrow new MathInternalError();\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n                     break;\n                 default:\n                     // Should never happen.\n\n\n--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-01 06:06:11.755478662 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_140/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-01 06:21:31.588615817 -0500\n@@ -372,6 +372,7 @@\n             throw new NullArgumentException(LocalizedFormats.FUNCTION);\n         }\n         verifyInterval(lower, upper);\n+\t\tverifyInterval(lower, upper);\n         if (!isBracketing(function, lower, upper)) {\n             throw new NoBracketingException(lower, upper,\n                                             function.value(lower),\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java", 
          "line": 374, 
          "faulty": "verifyInterval(lower,upper);", 
          "type": "InsertBefore", 
          "seed": "verifyInterval(lower,upper);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Replace", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:06:15.435478746 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_1388/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:31:20.467189269 -0500\n@@ -185,7 +185,6 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n                         f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n\n\n--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-01 06:06:11.755478662 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_1388/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-01 06:31:20.467189269 -0500\n@@ -306,7 +306,8 @@\n             throw new NullArgumentException(LocalizedFormats.FUNCTION);\n         }\n         final double fLo = function.value(lower);\n-        final double fHi = function.value(upper);\n+        verifyInterval(lower, upper);\n+\t\tfinal double fHi = function.value(upper);\n         return (fLo >= 0 && fHi <= 0) || (fLo <= 0 && fHi >= 0);\n     }\n \n@@ -372,6 +373,7 @@\n             throw new NullArgumentException(LocalizedFormats.FUNCTION);\n         }\n         verifyInterval(lower, upper);\n+\t\tverifyInterval(lower, upper);\n         if (!isBracketing(function, lower, upper)) {\n             throw new NoBracketingException(lower, upper,\n                                             function.value(lower),\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java", 
          "line": 309, 
          "faulty": "final double fHi=function.value(upper);", 
          "type": "InsertBefore", 
          "seed": "verifyInterval(lower,upper);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java", 
          "line": 374, 
          "faulty": "verifyInterval(lower,upper);", 
          "type": "InsertBefore", 
          "seed": "verifyInterval(lower,upper);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "x1=x;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:06:15.435478746 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_749/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:26:27.007928255 -0500\n@@ -185,7 +185,10 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n+                        if (FastMath.abs(x1 - x0) < FastMath.max(rtol\n+\t\t\t\t\t\t\t\t* FastMath.abs(x1), atol)) {\n+\t\t\t\t\t\t\treturn x1;\n+\t\t\t\t\t\t}\n                         f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n\n\n--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-01 06:06:11.755478662 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_749/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-01 06:26:27.007928255 -0500\n@@ -302,9 +302,6 @@\n     public static boolean isBracketing(UnivariateRealFunction function,\n                                        final double lower,\n                                        final double upper) {\n-        if (function == null) {\n-            throw new NullArgumentException(LocalizedFormats.FUNCTION);\n-        }\n         final double fLo = function.value(lower);\n         final double fHi = function.value(upper);\n         return (fLo >= 0 && fHi <= 0) || (fLo <= 0 && fHi >= 0);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java", 
          "line": 305, 
          "faulty": "if (function == null) {\n  throw new NullArgumentException(LocalizedFormats.FUNCTION);\n}", 
          "type": "Delete", 
          "seed": "if (function == null) {\n  throw new NullArgumentException(LocalizedFormats.FUNCTION);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\n  return x1;\n}"
        }
      ]
    }
  ]
}