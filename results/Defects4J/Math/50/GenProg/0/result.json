{
  "repair_end": "2018-12-02 18:30:05.444171", 
  "repair_begin": "2018-12-02 17:55:50.673896", 
  "patches": [
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 198, 
          "faulty": "x1=x;", 
          "type": "InsertBefore", 
          "seed": "double x2=0.5 * (x0 + x1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_215/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:16:34.649729465 -0500\n@@ -185,7 +185,29 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n+                        if (f1 * fx < 0) {\n+\t\t\t\t\t\t\tx0 = x1;\n+\t\t\t\t\t\t\tf0 = f1;\n+\t\t\t\t\t\t\tinverted = !inverted;\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tswitch (method) {\n+\t\t\t\t\t\t\tcase ILLINOIS:\n+\t\t\t\t\t\t\t\tf0 *= 0.5;\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\tcase PEGASUS:\n+\t\t\t\t\t\t\t\tf0 *= f1 / (f1 + fx);\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\tcase REGULA_FALSI:\n+\t\t\t\t\t\t\t\tif (x == x1) {\n+\t\t\t\t\t\t\t\t\tx0 = 0.5 * (x0 + x1 - FastMath.max(rtol\n+\t\t\t\t\t\t\t\t\t\t\t* FastMath.abs(x1), atol));\n+\t\t\t\t\t\t\t\t\tf0 = computeObjectiveValue(x0);\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\tdefault:\n+\t\t\t\t\t\t\t\tthrow new MathInternalError();\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n                         f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n@@ -194,7 +216,8 @@\n                     throw new MathInternalError();\n                 }\n             }\n-            // Update from [x0, x1] to [x0, x].\n+            double x2 = 0.5 * (x0 + x1);\n+\t\t\t// Update from [x0, x1] to [x0, x].\n             x1 = x;\n             f1 = fx;\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "inverted=!inverted;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "Complex oldz=new Complex(Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_867/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:22:24.119929505 -0500\n@@ -138,10 +138,6 @@\n         if (f0 == 0.0) {\n             return x0;\n         }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -183,11 +179,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 151, 
          "faulty": "final double rtol=getRelativeAccuracy();", 
          "type": "InsertBefore", 
          "seed": "if (f1 == 0.0) {\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java", 
          "line": 310, 
          "faulty": "return (fLo >= 0 && fHi <= 0) || (fLo <= 0 && fHi >= 0);", 
          "type": "InsertBefore", 
          "seed": "if (function == null) {\n  throw new NullArgumentException(LocalizedFormats.FUNCTION);\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1498/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:27:23.396537849 -0500\n@@ -132,23 +132,16 @@\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n         // Get accuracies.\n         final double ftol = getFunctionValueAccuracy();\n         final double atol = getAbsoluteAccuracy();\n-        final double rtol = getRelativeAccuracy();\n+        if (f1 == 0.0) {\n+\t\t\treturn x1;\n+\t\t}\n+\t\tfinal double rtol = getRelativeAccuracy();\n \n         // Keep track of inverted intervals, meaning that the left bound is\n         // larger than the right bound.\n@@ -183,11 +176,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +225,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-02 11:55:31.845022991 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1498/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-02 12:27:23.396537849 -0500\n@@ -307,7 +307,10 @@\n         }\n         final double fLo = function.value(lower);\n         final double fHi = function.value(upper);\n-        return (fLo >= 0 && fHi <= 0) || (fLo <= 0 && fHi >= 0);\n+        if (function == null) {\n+\t\t\tthrow new NullArgumentException(LocalizedFormats.FUNCTION);\n+\t\t}\n+\t\treturn (fLo >= 0 && fHi <= 0) || (fLo <= 0 && fHi >= 0);\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 132, 
          "faulty": "double f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "final double functionValueAccuracy=getFunctionValueAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 150, 
          "faulty": "final double atol=getAbsoluteAccuracy();", 
          "type": "InsertBefore", 
          "seed": "final double absoluteAccuracy=getAbsoluteAccuracy();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_278/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:17:05.294685617 -0500\n@@ -121,7 +121,8 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        double x2 = max;\n+\t\treturn solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n     /** {@inheritDoc} */\n@@ -129,7 +130,8 @@\n         // Get initial solution\n         double x0 = getMin();\n         double x1 = getMax();\n-        double f0 = computeObjectiveValue(x0);\n+        int agingA = 0;\n+\t\tdouble f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n         // If one of the bounds is the exact root, return it. Since these are\n@@ -147,7 +149,8 @@\n \n         // Get accuracies.\n         final double ftol = getFunctionValueAccuracy();\n-        final double atol = getAbsoluteAccuracy();\n+        final double absoluteAccuracy = getAbsoluteAccuracy();\n+\t\tfinal double atol = getAbsoluteAccuracy();\n         final double rtol = getRelativeAccuracy();\n \n         // Keep track of inverted intervals, meaning that the left bound is\n@@ -185,7 +188,7 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n+                        final double functionValueAccuracy = getFunctionValueAccuracy();\n                         f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 161, 
          "faulty": "final double fx=computeObjectiveValue(x);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 151, 
          "faulty": "final double rtol=getRelativeAccuracy();", 
          "type": "InsertBefore", 
          "seed": "if (f1 == 0.0) {\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "final double absoluteAccuracy=getAbsoluteAccuracy();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1409/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:26:45.455430812 -0500\n@@ -121,7 +121,8 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        double x2 = max;\n+\t\treturn solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n     /** {@inheritDoc} */\n@@ -132,12 +133,6 @@\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n         if (f1 == 0.0) {\n             return x1;\n         }\n@@ -148,7 +143,10 @@\n         // Get accuracies.\n         final double ftol = getFunctionValueAccuracy();\n         final double atol = getAbsoluteAccuracy();\n-        final double rtol = getRelativeAccuracy();\n+        if (f1 == 0.0) {\n+\t\t\treturn x1;\n+\t\t}\n+\t\tfinal double rtol = getRelativeAccuracy();\n \n         // Keep track of inverted intervals, meaning that the left bound is\n         // larger than the right bound.\n@@ -158,7 +156,8 @@\n         while (true) {\n             // Calculate the next approximation.\n             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n-            final double fx = computeObjectiveValue(x);\n+            int start = 0;\n+\t\t\tfinal double fx = computeObjectiveValue(x);\n \n             // If the new approximation is the exact root, return it. Since\n             // this is not an under-approximation or an over-approximation,\n@@ -183,11 +182,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +231,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 150, 
          "faulty": "final double atol=getAbsoluteAccuracy();", 
          "type": "InsertBefore", 
          "seed": "final double initial=getStartValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 161, 
          "faulty": "final double fx=computeObjectiveValue(x);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "final double absoluteAccuracy=getAbsoluteAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex d2v=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1482/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:27:17.152356519 -0500\n@@ -147,7 +147,8 @@\n \n         // Get accuracies.\n         final double ftol = getFunctionValueAccuracy();\n-        final double atol = getAbsoluteAccuracy();\n+        final double initial = getStartValue();\n+\t\tfinal double atol = getAbsoluteAccuracy();\n         final double rtol = getRelativeAccuracy();\n \n         // Keep track of inverted intervals, meaning that the left bound is\n@@ -158,7 +159,8 @@\n         while (true) {\n             // Calculate the next approximation.\n             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n-            final double fx = computeObjectiveValue(x);\n+            int start = 0;\n+\t\t\tfinal double fx = computeObjectiveValue(x);\n \n             // If the new approximation is the exact root, return it. Since\n             // this is not an under-approximation or an over-approximation,\n@@ -183,11 +185,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +234,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 132, 
          "faulty": "double f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_101/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:15:28.923652574 -0500\n@@ -129,7 +129,8 @@\n         // Get initial solution\n         double x0 = getMin();\n         double x1 = getMax();\n-        double f0 = computeObjectiveValue(x0);\n+        int agingA = 0;\n+\t\tdouble f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n         // If one of the bounds is the exact root, return it. Since these are\n@@ -185,7 +186,7 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n+                        final double eps = getRelativeAccuracy();\n                         f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 161, 
          "faulty": "final double fx=computeObjectiveValue(x);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "double x2=0.5 * (x0 + x1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double x0=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1791/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:29:41.068466989 -0500\n@@ -132,16 +132,6 @@\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -158,7 +148,8 @@\n         while (true) {\n             // Calculate the next approximation.\n             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n-            final double fx = computeObjectiveValue(x);\n+            int start = 0;\n+\t\t\tfinal double fx = computeObjectiveValue(x);\n \n             // If the new approximation is the exact root, return it. Since\n             // this is not an under-approximation or an over-approximation,\n@@ -183,11 +174,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    int agingA = 0;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +223,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double initial=getStartValue();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_855/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:22:19.783809274 -0500\n@@ -121,7 +121,8 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        double x2 = max;\n+\t\treturn solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n     /** {@inheritDoc} */\n@@ -183,11 +184,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingB=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_708/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:21:02.109637506 -0500\n@@ -185,8 +185,9 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n+                        if (f0 == 0.0) {\n+\t\t\t\t\t\t\treturn x0;\n+\t\t\t\t\t\t}\n                     }\n                     break;\n                 default:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "final double absoluteAccuracy=getAbsoluteAccuracy();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1630/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:28:27.206373897 -0500\n@@ -183,11 +183,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingB=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 155, 
          "faulty": "boolean inverted=false;", 
          "type": "InsertBefore", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 132, 
          "faulty": "double f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "final double startValue=getStartValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 130, 
          "faulty": "double x0=getMin();", 
          "type": "InsertBefore", 
          "seed": "final double initial=getStartValue();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_665/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:20:23.708549008 -0500\n@@ -126,10 +126,12 @@\n \n     /** {@inheritDoc} */\n     protected final double doSolve() {\n-        // Get initial solution\n+        final double initial = getStartValue();\n+\t\t// Get initial solution\n         double x0 = getMin();\n         double x1 = getMax();\n-        double f0 = computeObjectiveValue(x0);\n+        final double startValue = getStartValue();\n+\t\tdouble f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n         // If one of the bounds is the exact root, return it. Since these are\n@@ -150,7 +152,8 @@\n         final double atol = getAbsoluteAccuracy();\n         final double rtol = getRelativeAccuracy();\n \n-        // Keep track of inverted intervals, meaning that the left bound is\n+        int numIterations = 0;\n+\t\t// Keep track of inverted intervals, meaning that the left bound is\n         // larger than the right bound.\n         boolean inverted = false;\n \n@@ -183,11 +186,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Delete", 
          "seed": "double f1=computeObjectiveValue(x1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex G=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java", 
          "line": 375, 
          "faulty": "if (!isBracketing(function,lower,upper)) {\n  throw new NoBracketingException(lower,upper,function.value(lower),function.value(upper));\n}", 
          "type": "InsertBefore", 
          "seed": "int numIterations=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1603/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:28:14.806019341 -0500\n@@ -183,11 +183,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    int agingA = 0;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +232,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    ;\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-02 11:55:31.845022991 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1603/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-02 12:28:14.806019341 -0500\n@@ -372,7 +372,8 @@\n             throw new NullArgumentException(LocalizedFormats.FUNCTION);\n         }\n         verifyInterval(lower, upper);\n-        if (!isBracketing(function, lower, upper)) {\n+        int numIterations = 0;\n+\t\tif (!isBracketing(function, lower, upper)) {\n             throw new NoBracketingException(lower, upper,\n                                             function.value(lower),\n                                             function.value(upper));\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 161, 
          "faulty": "final double fx=computeObjectiveValue(x);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 151, 
          "faulty": "final double rtol=getRelativeAccuracy();", 
          "type": "InsertBefore", 
          "seed": "if (f1 == 0.0) {\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "double x0=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java", 
          "line": 371, 
          "faulty": "if (function == null) {\n  throw new NullArgumentException(LocalizedFormats.FUNCTION);\n}", 
          "type": "Delete", 
          "seed": "return doSolve();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1507/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:27:27.248649557 -0500\n@@ -121,7 +121,8 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        double x2 = max;\n+\t\treturn solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n     /** {@inheritDoc} */\n@@ -132,23 +133,16 @@\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n         // Get accuracies.\n         final double ftol = getFunctionValueAccuracy();\n         final double atol = getAbsoluteAccuracy();\n-        final double rtol = getRelativeAccuracy();\n+        if (f1 == 0.0) {\n+\t\t\treturn x1;\n+\t\t}\n+\t\tfinal double rtol = getRelativeAccuracy();\n \n         // Keep track of inverted intervals, meaning that the left bound is\n         // larger than the right bound.\n@@ -158,7 +152,8 @@\n         while (true) {\n             // Calculate the next approximation.\n             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n-            final double fx = computeObjectiveValue(x);\n+            int start = 0;\n+\t\t\tfinal double fx = computeObjectiveValue(x);\n \n             // If the new approximation is the exact root, return it. Since\n             // this is not an under-approximation or an over-approximation,\n@@ -183,11 +178,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +227,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-02 11:55:31.845022991 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1507/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-02 12:27:27.252649673 -0500\n@@ -368,9 +368,6 @@\n     public static void verifyBracketing(UnivariateRealFunction function,\n                                         final double lower,\n                                         final double upper) {\n-        if (function == null) {\n-            throw new NullArgumentException(LocalizedFormats.FUNCTION);\n-        }\n         verifyInterval(lower, upper);\n         if (!isBracketing(function, lower, upper)) {\n             throw new NoBracketingException(lower, upper,\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "Complex pv=null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_165/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:15:59.672618877 -0500\n@@ -183,11 +183,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "f0=f1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "f0=f1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1133/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:24:28.011330158 -0500\n@@ -185,8 +185,8 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n+                        f0 = f1;\n+\t\t\t\t\t\tf0 = computeObjectiveValue(x0);\n                     }\n                     break;\n                 default:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 161, 
          "faulty": "final double fx=computeObjectiveValue(x);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 151, 
          "faulty": "final double rtol=getRelativeAccuracy();", 
          "type": "InsertBefore", 
          "seed": "if (f1 == 0.0) {\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "final double absoluteAccuracy=getAbsoluteAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "double x0=getMin();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "double x0=getMin();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1550/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:27:46.393202985 -0500\n@@ -121,7 +121,8 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        double x2 = max;\n+\t\treturn solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n     /** {@inheritDoc} */\n@@ -132,23 +133,16 @@\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n         // Get accuracies.\n         final double ftol = getFunctionValueAccuracy();\n         final double atol = getAbsoluteAccuracy();\n-        final double rtol = getRelativeAccuracy();\n+        if (f1 == 0.0) {\n+\t\t\treturn x1;\n+\t\t}\n+\t\tfinal double rtol = getRelativeAccuracy();\n \n         // Keep track of inverted intervals, meaning that the left bound is\n         // larger than the right bound.\n@@ -158,7 +152,8 @@\n         while (true) {\n             // Calculate the next approximation.\n             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n-            final double fx = computeObjectiveValue(x);\n+            int start = 0;\n+\t\t\tfinal double fx = computeObjectiveValue(x);\n \n             // If the new approximation is the exact root, return it. Since\n             // this is not an under-approximation or an over-approximation,\n@@ -183,11 +178,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +227,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 150, 
          "faulty": "final double atol=getAbsoluteAccuracy();", 
          "type": "InsertBefore", 
          "seed": "final double initial=getStartValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double initial=getStartValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 161, 
          "faulty": "final double fx=computeObjectiveValue(x);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex oldz=new Complex(Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1245/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:25:19.372864849 -0500\n@@ -147,7 +147,8 @@\n \n         // Get accuracies.\n         final double ftol = getFunctionValueAccuracy();\n-        final double atol = getAbsoluteAccuracy();\n+        final double initial = getStartValue();\n+\t\tfinal double atol = getAbsoluteAccuracy();\n         final double rtol = getRelativeAccuracy();\n \n         // Keep track of inverted intervals, meaning that the left bound is\n@@ -158,7 +159,8 @@\n         while (true) {\n             // Calculate the next approximation.\n             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n-            final double fx = computeObjectiveValue(x);\n+            int start = 0;\n+\t\t\tfinal double fx = computeObjectiveValue(x);\n \n             // If the new approximation is the exact root, return it. Since\n             // this is not an under-approximation or an over-approximation,\n@@ -183,11 +185,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 161, 
          "faulty": "final double fx=computeObjectiveValue(x);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "if (FastMath.abs(f1) <= ftol) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  if (inverted) {\n    return x1;\n  }\nbreak;\ncase RIGHT_SIDE:\nif (!inverted) {\nreturn x1;\n}\nbreak;\ncase BELOW_SIDE:\nif (f1 <= 0) {\nreturn x1;\n}\nbreak;\ncase ABOVE_SIDE:\nif (f1 >= 0) {\nreturn x1;\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 133, 
          "faulty": "double f1=computeObjectiveValue(x1);", 
          "type": "InsertBefore", 
          "seed": "double oldx=Double.POSITIVE_INFINITY;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1654/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:28:37.730674041 -0500\n@@ -130,17 +130,8 @@\n         double x0 = getMin();\n         double x1 = getMax();\n         double f0 = computeObjectiveValue(x0);\n-        double f1 = computeObjectiveValue(x1);\n-\n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n+        double oldx = Double.POSITIVE_INFINITY;\n+\t\tdouble f1 = computeObjectiveValue(x1);\n \n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n@@ -158,7 +149,8 @@\n         while (true) {\n             // Calculate the next approximation.\n             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n-            final double fx = computeObjectiveValue(x);\n+            int start = 0;\n+\t\t\tfinal double fx = computeObjectiveValue(x);\n \n             // If the new approximation is the exact root, return it. Since\n             // this is not an under-approximation or an over-approximation,\n@@ -183,11 +175,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    int agingA = 0;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +224,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "final double initial=getStartValue();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1092/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:24:10.090841839 -0500\n@@ -185,7 +185,6 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n                         f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "Complex G2=null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_695/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:20:55.449449500 -0500\n@@ -185,8 +185,6 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n                 default:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "double x2=0.5 * (x0 + x1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double x0=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "InsertBefore", 
          "seed": "final double functionValueAccuracy=getFunctionValueAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Delete", 
          "seed": "double y0=computeObjectiveValue(x0);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1808/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:29:49.612707279 -0500\n@@ -132,16 +132,6 @@\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -183,11 +173,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    int agingA = 0;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +222,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    ;\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingB=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double y1=computeObjectiveValue(x1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "double y1=computeObjectiveValue(x1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 150, 
          "faulty": "final double atol=getAbsoluteAccuracy();", 
          "type": "InsertBefore", 
          "seed": "int agingB=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "inverted=!inverted;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Replace", 
          "seed": "final double t=getAbsoluteAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_386/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:17:53.288150541 -0500\n@@ -138,16 +138,15 @@\n         if (f0 == 0.0) {\n             return x0;\n         }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n+        final double t = getAbsoluteAccuracy();\n \n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n         // Get accuracies.\n         final double ftol = getFunctionValueAccuracy();\n-        final double atol = getAbsoluteAccuracy();\n+        int agingB = 0;\n+\t\tfinal double atol = getAbsoluteAccuracy();\n         final double rtol = getRelativeAccuracy();\n \n         // Keep track of inverted intervals, meaning that the left bound is\n@@ -183,11 +182,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 150, 
          "faulty": "final double atol=getAbsoluteAccuracy();", 
          "type": "InsertBefore", 
          "seed": "int agingB=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "final double relativeAccuracy=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "this.method=method;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_529/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:19:16.822623415 -0500\n@@ -147,7 +147,8 @@\n \n         // Get accuracies.\n         final double ftol = getFunctionValueAccuracy();\n-        final double atol = getAbsoluteAccuracy();\n+        int agingB = 0;\n+\t\tfinal double atol = getAbsoluteAccuracy();\n         final double rtol = getRelativeAccuracy();\n \n         // Keep track of inverted intervals, meaning that the left bound is\n@@ -185,8 +186,24 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n+                        final double relativeAccuracy = getRelativeAccuracy();\n+                        if (FastMath.abs(x1 - x0) < FastMath.max(rtol\n+\t\t\t\t\t\t\t\t* FastMath.abs(x1), atol)) {\n+\t\t\t\t\t\t\tswitch (allowed) {\n+\t\t\t\t\t\t\tcase ANY_SIDE:\n+\t\t\t\t\t\t\t\treturn x1;\n+\t\t\t\t\t\t\tcase LEFT_SIDE:\n+\t\t\t\t\t\t\t\treturn inverted ? x1 : x0;\n+\t\t\t\t\t\t\tcase RIGHT_SIDE:\n+\t\t\t\t\t\t\t\treturn inverted ? x0 : x1;\n+\t\t\t\t\t\t\tcase BELOW_SIDE:\n+\t\t\t\t\t\t\t\treturn (f1 <= 0) ? x1 : x0;\n+\t\t\t\t\t\t\tcase ABOVE_SIDE:\n+\t\t\t\t\t\t\t\treturn (f1 >= 0) ? x1 : x0;\n+\t\t\t\t\t\t\tdefault:\n+\t\t\t\t\t\t\t\tthrow new MathInternalError();\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n                     }\n                     break;\n                 default:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 132, 
          "faulty": "double f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "final double startValue=getStartValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double y1=computeObjectiveValue(x1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 116, 
          "faulty": "this.allowed=allowedSolution;", 
          "type": "InsertBefore", 
          "seed": "final double functionValueAccuracy=getFunctionValueAccuracy();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_768/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:21:32.178482568 -0500\n@@ -113,7 +113,8 @@\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue,\n                         final AllowedSolution allowedSolution) {\n-        this.allowed = allowedSolution;\n+        final double functionValueAccuracy = getFunctionValueAccuracy();\n+\t\tthis.allowed = allowedSolution;\n         return super.solve(maxEval, f, min, max, startValue);\n     }\n \n@@ -129,7 +130,8 @@\n         // Get initial solution\n         double x0 = getMin();\n         double x1 = getMax();\n-        double f0 = computeObjectiveValue(x0);\n+        final double startValue = getStartValue();\n+\t\tdouble f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n         // If one of the bounds is the exact root, return it. Since these are\n@@ -185,8 +187,31 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n+                        if (f1 * fx < 0) {\n+\t\t\t\t\t\t\tx0 = x1;\n+\t\t\t\t\t\t\tf0 = f1;\n+\t\t\t\t\t\t\tinverted = !inverted;\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tswitch (method) {\n+\t\t\t\t\t\t\tcase ILLINOIS:\n+\t\t\t\t\t\t\t\tf0 *= 0.5;\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\tcase PEGASUS:\n+\t\t\t\t\t\t\t\tf0 *= f1 / (f1 + fx);\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\tcase REGULA_FALSI:\n+\t\t\t\t\t\t\t\tif (x == x1) {\n+\t\t\t\t\t\t\t\t\tx0 = 0.5 * (x0 + x1 - FastMath.max(rtol\n+\t\t\t\t\t\t\t\t\t\t\t* FastMath.abs(x1), atol));\n+\t\t\t\t\t\t\t\t\tf0 = computeObjectiveValue(x0);\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\tdefault:\n+\t\t\t\t\t\t\t\tthrow new MathInternalError();\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+                        double y1 = computeObjectiveValue(x1);\n+\t\t\t\t\t\tf0 = computeObjectiveValue(x0);\n                     }\n                     break;\n                 default:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 161, 
          "faulty": "final double fx=computeObjectiveValue(x);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1447/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:27:02.431927723 -0500\n@@ -132,12 +132,6 @@\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n         if (f1 == 0.0) {\n             return x1;\n         }\n@@ -158,7 +152,8 @@\n         while (true) {\n             // Calculate the next approximation.\n             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n-            final double fx = computeObjectiveValue(x);\n+            int start = 0;\n+\t\t\tfinal double fx = computeObjectiveValue(x);\n \n             // If the new approximation is the exact root, return it. Since\n             // this is not an under-approximation or an over-approximation,\n@@ -183,11 +178,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    int agingA = 0;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +227,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "final double absoluteAccuracy=getAbsoluteAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 161, 
          "faulty": "final double fx=computeObjectiveValue(x);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1564/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:27:51.865360661 -0500\n@@ -132,16 +132,6 @@\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -158,7 +148,8 @@\n         while (true) {\n             // Calculate the next approximation.\n             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n-            final double fx = computeObjectiveValue(x);\n+            int start = 0;\n+\t\t\tfinal double fx = computeObjectiveValue(x);\n \n             // If the new approximation is the exact root, return it. Since\n             // this is not an under-approximation or an over-approximation,\n@@ -183,11 +174,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +223,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingB=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "inverted=!inverted;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_612/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:19:57.739806248 -0500\n@@ -121,7 +121,8 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        double x2 = max;\n+\t\treturn solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n     /** {@inheritDoc} */\n@@ -183,11 +184,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingB=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "if (f1 == 0.0) {\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "Complex oldz=new Complex(Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_131/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:15:43.312107087 -0500\n@@ -183,11 +183,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingB=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "inverted=!inverted;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "f0=f1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_661/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:20:21.820495198 -0500\n@@ -121,7 +121,8 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        double x2 = max;\n+\t\treturn solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n     /** {@inheritDoc} */\n@@ -185,8 +186,26 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n+                        f0 = f1;\n+\t\t\t\t\t\tx0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n+                        if (FastMath.abs(x1 - x0) < FastMath.max(rtol\n+\t\t\t\t\t\t\t\t* FastMath.abs(x1), atol)) {\n+\t\t\t\t\t\t\tswitch (allowed) {\n+\t\t\t\t\t\t\tcase ANY_SIDE:\n+\t\t\t\t\t\t\t\treturn x1;\n+\t\t\t\t\t\t\tcase LEFT_SIDE:\n+\t\t\t\t\t\t\t\treturn inverted ? x1 : x0;\n+\t\t\t\t\t\t\tcase RIGHT_SIDE:\n+\t\t\t\t\t\t\t\treturn inverted ? x0 : x1;\n+\t\t\t\t\t\t\tcase BELOW_SIDE:\n+\t\t\t\t\t\t\t\treturn (f1 <= 0) ? x1 : x0;\n+\t\t\t\t\t\t\tcase ABOVE_SIDE:\n+\t\t\t\t\t\t\t\treturn (f1 >= 0) ? x1 : x0;\n+\t\t\t\t\t\t\tdefault:\n+\t\t\t\t\t\t\t\tthrow new MathInternalError();\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tinverted = !inverted;\n                     }\n                     break;\n                 default:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "if (FastMath.abs(f1) <= ftol) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  if (inverted) {\n    return x1;\n  }\nbreak;\ncase RIGHT_SIDE:\nif (!inverted) {\nreturn x1;\n}\nbreak;\ncase BELOW_SIDE:\nif (f1 <= 0) {\nreturn x1;\n}\nbreak;\ncase ABOVE_SIDE:\nif (f1 >= 0) {\nreturn x1;\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "final double ftol=getFunctionValueAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 116, 
          "faulty": "this.allowed=allowedSolution;", 
          "type": "InsertBefore", 
          "seed": "final double ftol=getFunctionValueAccuracy();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1736/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:29:15.647749975 -0500\n@@ -113,7 +113,8 @@\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue,\n                         final AllowedSolution allowedSolution) {\n-        this.allowed = allowedSolution;\n+        final double ftol = getFunctionValueAccuracy();\n+\t\tthis.allowed = allowedSolution;\n         return super.solve(maxEval, f, min, max, startValue);\n     }\n \n@@ -132,16 +133,6 @@\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -183,11 +174,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    int agingA = 0;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +223,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_852/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:22:18.503773764 -0500\n@@ -121,7 +121,8 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        double x2 = max;\n+\t\treturn solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n     /** {@inheritDoc} */\n@@ -183,11 +184,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_312/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:17:20.747161352 -0500\n@@ -183,11 +183,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 161, 
          "faulty": "final double fx=computeObjectiveValue(x);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1311/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:26:00.986115709 -0500\n@@ -132,16 +132,6 @@\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -158,7 +148,8 @@\n         while (true) {\n             // Calculate the next approximation.\n             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n-            final double fx = computeObjectiveValue(x);\n+            int start = 0;\n+\t\t\tfinal double fx = computeObjectiveValue(x);\n \n             // If the new approximation is the exact root, return it. Since\n             // this is not an under-approximation or an over-approximation,\n@@ -185,7 +176,6 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n                         f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n@@ -236,7 +226,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 132, 
          "faulty": "double f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_302/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:17:15.751007981 -0500\n@@ -121,7 +121,8 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        double x2 = max;\n+\t\treturn solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n     /** {@inheritDoc} */\n@@ -129,7 +130,8 @@\n         // Get initial solution\n         double x0 = getMin();\n         double x1 = getMax();\n-        double f0 = computeObjectiveValue(x0);\n+        int agingA = 0;\n+\t\tdouble f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n         // If one of the bounds is the exact root, return it. Since these are\n@@ -183,11 +185,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 150, 
          "faulty": "final double atol=getAbsoluteAccuracy();", 
          "type": "InsertBefore", 
          "seed": "final double initial=getStartValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1396/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:26:40.323280061 -0500\n@@ -132,22 +132,13 @@\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n         // Get accuracies.\n         final double ftol = getFunctionValueAccuracy();\n-        final double atol = getAbsoluteAccuracy();\n+        final double initial = getStartValue();\n+\t\tfinal double atol = getAbsoluteAccuracy();\n         final double rtol = getRelativeAccuracy();\n \n         // Keep track of inverted intervals, meaning that the left bound is\n@@ -183,11 +174,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    int agingA = 0;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +223,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 132, 
          "faulty": "double f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 198, 
          "faulty": "x1=x;", 
          "type": "InsertBefore", 
          "seed": "double x2=0.5 * (x0 + x1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_145/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:15:50.160321945 -0500\n@@ -129,7 +129,8 @@\n         // Get initial solution\n         double x0 = getMin();\n         double x1 = getMax();\n-        double f0 = computeObjectiveValue(x0);\n+        int agingA = 0;\n+\t\tdouble f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n         // If one of the bounds is the exact root, return it. Since these are\n@@ -185,7 +186,29 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n+                        if (f1 * fx < 0) {\n+\t\t\t\t\t\t\tx0 = x1;\n+\t\t\t\t\t\t\tf0 = f1;\n+\t\t\t\t\t\t\tinverted = !inverted;\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tswitch (method) {\n+\t\t\t\t\t\t\tcase ILLINOIS:\n+\t\t\t\t\t\t\t\tf0 *= 0.5;\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\tcase PEGASUS:\n+\t\t\t\t\t\t\t\tf0 *= f1 / (f1 + fx);\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\tcase REGULA_FALSI:\n+\t\t\t\t\t\t\t\tif (x == x1) {\n+\t\t\t\t\t\t\t\t\tx0 = 0.5 * (x0 + x1 - FastMath.max(rtol\n+\t\t\t\t\t\t\t\t\t\t\t* FastMath.abs(x1), atol));\n+\t\t\t\t\t\t\t\t\tf0 = computeObjectiveValue(x0);\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\tdefault:\n+\t\t\t\t\t\t\t\tthrow new MathInternalError();\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n                         f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n@@ -194,7 +217,8 @@\n                     throw new MathInternalError();\n                 }\n             }\n-            // Update from [x0, x1] to [x0, x].\n+            double x2 = 0.5 * (x0 + x1);\n+\t\t\t// Update from [x0, x1] to [x0, x].\n             x1 = x;\n             f1 = fx;\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 161, 
          "faulty": "final double fx=computeObjectiveValue(x);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "double x2=0.5 * (x0 + x1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double x0=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1828/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:29:58.756964069 -0500\n@@ -132,16 +132,6 @@\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -158,7 +148,8 @@\n         while (true) {\n             // Calculate the next approximation.\n             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n-            final double fx = computeObjectiveValue(x);\n+            int start = 0;\n+\t\t\tfinal double fx = computeObjectiveValue(x);\n \n             // If the new approximation is the exact root, return it. Since\n             // this is not an under-approximation or an over-approximation,\n@@ -183,11 +174,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    int agingA = 0;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +223,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingB=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 116, 
          "faulty": "this.allowed=allowedSolution;", 
          "type": "InsertBefore", 
          "seed": "final double functionValueAccuracy=getFunctionValueAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "f0=f1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_838/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:22:12.343602749 -0500\n@@ -113,7 +113,8 @@\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue,\n                         final AllowedSolution allowedSolution) {\n-        this.allowed = allowedSolution;\n+        final double functionValueAccuracy = getFunctionValueAccuracy();\n+\t\tthis.allowed = allowedSolution;\n         return super.solve(maxEval, f, min, max, startValue);\n     }\n \n@@ -138,10 +139,6 @@\n         if (f0 == 0.0) {\n             return x0;\n         }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -185,8 +182,30 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n+                        if (f1 * fx < 0) {\n+\t\t\t\t\t\t\tx0 = x1;\n+\t\t\t\t\t\t\tf0 = f1;\n+\t\t\t\t\t\t\tinverted = !inverted;\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tswitch (method) {\n+\t\t\t\t\t\t\tcase ILLINOIS:\n+\t\t\t\t\t\t\t\tf0 *= 0.5;\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\tcase PEGASUS:\n+\t\t\t\t\t\t\t\tf0 *= f1 / (f1 + fx);\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\tcase REGULA_FALSI:\n+\t\t\t\t\t\t\t\tif (x == x1) {\n+\t\t\t\t\t\t\t\t\tx0 = 0.5 * (x0 + x1 - FastMath.max(rtol\n+\t\t\t\t\t\t\t\t\t\t\t* FastMath.abs(x1), atol));\n+\t\t\t\t\t\t\t\t\tf0 = computeObjectiveValue(x0);\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\tdefault:\n+\t\t\t\t\t\t\t\tthrow new MathInternalError();\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+                        f0 = f1;\n                     }\n                     break;\n                 default:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "final double absoluteAccuracy=getAbsoluteAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "double x0=getMin();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1536/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:27:39.649008348 -0500\n@@ -138,10 +138,6 @@\n         if (f0 == 0.0) {\n             return x0;\n         }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -183,11 +179,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +228,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 161, 
          "faulty": "final double fx=computeObjectiveValue(x);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 151, 
          "faulty": "final double rtol=getRelativeAccuracy();", 
          "type": "InsertBefore", 
          "seed": "if (f1 == 0.0) {\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "double x0=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "final double absoluteAccuracy=getAbsoluteAccuracy();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1413/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:26:47.311485271 -0500\n@@ -121,7 +121,8 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        double x2 = max;\n+\t\treturn solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n     /** {@inheritDoc} */\n@@ -132,23 +133,16 @@\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n         // Get accuracies.\n         final double ftol = getFunctionValueAccuracy();\n         final double atol = getAbsoluteAccuracy();\n-        final double rtol = getRelativeAccuracy();\n+        if (f1 == 0.0) {\n+\t\t\treturn x1;\n+\t\t}\n+\t\tfinal double rtol = getRelativeAccuracy();\n \n         // Keep track of inverted intervals, meaning that the left bound is\n         // larger than the right bound.\n@@ -158,7 +152,8 @@\n         while (true) {\n             // Calculate the next approximation.\n             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n-            final double fx = computeObjectiveValue(x);\n+            int start = 0;\n+\t\t\tfinal double fx = computeObjectiveValue(x);\n \n             // If the new approximation is the exact root, return it. Since\n             // this is not an under-approximation or an over-approximation,\n@@ -183,11 +178,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +227,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 150, 
          "faulty": "final double atol=getAbsoluteAccuracy();", 
          "type": "InsertBefore", 
          "seed": "final double initial=getStartValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 161, 
          "faulty": "final double fx=computeObjectiveValue(x);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "final double absoluteAccuracy=getAbsoluteAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "double x0=getMin();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double y1=computeObjectiveValue(x1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java", 
          "line": 371, 
          "faulty": "if (function == null) {\n  throw new NullArgumentException(LocalizedFormats.FUNCTION);\n}", 
          "type": "Replace", 
          "seed": "boolean inverted=false;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1678/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:28:48.410977940 -0500\n@@ -121,7 +121,8 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        double x2 = max;\n+\t\treturn solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n     /** {@inheritDoc} */\n@@ -132,12 +133,6 @@\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n         if (f1 == 0.0) {\n             return x1;\n         }\n@@ -147,7 +142,8 @@\n \n         // Get accuracies.\n         final double ftol = getFunctionValueAccuracy();\n-        final double atol = getAbsoluteAccuracy();\n+        final double initial = getStartValue();\n+\t\tfinal double atol = getAbsoluteAccuracy();\n         final double rtol = getRelativeAccuracy();\n \n         // Keep track of inverted intervals, meaning that the left bound is\n@@ -158,7 +154,8 @@\n         while (true) {\n             // Calculate the next approximation.\n             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n-            final double fx = computeObjectiveValue(x);\n+            int start = 0;\n+\t\t\tfinal double fx = computeObjectiveValue(x);\n \n             // If the new approximation is the exact root, return it. Since\n             // this is not an under-approximation or an over-approximation,\n@@ -183,11 +180,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +229,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-02 11:55:31.845022991 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1678/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-02 12:28:48.414978055 -0500\n@@ -368,9 +368,7 @@\n     public static void verifyBracketing(UnivariateRealFunction function,\n                                         final double lower,\n                                         final double upper) {\n-        if (function == null) {\n-            throw new NullArgumentException(LocalizedFormats.FUNCTION);\n-        }\n+        boolean inverted = false;\n         verifyInterval(lower, upper);\n         if (!isBracketing(function, lower, upper)) {\n             throw new NoBracketingException(lower, upper,\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "f0=f1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "f0=f1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1143/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:24:32.891462964 -0500\n@@ -185,8 +185,8 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n+                        f0 = f1;\n+\t\t\t\t\t\tf0 = computeObjectiveValue(x0);\n                     }\n                     break;\n                 default:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 161, 
          "faulty": "final double fx=computeObjectiveValue(x);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1605/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:28:15.410036635 -0500\n@@ -132,16 +132,6 @@\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -158,7 +148,8 @@\n         while (true) {\n             // Calculate the next approximation.\n             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n-            final double fx = computeObjectiveValue(x);\n+            int start = 0;\n+\t\t\tfinal double fx = computeObjectiveValue(x);\n \n             // If the new approximation is the exact root, return it. Since\n             // this is not an under-approximation or an over-approximation,\n@@ -183,11 +174,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    int agingA = 0;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +223,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "double x2=0.5 * (x0 + x1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double x0=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1802/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:29:46.572621822 -0500\n@@ -132,16 +132,6 @@\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -183,11 +173,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    int agingA = 0;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +222,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Delete", 
          "seed": "final double rtol=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_935/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:23:01.276956044 -0500\n@@ -183,11 +183,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +232,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    ;\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "inverted=!inverted;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "Complex oldz=new Complex(Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Delete", 
          "seed": "double f0=computeObjectiveValue(x0);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_778/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:21:42.482770841 -0500\n@@ -138,10 +138,6 @@\n         if (f0 == 0.0) {\n             return x0;\n         }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -183,11 +179,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +228,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    ;\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_824/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:22:04.947397157 -0500\n@@ -121,7 +121,8 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        double x2 = max;\n+\t\treturn solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n     /** {@inheritDoc} */\n@@ -183,11 +184,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingB=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "inverted=!inverted;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "Complex oldz=new Complex(Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double y1=computeObjectiveValue(x1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "Complex oldz=new Complex(Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_875/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:22:27.740029808 -0500\n@@ -121,7 +121,8 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        double x2 = max;\n+\t\treturn solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n     /** {@inheritDoc} */\n@@ -138,10 +139,6 @@\n         if (f0 == 0.0) {\n             return x0;\n         }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -183,11 +180,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1021/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:23:38.489978080 -0500\n@@ -183,11 +183,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +232,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "int numIterations=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1425/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:26:52.203628655 -0500\n@@ -132,16 +132,6 @@\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -183,11 +173,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    int agingA = 0;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +222,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "f0=f1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "f0=f1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(f1) <= ftol) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  if (inverted) {\n    return x1;\n  }\nbreak;\ncase RIGHT_SIDE:\nif (!inverted) {\nreturn x1;\n}\nbreak;\ncase BELOW_SIDE:\nif (f1 <= 0) {\nreturn x1;\n}\nbreak;\ncase ABOVE_SIDE:\nif (f1 >= 0) {\nreturn x1;\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1135/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:24:28.611346492 -0500\n@@ -185,8 +185,8 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n+                        f0 = f1;\n+\t\t\t\t\t\tf0 = computeObjectiveValue(x0);\n                     }\n                     break;\n                 default:\n@@ -236,7 +236,37 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    {\n+\t\t\t\t\t\tif (FastMath.abs(f1) <= ftol) {\n+\t\t\t\t\t\t\tswitch (allowed) {\n+\t\t\t\t\t\t\tcase ANY_SIDE:\n+\t\t\t\t\t\t\t\treturn x1;\n+\t\t\t\t\t\t\tcase LEFT_SIDE:\n+\t\t\t\t\t\t\t\tif (inverted) {\n+\t\t\t\t\t\t\t\t\treturn x1;\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\tcase RIGHT_SIDE:\n+\t\t\t\t\t\t\t\tif (!inverted) {\n+\t\t\t\t\t\t\t\t\treturn x1;\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\tcase BELOW_SIDE:\n+\t\t\t\t\t\t\t\tif (f1 <= 0) {\n+\t\t\t\t\t\t\t\t\treturn x1;\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\tcase ABOVE_SIDE:\n+\t\t\t\t\t\t\t\tif (f1 >= 0) {\n+\t\t\t\t\t\t\t\t\treturn x1;\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\tdefault:\n+\t\t\t\t\t\t\t\tthrow new MathInternalError();\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\treturn x1;\n+\t\t\t\t\t}\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 174, 
          "faulty": "x0=x1;", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\n  return x1;\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1748/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:29:21.215907309 -0500\n@@ -138,10 +138,6 @@\n         if (f0 == 0.0) {\n             return x0;\n         }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -169,7 +165,11 @@\n \n             // Update the bounds with the new approximation.\n             if (f1 * fx < 0) {\n-                // The value of x1 has switched to the other bound, thus inverting\n+                if (FastMath.abs(x1 - x0) < FastMath.max(\n+\t\t\t\t\t\trtol * FastMath.abs(x1), atol)) {\n+\t\t\t\t\treturn x1;\n+\t\t\t\t}\n+\t\t\t\t// The value of x1 has switched to the other bound, thus inverting\n                 // the interval.\n                 x0 = x1;\n                 f0 = f1;\n@@ -183,11 +183,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 161, 
          "faulty": "final double fx=computeObjectiveValue(x);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "final double absoluteAccuracy=getAbsoluteAccuracy();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1405/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:26:43.591376088 -0500\n@@ -138,10 +138,6 @@\n         if (f0 == 0.0) {\n             return x0;\n         }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -158,7 +154,8 @@\n         while (true) {\n             // Calculate the next approximation.\n             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n-            final double fx = computeObjectiveValue(x);\n+            int start = 0;\n+\t\t\tfinal double fx = computeObjectiveValue(x);\n \n             // If the new approximation is the exact root, return it. Since\n             // this is not an under-approximation or an over-approximation,\n@@ -183,11 +180,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +229,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "final double max=getMax();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_231/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:16:41.993960230 -0500\n@@ -138,10 +138,6 @@\n         if (f0 == 0.0) {\n             return x0;\n         }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -185,8 +181,47 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n+                        if (f1 * fx < 0) {\n+\t\t\t\t\t\t\tx0 = x1;\n+\t\t\t\t\t\t\tf0 = f1;\n+\t\t\t\t\t\t\tinverted = !inverted;\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tswitch (method) {\n+\t\t\t\t\t\t\tcase ILLINOIS:\n+\t\t\t\t\t\t\t\tf0 *= 0.5;\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\tcase PEGASUS:\n+\t\t\t\t\t\t\t\tf0 *= f1 / (f1 + fx);\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\tcase REGULA_FALSI:\n+\t\t\t\t\t\t\t\tif (x == x1) {\n+\t\t\t\t\t\t\t\t\tx0 = 0.5 * (x0 + x1 - FastMath.max(rtol\n+\t\t\t\t\t\t\t\t\t\t\t* FastMath.abs(x1), atol));\n+\t\t\t\t\t\t\t\t\tf0 = computeObjectiveValue(x0);\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\tdefault:\n+\t\t\t\t\t\t\t\tthrow new MathInternalError();\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+                        if (FastMath.abs(x1 - x0) < FastMath.max(rtol\n+\t\t\t\t\t\t\t\t* FastMath.abs(x1), atol)) {\n+\t\t\t\t\t\t\tswitch (allowed) {\n+\t\t\t\t\t\t\tcase ANY_SIDE:\n+\t\t\t\t\t\t\t\treturn x1;\n+\t\t\t\t\t\t\tcase LEFT_SIDE:\n+\t\t\t\t\t\t\t\treturn inverted ? x1 : x0;\n+\t\t\t\t\t\t\tcase RIGHT_SIDE:\n+\t\t\t\t\t\t\t\treturn inverted ? x0 : x1;\n+\t\t\t\t\t\t\tcase BELOW_SIDE:\n+\t\t\t\t\t\t\t\treturn (f1 <= 0) ? x1 : x0;\n+\t\t\t\t\t\t\tcase ABOVE_SIDE:\n+\t\t\t\t\t\t\t\treturn (f1 >= 0) ? x1 : x0;\n+\t\t\t\t\t\t\tdefault:\n+\t\t\t\t\t\t\t\tthrow new MathInternalError();\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tf0 = computeObjectiveValue(x0);\n                     }\n                     break;\n                 default:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_991/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:23:25.509622215 -0500\n@@ -121,7 +121,8 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        double x2 = max;\n+\t\treturn solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n     /** {@inheritDoc} */\n@@ -138,10 +139,6 @@\n         if (f0 == 0.0) {\n             return x0;\n         }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -183,11 +180,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double initial=getStartValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 161, 
          "faulty": "final double fx=computeObjectiveValue(x);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1301/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:25:55.993966747 -0500\n@@ -132,12 +132,6 @@\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n         if (f1 == 0.0) {\n             return x1;\n         }\n@@ -158,7 +152,8 @@\n         while (true) {\n             // Calculate the next approximation.\n             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n-            final double fx = computeObjectiveValue(x);\n+            int start = 0;\n+\t\t\tfinal double fx = computeObjectiveValue(x);\n \n             // If the new approximation is the exact root, return it. Since\n             // this is not an under-approximation or an over-approximation,\n@@ -183,11 +178,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingB=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingB=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "final double max=getMax();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_596/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:19:49.891580613 -0500\n@@ -132,16 +132,7 @@\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n+        int agingA = 0;\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -183,11 +174,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double initial=getStartValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 235, 
          "faulty": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}", 
          "type": "InsertBefore", 
          "seed": "final double relativeAccuracy=getRelativeAccuracy();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1214/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:25:05.936456217 -0500\n@@ -183,11 +183,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -230,7 +226,8 @@\n                 }\n             }\n \n-            // If the current interval is within the given accuracies, we\n+            final double relativeAccuracy = getRelativeAccuracy();\n+\t\t\t// If the current interval is within the given accuracies, we\n             // are satisfied with the current approximation.\n             if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),\n                                                      atol)) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "Complex denominator=null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1452/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:27:04.259981076 -0500\n@@ -138,10 +138,6 @@\n         if (f0 == 0.0) {\n             return x0;\n         }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -183,11 +179,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 116, 
          "faulty": "this.allowed=allowedSolution;", 
          "type": "InsertBefore", 
          "seed": "final double functionValueAccuracy=getFunctionValueAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "f0=f1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "final double initial=getStartValue();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1053/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:23:53.318383833 -0500\n@@ -113,7 +113,8 @@\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue,\n                         final AllowedSolution allowedSolution) {\n-        this.allowed = allowedSolution;\n+        final double functionValueAccuracy = getFunctionValueAccuracy();\n+\t\tthis.allowed = allowedSolution;\n         return super.solve(maxEval, f, min, max, startValue);\n     }\n \n@@ -138,10 +139,6 @@\n         if (f0 == 0.0) {\n             return x0;\n         }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -185,8 +182,8 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n+                        f0 = f1;\n+\t\t\t\t\t\tf0 = computeObjectiveValue(x0);\n                     }\n                     break;\n                 default:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_987/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:23:24.313589392 -0500\n@@ -183,11 +183,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double absoluteAccuracy=getAbsoluteAccuracy();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1046/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:23:50.858316573 -0500\n@@ -183,11 +183,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +232,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double absoluteAccuracy = getAbsoluteAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingB=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "inverted=!inverted;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double y1=computeObjectiveValue(x1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 155, 
          "faulty": "boolean inverted=false;", 
          "type": "InsertBefore", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 132, 
          "faulty": "double f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "final double startValue=getStartValue();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_673/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:20:27.400654153 -0500\n@@ -121,7 +121,8 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        double x2 = max;\n+\t\treturn solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n     /** {@inheritDoc} */\n@@ -129,7 +130,8 @@\n         // Get initial solution\n         double x0 = getMin();\n         double x1 = getMax();\n-        double f0 = computeObjectiveValue(x0);\n+        final double startValue = getStartValue();\n+\t\tdouble f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n         // If one of the bounds is the exact root, return it. Since these are\n@@ -150,7 +152,8 @@\n         final double atol = getAbsoluteAccuracy();\n         final double rtol = getRelativeAccuracy();\n \n-        // Keep track of inverted intervals, meaning that the left bound is\n+        int numIterations = 0;\n+\t\t// Keep track of inverted intervals, meaning that the left bound is\n         // larger than the right bound.\n         boolean inverted = false;\n \n@@ -183,11 +186,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "inverted=!inverted;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "Complex oldz=new Complex(Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "Complex G2=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "final double t=getAbsoluteAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "throw new NullArgumentException(LocalizedFormats.FUNCTION);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_840/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:22:12.971620194 -0500\n@@ -138,10 +138,6 @@\n         if (f0 == 0.0) {\n             return x0;\n         }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -183,11 +179,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double initial=getStartValue();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1129/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:24:26.107278323 -0500\n@@ -183,11 +183,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 132, 
          "faulty": "double f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "final double max=getMax();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_60/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:15:07.498967597 -0500\n@@ -129,7 +129,8 @@\n         // Get initial solution\n         double x0 = getMin();\n         double x1 = getMax();\n-        double f0 = computeObjectiveValue(x0);\n+        int agingA = 0;\n+\t\tdouble f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n         // If one of the bounds is the exact root, return it. Since these are\n@@ -138,10 +139,6 @@\n         if (f0 == 0.0) {\n             return x0;\n         }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -185,7 +182,7 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n+                        final double eps = getRelativeAccuracy();\n                         f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1368/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:26:28.354927505 -0500\n@@ -132,16 +132,6 @@\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -183,11 +173,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    int agingA = 0;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +222,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "final double relativeAccuracy=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_803/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:21:54.615109448 -0500\n@@ -121,7 +121,8 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        double x2 = max;\n+\t\treturn solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n     /** {@inheritDoc} */\n@@ -183,11 +184,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingB=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 155, 
          "faulty": "boolean inverted=false;", 
          "type": "InsertBefore", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double y1=computeObjectiveValue(x1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 150, 
          "faulty": "final double atol=getAbsoluteAccuracy();", 
          "type": "InsertBefore", 
          "seed": "int agingB=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "inverted=!inverted;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "Complex oldz=new Complex(Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double y1=computeObjectiveValue(x1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 199, 
          "faulty": "f1=fx;", 
          "type": "InsertBefore", 
          "seed": "double max=getMax();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_729/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:21:13.765965807 -0500\n@@ -121,7 +121,8 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        double x2 = max;\n+\t\treturn solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n     /** {@inheritDoc} */\n@@ -138,19 +139,17 @@\n         if (f0 == 0.0) {\n             return x0;\n         }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n         // Get accuracies.\n         final double ftol = getFunctionValueAccuracy();\n-        final double atol = getAbsoluteAccuracy();\n+        int agingB = 0;\n+\t\tfinal double atol = getAbsoluteAccuracy();\n         final double rtol = getRelativeAccuracy();\n \n-        // Keep track of inverted intervals, meaning that the left bound is\n+        int numIterations = 0;\n+\t\t// Keep track of inverted intervals, meaning that the left bound is\n         // larger than the right bound.\n         boolean inverted = false;\n \n@@ -183,11 +182,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -196,7 +191,8 @@\n             }\n             // Update from [x0, x1] to [x0, x].\n             x1 = x;\n-            f1 = fx;\n+            double max = getMax();\n+\t\t\tf1 = fx;\n \n             // If the function value of the last approximation is too small,\n             // given the function value accuracy, then we can't get closer to\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double initial=getStartValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 161, 
          "faulty": "final double fx=computeObjectiveValue(x);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 116, 
          "faulty": "this.allowed=allowedSolution;", 
          "type": "InsertBefore", 
          "seed": "final double functionValueAccuracy=getFunctionValueAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double initial=getStartValue();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1124/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:24:24.263228110 -0500\n@@ -113,7 +113,8 @@\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue,\n                         final AllowedSolution allowedSolution) {\n-        this.allowed = allowedSolution;\n+        final double functionValueAccuracy = getFunctionValueAccuracy();\n+\t\tthis.allowed = allowedSolution;\n         return super.solve(maxEval, f, min, max, startValue);\n     }\n \n@@ -138,10 +139,6 @@\n         if (f0 == 0.0) {\n             return x0;\n         }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -158,7 +155,8 @@\n         while (true) {\n             // Calculate the next approximation.\n             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n-            final double fx = computeObjectiveValue(x);\n+            int start = 0;\n+\t\t\tfinal double fx = computeObjectiveValue(x);\n \n             // If the new approximation is the exact root, return it. Since\n             // this is not an under-approximation or an over-approximation,\n@@ -183,11 +181,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double initial=getStartValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 161, 
          "faulty": "final double fx=computeObjectiveValue(x);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1253/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:25:22.484959149 -0500\n@@ -121,7 +121,8 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        double x2 = max;\n+\t\treturn solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n     /** {@inheritDoc} */\n@@ -158,7 +159,8 @@\n         while (true) {\n             // Calculate the next approximation.\n             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n-            final double fx = computeObjectiveValue(x);\n+            int start = 0;\n+\t\t\tfinal double fx = computeObjectiveValue(x);\n \n             // If the new approximation is the exact root, return it. Since\n             // this is not an under-approximation or an over-approximation,\n@@ -183,11 +185,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +234,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 150, 
          "faulty": "final double atol=getAbsoluteAccuracy();", 
          "type": "InsertBefore", 
          "seed": "final double initial=getStartValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double initial=getStartValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1216/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:25:06.548474883 -0500\n@@ -121,7 +121,8 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        double x2 = max;\n+\t\treturn solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n     /** {@inheritDoc} */\n@@ -147,7 +148,8 @@\n \n         // Get accuracies.\n         final double ftol = getFunctionValueAccuracy();\n-        final double atol = getAbsoluteAccuracy();\n+        final double initial = getStartValue();\n+\t\tfinal double atol = getAbsoluteAccuracy();\n         final double rtol = getRelativeAccuracy();\n \n         // Keep track of inverted intervals, meaning that the left bound is\n@@ -183,11 +185,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 151, 
          "faulty": "final double rtol=getRelativeAccuracy();", 
          "type": "InsertBefore", 
          "seed": "if (f1 == 0.0) {\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "final double absoluteAccuracy=getAbsoluteAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "double x0=getMin();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "double x0=getMin();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "throw new NullArgumentException(LocalizedFormats.FUNCTION);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1598/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:28:07.525810705 -0500\n@@ -138,17 +138,16 @@\n         if (f0 == 0.0) {\n             return x0;\n         }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n         // Get accuracies.\n         final double ftol = getFunctionValueAccuracy();\n         final double atol = getAbsoluteAccuracy();\n-        final double rtol = getRelativeAccuracy();\n+        if (f1 == 0.0) {\n+\t\t\treturn x1;\n+\t\t}\n+\t\tfinal double rtol = getRelativeAccuracy();\n \n         // Keep track of inverted intervals, meaning that the left bound is\n         // larger than the right bound.\n@@ -183,11 +182,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1011/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:23:34.097857741 -0500\n@@ -183,11 +183,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "inverted=!inverted;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "Complex oldz=new Complex(Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_746/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:21:21.666187800 -0500\n@@ -121,7 +121,8 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        double x2 = max;\n+\t\treturn solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n     /** {@inheritDoc} */\n@@ -138,10 +139,6 @@\n         if (f0 == 0.0) {\n             return x0;\n         }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -183,11 +180,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 150, 
          "faulty": "final double atol=getAbsoluteAccuracy();", 
          "type": "InsertBefore", 
          "seed": "final double initial=getStartValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 161, 
          "faulty": "final double fx=computeObjectiveValue(x);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 151, 
          "faulty": "final double rtol=getRelativeAccuracy();", 
          "type": "InsertBefore", 
          "seed": "if (f1 == 0.0) {\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1517/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:27:31.036759291 -0500\n@@ -121,7 +121,8 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        double x2 = max;\n+\t\treturn solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n     /** {@inheritDoc} */\n@@ -132,23 +133,17 @@\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n         // Get accuracies.\n         final double ftol = getFunctionValueAccuracy();\n-        final double atol = getAbsoluteAccuracy();\n-        final double rtol = getRelativeAccuracy();\n+        final double initial = getStartValue();\n+\t\tfinal double atol = getAbsoluteAccuracy();\n+        if (f1 == 0.0) {\n+\t\t\treturn x1;\n+\t\t}\n+\t\tfinal double rtol = getRelativeAccuracy();\n \n         // Keep track of inverted intervals, meaning that the left bound is\n         // larger than the right bound.\n@@ -158,7 +153,8 @@\n         while (true) {\n             // Calculate the next approximation.\n             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n-            final double fx = computeObjectiveValue(x);\n+            int start = 0;\n+\t\t\tfinal double fx = computeObjectiveValue(x);\n \n             // If the new approximation is the exact root, return it. Since\n             // this is not an under-approximation or an over-approximation,\n@@ -183,11 +179,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    int agingA = 0;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +228,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "final double relativeAccuracy=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double y1=computeObjectiveValue(x1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_574/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:19:39.471280144 -0500\n@@ -183,11 +183,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java", 
          "line": 371, 
          "faulty": "if (function == null) {\n  throw new NullArgumentException(LocalizedFormats.FUNCTION);\n}", 
          "type": "Replace", 
          "seed": "final double fHi=function.value(upper);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1416/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:26:48.531521050 -0500\n@@ -138,10 +138,6 @@\n         if (f0 == 0.0) {\n             return x0;\n         }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -183,11 +179,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-02 11:55:31.845022991 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1416/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-02 12:26:48.535521166 -0500\n@@ -368,9 +368,7 @@\n     public static void verifyBracketing(UnivariateRealFunction function,\n                                         final double lower,\n                                         final double upper) {\n-        if (function == null) {\n-            throw new NullArgumentException(LocalizedFormats.FUNCTION);\n-        }\n+        final double fHi = function.value(upper);\n         verifyInterval(lower, upper);\n         if (!isBracketing(function, lower, upper)) {\n             throw new NoBracketingException(lower, upper,\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingB=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "final double max=getMax();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 150, 
          "faulty": "final double atol=getAbsoluteAccuracy();", 
          "type": "InsertBefore", 
          "seed": "final double absoluteAccuracy=getAbsoluteAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 <= 0) {\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "double initial=getStartValue();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_366/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:17:45.299909220 -0500\n@@ -138,16 +138,13 @@\n         if (f0 == 0.0) {\n             return x0;\n         }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n         // Get accuracies.\n         final double ftol = getFunctionValueAccuracy();\n-        final double atol = getAbsoluteAccuracy();\n+        final double absoluteAccuracy = getAbsoluteAccuracy();\n+\t\tfinal double atol = getAbsoluteAccuracy();\n         final double rtol = getRelativeAccuracy();\n \n         // Keep track of inverted intervals, meaning that the left bound is\n@@ -183,11 +180,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +229,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    double initial = getStartValue();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_257/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:16:54.934364317 -0500\n@@ -183,11 +183,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingB=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingB=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "final double max=getMax();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double y1=computeObjectiveValue(x1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 155, 
          "faulty": "boolean inverted=false;", 
          "type": "InsertBefore", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 132, 
          "faulty": "double f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "final double startValue=getStartValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 130, 
          "faulty": "double x0=getMin();", 
          "type": "InsertBefore", 
          "seed": "final double initial=getStartValue();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_632/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:20:06.420055164 -0500\n@@ -121,15 +121,18 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        double x2 = max;\n+\t\treturn solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n     /** {@inheritDoc} */\n     protected final double doSolve() {\n-        // Get initial solution\n+        final double initial = getStartValue();\n+\t\t// Get initial solution\n         double x0 = getMin();\n         double x1 = getMax();\n-        double f0 = computeObjectiveValue(x0);\n+        final double startValue = getStartValue();\n+\t\tdouble f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n         // If one of the bounds is the exact root, return it. Since these are\n@@ -138,10 +141,6 @@\n         if (f0 == 0.0) {\n             return x0;\n         }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -150,7 +149,8 @@\n         final double atol = getAbsoluteAccuracy();\n         final double rtol = getRelativeAccuracy();\n \n-        // Keep track of inverted intervals, meaning that the left bound is\n+        int numIterations = 0;\n+\t\t// Keep track of inverted intervals, meaning that the left bound is\n         // larger than the right bound.\n         boolean inverted = false;\n \n@@ -183,11 +183,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "f0=f1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 199, 
          "faulty": "f1=fx;", 
          "type": "InsertBefore", 
          "seed": "double min=getMin();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1108/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:24:17.495043723 -0500\n@@ -185,8 +185,31 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n+                        if (f1 * fx < 0) {\n+\t\t\t\t\t\t\tx0 = x1;\n+\t\t\t\t\t\t\tf0 = f1;\n+\t\t\t\t\t\t\tinverted = !inverted;\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tswitch (method) {\n+\t\t\t\t\t\t\tcase ILLINOIS:\n+\t\t\t\t\t\t\t\tf0 *= 0.5;\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\tcase PEGASUS:\n+\t\t\t\t\t\t\t\tf0 *= f1 / (f1 + fx);\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\tcase REGULA_FALSI:\n+\t\t\t\t\t\t\t\tif (x == x1) {\n+\t\t\t\t\t\t\t\t\tx0 = 0.5 * (x0 + x1 - FastMath.max(rtol\n+\t\t\t\t\t\t\t\t\t\t\t* FastMath.abs(x1), atol));\n+\t\t\t\t\t\t\t\t\tf0 = computeObjectiveValue(x0);\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\tdefault:\n+\t\t\t\t\t\t\t\tthrow new MathInternalError();\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+                        f0 = f1;\n+\t\t\t\t\t\tf0 = computeObjectiveValue(x0);\n                     }\n                     break;\n                 default:\n@@ -196,7 +219,8 @@\n             }\n             // Update from [x0, x1] to [x0, x].\n             x1 = x;\n-            f1 = fx;\n+            double min = getMin();\n+\t\t\tf1 = fx;\n \n             // If the function value of the last approximation is too small,\n             // given the function value accuracy, then we can't get closer to\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double y1=computeObjectiveValue(x1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1001/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:23:29.173722735 -0500\n@@ -121,7 +121,8 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        double x2 = max;\n+\t\treturn solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n     /** {@inheritDoc} */\n@@ -183,11 +184,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 174, 
          "faulty": "x0=x1;", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\n  return x1;\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1663/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:28:41.690786802 -0500\n@@ -132,16 +132,6 @@\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -169,7 +159,11 @@\n \n             // Update the bounds with the new approximation.\n             if (f1 * fx < 0) {\n-                // The value of x1 has switched to the other bound, thus inverting\n+                if (FastMath.abs(x1 - x0) < FastMath.max(\n+\t\t\t\t\t\trtol * FastMath.abs(x1), atol)) {\n+\t\t\t\t\treturn x1;\n+\t\t\t\t}\n+\t\t\t\t// The value of x1 has switched to the other bound, thus inverting\n                 // the interval.\n                 x0 = x1;\n                 f0 = f1;\n@@ -183,11 +177,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    int agingA = 0;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +226,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingB=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "if (f1 == 0.0) {\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "Complex G=null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_128/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:15:42.008066069 -0500\n@@ -183,11 +183,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double y1=computeObjectiveValue(x1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java", 
          "line": 371, 
          "faulty": "if (function == null) {\n  throw new NullArgumentException(LocalizedFormats.FUNCTION);\n}", 
          "type": "Delete", 
          "seed": "int agingB=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_997/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:23:27.953689271 -0500\n@@ -132,12 +132,6 @@\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n         if (f1 == 0.0) {\n             return x1;\n         }\n@@ -183,11 +177,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-02 11:55:31.845022991 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_997/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-02 12:23:27.953689271 -0500\n@@ -368,9 +368,6 @@\n     public static void verifyBracketing(UnivariateRealFunction function,\n                                         final double lower,\n                                         final double upper) {\n-        if (function == null) {\n-            throw new NullArgumentException(LocalizedFormats.FUNCTION);\n-        }\n         verifyInterval(lower, upper);\n         if (!isBracketing(function, lower, upper)) {\n             throw new NoBracketingException(lower, upper,\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 150, 
          "faulty": "final double atol=getAbsoluteAccuracy();", 
          "type": "InsertBefore", 
          "seed": "final double absoluteAccuracy=getAbsoluteAccuracy();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_167/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:16:00.320639043 -0500\n@@ -147,7 +147,8 @@\n \n         // Get accuracies.\n         final double ftol = getFunctionValueAccuracy();\n-        final double atol = getAbsoluteAccuracy();\n+        final double absoluteAccuracy = getAbsoluteAccuracy();\n+\t\tfinal double atol = getAbsoluteAccuracy();\n         final double rtol = getRelativeAccuracy();\n \n         // Keep track of inverted intervals, meaning that the left bound is\n@@ -185,7 +186,29 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n+                        if (f1 * fx < 0) {\n+\t\t\t\t\t\t\tx0 = x1;\n+\t\t\t\t\t\t\tf0 = f1;\n+\t\t\t\t\t\t\tinverted = !inverted;\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tswitch (method) {\n+\t\t\t\t\t\t\tcase ILLINOIS:\n+\t\t\t\t\t\t\t\tf0 *= 0.5;\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\tcase PEGASUS:\n+\t\t\t\t\t\t\t\tf0 *= f1 / (f1 + fx);\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\tcase REGULA_FALSI:\n+\t\t\t\t\t\t\t\tif (x == x1) {\n+\t\t\t\t\t\t\t\t\tx0 = 0.5 * (x0 + x1 - FastMath.max(rtol\n+\t\t\t\t\t\t\t\t\t\t\t* FastMath.abs(x1), atol));\n+\t\t\t\t\t\t\t\t\tf0 = computeObjectiveValue(x0);\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\tdefault:\n+\t\t\t\t\t\t\t\tthrow new MathInternalError();\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n                         f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 132, 
          "faulty": "double f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 198, 
          "faulty": "x1=x;", 
          "type": "InsertBefore", 
          "seed": "double x2=0.5 * (x0 + x1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_163/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:15:59.008598207 -0500\n@@ -129,7 +129,8 @@\n         // Get initial solution\n         double x0 = getMin();\n         double x1 = getMax();\n-        double f0 = computeObjectiveValue(x0);\n+        int agingA = 0;\n+\t\tdouble f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n         // If one of the bounds is the exact root, return it. Since these are\n@@ -183,18 +184,15 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n                     throw new MathInternalError();\n                 }\n             }\n-            // Update from [x0, x1] to [x0, x].\n+            double x2 = 0.5 * (x0 + x1);\n+\t\t\t// Update from [x0, x1] to [x0, x].\n             x1 = x;\n             f1 = fx;\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double y1=computeObjectiveValue(x1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 150, 
          "faulty": "final double atol=getAbsoluteAccuracy();", 
          "type": "InsertBefore", 
          "seed": "int agingB=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "inverted=!inverted;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "Complex oldz=new Complex(Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_784/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:21:44.890838117 -0500\n@@ -121,7 +121,8 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        double x2 = max;\n+\t\treturn solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n     /** {@inheritDoc} */\n@@ -138,16 +139,13 @@\n         if (f0 == 0.0) {\n             return x0;\n         }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n         // Get accuracies.\n         final double ftol = getFunctionValueAccuracy();\n-        final double atol = getAbsoluteAccuracy();\n+        int agingB = 0;\n+\t\tfinal double atol = getAbsoluteAccuracy();\n         final double rtol = getRelativeAccuracy();\n \n         // Keep track of inverted intervals, meaning that the left bound is\n@@ -183,11 +181,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1376/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:26:31.651024742 -0500\n@@ -132,16 +132,6 @@\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -183,11 +173,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +222,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingB=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 132, 
          "faulty": "double f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double x0=getMin();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_152/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:15:53.384422780 -0500\n@@ -129,7 +129,8 @@\n         // Get initial solution\n         double x0 = getMin();\n         double x1 = getMax();\n-        double f0 = computeObjectiveValue(x0);\n+        int agingA = 0;\n+\t\tdouble f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n         // If one of the bounds is the exact root, return it. Since these are\n@@ -183,11 +184,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 161, 
          "faulty": "final double fx=computeObjectiveValue(x);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1362/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:26:25.290837014 -0500\n@@ -132,16 +132,6 @@\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -158,7 +148,8 @@\n         while (true) {\n             // Calculate the next approximation.\n             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n-            final double fx = computeObjectiveValue(x);\n+            int start = 0;\n+\t\t\tfinal double fx = computeObjectiveValue(x);\n \n             // If the new approximation is the exact root, return it. Since\n             // this is not an under-approximation or an over-approximation,\n@@ -183,11 +174,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +223,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingB=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "final double max=getMax();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 155, 
          "faulty": "boolean inverted=false;", 
          "type": "InsertBefore", 
          "seed": "int numIterations=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_461/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:18:37.857480663 -0500\n@@ -121,7 +121,8 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        double x2 = max;\n+\t\treturn solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n     /** {@inheritDoc} */\n@@ -138,10 +139,6 @@\n         if (f0 == 0.0) {\n             return x0;\n         }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -150,7 +147,8 @@\n         final double atol = getAbsoluteAccuracy();\n         final double rtol = getRelativeAccuracy();\n \n-        // Keep track of inverted intervals, meaning that the left bound is\n+        int numIterations = 0;\n+\t\t// Keep track of inverted intervals, meaning that the left bound is\n         // larger than the right bound.\n         boolean inverted = false;\n \n@@ -183,11 +181,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double initial=getStartValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 161, 
          "faulty": "final double fx=computeObjectiveValue(x);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "final double t=getAbsoluteAccuracy();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1332/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:26:11.026414455 -0500\n@@ -121,7 +121,8 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        double x2 = max;\n+\t\treturn solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n     /** {@inheritDoc} */\n@@ -158,7 +159,8 @@\n         while (true) {\n             // Calculate the next approximation.\n             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n-            final double fx = computeObjectiveValue(x);\n+            int start = 0;\n+\t\t\tfinal double fx = computeObjectiveValue(x);\n \n             // If the new approximation is the exact root, return it. Since\n             // this is not an under-approximation or an over-approximation,\n@@ -183,11 +185,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +234,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java", 
          "line": 305, 
          "faulty": "if (function == null) {\n  throw new NullArgumentException(LocalizedFormats.FUNCTION);\n}", 
          "type": "Delete", 
          "seed": "throw new NoBracketingException(lower,upper,function.value(lower),function.value(upper));"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1086/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:24:07.062759222 -0500\n@@ -183,11 +183,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-02 11:55:31.845022991 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1086/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-02 12:24:07.062759222 -0500\n@@ -302,9 +302,6 @@\n     public static boolean isBracketing(UnivariateRealFunction function,\n                                        final double lower,\n                                        final double upper) {\n-        if (function == null) {\n-            throw new NullArgumentException(LocalizedFormats.FUNCTION);\n-        }\n         final double fLo = function.value(lower);\n         final double fHi = function.value(upper);\n         return (fLo >= 0 && fHi <= 0) || (fLo <= 0 && fHi >= 0);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingB=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "final double max=getMax();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double y1=computeObjectiveValue(x1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "double y1=computeObjectiveValue(x1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 150, 
          "faulty": "final double atol=getAbsoluteAccuracy();", 
          "type": "InsertBefore", 
          "seed": "int agingB=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "inverted=!inverted;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Replace", 
          "seed": "final double t=getAbsoluteAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_418/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:18:10.608670627 -0500\n@@ -138,16 +138,15 @@\n         if (f0 == 0.0) {\n             return x0;\n         }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n+        final double t = getAbsoluteAccuracy();\n \n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n         // Get accuracies.\n         final double ftol = getFunctionValueAccuracy();\n-        final double atol = getAbsoluteAccuracy();\n+        int agingB = 0;\n+\t\tfinal double atol = getAbsoluteAccuracy();\n         final double rtol = getRelativeAccuracy();\n \n         // Keep track of inverted intervals, meaning that the left bound is\n@@ -183,11 +182,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "if (FastMath.abs(f1) <= ftol) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  if (inverted) {\n    return x1;\n  }\nbreak;\ncase RIGHT_SIDE:\nif (!inverted) {\nreturn x1;\n}\nbreak;\ncase BELOW_SIDE:\nif (f1 <= 0) {\nreturn x1;\n}\nbreak;\ncase ABOVE_SIDE:\nif (f1 >= 0) {\nreturn x1;\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "final double ftol=getFunctionValueAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java", 
          "line": 309, 
          "faulty": "final double fHi=function.value(upper);", 
          "type": "InsertBefore", 
          "seed": "int agingA=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1815/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:29:52.632792130 -0500\n@@ -183,11 +183,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    int agingA = 0;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-02 11:55:31.845022991 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1815/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-02 12:29:52.636792243 -0500\n@@ -306,7 +306,8 @@\n             throw new NullArgumentException(LocalizedFormats.FUNCTION);\n         }\n         final double fLo = function.value(lower);\n-        final double fHi = function.value(upper);\n+        int agingA = 0;\n+\t\tfinal double fHi = function.value(upper);\n         return (fLo >= 0 && fHi <= 0) || (fLo <= 0 && fHi >= 0);\n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double y1=computeObjectiveValue(x1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Delete", 
          "seed": "double f0=computeObjectiveValue(x0);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_880/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:22:30.204098045 -0500\n@@ -185,8 +185,31 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n+                        if (f1 * fx < 0) {\n+\t\t\t\t\t\t\tx0 = x1;\n+\t\t\t\t\t\t\tf0 = f1;\n+\t\t\t\t\t\t\tinverted = !inverted;\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tswitch (method) {\n+\t\t\t\t\t\t\tcase ILLINOIS:\n+\t\t\t\t\t\t\t\tf0 *= 0.5;\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\tcase PEGASUS:\n+\t\t\t\t\t\t\t\tf0 *= f1 / (f1 + fx);\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\tcase REGULA_FALSI:\n+\t\t\t\t\t\t\t\tif (x == x1) {\n+\t\t\t\t\t\t\t\t\tx0 = 0.5 * (x0 + x1 - FastMath.max(rtol\n+\t\t\t\t\t\t\t\t\t\t\t* FastMath.abs(x1), atol));\n+\t\t\t\t\t\t\t\t\tf0 = computeObjectiveValue(x0);\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\tdefault:\n+\t\t\t\t\t\t\t\tthrow new MathInternalError();\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+                        double y1 = computeObjectiveValue(x1);\n+\t\t\t\t\t\tf0 = computeObjectiveValue(x0);\n                     }\n                     break;\n                 default:\n@@ -236,7 +259,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    ;\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 161, 
          "faulty": "final double fx=computeObjectiveValue(x);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "final double absoluteAccuracy=getAbsoluteAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "double x0=getMin();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "double x2=0.5 * (x0 + x1);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1756/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:29:25.772035929 -0500\n@@ -132,12 +132,6 @@\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n         if (f1 == 0.0) {\n             return x1;\n         }\n@@ -158,7 +152,8 @@\n         while (true) {\n             // Calculate the next approximation.\n             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n-            final double fx = computeObjectiveValue(x);\n+            int start = 0;\n+\t\t\tfinal double fx = computeObjectiveValue(x);\n \n             // If the new approximation is the exact root, return it. Since\n             // this is not an under-approximation or an over-approximation,\n@@ -183,11 +178,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    int agingA = 0;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +227,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "if (FastMath.abs(f1) <= ftol) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  if (inverted) {\n    return x1;\n  }\nbreak;\ncase RIGHT_SIDE:\nif (!inverted) {\nreturn x1;\n}\nbreak;\ncase BELOW_SIDE:\nif (f1 <= 0) {\nreturn x1;\n}\nbreak;\ncase ABOVE_SIDE:\nif (f1 >= 0) {\nreturn x1;\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1734/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:29:15.047733012 -0500\n@@ -132,12 +132,6 @@\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n         if (f1 == 0.0) {\n             return x1;\n         }\n@@ -183,11 +177,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    int agingA = 0;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +226,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 150, 
          "faulty": "final double atol=getAbsoluteAccuracy();", 
          "type": "InsertBefore", 
          "seed": "final double initial=getStartValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1337/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:26:13.450486414 -0500\n@@ -132,12 +132,6 @@\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n         if (f1 == 0.0) {\n             return x1;\n         }\n@@ -147,7 +141,8 @@\n \n         // Get accuracies.\n         final double ftol = getFunctionValueAccuracy();\n-        final double atol = getAbsoluteAccuracy();\n+        final double initial = getStartValue();\n+\t\tfinal double atol = getAbsoluteAccuracy();\n         final double rtol = getRelativeAccuracy();\n \n         // Keep track of inverted intervals, meaning that the left bound is\n@@ -183,11 +178,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    int agingA = 0;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +227,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 161, 
          "faulty": "final double fx=computeObjectiveValue(x);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "if (FastMath.abs(f1) <= ftol) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  if (inverted) {\n    return x1;\n  }\nbreak;\ncase RIGHT_SIDE:\nif (!inverted) {\nreturn x1;\n}\nbreak;\ncase BELOW_SIDE:\nif (f1 <= 0) {\nreturn x1;\n}\nbreak;\ncase ABOVE_SIDE:\nif (f1 >= 0) {\nreturn x1;\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1650/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:28:35.930622753 -0500\n@@ -132,16 +132,6 @@\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -158,7 +148,8 @@\n         while (true) {\n             // Calculate the next approximation.\n             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n-            final double fx = computeObjectiveValue(x);\n+            int start = 0;\n+\t\t\tfinal double fx = computeObjectiveValue(x);\n \n             // If the new approximation is the exact root, return it. Since\n             // this is not an under-approximation or an over-approximation,\n@@ -183,11 +174,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    int agingA = 0;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +223,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 150, 
          "faulty": "final double atol=getAbsoluteAccuracy();", 
          "type": "InsertBefore", 
          "seed": "final double initial=getStartValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1100/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:24:13.874945040 -0500\n@@ -147,7 +147,8 @@\n \n         // Get accuracies.\n         final double ftol = getFunctionValueAccuracy();\n-        final double atol = getAbsoluteAccuracy();\n+        final double initial = getStartValue();\n+\t\tfinal double atol = getAbsoluteAccuracy();\n         final double rtol = getRelativeAccuracy();\n \n         // Keep track of inverted intervals, meaning that the left bound is\n@@ -183,11 +184,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +233,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingB=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "inverted=!inverted;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "Complex oldz=new Complex(Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "final double max=getMax();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final double ftol=getFunctionValueAccuracy();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_684/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:20:44.541140890 -0500\n@@ -121,7 +121,8 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        double x2 = max;\n+\t\treturn solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n     /** {@inheritDoc} */\n@@ -138,10 +139,6 @@\n         if (f0 == 0.0) {\n             return x0;\n         }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -183,11 +180,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 150, 
          "faulty": "final double atol=getAbsoluteAccuracy();", 
          "type": "InsertBefore", 
          "seed": "final double initial=getStartValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 174, 
          "faulty": "x0=x1;", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\n  return x1;\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1752/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:29:24.007986142 -0500\n@@ -147,7 +147,8 @@\n \n         // Get accuracies.\n         final double ftol = getFunctionValueAccuracy();\n-        final double atol = getAbsoluteAccuracy();\n+        final double initial = getStartValue();\n+\t\tfinal double atol = getAbsoluteAccuracy();\n         final double rtol = getRelativeAccuracy();\n \n         // Keep track of inverted intervals, meaning that the left bound is\n@@ -169,7 +170,11 @@\n \n             // Update the bounds with the new approximation.\n             if (f1 * fx < 0) {\n-                // The value of x1 has switched to the other bound, thus inverting\n+                if (FastMath.abs(x1 - x0) < FastMath.max(\n+\t\t\t\t\t\trtol * FastMath.abs(x1), atol)) {\n+\t\t\t\t\treturn x1;\n+\t\t\t\t}\n+\t\t\t\t// The value of x1 has switched to the other bound, thus inverting\n                 // the interval.\n                 x0 = x1;\n                 f0 = f1;\n@@ -183,11 +188,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingB=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "if (f1 == 0.0) {\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "InsertBefore", 
          "seed": "double initial=getStartValue();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_224/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:16:38.941864459 -0500\n@@ -132,7 +132,8 @@\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n+        double initial = getStartValue();\n+\t\t// If one of the bounds is the exact root, return it. Since these are\n         // not under-approximations or over-approximations, we can return them\n         // regardless of the allowed solutions.\n         if (f0 == 0.0) {\n@@ -183,11 +184,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingB=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double y1=computeObjectiveValue(x1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Delete", 
          "seed": "double min=getMin();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 133, 
          "faulty": "double f1=computeObjectiveValue(x1);", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_290/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:17:10.166836057 -0500\n@@ -130,7 +130,8 @@\n         double x0 = getMin();\n         double x1 = getMax();\n         double f0 = computeObjectiveValue(x0);\n-        double f1 = computeObjectiveValue(x1);\n+        final UnivariateRealSolver solver = new BrentSolver();\n+\t\tdouble f1 = computeObjectiveValue(x1);\n \n         // If one of the bounds is the exact root, return it. Since these are\n         // not under-approximations or over-approximations, we can return them\n@@ -183,11 +184,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +233,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    ;\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 132, 
          "faulty": "double f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "final double relativeAccuracy=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "this.method=method;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_444/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:18:29.321227926 -0500\n@@ -129,7 +129,8 @@\n         // Get initial solution\n         double x0 = getMin();\n         double x1 = getMax();\n-        double f0 = computeObjectiveValue(x0);\n+        int agingA = 0;\n+\t\tdouble f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n         // If one of the bounds is the exact root, return it. Since these are\n@@ -185,8 +186,24 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n+                        final double relativeAccuracy = getRelativeAccuracy();\n+                        if (FastMath.abs(x1 - x0) < FastMath.max(rtol\n+\t\t\t\t\t\t\t\t* FastMath.abs(x1), atol)) {\n+\t\t\t\t\t\t\tswitch (allowed) {\n+\t\t\t\t\t\t\tcase ANY_SIDE:\n+\t\t\t\t\t\t\t\treturn x1;\n+\t\t\t\t\t\t\tcase LEFT_SIDE:\n+\t\t\t\t\t\t\t\treturn inverted ? x1 : x0;\n+\t\t\t\t\t\t\tcase RIGHT_SIDE:\n+\t\t\t\t\t\t\t\treturn inverted ? x0 : x1;\n+\t\t\t\t\t\t\tcase BELOW_SIDE:\n+\t\t\t\t\t\t\t\treturn (f1 <= 0) ? x1 : x0;\n+\t\t\t\t\t\t\tcase ABOVE_SIDE:\n+\t\t\t\t\t\t\t\treturn (f1 >= 0) ? x1 : x0;\n+\t\t\t\t\t\t\tdefault:\n+\t\t\t\t\t\t\t\tthrow new MathInternalError();\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n                     }\n                     break;\n                 default:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 150, 
          "faulty": "final double atol=getAbsoluteAccuracy();", 
          "type": "InsertBefore", 
          "seed": "final double initial=getStartValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double initial=getStartValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1309/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:26:00.390097938 -0500\n@@ -147,7 +147,8 @@\n \n         // Get accuracies.\n         final double ftol = getFunctionValueAccuracy();\n-        final double atol = getAbsoluteAccuracy();\n+        final double initial = getStartValue();\n+\t\tfinal double atol = getAbsoluteAccuracy();\n         final double rtol = getRelativeAccuracy();\n \n         // Keep track of inverted intervals, meaning that the left bound is\n@@ -183,11 +184,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 161, 
          "faulty": "final double fx=computeObjectiveValue(x);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 151, 
          "faulty": "final double rtol=getRelativeAccuracy();", 
          "type": "InsertBefore", 
          "seed": "if (f1 == 0.0) {\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "double x0=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java", 
          "line": 371, 
          "faulty": "if (function == null) {\n  throw new NullArgumentException(LocalizedFormats.FUNCTION);\n}", 
          "type": "Delete", 
          "seed": "return doSolve();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 175, 
          "faulty": "f0=f1;", 
          "type": "InsertBefore", 
          "seed": "x1=x;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1552/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:27:47.017220977 -0500\n@@ -121,7 +121,8 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        double x2 = max;\n+\t\treturn solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n     /** {@inheritDoc} */\n@@ -132,23 +133,16 @@\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n         // Get accuracies.\n         final double ftol = getFunctionValueAccuracy();\n         final double atol = getAbsoluteAccuracy();\n-        final double rtol = getRelativeAccuracy();\n+        if (f1 == 0.0) {\n+\t\t\treturn x1;\n+\t\t}\n+\t\tfinal double rtol = getRelativeAccuracy();\n \n         // Keep track of inverted intervals, meaning that the left bound is\n         // larger than the right bound.\n@@ -158,7 +152,8 @@\n         while (true) {\n             // Calculate the next approximation.\n             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n-            final double fx = computeObjectiveValue(x);\n+            int start = 0;\n+\t\t\tfinal double fx = computeObjectiveValue(x);\n \n             // If the new approximation is the exact root, return it. Since\n             // this is not an under-approximation or an over-approximation,\n@@ -172,7 +167,8 @@\n                 // The value of x1 has switched to the other bound, thus inverting\n                 // the interval.\n                 x0 = x1;\n-                f0 = f1;\n+                x1 = x;\n+\t\t\t\tf0 = f1;\n                 inverted = !inverted;\n             } else {\n                 switch (method) {\n@@ -183,11 +179,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +228,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-02 11:55:31.845022991 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1552/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-02 12:27:47.017220977 -0500\n@@ -368,9 +368,6 @@\n     public static void verifyBracketing(UnivariateRealFunction function,\n                                         final double lower,\n                                         final double upper) {\n-        if (function == null) {\n-            throw new NullArgumentException(LocalizedFormats.FUNCTION);\n-        }\n         verifyInterval(lower, upper);\n         if (!isBracketing(function, lower, upper)) {\n             throw new NoBracketingException(lower, upper,\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Delete", 
          "seed": "double f0=computeObjectiveValue(x0);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_886/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:22:32.604164477 -0500\n@@ -121,7 +121,8 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        double x2 = max;\n+\t\treturn solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n     /** {@inheritDoc} */\n@@ -183,11 +184,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +233,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    ;\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingB=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double y1=computeObjectiveValue(x1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 150, 
          "faulty": "final double atol=getAbsoluteAccuracy();", 
          "type": "InsertBefore", 
          "seed": "int agingB=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "final double relativeAccuracy=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "this.method=method;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_474/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:18:48.877805629 -0500\n@@ -147,7 +147,8 @@\n \n         // Get accuracies.\n         final double ftol = getFunctionValueAccuracy();\n-        final double atol = getAbsoluteAccuracy();\n+        int agingB = 0;\n+\t\tfinal double atol = getAbsoluteAccuracy();\n         final double rtol = getRelativeAccuracy();\n \n         // Keep track of inverted intervals, meaning that the left bound is\n@@ -183,11 +184,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double initial=getStartValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 161, 
          "faulty": "final double fx=computeObjectiveValue(x);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_979/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:23:21.297506596 -0500\n@@ -158,7 +158,8 @@\n         while (true) {\n             // Calculate the next approximation.\n             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n-            final double fx = computeObjectiveValue(x);\n+            int start = 0;\n+\t\t\tfinal double fx = computeObjectiveValue(x);\n \n             // If the new approximation is the exact root, return it. Since\n             // this is not an under-approximation or an over-approximation,\n@@ -183,11 +184,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1558/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:27:49.449291070 -0500\n@@ -132,16 +132,6 @@\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -183,11 +173,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    int agingA = 0;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +222,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 116, 
          "faulty": "this.allowed=allowedSolution;", 
          "type": "InsertBefore", 
          "seed": "final double functionValueAccuracy=getFunctionValueAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "f0=f1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_966/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:23:15.245340343 -0500\n@@ -113,7 +113,8 @@\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue,\n                         final AllowedSolution allowedSolution) {\n-        this.allowed = allowedSolution;\n+        final double functionValueAccuracy = getFunctionValueAccuracy();\n+\t\tthis.allowed = allowedSolution;\n         return super.solve(maxEval, f, min, max, startValue);\n     }\n \n@@ -138,10 +139,6 @@\n         if (f0 == 0.0) {\n             return x0;\n         }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -185,8 +182,31 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n+                        if (f1 * fx < 0) {\n+\t\t\t\t\t\t\tx0 = x1;\n+\t\t\t\t\t\t\tf0 = f1;\n+\t\t\t\t\t\t\tinverted = !inverted;\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tswitch (method) {\n+\t\t\t\t\t\t\tcase ILLINOIS:\n+\t\t\t\t\t\t\t\tf0 *= 0.5;\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\tcase PEGASUS:\n+\t\t\t\t\t\t\t\tf0 *= f1 / (f1 + fx);\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\tcase REGULA_FALSI:\n+\t\t\t\t\t\t\t\tif (x == x1) {\n+\t\t\t\t\t\t\t\t\tx0 = 0.5 * (x0 + x1 - FastMath.max(rtol\n+\t\t\t\t\t\t\t\t\t\t\t* FastMath.abs(x1), atol));\n+\t\t\t\t\t\t\t\t\tf0 = computeObjectiveValue(x0);\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\tdefault:\n+\t\t\t\t\t\t\t\tthrow new MathInternalError();\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+                        f0 = f1;\n+\t\t\t\t\t\tf0 = computeObjectiveValue(x0);\n                     }\n                     break;\n                 default:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "final double t=getAbsoluteAccuracy();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1229/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:25:12.068643017 -0500\n@@ -121,7 +121,8 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        double x2 = max;\n+\t\treturn solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n     /** {@inheritDoc} */\n@@ -132,12 +133,6 @@\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n         if (f1 == 0.0) {\n             return x1;\n         }\n@@ -183,11 +178,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 174, 
          "faulty": "x0=x1;", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\n  return x1;\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1687/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:28:52.731100674 -0500\n@@ -138,10 +138,6 @@\n         if (f0 == 0.0) {\n             return x0;\n         }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -169,7 +165,11 @@\n \n             // Update the bounds with the new approximation.\n             if (f1 * fx < 0) {\n-                // The value of x1 has switched to the other bound, thus inverting\n+                if (FastMath.abs(x1 - x0) < FastMath.max(\n+\t\t\t\t\t\trtol * FastMath.abs(x1), atol)) {\n+\t\t\t\t\treturn x1;\n+\t\t\t\t}\n+\t\t\t\t// The value of x1 has switched to the other bound, thus inverting\n                 // the interval.\n                 x0 = x1;\n                 f0 = f1;\n@@ -183,11 +183,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 161, 
          "faulty": "final double fx=computeObjectiveValue(x);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1343/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:26:16.470575981 -0500\n@@ -132,12 +132,6 @@\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n         if (f1 == 0.0) {\n             return x1;\n         }\n@@ -158,7 +152,8 @@\n         while (true) {\n             // Calculate the next approximation.\n             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n-            final double fx = computeObjectiveValue(x);\n+            int start = 0;\n+\t\t\tfinal double fx = computeObjectiveValue(x);\n \n             // If the new approximation is the exact root, return it. Since\n             // this is not an under-approximation or an over-approximation,\n@@ -183,11 +178,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +227,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 161, 
          "faulty": "final double fx=computeObjectiveValue(x);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1600/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:28:08.153828718 -0500\n@@ -132,12 +132,6 @@\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n         if (f1 == 0.0) {\n             return x1;\n         }\n@@ -158,7 +152,8 @@\n         while (true) {\n             // Calculate the next approximation.\n             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n-            final double fx = computeObjectiveValue(x);\n+            int start = 0;\n+\t\t\tfinal double fx = computeObjectiveValue(x);\n \n             // If the new approximation is the exact root, return it. Since\n             // this is not an under-approximation or an over-approximation,\n@@ -183,11 +178,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    int agingA = 0;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +227,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 161, 
          "faulty": "final double fx=computeObjectiveValue(x);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 151, 
          "faulty": "final double rtol=getRelativeAccuracy();", 
          "type": "InsertBefore", 
          "seed": "if (f1 == 0.0) {\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 151, 
          "faulty": "final double rtol=getRelativeAccuracy();", 
          "type": "InsertBefore", 
          "seed": "if (f1 == 0.0) {\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "double x0=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "final double absoluteAccuracy=getAbsoluteAccuracy();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1587/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:28:02.985680412 -0500\n@@ -132,12 +132,6 @@\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n         if (f1 == 0.0) {\n             return x1;\n         }\n@@ -148,7 +142,13 @@\n         // Get accuracies.\n         final double ftol = getFunctionValueAccuracy();\n         final double atol = getAbsoluteAccuracy();\n-        final double rtol = getRelativeAccuracy();\n+        if (f1 == 0.0) {\n+\t\t\treturn x1;\n+\t\t}\n+\t\tif (f1 == 0.0) {\n+\t\t\treturn x1;\n+\t\t}\n+\t\tfinal double rtol = getRelativeAccuracy();\n \n         // Keep track of inverted intervals, meaning that the left bound is\n         // larger than the right bound.\n@@ -158,7 +158,8 @@\n         while (true) {\n             // Calculate the next approximation.\n             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n-            final double fx = computeObjectiveValue(x);\n+            int start = 0;\n+\t\t\tfinal double fx = computeObjectiveValue(x);\n \n             // If the new approximation is the exact root, return it. Since\n             // this is not an under-approximation or an over-approximation,\n@@ -183,11 +184,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1538/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:27:40.245025562 -0500\n@@ -132,12 +132,6 @@\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n         if (f1 == 0.0) {\n             return x1;\n         }\n@@ -183,11 +177,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    int agingA = 0;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +226,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingB=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double y1=computeObjectiveValue(x1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 150, 
          "faulty": "final double atol=getAbsoluteAccuracy();", 
          "type": "InsertBefore", 
          "seed": "int agingB=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "inverted=!inverted;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "Complex oldz=new Complex(Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_863/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:22:22.807893134 -0500\n@@ -121,7 +121,8 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        double x2 = max;\n+\t\treturn solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n     /** {@inheritDoc} */\n@@ -138,16 +139,13 @@\n         if (f0 == 0.0) {\n             return x0;\n         }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n         // Get accuracies.\n         final double ftol = getFunctionValueAccuracy();\n-        final double atol = getAbsoluteAccuracy();\n+        int agingB = 0;\n+\t\tfinal double atol = getAbsoluteAccuracy();\n         final double rtol = getRelativeAccuracy();\n \n         // Keep track of inverted intervals, meaning that the left bound is\n@@ -183,11 +181,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double initial=getStartValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 161, 
          "faulty": "final double fx=computeObjectiveValue(x);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_946/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:23:06.081088310 -0500\n@@ -121,7 +121,8 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        double x2 = max;\n+\t\treturn solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n     /** {@inheritDoc} */\n@@ -158,7 +159,8 @@\n         while (true) {\n             // Calculate the next approximation.\n             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n-            final double fx = computeObjectiveValue(x);\n+            int start = 0;\n+\t\t\tfinal double fx = computeObjectiveValue(x);\n \n             // If the new approximation is the exact root, return it. Since\n             // this is not an under-approximation or an over-approximation,\n@@ -183,11 +185,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double initial=getStartValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 161, 
          "faulty": "final double fx=computeObjectiveValue(x);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double initial=getStartValue();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1059/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:23:55.854453148 -0500\n@@ -158,7 +158,8 @@\n         while (true) {\n             // Calculate the next approximation.\n             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n-            final double fx = computeObjectiveValue(x);\n+            int start = 0;\n+\t\t\tfinal double fx = computeObjectiveValue(x);\n \n             // If the new approximation is the exact root, return it. Since\n             // this is not an under-approximation or an over-approximation,\n@@ -183,11 +184,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 116, 
          "faulty": "this.allowed=allowedSolution;", 
          "type": "InsertBefore", 
          "seed": "final double functionValueAccuracy=getFunctionValueAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double initial=getStartValue();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1044/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:23:50.234299509 -0500\n@@ -113,7 +113,8 @@\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue,\n                         final AllowedSolution allowedSolution) {\n-        this.allowed = allowedSolution;\n+        final double functionValueAccuracy = getFunctionValueAccuracy();\n+\t\tthis.allowed = allowedSolution;\n         return super.solve(maxEval, f, min, max, startValue);\n     }\n \n@@ -138,10 +139,6 @@\n         if (f0 == 0.0) {\n             return x0;\n         }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -185,8 +182,48 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n+                        if (f1 * fx < 0) {\n+\t\t\t\t\t\t\tx0 = x1;\n+\t\t\t\t\t\t\tf0 = f1;\n+\t\t\t\t\t\t\tinverted = !inverted;\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tswitch (method) {\n+\t\t\t\t\t\t\tcase ILLINOIS:\n+\t\t\t\t\t\t\t\tf0 *= 0.5;\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\tcase PEGASUS:\n+\t\t\t\t\t\t\t\tf0 *= f1 / (f1 + fx);\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\tcase REGULA_FALSI:\n+\t\t\t\t\t\t\t\tif (x == x1) {\n+\t\t\t\t\t\t\t\t\tx0 = 0.5 * (x0 + x1 - FastMath.max(rtol\n+\t\t\t\t\t\t\t\t\t\t\t* FastMath.abs(x1), atol));\n+\t\t\t\t\t\t\t\t\tf0 = computeObjectiveValue(x0);\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\tdefault:\n+\t\t\t\t\t\t\t\tthrow new MathInternalError();\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+                        if (FastMath.abs(x1 - x0) < FastMath.max(rtol\n+\t\t\t\t\t\t\t\t* FastMath.abs(x1), atol)) {\n+\t\t\t\t\t\t\tswitch (allowed) {\n+\t\t\t\t\t\t\tcase ANY_SIDE:\n+\t\t\t\t\t\t\t\treturn x1;\n+\t\t\t\t\t\t\tcase LEFT_SIDE:\n+\t\t\t\t\t\t\t\treturn inverted ? x1 : x0;\n+\t\t\t\t\t\t\tcase RIGHT_SIDE:\n+\t\t\t\t\t\t\t\treturn inverted ? x0 : x1;\n+\t\t\t\t\t\t\tcase BELOW_SIDE:\n+\t\t\t\t\t\t\t\treturn (f1 <= 0) ? x1 : x0;\n+\t\t\t\t\t\t\tcase ABOVE_SIDE:\n+\t\t\t\t\t\t\t\treturn (f1 >= 0) ? x1 : x0;\n+\t\t\t\t\t\t\tdefault:\n+\t\t\t\t\t\t\t\tthrow new MathInternalError();\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tdouble initial = getStartValue();\n+\t\t\t\t\t\tf0 = computeObjectiveValue(x0);\n                     }\n                     break;\n                 default:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double initial=getStartValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1280/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:25:35.173342316 -0500\n@@ -121,7 +121,8 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        double x2 = max;\n+\t\treturn solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n     /** {@inheritDoc} */\n@@ -183,11 +184,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +233,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "double x2=0.5 * (x0 + x1);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1794/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:29:42.292501433 -0500\n@@ -132,12 +132,6 @@\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n         if (f1 == 0.0) {\n             return x1;\n         }\n@@ -183,11 +177,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    int agingA = 0;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +226,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 150, 
          "faulty": "final double atol=getAbsoluteAccuracy();", 
          "type": "InsertBefore", 
          "seed": "final double initial=getStartValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 161, 
          "faulty": "final double fx=computeObjectiveValue(x);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 151, 
          "faulty": "final double rtol=getRelativeAccuracy();", 
          "type": "InsertBefore", 
          "seed": "if (f1 == 0.0) {\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "Complex d2v=null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1618/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:28:20.942194915 -0500\n@@ -121,7 +121,8 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        double x2 = max;\n+\t\treturn solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n     /** {@inheritDoc} */\n@@ -132,12 +133,6 @@\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n         if (f1 == 0.0) {\n             return x1;\n         }\n@@ -147,8 +142,12 @@\n \n         // Get accuracies.\n         final double ftol = getFunctionValueAccuracy();\n-        final double atol = getAbsoluteAccuracy();\n-        final double rtol = getRelativeAccuracy();\n+        final double initial = getStartValue();\n+\t\tfinal double atol = getAbsoluteAccuracy();\n+        if (f1 == 0.0) {\n+\t\t\treturn x1;\n+\t\t}\n+\t\tfinal double rtol = getRelativeAccuracy();\n \n         // Keep track of inverted intervals, meaning that the left bound is\n         // larger than the right bound.\n@@ -158,7 +157,8 @@\n         while (true) {\n             // Calculate the next approximation.\n             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n-            final double fx = computeObjectiveValue(x);\n+            int start = 0;\n+\t\t\tfinal double fx = computeObjectiveValue(x);\n \n             // If the new approximation is the exact root, return it. Since\n             // this is not an under-approximation or an over-approximation,\n@@ -183,11 +183,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    int agingA = 0;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +232,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "throw new NullArgumentException(LocalizedFormats.FUNCTION);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_89/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:15:22.647452958 -0500\n@@ -183,11 +183,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "boolean inverted=false;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1817/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:29:53.240809208 -0500\n@@ -132,16 +132,6 @@\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -183,11 +173,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +222,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 161, 
          "faulty": "final double fx=computeObjectiveValue(x);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 151, 
          "faulty": "final double rtol=getRelativeAccuracy();", 
          "type": "InsertBefore", 
          "seed": "if (f1 == 0.0) {\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 150, 
          "faulty": "final double atol=getAbsoluteAccuracy();", 
          "type": "InsertBefore", 
          "seed": "final double initial=getStartValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1421/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:26:50.415576275 -0500\n@@ -121,7 +121,8 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        double x2 = max;\n+\t\treturn solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n     /** {@inheritDoc} */\n@@ -132,12 +133,6 @@\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n         if (f1 == 0.0) {\n             return x1;\n         }\n@@ -147,8 +142,12 @@\n \n         // Get accuracies.\n         final double ftol = getFunctionValueAccuracy();\n-        final double atol = getAbsoluteAccuracy();\n-        final double rtol = getRelativeAccuracy();\n+        final double initial = getStartValue();\n+\t\tfinal double atol = getAbsoluteAccuracy();\n+        if (f1 == 0.0) {\n+\t\t\treturn x1;\n+\t\t}\n+\t\tfinal double rtol = getRelativeAccuracy();\n \n         // Keep track of inverted intervals, meaning that the left bound is\n         // larger than the right bound.\n@@ -158,7 +157,8 @@\n         while (true) {\n             // Calculate the next approximation.\n             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n-            final double fx = computeObjectiveValue(x);\n+            int start = 0;\n+\t\t\tfinal double fx = computeObjectiveValue(x);\n \n             // If the new approximation is the exact root, return it. Since\n             // this is not an under-approximation or an over-approximation,\n@@ -183,11 +183,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +232,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double initial=getStartValue();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1013/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:23:34.717874733 -0500\n@@ -183,11 +183,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingB=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double y1=computeObjectiveValue(x1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Delete", 
          "seed": "double min=getMin();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 133, 
          "faulty": "double f1=computeObjectiveValue(x1);", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 198, 
          "faulty": "x1=x;", 
          "type": "InsertBefore", 
          "seed": "double x2=0.5 * (x0 + x1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "double y1=computeObjectiveValue(x1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 150, 
          "faulty": "final double atol=getAbsoluteAccuracy();", 
          "type": "InsertBefore", 
          "seed": "int agingB=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "inverted=!inverted;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Replace", 
          "seed": "final double t=getAbsoluteAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 150, 
          "faulty": "final double atol=getAbsoluteAccuracy();", 
          "type": "InsertBefore", 
          "seed": "double initial=getStartValue();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_399/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:18:00.784376152 -0500\n@@ -130,7 +130,8 @@\n         double x0 = getMin();\n         double x1 = getMax();\n         double f0 = computeObjectiveValue(x0);\n-        double f1 = computeObjectiveValue(x1);\n+        final UnivariateRealSolver solver = new BrentSolver();\n+\t\tdouble f1 = computeObjectiveValue(x1);\n \n         // If one of the bounds is the exact root, return it. Since these are\n         // not under-approximations or over-approximations, we can return them\n@@ -138,16 +139,16 @@\n         if (f0 == 0.0) {\n             return x0;\n         }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n+        final double t = getAbsoluteAccuracy();\n \n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n         // Get accuracies.\n         final double ftol = getFunctionValueAccuracy();\n-        final double atol = getAbsoluteAccuracy();\n+        int agingB = 0;\n+\t\tdouble initial = getStartValue();\n+\t\tfinal double atol = getAbsoluteAccuracy();\n         final double rtol = getRelativeAccuracy();\n \n         // Keep track of inverted intervals, meaning that the left bound is\n@@ -183,18 +184,15 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n                     throw new MathInternalError();\n                 }\n             }\n-            // Update from [x0, x1] to [x0, x].\n+            double x2 = 0.5 * (x0 + x1);\n+\t\t\t// Update from [x0, x1] to [x0, x].\n             x1 = x;\n             f1 = fx;\n \n@@ -236,7 +234,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    ;\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "final double absoluteAccuracy=getAbsoluteAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "double x0=getMin();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "double x0=getMin();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "final double x=x1 - ((f1 * (x1 - x0)) / (f1 - f0));"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1672/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:28:45.926907319 -0500\n@@ -132,16 +132,6 @@\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -183,11 +173,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +222,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingB=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "final double max=getMax();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 150, 
          "faulty": "final double atol=getAbsoluteAccuracy();", 
          "type": "InsertBefore", 
          "seed": "final double absoluteAccuracy=getAbsoluteAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "double y1=computeObjectiveValue(x1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 150, 
          "faulty": "final double atol=getAbsoluteAccuracy();", 
          "type": "InsertBefore", 
          "seed": "int agingB=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "inverted=!inverted;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Replace", 
          "seed": "final double t=getAbsoluteAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 150, 
          "faulty": "final double atol=getAbsoluteAccuracy();", 
          "type": "InsertBefore", 
          "seed": "double initial=getStartValue();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_407/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:18:05.028503532 -0500\n@@ -138,16 +138,17 @@\n         if (f0 == 0.0) {\n             return x0;\n         }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n+        final double t = getAbsoluteAccuracy();\n \n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n         // Get accuracies.\n         final double ftol = getFunctionValueAccuracy();\n-        final double atol = getAbsoluteAccuracy();\n+        final double absoluteAccuracy = getAbsoluteAccuracy();\n+\t\tint agingB = 0;\n+\t\tdouble initial = getStartValue();\n+\t\tfinal double atol = getAbsoluteAccuracy();\n         final double rtol = getRelativeAccuracy();\n \n         // Keep track of inverted intervals, meaning that the left bound is\n@@ -183,11 +184,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 161, 
          "faulty": "final double fx=computeObjectiveValue(x);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1458/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:27:06.720052827 -0500\n@@ -121,7 +121,8 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        double x2 = max;\n+\t\treturn solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n     /** {@inheritDoc} */\n@@ -132,16 +133,6 @@\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -158,7 +149,8 @@\n         while (true) {\n             // Calculate the next approximation.\n             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n-            final double fx = computeObjectiveValue(x);\n+            int start = 0;\n+\t\t\tfinal double fx = computeObjectiveValue(x);\n \n             // If the new approximation is the exact root, return it. Since\n             // this is not an under-approximation or an over-approximation,\n@@ -183,11 +175,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    int agingA = 0;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +224,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double y1=computeObjectiveValue(x1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "incrementEvaluationCount();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_376/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:17:49.572038397 -0500\n@@ -185,8 +185,10 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n+                        incrementEvaluationCount();\n+\t\t\t\t\t\tx0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n+                        double y1 = computeObjectiveValue(x1);\n+\t\t\t\t\t\tf0 = computeObjectiveValue(x0);\n                     }\n                     break;\n                 default:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingB=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "final double relativeAccuracy=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "this.method=method;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_416/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:18:10.000652443 -0500\n@@ -185,8 +185,24 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n+                        final double relativeAccuracy = getRelativeAccuracy();\n+                        if (FastMath.abs(x1 - x0) < FastMath.max(rtol\n+\t\t\t\t\t\t\t\t* FastMath.abs(x1), atol)) {\n+\t\t\t\t\t\t\tswitch (allowed) {\n+\t\t\t\t\t\t\tcase ANY_SIDE:\n+\t\t\t\t\t\t\t\treturn x1;\n+\t\t\t\t\t\t\tcase LEFT_SIDE:\n+\t\t\t\t\t\t\t\treturn inverted ? x1 : x0;\n+\t\t\t\t\t\t\tcase RIGHT_SIDE:\n+\t\t\t\t\t\t\t\treturn inverted ? x0 : x1;\n+\t\t\t\t\t\t\tcase BELOW_SIDE:\n+\t\t\t\t\t\t\t\treturn (f1 <= 0) ? x1 : x0;\n+\t\t\t\t\t\t\tcase ABOVE_SIDE:\n+\t\t\t\t\t\t\t\treturn (f1 >= 0) ? x1 : x0;\n+\t\t\t\t\t\t\tdefault:\n+\t\t\t\t\t\t\t\tthrow new MathInternalError();\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n                     }\n                     break;\n                 default:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double y1=computeObjectiveValue(x1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 155, 
          "faulty": "boolean inverted=false;", 
          "type": "InsertBefore", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 132, 
          "faulty": "double f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "final double startValue=getStartValue();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_547/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:19:26.118893601 -0500\n@@ -121,7 +121,8 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        double x2 = max;\n+\t\treturn solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n     /** {@inheritDoc} */\n@@ -129,7 +130,8 @@\n         // Get initial solution\n         double x0 = getMin();\n         double x1 = getMax();\n-        double f0 = computeObjectiveValue(x0);\n+        final double startValue = getStartValue();\n+\t\tdouble f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n         // If one of the bounds is the exact root, return it. Since these are\n@@ -150,7 +152,8 @@\n         final double atol = getAbsoluteAccuracy();\n         final double rtol = getRelativeAccuracy();\n \n-        // Keep track of inverted intervals, meaning that the left bound is\n+        int numIterations = 0;\n+\t\t// Keep track of inverted intervals, meaning that the left bound is\n         // larger than the right bound.\n         boolean inverted = false;\n \n@@ -183,11 +186,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 161, 
          "faulty": "final double fx=computeObjectiveValue(x);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 151, 
          "faulty": "final double rtol=getRelativeAccuracy();", 
          "type": "InsertBefore", 
          "seed": "if (f1 == 0.0) {\n  return x1;\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1315/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:26:02.826170543 -0500\n@@ -132,12 +132,6 @@\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n         if (f1 == 0.0) {\n             return x1;\n         }\n@@ -148,7 +142,10 @@\n         // Get accuracies.\n         final double ftol = getFunctionValueAccuracy();\n         final double atol = getAbsoluteAccuracy();\n-        final double rtol = getRelativeAccuracy();\n+        if (f1 == 0.0) {\n+\t\t\treturn x1;\n+\t\t}\n+\t\tfinal double rtol = getRelativeAccuracy();\n \n         // Keep track of inverted intervals, meaning that the left bound is\n         // larger than the right bound.\n@@ -158,7 +155,8 @@\n         while (true) {\n             // Calculate the next approximation.\n             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n-            final double fx = computeObjectiveValue(x);\n+            int start = 0;\n+\t\t\tfinal double fx = computeObjectiveValue(x);\n \n             // If the new approximation is the exact root, return it. Since\n             // this is not an under-approximation or an over-approximation,\n@@ -183,11 +181,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +230,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_989/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:23:24.913605859 -0500\n@@ -121,7 +121,8 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        double x2 = max;\n+\t\treturn solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n     /** {@inheritDoc} */\n@@ -183,11 +184,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double y1=computeObjectiveValue(x1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 150, 
          "faulty": "final double atol=getAbsoluteAccuracy();", 
          "type": "InsertBefore", 
          "seed": "int agingB=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "inverted=!inverted;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "Complex oldz=new Complex(Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double y1=computeObjectiveValue(x1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_723/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:21:10.693879370 -0500\n@@ -138,16 +138,13 @@\n         if (f0 == 0.0) {\n             return x0;\n         }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n         // Get accuracies.\n         final double ftol = getFunctionValueAccuracy();\n-        final double atol = getAbsoluteAccuracy();\n+        int agingB = 0;\n+\t\tfinal double atol = getAbsoluteAccuracy();\n         final double rtol = getRelativeAccuracy();\n \n         // Keep track of inverted intervals, meaning that the left bound is\n@@ -183,11 +180,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "final double max=getMax();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "final double relativeAccuracy=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "incrementEvaluationCount();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_321/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:17:24.919289113 -0500\n@@ -138,10 +138,6 @@\n         if (f0 == 0.0) {\n             return x0;\n         }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -185,8 +181,26 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n+                        incrementEvaluationCount();\n+\t\t\t\t\t\tfinal double relativeAccuracy = getRelativeAccuracy();\n+                        if (FastMath.abs(x1 - x0) < FastMath.max(rtol\n+\t\t\t\t\t\t\t\t* FastMath.abs(x1), atol)) {\n+\t\t\t\t\t\t\tswitch (allowed) {\n+\t\t\t\t\t\t\tcase ANY_SIDE:\n+\t\t\t\t\t\t\t\treturn x1;\n+\t\t\t\t\t\t\tcase LEFT_SIDE:\n+\t\t\t\t\t\t\t\treturn inverted ? x1 : x0;\n+\t\t\t\t\t\t\tcase RIGHT_SIDE:\n+\t\t\t\t\t\t\t\treturn inverted ? x0 : x1;\n+\t\t\t\t\t\t\tcase BELOW_SIDE:\n+\t\t\t\t\t\t\t\treturn (f1 <= 0) ? x1 : x0;\n+\t\t\t\t\t\t\tcase ABOVE_SIDE:\n+\t\t\t\t\t\t\t\treturn (f1 >= 0) ? x1 : x0;\n+\t\t\t\t\t\t\tdefault:\n+\t\t\t\t\t\t\t\tthrow new MathInternalError();\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tf0 = computeObjectiveValue(x0);\n                     }\n                     break;\n                 default:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "final double max=getMax();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "incrementEvaluationCount();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_142/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:15:48.876281729 -0500\n@@ -138,10 +138,6 @@\n         if (f0 == 0.0) {\n             return x0;\n         }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -185,7 +181,8 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n+                        incrementEvaluationCount();\n+\t\t\t\t\t\tfinal double eps = getRelativeAccuracy();\n                         f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingB=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "final double max=getMax();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "f0*=0.5;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_604/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:19:54.079701091 -0500\n@@ -138,10 +138,6 @@\n         if (f0 == 0.0) {\n             return x0;\n         }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -183,11 +179,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double initial=getStartValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 161, 
          "faulty": "final double fx=computeObjectiveValue(x);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1251/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:25:21.876940735 -0500\n@@ -121,7 +121,8 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        double x2 = max;\n+\t\treturn solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n     /** {@inheritDoc} */\n@@ -132,12 +133,6 @@\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n         if (f1 == 0.0) {\n             return x1;\n         }\n@@ -158,7 +153,8 @@\n         while (true) {\n             // Calculate the next approximation.\n             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n-            final double fx = computeObjectiveValue(x);\n+            int start = 0;\n+\t\t\tfinal double fx = computeObjectiveValue(x);\n \n             // If the new approximation is the exact root, return it. Since\n             // this is not an under-approximation or an over-approximation,\n@@ -183,11 +179,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +228,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingB=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "final double max=getMax();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "final double relativeAccuracy=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "this.method=method;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_344/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:17:34.155570946 -0500\n@@ -138,10 +138,6 @@\n         if (f0 == 0.0) {\n             return x0;\n         }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -183,11 +179,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double y1=computeObjectiveValue(x1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_871/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:22:25.915979277 -0500\n@@ -183,11 +183,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "double x2=0.5 * (x0 + x1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double x0=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1839/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:30:03.109086154 -0500\n@@ -132,12 +132,6 @@\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n         if (f1 == 0.0) {\n             return x1;\n         }\n@@ -183,11 +177,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    int agingA = 0;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +226,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 161, 
          "faulty": "final double fx=computeObjectiveValue(x);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "boolean inverted=false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double x1=getMax();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1765/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:29:29.388137936 -0500\n@@ -138,10 +138,6 @@\n         if (f0 == 0.0) {\n             return x0;\n         }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -158,7 +154,8 @@\n         while (true) {\n             // Calculate the next approximation.\n             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n-            final double fx = computeObjectiveValue(x);\n+            int start = 0;\n+\t\t\tfinal double fx = computeObjectiveValue(x);\n \n             // If the new approximation is the exact root, return it. Since\n             // this is not an under-approximation or an over-approximation,\n@@ -183,11 +180,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +229,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 161, 
          "faulty": "final double fx=computeObjectiveValue(x);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 150, 
          "faulty": "final double atol=getAbsoluteAccuracy();", 
          "type": "InsertBefore", 
          "seed": "final double initial=getStartValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "final double absoluteAccuracy=getAbsoluteAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "double x0=getMin();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "boolean inverted=false;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1841/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:30:03.729103540 -0500\n@@ -138,16 +138,13 @@\n         if (f0 == 0.0) {\n             return x0;\n         }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n         // Get accuracies.\n         final double ftol = getFunctionValueAccuracy();\n-        final double atol = getAbsoluteAccuracy();\n+        final double initial = getStartValue();\n+\t\tfinal double atol = getAbsoluteAccuracy();\n         final double rtol = getRelativeAccuracy();\n \n         // Keep track of inverted intervals, meaning that the left bound is\n@@ -158,7 +155,8 @@\n         while (true) {\n             // Calculate the next approximation.\n             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n-            final double fx = computeObjectiveValue(x);\n+            int start = 0;\n+\t\t\tfinal double fx = computeObjectiveValue(x);\n \n             // If the new approximation is the exact root, return it. Since\n             // this is not an under-approximation or an over-approximation,\n@@ -183,11 +181,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +230,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingB=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double y1=computeObjectiveValue(x1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 150, 
          "faulty": "final double atol=getAbsoluteAccuracy();", 
          "type": "InsertBefore", 
          "seed": "int agingB=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "inverted=!inverted;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "Complex oldz=new Complex(Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double y1=computeObjectiveValue(x1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "final double relativeAccuracy=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "this.method=method;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_431/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:18:23.041041402 -0500\n@@ -138,16 +138,13 @@\n         if (f0 == 0.0) {\n             return x0;\n         }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n         // Get accuracies.\n         final double ftol = getFunctionValueAccuracy();\n-        final double atol = getAbsoluteAccuracy();\n+        int agingB = 0;\n+\t\tfinal double atol = getAbsoluteAccuracy();\n         final double rtol = getRelativeAccuracy();\n \n         // Keep track of inverted intervals, meaning that the left bound is\n@@ -183,11 +180,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "final double max=getMax();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_114/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:15:35.179850723 -0500\n@@ -138,10 +138,6 @@\n         if (f0 == 0.0) {\n             return x0;\n         }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -185,7 +181,7 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n+                        final double eps = getRelativeAccuracy();\n                         f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "f0=f1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1110/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:24:18.091059967 -0500\n@@ -185,8 +185,31 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n+                        if (f1 * fx < 0) {\n+\t\t\t\t\t\t\tx0 = x1;\n+\t\t\t\t\t\t\tf0 = f1;\n+\t\t\t\t\t\t\tinverted = !inverted;\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tswitch (method) {\n+\t\t\t\t\t\t\tcase ILLINOIS:\n+\t\t\t\t\t\t\t\tf0 *= 0.5;\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\tcase PEGASUS:\n+\t\t\t\t\t\t\t\tf0 *= f1 / (f1 + fx);\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\tcase REGULA_FALSI:\n+\t\t\t\t\t\t\t\tif (x == x1) {\n+\t\t\t\t\t\t\t\t\tx0 = 0.5 * (x0 + x1 - FastMath.max(rtol\n+\t\t\t\t\t\t\t\t\t\t\t* FastMath.abs(x1), atol));\n+\t\t\t\t\t\t\t\t\tf0 = computeObjectiveValue(x0);\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\tdefault:\n+\t\t\t\t\t\t\t\tthrow new MathInternalError();\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+                        f0 = f1;\n+\t\t\t\t\t\tf0 = computeObjectiveValue(x0);\n                     }\n                     break;\n                 default:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double initial=getStartValue();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1120/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:24:22.419177887 -0500\n@@ -121,7 +121,8 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        double x2 = max;\n+\t\treturn solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n     /** {@inheritDoc} */\n@@ -183,11 +184,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double initial=getStartValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 161, 
          "faulty": "final double fx=computeObjectiveValue(x);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "final double t=getAbsoluteAccuracy();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1320/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:26:05.342245461 -0500\n@@ -121,7 +121,8 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        double x2 = max;\n+\t\treturn solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n     /** {@inheritDoc} */\n@@ -158,7 +159,8 @@\n         while (true) {\n             // Calculate the next approximation.\n             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n-            final double fx = computeObjectiveValue(x);\n+            int start = 0;\n+\t\t\tfinal double fx = computeObjectiveValue(x);\n \n             // If the new approximation is the exact root, return it. Since\n             // this is not an under-approximation or an over-approximation,\n@@ -183,11 +185,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +234,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double initial=getStartValue();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1055/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:23:53.942400891 -0500\n@@ -121,7 +121,8 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        double x2 = max;\n+\t\treturn solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n     /** {@inheritDoc} */\n@@ -183,11 +184,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingB=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double y1=computeObjectiveValue(x1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 150, 
          "faulty": "final double atol=getAbsoluteAccuracy();", 
          "type": "InsertBefore", 
          "seed": "int agingB=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "inverted=!inverted;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "Complex oldz=new Complex(Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double y1=computeObjectiveValue(x1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_626/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:20:03.907983196 -0500\n@@ -138,16 +138,13 @@\n         if (f0 == 0.0) {\n             return x0;\n         }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n         // Get accuracies.\n         final double ftol = getFunctionValueAccuracy();\n-        final double atol = getAbsoluteAccuracy();\n+        int agingB = 0;\n+\t\tfinal double atol = getAbsoluteAccuracy();\n         final double rtol = getRelativeAccuracy();\n \n         // Keep track of inverted intervals, meaning that the left bound is\n@@ -183,11 +180,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double initial=getStartValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 116, 
          "faulty": "this.allowed=allowedSolution;", 
          "type": "InsertBefore", 
          "seed": "final double functionValueAccuracy=getFunctionValueAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double initial=getStartValue();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1104/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:24:15.710995096 -0500\n@@ -113,7 +113,8 @@\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue,\n                         final AllowedSolution allowedSolution) {\n-        this.allowed = allowedSolution;\n+        final double functionValueAccuracy = getFunctionValueAccuracy();\n+\t\tthis.allowed = allowedSolution;\n         return super.solve(maxEval, f, min, max, startValue);\n     }\n \n@@ -138,10 +139,6 @@\n         if (f0 == 0.0) {\n             return x0;\n         }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -183,11 +180,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 116, 
          "faulty": "this.allowed=allowedSolution;", 
          "type": "InsertBefore", 
          "seed": "final double functionValueAccuracy=getFunctionValueAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "f0=f1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "final double initial=getStartValue();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1019/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:23:37.741957591 -0500\n@@ -113,7 +113,8 @@\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue,\n                         final AllowedSolution allowedSolution) {\n-        this.allowed = allowedSolution;\n+        final double functionValueAccuracy = getFunctionValueAccuracy();\n+\t\tthis.allowed = allowedSolution;\n         return super.solve(maxEval, f, min, max, startValue);\n     }\n \n@@ -121,7 +122,8 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        double x2 = max;\n+\t\treturn solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n     /** {@inheritDoc} */\n@@ -138,10 +140,6 @@\n         if (f0 == 0.0) {\n             return x0;\n         }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -185,8 +183,8 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n+                        f0 = f1;\n+\t\t\t\t\t\tf0 = computeObjectiveValue(x0);\n                     }\n                     break;\n                 default:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 161, 
          "faulty": "final double fx=computeObjectiveValue(x);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1492/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:27:21.512483170 -0500\n@@ -132,12 +132,6 @@\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n         if (f1 == 0.0) {\n             return x1;\n         }\n@@ -158,7 +152,8 @@\n         while (true) {\n             // Calculate the next approximation.\n             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n-            final double fx = computeObjectiveValue(x);\n+            int start = 0;\n+\t\t\tfinal double fx = computeObjectiveValue(x);\n \n             // If the new approximation is the exact root, return it. Since\n             // this is not an under-approximation or an over-approximation,\n@@ -183,11 +178,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +227,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 161, 
          "faulty": "final double fx=computeObjectiveValue(x);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 151, 
          "faulty": "final double rtol=getRelativeAccuracy();", 
          "type": "InsertBefore", 
          "seed": "if (f1 == 0.0) {\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "final double absoluteAccuracy=getAbsoluteAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "double x0=getMin();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "double x0=getMin();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "final double x=x1 - ((f1 * (x1 - x0)) / (f1 - f0));"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "if (!inverted) {\n  return x1;\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1659/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:28:39.906736015 -0500\n@@ -121,7 +121,8 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        double x2 = max;\n+\t\treturn solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n     /** {@inheritDoc} */\n@@ -132,23 +133,16 @@\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n         // Get accuracies.\n         final double ftol = getFunctionValueAccuracy();\n         final double atol = getAbsoluteAccuracy();\n-        final double rtol = getRelativeAccuracy();\n+        if (f1 == 0.0) {\n+\t\t\treturn x1;\n+\t\t}\n+\t\tfinal double rtol = getRelativeAccuracy();\n \n         // Keep track of inverted intervals, meaning that the left bound is\n         // larger than the right bound.\n@@ -158,7 +152,8 @@\n         while (true) {\n             // Calculate the next approximation.\n             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n-            final double fx = computeObjectiveValue(x);\n+            int start = 0;\n+\t\t\tfinal double fx = computeObjectiveValue(x);\n \n             // If the new approximation is the exact root, return it. Since\n             // this is not an under-approximation or an over-approximation,\n@@ -183,11 +178,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +227,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingB=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "final double max=getMax();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 150, 
          "faulty": "final double atol=getAbsoluteAccuracy();", 
          "type": "InsertBefore", 
          "seed": "int agingB=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "inverted=!inverted;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_514/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:19:09.518410492 -0500\n@@ -138,16 +138,13 @@\n         if (f0 == 0.0) {\n             return x0;\n         }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n         // Get accuracies.\n         final double ftol = getFunctionValueAccuracy();\n-        final double atol = getAbsoluteAccuracy();\n+        int agingB = 0;\n+\t\tfinal double atol = getAbsoluteAccuracy();\n         final double rtol = getRelativeAccuracy();\n \n         // Keep track of inverted intervals, meaning that the left bound is\n@@ -183,11 +180,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingB=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingB=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "final double max=getMax();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 131, 
          "faulty": "double x1=getMax();", 
          "type": "InsertBefore", 
          "seed": "double min=getMin();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_593/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:19:48.667545369 -0500\n@@ -121,14 +121,16 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        double x2 = max;\n+\t\treturn solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n     /** {@inheritDoc} */\n     protected final double doSolve() {\n         // Get initial solution\n         double x0 = getMin();\n-        double x1 = getMax();\n+        double min = getMin();\n+\t\tdouble x1 = getMax();\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n@@ -138,10 +140,6 @@\n         if (f0 == 0.0) {\n             return x0;\n         }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -183,11 +181,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 132, 
          "faulty": "double f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "final double max=getMax();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "incrementEvaluationCount();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_95/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:15:25.815553825 -0500\n@@ -129,7 +129,8 @@\n         // Get initial solution\n         double x0 = getMin();\n         double x1 = getMax();\n-        double f0 = computeObjectiveValue(x0);\n+        int agingA = 0;\n+\t\tdouble f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n         // If one of the bounds is the exact root, return it. Since these are\n@@ -138,10 +139,6 @@\n         if (f0 == 0.0) {\n             return x0;\n         }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -185,7 +182,8 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n+                        incrementEvaluationCount();\n+\t\t\t\t\t\tfinal double eps = getRelativeAccuracy();\n                         f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double initial=getStartValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 161, 
          "faulty": "final double fx=computeObjectiveValue(x);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_883/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:22:31.400131153 -0500\n@@ -121,7 +121,8 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        double x2 = max;\n+\t\treturn solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n     /** {@inheritDoc} */\n@@ -158,7 +159,8 @@\n         while (true) {\n             // Calculate the next approximation.\n             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n-            final double fx = computeObjectiveValue(x);\n+            int start = 0;\n+\t\t\tfinal double fx = computeObjectiveValue(x);\n \n             // If the new approximation is the exact root, return it. Since\n             // this is not an under-approximation or an over-approximation,\n@@ -183,11 +185,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double y1=computeObjectiveValue(x1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 116, 
          "faulty": "this.allowed=allowedSolution;", 
          "type": "InsertBefore", 
          "seed": "final double functionValueAccuracy=getFunctionValueAccuracy();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_757/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:21:26.530324279 -0500\n@@ -113,7 +113,8 @@\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue,\n                         final AllowedSolution allowedSolution) {\n-        this.allowed = allowedSolution;\n+        final double functionValueAccuracy = getFunctionValueAccuracy();\n+\t\tthis.allowed = allowedSolution;\n         return super.solve(maxEval, f, min, max, startValue);\n     }\n \n@@ -185,8 +186,31 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n+                        if (f1 * fx < 0) {\n+\t\t\t\t\t\t\tx0 = x1;\n+\t\t\t\t\t\t\tf0 = f1;\n+\t\t\t\t\t\t\tinverted = !inverted;\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tswitch (method) {\n+\t\t\t\t\t\t\tcase ILLINOIS:\n+\t\t\t\t\t\t\t\tf0 *= 0.5;\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\tcase PEGASUS:\n+\t\t\t\t\t\t\t\tf0 *= f1 / (f1 + fx);\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\tcase REGULA_FALSI:\n+\t\t\t\t\t\t\t\tif (x == x1) {\n+\t\t\t\t\t\t\t\t\tx0 = 0.5 * (x0 + x1 - FastMath.max(rtol\n+\t\t\t\t\t\t\t\t\t\t\t* FastMath.abs(x1), atol));\n+\t\t\t\t\t\t\t\t\tf0 = computeObjectiveValue(x0);\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\tdefault:\n+\t\t\t\t\t\t\t\tthrow new MathInternalError();\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+                        double y1 = computeObjectiveValue(x1);\n+\t\t\t\t\t\tf0 = computeObjectiveValue(x0);\n                     }\n                     break;\n                 default:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 161, 
          "faulty": "final double fx=computeObjectiveValue(x);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 151, 
          "faulty": "final double rtol=getRelativeAccuracy();", 
          "type": "InsertBefore", 
          "seed": "if (f1 == 0.0) {\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 150, 
          "faulty": "final double atol=getAbsoluteAccuracy();", 
          "type": "InsertBefore", 
          "seed": "final double initial=getStartValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1356/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:26:22.674759675 -0500\n@@ -121,7 +121,8 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        double x2 = max;\n+\t\treturn solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n     /** {@inheritDoc} */\n@@ -132,12 +133,6 @@\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n         if (f1 == 0.0) {\n             return x1;\n         }\n@@ -147,8 +142,12 @@\n \n         // Get accuracies.\n         final double ftol = getFunctionValueAccuracy();\n-        final double atol = getAbsoluteAccuracy();\n-        final double rtol = getRelativeAccuracy();\n+        final double initial = getStartValue();\n+\t\tfinal double atol = getAbsoluteAccuracy();\n+        if (f1 == 0.0) {\n+\t\t\treturn x1;\n+\t\t}\n+\t\tfinal double rtol = getRelativeAccuracy();\n \n         // Keep track of inverted intervals, meaning that the left bound is\n         // larger than the right bound.\n@@ -158,7 +157,8 @@\n         while (true) {\n             // Calculate the next approximation.\n             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n-            final double fx = computeObjectiveValue(x);\n+            int start = 0;\n+\t\t\tfinal double fx = computeObjectiveValue(x);\n \n             // If the new approximation is the exact root, return it. Since\n             // this is not an under-approximation or an over-approximation,\n@@ -183,11 +183,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    int agingA = 0;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +232,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Delete", 
          "seed": "double f1=computeObjectiveValue(x1);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1470/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:27:11.636196054 -0500\n@@ -132,12 +132,6 @@\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n         if (f1 == 0.0) {\n             return x1;\n         }\n@@ -183,11 +177,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    int agingA = 0;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +226,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    ;\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "double x0=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1531/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:27:37.844956225 -0500\n@@ -132,12 +132,6 @@\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n         if (f1 == 0.0) {\n             return x1;\n         }\n@@ -183,11 +177,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    int agingA = 0;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +226,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingB=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "f0=f1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double y1=computeObjectiveValue(x1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 155, 
          "faulty": "boolean inverted=false;", 
          "type": "InsertBefore", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 132, 
          "faulty": "double f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "final double startValue=getStartValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 130, 
          "faulty": "double x0=getMin();", 
          "type": "InsertBefore", 
          "seed": "final double initial=getStartValue();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_646/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:20:14.480285715 -0500\n@@ -121,15 +121,18 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        double x2 = max;\n+\t\treturn solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n     /** {@inheritDoc} */\n     protected final double doSolve() {\n-        // Get initial solution\n+        final double initial = getStartValue();\n+\t\t// Get initial solution\n         double x0 = getMin();\n         double x1 = getMax();\n-        double f0 = computeObjectiveValue(x0);\n+        final double startValue = getStartValue();\n+\t\tdouble f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n         // If one of the bounds is the exact root, return it. Since these are\n@@ -150,7 +153,8 @@\n         final double atol = getAbsoluteAccuracy();\n         final double rtol = getRelativeAccuracy();\n \n-        // Keep track of inverted intervals, meaning that the left bound is\n+        int numIterations = 0;\n+\t\t// Keep track of inverted intervals, meaning that the left bound is\n         // larger than the right bound.\n         boolean inverted = false;\n \n@@ -183,11 +187,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingB=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_38/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:14:55.126576618 -0500\n@@ -183,11 +183,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 132, 
          "faulty": "double f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 198, 
          "faulty": "x1=x;", 
          "type": "InsertBefore", 
          "seed": "double x2=0.5 * (x0 + x1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "double y1=computeObjectiveValue(x1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 150, 
          "faulty": "final double atol=getAbsoluteAccuracy();", 
          "type": "InsertBefore", 
          "seed": "int agingB=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_275/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:17:04.082648128 -0500\n@@ -121,7 +121,8 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        double x2 = max;\n+\t\treturn solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n     /** {@inheritDoc} */\n@@ -129,7 +130,8 @@\n         // Get initial solution\n         double x0 = getMin();\n         double x1 = getMax();\n-        double f0 = computeObjectiveValue(x0);\n+        int agingA = 0;\n+\t\tdouble f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n         // If one of the bounds is the exact root, return it. Since these are\n@@ -147,7 +149,8 @@\n \n         // Get accuracies.\n         final double ftol = getFunctionValueAccuracy();\n-        final double atol = getAbsoluteAccuracy();\n+        int agingB = 0;\n+\t\tfinal double atol = getAbsoluteAccuracy();\n         final double rtol = getRelativeAccuracy();\n \n         // Keep track of inverted intervals, meaning that the left bound is\n@@ -185,7 +188,7 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n+                        double y1 = computeObjectiveValue(x1);\n                         f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n@@ -194,7 +197,8 @@\n                     throw new MathInternalError();\n                 }\n             }\n-            // Update from [x0, x1] to [x0, x].\n+            double x2 = 0.5 * (x0 + x1);\n+\t\t\t// Update from [x0, x1] to [x0, x].\n             x1 = x;\n             f1 = fx;\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "final double relativeAccuracy=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 116, 
          "faulty": "this.allowed=allowedSolution;", 
          "type": "InsertBefore", 
          "seed": "double x0=getMin();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java", 
          "line": 374, 
          "faulty": "verifyInterval(lower,upper);", 
          "type": "InsertBefore", 
          "seed": "if (function == null) {\n  throw new NullArgumentException(LocalizedFormats.FUNCTION);\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_807/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:21:56.439160282 -0500\n@@ -113,7 +113,8 @@\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue,\n                         final AllowedSolution allowedSolution) {\n-        this.allowed = allowedSolution;\n+        double x0 = getMin();\n+\t\tthis.allowed = allowedSolution;\n         return super.solve(maxEval, f, min, max, startValue);\n     }\n \n@@ -121,7 +122,8 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        double x2 = max;\n+\t\treturn solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n     /** {@inheritDoc} */\n@@ -183,11 +185,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-02 11:55:31.845022991 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_807/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-02 12:21:56.439160282 -0500\n@@ -371,7 +371,10 @@\n         if (function == null) {\n             throw new NullArgumentException(LocalizedFormats.FUNCTION);\n         }\n-        verifyInterval(lower, upper);\n+        if (function == null) {\n+\t\t\tthrow new NullArgumentException(LocalizedFormats.FUNCTION);\n+\t\t}\n+\t\tverifyInterval(lower, upper);\n         if (!isBracketing(function, lower, upper)) {\n             throw new NoBracketingException(lower, upper,\n                                             function.value(lower),\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1510/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:27:28.468684910 -0500\n@@ -132,12 +132,6 @@\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n         if (f1 == 0.0) {\n             return x1;\n         }\n@@ -183,11 +177,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    int agingA = 0;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +226,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "inverted=!inverted;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double y1=computeObjectiveValue(x1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Delete", 
          "seed": "double f0=computeObjectiveValue(x0);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_950/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:23:07.945139603 -0500\n@@ -185,8 +185,32 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n+                        if (f1 * fx < 0) {\n+\t\t\t\t\t\t\tx0 = x1;\n+\t\t\t\t\t\t\tf0 = f1;\n+\t\t\t\t\t\t\tinverted = !inverted;\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tswitch (method) {\n+\t\t\t\t\t\t\tcase ILLINOIS:\n+\t\t\t\t\t\t\t\tf0 *= 0.5;\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\tcase PEGASUS:\n+\t\t\t\t\t\t\t\tf0 *= f1 / (f1 + fx);\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\tcase REGULA_FALSI:\n+\t\t\t\t\t\t\t\tif (x == x1) {\n+\t\t\t\t\t\t\t\t\tx0 = 0.5 * (x0 + x1 - FastMath.max(rtol\n+\t\t\t\t\t\t\t\t\t\t\t* FastMath.abs(x1), atol));\n+\t\t\t\t\t\t\t\t\tf0 = computeObjectiveValue(x0);\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\tdefault:\n+\t\t\t\t\t\t\t\tthrow new MathInternalError();\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+                        inverted = !inverted;\n+\t\t\t\t\t\tdouble y1 = computeObjectiveValue(x1);\n+\t\t\t\t\t\tf0 = computeObjectiveValue(x0);\n                     }\n                     break;\n                 default:\n@@ -236,7 +260,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    ;\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "inverted=!inverted;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "Complex oldz=new Complex(Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "Complex G2=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "final double t=getAbsoluteAccuracy();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_817/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:22:01.935313345 -0500\n@@ -138,10 +138,6 @@\n         if (f0 == 0.0) {\n             return x0;\n         }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -183,11 +179,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_899/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:22:38.696332986 -0500\n@@ -121,7 +121,8 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        double x2 = max;\n+\t\treturn solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n     /** {@inheritDoc} */\n@@ -183,11 +184,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "Complex oldz=new Complex(Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 116, 
          "faulty": "this.allowed=allowedSolution;", 
          "type": "InsertBefore", 
          "seed": "double x0=getMin();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java", 
          "line": 374, 
          "faulty": "verifyInterval(lower,upper);", 
          "type": "InsertBefore", 
          "seed": "if (function == null) {\n  throw new NullArgumentException(LocalizedFormats.FUNCTION);\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_772/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:21:34.030534429 -0500\n@@ -113,7 +113,8 @@\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue,\n                         final AllowedSolution allowedSolution) {\n-        this.allowed = allowedSolution;\n+        double x0 = getMin();\n+\t\tthis.allowed = allowedSolution;\n         return super.solve(maxEval, f, min, max, startValue);\n     }\n \n@@ -121,7 +122,8 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        double x2 = max;\n+\t\treturn solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n     /** {@inheritDoc} */\n@@ -138,10 +140,6 @@\n         if (f0 == 0.0) {\n             return x0;\n         }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -183,11 +181,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-02 11:55:31.845022991 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_772/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-02 12:21:34.034534541 -0500\n@@ -371,7 +371,10 @@\n         if (function == null) {\n             throw new NullArgumentException(LocalizedFormats.FUNCTION);\n         }\n-        verifyInterval(lower, upper);\n+        if (function == null) {\n+\t\t\tthrow new NullArgumentException(LocalizedFormats.FUNCTION);\n+\t\t}\n+\t\tverifyInterval(lower, upper);\n         if (!isBracketing(function, lower, upper)) {\n             throw new NoBracketingException(lower, upper,\n                                             function.value(lower),\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double initial=getStartValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "return x1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1272/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:25:32.117250216 -0500\n@@ -121,7 +121,8 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        double x2 = max;\n+\t\treturn solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n     /** {@inheritDoc} */\n@@ -183,11 +184,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (inverted) {\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "double min=getMin();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Replace", 
          "seed": "final double initial=getStartValue();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_69/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:15:11.927110009 -0500\n@@ -183,11 +183,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    final double initial = getStartValue();\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "final double functionValueAccuracy=getFunctionValueAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double y1=computeObjectiveValue(x1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Delete", 
          "seed": "double min=getMin();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 133, 
          "faulty": "double f1=computeObjectiveValue(x1);", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_351/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:17:37.259665359 -0500\n@@ -130,7 +130,8 @@\n         double x0 = getMin();\n         double x1 = getMax();\n         double f0 = computeObjectiveValue(x0);\n-        double f1 = computeObjectiveValue(x1);\n+        final UnivariateRealSolver solver = new BrentSolver();\n+\t\tdouble f1 = computeObjectiveValue(x1);\n \n         // If one of the bounds is the exact root, return it. Since these are\n         // not under-approximations or over-approximations, we can return them\n@@ -185,8 +186,9 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n+                        final double functionValueAccuracy = getFunctionValueAccuracy();\n+                        double y1 = computeObjectiveValue(x1);\n+\t\t\t\t\t\tf0 = computeObjectiveValue(x0);\n                     }\n                     break;\n                 default:\n@@ -236,7 +238,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    ;\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingB=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double y1=computeObjectiveValue(x1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 155, 
          "faulty": "boolean inverted=false;", 
          "type": "InsertBefore", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 132, 
          "faulty": "double f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "final double startValue=getStartValue();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_565/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:19:35.267158627 -0500\n@@ -121,7 +121,8 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        double x2 = max;\n+\t\treturn solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n     /** {@inheritDoc} */\n@@ -129,7 +130,8 @@\n         // Get initial solution\n         double x0 = getMin();\n         double x1 = getMax();\n-        double f0 = computeObjectiveValue(x0);\n+        final double startValue = getStartValue();\n+\t\tdouble f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n         // If one of the bounds is the exact root, return it. Since these are\n@@ -150,7 +152,8 @@\n         final double atol = getAbsoluteAccuracy();\n         final double rtol = getRelativeAccuracy();\n \n-        // Keep track of inverted intervals, meaning that the left bound is\n+        int numIterations = 0;\n+\t\t// Keep track of inverted intervals, meaning that the left bound is\n         // larger than the right bound.\n         boolean inverted = false;\n \n@@ -183,11 +186,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 160, 
          "faulty": "final double x=x1 - ((f1 * (x1 - x0)) / (f1 - f0));", 
          "type": "InsertBefore", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "return doSolve();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1198/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:24:57.968212695 -0500\n@@ -156,7 +156,8 @@\n \n         // Keep finding better approximations.\n         while (true) {\n-            // Calculate the next approximation.\n+            int numIterations = 0;\n+\t\t\t// Calculate the next approximation.\n             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n             final double fx = computeObjectiveValue(x);\n \n@@ -183,11 +184,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_897/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:22:38.096316398 -0500\n@@ -121,7 +121,8 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        double x2 = max;\n+\t\treturn solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n     /** {@inheritDoc} */\n@@ -183,11 +184,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingB=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "inverted=!inverted;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "Complex oldz=new Complex(Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double y1=computeObjectiveValue(x1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 116, 
          "faulty": "this.allowed=allowedSolution;", 
          "type": "InsertBefore", 
          "seed": "final double functionValueAccuracy=getFunctionValueAccuracy();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_822/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:22:04.351380576 -0500\n@@ -113,7 +113,8 @@\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue,\n                         final AllowedSolution allowedSolution) {\n-        this.allowed = allowedSolution;\n+        final double functionValueAccuracy = getFunctionValueAccuracy();\n+\t\tthis.allowed = allowedSolution;\n         return super.solve(maxEval, f, min, max, startValue);\n     }\n \n@@ -138,10 +139,6 @@\n         if (f0 == 0.0) {\n             return x0;\n         }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -183,11 +180,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double y1=computeObjectiveValue(x1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java", 
          "line": 371, 
          "faulty": "if (function == null) {\n  throw new NullArgumentException(LocalizedFormats.FUNCTION);\n}", 
          "type": "Delete", 
          "seed": "int agingB=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_933/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:23:00.676939518 -0500\n@@ -183,11 +183,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-02 11:55:31.845022991 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_933/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-02 12:23:00.680939629 -0500\n@@ -368,9 +368,6 @@\n     public static void verifyBracketing(UnivariateRealFunction function,\n                                         final double lower,\n                                         final double upper) {\n-        if (function == null) {\n-            throw new NullArgumentException(LocalizedFormats.FUNCTION);\n-        }\n         verifyInterval(lower, upper);\n         if (!isBracketing(function, lower, upper)) {\n             throw new NoBracketingException(lower, upper,\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingB=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Delete", 
          "seed": "final double rtol=getRelativeAccuracy();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_735/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:21:16.218034753 -0500\n@@ -185,8 +185,9 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n+                        if (f0 == 0.0) {\n+\t\t\t\t\t\t\treturn x0;\n+\t\t\t\t\t\t}\n                     }\n                     break;\n                 default:\n@@ -236,7 +237,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    ;\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 161, 
          "faulty": "final double fx=computeObjectiveValue(x);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 174, 
          "faulty": "x0=x1;", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\n  return x1;\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1768/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:29:30.596171999 -0500\n@@ -132,16 +132,6 @@\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -158,7 +148,8 @@\n         while (true) {\n             // Calculate the next approximation.\n             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n-            final double fx = computeObjectiveValue(x);\n+            int start = 0;\n+\t\t\tfinal double fx = computeObjectiveValue(x);\n \n             // If the new approximation is the exact root, return it. Since\n             // this is not an under-approximation or an over-approximation,\n@@ -169,7 +160,11 @@\n \n             // Update the bounds with the new approximation.\n             if (f1 * fx < 0) {\n-                // The value of x1 has switched to the other bound, thus inverting\n+                if (FastMath.abs(x1 - x0) < FastMath.max(\n+\t\t\t\t\t\trtol * FastMath.abs(x1), atol)) {\n+\t\t\t\t\treturn x1;\n+\t\t\t\t}\n+\t\t\t\t// The value of x1 has switched to the other bound, thus inverting\n                 // the interval.\n                 x0 = x1;\n                 f0 = f1;\n@@ -183,11 +178,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    int agingA = 0;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +227,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_848/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:22:16.671722924 -0500\n@@ -121,7 +121,8 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        double x2 = max;\n+\t\treturn solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n     /** {@inheritDoc} */\n@@ -183,11 +184,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 150, 
          "faulty": "final double atol=getAbsoluteAccuracy();", 
          "type": "InsertBefore", 
          "seed": "final double initial=getStartValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 161, 
          "faulty": "final double fx=computeObjectiveValue(x);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 151, 
          "faulty": "final double rtol=getRelativeAccuracy();", 
          "type": "InsertBefore", 
          "seed": "if (f1 == 0.0) {\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "final double absoluteAccuracy=getAbsoluteAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "double x0=getMin();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1444/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:27:00.583873757 -0500\n@@ -121,7 +121,8 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        double x2 = max;\n+\t\treturn solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n     /** {@inheritDoc} */\n@@ -132,23 +133,17 @@\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n         // Get accuracies.\n         final double ftol = getFunctionValueAccuracy();\n-        final double atol = getAbsoluteAccuracy();\n-        final double rtol = getRelativeAccuracy();\n+        final double initial = getStartValue();\n+\t\tfinal double atol = getAbsoluteAccuracy();\n+        if (f1 == 0.0) {\n+\t\t\treturn x1;\n+\t\t}\n+\t\tfinal double rtol = getRelativeAccuracy();\n \n         // Keep track of inverted intervals, meaning that the left bound is\n         // larger than the right bound.\n@@ -158,7 +153,8 @@\n         while (true) {\n             // Calculate the next approximation.\n             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n-            final double fx = computeObjectiveValue(x);\n+            int start = 0;\n+\t\t\tfinal double fx = computeObjectiveValue(x);\n \n             // If the new approximation is the exact root, return it. Since\n             // this is not an under-approximation or an over-approximation,\n@@ -183,11 +179,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +228,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 150, 
          "faulty": "final double atol=getAbsoluteAccuracy();", 
          "type": "InsertBefore", 
          "seed": "final double initial=getStartValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "final double absoluteAccuracy=getAbsoluteAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "double x0=getMin();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "boolean inverted=false;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1729/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:29:13.039676225 -0500\n@@ -147,7 +147,8 @@\n \n         // Get accuracies.\n         final double ftol = getFunctionValueAccuracy();\n-        final double atol = getAbsoluteAccuracy();\n+        final double initial = getStartValue();\n+\t\tfinal double atol = getAbsoluteAccuracy();\n         final double rtol = getRelativeAccuracy();\n \n         // Keep track of inverted intervals, meaning that the left bound is\n@@ -183,11 +184,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 161, 
          "faulty": "final double fx=computeObjectiveValue(x);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1385/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:26:35.371134356 -0500\n@@ -132,12 +132,6 @@\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n         if (f1 == 0.0) {\n             return x1;\n         }\n@@ -158,7 +152,8 @@\n         while (true) {\n             // Calculate the next approximation.\n             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n-            final double fx = computeObjectiveValue(x);\n+            int start = 0;\n+\t\t\tfinal double fx = computeObjectiveValue(x);\n \n             // If the new approximation is the exact root, return it. Since\n             // this is not an under-approximation or an over-approximation,\n@@ -183,11 +178,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +227,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1083/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:24:05.858726363 -0500\n@@ -183,11 +183,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 116, 
          "faulty": "this.allowed=allowedSolution;", 
          "type": "InsertBefore", 
          "seed": "final double functionValueAccuracy=getFunctionValueAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "f0=f1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_894/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:22:36.836281557 -0500\n@@ -113,7 +113,8 @@\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue,\n                         final AllowedSolution allowedSolution) {\n-        this.allowed = allowedSolution;\n+        final double functionValueAccuracy = getFunctionValueAccuracy();\n+\t\tthis.allowed = allowedSolution;\n         return super.solve(maxEval, f, min, max, startValue);\n     }\n \n@@ -138,10 +139,6 @@\n         if (f0 == 0.0) {\n             return x0;\n         }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -185,8 +182,31 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n+                        if (f1 * fx < 0) {\n+\t\t\t\t\t\t\tx0 = x1;\n+\t\t\t\t\t\t\tf0 = f1;\n+\t\t\t\t\t\t\tinverted = !inverted;\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tswitch (method) {\n+\t\t\t\t\t\t\tcase ILLINOIS:\n+\t\t\t\t\t\t\t\tf0 *= 0.5;\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\tcase PEGASUS:\n+\t\t\t\t\t\t\t\tf0 *= f1 / (f1 + fx);\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\tcase REGULA_FALSI:\n+\t\t\t\t\t\t\t\tif (x == x1) {\n+\t\t\t\t\t\t\t\t\tx0 = 0.5 * (x0 + x1 - FastMath.max(rtol\n+\t\t\t\t\t\t\t\t\t\t\t* FastMath.abs(x1), atol));\n+\t\t\t\t\t\t\t\t\tf0 = computeObjectiveValue(x0);\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\tdefault:\n+\t\t\t\t\t\t\t\tthrow new MathInternalError();\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+                        f0 = f1;\n+\t\t\t\t\t\tf0 = computeObjectiveValue(x0);\n                     }\n                     break;\n                 default:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1349/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:26:19.422663437 -0500\n@@ -132,16 +132,6 @@\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -183,11 +173,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +222,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingB=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "inverted=!inverted;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "Complex oldz=new Complex(Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double y1=computeObjectiveValue(x1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_782/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:21:44.286821245 -0500\n@@ -138,10 +138,6 @@\n         if (f0 == 0.0) {\n             return x0;\n         }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -185,8 +181,25 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n+                        if (FastMath.abs(x1 - x0) < FastMath.max(rtol\n+\t\t\t\t\t\t\t\t* FastMath.abs(x1), atol)) {\n+\t\t\t\t\t\t\tswitch (allowed) {\n+\t\t\t\t\t\t\tcase ANY_SIDE:\n+\t\t\t\t\t\t\t\treturn x1;\n+\t\t\t\t\t\t\tcase LEFT_SIDE:\n+\t\t\t\t\t\t\t\treturn inverted ? x1 : x0;\n+\t\t\t\t\t\t\tcase RIGHT_SIDE:\n+\t\t\t\t\t\t\t\treturn inverted ? x0 : x1;\n+\t\t\t\t\t\t\tcase BELOW_SIDE:\n+\t\t\t\t\t\t\t\treturn (f1 <= 0) ? x1 : x0;\n+\t\t\t\t\t\t\tcase ABOVE_SIDE:\n+\t\t\t\t\t\t\t\treturn (f1 >= 0) ? x1 : x0;\n+\t\t\t\t\t\t\tdefault:\n+\t\t\t\t\t\t\t\tthrow new MathInternalError();\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tinverted = !inverted;\n+\t\t\t\t\t\tdouble y1 = computeObjectiveValue(x1);\n                     }\n                     break;\n                 default:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double initial=getStartValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 235, 
          "faulty": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}", 
          "type": "InsertBefore", 
          "seed": "final double relativeAccuracy=getRelativeAccuracy();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1186/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:24:53.084062976 -0500\n@@ -183,11 +183,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -230,7 +226,8 @@\n                 }\n             }\n \n-            // If the current interval is within the given accuracies, we\n+            final double relativeAccuracy = getRelativeAccuracy();\n+\t\t\t// If the current interval is within the given accuracies, we\n             // are satisfied with the current approximation.\n             if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),\n                                                      atol)) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 161, 
          "faulty": "final double fx=computeObjectiveValue(x);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 151, 
          "faulty": "final double rtol=getRelativeAccuracy();", 
          "type": "InsertBefore", 
          "seed": "if (f1 == 0.0) {\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 150, 
          "faulty": "final double atol=getAbsoluteAccuracy();", 
          "type": "InsertBefore", 
          "seed": "final double initial=getStartValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1449/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:27:03.031945239 -0500\n@@ -121,7 +121,8 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        double x2 = max;\n+\t\treturn solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n     /** {@inheritDoc} */\n@@ -132,12 +133,6 @@\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n         if (f1 == 0.0) {\n             return x1;\n         }\n@@ -147,8 +142,12 @@\n \n         // Get accuracies.\n         final double ftol = getFunctionValueAccuracy();\n-        final double atol = getAbsoluteAccuracy();\n-        final double rtol = getRelativeAccuracy();\n+        final double initial = getStartValue();\n+\t\tfinal double atol = getAbsoluteAccuracy();\n+        if (f1 == 0.0) {\n+\t\t\treturn x1;\n+\t\t}\n+\t\tfinal double rtol = getRelativeAccuracy();\n \n         // Keep track of inverted intervals, meaning that the left bound is\n         // larger than the right bound.\n@@ -158,7 +157,8 @@\n         while (true) {\n             // Calculate the next approximation.\n             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n-            final double fx = computeObjectiveValue(x);\n+            int start = 0;\n+\t\t\tfinal double fx = computeObjectiveValue(x);\n \n             // If the new approximation is the exact root, return it. Since\n             // this is not an under-approximation or an over-approximation,\n@@ -183,11 +183,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +232,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingB=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 132, 
          "faulty": "double f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "final double startValue=getStartValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingB=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Delete", 
          "seed": "final double rtol=getRelativeAccuracy();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_755/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:21:25.930307453 -0500\n@@ -129,7 +129,8 @@\n         // Get initial solution\n         double x0 = getMin();\n         double x1 = getMax();\n-        double f0 = computeObjectiveValue(x0);\n+        final double startValue = getStartValue();\n+\t\tdouble f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n         // If one of the bounds is the exact root, return it. Since these are\n@@ -185,8 +186,9 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n+                        if (f0 == 0.0) {\n+\t\t\t\t\t\t\treturn x0;\n+\t\t\t\t\t\t}\n                     }\n                     break;\n                 default:\n@@ -236,7 +238,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    ;\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1323/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:26:06.526280692 -0500\n@@ -185,8 +185,7 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n+                        int agingA = 0;\n                     }\n                     break;\n                 default:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 161, 
          "faulty": "final double fx=computeObjectiveValue(x);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "final double absoluteAccuracy=getAbsoluteAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "double x0=getMin();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "boolean inverted=false;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1668/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:28:44.130856235 -0500\n@@ -158,7 +158,8 @@\n         while (true) {\n             // Calculate the next approximation.\n             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n-            final double fx = computeObjectiveValue(x);\n+            int start = 0;\n+\t\t\tfinal double fx = computeObjectiveValue(x);\n \n             // If the new approximation is the exact root, return it. Since\n             // this is not an under-approximation or an over-approximation,\n@@ -183,11 +184,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +233,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Delete", 
          "seed": "double f1=computeObjectiveValue(x1);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1494/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:27:22.108500472 -0500\n@@ -138,10 +138,6 @@\n         if (f0 == 0.0) {\n             return x0;\n         }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -183,11 +179,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    int agingA = 0;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +228,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    ;\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingB=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "inverted=!inverted;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "Complex oldz=new Complex(Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double y1=computeObjectiveValue(x1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_540/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:19:22.470787679 -0500\n@@ -138,10 +138,6 @@\n         if (f0 == 0.0) {\n             return x0;\n         }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -183,11 +179,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "double x2=0.5 * (x0 + x1);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1656/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:28:38.602698878 -0500\n@@ -132,16 +132,6 @@\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -183,11 +173,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    int agingA = 0;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +222,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_901/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:22:39.360351341 -0500\n@@ -121,7 +121,8 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        double x2 = max;\n+\t\treturn solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n     /** {@inheritDoc} */\n@@ -183,11 +184,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 161, 
          "faulty": "final double fx=computeObjectiveValue(x);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "final double absoluteAccuracy=getAbsoluteAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "double x0=getMin();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1592/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:28:04.853734039 -0500\n@@ -121,7 +121,8 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        double x2 = max;\n+\t\treturn solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n     /** {@inheritDoc} */\n@@ -158,7 +159,8 @@\n         while (true) {\n             // Calculate the next approximation.\n             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n-            final double fx = computeObjectiveValue(x);\n+            int start = 0;\n+\t\t\tfinal double fx = computeObjectiveValue(x);\n \n             // If the new approximation is the exact root, return it. Since\n             // this is not an under-approximation or an over-approximation,\n@@ -183,11 +185,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +234,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Delete", 
          "seed": "double f1=computeObjectiveValue(x1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "double x1=max;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1489/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:27:20.316448445 -0500\n@@ -121,7 +121,8 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        double x1 = max;\n+\t\treturn solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n     /** {@inheritDoc} */\n@@ -132,12 +133,6 @@\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n         if (f1 == 0.0) {\n             return x1;\n         }\n@@ -183,11 +178,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    int agingA = 0;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +227,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    ;\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "if (FastMath.abs(f1) <= ftol) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  if (inverted) {\n    return x1;\n  }\nbreak;\ncase RIGHT_SIDE:\nif (!inverted) {\nreturn x1;\n}\nbreak;\ncase BELOW_SIDE:\nif (f1 <= 0) {\nreturn x1;\n}\nbreak;\ncase ABOVE_SIDE:\nif (f1 >= 0) {\nreturn x1;\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "final double ftol=getFunctionValueAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java", 
          "line": 309, 
          "faulty": "final double fHi=function.value(upper);", 
          "type": "InsertBefore", 
          "seed": "int agingA=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1763/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:29:28.788121015 -0500\n@@ -132,16 +132,6 @@\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -183,11 +173,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    int agingA = 0;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +222,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-02 11:55:31.845022991 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1763/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-02 12:29:28.788121015 -0500\n@@ -306,7 +306,8 @@\n             throw new NullArgumentException(LocalizedFormats.FUNCTION);\n         }\n         final double fLo = function.value(lower);\n-        final double fHi = function.value(upper);\n+        int agingA = 0;\n+\t\tfinal double fHi = function.value(upper);\n         return (fLo >= 0 && fHi <= 0) || (fLo <= 0 && fHi >= 0);\n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double initial=getStartValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 161, 
          "faulty": "final double fx=computeObjectiveValue(x);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_994/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:23:26.705655032 -0500\n@@ -158,7 +158,8 @@\n         while (true) {\n             // Calculate the next approximation.\n             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n-            final double fx = computeObjectiveValue(x);\n+            int start = 0;\n+\t\t\tfinal double fx = computeObjectiveValue(x);\n \n             // If the new approximation is the exact root, return it. Since\n             // this is not an under-approximation or an over-approximation,\n@@ -183,11 +184,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 132, 
          "faulty": "double f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 198, 
          "faulty": "x1=x;", 
          "type": "InsertBefore", 
          "seed": "double x2=0.5 * (x0 + x1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "double y1=computeObjectiveValue(x1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 150, 
          "faulty": "final double atol=getAbsoluteAccuracy();", 
          "type": "InsertBefore", 
          "seed": "int agingB=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "inverted=!inverted;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_299/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:17:14.538970710 -0500\n@@ -121,7 +121,8 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        double x2 = max;\n+\t\treturn solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n     /** {@inheritDoc} */\n@@ -129,7 +130,8 @@\n         // Get initial solution\n         double x0 = getMin();\n         double x1 = getMax();\n-        double f0 = computeObjectiveValue(x0);\n+        int agingA = 0;\n+\t\tdouble f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n         // If one of the bounds is the exact root, return it. Since these are\n@@ -147,7 +149,8 @@\n \n         // Get accuracies.\n         final double ftol = getFunctionValueAccuracy();\n-        final double atol = getAbsoluteAccuracy();\n+        int agingB = 0;\n+\t\tfinal double atol = getAbsoluteAccuracy();\n         final double rtol = getRelativeAccuracy();\n \n         // Keep track of inverted intervals, meaning that the left bound is\n@@ -185,8 +188,9 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n+                        double y1 = computeObjectiveValue(x1);\n+                        inverted = !inverted;\n+\t\t\t\t\t\tf0 = computeObjectiveValue(x0);\n                     }\n                     break;\n                 default:\n@@ -194,7 +198,8 @@\n                     throw new MathInternalError();\n                 }\n             }\n-            // Update from [x0, x1] to [x0, x].\n+            double x2 = 0.5 * (x0 + x1);\n+\t\t\t// Update from [x0, x1] to [x0, x].\n             x1 = x;\n             f1 = fx;\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "f0=f1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1041/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:23:48.982265267 -0500\n@@ -185,8 +185,31 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n+                        if (f1 * fx < 0) {\n+\t\t\t\t\t\t\tx0 = x1;\n+\t\t\t\t\t\t\tf0 = f1;\n+\t\t\t\t\t\t\tinverted = !inverted;\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tswitch (method) {\n+\t\t\t\t\t\t\tcase ILLINOIS:\n+\t\t\t\t\t\t\t\tf0 *= 0.5;\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\tcase PEGASUS:\n+\t\t\t\t\t\t\t\tf0 *= f1 / (f1 + fx);\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\tcase REGULA_FALSI:\n+\t\t\t\t\t\t\t\tif (x == x1) {\n+\t\t\t\t\t\t\t\t\tx0 = 0.5 * (x0 + x1 - FastMath.max(rtol\n+\t\t\t\t\t\t\t\t\t\t\t* FastMath.abs(x1), atol));\n+\t\t\t\t\t\t\t\t\tf0 = computeObjectiveValue(x0);\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\tdefault:\n+\t\t\t\t\t\t\t\tthrow new MathInternalError();\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+                        f0 = f1;\n+\t\t\t\t\t\tf0 = computeObjectiveValue(x0);\n                     }\n                     break;\n                 default:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double initial=getStartValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 235, 
          "faulty": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}", 
          "type": "InsertBefore", 
          "seed": "final double relativeAccuracy=getRelativeAccuracy();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1145/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:24:33.543480701 -0500\n@@ -121,7 +121,8 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        double x2 = max;\n+\t\treturn solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n     /** {@inheritDoc} */\n@@ -183,11 +184,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -230,7 +227,8 @@\n                 }\n             }\n \n-            // If the current interval is within the given accuracies, we\n+            final double relativeAccuracy = getRelativeAccuracy();\n+\t\t\t// If the current interval is within the given accuracies, we\n             // are satisfied with the current approximation.\n             if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),\n                                                      atol)) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingB=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_442/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:18:28.721210127 -0500\n@@ -121,7 +121,8 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        double x2 = max;\n+\t\treturn solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n     /** {@inheritDoc} */\n@@ -183,11 +184,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "final double functionValueAccuracy=getFunctionValueAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "final double max=getMax();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_122/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:15:38.911968542 -0500\n@@ -138,10 +138,6 @@\n         if (f0 == 0.0) {\n             return x0;\n         }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -185,7 +181,7 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n+                        final double functionValueAccuracy = getFunctionValueAccuracy();\n                         f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_930/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:22:59.412904697 -0500\n@@ -183,11 +183,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "incrementEvaluationCount();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_188/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:16:18.461216988 -0500\n@@ -185,7 +185,8 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n+                        incrementEvaluationCount();\n+\t\t\t\t\t\tfinal double eps = getRelativeAccuracy();\n                         f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Delete", 
          "seed": "double min=getMin();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 133, 
          "faulty": "double f1=computeObjectiveValue(x1);", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_447/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:18:30.553264460 -0500\n@@ -130,7 +130,8 @@\n         double x0 = getMin();\n         double x1 = getMax();\n         double f0 = computeObjectiveValue(x0);\n-        double f1 = computeObjectiveValue(x1);\n+        final UnivariateRealSolver solver = new BrentSolver();\n+\t\tdouble f1 = computeObjectiveValue(x1);\n \n         // If one of the bounds is the exact root, return it. Since these are\n         // not under-approximations or over-approximations, we can return them\n@@ -185,7 +186,29 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n+                        if (f1 * fx < 0) {\n+\t\t\t\t\t\t\tx0 = x1;\n+\t\t\t\t\t\t\tf0 = f1;\n+\t\t\t\t\t\t\tinverted = !inverted;\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tswitch (method) {\n+\t\t\t\t\t\t\tcase ILLINOIS:\n+\t\t\t\t\t\t\t\tf0 *= 0.5;\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\tcase PEGASUS:\n+\t\t\t\t\t\t\t\tf0 *= f1 / (f1 + fx);\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\tcase REGULA_FALSI:\n+\t\t\t\t\t\t\t\tif (x == x1) {\n+\t\t\t\t\t\t\t\t\tx0 = 0.5 * (x0 + x1 - FastMath.max(rtol\n+\t\t\t\t\t\t\t\t\t\t\t* FastMath.abs(x1), atol));\n+\t\t\t\t\t\t\t\t\tf0 = computeObjectiveValue(x0);\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\tdefault:\n+\t\t\t\t\t\t\t\tthrow new MathInternalError();\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n                         f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n@@ -236,7 +259,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    ;\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingB=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 155, 
          "faulty": "boolean inverted=false;", 
          "type": "InsertBefore", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 132, 
          "faulty": "double f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "final double startValue=getStartValue();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_629/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:20:05.176019530 -0500\n@@ -121,7 +121,8 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        double x2 = max;\n+\t\treturn solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n     /** {@inheritDoc} */\n@@ -129,7 +130,8 @@\n         // Get initial solution\n         double x0 = getMin();\n         double x1 = getMax();\n-        double f0 = computeObjectiveValue(x0);\n+        final double startValue = getStartValue();\n+\t\tdouble f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n         // If one of the bounds is the exact root, return it. Since these are\n@@ -150,7 +152,8 @@\n         final double atol = getAbsoluteAccuracy();\n         final double rtol = getRelativeAccuracy();\n \n-        // Keep track of inverted intervals, meaning that the left bound is\n+        int numIterations = 0;\n+\t\t// Keep track of inverted intervals, meaning that the left bound is\n         // larger than the right bound.\n         boolean inverted = false;\n \n@@ -183,11 +186,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingB=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double y1=computeObjectiveValue(x1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 150, 
          "faulty": "final double atol=getAbsoluteAccuracy();", 
          "type": "InsertBefore", 
          "seed": "int agingB=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "final double relativeAccuracy=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingB=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "final double max=getMax();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_537/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:19:21.074747111 -0500\n@@ -121,7 +121,8 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        double x2 = max;\n+\t\treturn solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n     /** {@inheritDoc} */\n@@ -138,16 +139,13 @@\n         if (f0 == 0.0) {\n             return x0;\n         }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n         // Get accuracies.\n         final double ftol = getFunctionValueAccuracy();\n-        final double atol = getAbsoluteAccuracy();\n+        int agingB = 0;\n+\t\tfinal double atol = getAbsoluteAccuracy();\n         final double rtol = getRelativeAccuracy();\n \n         // Keep track of inverted intervals, meaning that the left bound is\n@@ -183,11 +181,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double initial=getStartValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 161, 
          "faulty": "final double fx=computeObjectiveValue(x);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 150, 
          "faulty": "final double atol=getAbsoluteAccuracy();", 
          "type": "InsertBefore", 
          "seed": "final double initial=getStartValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1070/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:24:00.262573575 -0500\n@@ -121,7 +121,8 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        double x2 = max;\n+\t\treturn solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n     /** {@inheritDoc} */\n@@ -147,7 +148,8 @@\n \n         // Get accuracies.\n         final double ftol = getFunctionValueAccuracy();\n-        final double atol = getAbsoluteAccuracy();\n+        final double initial = getStartValue();\n+\t\tfinal double atol = getAbsoluteAccuracy();\n         final double rtol = getRelativeAccuracy();\n \n         // Keep track of inverted intervals, meaning that the left bound is\n@@ -158,7 +160,8 @@\n         while (true) {\n             // Calculate the next approximation.\n             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n-            final double fx = computeObjectiveValue(x);\n+            int start = 0;\n+\t\t\tfinal double fx = computeObjectiveValue(x);\n \n             // If the new approximation is the exact root, return it. Since\n             // this is not an under-approximation or an over-approximation,\n@@ -183,11 +186,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +235,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_261/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:16:56.778421646 -0500\n@@ -185,7 +185,6 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n                         f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 161, 
          "faulty": "final double fx=computeObjectiveValue(x);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 151, 
          "faulty": "final double rtol=getRelativeAccuracy();", 
          "type": "InsertBefore", 
          "seed": "if (f1 == 0.0) {\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "double x0=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java", 
          "line": 371, 
          "faulty": "if (function == null) {\n  throw new NullArgumentException(LocalizedFormats.FUNCTION);\n}", 
          "type": "Delete", 
          "seed": "return doSolve();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1373/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:26:30.366986874 -0500\n@@ -121,7 +121,8 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        double x2 = max;\n+\t\treturn solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n     /** {@inheritDoc} */\n@@ -132,23 +133,16 @@\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n         // Get accuracies.\n         final double ftol = getFunctionValueAccuracy();\n         final double atol = getAbsoluteAccuracy();\n-        final double rtol = getRelativeAccuracy();\n+        if (f1 == 0.0) {\n+\t\t\treturn x1;\n+\t\t}\n+\t\tfinal double rtol = getRelativeAccuracy();\n \n         // Keep track of inverted intervals, meaning that the left bound is\n         // larger than the right bound.\n@@ -158,7 +152,8 @@\n         while (true) {\n             // Calculate the next approximation.\n             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n-            final double fx = computeObjectiveValue(x);\n+            int start = 0;\n+\t\t\tfinal double fx = computeObjectiveValue(x);\n \n             // If the new approximation is the exact root, return it. Since\n             // this is not an under-approximation or an over-approximation,\n@@ -183,11 +178,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +227,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-02 11:55:31.845022991 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1373/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-02 12:26:30.366986874 -0500\n@@ -368,9 +368,6 @@\n     public static void verifyBracketing(UnivariateRealFunction function,\n                                         final double lower,\n                                         final double upper) {\n-        if (function == null) {\n-            throw new NullArgumentException(LocalizedFormats.FUNCTION);\n-        }\n         verifyInterval(lower, upper);\n         if (!isBracketing(function, lower, upper)) {\n             throw new NoBracketingException(lower, upper,\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1287/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:25:44.317617204 -0500\n@@ -138,10 +138,6 @@\n         if (f0 == 0.0) {\n             return x0;\n         }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -183,11 +179,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 161, 
          "faulty": "final double fx=computeObjectiveValue(x);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 151, 
          "faulty": "final double rtol=getRelativeAccuracy();", 
          "type": "InsertBefore", 
          "seed": "if (f1 == 0.0) {\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "final double absoluteAccuracy=getAbsoluteAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "double x0=getMin();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double y1=computeObjectiveValue(x1);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1567/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:27:53.093396015 -0500\n@@ -132,12 +132,6 @@\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n         if (f1 == 0.0) {\n             return x1;\n         }\n@@ -148,7 +142,10 @@\n         // Get accuracies.\n         final double ftol = getFunctionValueAccuracy();\n         final double atol = getAbsoluteAccuracy();\n-        final double rtol = getRelativeAccuracy();\n+        if (f1 == 0.0) {\n+\t\t\treturn x1;\n+\t\t}\n+\t\tfinal double rtol = getRelativeAccuracy();\n \n         // Keep track of inverted intervals, meaning that the left bound is\n         // larger than the right bound.\n@@ -158,7 +155,8 @@\n         while (true) {\n             // Calculate the next approximation.\n             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n-            final double fx = computeObjectiveValue(x);\n+            int start = 0;\n+\t\t\tfinal double fx = computeObjectiveValue(x);\n \n             // If the new approximation is the exact root, return it. Since\n             // this is not an under-approximation or an over-approximation,\n@@ -183,11 +181,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingB=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 132, 
          "faulty": "double f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "final double max=getMax();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_235/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:16:43.834017880 -0500\n@@ -129,7 +129,8 @@\n         // Get initial solution\n         double x0 = getMin();\n         double x1 = getMax();\n-        double f0 = computeObjectiveValue(x0);\n+        int agingA = 0;\n+\t\tdouble f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n         // If one of the bounds is the exact root, return it. Since these are\n@@ -138,10 +139,6 @@\n         if (f0 == 0.0) {\n             return x0;\n         }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -183,11 +180,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingB=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "inverted=!inverted;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "Complex oldz=new Complex(Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 155, 
          "faulty": "boolean inverted=false;", 
          "type": "InsertBefore", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 132, 
          "faulty": "double f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "final double startValue=getStartValue();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_579/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:19:41.939351404 -0500\n@@ -129,7 +129,8 @@\n         // Get initial solution\n         double x0 = getMin();\n         double x1 = getMax();\n-        double f0 = computeObjectiveValue(x0);\n+        final double startValue = getStartValue();\n+\t\tdouble f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n         // If one of the bounds is the exact root, return it. Since these are\n@@ -138,10 +139,6 @@\n         if (f0 == 0.0) {\n             return x0;\n         }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -150,7 +147,8 @@\n         final double atol = getAbsoluteAccuracy();\n         final double rtol = getRelativeAccuracy();\n \n-        // Keep track of inverted intervals, meaning that the left bound is\n+        int numIterations = 0;\n+\t\t// Keep track of inverted intervals, meaning that the left bound is\n         // larger than the right bound.\n         boolean inverted = false;\n \n@@ -183,11 +181,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingB=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "f0=f1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_608/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:19:55.935754431 -0500\n@@ -185,8 +185,8 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n+                        f0 = f1;\n+\t\t\t\t\t\tx0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n                     }\n                     break;\n                 default:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 161, 
          "faulty": "final double fx=computeObjectiveValue(x);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 151, 
          "faulty": "final double rtol=getRelativeAccuracy();", 
          "type": "InsertBefore", 
          "seed": "if (f1 == 0.0) {\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 150, 
          "faulty": "final double atol=getAbsoluteAccuracy();", 
          "type": "InsertBefore", 
          "seed": "final double initial=getStartValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1439/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:26:58.727819526 -0500\n@@ -121,7 +121,8 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        double x2 = max;\n+\t\treturn solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n     /** {@inheritDoc} */\n@@ -132,23 +133,17 @@\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n         // Get accuracies.\n         final double ftol = getFunctionValueAccuracy();\n-        final double atol = getAbsoluteAccuracy();\n-        final double rtol = getRelativeAccuracy();\n+        final double initial = getStartValue();\n+\t\tfinal double atol = getAbsoluteAccuracy();\n+        if (f1 == 0.0) {\n+\t\t\treturn x1;\n+\t\t}\n+\t\tfinal double rtol = getRelativeAccuracy();\n \n         // Keep track of inverted intervals, meaning that the left bound is\n         // larger than the right bound.\n@@ -158,7 +153,8 @@\n         while (true) {\n             // Calculate the next approximation.\n             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n-            final double fx = computeObjectiveValue(x);\n+            int start = 0;\n+\t\t\tfinal double fx = computeObjectiveValue(x);\n \n             // If the new approximation is the exact root, return it. Since\n             // this is not an under-approximation or an over-approximation,\n@@ -183,11 +179,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    int agingA = 0;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +228,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "if (FastMath.abs(f1) <= ftol) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  if (inverted) {\n    return x1;\n  }\nbreak;\ncase RIGHT_SIDE:\nif (!inverted) {\nreturn x1;\n}\nbreak;\ncase BELOW_SIDE:\nif (f1 <= 0) {\nreturn x1;\n}\nbreak;\ncase ABOVE_SIDE:\nif (f1 >= 0) {\nreturn x1;\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "final double ftol=getFunctionValueAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1759/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:29:26.980070014 -0500\n@@ -132,16 +132,6 @@\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -183,11 +173,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    int agingA = 0;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +222,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 161, 
          "faulty": "final double fx=computeObjectiveValue(x);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double min=getMin();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1393/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:26:39.099244069 -0500\n@@ -121,7 +121,8 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        double x2 = max;\n+\t\treturn solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n     /** {@inheritDoc} */\n@@ -132,12 +133,6 @@\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n         if (f1 == 0.0) {\n             return x1;\n         }\n@@ -158,7 +153,8 @@\n         while (true) {\n             // Calculate the next approximation.\n             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n-            final double fx = computeObjectiveValue(x);\n+            int start = 0;\n+\t\t\tfinal double fx = computeObjectiveValue(x);\n \n             // If the new approximation is the exact root, return it. Since\n             // this is not an under-approximation or an over-approximation,\n@@ -183,11 +179,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +228,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 161, 
          "faulty": "final double fx=computeObjectiveValue(x);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "double x2=0.5 * (x0 + x1);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1715/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:29:05.611465972 -0500\n@@ -132,16 +132,6 @@\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -158,7 +148,8 @@\n         while (true) {\n             // Calculate the next approximation.\n             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n-            final double fx = computeObjectiveValue(x);\n+            int start = 0;\n+\t\t\tfinal double fx = computeObjectiveValue(x);\n \n             // If the new approximation is the exact root, return it. Since\n             // this is not an under-approximation or an over-approximation,\n@@ -183,11 +174,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    int agingA = 0;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +223,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double initial=getStartValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 116, 
          "faulty": "this.allowed=allowedSolution;", 
          "type": "InsertBefore", 
          "seed": "final double functionValueAccuracy=getFunctionValueAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "f0=f1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_973/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:23:18.245422774 -0500\n@@ -113,7 +113,8 @@\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue,\n                         final AllowedSolution allowedSolution) {\n-        this.allowed = allowedSolution;\n+        final double functionValueAccuracy = getFunctionValueAccuracy();\n+\t\tthis.allowed = allowedSolution;\n         return super.solve(maxEval, f, min, max, startValue);\n     }\n \n@@ -138,10 +139,6 @@\n         if (f0 == 0.0) {\n             return x0;\n         }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -183,11 +180,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double initial=getStartValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 116, 
          "faulty": "this.allowed=allowedSolution;", 
          "type": "InsertBefore", 
          "seed": "final double functionValueAccuracy=getFunctionValueAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double initial=getStartValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 161, 
          "faulty": "final double fx=computeObjectiveValue(x);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1289/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:25:44.921635327 -0500\n@@ -113,7 +113,8 @@\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue,\n                         final AllowedSolution allowedSolution) {\n-        this.allowed = allowedSolution;\n+        final double functionValueAccuracy = getFunctionValueAccuracy();\n+\t\tthis.allowed = allowedSolution;\n         return super.solve(maxEval, f, min, max, startValue);\n     }\n \n@@ -121,7 +122,8 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        double x2 = max;\n+\t\treturn solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n     /** {@inheritDoc} */\n@@ -132,12 +134,6 @@\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n         if (f1 == 0.0) {\n             return x1;\n         }\n@@ -158,7 +154,8 @@\n         while (true) {\n             // Calculate the next approximation.\n             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n-            final double fx = computeObjectiveValue(x);\n+            int start = 0;\n+\t\t\tfinal double fx = computeObjectiveValue(x);\n \n             // If the new approximation is the exact root, return it. Since\n             // this is not an under-approximation or an over-approximation,\n@@ -183,11 +180,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +229,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 161, 
          "faulty": "final double fx=computeObjectiveValue(x);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 151, 
          "faulty": "final double rtol=getRelativeAccuracy();", 
          "type": "InsertBefore", 
          "seed": "if (f1 == 0.0) {\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "final double absoluteAccuracy=getAbsoluteAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "double x0=getMin();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double y1=computeObjectiveValue(x1);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1505/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:27:26.644632050 -0500\n@@ -132,12 +132,6 @@\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n         if (f1 == 0.0) {\n             return x1;\n         }\n@@ -148,7 +142,10 @@\n         // Get accuracies.\n         final double ftol = getFunctionValueAccuracy();\n         final double atol = getAbsoluteAccuracy();\n-        final double rtol = getRelativeAccuracy();\n+        if (f1 == 0.0) {\n+\t\t\treturn x1;\n+\t\t}\n+\t\tfinal double rtol = getRelativeAccuracy();\n \n         // Keep track of inverted intervals, meaning that the left bound is\n         // larger than the right bound.\n@@ -158,7 +155,8 @@\n         while (true) {\n             // Calculate the next approximation.\n             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n-            final double fx = computeObjectiveValue(x);\n+            int start = 0;\n+\t\t\tfinal double fx = computeObjectiveValue(x);\n \n             // If the new approximation is the exact root, return it. Since\n             // this is not an under-approximation or an over-approximation,\n@@ -183,11 +181,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "double x2=0.5 * (x0 + x1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double x0=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1783/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:29:36.692343785 -0500\n@@ -132,16 +132,6 @@\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -183,11 +173,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    int agingA = 0;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +222,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 132, 
          "faulty": "double f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_62/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:15:08.154988725 -0500\n@@ -129,7 +129,8 @@\n         // Get initial solution\n         double x0 = getMin();\n         double x1 = getMax();\n-        double f0 = computeObjectiveValue(x0);\n+        int agingA = 0;\n+\t\tdouble f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n         // If one of the bounds is the exact root, return it. Since these are\n@@ -183,11 +184,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1116/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:24:20.547126890 -0500\n@@ -183,11 +183,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "final double max=getMax();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "Complex G2=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "final double t=getAbsoluteAccuracy();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_789/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:21:47.386907815 -0500\n@@ -138,10 +138,6 @@\n         if (f0 == 0.0) {\n             return x0;\n         }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -185,8 +181,6 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n                 default:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1442/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:26:59.975855996 -0500\n@@ -132,12 +132,6 @@\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n         if (f1 == 0.0) {\n             return x1;\n         }\n@@ -183,11 +177,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    int agingA = 0;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +226,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 150, 
          "faulty": "final double atol=getAbsoluteAccuracy();", 
          "type": "InsertBefore", 
          "seed": "int agingB=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "inverted=!inverted;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_435/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:18:25.053101217 -0500\n@@ -121,7 +121,8 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        double x2 = max;\n+\t\treturn solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n     /** {@inheritDoc} */\n@@ -147,7 +148,8 @@\n \n         // Get accuracies.\n         final double ftol = getFunctionValueAccuracy();\n-        final double atol = getAbsoluteAccuracy();\n+        int agingB = 0;\n+\t\tfinal double atol = getAbsoluteAccuracy();\n         final double rtol = getRelativeAccuracy();\n \n         // Keep track of inverted intervals, meaning that the left bound is\n@@ -183,11 +185,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingB=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double y1=computeObjectiveValue(x1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 155, 
          "faulty": "boolean inverted=false;", 
          "type": "InsertBefore", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "Complex G2=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "throw new NullArgumentException(LocalizedFormats.FUNCTION);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_742/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:21:19.870137368 -0500\n@@ -121,7 +121,8 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        double x2 = max;\n+\t\treturn solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n     /** {@inheritDoc} */\n@@ -150,7 +151,8 @@\n         final double atol = getAbsoluteAccuracy();\n         final double rtol = getRelativeAccuracy();\n \n-        // Keep track of inverted intervals, meaning that the left bound is\n+        int numIterations = 0;\n+\t\t// Keep track of inverted intervals, meaning that the left bound is\n         // larger than the right bound.\n         boolean inverted = false;\n \n@@ -183,11 +185,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 161, 
          "faulty": "final double fx=computeObjectiveValue(x);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 151, 
          "faulty": "final double rtol=getRelativeAccuracy();", 
          "type": "InsertBefore", 
          "seed": "if (f1 == 0.0) {\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "final double absoluteAccuracy=getAbsoluteAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "double x0=getMin();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "double x0=getMin();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "final double x=x1 - ((f1 * (x1 - x0)) / (f1 - f0));"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1596/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:28:06.693786838 -0500\n@@ -121,7 +121,8 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        double x2 = max;\n+\t\treturn solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n     /** {@inheritDoc} */\n@@ -132,23 +133,16 @@\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n         // Get accuracies.\n         final double ftol = getFunctionValueAccuracy();\n         final double atol = getAbsoluteAccuracy();\n-        final double rtol = getRelativeAccuracy();\n+        if (f1 == 0.0) {\n+\t\t\treturn x1;\n+\t\t}\n+\t\tfinal double rtol = getRelativeAccuracy();\n \n         // Keep track of inverted intervals, meaning that the left bound is\n         // larger than the right bound.\n@@ -158,7 +152,8 @@\n         while (true) {\n             // Calculate the next approximation.\n             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n-            final double fx = computeObjectiveValue(x);\n+            int start = 0;\n+\t\t\tfinal double fx = computeObjectiveValue(x);\n \n             // If the new approximation is the exact root, return it. Since\n             // this is not an under-approximation or an over-approximation,\n@@ -183,11 +178,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +227,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double initial=getStartValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 161, 
          "faulty": "final double fx=computeObjectiveValue(x);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_913/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:22:44.880503857 -0500\n@@ -158,7 +158,8 @@\n         while (true) {\n             // Calculate the next approximation.\n             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n-            final double fx = computeObjectiveValue(x);\n+            int start = 0;\n+\t\t\tfinal double fx = computeObjectiveValue(x);\n \n             // If the new approximation is the exact root, return it. Since\n             // this is not an under-approximation or an over-approximation,\n@@ -183,11 +184,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingB=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "inverted=!inverted;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "Complex oldz=new Complex(Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double y1=computeObjectiveValue(x1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 155, 
          "faulty": "boolean inverted=false;", 
          "type": "InsertBefore", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 132, 
          "faulty": "double f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "final double startValue=getStartValue();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_617/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:20:00.171876058 -0500\n@@ -121,7 +121,8 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        double x2 = max;\n+\t\treturn solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n     /** {@inheritDoc} */\n@@ -129,7 +130,8 @@\n         // Get initial solution\n         double x0 = getMin();\n         double x1 = getMax();\n-        double f0 = computeObjectiveValue(x0);\n+        final double startValue = getStartValue();\n+\t\tdouble f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n         // If one of the bounds is the exact root, return it. Since these are\n@@ -138,10 +140,6 @@\n         if (f0 == 0.0) {\n             return x0;\n         }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -150,7 +148,8 @@\n         final double atol = getAbsoluteAccuracy();\n         final double rtol = getRelativeAccuracy();\n \n-        // Keep track of inverted intervals, meaning that the left bound is\n+        int numIterations = 0;\n+\t\t// Keep track of inverted intervals, meaning that the left bound is\n         // larger than the right bound.\n         boolean inverted = false;\n \n@@ -183,11 +182,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double initial=getStartValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 116, 
          "faulty": "this.allowed=allowedSolution;", 
          "type": "InsertBefore", 
          "seed": "final double functionValueAccuracy=getFunctionValueAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double initial=getStartValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 161, 
          "faulty": "final double fx=computeObjectiveValue(x);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Replace", 
          "seed": "double max=getMax();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1151/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:24:35.947546092 -0500\n@@ -113,7 +113,8 @@\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue,\n                         final AllowedSolution allowedSolution) {\n-        this.allowed = allowedSolution;\n+        final double functionValueAccuracy = getFunctionValueAccuracy();\n+\t\tthis.allowed = allowedSolution;\n         return super.solve(maxEval, f, min, max, startValue);\n     }\n \n@@ -121,7 +122,8 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        double x2 = max;\n+\t\treturn solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n     /** {@inheritDoc} */\n@@ -132,12 +134,7 @@\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n+        double max = getMax();\n         if (f1 == 0.0) {\n             return x1;\n         }\n@@ -158,7 +155,8 @@\n         while (true) {\n             // Calculate the next approximation.\n             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n-            final double fx = computeObjectiveValue(x);\n+            int start = 0;\n+\t\t\tfinal double fx = computeObjectiveValue(x);\n \n             // If the new approximation is the exact root, return it. Since\n             // this is not an under-approximation or an over-approximation,\n@@ -183,11 +181,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +230,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "double x2=0.5 * (x0 + x1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double x0=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1689/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:28:53.359118508 -0500\n@@ -132,16 +132,6 @@\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -183,11 +173,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    int agingA = 0;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +222,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 160, 
          "faulty": "final double x=x1 - ((f1 * (x1 - x0)) / (f1 - f0));", 
          "type": "InsertBefore", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1182/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:24:51.832024540 -0500\n@@ -156,7 +156,8 @@\n \n         // Keep finding better approximations.\n         while (true) {\n-            // Calculate the next approximation.\n+            int numIterations = 0;\n+\t\t\t// Calculate the next approximation.\n             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n             final double fx = computeObjectiveValue(x);\n \n@@ -183,11 +184,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 150, 
          "faulty": "final double atol=getAbsoluteAccuracy();", 
          "type": "InsertBefore", 
          "seed": "final double initial=getStartValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "final double absoluteAccuracy=getAbsoluteAccuracy();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1190/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:24:54.916119177 -0500\n@@ -147,7 +147,8 @@\n \n         // Get accuracies.\n         final double ftol = getFunctionValueAccuracy();\n-        final double atol = getAbsoluteAccuracy();\n+        final double initial = getStartValue();\n+\t\tfinal double atol = getAbsoluteAccuracy();\n         final double rtol = getRelativeAccuracy();\n \n         // Keep track of inverted intervals, meaning that the left bound is\n@@ -183,11 +184,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +233,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java", 
          "line": 371, 
          "faulty": "if (function == null) {\n  throw new NullArgumentException(LocalizedFormats.FUNCTION);\n}", 
          "type": "Delete", 
          "seed": "int agingB=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_999/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:23:28.573706278 -0500\n@@ -183,11 +183,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-02 11:55:31.845022991 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_999/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-02 12:23:28.573706278 -0500\n@@ -368,9 +368,6 @@\n     public static void verifyBracketing(UnivariateRealFunction function,\n                                         final double lower,\n                                         final double upper) {\n-        if (function == null) {\n-            throw new NullArgumentException(LocalizedFormats.FUNCTION);\n-        }\n         verifyInterval(lower, upper);\n         if (!isBracketing(function, lower, upper)) {\n             throw new NoBracketingException(lower, upper,\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingB=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double y1=computeObjectiveValue(x1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Delete", 
          "seed": "double min=getMin();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_249/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:16:50.650230883 -0500\n@@ -183,11 +183,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +232,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    ;\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingB=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "final double max=getMax();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 155, 
          "faulty": "boolean inverted=false;", 
          "type": "InsertBefore", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 132, 
          "faulty": "double f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "final double startValue=getStartValue();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_485/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:18:53.793950132 -0500\n@@ -121,7 +121,8 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        double x2 = max;\n+\t\treturn solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n     /** {@inheritDoc} */\n@@ -129,7 +130,8 @@\n         // Get initial solution\n         double x0 = getMin();\n         double x1 = getMax();\n-        double f0 = computeObjectiveValue(x0);\n+        final double startValue = getStartValue();\n+\t\tdouble f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n         // If one of the bounds is the exact root, return it. Since these are\n@@ -138,10 +140,6 @@\n         if (f0 == 0.0) {\n             return x0;\n         }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -150,7 +148,8 @@\n         final double atol = getAbsoluteAccuracy();\n         final double rtol = getRelativeAccuracy();\n \n-        // Keep track of inverted intervals, meaning that the left bound is\n+        int numIterations = 0;\n+\t\t// Keep track of inverted intervals, meaning that the left bound is\n         // larger than the right bound.\n         boolean inverted = false;\n \n@@ -183,11 +182,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "inverted=!inverted;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "Complex oldz=new Complex(Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Delete", 
          "seed": "double f0=computeObjectiveValue(x0);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_860/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:22:21.599859640 -0500\n@@ -138,10 +138,6 @@\n         if (f0 == 0.0) {\n             return x0;\n         }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -185,8 +181,11 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n+                        if (f0 == 0.0) {\n+\t\t\t\t\t\t\treturn x0;\n+\t\t\t\t\t\t}\n+                        inverted = !inverted;\n+\t\t\t\t\t\tf0 = computeObjectiveValue(x0);\n                     }\n                     break;\n                 default:\n@@ -236,7 +235,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    ;\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "final double functionValueAccuracy=getFunctionValueAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_86/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:15:21.363412013 -0500\n@@ -185,8 +185,9 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n+                        final double functionValueAccuracy = getFunctionValueAccuracy();\n+                        this.allowed = AllowedSolution.ANY_SIDE;\n+\t\t\t\t\t\tf0 = computeObjectiveValue(x0);\n                     }\n                     break;\n                 default:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double initial=getStartValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 161, 
          "faulty": "final double fx=computeObjectiveValue(x);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 116, 
          "faulty": "this.allowed=allowedSolution;", 
          "type": "InsertBefore", 
          "seed": "final double functionValueAccuracy=getFunctionValueAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double initial=getStartValue();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1172/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:24:46.879872285 -0500\n@@ -113,7 +113,8 @@\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue,\n                         final AllowedSolution allowedSolution) {\n-        this.allowed = allowedSolution;\n+        final double functionValueAccuracy = getFunctionValueAccuracy();\n+\t\tthis.allowed = allowedSolution;\n         return super.solve(maxEval, f, min, max, startValue);\n     }\n \n@@ -121,7 +122,8 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        double x2 = max;\n+\t\treturn solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n     /** {@inheritDoc} */\n@@ -138,10 +140,6 @@\n         if (f0 == 0.0) {\n             return x0;\n         }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -158,7 +156,8 @@\n         while (true) {\n             // Calculate the next approximation.\n             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n-            final double fx = computeObjectiveValue(x);\n+            int start = 0;\n+\t\t\tfinal double fx = computeObjectiveValue(x);\n \n             // If the new approximation is the exact root, return it. Since\n             // this is not an under-approximation or an over-approximation,\n@@ -183,11 +182,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "inverted=!inverted;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double y1=computeObjectiveValue(x1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 116, 
          "faulty": "this.allowed=allowedSolution;", 
          "type": "InsertBefore", 
          "seed": "final double functionValueAccuracy=getFunctionValueAccuracy();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_798/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:21:52.163041081 -0500\n@@ -113,7 +113,8 @@\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue,\n                         final AllowedSolution allowedSolution) {\n-        this.allowed = allowedSolution;\n+        final double functionValueAccuracy = getFunctionValueAccuracy();\n+\t\tthis.allowed = allowedSolution;\n         return super.solve(maxEval, f, min, max, startValue);\n     }\n \n@@ -185,8 +186,32 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n+                        if (f1 * fx < 0) {\n+\t\t\t\t\t\t\tx0 = x1;\n+\t\t\t\t\t\t\tf0 = f1;\n+\t\t\t\t\t\t\tinverted = !inverted;\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tswitch (method) {\n+\t\t\t\t\t\t\tcase ILLINOIS:\n+\t\t\t\t\t\t\t\tf0 *= 0.5;\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\tcase PEGASUS:\n+\t\t\t\t\t\t\t\tf0 *= f1 / (f1 + fx);\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\tcase REGULA_FALSI:\n+\t\t\t\t\t\t\t\tif (x == x1) {\n+\t\t\t\t\t\t\t\t\tx0 = 0.5 * (x0 + x1 - FastMath.max(rtol\n+\t\t\t\t\t\t\t\t\t\t\t* FastMath.abs(x1), atol));\n+\t\t\t\t\t\t\t\t\tf0 = computeObjectiveValue(x0);\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\tdefault:\n+\t\t\t\t\t\t\t\tthrow new MathInternalError();\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+                        inverted = !inverted;\n+\t\t\t\t\t\tdouble y1 = computeObjectiveValue(x1);\n+\t\t\t\t\t\tf0 = computeObjectiveValue(x0);\n                     }\n                     break;\n                 default:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "if (FastMath.abs(f1) <= ftol) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  if (inverted) {\n    return x1;\n  }\nbreak;\ncase RIGHT_SIDE:\nif (!inverted) {\nreturn x1;\n}\nbreak;\ncase BELOW_SIDE:\nif (f1 <= 0) {\nreturn x1;\n}\nbreak;\ncase ABOVE_SIDE:\nif (f1 >= 0) {\nreturn x1;\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "final double ftol=getFunctionValueAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "f0=f1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "double f1=computeObjectiveValue(x1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 176, 
          "faulty": "inverted=!inverted;", 
          "type": "InsertBefore", 
          "seed": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1831/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:29:59.984998526 -0500\n@@ -132,16 +132,6 @@\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -173,7 +163,12 @@\n                 // the interval.\n                 x0 = x1;\n                 f0 = f1;\n-                inverted = !inverted;\n+                if (x == x1) {\n+\t\t\t\t\tx0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),\n+\t\t\t\t\t\t\tatol));\n+\t\t\t\t\tf0 = computeObjectiveValue(x0);\n+\t\t\t\t}\n+\t\t\t\tinverted = !inverted;\n             } else {\n                 switch (method) {\n                 case ILLINOIS:\n@@ -183,11 +178,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    int agingA = 0;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +227,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1419/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:26:49.799558221 -0500\n@@ -132,16 +132,6 @@\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -183,11 +173,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    int agingA = 0;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +222,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 161, 
          "faulty": "final double fx=computeObjectiveValue(x);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 151, 
          "faulty": "final double rtol=getRelativeAccuracy();", 
          "type": "InsertBefore", 
          "seed": "if (f1 == 0.0) {\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java", 
          "line": 310, 
          "faulty": "return (fLo >= 0 && fHi <= 0) || (fLo <= 0 && fHi >= 0);", 
          "type": "InsertBefore", 
          "seed": "if (function == null) {\n  throw new NullArgumentException(LocalizedFormats.FUNCTION);\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1487/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:27:19.664429507 -0500\n@@ -121,7 +121,8 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        double x2 = max;\n+\t\treturn solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n     /** {@inheritDoc} */\n@@ -132,23 +133,16 @@\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n         // Get accuracies.\n         final double ftol = getFunctionValueAccuracy();\n         final double atol = getAbsoluteAccuracy();\n-        final double rtol = getRelativeAccuracy();\n+        if (f1 == 0.0) {\n+\t\t\treturn x1;\n+\t\t}\n+\t\tfinal double rtol = getRelativeAccuracy();\n \n         // Keep track of inverted intervals, meaning that the left bound is\n         // larger than the right bound.\n@@ -158,7 +152,8 @@\n         while (true) {\n             // Calculate the next approximation.\n             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n-            final double fx = computeObjectiveValue(x);\n+            int start = 0;\n+\t\t\tfinal double fx = computeObjectiveValue(x);\n \n             // If the new approximation is the exact root, return it. Since\n             // this is not an under-approximation or an over-approximation,\n@@ -183,11 +178,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +227,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-02 11:55:31.845022991 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1487/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-02 12:27:19.664429507 -0500\n@@ -307,7 +307,10 @@\n         }\n         final double fLo = function.value(lower);\n         final double fHi = function.value(upper);\n-        return (fLo >= 0 && fHi <= 0) || (fLo <= 0 && fHi >= 0);\n+        if (function == null) {\n+\t\t\tthrow new NullArgumentException(LocalizedFormats.FUNCTION);\n+\t\t}\n+\t\treturn (fLo >= 0 && fHi <= 0) || (fLo <= 0 && fHi >= 0);\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "final double absoluteAccuracy=getAbsoluteAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "double x0=getMin();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1560/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:27:50.041308127 -0500\n@@ -183,11 +183,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 132, 
          "faulty": "double f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 198, 
          "faulty": "x1=x;", 
          "type": "InsertBefore", 
          "seed": "double x2=0.5 * (x0 + x1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "double y1=computeObjectiveValue(x1);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_244/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:16:48.114151735 -0500\n@@ -121,7 +121,8 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        double x2 = max;\n+\t\treturn solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n     /** {@inheritDoc} */\n@@ -129,7 +130,8 @@\n         // Get initial solution\n         double x0 = getMin();\n         double x1 = getMax();\n-        double f0 = computeObjectiveValue(x0);\n+        int agingA = 0;\n+\t\tdouble f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n         // If one of the bounds is the exact root, return it. Since these are\n@@ -185,7 +187,7 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n+                        double y1 = computeObjectiveValue(x1);\n                         f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n@@ -194,7 +196,8 @@\n                     throw new MathInternalError();\n                 }\n             }\n-            // Update from [x0, x1] to [x0, x].\n+            double x2 = 0.5 * (x0 + x1);\n+\t\t\t// Update from [x0, x1] to [x0, x].\n             x1 = x;\n             f1 = fx;\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "if (FastMath.abs(f1) <= ftol) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  if (inverted) {\n    return x1;\n  }\nbreak;\ncase RIGHT_SIDE:\nif (!inverted) {\nreturn x1;\n}\nbreak;\ncase BELOW_SIDE:\nif (f1 <= 0) {\nreturn x1;\n}\nbreak;\ncase ABOVE_SIDE:\nif (f1 >= 0) {\nreturn x1;\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "final double initial=getStartValue();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1746/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:29:20.555888668 -0500\n@@ -132,16 +132,6 @@\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -183,11 +173,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    int agingA = 0;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +222,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingB=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "if (f1 == 0.0) {\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java", 
          "line": 305, 
          "faulty": "if (function == null) {\n  throw new NullArgumentException(LocalizedFormats.FUNCTION);\n}", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_133/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:15:43.936126704 -0500\n@@ -183,11 +183,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-02 11:55:31.845022991 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_133/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-02 12:15:43.940126831 -0500\n@@ -302,9 +302,6 @@\n     public static boolean isBracketing(UnivariateRealFunction function,\n                                        final double lower,\n                                        final double upper) {\n-        if (function == null) {\n-            throw new NullArgumentException(LocalizedFormats.FUNCTION);\n-        }\n         final double fLo = function.value(lower);\n         final double fHi = function.value(upper);\n         return (fLo >= 0 && fHi <= 0) || (fLo <= 0 && fHi >= 0);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 132, 
          "faulty": "double f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 198, 
          "faulty": "x1=x;", 
          "type": "InsertBefore", 
          "seed": "double x2=0.5 * (x0 + x1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "double y1=computeObjectiveValue(x1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 150, 
          "faulty": "final double atol=getAbsoluteAccuracy();", 
          "type": "InsertBefore", 
          "seed": "final double absoluteAccuracy=getAbsoluteAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "return inverted ? x1 : x0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_327/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:17:27.355363578 -0500\n@@ -121,7 +121,8 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        double x2 = max;\n+\t\treturn solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n     /** {@inheritDoc} */\n@@ -129,7 +130,8 @@\n         // Get initial solution\n         double x0 = getMin();\n         double x1 = getMax();\n-        double f0 = computeObjectiveValue(x0);\n+        int agingA = 0;\n+\t\tdouble f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n         // If one of the bounds is the exact root, return it. Since these are\n@@ -147,7 +149,8 @@\n \n         // Get accuracies.\n         final double ftol = getFunctionValueAccuracy();\n-        final double atol = getAbsoluteAccuracy();\n+        final double absoluteAccuracy = getAbsoluteAccuracy();\n+\t\tfinal double atol = getAbsoluteAccuracy();\n         final double rtol = getRelativeAccuracy();\n \n         // Keep track of inverted intervals, meaning that the left bound is\n@@ -185,8 +188,7 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n+                        double y1 = computeObjectiveValue(x1);\n                     }\n                     break;\n                 default:\n@@ -194,7 +196,8 @@\n                     throw new MathInternalError();\n                 }\n             }\n-            // Update from [x0, x1] to [x0, x].\n+            double x2 = 0.5 * (x0 + x1);\n+\t\t\t// Update from [x0, x1] to [x0, x].\n             x1 = x;\n             f1 = fx;\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "final double functionValueAccuracy=getFunctionValueAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_42/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:14:56.978627572 -0500\n@@ -121,7 +121,8 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        double x2 = max;\n+\t\treturn solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n     /** {@inheritDoc} */\n@@ -185,7 +186,7 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n+                        final double functionValueAccuracy = getFunctionValueAccuracy();\n                         f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 161, 
          "faulty": "final double fx=computeObjectiveValue(x);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 151, 
          "faulty": "final double rtol=getRelativeAccuracy();", 
          "type": "InsertBefore", 
          "seed": "if (f1 == 0.0) {\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "final double absoluteAccuracy=getAbsoluteAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "double x0=getMin();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1462/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:27:08.568106692 -0500\n@@ -121,7 +121,8 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        double x2 = max;\n+\t\treturn solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n     /** {@inheritDoc} */\n@@ -132,23 +133,16 @@\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n         // Get accuracies.\n         final double ftol = getFunctionValueAccuracy();\n         final double atol = getAbsoluteAccuracy();\n-        final double rtol = getRelativeAccuracy();\n+        if (f1 == 0.0) {\n+\t\t\treturn x1;\n+\t\t}\n+\t\tfinal double rtol = getRelativeAccuracy();\n \n         // Keep track of inverted intervals, meaning that the left bound is\n         // larger than the right bound.\n@@ -158,7 +152,8 @@\n         while (true) {\n             // Calculate the next approximation.\n             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n-            final double fx = computeObjectiveValue(x);\n+            int start = 0;\n+\t\t\tfinal double fx = computeObjectiveValue(x);\n \n             // If the new approximation is the exact root, return it. Since\n             // this is not an under-approximation or an over-approximation,\n@@ -183,11 +178,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +227,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Delete", 
          "seed": "double f0=computeObjectiveValue(x0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Replace", 
          "seed": "final double max=getMax();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_915/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:22:45.480520425 -0500\n@@ -121,7 +121,8 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        double x2 = max;\n+\t\treturn solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n     /** {@inheritDoc} */\n@@ -132,12 +133,7 @@\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n+        final double max = getMax();\n         if (f1 == 0.0) {\n             return x1;\n         }\n@@ -183,11 +179,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +228,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    ;\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double initial=getStartValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1221/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:25:08.380530730 -0500\n@@ -121,7 +121,8 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        double x2 = max;\n+\t\treturn solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n     /** {@inheritDoc} */\n@@ -183,11 +184,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingB=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 198, 
          "faulty": "x1=x;", 
          "type": "InsertBefore", 
          "seed": "double x2=0.5 * (x0 + x1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "double y1=computeObjectiveValue(x1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 150, 
          "faulty": "final double atol=getAbsoluteAccuracy();", 
          "type": "InsertBefore", 
          "seed": "int agingB=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "inverted=!inverted;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_334/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:17:29.795438071 -0500\n@@ -121,7 +121,8 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        double x2 = max;\n+\t\treturn solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n     /** {@inheritDoc} */\n@@ -147,7 +148,8 @@\n \n         // Get accuracies.\n         final double ftol = getFunctionValueAccuracy();\n-        final double atol = getAbsoluteAccuracy();\n+        int agingB = 0;\n+\t\tfinal double atol = getAbsoluteAccuracy();\n         final double rtol = getRelativeAccuracy();\n \n         // Keep track of inverted intervals, meaning that the left bound is\n@@ -183,18 +185,15 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n                     throw new MathInternalError();\n                 }\n             }\n-            // Update from [x0, x1] to [x0, x].\n+            double x2 = 0.5 * (x0 + x1);\n+\t\t\t// Update from [x0, x1] to [x0, x].\n             x1 = x;\n             f1 = fx;\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double initial=getStartValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Delete", 
          "seed": "f1=fx;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1219/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:25:07.748511470 -0500\n@@ -121,7 +121,8 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        double x2 = max;\n+\t\treturn solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n     /** {@inheritDoc} */\n@@ -183,11 +184,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +233,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    ;\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1048/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:23:51.490333855 -0500\n@@ -183,11 +183,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 160, 
          "faulty": "final double x=x1 - ((f1 * (x1 - x0)) / (f1 - f0));", 
          "type": "InsertBefore", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "final double absoluteAccuracy=getAbsoluteAccuracy();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1031/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:23:43.462114223 -0500\n@@ -121,7 +121,8 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        double x2 = max;\n+\t\treturn solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n     /** {@inheritDoc} */\n@@ -156,7 +157,8 @@\n \n         // Keep finding better approximations.\n         while (true) {\n-            // Calculate the next approximation.\n+            int numIterations = 0;\n+\t\t\t// Calculate the next approximation.\n             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n             final double fx = computeObjectiveValue(x);\n \n@@ -183,11 +185,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 150, 
          "faulty": "final double atol=getAbsoluteAccuracy();", 
          "type": "InsertBefore", 
          "seed": "final double initial=getStartValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 161, 
          "faulty": "final double fx=computeObjectiveValue(x);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 151, 
          "faulty": "final double rtol=getRelativeAccuracy();", 
          "type": "InsertBefore", 
          "seed": "if (f1 == 0.0) {\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "double x0=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "final double absoluteAccuracy=getAbsoluteAccuracy();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1465/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:27:09.804142704 -0500\n@@ -121,7 +121,8 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        double x2 = max;\n+\t\treturn solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n     /** {@inheritDoc} */\n@@ -132,12 +133,6 @@\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n         if (f1 == 0.0) {\n             return x1;\n         }\n@@ -147,8 +142,12 @@\n \n         // Get accuracies.\n         final double ftol = getFunctionValueAccuracy();\n-        final double atol = getAbsoluteAccuracy();\n-        final double rtol = getRelativeAccuracy();\n+        final double initial = getStartValue();\n+\t\tfinal double atol = getAbsoluteAccuracy();\n+        if (f1 == 0.0) {\n+\t\t\treturn x1;\n+\t\t}\n+\t\tfinal double rtol = getRelativeAccuracy();\n \n         // Keep track of inverted intervals, meaning that the left bound is\n         // larger than the right bound.\n@@ -158,7 +157,8 @@\n         while (true) {\n             // Calculate the next approximation.\n             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n-            final double fx = computeObjectiveValue(x);\n+            int start = 0;\n+\t\t\tfinal double fx = computeObjectiveValue(x);\n \n             // If the new approximation is the exact root, return it. Since\n             // this is not an under-approximation or an over-approximation,\n@@ -183,11 +183,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +232,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 132, 
          "faulty": "double f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double y1=computeObjectiveValue(x1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Delete", 
          "seed": "double min=getMin();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 133, 
          "faulty": "double f1=computeObjectiveValue(x1);", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_336/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:17:30.407456741 -0500\n@@ -129,8 +129,10 @@\n         // Get initial solution\n         double x0 = getMin();\n         double x1 = getMax();\n-        double f0 = computeObjectiveValue(x0);\n-        double f1 = computeObjectiveValue(x1);\n+        int agingA = 0;\n+\t\tdouble f0 = computeObjectiveValue(x0);\n+        final UnivariateRealSolver solver = new BrentSolver();\n+\t\tdouble f1 = computeObjectiveValue(x1);\n \n         // If one of the bounds is the exact root, return it. Since these are\n         // not under-approximations or over-approximations, we can return them\n@@ -186,7 +188,8 @@\n                     // Nothing.\n                     if (x == x1) {\n                         x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n+                        double y1 = computeObjectiveValue(x1);\n+\t\t\t\t\t\tf0 = computeObjectiveValue(x0);\n                     }\n                     break;\n                 default:\n@@ -236,7 +239,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    ;\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java", 
          "line": 305, 
          "faulty": "if (function == null) {\n  throw new NullArgumentException(LocalizedFormats.FUNCTION);\n}", 
          "type": "Delete", 
          "seed": "Complex pv=null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1571/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:27:54.933448969 -0500\n@@ -132,12 +132,6 @@\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n         if (f1 == 0.0) {\n             return x1;\n         }\n@@ -183,11 +177,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    int agingA = 0;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +226,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-02 11:55:31.845022991 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1571/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-02 12:27:54.937449084 -0500\n@@ -302,9 +302,6 @@\n     public static boolean isBracketing(UnivariateRealFunction function,\n                                        final double lower,\n                                        final double upper) {\n-        if (function == null) {\n-            throw new NullArgumentException(LocalizedFormats.FUNCTION);\n-        }\n         final double fLo = function.value(lower);\n         final double fHi = function.value(upper);\n         return (fLo >= 0 && fHi <= 0) || (fLo <= 0 && fHi >= 0);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingB=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double y1=computeObjectiveValue(x1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 150, 
          "faulty": "final double atol=getAbsoluteAccuracy();", 
          "type": "InsertBefore", 
          "seed": "int agingB=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "inverted=!inverted;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_463/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:18:38.469498748 -0500\n@@ -147,7 +147,8 @@\n \n         // Get accuracies.\n         final double ftol = getFunctionValueAccuracy();\n-        final double atol = getAbsoluteAccuracy();\n+        int agingB = 0;\n+\t\tfinal double atol = getAbsoluteAccuracy();\n         final double rtol = getRelativeAccuracy();\n \n         // Keep track of inverted intervals, meaning that the left bound is\n@@ -183,11 +184,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 161, 
          "faulty": "final double fx=computeObjectiveValue(x);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1472/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:27:12.236213522 -0500\n@@ -132,16 +132,6 @@\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -158,7 +148,8 @@\n         while (true) {\n             // Calculate the next approximation.\n             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n-            final double fx = computeObjectiveValue(x);\n+            int start = 0;\n+\t\t\tfinal double fx = computeObjectiveValue(x);\n \n             // If the new approximation is the exact root, return it. Since\n             // this is not an under-approximation or an over-approximation,\n@@ -183,11 +174,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +223,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 161, 
          "faulty": "final double fx=computeObjectiveValue(x);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "final double absoluteAccuracy=getAbsoluteAccuracy();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1467/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:27:10.412160412 -0500\n@@ -158,7 +158,8 @@\n         while (true) {\n             // Calculate the next approximation.\n             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n-            final double fx = computeObjectiveValue(x);\n+            int start = 0;\n+\t\t\tfinal double fx = computeObjectiveValue(x);\n \n             // If the new approximation is the exact root, return it. Since\n             // this is not an under-approximation or an over-approximation,\n@@ -183,11 +184,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +233,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Delete", 
          "seed": "final double rtol=getRelativeAccuracy();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_956/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:23:10.993223446 -0500\n@@ -185,7 +185,29 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n+                        if (f1 * fx < 0) {\n+\t\t\t\t\t\t\tx0 = x1;\n+\t\t\t\t\t\t\tf0 = f1;\n+\t\t\t\t\t\t\tinverted = !inverted;\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tswitch (method) {\n+\t\t\t\t\t\t\tcase ILLINOIS:\n+\t\t\t\t\t\t\t\tf0 *= 0.5;\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\tcase PEGASUS:\n+\t\t\t\t\t\t\t\tf0 *= f1 / (f1 + fx);\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\tcase REGULA_FALSI:\n+\t\t\t\t\t\t\t\tif (x == x1) {\n+\t\t\t\t\t\t\t\t\tx0 = 0.5 * (x0 + x1 - FastMath.max(rtol\n+\t\t\t\t\t\t\t\t\t\t\t* FastMath.abs(x1), atol));\n+\t\t\t\t\t\t\t\t\tf0 = computeObjectiveValue(x0);\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\tdefault:\n+\t\t\t\t\t\t\t\tthrow new MathInternalError();\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n                         f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n@@ -236,7 +258,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    ;\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 116, 
          "faulty": "this.allowed=allowedSolution;", 
          "type": "InsertBefore", 
          "seed": "final double functionValueAccuracy=getFunctionValueAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double initial=getStartValue();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1261/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:25:27.121099393 -0500\n@@ -113,7 +113,8 @@\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue,\n                         final AllowedSolution allowedSolution) {\n-        this.allowed = allowedSolution;\n+        final double functionValueAccuracy = getFunctionValueAccuracy();\n+\t\tthis.allowed = allowedSolution;\n         return super.solve(maxEval, f, min, max, startValue);\n     }\n \n@@ -121,7 +122,8 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        double x2 = max;\n+\t\treturn solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n     /** {@inheritDoc} */\n@@ -138,10 +140,6 @@\n         if (f0 == 0.0) {\n             return x0;\n         }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -183,11 +181,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 161, 
          "faulty": "final double fx=computeObjectiveValue(x);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1545/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:27:43.905131221 -0500\n@@ -132,12 +132,6 @@\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n         if (f1 == 0.0) {\n             return x1;\n         }\n@@ -158,7 +152,8 @@\n         while (true) {\n             // Calculate the next approximation.\n             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n-            final double fx = computeObjectiveValue(x);\n+            int start = 0;\n+\t\t\tfinal double fx = computeObjectiveValue(x);\n \n             // If the new approximation is the exact root, return it. Since\n             // this is not an under-approximation or an over-approximation,\n@@ -183,11 +178,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +227,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double initial=getStartValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 161, 
          "faulty": "final double fx=computeObjectiveValue(x);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 146, 
          "faulty": "verifyBracketing(x0,x1);", 
          "type": "InsertBefore", 
          "seed": "int agingA=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1114/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:24:19.943110433 -0500\n@@ -121,7 +121,8 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        double x2 = max;\n+\t\treturn solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n     /** {@inheritDoc} */\n@@ -142,7 +143,8 @@\n             return x1;\n         }\n \n-        // Verify bracketing of initial solution.\n+        int agingA = 0;\n+\t\t// Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n         // Get accuracies.\n@@ -158,7 +160,8 @@\n         while (true) {\n             // Calculate the next approximation.\n             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n-            final double fx = computeObjectiveValue(x);\n+            int start = 0;\n+\t\t\tfinal double fx = computeObjectiveValue(x);\n \n             // If the new approximation is the exact root, return it. Since\n             // this is not an under-approximation or an over-approximation,\n@@ -183,11 +186,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +235,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "final double functionValueAccuracy=getFunctionValueAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "final double max=getMax();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "double initial=getStartValue();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_284/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:17:07.766762000 -0500\n@@ -138,10 +138,6 @@\n         if (f0 == 0.0) {\n             return x0;\n         }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -185,8 +181,8 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n+                        final double functionValueAccuracy = getFunctionValueAccuracy();\n+                        double initial = getStartValue();\n                     }\n                     break;\n                 default:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double initial=getStartValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "final double startValue=getStartValue();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1149/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:24:35.351529882 -0500\n@@ -138,10 +138,6 @@\n         if (f0 == 0.0) {\n             return x0;\n         }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -183,11 +179,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java", 
          "line": 305, 
          "faulty": "if (function == null) {\n  throw new NullArgumentException(LocalizedFormats.FUNCTION);\n}", 
          "type": "Delete", 
          "seed": "Complex pv=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java", 
          "line": 305, 
          "faulty": "if (function == null) {\n  throw new NullArgumentException(LocalizedFormats.FUNCTION);\n}", 
          "type": "Delete", 
          "seed": "final double rtol=getRelativeAccuracy();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1624/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:28:24.106285353 -0500\n@@ -132,12 +132,6 @@\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n         if (f1 == 0.0) {\n             return x1;\n         }\n@@ -183,11 +177,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    int agingA = 0;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +226,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-02 11:55:31.845022991 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1624/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-02 12:28:24.110285466 -0500\n@@ -302,9 +302,6 @@\n     public static boolean isBracketing(UnivariateRealFunction function,\n                                        final double lower,\n                                        final double upper) {\n-        if (function == null) {\n-            throw new NullArgumentException(LocalizedFormats.FUNCTION);\n-        }\n         final double fLo = function.value(lower);\n         final double fHi = function.value(upper);\n         return (fLo >= 0 && fHi <= 0) || (fLo <= 0 && fHi >= 0);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingB=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "final double max=getMax();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_421/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:18:11.956710930 -0500\n@@ -121,7 +121,8 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        double x2 = max;\n+\t\treturn solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n     /** {@inheritDoc} */\n@@ -138,10 +139,6 @@\n         if (f0 == 0.0) {\n             return x0;\n         }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -183,11 +180,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 161, 
          "faulty": "final double fx=computeObjectiveValue(x);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "double x2=0.5 * (x0 + x1);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1636/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:28:30.350463637 -0500\n@@ -132,16 +132,6 @@\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -158,7 +148,8 @@\n         while (true) {\n             // Calculate the next approximation.\n             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n-            final double fx = computeObjectiveValue(x);\n+            int start = 0;\n+\t\t\tfinal double fx = computeObjectiveValue(x);\n \n             // If the new approximation is the exact root, return it. Since\n             // this is not an under-approximation or an over-approximation,\n@@ -183,11 +174,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    int agingA = 0;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +223,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingB=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 132, 
          "faulty": "double f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "final double startValue=getStartValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double y1=computeObjectiveValue(x1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 116, 
          "faulty": "this.allowed=allowedSolution;", 
          "type": "InsertBefore", 
          "seed": "final double functionValueAccuracy=getFunctionValueAccuracy();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_751/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:21:24.106256283 -0500\n@@ -113,7 +113,8 @@\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue,\n                         final AllowedSolution allowedSolution) {\n-        this.allowed = allowedSolution;\n+        final double functionValueAccuracy = getFunctionValueAccuracy();\n+\t\tthis.allowed = allowedSolution;\n         return super.solve(maxEval, f, min, max, startValue);\n     }\n \n@@ -129,7 +130,8 @@\n         // Get initial solution\n         double x0 = getMin();\n         double x1 = getMax();\n-        double f0 = computeObjectiveValue(x0);\n+        final double startValue = getStartValue();\n+\t\tdouble f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n         // If one of the bounds is the exact root, return it. Since these are\n@@ -185,8 +187,30 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n+                        if (f1 * fx < 0) {\n+\t\t\t\t\t\t\tx0 = x1;\n+\t\t\t\t\t\t\tf0 = f1;\n+\t\t\t\t\t\t\tinverted = !inverted;\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tswitch (method) {\n+\t\t\t\t\t\t\tcase ILLINOIS:\n+\t\t\t\t\t\t\t\tf0 *= 0.5;\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\tcase PEGASUS:\n+\t\t\t\t\t\t\t\tf0 *= f1 / (f1 + fx);\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\tcase REGULA_FALSI:\n+\t\t\t\t\t\t\t\tif (x == x1) {\n+\t\t\t\t\t\t\t\t\tx0 = 0.5 * (x0 + x1 - FastMath.max(rtol\n+\t\t\t\t\t\t\t\t\t\t\t* FastMath.abs(x1), atol));\n+\t\t\t\t\t\t\t\t\tf0 = computeObjectiveValue(x0);\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\tdefault:\n+\t\t\t\t\t\t\t\tthrow new MathInternalError();\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+                        double y1 = computeObjectiveValue(x1);\n                     }\n                     break;\n                 default:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 161, 
          "faulty": "final double fx=computeObjectiveValue(x);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 151, 
          "faulty": "final double rtol=getRelativeAccuracy();", 
          "type": "InsertBefore", 
          "seed": "if (f1 == 0.0) {\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "double x0=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java", 
          "line": 371, 
          "faulty": "if (function == null) {\n  throw new NullArgumentException(LocalizedFormats.FUNCTION);\n}", 
          "type": "Delete", 
          "seed": "return doSolve();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1370/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:26:29.078948874 -0500\n@@ -121,7 +121,8 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        double x2 = max;\n+\t\treturn solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n     /** {@inheritDoc} */\n@@ -132,23 +133,16 @@\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n         // Get accuracies.\n         final double ftol = getFunctionValueAccuracy();\n         final double atol = getAbsoluteAccuracy();\n-        final double rtol = getRelativeAccuracy();\n+        if (f1 == 0.0) {\n+\t\t\treturn x1;\n+\t\t}\n+\t\tfinal double rtol = getRelativeAccuracy();\n \n         // Keep track of inverted intervals, meaning that the left bound is\n         // larger than the right bound.\n@@ -158,7 +152,8 @@\n         while (true) {\n             // Calculate the next approximation.\n             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n-            final double fx = computeObjectiveValue(x);\n+            int start = 0;\n+\t\t\tfinal double fx = computeObjectiveValue(x);\n \n             // If the new approximation is the exact root, return it. Since\n             // this is not an under-approximation or an over-approximation,\n@@ -183,11 +178,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +227,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-02 11:55:31.845022991 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1370/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-02 12:26:29.082948992 -0500\n@@ -368,9 +368,6 @@\n     public static void verifyBracketing(UnivariateRealFunction function,\n                                         final double lower,\n                                         final double upper) {\n-        if (function == null) {\n-            throw new NullArgumentException(LocalizedFormats.FUNCTION);\n-        }\n         verifyInterval(lower, upper);\n         if (!isBracketing(function, lower, upper)) {\n             throw new NoBracketingException(lower, upper,\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double initial=getStartValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Delete", 
          "seed": "f1=fx;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1225/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:25:10.232587140 -0500\n@@ -121,7 +121,9 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        double x2 = max;\n+\t\t\t\t\t\t\tfinal UnivariateRealSolver solver = new BrentSolver();\n+\t\treturn solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n     /** {@inheritDoc} */\n@@ -183,11 +185,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +234,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    ;\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 150, 
          "faulty": "final double atol=getAbsoluteAccuracy();", 
          "type": "InsertBefore", 
          "seed": "final double absoluteAccuracy=getAbsoluteAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java", 
          "line": 305, 
          "faulty": "if (function == null) {\n  throw new NullArgumentException(LocalizedFormats.FUNCTION);\n}", 
          "type": "InsertBefore", 
          "seed": "UnivariateRealSolverUtils.verifyInterval(lower,upper);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_325/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:17:26.747345001 -0500\n@@ -147,7 +147,8 @@\n \n         // Get accuracies.\n         final double ftol = getFunctionValueAccuracy();\n-        final double atol = getAbsoluteAccuracy();\n+        final double absoluteAccuracy = getAbsoluteAccuracy();\n+\t\tfinal double atol = getAbsoluteAccuracy();\n         final double rtol = getRelativeAccuracy();\n \n         // Keep track of inverted intervals, meaning that the left bound is\n@@ -185,7 +186,29 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n+                        if (f1 * fx < 0) {\n+\t\t\t\t\t\t\tx0 = x1;\n+\t\t\t\t\t\t\tf0 = f1;\n+\t\t\t\t\t\t\tinverted = !inverted;\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tswitch (method) {\n+\t\t\t\t\t\t\tcase ILLINOIS:\n+\t\t\t\t\t\t\t\tf0 *= 0.5;\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\tcase PEGASUS:\n+\t\t\t\t\t\t\t\tf0 *= f1 / (f1 + fx);\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\tcase REGULA_FALSI:\n+\t\t\t\t\t\t\t\tif (x == x1) {\n+\t\t\t\t\t\t\t\t\tx0 = 0.5 * (x0 + x1 - FastMath.max(rtol\n+\t\t\t\t\t\t\t\t\t\t\t* FastMath.abs(x1), atol));\n+\t\t\t\t\t\t\t\t\tf0 = computeObjectiveValue(x0);\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\tdefault:\n+\t\t\t\t\t\t\t\tthrow new MathInternalError();\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n                         f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n\n\n--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-02 11:55:31.845022991 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_325/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-02 12:17:26.747345001 -0500\n@@ -302,7 +302,9 @@\n     public static boolean isBracketing(UnivariateRealFunction function,\n                                        final double lower,\n                                        final double upper) {\n-        if (function == null) {\n+        UnivariateRealSolverUtils\n+\t\t\t\t\t\t\t\t\t\t\t\t.verifyInterval(lower, upper);\n+\t\tif (function == null) {\n             throw new NullArgumentException(LocalizedFormats.FUNCTION);\n         }\n         final double fLo = function.value(lower);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double initial=getStartValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 161, 
          "faulty": "final double fx=computeObjectiveValue(x);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1050/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:23:52.102350588 -0500\n@@ -158,7 +158,8 @@\n         while (true) {\n             // Calculate the next approximation.\n             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n-            final double fx = computeObjectiveValue(x);\n+            int start = 0;\n+\t\t\tfinal double fx = computeObjectiveValue(x);\n \n             // If the new approximation is the exact root, return it. Since\n             // this is not an under-approximation or an over-approximation,\n@@ -183,11 +184,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +233,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingB=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "inverted=!inverted;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "Complex oldz=new Complex(Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_671/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:20:26.796636959 -0500\n@@ -121,7 +121,8 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        double x2 = max;\n+\t\treturn solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n     /** {@inheritDoc} */\n@@ -138,10 +139,6 @@\n         if (f0 == 0.0) {\n             return x0;\n         }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -183,11 +180,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "final double absoluteAccuracy=getAbsoluteAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "double x0=getMin();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "f0=f1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1534/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:27:39.044990900 -0500\n@@ -138,10 +138,6 @@\n         if (f0 == 0.0) {\n             return x0;\n         }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -183,11 +179,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "final double absoluteAccuracy=getAbsoluteAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "double x0=getMin();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "boolean inverted=false;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1732/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:29:14.331712765 -0500\n@@ -138,10 +138,6 @@\n         if (f0 == 0.0) {\n             return x0;\n         }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -183,11 +179,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "double x2=0.5 * (x0 + x1);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1676/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:28:47.726958497 -0500\n@@ -138,10 +138,6 @@\n         if (f0 == 0.0) {\n             return x0;\n         }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -183,11 +179,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    int agingA = 0;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 161, 
          "faulty": "final double fx=computeObjectiveValue(x);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 151, 
          "faulty": "final double rtol=getRelativeAccuracy();", 
          "type": "InsertBefore", 
          "seed": "if (f1 == 0.0) {\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "double x0=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java", 
          "line": 371, 
          "faulty": "if (function == null) {\n  throw new NullArgumentException(LocalizedFormats.FUNCTION);\n}", 
          "type": "Delete", 
          "seed": "return doSolve();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1456/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:27:06.116035215 -0500\n@@ -132,12 +132,6 @@\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n         if (f1 == 0.0) {\n             return x1;\n         }\n@@ -148,7 +142,10 @@\n         // Get accuracies.\n         final double ftol = getFunctionValueAccuracy();\n         final double atol = getAbsoluteAccuracy();\n-        final double rtol = getRelativeAccuracy();\n+        if (f1 == 0.0) {\n+\t\t\treturn x1;\n+\t\t}\n+\t\tfinal double rtol = getRelativeAccuracy();\n \n         // Keep track of inverted intervals, meaning that the left bound is\n         // larger than the right bound.\n@@ -158,7 +155,8 @@\n         while (true) {\n             // Calculate the next approximation.\n             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n-            final double fx = computeObjectiveValue(x);\n+            int start = 0;\n+\t\t\tfinal double fx = computeObjectiveValue(x);\n \n             // If the new approximation is the exact root, return it. Since\n             // this is not an under-approximation or an over-approximation,\n@@ -183,11 +181,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +230,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-02 11:55:31.845022991 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1456/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-02 12:27:06.120035332 -0500\n@@ -368,9 +368,6 @@\n     public static void verifyBracketing(UnivariateRealFunction function,\n                                         final double lower,\n                                         final double upper) {\n-        if (function == null) {\n-            throw new NullArgumentException(LocalizedFormats.FUNCTION);\n-        }\n         verifyInterval(lower, upper);\n         if (!isBracketing(function, lower, upper)) {\n             throw new NoBracketingException(lower, upper,\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 174, 
          "faulty": "x0=x1;", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\n  return x1;\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1744/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:29:19.951871607 -0500\n@@ -132,12 +132,6 @@\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n         if (f1 == 0.0) {\n             return x1;\n         }\n@@ -169,7 +163,11 @@\n \n             // Update the bounds with the new approximation.\n             if (f1 * fx < 0) {\n-                // The value of x1 has switched to the other bound, thus inverting\n+                if (FastMath.abs(x1 - x0) < FastMath.max(\n+\t\t\t\t\t\trtol * FastMath.abs(x1), atol)) {\n+\t\t\t\t\treturn x1;\n+\t\t\t\t}\n+\t\t\t\t// The value of x1 has switched to the other bound, thus inverting\n                 // the interval.\n                 x0 = x1;\n                 f0 = f1;\n@@ -183,11 +181,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    int agingA = 0;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +230,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double initial=getStartValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 161, 
          "faulty": "final double fx=computeObjectiveValue(x);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1275/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:25:33.353287479 -0500\n@@ -158,7 +158,8 @@\n         while (true) {\n             // Calculate the next approximation.\n             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n-            final double fx = computeObjectiveValue(x);\n+            int start = 0;\n+\t\t\tfinal double fx = computeObjectiveValue(x);\n \n             // If the new approximation is the exact root, return it. Since\n             // this is not an under-approximation or an over-approximation,\n@@ -183,11 +184,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +233,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingB=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "if (f1 == 0.0) {\n  return x1;\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_105/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:15:30.183692547 -0500\n@@ -183,11 +183,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingB=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double y1=computeObjectiveValue(x1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 155, 
          "faulty": "boolean inverted=false;", 
          "type": "InsertBefore", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 132, 
          "faulty": "double f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "final double startValue=getStartValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 130, 
          "faulty": "double x0=getMin();", 
          "type": "InsertBefore", 
          "seed": "final double initial=getStartValue();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_569/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:19:37.087211256 -0500\n@@ -121,15 +121,18 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        double x2 = max;\n+\t\treturn solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n     /** {@inheritDoc} */\n     protected final double doSolve() {\n-        // Get initial solution\n+        final double initial = getStartValue();\n+\t\t// Get initial solution\n         double x0 = getMin();\n         double x1 = getMax();\n-        double f0 = computeObjectiveValue(x0);\n+        final double startValue = getStartValue();\n+\t\tdouble f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n         // If one of the bounds is the exact root, return it. Since these are\n@@ -150,7 +153,8 @@\n         final double atol = getAbsoluteAccuracy();\n         final double rtol = getRelativeAccuracy();\n \n-        // Keep track of inverted intervals, meaning that the left bound is\n+        int numIterations = 0;\n+\t\t// Keep track of inverted intervals, meaning that the left bound is\n         // larger than the right bound.\n         boolean inverted = false;\n \n@@ -183,11 +187,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double initial=getStartValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1126/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:24:24.875244778 -0500\n@@ -183,11 +183,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double initial=getStartValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 116, 
          "faulty": "this.allowed=allowedSolution;", 
          "type": "InsertBefore", 
          "seed": "final double functionValueAccuracy=getFunctionValueAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double initial=getStartValue();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1193/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:24:56.164157433 -0500\n@@ -113,7 +113,8 @@\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue,\n                         final AllowedSolution allowedSolution) {\n-        this.allowed = allowedSolution;\n+        final double functionValueAccuracy = getFunctionValueAccuracy();\n+\t\tthis.allowed = allowedSolution;\n         return super.solve(maxEval, f, min, max, startValue);\n     }\n \n@@ -138,10 +139,6 @@\n         if (f0 == 0.0) {\n             return x0;\n         }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -183,11 +180,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 161, 
          "faulty": "final double fx=computeObjectiveValue(x);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 151, 
          "faulty": "final double rtol=getRelativeAccuracy();", 
          "type": "InsertBefore", 
          "seed": "if (f1 == 0.0) {\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "final double absoluteAccuracy=getAbsoluteAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "double x0=getMin();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "double x0=getMin();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "final double x=x1 - ((f1 * (x1 - x0)) / (f1 - f0));"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "if (!inverted) {\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final double functionValueAccuracy=getFunctionValueAccuracy();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1685/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:28:52.123083407 -0500\n@@ -121,7 +121,8 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        double x2 = max;\n+\t\treturn solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n     /** {@inheritDoc} */\n@@ -132,23 +133,16 @@\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n         // Get accuracies.\n         final double ftol = getFunctionValueAccuracy();\n         final double atol = getAbsoluteAccuracy();\n-        final double rtol = getRelativeAccuracy();\n+        if (f1 == 0.0) {\n+\t\t\treturn x1;\n+\t\t}\n+\t\tfinal double rtol = getRelativeAccuracy();\n \n         // Keep track of inverted intervals, meaning that the left bound is\n         // larger than the right bound.\n@@ -158,7 +152,8 @@\n         while (true) {\n             // Calculate the next approximation.\n             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n-            final double fx = computeObjectiveValue(x);\n+            int start = 0;\n+\t\t\tfinal double fx = computeObjectiveValue(x);\n \n             // If the new approximation is the exact root, return it. Since\n             // this is not an under-approximation or an over-approximation,\n@@ -183,11 +178,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +227,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 132, 
          "faulty": "double f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "final double relativeAccuracy=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 150, 
          "faulty": "final double atol=getAbsoluteAccuracy();", 
          "type": "InsertBefore", 
          "seed": "final double min=getMin();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_455/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:18:34.749388745 -0500\n@@ -129,7 +129,8 @@\n         // Get initial solution\n         double x0 = getMin();\n         double x1 = getMax();\n-        double f0 = computeObjectiveValue(x0);\n+        int agingA = 0;\n+\t\tdouble f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n         // If one of the bounds is the exact root, return it. Since these are\n@@ -147,7 +148,8 @@\n \n         // Get accuracies.\n         final double ftol = getFunctionValueAccuracy();\n-        final double atol = getAbsoluteAccuracy();\n+        final double min = getMin();\n+\t\tfinal double atol = getAbsoluteAccuracy();\n         final double rtol = getRelativeAccuracy();\n \n         // Keep track of inverted intervals, meaning that the left bound is\n@@ -185,8 +187,24 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n+                        final double relativeAccuracy = getRelativeAccuracy();\n+                        if (FastMath.abs(x1 - x0) < FastMath.max(rtol\n+\t\t\t\t\t\t\t\t* FastMath.abs(x1), atol)) {\n+\t\t\t\t\t\t\tswitch (allowed) {\n+\t\t\t\t\t\t\tcase ANY_SIDE:\n+\t\t\t\t\t\t\t\treturn x1;\n+\t\t\t\t\t\t\tcase LEFT_SIDE:\n+\t\t\t\t\t\t\t\treturn inverted ? x1 : x0;\n+\t\t\t\t\t\t\tcase RIGHT_SIDE:\n+\t\t\t\t\t\t\t\treturn inverted ? x0 : x1;\n+\t\t\t\t\t\t\tcase BELOW_SIDE:\n+\t\t\t\t\t\t\t\treturn (f1 <= 0) ? x1 : x0;\n+\t\t\t\t\t\t\tcase ABOVE_SIDE:\n+\t\t\t\t\t\t\t\treturn (f1 >= 0) ? x1 : x0;\n+\t\t\t\t\t\t\tdefault:\n+\t\t\t\t\t\t\t\tthrow new MathInternalError();\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n                     }\n                     break;\n                 default:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingB=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double y1=computeObjectiveValue(x1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_619/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:20:00.775893388 -0500\n@@ -185,8 +185,7 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n+                        double y1 = computeObjectiveValue(x1);\n                     }\n                     break;\n                 default:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_858/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:22:20.999843003 -0500\n@@ -121,7 +121,8 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        double x2 = max;\n+\t\treturn solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n     /** {@inheritDoc} */\n@@ -183,11 +184,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "double y1=computeObjectiveValue(x1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 150, 
          "faulty": "final double atol=getAbsoluteAccuracy();", 
          "type": "InsertBefore", 
          "seed": "int agingB=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "inverted=!inverted;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Replace", 
          "seed": "final double t=getAbsoluteAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "final double x=x1 - ((f1 * (x1 - x0)) / (f1 - f0));"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_361/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:17:42.747831923 -0500\n@@ -138,16 +138,15 @@\n         if (f0 == 0.0) {\n             return x0;\n         }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n+        final double t = getAbsoluteAccuracy();\n \n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n         // Get accuracies.\n         final double ftol = getFunctionValueAccuracy();\n-        final double atol = getAbsoluteAccuracy();\n+        int agingB = 0;\n+\t\tfinal double atol = getAbsoluteAccuracy();\n         final double rtol = getRelativeAccuracy();\n \n         // Keep track of inverted intervals, meaning that the left bound is\n@@ -185,8 +184,13 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n+                        if (x == x1) {\n+\t\t\t\t\t\t\tx0 = 0.5 * (x0 + x1 - FastMath.max(\n+\t\t\t\t\t\t\t\t\trtol * FastMath.abs(x1), atol));\n+\t\t\t\t\t\t\tf0 = computeObjectiveValue(x0);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tdouble y1 = computeObjectiveValue(x1);\n+                        inverted = !inverted;\n                     }\n                     break;\n                 default:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 150, 
          "faulty": "final double atol=getAbsoluteAccuracy();", 
          "type": "InsertBefore", 
          "seed": "final double initial=getStartValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 161, 
          "faulty": "final double fx=computeObjectiveValue(x);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "final double absoluteAccuracy=getAbsoluteAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "double x0=getMin();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double y1=computeObjectiveValue(x1);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1589/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:28:03.589697753 -0500\n@@ -121,7 +121,8 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        double x2 = max;\n+\t\treturn solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n     /** {@inheritDoc} */\n@@ -132,12 +133,6 @@\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n         if (f1 == 0.0) {\n             return x1;\n         }\n@@ -147,7 +142,8 @@\n \n         // Get accuracies.\n         final double ftol = getFunctionValueAccuracy();\n-        final double atol = getAbsoluteAccuracy();\n+        final double initial = getStartValue();\n+\t\tfinal double atol = getAbsoluteAccuracy();\n         final double rtol = getRelativeAccuracy();\n \n         // Keep track of inverted intervals, meaning that the left bound is\n@@ -158,7 +154,8 @@\n         while (true) {\n             // Calculate the next approximation.\n             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n-            final double fx = computeObjectiveValue(x);\n+            int start = 0;\n+\t\t\tfinal double fx = computeObjectiveValue(x);\n \n             // If the new approximation is the exact root, return it. Since\n             // this is not an under-approximation or an over-approximation,\n@@ -183,11 +180,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +229,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "return inverted ? x1 : x0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_370/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:17:46.515946017 -0500\n@@ -183,11 +183,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 174, 
          "faulty": "x0=x1;", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex delta=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Delete", 
          "seed": "return x0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1833/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:30:00.709018837 -0500\n@@ -132,16 +132,6 @@\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -169,7 +159,11 @@\n \n             // Update the bounds with the new approximation.\n             if (f1 * fx < 0) {\n-                // The value of x1 has switched to the other bound, thus inverting\n+                if (FastMath.abs(x1 - x0) < FastMath.max(\n+\t\t\t\t\t\trtol * FastMath.abs(x1), atol)) {\n+\t\t\t\t\treturn x1;\n+\t\t\t\t}\n+\t\t\t\t// The value of x1 has switched to the other bound, thus inverting\n                 // the interval.\n                 x0 = x1;\n                 f0 = f1;\n@@ -183,11 +177,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    int agingA = 0;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +226,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    ;\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 161, 
          "faulty": "final double fx=computeObjectiveValue(x);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "final double absoluteAccuracy=getAbsoluteAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex d2v=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1428/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:26:53.463665549 -0500\n@@ -138,10 +138,6 @@\n         if (f0 == 0.0) {\n             return x0;\n         }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -158,7 +154,8 @@\n         while (true) {\n             // Calculate the next approximation.\n             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n-            final double fx = computeObjectiveValue(x);\n+            int start = 0;\n+\t\t\tfinal double fx = computeObjectiveValue(x);\n \n             // If the new approximation is the exact root, return it. Since\n             // this is not an under-approximation or an over-approximation,\n@@ -183,11 +180,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +229,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 161, 
          "faulty": "final double fx=computeObjectiveValue(x);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 116, 
          "faulty": "this.allowed=allowedSolution;", 
          "type": "InsertBefore", 
          "seed": "final double functionValueAccuracy=getFunctionValueAccuracy();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1573/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:27:55.533466231 -0500\n@@ -113,7 +113,8 @@\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue,\n                         final AllowedSolution allowedSolution) {\n-        this.allowed = allowedSolution;\n+        final double functionValueAccuracy = getFunctionValueAccuracy();\n+\t\tthis.allowed = allowedSolution;\n         return super.solve(maxEval, f, min, max, startValue);\n     }\n \n@@ -132,12 +133,6 @@\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n         if (f1 == 0.0) {\n             return x1;\n         }\n@@ -158,7 +153,8 @@\n         while (true) {\n             // Calculate the next approximation.\n             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n-            final double fx = computeObjectiveValue(x);\n+            int start = 0;\n+\t\t\tfinal double fx = computeObjectiveValue(x);\n \n             // If the new approximation is the exact root, return it. Since\n             // this is not an under-approximation or an over-approximation,\n@@ -183,11 +179,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    int agingA = 0;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +228,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "final double absoluteAccuracy=getAbsoluteAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "double x0=getMin();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1515/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:27:30.428741685 -0500\n@@ -138,10 +138,6 @@\n         if (f0 == 0.0) {\n             return x0;\n         }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -183,11 +179,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex d2v=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "double y1=computeObjectiveValue(x1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 149, 
          "faulty": "final double ftol=getFunctionValueAccuracy();", 
          "type": "InsertBefore", 
          "seed": "if (f1 == 0.0) {\n  return x1;\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1521/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:27:32.820810931 -0500\n@@ -138,14 +138,13 @@\n         if (f0 == 0.0) {\n             return x0;\n         }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n-        // Get accuracies.\n+        if (f1 == 0.0) {\n+\t\t\treturn x1;\n+\t\t}\n+\t\t// Get accuracies.\n         final double ftol = getFunctionValueAccuracy();\n         final double atol = getAbsoluteAccuracy();\n         final double rtol = getRelativeAccuracy();\n@@ -183,11 +182,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 150, 
          "faulty": "final double atol=getAbsoluteAccuracy();", 
          "type": "InsertBefore", 
          "seed": "final double initial=getStartValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double initial=getStartValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 116, 
          "faulty": "this.allowed=allowedSolution;", 
          "type": "InsertBefore", 
          "seed": "final double functionValueAccuracy=getFunctionValueAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double initial=getStartValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 149, 
          "faulty": "final double ftol=getFunctionValueAccuracy();", 
          "type": "InsertBefore", 
          "seed": "final double functionValueAccuracy=getFunctionValueAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "double max=getMax();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1294/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:25:47.465711604 -0500\n@@ -113,7 +113,8 @@\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue,\n                         final AllowedSolution allowedSolution) {\n-        this.allowed = allowedSolution;\n+        final double functionValueAccuracy = getFunctionValueAccuracy();\n+\t\tthis.allowed = allowedSolution;\n         return super.solve(maxEval, f, min, max, startValue);\n     }\n \n@@ -138,16 +139,14 @@\n         if (f0 == 0.0) {\n             return x0;\n         }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n-        // Get accuracies.\n+        final double functionValueAccuracy = getFunctionValueAccuracy();\n+\t\t// Get accuracies.\n         final double ftol = getFunctionValueAccuracy();\n-        final double atol = getAbsoluteAccuracy();\n+        final double initial = getStartValue();\n+\t\tfinal double atol = getAbsoluteAccuracy();\n         final double rtol = getRelativeAccuracy();\n \n         // Keep track of inverted intervals, meaning that the left bound is\n@@ -183,11 +182,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 161, 
          "faulty": "final double fx=computeObjectiveValue(x);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 151, 
          "faulty": "final double rtol=getRelativeAccuracy();", 
          "type": "InsertBefore", 
          "seed": "if (f1 == 0.0) {\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1641/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:28:32.158515214 -0500\n@@ -121,7 +121,8 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        double x2 = max;\n+\t\treturn solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n     /** {@inheritDoc} */\n@@ -132,23 +133,16 @@\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n         // Get accuracies.\n         final double ftol = getFunctionValueAccuracy();\n         final double atol = getAbsoluteAccuracy();\n-        final double rtol = getRelativeAccuracy();\n+        if (f1 == 0.0) {\n+\t\t\treturn x1;\n+\t\t}\n+\t\tfinal double rtol = getRelativeAccuracy();\n \n         // Keep track of inverted intervals, meaning that the left bound is\n         // larger than the right bound.\n@@ -158,7 +152,8 @@\n         while (true) {\n             // Calculate the next approximation.\n             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n-            final double fx = computeObjectiveValue(x);\n+            int start = 0;\n+\t\t\tfinal double fx = computeObjectiveValue(x);\n \n             // If the new approximation is the exact root, return it. Since\n             // this is not an under-approximation or an over-approximation,\n@@ -183,11 +178,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    int agingA = 0;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +227,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1379/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:26:32.863060471 -0500\n@@ -132,16 +132,6 @@\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -183,11 +173,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    int agingA = 0;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +222,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double initial=getStartValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 116, 
          "faulty": "this.allowed=allowedSolution;", 
          "type": "InsertBefore", 
          "seed": "final double functionValueAccuracy=getFunctionValueAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1159/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:24:40.147664705 -0500\n@@ -113,7 +113,8 @@\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue,\n                         final AllowedSolution allowedSolution) {\n-        this.allowed = allowedSolution;\n+        final double functionValueAccuracy = getFunctionValueAccuracy();\n+\t\tthis.allowed = allowedSolution;\n         return super.solve(maxEval, f, min, max, startValue);\n     }\n \n@@ -138,10 +139,6 @@\n         if (f0 == 0.0) {\n             return x0;\n         }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -183,11 +180,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 132, 
          "faulty": "double f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 198, 
          "faulty": "x1=x;", 
          "type": "InsertBefore", 
          "seed": "double x2=0.5 * (x0 + x1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Delete", 
          "seed": "double min=getMin();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 133, 
          "faulty": "double f1=computeObjectiveValue(x1);", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_384/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:17:52.644131120 -0500\n@@ -121,7 +121,8 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        double x2 = max;\n+\t\treturn solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n     /** {@inheritDoc} */\n@@ -129,8 +130,10 @@\n         // Get initial solution\n         double x0 = getMin();\n         double x1 = getMax();\n-        double f0 = computeObjectiveValue(x0);\n-        double f1 = computeObjectiveValue(x1);\n+        int agingA = 0;\n+\t\tdouble f0 = computeObjectiveValue(x0);\n+        final UnivariateRealSolver solver = new BrentSolver();\n+\t\tdouble f1 = computeObjectiveValue(x1);\n \n         // If one of the bounds is the exact root, return it. Since these are\n         // not under-approximations or over-approximations, we can return them\n@@ -185,7 +188,29 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n+                        if (f1 * fx < 0) {\n+\t\t\t\t\t\t\tx0 = x1;\n+\t\t\t\t\t\t\tf0 = f1;\n+\t\t\t\t\t\t\tinverted = !inverted;\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tswitch (method) {\n+\t\t\t\t\t\t\tcase ILLINOIS:\n+\t\t\t\t\t\t\t\tf0 *= 0.5;\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\tcase PEGASUS:\n+\t\t\t\t\t\t\t\tf0 *= f1 / (f1 + fx);\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\tcase REGULA_FALSI:\n+\t\t\t\t\t\t\t\tif (x == x1) {\n+\t\t\t\t\t\t\t\t\tx0 = 0.5 * (x0 + x1 - FastMath.max(rtol\n+\t\t\t\t\t\t\t\t\t\t\t* FastMath.abs(x1), atol));\n+\t\t\t\t\t\t\t\t\tf0 = computeObjectiveValue(x0);\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\tdefault:\n+\t\t\t\t\t\t\t\tthrow new MathInternalError();\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n                         f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n@@ -194,7 +219,8 @@\n                     throw new MathInternalError();\n                 }\n             }\n-            // Update from [x0, x1] to [x0, x].\n+            double x2 = 0.5 * (x0 + x1);\n+\t\t\t// Update from [x0, x1] to [x0, x].\n             x1 = x;\n             f1 = fx;\n \n@@ -236,7 +262,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    ;\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double initial=getStartValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 161, 
          "faulty": "final double fx=computeObjectiveValue(x);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_942/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:23:04.285038873 -0500\n@@ -121,7 +121,8 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        double x2 = max;\n+\t\treturn solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n     /** {@inheritDoc} */\n@@ -158,7 +159,8 @@\n         while (true) {\n             // Calculate the next approximation.\n             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n-            final double fx = computeObjectiveValue(x);\n+            int start = 0;\n+\t\t\tfinal double fx = computeObjectiveValue(x);\n \n             // If the new approximation is the exact root, return it. Since\n             // this is not an under-approximation or an over-approximation,\n@@ -183,11 +185,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_4/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:14:33.645985380 -0500\n@@ -183,11 +183,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingB=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "Complex G2=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "int numIterations=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_765/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:21:30.834444920 -0500\n@@ -183,11 +183,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1575/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:27:56.153484066 -0500\n@@ -132,12 +132,6 @@\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n         if (f1 == 0.0) {\n             return x1;\n         }\n@@ -183,11 +177,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    int agingA = 0;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "double x2=0.5 * (x0 + x1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double x0=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "InsertBefore", 
          "seed": "final double functionValueAccuracy=getFunctionValueAccuracy();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1811/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:29:50.836741674 -0500\n@@ -132,16 +132,6 @@\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -183,11 +173,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    int agingA = 0;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +222,10 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    {\n+\t\t\t\t\t\tfinal double functionValueAccuracy = getFunctionValueAccuracy();\n+\t\t\t\t\t\treturn x1;\n+\t\t\t\t\t}\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "final double max=getMax();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "incrementEvaluationCount();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_185/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:16:17.209177128 -0500\n@@ -138,10 +138,6 @@\n         if (f0 == 0.0) {\n             return x0;\n         }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -185,8 +181,8 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n+                        incrementEvaluationCount();\n+\t\t\t\t\t\tf0 = computeObjectiveValue(x0);\n                     }\n                     break;\n                 default:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 150, 
          "faulty": "final double atol=getAbsoluteAccuracy();", 
          "type": "InsertBefore", 
          "seed": "final double initial=getStartValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 161, 
          "faulty": "final double fx=computeObjectiveValue(x);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "final double absoluteAccuracy=getAbsoluteAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "double x0=getMin();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double y1=computeObjectiveValue(x1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java", 
          "line": 371, 
          "faulty": "if (function == null) {\n  throw new NullArgumentException(LocalizedFormats.FUNCTION);\n}", 
          "type": "Replace", 
          "seed": "boolean inverted=false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "throw new NullArgumentException(LocalizedFormats.FUNCTION);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1709/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:29:03.131395706 -0500\n@@ -121,7 +121,8 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        double x2 = max;\n+\t\treturn solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n     /** {@inheritDoc} */\n@@ -132,12 +133,6 @@\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n         if (f1 == 0.0) {\n             return x1;\n         }\n@@ -147,7 +142,8 @@\n \n         // Get accuracies.\n         final double ftol = getFunctionValueAccuracy();\n-        final double atol = getAbsoluteAccuracy();\n+        final double initial = getStartValue();\n+\t\tfinal double atol = getAbsoluteAccuracy();\n         final double rtol = getRelativeAccuracy();\n \n         // Keep track of inverted intervals, meaning that the left bound is\n@@ -158,7 +154,8 @@\n         while (true) {\n             // Calculate the next approximation.\n             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n-            final double fx = computeObjectiveValue(x);\n+            int start = 0;\n+\t\t\tfinal double fx = computeObjectiveValue(x);\n \n             // If the new approximation is the exact root, return it. Since\n             // this is not an under-approximation or an over-approximation,\n@@ -183,11 +180,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +229,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-02 11:55:31.845022991 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1709/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-02 12:29:03.135395821 -0500\n@@ -368,9 +368,7 @@\n     public static void verifyBracketing(UnivariateRealFunction function,\n                                         final double lower,\n                                         final double upper) {\n-        if (function == null) {\n-            throw new NullArgumentException(LocalizedFormats.FUNCTION);\n-        }\n+        boolean inverted = false;\n         verifyInterval(lower, upper);\n         if (!isBracketing(function, lower, upper)) {\n             throw new NoBracketingException(lower, upper,\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 150, 
          "faulty": "final double atol=getAbsoluteAccuracy();", 
          "type": "InsertBefore", 
          "seed": "int agingB=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "inverted=!inverted;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "Complex oldz=new Complex(Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_379/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:17:50.796075359 -0500\n@@ -138,16 +138,13 @@\n         if (f0 == 0.0) {\n             return x0;\n         }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n         // Get accuracies.\n         final double ftol = getFunctionValueAccuracy();\n-        final double atol = getAbsoluteAccuracy();\n+        int agingB = 0;\n+\t\tfinal double atol = getAbsoluteAccuracy();\n         final double rtol = getRelativeAccuracy();\n \n         // Keep track of inverted intervals, meaning that the left bound is\n@@ -185,8 +182,31 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n+                        if (f1 * fx < 0) {\n+\t\t\t\t\t\t\tx0 = x1;\n+\t\t\t\t\t\t\tf0 = f1;\n+\t\t\t\t\t\t\tinverted = !inverted;\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tswitch (method) {\n+\t\t\t\t\t\t\tcase ILLINOIS:\n+\t\t\t\t\t\t\t\tf0 *= 0.5;\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\tcase PEGASUS:\n+\t\t\t\t\t\t\t\tf0 *= f1 / (f1 + fx);\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\tcase REGULA_FALSI:\n+\t\t\t\t\t\t\t\tif (x == x1) {\n+\t\t\t\t\t\t\t\t\tx0 = 0.5 * (x0 + x1 - FastMath.max(rtol\n+\t\t\t\t\t\t\t\t\t\t\t* FastMath.abs(x1), atol));\n+\t\t\t\t\t\t\t\t\tf0 = computeObjectiveValue(x0);\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\tdefault:\n+\t\t\t\t\t\t\t\tthrow new MathInternalError();\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+                        inverted = !inverted;\n+\t\t\t\t\t\tf0 = computeObjectiveValue(x0);\n                     }\n                     break;\n                 default:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Delete", 
          "seed": "final double rtol=getRelativeAccuracy();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_865/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:22:23.431910434 -0500\n@@ -183,11 +183,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +232,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    ;\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 161, 
          "faulty": "final double fx=computeObjectiveValue(x);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "final double absoluteAccuracy=getAbsoluteAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "double x0=getMin();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1554/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:27:47.661239542 -0500\n@@ -121,7 +121,8 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        double x2 = max;\n+\t\treturn solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n     /** {@inheritDoc} */\n@@ -138,10 +139,6 @@\n         if (f0 == 0.0) {\n             return x0;\n         }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -158,7 +155,8 @@\n         while (true) {\n             // Calculate the next approximation.\n             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n-            final double fx = computeObjectiveValue(x);\n+            int start = 0;\n+\t\t\tfinal double fx = computeObjectiveValue(x);\n \n             // If the new approximation is the exact root, return it. Since\n             // this is not an under-approximation or an over-approximation,\n@@ -183,11 +181,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +230,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingB=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "final double max=getMax();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "Complex oldz=new Complex(Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double y1=computeObjectiveValue(x1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "final double relativeAccuracy=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "this.method=method;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_465/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:18:39.073516594 -0500\n@@ -121,7 +121,8 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        double x2 = max;\n+\t\treturn solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n     /** {@inheritDoc} */\n@@ -138,10 +139,6 @@\n         if (f0 == 0.0) {\n             return x0;\n         }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -183,11 +180,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "return x1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1081/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:24:05.186708021 -0500\n@@ -183,11 +183,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +232,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingB=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double y1=computeObjectiveValue(x1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 150, 
          "faulty": "final double atol=getAbsoluteAccuracy();", 
          "type": "InsertBefore", 
          "seed": "int agingB=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "final double relativeAccuracy=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingB=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "final double max=getMax();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "final double relativeAccuracy=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "f0=f1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_590/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:19:47.451510345 -0500\n@@ -138,16 +138,13 @@\n         if (f0 == 0.0) {\n             return x0;\n         }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n         // Get accuracies.\n         final double ftol = getFunctionValueAccuracy();\n-        final double atol = getAbsoluteAccuracy();\n+        int agingB = 0;\n+\t\tfinal double atol = getAbsoluteAccuracy();\n         final double rtol = getRelativeAccuracy();\n \n         // Keep track of inverted intervals, meaning that the left bound is\n@@ -183,11 +180,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingB=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double y1=computeObjectiveValue(x1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 150, 
          "faulty": "final double atol=getAbsoluteAccuracy();", 
          "type": "InsertBefore", 
          "seed": "int agingB=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "final double relativeAccuracy=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "final double max=getMax();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 155, 
          "faulty": "boolean inverted=false;", 
          "type": "InsertBefore", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 132, 
          "faulty": "double f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "final double startValue=getStartValue();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_508/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:19:06.466321352 -0500\n@@ -121,7 +121,8 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        double x2 = max;\n+\t\treturn solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n     /** {@inheritDoc} */\n@@ -129,7 +130,8 @@\n         // Get initial solution\n         double x0 = getMin();\n         double x1 = getMax();\n-        double f0 = computeObjectiveValue(x0);\n+        final double startValue = getStartValue();\n+\t\tdouble f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n         // If one of the bounds is the exact root, return it. Since these are\n@@ -138,19 +140,17 @@\n         if (f0 == 0.0) {\n             return x0;\n         }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n         // Get accuracies.\n         final double ftol = getFunctionValueAccuracy();\n-        final double atol = getAbsoluteAccuracy();\n+        int agingB = 0;\n+\t\tfinal double atol = getAbsoluteAccuracy();\n         final double rtol = getRelativeAccuracy();\n \n-        // Keep track of inverted intervals, meaning that the left bound is\n+        int numIterations = 0;\n+\t\t// Keep track of inverted intervals, meaning that the left bound is\n         // larger than the right bound.\n         boolean inverted = false;\n \n@@ -183,11 +183,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 150, 
          "faulty": "final double atol=getAbsoluteAccuracy();", 
          "type": "InsertBefore", 
          "seed": "final double initial=getStartValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "double x2=0.5 * (x0 + x1);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1774/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:29:32.996239653 -0500\n@@ -132,12 +132,6 @@\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n         if (f1 == 0.0) {\n             return x1;\n         }\n@@ -147,7 +141,8 @@\n \n         // Get accuracies.\n         final double ftol = getFunctionValueAccuracy();\n-        final double atol = getAbsoluteAccuracy();\n+        final double initial = getStartValue();\n+\t\tfinal double atol = getAbsoluteAccuracy();\n         final double rtol = getRelativeAccuracy();\n \n         // Keep track of inverted intervals, meaning that the left bound is\n@@ -183,11 +178,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    int agingA = 0;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +227,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 132, 
          "faulty": "double f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "final double startValue=getStartValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double y1=computeObjectiveValue(x1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_703/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:20:59.717570018 -0500\n@@ -129,7 +129,8 @@\n         // Get initial solution\n         double x0 = getMin();\n         double x1 = getMax();\n-        double f0 = computeObjectiveValue(x0);\n+        final double startValue = getStartValue();\n+\t\tdouble f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n         // If one of the bounds is the exact root, return it. Since these are\n@@ -185,8 +186,8 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n+                        double y1 = computeObjectiveValue(x1);\n+\t\t\t\t\t\tf0 = computeObjectiveValue(x0);\n                     }\n                     break;\n                 default:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 161, 
          "faulty": "final double fx=computeObjectiveValue(x);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "final double absoluteAccuracy=getAbsoluteAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "double x0=getMin();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "double x0=getMin();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "final double x=x1 - ((f1 * (x1 - x0)) / (f1 - f0));"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1639/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:28:31.550497872 -0500\n@@ -132,16 +132,6 @@\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -158,7 +148,8 @@\n         while (true) {\n             // Calculate the next approximation.\n             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n-            final double fx = computeObjectiveValue(x);\n+            int start = 0;\n+\t\t\tfinal double fx = computeObjectiveValue(x);\n \n             // If the new approximation is the exact root, return it. Since\n             // this is not an under-approximation or an over-approximation,\n@@ -183,11 +174,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +223,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1402/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:26:42.231336139 -0500\n@@ -138,10 +138,6 @@\n         if (f0 == 0.0) {\n             return x0;\n         }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -183,11 +179,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 116, 
          "faulty": "this.allowed=allowedSolution;", 
          "type": "InsertBefore", 
          "seed": "final double functionValueAccuracy=getFunctionValueAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "f0=f1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "final double initial=getStartValue();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_969/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:23:16.437373099 -0500\n@@ -113,7 +113,8 @@\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue,\n                         final AllowedSolution allowedSolution) {\n-        this.allowed = allowedSolution;\n+        final double functionValueAccuracy = getFunctionValueAccuracy();\n+\t\tthis.allowed = allowedSolution;\n         return super.solve(maxEval, f, min, max, startValue);\n     }\n \n@@ -138,10 +139,6 @@\n         if (f0 == 0.0) {\n             return x0;\n         }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -185,8 +182,8 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n+                        f0 = f1;\n+\t\t\t\t\t\tf0 = computeObjectiveValue(x0);\n                     }\n                     break;\n                 default:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "return (f1 <= 0) ? x1 : x0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1353/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:26:21.386721572 -0500\n@@ -138,10 +138,6 @@\n         if (f0 == 0.0) {\n             return x0;\n         }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -183,11 +179,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_161/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:15:58.396579145 -0500\n@@ -185,7 +185,6 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n                         f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1097/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:24:12.618910790 -0500\n@@ -183,11 +183,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +232,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 198, 
          "faulty": "x1=x;", 
          "type": "InsertBefore", 
          "seed": "double x2=0.5 * (x0 + x1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "double y1=computeObjectiveValue(x1);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_280/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:17:05.898704290 -0500\n@@ -185,7 +185,7 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n+                        double y1 = computeObjectiveValue(x1);\n                         f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n@@ -194,7 +194,8 @@\n                     throw new MathInternalError();\n                 }\n             }\n-            // Update from [x0, x1] to [x0, x].\n+            double x2 = 0.5 * (x0 + x1);\n+\t\t\t// Update from [x0, x1] to [x0, x].\n             x1 = x;\n             f1 = fx;\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingB=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 150, 
          "faulty": "final double atol=getAbsoluteAccuracy();", 
          "type": "InsertBefore", 
          "seed": "int agingB=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "final double relativeAccuracy=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "this.method=method;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_583/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:19:43.835406108 -0500\n@@ -147,7 +147,8 @@\n \n         // Get accuracies.\n         final double ftol = getFunctionValueAccuracy();\n-        final double atol = getAbsoluteAccuracy();\n+        int agingB = 0;\n+\t\tfinal double atol = getAbsoluteAccuracy();\n         final double rtol = getRelativeAccuracy();\n \n         // Keep track of inverted intervals, meaning that the left bound is\n@@ -185,8 +186,7 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n+                        final double relativeAccuracy = getRelativeAccuracy();\n                     }\n                     break;\n                 default:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingB=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double y1=computeObjectiveValue(x1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 155, 
          "faulty": "boolean inverted=false;", 
          "type": "InsertBefore", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double y1=computeObjectiveValue(x1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 150, 
          "faulty": "final double atol=getAbsoluteAccuracy();", 
          "type": "InsertBefore", 
          "seed": "int agingB=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "inverted=!inverted;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "Complex oldz=new Complex(Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double y1=computeObjectiveValue(x1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 199, 
          "faulty": "f1=fx;", 
          "type": "InsertBefore", 
          "seed": "double max=getMax();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_687/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:20:45.785176130 -0500\n@@ -121,7 +121,8 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        double x2 = max;\n+\t\treturn solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n     /** {@inheritDoc} */\n@@ -138,19 +139,17 @@\n         if (f0 == 0.0) {\n             return x0;\n         }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n         // Get accuracies.\n         final double ftol = getFunctionValueAccuracy();\n-        final double atol = getAbsoluteAccuracy();\n+        int agingB = 0;\n+\t\tfinal double atol = getAbsoluteAccuracy();\n         final double rtol = getRelativeAccuracy();\n \n-        // Keep track of inverted intervals, meaning that the left bound is\n+        int numIterations = 0;\n+\t\t// Keep track of inverted intervals, meaning that the left bound is\n         // larger than the right bound.\n         boolean inverted = false;\n \n@@ -183,11 +182,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -196,7 +191,8 @@\n             }\n             // Update from [x0, x1] to [x0, x].\n             x1 = x;\n-            f1 = fx;\n+            double max = getMax();\n+\t\t\tf1 = fx;\n \n             // If the function value of the last approximation is too small,\n             // given the function value accuracy, then we can't get closer to\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingB=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double y1=computeObjectiveValue(x1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 150, 
          "faulty": "final double atol=getAbsoluteAccuracy();", 
          "type": "InsertBefore", 
          "seed": "final double absoluteAccuracy=getAbsoluteAccuracy();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_293/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:17:11.378873417 -0500\n@@ -147,7 +147,8 @@\n \n         // Get accuracies.\n         final double ftol = getFunctionValueAccuracy();\n-        final double atol = getAbsoluteAccuracy();\n+        final double absoluteAccuracy = getAbsoluteAccuracy();\n+\t\tfinal double atol = getAbsoluteAccuracy();\n         final double rtol = getRelativeAccuracy();\n \n         // Keep track of inverted intervals, meaning that the left bound is\n@@ -183,11 +184,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingB=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "inverted=!inverted;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "Complex oldz=new Complex(Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingB=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "this.method=method;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_623/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:20:02.615946158 -0500\n@@ -138,10 +138,6 @@\n         if (f0 == 0.0) {\n             return x0;\n         }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -183,11 +179,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1477/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:27:14.636283359 -0500\n@@ -132,16 +132,6 @@\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -183,11 +173,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    int agingA = 0;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +222,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 161, 
          "faulty": "final double fx=computeObjectiveValue(x);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 151, 
          "faulty": "final double rtol=getRelativeAccuracy();", 
          "type": "InsertBefore", 
          "seed": "if (f1 == 0.0) {\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java", 
          "line": 310, 
          "faulty": "return (fLo >= 0 && fHi <= 0) || (fLo <= 0 && fHi >= 0);", 
          "type": "InsertBefore", 
          "seed": "if (function == null) {\n  throw new NullArgumentException(LocalizedFormats.FUNCTION);\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1523/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:27:33.556832228 -0500\n@@ -121,7 +121,8 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        double x2 = max;\n+\t\treturn solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n     /** {@inheritDoc} */\n@@ -132,23 +133,16 @@\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n         // Get accuracies.\n         final double ftol = getFunctionValueAccuracy();\n         final double atol = getAbsoluteAccuracy();\n-        final double rtol = getRelativeAccuracy();\n+        if (f1 == 0.0) {\n+\t\t\treturn x1;\n+\t\t}\n+\t\tfinal double rtol = getRelativeAccuracy();\n \n         // Keep track of inverted intervals, meaning that the left bound is\n         // larger than the right bound.\n@@ -158,7 +152,8 @@\n         while (true) {\n             // Calculate the next approximation.\n             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n-            final double fx = computeObjectiveValue(x);\n+            int start = 0;\n+\t\t\tfinal double fx = computeObjectiveValue(x);\n \n             // If the new approximation is the exact root, return it. Since\n             // this is not an under-approximation or an over-approximation,\n@@ -183,11 +178,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +227,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-02 11:55:31.845022991 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1523/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-02 12:27:33.560832345 -0500\n@@ -307,7 +307,10 @@\n         }\n         final double fLo = function.value(lower);\n         final double fHi = function.value(upper);\n-        return (fLo >= 0 && fHi <= 0) || (fLo <= 0 && fHi >= 0);\n+        if (function == null) {\n+\t\t\tthrow new NullArgumentException(LocalizedFormats.FUNCTION);\n+\t\t}\n+\t\treturn (fLo >= 0 && fHi <= 0) || (fLo <= 0 && fHi >= 0);\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 161, 
          "faulty": "final double fx=computeObjectiveValue(x);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 151, 
          "faulty": "final double rtol=getRelativeAccuracy();", 
          "type": "InsertBefore", 
          "seed": "if (f1 == 0.0) {\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "double x0=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "final double absoluteAccuracy=getAbsoluteAccuracy();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1434/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:26:55.923737539 -0500\n@@ -121,7 +121,8 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        double x2 = max;\n+\t\treturn solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n     /** {@inheritDoc} */\n@@ -132,12 +133,6 @@\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n         if (f1 == 0.0) {\n             return x1;\n         }\n@@ -148,7 +143,10 @@\n         // Get accuracies.\n         final double ftol = getFunctionValueAccuracy();\n         final double atol = getAbsoluteAccuracy();\n-        final double rtol = getRelativeAccuracy();\n+        if (f1 == 0.0) {\n+\t\t\treturn x1;\n+\t\t}\n+\t\tfinal double rtol = getRelativeAccuracy();\n \n         // Keep track of inverted intervals, meaning that the left bound is\n         // larger than the right bound.\n@@ -158,7 +156,8 @@\n         while (true) {\n             // Calculate the next approximation.\n             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n-            final double fx = computeObjectiveValue(x);\n+            int start = 0;\n+\t\t\tfinal double fx = computeObjectiveValue(x);\n \n             // If the new approximation is the exact root, return it. Since\n             // this is not an under-approximation or an over-approximation,\n@@ -183,11 +182,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +231,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 160, 
          "faulty": "final double x=x1 - ((f1 * (x1 - x0)) / (f1 - f0));", 
          "type": "InsertBefore", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "final double absoluteAccuracy=getAbsoluteAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "return inverted ? x0 : x1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1077/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:24:03.314656918 -0500\n@@ -156,7 +156,8 @@\n \n         // Keep finding better approximations.\n         while (true) {\n-            // Calculate the next approximation.\n+            int numIterations = 0;\n+\t\t\t// Calculate the next approximation.\n             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n             final double fx = computeObjectiveValue(x);\n \n@@ -183,11 +184,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "double x0=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "final double absoluteAccuracy=getAbsoluteAccuracy();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1616/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:28:20.334177529 -0500\n@@ -132,12 +132,6 @@\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n         if (f1 == 0.0) {\n             return x1;\n         }\n@@ -183,11 +177,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double initial=getStartValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 161, 
          "faulty": "final double fx=computeObjectiveValue(x);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1025/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:23:40.434031321 -0500\n@@ -158,7 +158,8 @@\n         while (true) {\n             // Calculate the next approximation.\n             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n-            final double fx = computeObjectiveValue(x);\n+            int start = 0;\n+\t\t\tfinal double fx = computeObjectiveValue(x);\n \n             // If the new approximation is the exact root, return it. Since\n             // this is not an under-approximation or an over-approximation,\n@@ -183,11 +184,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingB=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "inverted=!inverted;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "Complex oldz=new Complex(Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingB=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "final double max=getMax();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 133, 
          "faulty": "double f1=computeObjectiveValue(x1);", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_520/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:19:11.946481337 -0500\n@@ -130,7 +130,8 @@\n         double x0 = getMin();\n         double x1 = getMax();\n         double f0 = computeObjectiveValue(x0);\n-        double f1 = computeObjectiveValue(x1);\n+        final UnivariateRealSolver solver = new BrentSolver();\n+\t\tdouble f1 = computeObjectiveValue(x1);\n \n         // If one of the bounds is the exact root, return it. Since these are\n         // not under-approximations or over-approximations, we can return them\n@@ -138,10 +139,6 @@\n         if (f0 == 0.0) {\n             return x0;\n         }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -183,11 +180,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "if (FastMath.abs(f1) <= ftol) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  if (inverted) {\n    return x1;\n  }\nbreak;\ncase RIGHT_SIDE:\nif (!inverted) {\nreturn x1;\n}\nbreak;\ncase BELOW_SIDE:\nif (f1 <= 0) {\nreturn x1;\n}\nbreak;\ncase ABOVE_SIDE:\nif (f1 >= 0) {\nreturn x1;\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final double max=getMax();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1692/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:28:54.571152917 -0500\n@@ -132,16 +132,6 @@\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -183,11 +173,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    int agingA = 0;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +222,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double initial=getStartValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 161, 
          "faulty": "final double fx=computeObjectiveValue(x);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1174/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:24:47.479890752 -0500\n@@ -158,7 +158,8 @@\n         while (true) {\n             // Calculate the next approximation.\n             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n-            final double fx = computeObjectiveValue(x);\n+            int start = 0;\n+\t\t\tfinal double fx = computeObjectiveValue(x);\n \n             // If the new approximation is the exact root, return it. Since\n             // this is not an under-approximation or an over-approximation,\n@@ -183,11 +184,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +233,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double initial=getStartValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1211/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:25:04.660417277 -0500\n@@ -121,7 +121,8 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        double x2 = max;\n+\t\treturn solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n     /** {@inheritDoc} */\n@@ -183,11 +184,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingB=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double y1=computeObjectiveValue(x1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 150, 
          "faulty": "final double atol=getAbsoluteAccuracy();", 
          "type": "InsertBefore", 
          "seed": "int agingB=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingB=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "final double relativeAccuracy=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "return x0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_733/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:21:15.622017998 -0500\n@@ -147,7 +147,8 @@\n \n         // Get accuracies.\n         final double ftol = getFunctionValueAccuracy();\n-        final double atol = getAbsoluteAccuracy();\n+        int agingB = 0;\n+\t\tfinal double atol = getAbsoluteAccuracy();\n         final double rtol = getRelativeAccuracy();\n \n         // Keep track of inverted intervals, meaning that the left bound is\n@@ -183,11 +184,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "final double fx=computeObjectiveValue(x);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_81/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:15:18.839331424 -0500\n@@ -183,11 +183,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Replace", 
          "seed": "return inverted ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "final double y=computeObjectiveValue(x);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_103/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:15:29.571673134 -0500\n@@ -183,11 +183,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingB=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "inverted=!inverted;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "Complex oldz=new Complex(Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double y1=computeObjectiveValue(x1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double y1=computeObjectiveValue(x1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 116, 
          "faulty": "this.allowed=allowedSolution;", 
          "type": "InsertBefore", 
          "seed": "final double functionValueAccuracy=getFunctionValueAccuracy();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_909/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:22:43.048453256 -0500\n@@ -113,7 +113,8 @@\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue,\n                         final AllowedSolution allowedSolution) {\n-        this.allowed = allowedSolution;\n+        final double functionValueAccuracy = getFunctionValueAccuracy();\n+\t\tthis.allowed = allowedSolution;\n         return super.solve(maxEval, f, min, max, startValue);\n     }\n \n@@ -138,10 +139,6 @@\n         if (f0 == 0.0) {\n             return x0;\n         }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -183,11 +180,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 161, 
          "faulty": "final double fx=computeObjectiveValue(x);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 151, 
          "faulty": "final double rtol=getRelativeAccuracy();", 
          "type": "InsertBefore", 
          "seed": "if (f1 == 0.0) {\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "final double absoluteAccuracy=getAbsoluteAccuracy();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1398/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:26:40.931297936 -0500\n@@ -121,7 +121,8 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        double x2 = max;\n+\t\treturn solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n     /** {@inheritDoc} */\n@@ -132,12 +133,6 @@\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n         if (f1 == 0.0) {\n             return x1;\n         }\n@@ -148,7 +143,10 @@\n         // Get accuracies.\n         final double ftol = getFunctionValueAccuracy();\n         final double atol = getAbsoluteAccuracy();\n-        final double rtol = getRelativeAccuracy();\n+        if (f1 == 0.0) {\n+\t\t\treturn x1;\n+\t\t}\n+\t\tfinal double rtol = getRelativeAccuracy();\n \n         // Keep track of inverted intervals, meaning that the left bound is\n         // larger than the right bound.\n@@ -158,7 +156,8 @@\n         while (true) {\n             // Calculate the next approximation.\n             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n-            final double fx = computeObjectiveValue(x);\n+            int start = 0;\n+\t\t\tfinal double fx = computeObjectiveValue(x);\n \n             // If the new approximation is the exact root, return it. Since\n             // this is not an under-approximation or an over-approximation,\n@@ -183,11 +182,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +231,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "double x2=0.5 * (x0 + x1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double x0=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "InsertBefore", 
          "seed": "final double functionValueAccuracy=getFunctionValueAccuracy();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1835/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:30:01.309035669 -0500\n@@ -132,16 +132,6 @@\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -183,11 +173,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    int agingA = 0;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +222,10 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    {\n+\t\t\t\t\t\tfinal double functionValueAccuracy = getFunctionValueAccuracy();\n+\t\t\t\t\t\treturn x1;\n+\t\t\t\t\t}\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 132, 
          "faulty": "double f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "final double functionValueAccuracy=getFunctionValueAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "final double max=getMax();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_239/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:16:45.638074340 -0500\n@@ -121,7 +121,8 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        double x2 = max;\n+\t\treturn solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n     /** {@inheritDoc} */\n@@ -129,7 +130,8 @@\n         // Get initial solution\n         double x0 = getMin();\n         double x1 = getMax();\n-        double f0 = computeObjectiveValue(x0);\n+        int agingA = 0;\n+\t\tdouble f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n         // If one of the bounds is the exact root, return it. Since these are\n@@ -138,10 +140,6 @@\n         if (f0 == 0.0) {\n             return x0;\n         }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -185,7 +183,7 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n+                        final double functionValueAccuracy = getFunctionValueAccuracy();\n                         f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double initial=getStartValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "return (f1 <= 0) ? x1 : x0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1239/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:25:16.288771270 -0500\n@@ -121,7 +121,8 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        double x2 = max;\n+\t\treturn solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n     /** {@inheritDoc} */\n@@ -183,11 +184,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double initial=getStartValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 161, 
          "faulty": "final double fx=computeObjectiveValue(x);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1075/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:24:02.718640645 -0500\n@@ -121,7 +121,8 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        double x2 = max;\n+\t\treturn solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n     /** {@inheritDoc} */\n@@ -158,7 +159,8 @@\n         while (true) {\n             // Calculate the next approximation.\n             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n-            final double fx = computeObjectiveValue(x);\n+            int start = 0;\n+\t\t\tfinal double fx = computeObjectiveValue(x);\n \n             // If the new approximation is the exact root, return it. Since\n             // this is not an under-approximation or an over-approximation,\n@@ -183,11 +185,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +234,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 150, 
          "faulty": "final double atol=getAbsoluteAccuracy();", 
          "type": "InsertBefore", 
          "seed": "final double initial=getStartValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1381/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:26:33.471078388 -0500\n@@ -147,7 +147,8 @@\n \n         // Get accuracies.\n         final double ftol = getFunctionValueAccuracy();\n-        final double atol = getAbsoluteAccuracy();\n+        final double initial = getStartValue();\n+\t\tfinal double atol = getAbsoluteAccuracy();\n         final double rtol = getRelativeAccuracy();\n \n         // Keep track of inverted intervals, meaning that the left bound is\n@@ -183,11 +184,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Delete", 
          "seed": "double f0=computeObjectiveValue(x0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Replace", 
          "seed": "final double max=getMax();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_985/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:23:23.661571496 -0500\n@@ -121,7 +121,8 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        double x2 = max;\n+\t\treturn solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n     /** {@inheritDoc} */\n@@ -132,12 +133,7 @@\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n+        final double max = getMax();\n         if (f1 == 0.0) {\n             return x1;\n         }\n@@ -183,11 +179,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +228,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    ;\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "double x2=0.5 * (x0 + x1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double x0=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1723/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:29:09.951588854 -0500\n@@ -132,16 +132,6 @@\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -183,11 +173,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    int agingA = 0;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +222,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 150, 
          "faulty": "final double atol=getAbsoluteAccuracy();", 
          "type": "InsertBefore", 
          "seed": "final double initial=getStartValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double initial=getStartValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 235, 
          "faulty": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}", 
          "type": "InsertBefore", 
          "seed": "final double relativeAccuracy=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java", 
          "line": 305, 
          "faulty": "if (function == null) {\n  throw new NullArgumentException(LocalizedFormats.FUNCTION);\n}", 
          "type": "InsertBefore", 
          "seed": "if (function == null) {\n  throw new NullArgumentException(LocalizedFormats.FUNCTION);\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1249/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:25:21.264922195 -0500\n@@ -121,7 +121,8 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        double x2 = max;\n+\t\treturn solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n     /** {@inheritDoc} */\n@@ -147,7 +148,8 @@\n \n         // Get accuracies.\n         final double ftol = getFunctionValueAccuracy();\n-        final double atol = getAbsoluteAccuracy();\n+        final double initial = getStartValue();\n+\t\tfinal double atol = getAbsoluteAccuracy();\n         final double rtol = getRelativeAccuracy();\n \n         // Keep track of inverted intervals, meaning that the left bound is\n@@ -183,11 +185,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -230,7 +228,8 @@\n                 }\n             }\n \n-            // If the current interval is within the given accuracies, we\n+            final double relativeAccuracy = getRelativeAccuracy();\n+\t\t\t// If the current interval is within the given accuracies, we\n             // are satisfied with the current approximation.\n             if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),\n                                                      atol)) {\n\n\n--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-02 11:55:31.845022991 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1249/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-02 12:25:21.264922195 -0500\n@@ -303,6 +303,10 @@\n                                        final double lower,\n                                        final double upper) {\n         if (function == null) {\n+\t\t\t\t\t\t\t\t\t\t\tthrow new NullArgumentException(\n+\t\t\t\t\t\t\t\t\t\t\t\t\tLocalizedFormats.FUNCTION);\n+\t\t\t\t\t\t\t\t\t\t}\n+\t\tif (function == null) {\n             throw new NullArgumentException(LocalizedFormats.FUNCTION);\n         }\n         final double fLo = function.value(lower);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 161, 
          "faulty": "final double fx=computeObjectiveValue(x);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 151, 
          "faulty": "final double rtol=getRelativeAccuracy();", 
          "type": "InsertBefore", 
          "seed": "if (f1 == 0.0) {\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "double x0=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java", 
          "line": 371, 
          "faulty": "if (function == null) {\n  throw new NullArgumentException(LocalizedFormats.FUNCTION);\n}", 
          "type": "Delete", 
          "seed": "return doSolve();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "boolean inverted=false;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1501/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:27:24.748577072 -0500\n@@ -121,7 +121,8 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        double x2 = max;\n+\t\treturn solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n     /** {@inheritDoc} */\n@@ -132,12 +133,6 @@\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n         if (f1 == 0.0) {\n             return x1;\n         }\n@@ -148,7 +143,10 @@\n         // Get accuracies.\n         final double ftol = getFunctionValueAccuracy();\n         final double atol = getAbsoluteAccuracy();\n-        final double rtol = getRelativeAccuracy();\n+        if (f1 == 0.0) {\n+\t\t\treturn x1;\n+\t\t}\n+\t\tfinal double rtol = getRelativeAccuracy();\n \n         // Keep track of inverted intervals, meaning that the left bound is\n         // larger than the right bound.\n@@ -158,7 +156,8 @@\n         while (true) {\n             // Calculate the next approximation.\n             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n-            final double fx = computeObjectiveValue(x);\n+            int start = 0;\n+\t\t\tfinal double fx = computeObjectiveValue(x);\n \n             // If the new approximation is the exact root, return it. Since\n             // this is not an under-approximation or an over-approximation,\n@@ -183,11 +182,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +231,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-02 11:55:31.845022991 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1501/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-02 12:27:24.752577188 -0500\n@@ -368,9 +368,6 @@\n     public static void verifyBracketing(UnivariateRealFunction function,\n                                         final double lower,\n                                         final double upper) {\n-        if (function == null) {\n-            throw new NullArgumentException(LocalizedFormats.FUNCTION);\n-        }\n         verifyInterval(lower, upper);\n         if (!isBracketing(function, lower, upper)) {\n             throw new NoBracketingException(lower, upper,\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "if (FastMath.abs(f1) <= ftol) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  if (inverted) {\n    return x1;\n  }\nbreak;\ncase RIGHT_SIDE:\nif (!inverted) {\nreturn x1;\n}\nbreak;\ncase BELOW_SIDE:\nif (f1 <= 0) {\nreturn x1;\n}\nbreak;\ncase ABOVE_SIDE:\nif (f1 >= 0) {\nreturn x1;\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1706/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:29:01.919361355 -0500\n@@ -132,16 +132,6 @@\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -183,11 +173,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    int agingA = 0;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +222,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 198, 
          "faulty": "x1=x;", 
          "type": "InsertBefore", 
          "seed": "double x2=0.5 * (x0 + x1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_118/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:15:37.067910363 -0500\n@@ -185,7 +185,29 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n+                        if (f1 * fx < 0) {\n+\t\t\t\t\t\t\tx0 = x1;\n+\t\t\t\t\t\t\tf0 = f1;\n+\t\t\t\t\t\t\tinverted = !inverted;\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tswitch (method) {\n+\t\t\t\t\t\t\tcase ILLINOIS:\n+\t\t\t\t\t\t\t\tf0 *= 0.5;\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\tcase PEGASUS:\n+\t\t\t\t\t\t\t\tf0 *= f1 / (f1 + fx);\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\tcase REGULA_FALSI:\n+\t\t\t\t\t\t\t\tif (x == x1) {\n+\t\t\t\t\t\t\t\t\tx0 = 0.5 * (x0 + x1 - FastMath.max(rtol\n+\t\t\t\t\t\t\t\t\t\t\t* FastMath.abs(x1), atol));\n+\t\t\t\t\t\t\t\t\tf0 = computeObjectiveValue(x0);\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\tdefault:\n+\t\t\t\t\t\t\t\tthrow new MathInternalError();\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n                         f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n@@ -194,7 +216,8 @@\n                     throw new MathInternalError();\n                 }\n             }\n-            // Update from [x0, x1] to [x0, x].\n+            double x2 = 0.5 * (x0 + x1);\n+\t\t\t// Update from [x0, x1] to [x0, x].\n             x1 = x;\n             f1 = fx;\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double initial=getStartValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 161, 
          "faulty": "final double fx=computeObjectiveValue(x);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1195/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:24:56.760175695 -0500\n@@ -121,7 +121,8 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        double x2 = max;\n+\t\treturn solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n     /** {@inheritDoc} */\n@@ -158,7 +159,8 @@\n         while (true) {\n             // Calculate the next approximation.\n             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n-            final double fx = computeObjectiveValue(x);\n+            int start = 0;\n+\t\t\tfinal double fx = computeObjectiveValue(x);\n \n             // If the new approximation is the exact root, return it. Since\n             // this is not an under-approximation or an over-approximation,\n@@ -183,11 +185,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +234,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Replace", 
          "seed": "final double max=getMax();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_962/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:23:13.429290425 -0500\n@@ -132,12 +132,7 @@\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n+        final double max = getMax();\n         if (f1 == 0.0) {\n             return x1;\n         }\n@@ -183,11 +178,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingB=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 150, 
          "faulty": "final double atol=getAbsoluteAccuracy();", 
          "type": "InsertBefore", 
          "seed": "final double absoluteAccuracy=getAbsoluteAccuracy();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_349/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:17:36.651646877 -0500\n@@ -147,7 +147,8 @@\n \n         // Get accuracies.\n         final double ftol = getFunctionValueAccuracy();\n-        final double atol = getAbsoluteAccuracy();\n+        final double absoluteAccuracy = getAbsoluteAccuracy();\n+\t\tfinal double atol = getAbsoluteAccuracy();\n         final double rtol = getRelativeAccuracy();\n \n         // Keep track of inverted intervals, meaning that the left bound is\n@@ -183,11 +184,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 161, 
          "faulty": "final double fx=computeObjectiveValue(x);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Delete", 
          "seed": "double f1=computeObjectiveValue(x1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final double min=getMin();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1512/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:27:29.064702178 -0500\n@@ -132,12 +132,6 @@\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n         if (f1 == 0.0) {\n             return x1;\n         }\n@@ -158,7 +152,8 @@\n         while (true) {\n             // Calculate the next approximation.\n             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n-            final double fx = computeObjectiveValue(x);\n+            int start = 0;\n+\t\t\tfinal double fx = computeObjectiveValue(x);\n \n             // If the new approximation is the exact root, return it. Since\n             // this is not an under-approximation or an over-approximation,\n@@ -183,11 +178,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    int agingA = 0;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +227,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    ;\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 161, 
          "faulty": "final double fx=computeObjectiveValue(x);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1326/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:26:07.798318525 -0500\n@@ -132,12 +132,6 @@\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n         if (f1 == 0.0) {\n             return x1;\n         }\n@@ -158,7 +152,8 @@\n         while (true) {\n             // Calculate the next approximation.\n             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n-            final double fx = computeObjectiveValue(x);\n+            int start = 0;\n+\t\t\tfinal double fx = computeObjectiveValue(x);\n \n             // If the new approximation is the exact root, return it. Since\n             // this is not an under-approximation or an over-approximation,\n@@ -183,11 +178,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +227,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 160, 
          "faulty": "final double x=x1 - ((f1 * (x1 - x0)) / (f1 - f0));", 
          "type": "InsertBefore", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "final double absoluteAccuracy=getAbsoluteAccuracy();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_958/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:23:11.597240055 -0500\n@@ -121,7 +121,8 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        double x2 = max;\n+\t\treturn solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n     /** {@inheritDoc} */\n@@ -156,7 +157,8 @@\n \n         // Keep finding better approximations.\n         while (true) {\n-            // Calculate the next approximation.\n+            int numIterations = 0;\n+\t\t\t// Calculate the next approximation.\n             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n             final double fx = computeObjectiveValue(x);\n \n@@ -183,11 +185,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 150, 
          "faulty": "final double atol=getAbsoluteAccuracy();", 
          "type": "InsertBefore", 
          "seed": "final double initial=getStartValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Replace", 
          "seed": "final double min=getMin();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1278/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:25:34.573324242 -0500\n@@ -132,12 +132,7 @@\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n+        final double min = getMin();\n         if (f1 == 0.0) {\n             return x1;\n         }\n@@ -147,7 +142,8 @@\n \n         // Get accuracies.\n         final double ftol = getFunctionValueAccuracy();\n-        final double atol = getAbsoluteAccuracy();\n+        final double initial = getStartValue();\n+\t\tfinal double atol = getAbsoluteAccuracy();\n         final double rtol = getRelativeAccuracy();\n \n         // Keep track of inverted intervals, meaning that the left bound is\n@@ -183,11 +179,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +228,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Delete", 
          "seed": "double f0=computeObjectiveValue(x0);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_827/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:22:06.187431647 -0500\n@@ -185,7 +185,9 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n+                        if (f0 == 0.0) {\n+\t\t\t\t\t\t\treturn x0;\n+\t\t\t\t\t\t}\n                         f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n@@ -236,7 +238,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    ;\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 161, 
          "faulty": "final double fx=computeObjectiveValue(x);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "final double absoluteAccuracy=getAbsoluteAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "double x0=getMin();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "double x2=0.5 * (x0 + x1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double x0=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1777/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:29:34.264275387 -0500\n@@ -132,12 +132,6 @@\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n         if (f1 == 0.0) {\n             return x1;\n         }\n@@ -158,7 +152,8 @@\n         while (true) {\n             // Calculate the next approximation.\n             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n-            final double fx = computeObjectiveValue(x);\n+            int start = 0;\n+\t\t\tfinal double fx = computeObjectiveValue(x);\n \n             // If the new approximation is the exact root, return it. Since\n             // this is not an under-approximation or an over-approximation,\n@@ -183,11 +178,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    int agingA = 0;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +227,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double initial=getStartValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 161, 
          "faulty": "final double fx=computeObjectiveValue(x);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1299/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:25:55.389948704 -0500\n@@ -121,7 +121,8 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        double x2 = max;\n+\t\treturn solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n     /** {@inheritDoc} */\n@@ -158,7 +159,8 @@\n         while (true) {\n             // Calculate the next approximation.\n             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n-            final double fx = computeObjectiveValue(x);\n+            int start = 0;\n+\t\t\tfinal double fx = computeObjectiveValue(x);\n \n             // If the new approximation is the exact root, return it. Since\n             // this is not an under-approximation or an over-approximation,\n@@ -183,11 +185,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +234,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 150, 
          "faulty": "final double atol=getAbsoluteAccuracy();", 
          "type": "InsertBefore", 
          "seed": "final double initial=getStartValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final double startValue=getStartValue();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1400/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:26:41.539315805 -0500\n@@ -147,7 +147,8 @@\n \n         // Get accuracies.\n         final double ftol = getFunctionValueAccuracy();\n-        final double atol = getAbsoluteAccuracy();\n+        final double initial = getStartValue();\n+\t\tfinal double atol = getAbsoluteAccuracy();\n         final double rtol = getRelativeAccuracy();\n \n         // Keep track of inverted intervals, meaning that the left bound is\n@@ -183,11 +184,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 132, 
          "faulty": "double f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 198, 
          "faulty": "x1=x;", 
          "type": "InsertBefore", 
          "seed": "double x2=0.5 * (x0 + x1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "double y1=computeObjectiveValue(x1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 150, 
          "faulty": "final double atol=getAbsoluteAccuracy();", 
          "type": "InsertBefore", 
          "seed": "int agingB=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "inverted=!inverted;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Replace", 
          "seed": "final double t=getAbsoluteAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_332/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:17:29.195419764 -0500\n@@ -121,7 +121,8 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        double x2 = max;\n+\t\treturn solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n     /** {@inheritDoc} */\n@@ -129,7 +130,8 @@\n         // Get initial solution\n         double x0 = getMin();\n         double x1 = getMax();\n-        double f0 = computeObjectiveValue(x0);\n+        int agingA = 0;\n+\t\tdouble f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n         // If one of the bounds is the exact root, return it. Since these are\n@@ -138,16 +140,15 @@\n         if (f0 == 0.0) {\n             return x0;\n         }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n+        final double t = getAbsoluteAccuracy();\n \n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n         // Get accuracies.\n         final double ftol = getFunctionValueAccuracy();\n-        final double atol = getAbsoluteAccuracy();\n+        int agingB = 0;\n+\t\tfinal double atol = getAbsoluteAccuracy();\n         final double rtol = getRelativeAccuracy();\n \n         // Keep track of inverted intervals, meaning that the left bound is\n@@ -185,8 +186,14 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n+                        if (x == x1) {\n+\t\t\t\t\t\t\tx0 = 0.5 * (x0 + x1 - FastMath.max(\n+\t\t\t\t\t\t\t\t\trtol * FastMath.abs(x1), atol));\n+\t\t\t\t\t\t\tf0 = computeObjectiveValue(x0);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tdouble y1 = computeObjectiveValue(x1);\n+                        inverted = !inverted;\n+\t\t\t\t\t\tf0 = computeObjectiveValue(x0);\n                     }\n                     break;\n                 default:\n@@ -194,7 +201,8 @@\n                     throw new MathInternalError();\n                 }\n             }\n-            // Update from [x0, x1] to [x0, x].\n+            double x2 = 0.5 * (x0 + x1);\n+\t\t\t// Update from [x0, x1] to [x0, x].\n             x1 = x;\n             f1 = fx;\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1066/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:23:58.406522878 -0500\n@@ -183,11 +183,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Delete", 
          "seed": "double min=getMin();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 150, 
          "faulty": "final double atol=getAbsoluteAccuracy();", 
          "type": "InsertBefore", 
          "seed": "final double absoluteAccuracy=getAbsoluteAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "double y1=computeObjectiveValue(x1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 150, 
          "faulty": "final double atol=getAbsoluteAccuracy();", 
          "type": "InsertBefore", 
          "seed": "int agingB=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "inverted=!inverted;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Replace", 
          "seed": "final double t=getAbsoluteAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 150, 
          "faulty": "final double atol=getAbsoluteAccuracy();", 
          "type": "InsertBefore", 
          "seed": "double initial=getStartValue();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_481/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:18:52.589914766 -0500\n@@ -138,16 +138,17 @@\n         if (f0 == 0.0) {\n             return x0;\n         }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n+        final double t = getAbsoluteAccuracy();\n \n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n         // Get accuracies.\n         final double ftol = getFunctionValueAccuracy();\n-        final double atol = getAbsoluteAccuracy();\n+        final double absoluteAccuracy = getAbsoluteAccuracy();\n+\t\tint agingB = 0;\n+\t\tdouble initial = getStartValue();\n+\t\tfinal double atol = getAbsoluteAccuracy();\n         final double rtol = getRelativeAccuracy();\n \n         // Keep track of inverted intervals, meaning that the left bound is\n@@ -185,8 +186,14 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n+                        if (x == x1) {\n+\t\t\t\t\t\t\tx0 = 0.5 * (x0 + x1 - FastMath.max(\n+\t\t\t\t\t\t\t\t\trtol * FastMath.abs(x1), atol));\n+\t\t\t\t\t\t\tf0 = computeObjectiveValue(x0);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tdouble y1 = computeObjectiveValue(x1);\n+                        inverted = !inverted;\n+\t\t\t\t\t\tf0 = computeObjectiveValue(x0);\n                     }\n                     break;\n                 default:\n@@ -236,7 +243,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    ;\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingB=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "final double max=getMax();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 133, 
          "faulty": "double f1=computeObjectiveValue(x1);", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_483/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:18:53.189932394 -0500\n@@ -130,7 +130,8 @@\n         double x0 = getMin();\n         double x1 = getMax();\n         double f0 = computeObjectiveValue(x0);\n-        double f1 = computeObjectiveValue(x1);\n+        final UnivariateRealSolver solver = new BrentSolver();\n+\t\tdouble f1 = computeObjectiveValue(x1);\n \n         // If one of the bounds is the exact root, return it. Since these are\n         // not under-approximations or over-approximations, we can return them\n@@ -138,10 +139,6 @@\n         if (f0 == 0.0) {\n             return x0;\n         }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -183,11 +180,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "boolean inverted=false;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1770/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:29:31.200189030 -0500\n@@ -183,11 +183,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +232,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 116, 
          "faulty": "this.allowed=allowedSolution;", 
          "type": "InsertBefore", 
          "seed": "final double functionValueAccuracy=getFunctionValueAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "f0=f1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1064/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:23:57.782505831 -0500\n@@ -113,7 +113,8 @@\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue,\n                         final AllowedSolution allowedSolution) {\n-        this.allowed = allowedSolution;\n+        final double functionValueAccuracy = getFunctionValueAccuracy();\n+\t\tthis.allowed = allowedSolution;\n         return super.solve(maxEval, f, min, max, startValue);\n     }\n \n@@ -121,7 +122,8 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        double x2 = max;\n+\t\treturn solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n     /** {@inheritDoc} */\n@@ -138,10 +140,6 @@\n         if (f0 == 0.0) {\n             return x0;\n         }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -185,8 +183,31 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n+                        if (f1 * fx < 0) {\n+\t\t\t\t\t\t\tx0 = x1;\n+\t\t\t\t\t\t\tf0 = f1;\n+\t\t\t\t\t\t\tinverted = !inverted;\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tswitch (method) {\n+\t\t\t\t\t\t\tcase ILLINOIS:\n+\t\t\t\t\t\t\t\tf0 *= 0.5;\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\tcase PEGASUS:\n+\t\t\t\t\t\t\t\tf0 *= f1 / (f1 + fx);\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\tcase REGULA_FALSI:\n+\t\t\t\t\t\t\t\tif (x == x1) {\n+\t\t\t\t\t\t\t\t\tx0 = 0.5 * (x0 + x1 - FastMath.max(rtol\n+\t\t\t\t\t\t\t\t\t\t\t* FastMath.abs(x1), atol));\n+\t\t\t\t\t\t\t\t\tf0 = computeObjectiveValue(x0);\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\tdefault:\n+\t\t\t\t\t\t\t\tthrow new MathInternalError();\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+                        f0 = f1;\n+\t\t\t\t\t\tf0 = computeObjectiveValue(x0);\n                     }\n                     break;\n                 default:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 174, 
          "faulty": "x0=x1;", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\n  return x1;\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1644/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:28:33.426551375 -0500\n@@ -132,16 +132,6 @@\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -169,7 +159,11 @@\n \n             // Update the bounds with the new approximation.\n             if (f1 * fx < 0) {\n-                // The value of x1 has switched to the other bound, thus inverting\n+                if (FastMath.abs(x1 - x0) < FastMath.max(\n+\t\t\t\t\t\trtol * FastMath.abs(x1), atol)) {\n+\t\t\t\t\treturn x1;\n+\t\t\t\t}\n+\t\t\t\t// The value of x1 has switched to the other bound, thus inverting\n                 // the interval.\n                 x0 = x1;\n                 f0 = f1;\n@@ -183,11 +177,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    int agingA = 0;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +226,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "incrementEvaluationCount();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_217/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:16:35.257748610 -0500\n@@ -185,7 +185,8 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n+                        incrementEvaluationCount();\n+\t\t\t\t\t\tx0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n                         f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "if (FastMath.abs(f1) <= ftol) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  if (inverted) {\n    return x1;\n  }\nbreak;\ncase RIGHT_SIDE:\nif (!inverted) {\nreturn x1;\n}\nbreak;\ncase BELOW_SIDE:\nif (f1 <= 0) {\nreturn x1;\n}\nbreak;\ncase ABOVE_SIDE:\nif (f1 >= 0) {\nreturn x1;\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "final double ftol=getFunctionValueAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "f0=f1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1696/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:28:56.379204233 -0500\n@@ -132,16 +132,6 @@\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -183,11 +173,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    int agingA = 0;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +222,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double initial=getStartValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 161, 
          "faulty": "final double fx=computeObjectiveValue(x);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 150, 
          "faulty": "final double atol=getAbsoluteAccuracy();", 
          "type": "InsertBefore", 
          "seed": "final double initial=getStartValue();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1003/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:23:29.781739411 -0500\n@@ -121,7 +121,8 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        double x2 = max;\n+\t\treturn solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n     /** {@inheritDoc} */\n@@ -147,7 +148,8 @@\n \n         // Get accuracies.\n         final double ftol = getFunctionValueAccuracy();\n-        final double atol = getAbsoluteAccuracy();\n+        final double initial = getStartValue();\n+\t\tfinal double atol = getAbsoluteAccuracy();\n         final double rtol = getRelativeAccuracy();\n \n         // Keep track of inverted intervals, meaning that the left bound is\n@@ -158,7 +160,8 @@\n         while (true) {\n             // Calculate the next approximation.\n             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n-            final double fx = computeObjectiveValue(x);\n+            int start = 0;\n+\t\t\tfinal double fx = computeObjectiveValue(x);\n \n             // If the new approximation is the exact root, return it. Since\n             // this is not an under-approximation or an over-approximation,\n@@ -183,11 +186,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingB=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "inverted=!inverted;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "Complex oldz=new Complex(Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double y1=computeObjectiveValue(x1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "Complex G2=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "final double t=getAbsoluteAccuracy();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_844/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:22:14.859672624 -0500\n@@ -138,10 +138,6 @@\n         if (f0 == 0.0) {\n             return x0;\n         }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -183,11 +179,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 132, 
          "faulty": "double f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 198, 
          "faulty": "x1=x;", 
          "type": "InsertBefore", 
          "seed": "double x2=0.5 * (x0 + x1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "double y1=computeObjectiveValue(x1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 150, 
          "faulty": "final double atol=getAbsoluteAccuracy();", 
          "type": "InsertBefore", 
          "seed": "int agingB=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "inverted=!inverted;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Replace", 
          "seed": "final double t=getAbsoluteAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 150, 
          "faulty": "final double atol=getAbsoluteAccuracy();", 
          "type": "InsertBefore", 
          "seed": "double initial=getStartValue();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_381/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:17:51.428094434 -0500\n@@ -121,7 +121,8 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        double x2 = max;\n+\t\treturn solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n     /** {@inheritDoc} */\n@@ -129,7 +130,8 @@\n         // Get initial solution\n         double x0 = getMin();\n         double x1 = getMax();\n-        double f0 = computeObjectiveValue(x0);\n+        int agingA = 0;\n+\t\tdouble f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n         // If one of the bounds is the exact root, return it. Since these are\n@@ -138,16 +140,16 @@\n         if (f0 == 0.0) {\n             return x0;\n         }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n+        final double t = getAbsoluteAccuracy();\n \n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n         // Get accuracies.\n         final double ftol = getFunctionValueAccuracy();\n-        final double atol = getAbsoluteAccuracy();\n+        int agingB = 0;\n+\t\tdouble initial = getStartValue();\n+\t\tfinal double atol = getAbsoluteAccuracy();\n         final double rtol = getRelativeAccuracy();\n \n         // Keep track of inverted intervals, meaning that the left bound is\n@@ -185,8 +187,14 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n+                        if (x == x1) {\n+\t\t\t\t\t\t\tx0 = 0.5 * (x0 + x1 - FastMath.max(\n+\t\t\t\t\t\t\t\t\trtol * FastMath.abs(x1), atol));\n+\t\t\t\t\t\t\tf0 = computeObjectiveValue(x0);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tdouble y1 = computeObjectiveValue(x1);\n+                        inverted = !inverted;\n+\t\t\t\t\t\tf0 = computeObjectiveValue(x0);\n                     }\n                     break;\n                 default:\n@@ -194,7 +202,8 @@\n                     throw new MathInternalError();\n                 }\n             }\n-            // Update from [x0, x1] to [x0, x].\n+            double x2 = 0.5 * (x0 + x1);\n+\t\t\t// Update from [x0, x1] to [x0, x].\n             x1 = x;\n             f1 = fx;\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double initial=getStartValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double initial=getStartValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1235/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:25:14.448715378 -0500\n@@ -183,11 +183,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "final double max=getMax();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "final double relativeAccuracy=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "this.method=method;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_305/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:17:16.951044859 -0500\n@@ -138,10 +138,6 @@\n         if (f0 == 0.0) {\n             return x0;\n         }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -185,8 +181,24 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n+                        final double relativeAccuracy = getRelativeAccuracy();\n+                        if (FastMath.abs(x1 - x0) < FastMath.max(rtol\n+\t\t\t\t\t\t\t\t* FastMath.abs(x1), atol)) {\n+\t\t\t\t\t\t\tswitch (allowed) {\n+\t\t\t\t\t\t\tcase ANY_SIDE:\n+\t\t\t\t\t\t\t\treturn x1;\n+\t\t\t\t\t\t\tcase LEFT_SIDE:\n+\t\t\t\t\t\t\t\treturn inverted ? x1 : x0;\n+\t\t\t\t\t\t\tcase RIGHT_SIDE:\n+\t\t\t\t\t\t\t\treturn inverted ? x0 : x1;\n+\t\t\t\t\t\t\tcase BELOW_SIDE:\n+\t\t\t\t\t\t\t\treturn (f1 <= 0) ? x1 : x0;\n+\t\t\t\t\t\t\tcase ABOVE_SIDE:\n+\t\t\t\t\t\t\t\treturn (f1 >= 0) ? x1 : x0;\n+\t\t\t\t\t\t\tdefault:\n+\t\t\t\t\t\t\t\tthrow new MathInternalError();\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n                     }\n                     break;\n                 default:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 132, 
          "faulty": "double f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "final double functionValueAccuracy=getFunctionValueAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 150, 
          "faulty": "final double atol=getAbsoluteAccuracy();", 
          "type": "InsertBefore", 
          "seed": "final double absoluteAccuracy=getAbsoluteAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 146, 
          "faulty": "verifyBracketing(x0,x1);", 
          "type": "InsertBefore", 
          "seed": "final double relativeAccuracy=getRelativeAccuracy();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_314/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:17:21.355179990 -0500\n@@ -121,7 +121,8 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        double x2 = max;\n+\t\treturn solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n     /** {@inheritDoc} */\n@@ -129,7 +130,8 @@\n         // Get initial solution\n         double x0 = getMin();\n         double x1 = getMax();\n-        double f0 = computeObjectiveValue(x0);\n+        int agingA = 0;\n+\t\tdouble f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n         // If one of the bounds is the exact root, return it. Since these are\n@@ -142,12 +144,14 @@\n             return x1;\n         }\n \n-        // Verify bracketing of initial solution.\n+        final double relativeAccuracy = getRelativeAccuracy();\n+\t\t// Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n         // Get accuracies.\n         final double ftol = getFunctionValueAccuracy();\n-        final double atol = getAbsoluteAccuracy();\n+        final double absoluteAccuracy = getAbsoluteAccuracy();\n+\t\tfinal double atol = getAbsoluteAccuracy();\n         final double rtol = getRelativeAccuracy();\n \n         // Keep track of inverted intervals, meaning that the left bound is\n@@ -185,7 +189,7 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n+                        final double functionValueAccuracy = getFunctionValueAccuracy();\n                         f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "double x2=0.5 * (x0 + x1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double x0=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "InsertBefore", 
          "seed": "final double functionValueAccuracy=getFunctionValueAccuracy();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1779/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:29:34.892293080 -0500\n@@ -132,16 +132,6 @@\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -183,11 +173,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    int agingA = 0;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +222,10 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    {\n+\t\t\t\t\t\tfinal double functionValueAccuracy = getFunctionValueAccuracy();\n+\t\t\t\t\t\treturn x1;\n+\t\t\t\t\t}\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 150, 
          "faulty": "final double atol=getAbsoluteAccuracy();", 
          "type": "InsertBefore", 
          "seed": "final double initial=getStartValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double initial=getStartValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 161, 
          "faulty": "final double fx=computeObjectiveValue(x);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1270/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:25:31.481231032 -0500\n@@ -132,12 +132,6 @@\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n         if (f1 == 0.0) {\n             return x1;\n         }\n@@ -147,7 +141,8 @@\n \n         // Get accuracies.\n         final double ftol = getFunctionValueAccuracy();\n-        final double atol = getAbsoluteAccuracy();\n+        final double initial = getStartValue();\n+\t\tfinal double atol = getAbsoluteAccuracy();\n         final double rtol = getRelativeAccuracy();\n \n         // Keep track of inverted intervals, meaning that the left bound is\n@@ -158,7 +153,8 @@\n         while (true) {\n             // Calculate the next approximation.\n             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n-            final double fx = computeObjectiveValue(x);\n+            int start = 0;\n+\t\t\tfinal double fx = computeObjectiveValue(x);\n \n             // If the new approximation is the exact root, return it. Since\n             // this is not an under-approximation or an over-approximation,\n@@ -183,11 +179,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +228,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingB=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "inverted=!inverted;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "Complex oldz=new Complex(Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double y1=computeObjectiveValue(x1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "final double relativeAccuracy=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "f0=f1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_472/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:18:48.273787854 -0500\n@@ -138,10 +138,6 @@\n         if (f0 == 0.0) {\n             return x0;\n         }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -183,11 +179,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "double x2=0.5 * (x0 + x1);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1821/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:29:55.060860320 -0500\n@@ -132,12 +132,6 @@\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n         if (f1 == 0.0) {\n             return x1;\n         }\n@@ -183,11 +177,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    int agingA = 0;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +226,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingB=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingB=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "inverted=!inverted;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "Complex oldz=new Complex(Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double y1=computeObjectiveValue(x1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "final double relativeAccuracy=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "f0=f1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final double absoluteAccuracy=getAbsoluteAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Delete", 
          "seed": "final double t=getAbsoluteAccuracy();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_555/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:19:29.258984663 -0500\n@@ -138,10 +138,6 @@\n         if (f0 == 0.0) {\n             return x0;\n         }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -183,11 +179,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +228,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    ;\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "incrementEvaluationCount();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_263/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:16:57.402441031 -0500\n@@ -185,7 +185,30 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n+                        incrementEvaluationCount();\n+\t\t\t\t\t\tif (f1 * fx < 0) {\n+\t\t\t\t\t\t\tx0 = x1;\n+\t\t\t\t\t\t\tf0 = f1;\n+\t\t\t\t\t\t\tinverted = !inverted;\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tswitch (method) {\n+\t\t\t\t\t\t\tcase ILLINOIS:\n+\t\t\t\t\t\t\t\tf0 *= 0.5;\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\tcase PEGASUS:\n+\t\t\t\t\t\t\t\tf0 *= f1 / (f1 + fx);\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\tcase REGULA_FALSI:\n+\t\t\t\t\t\t\t\tif (x == x1) {\n+\t\t\t\t\t\t\t\t\tx0 = 0.5 * (x0 + x1 - FastMath.max(rtol\n+\t\t\t\t\t\t\t\t\t\t\t* FastMath.abs(x1), atol));\n+\t\t\t\t\t\t\t\t\tf0 = computeObjectiveValue(x0);\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\tdefault:\n+\t\t\t\t\t\t\t\tthrow new MathInternalError();\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n                         f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Delete", 
          "seed": "final double rtol=getRelativeAccuracy();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_983/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:23:23.057554916 -0500\n@@ -183,11 +183,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +232,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    ;\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "final double functionValueAccuracy=getFunctionValueAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 150, 
          "faulty": "final double atol=getAbsoluteAccuracy();", 
          "type": "InsertBefore", 
          "seed": "final double absoluteAccuracy=getAbsoluteAccuracy();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_229/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:16:41.357940286 -0500\n@@ -147,7 +147,8 @@\n \n         // Get accuracies.\n         final double ftol = getFunctionValueAccuracy();\n-        final double atol = getAbsoluteAccuracy();\n+        final double absoluteAccuracy = getAbsoluteAccuracy();\n+\t\tfinal double atol = getAbsoluteAccuracy();\n         final double rtol = getRelativeAccuracy();\n \n         // Keep track of inverted intervals, meaning that the left bound is\n@@ -185,7 +186,7 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n+                        final double functionValueAccuracy = getFunctionValueAccuracy();\n                         f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "final double functionValueAccuracy=getFunctionValueAccuracy();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_14/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:14:40.098163256 -0500\n@@ -185,7 +185,7 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n+                        final double functionValueAccuracy = getFunctionValueAccuracy();\n                         f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "final double functionValueAccuracy=getFunctionValueAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "final double max=getMax();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "incrementEvaluationCount();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_338/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:17:31.071476990 -0500\n@@ -138,10 +138,6 @@\n         if (f0 == 0.0) {\n             return x0;\n         }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -185,7 +181,8 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n+                        incrementEvaluationCount();\n+\t\t\t\t\t\tfinal double functionValueAccuracy = getFunctionValueAccuracy();\n                         f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "final double max=getMax();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_657/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:20:20.012443640 -0500\n@@ -121,7 +121,8 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        double x2 = max;\n+\t\treturn solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n     /** {@inheritDoc} */\n@@ -138,10 +139,6 @@\n         if (f0 == 0.0) {\n             return x0;\n         }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -183,11 +180,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double initial=getStartValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1168/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:24:45.063816358 -0500\n@@ -121,7 +121,8 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        double x2 = max;\n+\t\treturn solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n     /** {@inheritDoc} */\n@@ -183,11 +184,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 161, 
          "faulty": "final double fx=computeObjectiveValue(x);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 151, 
          "faulty": "final double rtol=getRelativeAccuracy();", 
          "type": "InsertBefore", 
          "seed": "if (f1 == 0.0) {\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "double x0=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java", 
          "line": 371, 
          "faulty": "if (function == null) {\n  throw new NullArgumentException(LocalizedFormats.FUNCTION);\n}", 
          "type": "Delete", 
          "seed": "return doSolve();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1345/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:26:17.370602654 -0500\n@@ -121,7 +121,8 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        double x2 = max;\n+\t\treturn solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n     /** {@inheritDoc} */\n@@ -132,12 +133,6 @@\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n         if (f1 == 0.0) {\n             return x1;\n         }\n@@ -148,7 +143,10 @@\n         // Get accuracies.\n         final double ftol = getFunctionValueAccuracy();\n         final double atol = getAbsoluteAccuracy();\n-        final double rtol = getRelativeAccuracy();\n+        if (f1 == 0.0) {\n+\t\t\treturn x1;\n+\t\t}\n+\t\tfinal double rtol = getRelativeAccuracy();\n \n         // Keep track of inverted intervals, meaning that the left bound is\n         // larger than the right bound.\n@@ -158,7 +156,8 @@\n         while (true) {\n             // Calculate the next approximation.\n             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n-            final double fx = computeObjectiveValue(x);\n+            int start = 0;\n+\t\t\tfinal double fx = computeObjectiveValue(x);\n \n             // If the new approximation is the exact root, return it. Since\n             // this is not an under-approximation or an over-approximation,\n@@ -183,11 +182,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +231,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-02 11:55:31.845022991 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1345/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-02 12:26:17.374602773 -0500\n@@ -368,9 +368,6 @@\n     public static void verifyBracketing(UnivariateRealFunction function,\n                                         final double lower,\n                                         final double upper) {\n-        if (function == null) {\n-            throw new NullArgumentException(LocalizedFormats.FUNCTION);\n-        }\n         verifyInterval(lower, upper);\n         if (!isBracketing(function, lower, upper)) {\n             throw new NoBracketingException(lower, upper,\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 160, 
          "faulty": "final double x=x1 - ((f1 * (x1 - x0)) / (f1 - f0));", 
          "type": "InsertBefore", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double initial=getStartValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 235, 
          "faulty": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}", 
          "type": "InsertBefore", 
          "seed": "final double relativeAccuracy=getRelativeAccuracy();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1201/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:24:59.160249183 -0500\n@@ -156,7 +156,8 @@\n \n         // Keep finding better approximations.\n         while (true) {\n-            // Calculate the next approximation.\n+            int numIterations = 0;\n+\t\t\t// Calculate the next approximation.\n             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n             final double fx = computeObjectiveValue(x);\n \n@@ -183,11 +184,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -230,7 +227,8 @@\n                 }\n             }\n \n-            // If the current interval is within the given accuracies, we\n+            final double relativeAccuracy = getRelativeAccuracy();\n+\t\t\t// If the current interval is within the given accuracies, we\n             // are satisfied with the current approximation.\n             if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),\n                                                      atol)) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "double x2=0.5 * (x0 + x1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "if (f1 >= 0) {\n  return x1;\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1711/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:29:03.791414410 -0500\n@@ -132,12 +132,6 @@\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n         if (f1 == 0.0) {\n             return x1;\n         }\n@@ -183,11 +177,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    int agingA = 0;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +226,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "if (FastMath.abs(f1) <= ftol) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  if (inverted) {\n    return x1;\n  }\nbreak;\ncase RIGHT_SIDE:\nif (!inverted) {\nreturn x1;\n}\nbreak;\ncase BELOW_SIDE:\nif (f1 <= 0) {\nreturn x1;\n}\nbreak;\ncase ABOVE_SIDE:\nif (f1 >= 0) {\nreturn x1;\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1613/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:28:19.046140691 -0500\n@@ -132,16 +132,6 @@\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -183,11 +173,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    int agingA = 0;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +222,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 171, 
          "faulty": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}", 
          "type": "InsertBefore", 
          "seed": "final double initial=getStartValue();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1496/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:27:22.756519279 -0500\n@@ -132,16 +132,6 @@\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -167,7 +157,8 @@\n                 return x;\n             }\n \n-            // Update the bounds with the new approximation.\n+            final double initial = getStartValue();\n+\t\t\t// Update the bounds with the new approximation.\n             if (f1 * fx < 0) {\n                 // The value of x1 has switched to the other bound, thus inverting\n                 // the interval.\n@@ -183,11 +174,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    int agingA = 0;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +223,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 150, 
          "faulty": "final double atol=getAbsoluteAccuracy();", 
          "type": "InsertBefore", 
          "seed": "int agingB=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "inverted=!inverted;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_329/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:17:27.979382640 -0500\n@@ -147,7 +147,8 @@\n \n         // Get accuracies.\n         final double ftol = getFunctionValueAccuracy();\n-        final double atol = getAbsoluteAccuracy();\n+        int agingB = 0;\n+\t\tfinal double atol = getAbsoluteAccuracy();\n         final double rtol = getRelativeAccuracy();\n \n         // Keep track of inverted intervals, meaning that the left bound is\n@@ -185,8 +186,31 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n+                        if (f1 * fx < 0) {\n+\t\t\t\t\t\t\tx0 = x1;\n+\t\t\t\t\t\t\tf0 = f1;\n+\t\t\t\t\t\t\tinverted = !inverted;\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tswitch (method) {\n+\t\t\t\t\t\t\tcase ILLINOIS:\n+\t\t\t\t\t\t\t\tf0 *= 0.5;\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\tcase PEGASUS:\n+\t\t\t\t\t\t\t\tf0 *= f1 / (f1 + fx);\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\tcase REGULA_FALSI:\n+\t\t\t\t\t\t\t\tif (x == x1) {\n+\t\t\t\t\t\t\t\t\tx0 = 0.5 * (x0 + x1 - FastMath.max(rtol\n+\t\t\t\t\t\t\t\t\t\t\t* FastMath.abs(x1), atol));\n+\t\t\t\t\t\t\t\t\tf0 = computeObjectiveValue(x0);\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\tdefault:\n+\t\t\t\t\t\t\t\tthrow new MathInternalError();\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+                        inverted = !inverted;\n+\t\t\t\t\t\tf0 = computeObjectiveValue(x0);\n                     }\n                     break;\n                 default:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double initial=getStartValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 161, 
          "faulty": "final double fx=computeObjectiveValue(x);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 146, 
          "faulty": "verifyBracketing(x0,x1);", 
          "type": "InsertBefore", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "double min=getMin();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "f0=f1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1184/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:24:52.456043699 -0500\n@@ -121,7 +121,8 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        double x2 = max;\n+\t\treturn solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n     /** {@inheritDoc} */\n@@ -142,7 +143,8 @@\n             return x1;\n         }\n \n-        // Verify bracketing of initial solution.\n+        int agingA = 0;\n+\t\t// Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n         // Get accuracies.\n@@ -158,7 +160,8 @@\n         while (true) {\n             // Calculate the next approximation.\n             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n-            final double fx = computeObjectiveValue(x);\n+            int start = 0;\n+\t\t\tfinal double fx = computeObjectiveValue(x);\n \n             // If the new approximation is the exact root, return it. Since\n             // this is not an under-approximation or an over-approximation,\n@@ -183,11 +186,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +235,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double initial=getStartValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 116, 
          "faulty": "this.allowed=allowedSolution;", 
          "type": "InsertBefore", 
          "seed": "final double functionValueAccuracy=getFunctionValueAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double initial=getStartValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 149, 
          "faulty": "final double ftol=getFunctionValueAccuracy();", 
          "type": "InsertBefore", 
          "seed": "final double functionValueAccuracy=getFunctionValueAccuracy();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1232/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:25:13.268679511 -0500\n@@ -113,7 +113,8 @@\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue,\n                         final AllowedSolution allowedSolution) {\n-        this.allowed = allowedSolution;\n+        final double functionValueAccuracy = getFunctionValueAccuracy();\n+\t\tthis.allowed = allowedSolution;\n         return super.solve(maxEval, f, min, max, startValue);\n     }\n \n@@ -138,14 +139,11 @@\n         if (f0 == 0.0) {\n             return x0;\n         }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n-        // Get accuracies.\n+        final double functionValueAccuracy = getFunctionValueAccuracy();\n+\t\t// Get accuracies.\n         final double ftol = getFunctionValueAccuracy();\n         final double atol = getAbsoluteAccuracy();\n         final double rtol = getRelativeAccuracy();\n@@ -183,11 +181,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingB=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double y1=computeObjectiveValue(x1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 155, 
          "faulty": "boolean inverted=false;", 
          "type": "InsertBefore", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "inverted=!inverted;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "Complex oldz=new Complex(Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double y1=computeObjectiveValue(x1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "final double relativeAccuracy=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "f0=f1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_551/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:19:27.394930618 -0500\n@@ -121,7 +121,8 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        double x2 = max;\n+\t\treturn solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n     /** {@inheritDoc} */\n@@ -138,10 +139,6 @@\n         if (f0 == 0.0) {\n             return x0;\n         }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -150,7 +147,8 @@\n         final double atol = getAbsoluteAccuracy();\n         final double rtol = getRelativeAccuracy();\n \n-        // Keep track of inverted intervals, meaning that the left bound is\n+        int numIterations = 0;\n+\t\t// Keep track of inverted intervals, meaning that the left bound is\n         // larger than the right bound.\n         boolean inverted = false;\n \n@@ -183,11 +181,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 150, 
          "faulty": "final double atol=getAbsoluteAccuracy();", 
          "type": "InsertBefore", 
          "seed": "final double initial=getStartValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double initial=getStartValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 235, 
          "faulty": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}", 
          "type": "InsertBefore", 
          "seed": "final double relativeAccuracy=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java", 
          "line": 305, 
          "faulty": "if (function == null) {\n  throw new NullArgumentException(LocalizedFormats.FUNCTION);\n}", 
          "type": "InsertBefore", 
          "seed": "if (function == null) {\n  throw new NullArgumentException(LocalizedFormats.FUNCTION);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "Complex dv=null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1267/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:25:30.257194102 -0500\n@@ -121,7 +121,8 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        double x2 = max;\n+\t\treturn solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n     /** {@inheritDoc} */\n@@ -147,7 +148,8 @@\n \n         // Get accuracies.\n         final double ftol = getFunctionValueAccuracy();\n-        final double atol = getAbsoluteAccuracy();\n+        final double initial = getStartValue();\n+\t\tfinal double atol = getAbsoluteAccuracy();\n         final double rtol = getRelativeAccuracy();\n \n         // Keep track of inverted intervals, meaning that the left bound is\n@@ -183,11 +185,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -230,7 +228,8 @@\n                 }\n             }\n \n-            // If the current interval is within the given accuracies, we\n+            final double relativeAccuracy = getRelativeAccuracy();\n+\t\t\t// If the current interval is within the given accuracies, we\n             // are satisfied with the current approximation.\n             if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),\n                                                      atol)) {\n\n\n--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-02 11:55:31.845022991 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1267/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-02 12:25:30.257194102 -0500\n@@ -303,6 +303,10 @@\n                                        final double lower,\n                                        final double upper) {\n         if (function == null) {\n+\t\t\t\t\t\t\t\t\t\t\tthrow new NullArgumentException(\n+\t\t\t\t\t\t\t\t\t\t\t\t\tLocalizedFormats.FUNCTION);\n+\t\t\t\t\t\t\t\t\t\t}\n+\t\tif (function == null) {\n             throw new NullArgumentException(LocalizedFormats.FUNCTION);\n         }\n         final double fLo = function.value(lower);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingB=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 132, 
          "faulty": "double f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "final double startValue=getStartValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double y1=computeObjectiveValue(x1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_650/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:20:16.332338613 -0500\n@@ -129,7 +129,8 @@\n         // Get initial solution\n         double x0 = getMin();\n         double x1 = getMax();\n-        double f0 = computeObjectiveValue(x0);\n+        final double startValue = getStartValue();\n+\t\tdouble f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n         // If one of the bounds is the exact root, return it. Since these are\n@@ -185,8 +186,7 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n+                        double y1 = computeObjectiveValue(x1);\n                     }\n                     break;\n                 default:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "final double functionValueAccuracy=getFunctionValueAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "final double max=getMax();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "return x;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_147/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:15:50.828342854 -0500\n@@ -138,10 +138,6 @@\n         if (f0 == 0.0) {\n             return x0;\n         }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -183,11 +179,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 150, 
          "faulty": "final double atol=getAbsoluteAccuracy();", 
          "type": "InsertBefore", 
          "seed": "final double initial=getStartValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double initial=getStartValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 161, 
          "faulty": "final double fx=computeObjectiveValue(x);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "final double t=getAbsoluteAccuracy();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1360/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:26:24.490813370 -0500\n@@ -121,7 +121,8 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        double x2 = max;\n+\t\treturn solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n     /** {@inheritDoc} */\n@@ -147,7 +148,8 @@\n \n         // Get accuracies.\n         final double ftol = getFunctionValueAccuracy();\n-        final double atol = getAbsoluteAccuracy();\n+        final double initial = getStartValue();\n+\t\tfinal double atol = getAbsoluteAccuracy();\n         final double rtol = getRelativeAccuracy();\n \n         // Keep track of inverted intervals, meaning that the left bound is\n@@ -158,7 +160,8 @@\n         while (true) {\n             // Calculate the next approximation.\n             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n-            final double fx = computeObjectiveValue(x);\n+            int start = 0;\n+\t\t\tfinal double fx = computeObjectiveValue(x);\n \n             // If the new approximation is the exact root, return it. Since\n             // this is not an under-approximation or an over-approximation,\n@@ -183,11 +186,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +235,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "final double relativeAccuracy=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "this.method=method;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_491/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:18:56.826039119 -0500\n@@ -185,8 +185,7 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n+                        final double relativeAccuracy = getRelativeAccuracy();\n                     }\n                     break;\n                 default:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "f0=f1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_905/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:22:41.232403079 -0500\n@@ -138,10 +138,6 @@\n         if (f0 == 0.0) {\n             return x0;\n         }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -183,11 +179,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingB=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 150, 
          "faulty": "final double atol=getAbsoluteAccuracy();", 
          "type": "InsertBefore", 
          "seed": "int agingB=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "final double relativeAccuracy=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "this.method=method;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_549/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:19:26.718911009 -0500\n@@ -147,7 +147,8 @@\n \n         // Get accuracies.\n         final double ftol = getFunctionValueAccuracy();\n-        final double atol = getAbsoluteAccuracy();\n+        int agingB = 0;\n+\t\tfinal double atol = getAbsoluteAccuracy();\n         final double rtol = getRelativeAccuracy();\n \n         // Keep track of inverted intervals, meaning that the left bound is\n@@ -183,11 +184,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1061/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:23:56.458469654 -0500\n@@ -183,11 +183,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 116, 
          "faulty": "this.allowed=allowedSolution;", 
          "type": "InsertBefore", 
          "seed": "final double functionValueAccuracy=getFunctionValueAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "return (f1 <= 0) ? x1 : x0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_939/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:23:03.089005945 -0500\n@@ -113,7 +113,8 @@\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue,\n                         final AllowedSolution allowedSolution) {\n-        this.allowed = allowedSolution;\n+        final double functionValueAccuracy = getFunctionValueAccuracy();\n+\t\tthis.allowed = allowedSolution;\n         return super.solve(maxEval, f, min, max, startValue);\n     }\n \n@@ -183,11 +184,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 150, 
          "faulty": "final double atol=getAbsoluteAccuracy();", 
          "type": "InsertBefore", 
          "seed": "final double initial=getStartValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 161, 
          "faulty": "final double fx=computeObjectiveValue(x);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "final double absoluteAccuracy=getAbsoluteAccuracy();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1430/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:26:54.079683580 -0500\n@@ -147,7 +147,8 @@\n \n         // Get accuracies.\n         final double ftol = getFunctionValueAccuracy();\n-        final double atol = getAbsoluteAccuracy();\n+        final double initial = getStartValue();\n+\t\tfinal double atol = getAbsoluteAccuracy();\n         final double rtol = getRelativeAccuracy();\n \n         // Keep track of inverted intervals, meaning that the left bound is\n@@ -158,7 +159,8 @@\n         while (true) {\n             // Calculate the next approximation.\n             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n-            final double fx = computeObjectiveValue(x);\n+            int start = 0;\n+\t\t\tfinal double fx = computeObjectiveValue(x);\n \n             // If the new approximation is the exact root, return it. Since\n             // this is not an under-approximation or an over-approximation,\n@@ -183,11 +185,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +234,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "double x2=0.5 * (x0 + x1);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1648/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:28:35.326605539 -0500\n@@ -138,10 +138,6 @@\n         if (f0 == 0.0) {\n             return x0;\n         }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -183,11 +179,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    int agingA = 0;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingB=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double y1=computeObjectiveValue(x1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 155, 
          "faulty": "boolean inverted=false;", 
          "type": "InsertBefore", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 132, 
          "faulty": "double f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "final double startValue=getStartValue();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_516/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:19:10.130428356 -0500\n@@ -121,7 +121,8 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        double x2 = max;\n+\t\treturn solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n     /** {@inheritDoc} */\n@@ -129,7 +130,8 @@\n         // Get initial solution\n         double x0 = getMin();\n         double x1 = getMax();\n-        double f0 = computeObjectiveValue(x0);\n+        final double startValue = getStartValue();\n+\t\tdouble f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n         // If one of the bounds is the exact root, return it. Since these are\n@@ -150,7 +152,8 @@\n         final double atol = getAbsoluteAccuracy();\n         final double rtol = getRelativeAccuracy();\n \n-        // Keep track of inverted intervals, meaning that the left bound is\n+        int numIterations = 0;\n+\t\t// Keep track of inverted intervals, meaning that the left bound is\n         // larger than the right bound.\n         boolean inverted = false;\n \n@@ -183,11 +186,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "this.method=method;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 150, 
          "faulty": "final double atol=getAbsoluteAccuracy();", 
          "type": "InsertBefore", 
          "seed": "final double initial=getStartValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f0 == 0.0) {\n  return x0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 124, 
          "faulty": "return solve(maxEval,f,min,max,startValue,AllowedSolution.ANY_SIDE);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double initial=getStartValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 235, 
          "faulty": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}", 
          "type": "InsertBefore", 
          "seed": "final double relativeAccuracy=getRelativeAccuracy();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1177/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:24:48.707928532 -0500\n@@ -121,7 +121,8 @@\n     @Override\n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue) {\n-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+        double x2 = max;\n+\t\treturn solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n     /** {@inheritDoc} */\n@@ -147,7 +148,8 @@\n \n         // Get accuracies.\n         final double ftol = getFunctionValueAccuracy();\n-        final double atol = getAbsoluteAccuracy();\n+        final double initial = getStartValue();\n+\t\tfinal double atol = getAbsoluteAccuracy();\n         final double rtol = getRelativeAccuracy();\n \n         // Keep track of inverted intervals, meaning that the left bound is\n@@ -183,11 +185,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -230,7 +228,8 @@\n                 }\n             }\n \n-            // If the current interval is within the given accuracies, we\n+            final double relativeAccuracy = getRelativeAccuracy();\n+\t\t\t// If the current interval is within the given accuracies, we\n             // are satisfied with the current approximation.\n             if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),\n                                                      atol)) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "int numIterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "InsertBefore", 
          "seed": "final UnivariateRealSolver solver=new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Replace", 
          "seed": "int agingA=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "int numIterations=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1390/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:26:37.815206297 -0500\n@@ -132,16 +132,6 @@\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -183,11 +173,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    int agingA = 0;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +222,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "int agingB=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double y1=computeObjectiveValue(x1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {\nswitch (allowed) {\ncase ANY_SIDE:\n    return x1;\ncase LEFT_SIDE:\n  return inverted ? x1 : x0;\ncase RIGHT_SIDE:\nreturn inverted ? x0 : x1;\ncase BELOW_SIDE:\nreturn (f1 <= 0) ? x1 : x0;\ncase ABOVE_SIDE:\nreturn (f1 >= 0) ? x1 : x0;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "final double relativeAccuracy=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "Delete", 
          "seed": "this.method=method;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_368/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:17:45.911927744 -0500\n@@ -183,11 +183,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Replace", 
          "seed": "final double functionValueAccuracy=getFunctionValueAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 141, 
          "faulty": "if (f1 == 0.0) {\n  return x1;\n}", 
          "type": "Delete", 
          "seed": "final double max=getMax();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_288/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:17:09.562817428 -0500\n@@ -138,10 +138,6 @@\n         if (f0 == 0.0) {\n             return x0;\n         }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n \n@@ -185,7 +181,7 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n+                        final double functionValueAccuracy = getFunctionValueAccuracy();\n                         f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 188, 
          "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "return (f1 >= 0) ? x1 : x0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 161, 
          "faulty": "final double fx=computeObjectiveValue(x);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 138, 
          "faulty": "if (f0 == 0.0) {\n  return x0;\n}", 
          "type": "Delete", 
          "seed": "this.allowed=AllowedSolution.ANY_SIDE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 239, 
          "faulty": "return x1;", 
          "type": "Replace", 
          "seed": "final double eps=getRelativeAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 187, 
          "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", 
          "type": "Delete", 
          "seed": "double x0=getMin();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", 
          "line": 189, 
          "faulty": "f0=computeObjectiveValue(x0);", 
          "type": "InsertBefore", 
          "seed": "double y1=computeObjectiveValue(x1);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1609/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:28:17.234088846 -0500\n@@ -132,12 +132,6 @@\n         double f0 = computeObjectiveValue(x0);\n         double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n         if (f1 == 0.0) {\n             return x1;\n         }\n@@ -158,7 +152,8 @@\n         while (true) {\n             // Calculate the next approximation.\n             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n-            final double fx = computeObjectiveValue(x);\n+            int start = 0;\n+\t\t\tfinal double fx = computeObjectiveValue(x);\n \n             // If the new approximation is the exact root, return it. Since\n             // this is not an under-approximation or an over-approximation,\n@@ -183,11 +178,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n@@ -236,7 +227,7 @@\n                                                      atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    final double eps = getRelativeAccuracy();\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n\n\n"
    }
  ]
}