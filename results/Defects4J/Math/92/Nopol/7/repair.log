cd /tmp/Nopol_Defects4J_Math_92;
export JAVA_TOOL_OPTIONS=-Dfile.encoding=UTF8;
TZ="America/New_York"; export TZ;
export PATH="/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/:$PATH";
export JAVA_HOME="/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/";
time java -Xmx4048m -cp /home/tdurieux/defects4j4repair/script/../repair_tools/nopol.jar:/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin//../lib/tools.jar fr.inria.lille.repair.Main \
	--mode repair \
	--type pre_then_cond \
	--oracle angelic \
	--synthesis smt \
	--flocal gzoltar \
	--json \
	--solver z3 \
	--solver-path /home/tdurieux/defects4j4repair/script/../libs/z3/build/z3 \
	--complianceLevel 5 \
	--source src/java/ \
	--classpath "target/classes/:target/test-classes/:/tmp/Nopol_Defects4J_Math_92/target/classes/:/tmp/Nopol_Defects4J_Math_92/target/test-classes/:/home/tdurieux/defects4j4repair/script/../benchmarks/defects4j/framework/projects/Math/lib/commons-discovery-0.5.jar:/home/tdurieux/defects4j4repair/script/../repair_tools/nopol.jar";
	echo "\n\nNode: `hostname`\n";
	echo "\n\nDate: `date`\n";
Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8
22:09:50.572 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Source files: [src/java]
22:09:50.582 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Classpath: [file:/tmp/Nopol_Defects4J_Math_92/target/classes/, file:/tmp/Nopol_Defects4J_Math_92/target/test-classes/, file:/tmp/Nopol_Defects4J_Math_92/target/classes/, file:/tmp/Nopol_Defects4J_Math_92/target/test-classes/, file:/home/tdurieux/defects4j4repair/script/../benchmarks/defects4j/framework/projects/Math/lib/commons-discovery-0.5.jar, file:/home/tdurieux/defects4j4repair/script/../repair_tools/nopol.jar]
22:09:50.582 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Statement type: PRE_THEN_COND
22:09:50.583 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Args: [org.apache.commons.math.ArgumentOutsideDomainExceptionTest, org.apache.commons.math.ArgumentOutsideDomainExceptionTest, org.apache.commons.math.ConvergenceExceptionTest, org.apache.commons.math.ConvergenceExceptionTest, org.apache.commons.math.DuplicateSampleAbscissaExceptionTest, org.apache.commons.math.DuplicateSampleAbscissaExceptionTest, org.apache.commons.math.FunctionEvaluationExceptionTest, org.apache.commons.math.FunctionEvaluationExceptionTest, org.apache.commons.math.MathConfigurationExceptionTest, org.apache.commons.math.MathConfigurationExceptionTest, org.apache.commons.math.MathExceptionTest, org.apache.commons.math.MathExceptionTest, org.apache.commons.math.MaxIterationsExceededExceptionTest, org.apache.commons.math.MaxIterationsExceededExceptionTest, org.apache.commons.math.analysis.integration.LegendreGaussIntegratorTest, org.apache.commons.math.analysis.integration.LegendreGaussIntegratorTest, org.apache.commons.math.analysis.integration.RombergIntegratorTest, org.apache.commons.math.analysis.integration.RombergIntegratorTest, org.apache.commons.math.analysis.integration.SimpsonIntegratorTest, org.apache.commons.math.analysis.integration.SimpsonIntegratorTest, org.apache.commons.math.analysis.integration.TrapezoidIntegratorTest, org.apache.commons.math.analysis.integration.TrapezoidIntegratorTest, org.apache.commons.math.analysis.interpolation.DividedDifferenceInterpolatorTest, org.apache.commons.math.analysis.interpolation.DividedDifferenceInterpolatorTest, org.apache.commons.math.analysis.interpolation.NevilleInterpolatorTest, org.apache.commons.math.analysis.interpolation.NevilleInterpolatorTest, org.apache.commons.math.analysis.interpolation.SplineInterpolatorTest, org.apache.commons.math.analysis.interpolation.SplineInterpolatorTest, org.apache.commons.math.analysis.minimization.BrentMinimizerTest, org.apache.commons.math.analysis.minimization.BrentMinimizerTest, org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeFormTest, org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeFormTest, org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonFormTest, org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonFormTest, org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest, org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest, org.apache.commons.math.analysis.polynomials.PolynomialSplineFunctionTest, org.apache.commons.math.analysis.polynomials.PolynomialSplineFunctionTest, org.apache.commons.math.analysis.solvers.BisectionSolverTest, org.apache.commons.math.analysis.solvers.BisectionSolverTest, org.apache.commons.math.analysis.solvers.BrentSolverTest, org.apache.commons.math.analysis.solvers.BrentSolverTest, org.apache.commons.math.analysis.solvers.LaguerreSolverTest, org.apache.commons.math.analysis.solvers.LaguerreSolverTest, org.apache.commons.math.analysis.solvers.MullerSolverTest, org.apache.commons.math.analysis.solvers.MullerSolverTest, org.apache.commons.math.analysis.solvers.NewtonSolverTest, org.apache.commons.math.analysis.solvers.NewtonSolverTest, org.apache.commons.math.analysis.solvers.RiddersSolverTest, org.apache.commons.math.analysis.solvers.RiddersSolverTest, org.apache.commons.math.analysis.solvers.UnivariateRealSolverFactoryImplTest, org.apache.commons.math.analysis.solvers.UnivariateRealSolverFactoryImplTest, org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest, org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest, org.apache.commons.math.complex.ComplexFormatTest, org.apache.commons.math.complex.ComplexFormatTest, org.apache.commons.math.complex.ComplexTest, org.apache.commons.math.complex.ComplexTest, org.apache.commons.math.complex.ComplexUtilsTest, org.apache.commons.math.complex.ComplexUtilsTest, org.apache.commons.math.complex.FrenchComplexFormatTest, org.apache.commons.math.complex.FrenchComplexFormatTest, org.apache.commons.math.distribution.BetaDistributionTest, org.apache.commons.math.distribution.BetaDistributionTest, org.apache.commons.math.distribution.BinomialDistributionTest, org.apache.commons.math.distribution.BinomialDistributionTest, org.apache.commons.math.distribution.CauchyDistributionTest, org.apache.commons.math.distribution.CauchyDistributionTest, org.apache.commons.math.distribution.ChiSquareDistributionTest, org.apache.commons.math.distribution.ChiSquareDistributionTest, org.apache.commons.math.distribution.ExponentialDistributionTest, org.apache.commons.math.distribution.ExponentialDistributionTest, org.apache.commons.math.distribution.FDistributionTest, org.apache.commons.math.distribution.FDistributionTest, org.apache.commons.math.distribution.GammaDistributionTest, org.apache.commons.math.distribution.GammaDistributionTest, org.apache.commons.math.distribution.HypergeometricDistributionTest, org.apache.commons.math.distribution.HypergeometricDistributionTest, org.apache.commons.math.distribution.NormalDistributionTest, org.apache.commons.math.distribution.NormalDistributionTest, org.apache.commons.math.distribution.PascalDistributionTest, org.apache.commons.math.distribution.PascalDistributionTest, org.apache.commons.math.distribution.PoissonDistributionTest, org.apache.commons.math.distribution.PoissonDistributionTest, org.apache.commons.math.distribution.TDistributionTest, org.apache.commons.math.distribution.TDistributionTest, org.apache.commons.math.distribution.WeibullDistributionTest, org.apache.commons.math.distribution.WeibullDistributionTest, org.apache.commons.math.distribution.ZipfDistributionTest, org.apache.commons.math.distribution.ZipfDistributionTest, org.apache.commons.math.estimation.EstimatedParameterTest, org.apache.commons.math.estimation.EstimatedParameterTest, org.apache.commons.math.estimation.GaussNewtonEstimatorTest, org.apache.commons.math.estimation.GaussNewtonEstimatorTest, org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest, org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest, org.apache.commons.math.estimation.MinpackTest, org.apache.commons.math.estimation.MinpackTest, org.apache.commons.math.estimation.WeightedMeasurementTest, org.apache.commons.math.estimation.WeightedMeasurementTest, org.apache.commons.math.fraction.FractionFormatTest, org.apache.commons.math.fraction.FractionFormatTest, org.apache.commons.math.fraction.FractionTest, org.apache.commons.math.fraction.FractionTest, org.apache.commons.math.geometry.FrenchVector3DFormatTest, org.apache.commons.math.geometry.FrenchVector3DFormatTest, org.apache.commons.math.geometry.RotationOrderTest, org.apache.commons.math.geometry.RotationOrderTest, org.apache.commons.math.geometry.RotationTest, org.apache.commons.math.geometry.RotationTest, org.apache.commons.math.geometry.Vector3DFormatTest, org.apache.commons.math.geometry.Vector3DFormatTest, org.apache.commons.math.geometry.Vector3DTest, org.apache.commons.math.geometry.Vector3DTest, org.apache.commons.math.linear.BiDiagonalTransformerTest, org.apache.commons.math.linear.BiDiagonalTransformerTest, org.apache.commons.math.linear.BigMatrixImplTest, org.apache.commons.math.linear.BigMatrixImplTest, org.apache.commons.math.linear.DenseRealMatrixTest, org.apache.commons.math.linear.DenseRealMatrixTest, org.apache.commons.math.linear.EigenDecompositionImplTest, org.apache.commons.math.linear.EigenDecompositionImplTest, org.apache.commons.math.linear.EigenSolverTest, org.apache.commons.math.linear.EigenSolverTest, org.apache.commons.math.linear.FrenchRealVectorFormatTest, org.apache.commons.math.linear.FrenchRealVectorFormatTest, org.apache.commons.math.linear.InvalidMatrixExceptionTest, org.apache.commons.math.linear.InvalidMatrixExceptionTest, org.apache.commons.math.linear.LUDecompositionImplTest, org.apache.commons.math.linear.LUDecompositionImplTest, org.apache.commons.math.linear.LUSolverTest, org.apache.commons.math.linear.LUSolverTest, org.apache.commons.math.linear.MatrixIndexExceptionTest, org.apache.commons.math.linear.MatrixIndexExceptionTest, org.apache.commons.math.linear.MatrixUtilsTest, org.apache.commons.math.linear.MatrixUtilsTest, org.apache.commons.math.linear.QRDecompositionImplTest, org.apache.commons.math.linear.QRDecompositionImplTest, org.apache.commons.math.linear.QRSolverTest, org.apache.commons.math.linear.QRSolverTest, org.apache.commons.math.linear.RealMatrixImplTest, org.apache.commons.math.linear.RealMatrixImplTest, org.apache.commons.math.linear.RealVectorFormatTest, org.apache.commons.math.linear.RealVectorFormatTest, org.apache.commons.math.linear.RealVectorImplTest, org.apache.commons.math.linear.RealVectorImplTest, org.apache.commons.math.linear.SingularValueDecompositionImplTest, org.apache.commons.math.linear.SingularValueDecompositionImplTest, org.apache.commons.math.linear.SingularValueSolverTest, org.apache.commons.math.linear.SingularValueSolverTest, org.apache.commons.math.linear.SparseRealMatrixTest, org.apache.commons.math.linear.SparseRealMatrixTest, org.apache.commons.math.linear.TriDiagonalTransformerTest, org.apache.commons.math.linear.TriDiagonalTransformerTest, org.apache.commons.math.ode.ContinuousOutputModelTest, org.apache.commons.math.ode.ContinuousOutputModelTest, org.apache.commons.math.ode.FirstOrderConverterTest, org.apache.commons.math.ode.FirstOrderConverterTest, org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest, org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest, org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest, org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest, org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest, org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest, org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest, org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolatorTest, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolatorTest, org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest, org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolatorTest, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolatorTest, org.apache.commons.math.ode.nonstiff.EulerIntegratorTest, org.apache.commons.math.ode.nonstiff.EulerIntegratorTest, org.apache.commons.math.ode.nonstiff.EulerStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.EulerStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.GillIntegratorTest, org.apache.commons.math.ode.nonstiff.GillIntegratorTest, org.apache.commons.math.ode.nonstiff.GillStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.GillStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest, org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest, org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolatorTest, org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolatorTest, org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest, org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.StepInterpolatorAbstractTest, org.apache.commons.math.ode.nonstiff.StepInterpolatorAbstractTest, org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest, org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest, org.apache.commons.math.ode.nonstiff.ThreeEighthesStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.ThreeEighthesStepInterpolatorTest, org.apache.commons.math.ode.sampling.DummyStepInterpolatorTest, org.apache.commons.math.ode.sampling.DummyStepInterpolatorTest, org.apache.commons.math.ode.sampling.StepNormalizerTest, org.apache.commons.math.ode.sampling.StepNormalizerTest, org.apache.commons.math.optimization.MultiDirectionalTest, org.apache.commons.math.optimization.MultiDirectionalTest, org.apache.commons.math.optimization.NelderMeadTest, org.apache.commons.math.optimization.NelderMeadTest, org.apache.commons.math.random.AbstractRandomGeneratorTest, org.apache.commons.math.random.AbstractRandomGeneratorTest, org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest, org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest, org.apache.commons.math.random.EmpiricalDistributionTest, org.apache.commons.math.random.EmpiricalDistributionTest, org.apache.commons.math.random.GaussianRandomGeneratorTest, org.apache.commons.math.random.GaussianRandomGeneratorTest, org.apache.commons.math.random.RandomAdaptorTest, org.apache.commons.math.random.RandomAdaptorTest, org.apache.commons.math.random.RandomDataTest, org.apache.commons.math.random.RandomDataTest, org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest, org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest, org.apache.commons.math.random.UniformRandomGeneratorTest, org.apache.commons.math.random.UniformRandomGeneratorTest, org.apache.commons.math.random.ValueServerTest, org.apache.commons.math.random.ValueServerTest, org.apache.commons.math.special.BetaTest, org.apache.commons.math.special.BetaTest, org.apache.commons.math.special.ErfTest, org.apache.commons.math.special.ErfTest, org.apache.commons.math.special.GammaTest, org.apache.commons.math.special.GammaTest, org.apache.commons.math.stat.CertifiedDataTest, org.apache.commons.math.stat.CertifiedDataTest, org.apache.commons.math.stat.FrequencyTest, org.apache.commons.math.stat.FrequencyTest, org.apache.commons.math.stat.StatUtilsTest, org.apache.commons.math.stat.StatUtilsTest, org.apache.commons.math.stat.data.LewTest, org.apache.commons.math.stat.data.LewTest, org.apache.commons.math.stat.data.LotteryTest, org.apache.commons.math.stat.data.LotteryTest, org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest, org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest, org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest, org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest, org.apache.commons.math.stat.descriptive.InteractionTest, org.apache.commons.math.stat.descriptive.InteractionTest, org.apache.commons.math.stat.descriptive.ListUnivariateImplTest, org.apache.commons.math.stat.descriptive.ListUnivariateImplTest, org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest, org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest, org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.StatisticalSummaryValuesTest, org.apache.commons.math.stat.descriptive.StatisticalSummaryValuesTest, org.apache.commons.math.stat.descriptive.SummaryStatisticsTest, org.apache.commons.math.stat.descriptive.SummaryStatisticsTest, org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest, org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest, org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.moment.FirstMomentTest, org.apache.commons.math.stat.descriptive.moment.FirstMomentTest, org.apache.commons.math.stat.descriptive.moment.FourthMomentTest, org.apache.commons.math.stat.descriptive.moment.FourthMomentTest, org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest, org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest, org.apache.commons.math.stat.descriptive.moment.KurtosisTest, org.apache.commons.math.stat.descriptive.moment.KurtosisTest, org.apache.commons.math.stat.descriptive.moment.MeanTest, org.apache.commons.math.stat.descriptive.moment.MeanTest, org.apache.commons.math.stat.descriptive.moment.SecondMomentTest, org.apache.commons.math.stat.descriptive.moment.SecondMomentTest, org.apache.commons.math.stat.descriptive.moment.SkewnessTest, org.apache.commons.math.stat.descriptive.moment.SkewnessTest, org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest, org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest, org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest, org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest, org.apache.commons.math.stat.descriptive.moment.VarianceTest, org.apache.commons.math.stat.descriptive.moment.VarianceTest, org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest, org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest, org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest, org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest, org.apache.commons.math.stat.descriptive.rank.MaxTest, org.apache.commons.math.stat.descriptive.rank.MaxTest, org.apache.commons.math.stat.descriptive.rank.MedianTest, org.apache.commons.math.stat.descriptive.rank.MedianTest, org.apache.commons.math.stat.descriptive.rank.MinTest, org.apache.commons.math.stat.descriptive.rank.MinTest, org.apache.commons.math.stat.descriptive.rank.PercentileTest, org.apache.commons.math.stat.descriptive.rank.PercentileTest, org.apache.commons.math.stat.descriptive.summary.ProductTest, org.apache.commons.math.stat.descriptive.summary.ProductTest, org.apache.commons.math.stat.descriptive.summary.SumLogTest, org.apache.commons.math.stat.descriptive.summary.SumLogTest, org.apache.commons.math.stat.descriptive.summary.SumSqTest, org.apache.commons.math.stat.descriptive.summary.SumSqTest, org.apache.commons.math.stat.descriptive.summary.SumTest, org.apache.commons.math.stat.descriptive.summary.SumTest, org.apache.commons.math.stat.inference.ChiSquareFactoryTest, org.apache.commons.math.stat.inference.ChiSquareFactoryTest, org.apache.commons.math.stat.inference.ChiSquareTestTest, org.apache.commons.math.stat.inference.ChiSquareTestTest, org.apache.commons.math.stat.inference.OneWayAnovaTest, org.apache.commons.math.stat.inference.OneWayAnovaTest, org.apache.commons.math.stat.inference.TTestFactoryTest, org.apache.commons.math.stat.inference.TTestFactoryTest, org.apache.commons.math.stat.inference.TTestTest, org.apache.commons.math.stat.inference.TTestTest, org.apache.commons.math.stat.inference.TestUtilsTest, org.apache.commons.math.stat.inference.TestUtilsTest, org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest, org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest, org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest, org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest, org.apache.commons.math.stat.regression.SimpleRegressionTest, org.apache.commons.math.stat.regression.SimpleRegressionTest, org.apache.commons.math.transform.FastCosineTransformerTest, org.apache.commons.math.transform.FastCosineTransformerTest, org.apache.commons.math.transform.FastFourierTransformerTest, org.apache.commons.math.transform.FastFourierTransformerTest, org.apache.commons.math.transform.FastHadamardTransformerTest, org.apache.commons.math.transform.FastHadamardTransformerTest, org.apache.commons.math.transform.FastSineTransformerTest, org.apache.commons.math.transform.FastSineTransformerTest, org.apache.commons.math.util.ContinuedFractionTest, org.apache.commons.math.util.ContinuedFractionTest, org.apache.commons.math.util.DefaultTransformerTest, org.apache.commons.math.util.DefaultTransformerTest, org.apache.commons.math.util.MathUtilsTest, org.apache.commons.math.util.MathUtilsTest, org.apache.commons.math.util.OpenIntToDoubleHashMapTest, org.apache.commons.math.util.OpenIntToDoubleHashMapTest, org.apache.commons.math.util.ResizableDoubleArrayTest, org.apache.commons.math.util.ResizableDoubleArrayTest, org.apache.commons.math.util.TransformerMapTest, org.apache.commons.math.util.TransformerMapTest]
22:09:50.586 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Config: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=true, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=PRE_THEN_COND, synthesis=SMT, oracle=ANGELIC, solver=Z3, solverPath='/home/tdurieux/defects4j4repair/script/../libs/z3/build/z3', projectSources=[src/java], projectClasspath='[Ljava.net.URL;@66d33a', projectTests=[org.apache.commons.math.ArgumentOutsideDomainExceptionTest, org.apache.commons.math.ArgumentOutsideDomainExceptionTest, org.apache.commons.math.ConvergenceExceptionTest, org.apache.commons.math.ConvergenceExceptionTest, org.apache.commons.math.DuplicateSampleAbscissaExceptionTest, org.apache.commons.math.DuplicateSampleAbscissaExceptionTest, org.apache.commons.math.FunctionEvaluationExceptionTest, org.apache.commons.math.FunctionEvaluationExceptionTest, org.apache.commons.math.MathConfigurationExceptionTest, org.apache.commons.math.MathConfigurationExceptionTest, org.apache.commons.math.MathExceptionTest, org.apache.commons.math.MathExceptionTest, org.apache.commons.math.MaxIterationsExceededExceptionTest, org.apache.commons.math.MaxIterationsExceededExceptionTest, org.apache.commons.math.analysis.integration.LegendreGaussIntegratorTest, org.apache.commons.math.analysis.integration.LegendreGaussIntegratorTest, org.apache.commons.math.analysis.integration.RombergIntegratorTest, org.apache.commons.math.analysis.integration.RombergIntegratorTest, org.apache.commons.math.analysis.integration.SimpsonIntegratorTest, org.apache.commons.math.analysis.integration.SimpsonIntegratorTest, org.apache.commons.math.analysis.integration.TrapezoidIntegratorTest, org.apache.commons.math.analysis.integration.TrapezoidIntegratorTest, org.apache.commons.math.analysis.interpolation.DividedDifferenceInterpolatorTest, org.apache.commons.math.analysis.interpolation.DividedDifferenceInterpolatorTest, org.apache.commons.math.analysis.interpolation.NevilleInterpolatorTest, org.apache.commons.math.analysis.interpolation.NevilleInterpolatorTest, org.apache.commons.math.analysis.interpolation.SplineInterpolatorTest, org.apache.commons.math.analysis.interpolation.SplineInterpolatorTest, org.apache.commons.math.analysis.minimization.BrentMinimizerTest, org.apache.commons.math.analysis.minimization.BrentMinimizerTest, org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeFormTest, org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeFormTest, org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonFormTest, org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonFormTest, org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest, org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest, org.apache.commons.math.analysis.polynomials.PolynomialSplineFunctionTest, org.apache.commons.math.analysis.polynomials.PolynomialSplineFunctionTest, org.apache.commons.math.analysis.solvers.BisectionSolverTest, org.apache.commons.math.analysis.solvers.BisectionSolverTest, org.apache.commons.math.analysis.solvers.BrentSolverTest, org.apache.commons.math.analysis.solvers.BrentSolverTest, org.apache.commons.math.analysis.solvers.LaguerreSolverTest, org.apache.commons.math.analysis.solvers.LaguerreSolverTest, org.apache.commons.math.analysis.solvers.MullerSolverTest, org.apache.commons.math.analysis.solvers.MullerSolverTest, org.apache.commons.math.analysis.solvers.NewtonSolverTest, org.apache.commons.math.analysis.solvers.NewtonSolverTest, org.apache.commons.math.analysis.solvers.RiddersSolverTest, org.apache.commons.math.analysis.solvers.RiddersSolverTest, org.apache.commons.math.analysis.solvers.UnivariateRealSolverFactoryImplTest, org.apache.commons.math.analysis.solvers.UnivariateRealSolverFactoryImplTest, org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest, org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest, org.apache.commons.math.complex.ComplexFormatTest, org.apache.commons.math.complex.ComplexFormatTest, org.apache.commons.math.complex.ComplexTest, org.apache.commons.math.complex.ComplexTest, org.apache.commons.math.complex.ComplexUtilsTest, org.apache.commons.math.complex.ComplexUtilsTest, org.apache.commons.math.complex.FrenchComplexFormatTest, org.apache.commons.math.complex.FrenchComplexFormatTest, org.apache.commons.math.distribution.BetaDistributionTest, org.apache.commons.math.distribution.BetaDistributionTest, org.apache.commons.math.distribution.BinomialDistributionTest, org.apache.commons.math.distribution.BinomialDistributionTest, org.apache.commons.math.distribution.CauchyDistributionTest, org.apache.commons.math.distribution.CauchyDistributionTest, org.apache.commons.math.distribution.ChiSquareDistributionTest, org.apache.commons.math.distribution.ChiSquareDistributionTest, org.apache.commons.math.distribution.ExponentialDistributionTest, org.apache.commons.math.distribution.ExponentialDistributionTest, org.apache.commons.math.distribution.FDistributionTest, org.apache.commons.math.distribution.FDistributionTest, org.apache.commons.math.distribution.GammaDistributionTest, org.apache.commons.math.distribution.GammaDistributionTest, org.apache.commons.math.distribution.HypergeometricDistributionTest, org.apache.commons.math.distribution.HypergeometricDistributionTest, org.apache.commons.math.distribution.NormalDistributionTest, org.apache.commons.math.distribution.NormalDistributionTest, org.apache.commons.math.distribution.PascalDistributionTest, org.apache.commons.math.distribution.PascalDistributionTest, org.apache.commons.math.distribution.PoissonDistributionTest, org.apache.commons.math.distribution.PoissonDistributionTest, org.apache.commons.math.distribution.TDistributionTest, org.apache.commons.math.distribution.TDistributionTest, org.apache.commons.math.distribution.WeibullDistributionTest, org.apache.commons.math.distribution.WeibullDistributionTest, org.apache.commons.math.distribution.ZipfDistributionTest, org.apache.commons.math.distribution.ZipfDistributionTest, org.apache.commons.math.estimation.EstimatedParameterTest, org.apache.commons.math.estimation.EstimatedParameterTest, org.apache.commons.math.estimation.GaussNewtonEstimatorTest, org.apache.commons.math.estimation.GaussNewtonEstimatorTest, org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest, org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest, org.apache.commons.math.estimation.MinpackTest, org.apache.commons.math.estimation.MinpackTest, org.apache.commons.math.estimation.WeightedMeasurementTest, org.apache.commons.math.estimation.WeightedMeasurementTest, org.apache.commons.math.fraction.FractionFormatTest, org.apache.commons.math.fraction.FractionFormatTest, org.apache.commons.math.fraction.FractionTest, org.apache.commons.math.fraction.FractionTest, org.apache.commons.math.geometry.FrenchVector3DFormatTest, org.apache.commons.math.geometry.FrenchVector3DFormatTest, org.apache.commons.math.geometry.RotationOrderTest, org.apache.commons.math.geometry.RotationOrderTest, org.apache.commons.math.geometry.RotationTest, org.apache.commons.math.geometry.RotationTest, org.apache.commons.math.geometry.Vector3DFormatTest, org.apache.commons.math.geometry.Vector3DFormatTest, org.apache.commons.math.geometry.Vector3DTest, org.apache.commons.math.geometry.Vector3DTest, org.apache.commons.math.linear.BiDiagonalTransformerTest, org.apache.commons.math.linear.BiDiagonalTransformerTest, org.apache.commons.math.linear.BigMatrixImplTest, org.apache.commons.math.linear.BigMatrixImplTest, org.apache.commons.math.linear.DenseRealMatrixTest, org.apache.commons.math.linear.DenseRealMatrixTest, org.apache.commons.math.linear.EigenDecompositionImplTest, org.apache.commons.math.linear.EigenDecompositionImplTest, org.apache.commons.math.linear.EigenSolverTest, org.apache.commons.math.linear.EigenSolverTest, org.apache.commons.math.linear.FrenchRealVectorFormatTest, org.apache.commons.math.linear.FrenchRealVectorFormatTest, org.apache.commons.math.linear.InvalidMatrixExceptionTest, org.apache.commons.math.linear.InvalidMatrixExceptionTest, org.apache.commons.math.linear.LUDecompositionImplTest, org.apache.commons.math.linear.LUDecompositionImplTest, org.apache.commons.math.linear.LUSolverTest, org.apache.commons.math.linear.LUSolverTest, org.apache.commons.math.linear.MatrixIndexExceptionTest, org.apache.commons.math.linear.MatrixIndexExceptionTest, org.apache.commons.math.linear.MatrixUtilsTest, org.apache.commons.math.linear.MatrixUtilsTest, org.apache.commons.math.linear.QRDecompositionImplTest, org.apache.commons.math.linear.QRDecompositionImplTest, org.apache.commons.math.linear.QRSolverTest, org.apache.commons.math.linear.QRSolverTest, org.apache.commons.math.linear.RealMatrixImplTest, org.apache.commons.math.linear.RealMatrixImplTest, org.apache.commons.math.linear.RealVectorFormatTest, org.apache.commons.math.linear.RealVectorFormatTest, org.apache.commons.math.linear.RealVectorImplTest, org.apache.commons.math.linear.RealVectorImplTest, org.apache.commons.math.linear.SingularValueDecompositionImplTest, org.apache.commons.math.linear.SingularValueDecompositionImplTest, org.apache.commons.math.linear.SingularValueSolverTest, org.apache.commons.math.linear.SingularValueSolverTest, org.apache.commons.math.linear.SparseRealMatrixTest, org.apache.commons.math.linear.SparseRealMatrixTest, org.apache.commons.math.linear.TriDiagonalTransformerTest, org.apache.commons.math.linear.TriDiagonalTransformerTest, org.apache.commons.math.ode.ContinuousOutputModelTest, org.apache.commons.math.ode.ContinuousOutputModelTest, org.apache.commons.math.ode.FirstOrderConverterTest, org.apache.commons.math.ode.FirstOrderConverterTest, org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest, org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest, org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest, org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest, org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest, org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest, org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest, org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolatorTest, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolatorTest, org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest, org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolatorTest, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolatorTest, org.apache.commons.math.ode.nonstiff.EulerIntegratorTest, org.apache.commons.math.ode.nonstiff.EulerIntegratorTest, org.apache.commons.math.ode.nonstiff.EulerStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.EulerStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.GillIntegratorTest, org.apache.commons.math.ode.nonstiff.GillIntegratorTest, org.apache.commons.math.ode.nonstiff.GillStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.GillStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest, org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest, org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolatorTest, org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolatorTest, org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest, org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.StepInterpolatorAbstractTest, org.apache.commons.math.ode.nonstiff.StepInterpolatorAbstractTest, org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest, org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest, org.apache.commons.math.ode.nonstiff.ThreeEighthesStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.ThreeEighthesStepInterpolatorTest, org.apache.commons.math.ode.sampling.DummyStepInterpolatorTest, org.apache.commons.math.ode.sampling.DummyStepInterpolatorTest, org.apache.commons.math.ode.sampling.StepNormalizerTest, org.apache.commons.math.ode.sampling.StepNormalizerTest, org.apache.commons.math.optimization.MultiDirectionalTest, org.apache.commons.math.optimization.MultiDirectionalTest, org.apache.commons.math.optimization.NelderMeadTest, org.apache.commons.math.optimization.NelderMeadTest, org.apache.commons.math.random.AbstractRandomGeneratorTest, org.apache.commons.math.random.AbstractRandomGeneratorTest, org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest, org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest, org.apache.commons.math.random.EmpiricalDistributionTest, org.apache.commons.math.random.EmpiricalDistributionTest, org.apache.commons.math.random.GaussianRandomGeneratorTest, org.apache.commons.math.random.GaussianRandomGeneratorTest, org.apache.commons.math.random.RandomAdaptorTest, org.apache.commons.math.random.RandomAdaptorTest, org.apache.commons.math.random.RandomDataTest, org.apache.commons.math.random.RandomDataTest, org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest, org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest, org.apache.commons.math.random.UniformRandomGeneratorTest, org.apache.commons.math.random.UniformRandomGeneratorTest, org.apache.commons.math.random.ValueServerTest, org.apache.commons.math.random.ValueServerTest, org.apache.commons.math.special.BetaTest, org.apache.commons.math.special.BetaTest, org.apache.commons.math.special.ErfTest, org.apache.commons.math.special.ErfTest, org.apache.commons.math.special.GammaTest, org.apache.commons.math.special.GammaTest, org.apache.commons.math.stat.CertifiedDataTest, org.apache.commons.math.stat.CertifiedDataTest, org.apache.commons.math.stat.FrequencyTest, org.apache.commons.math.stat.FrequencyTest, org.apache.commons.math.stat.StatUtilsTest, org.apache.commons.math.stat.StatUtilsTest, org.apache.commons.math.stat.data.LewTest, org.apache.commons.math.stat.data.LewTest, org.apache.commons.math.stat.data.LotteryTest, org.apache.commons.math.stat.data.LotteryTest, org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest, org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest, org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest, org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest, org.apache.commons.math.stat.descriptive.InteractionTest, org.apache.commons.math.stat.descriptive.InteractionTest, org.apache.commons.math.stat.descriptive.ListUnivariateImplTest, org.apache.commons.math.stat.descriptive.ListUnivariateImplTest, org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest, org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest, org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.StatisticalSummaryValuesTest, org.apache.commons.math.stat.descriptive.StatisticalSummaryValuesTest, org.apache.commons.math.stat.descriptive.SummaryStatisticsTest, org.apache.commons.math.stat.descriptive.SummaryStatisticsTest, org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest, org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest, org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.moment.FirstMomentTest, org.apache.commons.math.stat.descriptive.moment.FirstMomentTest, org.apache.commons.math.stat.descriptive.moment.FourthMomentTest, org.apache.commons.math.stat.descriptive.moment.FourthMomentTest, org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest, org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest, org.apache.commons.math.stat.descriptive.moment.KurtosisTest, org.apache.commons.math.stat.descriptive.moment.KurtosisTest, org.apache.commons.math.stat.descriptive.moment.MeanTest, org.apache.commons.math.stat.descriptive.moment.MeanTest, org.apache.commons.math.stat.descriptive.moment.SecondMomentTest, org.apache.commons.math.stat.descriptive.moment.SecondMomentTest, org.apache.commons.math.stat.descriptive.moment.SkewnessTest, org.apache.commons.math.stat.descriptive.moment.SkewnessTest, org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest, org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest, org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest, org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest, org.apache.commons.math.stat.descriptive.moment.VarianceTest, org.apache.commons.math.stat.descriptive.moment.VarianceTest, org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest, org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest, org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest, org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest, org.apache.commons.math.stat.descriptive.rank.MaxTest, org.apache.commons.math.stat.descriptive.rank.MaxTest, org.apache.commons.math.stat.descriptive.rank.MedianTest, org.apache.commons.math.stat.descriptive.rank.MedianTest, org.apache.commons.math.stat.descriptive.rank.MinTest, org.apache.commons.math.stat.descriptive.rank.MinTest, org.apache.commons.math.stat.descriptive.rank.PercentileTest, org.apache.commons.math.stat.descriptive.rank.PercentileTest, org.apache.commons.math.stat.descriptive.summary.ProductTest, org.apache.commons.math.stat.descriptive.summary.ProductTest, org.apache.commons.math.stat.descriptive.summary.SumLogTest, org.apache.commons.math.stat.descriptive.summary.SumLogTest, org.apache.commons.math.stat.descriptive.summary.SumSqTest, org.apache.commons.math.stat.descriptive.summary.SumSqTest, org.apache.commons.math.stat.descriptive.summary.SumTest, org.apache.commons.math.stat.descriptive.summary.SumTest, org.apache.commons.math.stat.inference.ChiSquareFactoryTest, org.apache.commons.math.stat.inference.ChiSquareFactoryTest, org.apache.commons.math.stat.inference.ChiSquareTestTest, org.apache.commons.math.stat.inference.ChiSquareTestTest, org.apache.commons.math.stat.inference.OneWayAnovaTest, org.apache.commons.math.stat.inference.OneWayAnovaTest, org.apache.commons.math.stat.inference.TTestFactoryTest, org.apache.commons.math.stat.inference.TTestFactoryTest, org.apache.commons.math.stat.inference.TTestTest, org.apache.commons.math.stat.inference.TTestTest, org.apache.commons.math.stat.inference.TestUtilsTest, org.apache.commons.math.stat.inference.TestUtilsTest, org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest, org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest, org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest, org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest, org.apache.commons.math.stat.regression.SimpleRegressionTest, org.apache.commons.math.stat.regression.SimpleRegressionTest, org.apache.commons.math.transform.FastCosineTransformerTest, org.apache.commons.math.transform.FastCosineTransformerTest, org.apache.commons.math.transform.FastFourierTransformerTest, org.apache.commons.math.transform.FastFourierTransformerTest, org.apache.commons.math.transform.FastHadamardTransformerTest, org.apache.commons.math.transform.FastHadamardTransformerTest, org.apache.commons.math.transform.FastSineTransformerTest, org.apache.commons.math.transform.FastSineTransformerTest, org.apache.commons.math.util.ContinuedFractionTest, org.apache.commons.math.util.ContinuedFractionTest, org.apache.commons.math.util.DefaultTransformerTest, org.apache.commons.math.util.DefaultTransformerTest, org.apache.commons.math.util.MathUtilsTest, org.apache.commons.math.util.MathUtilsTest, org.apache.commons.math.util.OpenIntToDoubleHashMapTest, org.apache.commons.math.util.OpenIntToDoubleHashMapTest, org.apache.commons.math.util.ResizableDoubleArrayTest, org.apache.commons.math.util.ResizableDoubleArrayTest, org.apache.commons.math.util.TransformerMapTest, org.apache.commons.math.util.TransformerMapTest], complianceLevel=5, outputFolder=., json=true}
22:09:50.587 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Available processors (cores): 8
22:09:50.598 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Free memory: 200 MB
22:09:50.598 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Maximum memory: 3 GB
22:09:50.599 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Total memory available to JVM: 241 MB
22:09:50.599 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Java version: 1.8.0_181
22:09:50.600 [main] INFO  fr.inria.lille.repair.nopol.NoPol - JAVA_HOME: /usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/
22:09:50.600 [main] INFO  fr.inria.lille.repair.nopol.NoPol - PATH: /usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/:/usr/lib/oar/oardodo:/usr/lib/oar/oardodo:/usr/local/bin:/usr/bin:/bin:/usr/games
22:10:11.456 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #1
22:10:11.457 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegrator:272 which is executed by 13 tests
-1378958115
22:10:11.884 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
22:10:16.970 [pool-4-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (5029 ms)
<> Total tests run: 85
<> Ignored tests: 0
<> Failed tests: 0

22:10:16.971 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
22:10:16.972 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #2
22:10:16.972 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegrator:269 which is executed by 13 tests
-1378958115
22:10:17.132 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #3
22:10:17.132 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegrator:258 which is executed by 13 tests
-1378958115
22:10:17.287 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #4
22:10:17.287 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegrator:249 which is executed by 13 tests
-1378958115
22:10:17.442 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
22:10:22.480 [pool-6-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (5009 ms)
<> Total tests run: 85
<> Ignored tests: 0
<> Failed tests: 0

22:10:22.481 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
22:10:22.481 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #5
22:10:22.482 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegrator:246 which is executed by 13 tests
-1378958115
22:10:22.635 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
22:10:27.536 [pool-8-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (4890 ms)
<> Total tests run: 85
<> Ignored tests: 0
<> Failed tests: 0

22:10:27.537 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
22:10:27.537 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #6
22:10:27.537 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegrator:243 which is executed by 13 tests
-1378958115
22:10:27.738 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #7
22:10:27.738 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegrator:255 which is executed by 12 tests
-1378958115
22:10:27.892 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
22:10:32.775 [pool-10-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (4872 ms)
<> Total tests run: 79
<> Ignored tests: 0
<> Failed tests: 0

22:10:32.776 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
22:10:32.776 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #8
22:10:32.777 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegrator:252 which is executed by 12 tests
-1378958115
22:10:32.927 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
22:10:37.714 [pool-12-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (4776 ms)
<> Total tests run: 79
<> Ignored tests: 0
<> Failed tests: 0

22:10:37.714 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
22:10:37.715 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #9
22:10:37.715 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegrator:251 which is executed by 12 tests
-1378958115
22:10:37.862 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
22:10:42.774 [pool-14-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (4900 ms)
<> Total tests run: 79
<> Ignored tests: 0
<> Failed tests: 0

22:10:42.775 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
22:10:42.775 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #10
22:10:42.775 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegrator:250 which is executed by 12 tests
-1378958115
22:10:42.926 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
22:10:47.726 [pool-16-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (4789 ms)
<> Total tests run: 79
<> Ignored tests: 0
<> Failed tests: 0

22:10:47.727 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
22:10:47.728 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #11
22:10:47.728 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegrator:253 which is executed by 10 tests
-1378958115
22:10:47.907 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
22:10:51.629 [pool-18-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (3710 ms)
<> Total tests run: 65
<> Ignored tests: 0
<> Failed tests: 0

22:10:51.630 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
22:10:51.630 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #12
22:10:51.630 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator:243 which is executed by 27 tests
-1670384204
22:10:51.794 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #13
22:10:51.795 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.FractionFormat:158 which is executed by 16 tests
1013737658
22:10:51.950 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #14
22:10:51.950 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.FractionFormat:157 which is executed by 16 tests
1013737658
22:10:52.106 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
22:10:52.161 [pool-20-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (43 ms)
<> Total tests run: 160
<> Ignored tests: 0
<> Failed tests: 0

22:10:52.162 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
22:10:52.162 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #15
22:10:52.162 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.FractionFormat:156 which is executed by 16 tests
1013737658
22:10:52.312 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
22:10:52.359 [pool-22-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (37 ms)
<> Total tests run: 160
<> Ignored tests: 0
<> Failed tests: 0

22:10:52.360 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
22:10:52.361 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #16
22:10:52.361 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.FractionFormat:155 which is executed by 16 tests
1013737658
22:10:52.511 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #17
22:10:52.511 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.FractionFormat:134 which is executed by 16 tests
1013737658
22:10:52.660 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #18
22:10:52.660 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.FractionFormat:133 which is executed by 16 tests
1013737658
22:10:52.806 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #19
22:10:52.807 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.FractionFormat:116 which is executed by 16 tests
1013737658
22:10:52.957 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #20
22:10:52.958 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.FractionFormat:115 which is executed by 16 tests
1013737658
22:10:53.142 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #21
22:10:53.142 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.ProperFractionFormat:229 which is executed by 16 tests
-1129122774
22:10:53.280 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #22
22:10:53.281 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.ProperFractionFormat:228 which is executed by 16 tests
-1129122774
22:10:53.418 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
22:10:53.458 [pool-24-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (31 ms)
<> Total tests run: 160
<> Ignored tests: 0
<> Failed tests: 0

22:10:53.459 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
22:10:53.460 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #23
22:10:53.460 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.ProperFractionFormat:224 which is executed by 16 tests
-1129122774
22:10:53.600 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
22:10:53.639 [pool-26-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (30 ms)
<> Total tests run: 160
<> Ignored tests: 0
<> Failed tests: 0

22:10:53.640 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
22:10:53.640 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
22:10:53.684 [pool-28-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (34 ms)
<> Total tests run: 160
<> Ignored tests: 0
<> Failed tests: 0

22:10:53.686 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
22:10:53.687 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #24
22:10:53.687 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.FractionFormat:385 which is executed by 7 tests
1013737658
22:10:53.830 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
22:10:53.853 [pool-30-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (17 ms)
<> Total tests run: 80
<> Ignored tests: 0
<> Failed tests: 0

22:10:53.854 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
22:10:53.854 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #25
22:10:53.854 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.FractionFormat:281 which is executed by 7 tests
1013737658
22:10:53.999 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
22:10:54.022 [pool-32-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (17 ms)
<> Total tests run: 80
<> Ignored tests: 0
<> Failed tests: 0

22:10:54.023 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
22:10:54.023 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #26
22:10:54.023 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.FractionFormat:280 which is executed by 7 tests
1013737658
22:10:54.170 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #27
22:10:54.170 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.FractionFormat:279 which is executed by 7 tests
1013737658
22:10:54.314 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #28
22:10:54.314 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.FractionFormat:389 which is executed by 8 tests
1013737658
22:10:54.457 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #29
22:10:54.457 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.FractionFormat:384 which is executed by 8 tests
1013737658
22:10:54.601 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
22:10:54.628 [pool-34-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (19 ms)
<> Total tests run: 80
<> Ignored tests: 0
<> Failed tests: 0

22:10:54.629 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
22:10:54.630 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
22:10:54.656 [pool-36-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (19 ms)
<> Total tests run: 80
<> Ignored tests: 0
<> Failed tests: 0

22:10:54.657 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
22:10:54.657 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #30
22:10:54.657 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.FractionFormat:382 which is executed by 8 tests
1013737658
22:10:54.831 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
22:10:54.853 [pool-38-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (17 ms)
<> Total tests run: 80
<> Ignored tests: 0
<> Failed tests: 0

22:10:54.854 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
22:10:54.854 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #31
22:10:54.855 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.FractionFormat:381 which is executed by 8 tests
1013737658
22:10:55.039 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #32
22:10:55.039 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.FractionFormat:380 which is executed by 8 tests
1013737658
22:10:55.182 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
22:10:55.204 [pool-40-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (17 ms)
<> Total tests run: 80
<> Ignored tests: 0
<> Failed tests: 0

22:10:55.205 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
22:10:55.205 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #33
22:10:55.205 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.FractionFormat:377 which is executed by 8 tests
1013737658
22:10:55.349 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
22:10:55.372 [pool-42-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (17 ms)
<> Total tests run: 80
<> Ignored tests: 0
<> Failed tests: 0

22:10:55.372 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
22:10:55.372 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
22:10:55.396 [pool-44-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (19 ms)
<> Total tests run: 80
<> Ignored tests: 0
<> Failed tests: 0

22:10:55.396 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
22:10:55.397 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #34
22:10:55.397 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.FractionFormat:375 which is executed by 8 tests
1013737658
22:10:55.538 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #35
22:10:55.538 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.FractionFormat:374 which is executed by 8 tests
1013737658
22:10:55.679 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #36
22:10:55.679 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.FractionFormat:373 which is executed by 8 tests
1013737658
22:10:55.821 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #37
22:10:55.821 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.FractionFormat:364 which is executed by 8 tests
1013737658
22:10:55.962 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #38
22:10:55.962 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.FractionFormat:363 which is executed by 8 tests
1013737658
22:10:56.103 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
22:10:56.123 [pool-46-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (15 ms)
<> Total tests run: 80
<> Ignored tests: 0
<> Failed tests: 0

22:10:56.127 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
22:10:56.127 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #39
22:10:56.127 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.FractionFormat:362 which is executed by 8 tests
1013737658
22:10:56.268 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
22:10:56.289 [pool-48-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (16 ms)
<> Total tests run: 80
<> Ignored tests: 0
<> Failed tests: 0

22:10:56.289 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
22:10:56.289 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #40
22:10:56.290 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.FractionFormat:270 which is executed by 8 tests
1013737658
22:10:56.434 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
22:10:56.455 [pool-50-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (15 ms)
<> Total tests run: 80
<> Ignored tests: 0
<> Failed tests: 0

22:10:56.455 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
22:10:56.456 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
22:10:56.475 [pool-52-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (15 ms)
<> Total tests run: 80
<> Ignored tests: 0
<> Failed tests: 0

22:10:56.475 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
22:10:56.476 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #41
22:10:56.476 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.FractionFormat:269 which is executed by 8 tests
1013737658
22:10:56.618 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #42
22:10:56.618 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.FractionFormat:266 which is executed by 8 tests
1013737658
22:10:56.786 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
22:10:56.808 [pool-54-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (17 ms)
<> Total tests run: 80
<> Ignored tests: 0
<> Failed tests: 0

22:10:56.808 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
22:10:56.809 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #43
22:10:56.809 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.FractionFormat:263 which is executed by 8 tests
1013737658
22:10:56.950 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #44
22:10:56.950 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.FractionFormat:246 which is executed by 8 tests
1013737658
22:10:57.090 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #45
22:10:57.091 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.FractionFormat:245 which is executed by 8 tests
1013737658
22:10:57.230 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #46
22:10:57.230 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.ProperFractionFormat:133 which is executed by 8 tests
-1129122774
22:10:57.368 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #47
22:10:57.368 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator:359 which is executed by 55 tests
1048307728
22:10:57.512 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #48
22:10:57.512 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator:358 which is executed by 55 tests
1048307728
22:10:57.655 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
22:11:02.535 [pool-56-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (4872 ms)
<> Total tests run: 85
<> Ignored tests: 0
<> Failed tests: 0

22:11:02.536 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
22:11:02.536 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #49
22:11:02.536 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator:345 which is executed by 55 tests
1048307728
22:11:02.680 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #50
22:11:02.680 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator:344 which is executed by 55 tests
1048307728
22:11:02.826 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
22:11:07.752 [pool-58-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (4916 ms)
<> Total tests run: 85
<> Ignored tests: 0
<> Failed tests: 0

22:11:07.753 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
22:11:07.753 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #51
22:11:07.753 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator:164 which is executed by 55 tests
1048307728
22:11:07.896 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #52
22:11:07.897 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator:163 which is executed by 55 tests
1048307728
22:11:08.038 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
22:11:13.010 [pool-60-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (4959 ms)
<> Total tests run: 85
<> Ignored tests: 0
<> Failed tests: 0

22:11:13.010 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
22:11:13.010 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #53
22:11:13.010 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.FractionFormat:234 which is executed by 9 tests
1013737658
22:11:13.191 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #54
22:11:13.191 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator:304 which is executed by 66 tests
1694344315
22:11:13.395 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #55
22:11:13.395 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator:303 which is executed by 66 tests
1694344315
22:11:13.560 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
22:11:18.811 [pool-62-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (5230 ms)
<> Total tests run: 85
<> Ignored tests: 0
<> Failed tests: 0

22:11:18.813 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
22:11:18.813 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #56
22:11:18.813 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator:302 which is executed by 66 tests
1694344315
22:11:18.973 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
22:11:23.814 [pool-64-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (4831 ms)
<> Total tests run: 85
<> Ignored tests: 0
<> Failed tests: 0

22:11:23.814 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
22:11:23.815 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #57
22:11:23.815 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.FractionFormat:226 which is executed by 7 tests
1013737658
22:11:23.961 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #58
22:11:23.961 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.FractionFormat:311 which is executed by 2 tests
1013737658
22:11:24.103 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #59
22:11:24.103 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.ProperFractionFormat:214 which is executed by 2 tests
-1129122774
22:11:24.241 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #60
22:11:24.241 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.ProperFractionFormat:213 which is executed by 2 tests
-1129122774
22:11:24.377 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #61
22:11:24.377 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.ProperFractionFormat:212 which is executed by 2 tests
-1129122774
22:11:24.512 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #62
22:11:24.513 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.ProperFractionFormat:211 which is executed by 2 tests
-1129122774
22:11:24.649 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #63
22:11:24.650 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.FractionFormat:303 which is executed by 3 tests
1013737658
22:11:24.792 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
22:11:24.808 [pool-66-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (10 ms)
<> Total tests run: 32
<> Ignored tests: 0
<> Failed tests: 0

22:11:24.808 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
22:11:24.808 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
22:11:24.822 [pool-68-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (10 ms)
<> Total tests run: 32
<> Ignored tests: 0
<> Failed tests: 0

22:11:24.823 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
22:11:24.823 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #64
22:11:24.823 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.FractionFormat:302 which is executed by 3 tests
1013737658
22:11:24.966 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #65
22:11:24.966 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.FractionFormat:299 which is executed by 3 tests
1013737658
22:11:25.108 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
22:11:25.123 [pool-70-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (10 ms)
<> Total tests run: 32
<> Ignored tests: 0
<> Failed tests: 0

22:11:25.124 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
22:11:25.124 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #66
22:11:25.124 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.FractionFormat:288 which is executed by 3 tests
1013737658
22:11:25.266 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
22:11:25.281 [pool-72-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (11 ms)
<> Total tests run: 32
<> Ignored tests: 0
<> Failed tests: 0

22:11:25.281 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
22:11:25.282 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #67
22:11:25.282 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.FractionFormat:295 which is executed by 3 tests
1013737658
22:11:25.421 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #68
22:11:25.422 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.FractionFormat:294 which is executed by 3 tests
1013737658
22:11:25.561 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
22:11:25.575 [pool-74-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (10 ms)
<> Total tests run: 32
<> Ignored tests: 0
<> Failed tests: 0

22:11:25.575 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
22:11:25.576 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #69
22:11:25.576 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.FractionFormat:293 which is executed by 3 tests
1013737658
22:11:25.733 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
22:11:25.747 [pool-76-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (10 ms)
<> Total tests run: 32
<> Ignored tests: 0
<> Failed tests: 0

22:11:25.747 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
22:11:25.747 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #70
22:11:25.748 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.ProperFractionFormat:205 which is executed by 3 tests
-1129122774
22:11:25.901 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
22:11:25.918 [pool-78-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (11 ms)
<> Total tests run: 32
<> Ignored tests: 0
<> Failed tests: 0

22:11:25.918 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
22:11:25.918 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
22:11:25.933 [pool-80-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (11 ms)
<> Total tests run: 32
<> Ignored tests: 0
<> Failed tests: 0

22:11:25.934 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
22:11:25.934 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #71
22:11:25.934 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.ProperFractionFormat:197 which is executed by 3 tests
-1129122774
22:11:26.102 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
22:11:26.124 [pool-82-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (11 ms)
<> Total tests run: 32
<> Ignored tests: 0
<> Failed tests: 0

22:11:26.124 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
22:11:26.125 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
22:11:26.138 [pool-84-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (10 ms)
<> Total tests run: 32
<> Ignored tests: 0
<> Failed tests: 0

22:11:26.139 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
22:11:26.139 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #72
22:11:26.139 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.ProperFractionFormat:196 which is executed by 3 tests
-1129122774
22:11:26.274 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #73
22:11:26.275 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.ProperFractionFormat:193 which is executed by 3 tests
-1129122774
22:11:26.410 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
22:11:26.424 [pool-86-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9 ms)
<> Total tests run: 32
<> Ignored tests: 0
<> Failed tests: 0

22:11:26.425 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
22:11:26.425 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #74
22:11:26.425 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.ProperFractionFormat:182 which is executed by 3 tests
-1129122774
22:11:26.560 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
22:11:26.574 [pool-88-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (10 ms)
<> Total tests run: 32
<> Ignored tests: 0
<> Failed tests: 0

22:11:26.575 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
22:11:26.575 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #75
22:11:26.575 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.ProperFractionFormat:175 which is executed by 3 tests
-1129122774
22:11:26.710 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
22:11:26.724 [pool-90-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (10 ms)
<> Total tests run: 32
<> Ignored tests: 0
<> Failed tests: 0

22:11:26.724 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
22:11:26.725 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #76
22:11:26.725 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.ProperFractionFormat:174 which is executed by 3 tests
-1129122774
22:11:26.861 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #77
22:11:26.861 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.ProperFractionFormat:173 which is executed by 3 tests
-1129122774
22:11:26.996 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #78
22:11:26.996 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.ProperFractionFormat:166 which is executed by 3 tests
-1129122774
22:11:27.132 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
22:11:27.145 [pool-92-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9 ms)
<> Total tests run: 32
<> Ignored tests: 0
<> Failed tests: 0

22:11:27.146 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
22:11:27.146 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
22:11:27.161 [pool-94-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (11 ms)
<> Total tests run: 32
<> Ignored tests: 0
<> Failed tests: 0

22:11:27.161 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
22:11:27.161 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #79
22:11:27.162 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.FractionFormat:285 which is executed by 1 tests
1013737658
22:11:27.300 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #80
22:11:27.301 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.ProperFractionFormat:158 which is executed by 4 tests
-1129122774
22:11:27.435 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
22:11:27.448 [pool-96-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9 ms)
<> Total tests run: 32
<> Ignored tests: 0
<> Failed tests: 0

22:11:27.449 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
22:11:27.449 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
22:11:27.462 [pool-98-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9 ms)
<> Total tests run: 32
<> Ignored tests: 0
<> Failed tests: 0

22:11:27.463 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
22:11:27.463 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #81
22:11:27.463 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.ProperFractionFormat:157 which is executed by 4 tests
-1129122774
22:11:27.597 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #82
22:11:27.598 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.ProperFractionFormat:154 which is executed by 4 tests
-1129122774
22:11:27.732 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
22:11:27.745 [pool-100-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9 ms)
<> Total tests run: 32
<> Ignored tests: 0
<> Failed tests: 0

22:11:27.746 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
22:11:27.746 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #83
22:11:27.746 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.ProperFractionFormat:145 which is executed by 5 tests
-1129122774
22:11:27.880 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
22:11:27.894 [pool-102-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (10 ms)
<> Total tests run: 32
<> Ignored tests: 0
<> Failed tests: 0

22:11:27.894 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
22:11:27.895 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
22:11:27.909 [pool-104-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (11 ms)
<> Total tests run: 32
<> Ignored tests: 0
<> Failed tests: 0

22:11:27.909 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
22:11:27.909 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #84
22:11:27.910 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.ProperFractionFormat:144 which is executed by 5 tests
-1129122774
22:11:28.045 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #85
22:11:28.045 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.ProperFractionFormat:141 which is executed by 5 tests
-1129122774
22:11:28.180 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
22:11:28.193 [pool-106-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9 ms)
<> Total tests run: 32
<> Ignored tests: 0
<> Failed tests: 0

22:11:28.193 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
22:11:28.193 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #86
22:11:28.193 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.ProperFractionFormat:138 which is executed by 5 tests
-1129122774
22:11:28.328 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #87
22:11:28.328 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.ProperFractionFormat:134 which is executed by 5 tests
-1129122774
22:11:28.472 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
22:11:28.485 [pool-108-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9 ms)
<> Total tests run: 32
<> Ignored tests: 0
<> Failed tests: 0

22:11:28.485 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
22:11:28.485 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
22:11:28.509 [pool-110-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (10 ms)
<> Total tests run: 32
<> Ignored tests: 0
<> Failed tests: 0

22:11:28.509 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
22:11:28.510 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #88
22:11:28.510 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.ode.nonstiff.TestProblemAbstract:143 which is executed by 86 tests
22:11:28.510 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math.ode.nonstiff.TestProblemAbstract:143
22:11:28.510 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #89
22:11:28.510 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.ode.nonstiff.TestProblemAbstract:127 which is executed by 86 tests
22:11:28.510 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math.ode.nonstiff.TestProblemAbstract:127
22:11:28.510 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #90
22:11:28.510 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.ode.nonstiff.TestProblemAbstract:116 which is executed by 92 tests
22:11:28.510 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math.ode.nonstiff.TestProblemAbstract:116
22:11:28.511 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #91
22:11:28.511 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.ode.nonstiff.TestProblemAbstract:115 which is executed by 92 tests
22:11:28.511 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math.ode.nonstiff.TestProblemAbstract:115
22:11:28.511 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #92
22:11:28.511 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.ode.nonstiff.TestProblemAbstract:108 which is executed by 92 tests
22:11:28.511 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math.ode.nonstiff.TestProblemAbstract:108
22:11:28.511 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #93
22:11:28.511 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.ode.nonstiff.TestProblemAbstract:107 which is executed by 92 tests
22:11:28.511 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math.ode.nonstiff.TestProblemAbstract:107
22:11:28.511 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #94
22:11:28.511 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.ode.nonstiff.TestProblemAbstract:100 which is executed by 92 tests
22:11:28.511 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math.ode.nonstiff.TestProblemAbstract:100
22:11:28.511 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #95
22:11:28.511 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.ode.nonstiff.TestProblemAbstract:99 which is executed by 92 tests
22:11:28.511 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math.ode.nonstiff.TestProblemAbstract:99
22:11:28.512 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #96
22:11:28.512 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.ode.nonstiff.TestProblemAbstract:98 which is executed by 92 tests
22:11:28.512 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math.ode.nonstiff.TestProblemAbstract:98
22:11:28.512 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #97
22:11:28.512 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.ode.nonstiff.TestProblemAbstract:97 which is executed by 92 tests
22:11:28.512 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math.ode.nonstiff.TestProblemAbstract:97
22:11:28.512 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #98
22:11:28.512 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.ode.nonstiff.TestProblemAbstract:96 which is executed by 92 tests
22:11:28.512 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math.ode.nonstiff.TestProblemAbstract:96
22:11:28.512 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #99
22:11:28.512 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.ProperFractionFormat:116 which is executed by 6 tests
-1129122774
22:11:28.648 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #100
22:11:28.648 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.ode.nonstiff.TestProblemFactory:46 which is executed by 7 tests
22:11:28.648 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math.ode.nonstiff.TestProblemFactory:46
22:11:28.648 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #101
22:11:28.648 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.MathUtils:208 which is executed by 2 tests
-1550426518
22:11:28.800 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #102
22:11:28.800 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.MathUtils:182 which is executed by 2 tests
-1550426518
22:11:28.950 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)
22:11:28.997 [pool-112-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (41 ms)
<> Total tests run: 43
<> Ignored tests: 0
<> Failed tests: 1
~ testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest)
[48,22 expected:<27385657281648> but was:<27385657281647>]
junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)

junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)
22:11:30.314 [pool-113-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (20 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest)
[48,22 expected:<27385657281648> but was:<27385657281647>]
junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)

junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)
22:11:30.324 [pool-114-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (8 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest)
[48,22 expected:<27385657281648> but was:<27385657281647>]
junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)

22:11:30.325 [pool-111-thread-1] DEBUG tests.output - Failing tests with false: 
[testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest): 48,22 expected:<27385657281648> but was:<27385657281647>]
22:11:30.325 [pool-111-thread-1] DEBUG tests.output - Failing tests with true: 
[testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest): 48,22 expected:<27385657281648> but was:<27385657281647>]
22:11:30.325 [pool-111-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.MathUtils:182.
22:11:30.325 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #103
22:11:30.325 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.ode.nonstiff.TestProblem1:70 which is executed by 8 tests
22:11:30.326 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math.ode.nonstiff.TestProblem1:70
22:11:30.326 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #104
22:11:30.326 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.MathUtils:185 which is executed by 3 tests
-1550426518
22:11:30.478 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)
22:11:30.520 [pool-116-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (36 ms)
<> Total tests run: 43
<> Ignored tests: 0
<> Failed tests: 1
~ testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest)
[48,22 expected:<27385657281648> but was:<27385657281647>]
junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)

junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)
22:11:30.923 [pool-117-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (38 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest)
[48,22 expected:<27385657281648> but was:<27385657281647>]
junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)

junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)
22:11:30.949 [pool-118-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (25 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest)
[48,22 expected:<27385657281648> but was:<27385657281647>]
junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)

22:11:30.950 [pool-115-thread-1] DEBUG tests.output - Failing tests with false: 
[testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest): 48,22 expected:<27385657281648> but was:<27385657281647>]
22:11:30.950 [pool-115-thread-1] DEBUG tests.output - Failing tests with true: 
[testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest): 48,22 expected:<27385657281648> but was:<27385657281647>]
22:11:30.950 [pool-115-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.MathUtils:185.
22:11:30.951 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)
22:11:30.987 [pool-120-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (31 ms)
<> Total tests run: 43
<> Ignored tests: 0
<> Failed tests: 1
~ testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest)
[48,22 expected:<27385657281648> but was:<27385657281647>]
junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)

junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)
22:11:31.329 [pool-121-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (32 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest)
[48,22 expected:<27385657281648> but was:<27385657281647>]
junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)

junit.framework.AssertionFailedError: 4,2 expected:<false> but was:<true>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:174)
    at junit.framework.TestCase.assertEquals(TestCase.java:333)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:194)
22:11:31.332 [pool-122-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest)
[4,2 expected:<false> but was:<true>]
junit.framework.AssertionFailedError: 4,2 expected:<false> but was:<true>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:174)
    at junit.framework.TestCase.assertEquals(TestCase.java:333)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:194)

22:11:31.333 [pool-119-thread-1] DEBUG tests.output - Failing tests with false: 
[testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest): 48,22 expected:<27385657281648> but was:<27385657281647>]
22:11:31.333 [pool-119-thread-1] DEBUG tests.output - Failing tests with true: 
[testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest): 4,2 expected:<false> but was:<true>]
22:11:31.333 [pool-119-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.MathUtils:185.
22:11:31.333 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #105
22:11:31.333 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.MathUtils:184 which is executed by 3 tests
-1550426518
22:11:31.483 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #106
22:11:31.484 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.MathUtils:181 which is executed by 3 tests
-1550426518
22:11:31.634 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)
22:11:31.669 [pool-124-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (30 ms)
<> Total tests run: 43
<> Ignored tests: 0
<> Failed tests: 1
~ testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest)
[48,22 expected:<27385657281648> but was:<27385657281647>]
junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)

junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)
22:11:31.992 [pool-125-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (28 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest)
[48,22 expected:<27385657281648> but was:<27385657281647>]
junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)

junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)
22:11:32.015 [pool-126-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (22 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest)
[48,22 expected:<27385657281648> but was:<27385657281647>]
junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)

22:11:32.016 [pool-123-thread-1] DEBUG tests.output - Failing tests with false: 
[testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest): 48,22 expected:<27385657281648> but was:<27385657281647>]
22:11:32.016 [pool-123-thread-1] DEBUG tests.output - Failing tests with true: 
[testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest): 48,22 expected:<27385657281648> but was:<27385657281647>]
22:11:32.016 [pool-123-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.MathUtils:181.
22:11:32.016 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)
22:11:32.051 [pool-128-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (30 ms)
<> Total tests run: 43
<> Ignored tests: 0
<> Failed tests: 1
~ testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest)
[48,22 expected:<27385657281648> but was:<27385657281647>]
junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)

junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)
22:11:32.364 [pool-129-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (32 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest)
[48,22 expected:<27385657281648> but was:<27385657281647>]
junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)

junit.framework.AssertionFailedError: 4,2 expected:<6> but was:<4>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)
22:11:32.367 [pool-130-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest)
[4,2 expected:<6> but was:<4>]
junit.framework.AssertionFailedError: 4,2 expected:<6> but was:<4>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)

22:11:32.368 [pool-127-thread-1] DEBUG tests.output - Failing tests with false: 
[testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest): 48,22 expected:<27385657281648> but was:<27385657281647>]
22:11:32.368 [pool-127-thread-1] DEBUG tests.output - Failing tests with true: 
[testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest): 4,2 expected:<6> but was:<4>]
22:11:32.368 [pool-127-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.MathUtils:181.
22:11:32.368 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #107
22:11:32.369 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.MathUtils:179 which is executed by 3 tests
-1550426518
22:11:32.530 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)
22:11:32.569 [pool-132-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (33 ms)
<> Total tests run: 43
<> Ignored tests: 0
<> Failed tests: 1
~ testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest)
[48,22 expected:<27385657281648> but was:<27385657281647>]
junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)

junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)
22:11:32.878 [pool-133-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (12 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest)
[48,22 expected:<27385657281648> but was:<27385657281647>]
junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)

junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)
22:11:32.886 [pool-134-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (6 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest)
[48,22 expected:<27385657281648> but was:<27385657281647>]
junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)

22:11:32.887 [pool-131-thread-1] DEBUG tests.output - Failing tests with false: 
[testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest): 48,22 expected:<27385657281648> but was:<27385657281647>]
22:11:32.887 [pool-131-thread-1] DEBUG tests.output - Failing tests with true: 
[testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest): 48,22 expected:<27385657281648> but was:<27385657281647>]
22:11:32.887 [pool-131-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.MathUtils:179.
22:11:32.888 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #108
22:11:32.888 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.MathUtils:95 which is executed by 3 tests
-1550426518
22:11:33.073 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #109
22:11:33.074 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.MathUtils:178 which is executed by 4 tests
-1550426518
22:11:33.258 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)
22:11:33.294 [pool-136-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (31 ms)
<> Total tests run: 43
<> Ignored tests: 0
<> Failed tests: 1
~ testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest)
[48,22 expected:<27385657281648> but was:<27385657281647>]
junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)

junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)
22:11:33.635 [pool-137-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (36 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest)
[48,22 expected:<27385657281648> but was:<27385657281647>]
junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)

junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)
22:11:33.666 [pool-138-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (29 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest)
[48,22 expected:<27385657281648> but was:<27385657281647>]
junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)

22:11:33.667 [pool-135-thread-1] DEBUG tests.output - Failing tests with false: 
[testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest): 48,22 expected:<27385657281648> but was:<27385657281647>]
22:11:33.667 [pool-135-thread-1] DEBUG tests.output - Failing tests with true: 
[testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest): 48,22 expected:<27385657281648> but was:<27385657281647>]
22:11:33.667 [pool-135-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.MathUtils:178.
22:11:33.667 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)
22:11:33.703 [pool-140-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (31 ms)
<> Total tests run: 43
<> Ignored tests: 0
<> Failed tests: 1
~ testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest)
[48,22 expected:<27385657281648> but was:<27385657281647>]
junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)

junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)
22:11:34.080 [pool-141-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (26 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest)
[48,22 expected:<27385657281648> but was:<27385657281647>]
junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)

junit.framework.AssertionFailedError: 2,1 expected:<2> but was:<1>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)
22:11:34.082 [pool-142-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest)
[2,1 expected:<2> but was:<1>]
junit.framework.AssertionFailedError: 2,1 expected:<2> but was:<1>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)

22:11:34.083 [pool-139-thread-1] DEBUG tests.output - Failing tests with false: 
[testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest): 48,22 expected:<27385657281648> but was:<27385657281647>]
22:11:34.083 [pool-139-thread-1] DEBUG tests.output - Failing tests with true: 
[testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest): 2,1 expected:<2> but was:<1>]
22:11:34.084 [pool-139-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.MathUtils:178.
22:11:34.084 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #110
22:11:34.084 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.MathUtils:174 which is executed by 4 tests
-1550426518
22:11:34.241 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)
22:11:34.276 [pool-144-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (29 ms)
<> Total tests run: 43
<> Ignored tests: 0
<> Failed tests: 1
~ testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest)
[48,22 expected:<27385657281648> but was:<27385657281647>]
junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)

junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)
22:11:34.543 [pool-145-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (24 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest)
[48,22 expected:<27385657281648> but was:<27385657281647>]
junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)

junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)
22:11:34.565 [pool-146-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (21 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest)
[48,22 expected:<27385657281648> but was:<27385657281647>]
junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)

22:11:34.566 [pool-143-thread-1] DEBUG tests.output - Failing tests with false: 
[testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest): 48,22 expected:<27385657281648> but was:<27385657281647>]
22:11:34.566 [pool-143-thread-1] DEBUG tests.output - Failing tests with true: 
[testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest): 48,22 expected:<27385657281648> but was:<27385657281647>]
22:11:34.566 [pool-143-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.MathUtils:174.
22:11:34.566 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)
22:11:34.600 [pool-148-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (29 ms)
<> Total tests run: 43
<> Ignored tests: 0
<> Failed tests: 1
~ testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest)
[48,22 expected:<27385657281648> but was:<27385657281647>]
junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)

junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)
22:11:34.865 [pool-149-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (24 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest)
[48,22 expected:<27385657281648> but was:<27385657281647>]
junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)

java.lang.IllegalArgumentException: must have n >= 0 for binomial coefficient (n,k)
    at org.apache.commons.math.util.MathUtils.binomialCoefficient(MathUtils.java:93)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:185)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke(Method.java:498)
22:11:34.868 [pool-150-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest)
[must have n >= 0 for binomial coefficient (n,k)]
java.lang.IllegalArgumentException: must have n >= 0 for binomial coefficient (n,k)    at org.apache.commons.math.util.MathUtils.binomialCoefficient(MathUtils.java:93)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:185)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke(Method.java:498)

22:11:34.869 [pool-147-thread-1] DEBUG tests.output - Failing tests with false: 
[testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest): 48,22 expected:<27385657281648> but was:<27385657281647>]
22:11:34.869 [pool-147-thread-1] DEBUG tests.output - Failing tests with true: 
[testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest): must have n >= 0 for binomial coefficient (n,k)]
22:11:34.869 [pool-147-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.MathUtils:174.
22:11:34.869 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #111
22:11:34.870 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.MathUtils:170 which is executed by 4 tests
-1550426518
22:11:35.020 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)
22:11:35.053 [pool-152-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (28 ms)
<> Total tests run: 43
<> Ignored tests: 0
<> Failed tests: 1
~ testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest)
[48,22 expected:<27385657281648> but was:<27385657281647>]
junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)

junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)
22:11:35.304 [pool-153-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (22 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest)
[48,22 expected:<27385657281648> but was:<27385657281647>]
junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)

junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)
22:11:35.325 [pool-154-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (19 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest)
[48,22 expected:<27385657281648> but was:<27385657281647>]
junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)

22:11:35.336 [pool-151-thread-1] DEBUG tests.output - Failing tests with false: 
[testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest): 48,22 expected:<27385657281648> but was:<27385657281647>]
22:11:35.336 [pool-151-thread-1] DEBUG tests.output - Failing tests with true: 
[testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest): 48,22 expected:<27385657281648> but was:<27385657281647>]
22:11:35.336 [pool-151-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.MathUtils:170.
22:11:35.336 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)
22:11:35.368 [pool-156-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (28 ms)
<> Total tests run: 43
<> Ignored tests: 0
<> Failed tests: 1
~ testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest)
[48,22 expected:<27385657281648> but was:<27385657281647>]
junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)

junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)
22:11:35.616 [pool-157-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (23 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest)
[48,22 expected:<27385657281648> but was:<27385657281647>]
junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)

java.lang.IllegalArgumentException: must have n >= k for binomial coefficient (n,k)
    at org.apache.commons.math.util.MathUtils.binomialCoefficient(MathUtils.java:89)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:185)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke(Method.java:498)
22:11:35.618 [pool-158-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest)
[must have n >= k for binomial coefficient (n,k)]
java.lang.IllegalArgumentException: must have n >= k for binomial coefficient (n,k)    at org.apache.commons.math.util.MathUtils.binomialCoefficient(MathUtils.java:89)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:185)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke(Method.java:498)

22:11:35.619 [pool-155-thread-1] DEBUG tests.output - Failing tests with false: 
[testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest): 48,22 expected:<27385657281648> but was:<27385657281647>]
22:11:35.619 [pool-155-thread-1] DEBUG tests.output - Failing tests with true: 
[testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest): must have n >= k for binomial coefficient (n,k)]
22:11:35.619 [pool-155-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.MathUtils:170.
22:11:35.619 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #112
22:11:35.619 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.MathUtils:141 which is executed by 4 tests
-1550426518
22:11:35.767 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #113
22:11:35.767 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.MathUtils:135 which is executed by 4 tests
-1550426518
22:11:35.914 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)
22:11:35.947 [pool-160-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (27 ms)
<> Total tests run: 43
<> Ignored tests: 0
<> Failed tests: 1
~ testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest)
[48,22 expected:<27385657281648> but was:<27385657281647>]
junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)

22:11:36.207 [pool-159-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
MathUtils.java:86: error: variable ret might not have been initialized
        return ret;
               ^
22:11:36.218 [pool-159-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public final class MathUtils {
    public static final double EPSILON = 1.1102230246251565E-16;

    public static final double SAFE_MIN = 2.2250738585072014E-308;

    private static final byte NB = ((byte) (-1));

    private static final short NS = ((short) (-1));

    private static final byte PB = ((byte) (1));

    private static final short PS = ((short) (1));

    private static final byte ZB = ((byte) (0));

    private static final short ZS = ((short) (0));

    private static final double TWO_PI = 2 * (java.lang.Math.PI);

    private MathUtils() {
        super();
    }

    public static int addAndCheck(int x, int y) {
        long s = ((long) (x)) + ((long) (y));
        if ((s < (java.lang.Integer.MIN_VALUE)) || (s > (java.lang.Integer.MAX_VALUE))) {
            throw new java.lang.ArithmeticException("overflow: add");
        }
        return ((int) (s));
    }

    public static long addAndCheck(long a, long b) {
        return org.apache.commons.math.util.MathUtils.addAndCheck(a, b, "overflow: add");
    }

    private static long addAndCheck(long a, long b, java.lang.String msg) {
        long ret;
        if (a > b) {
            ret = org.apache.commons.math.util.MathUtils.addAndCheck(b, a, msg);
        }else {
            if (a < 0) {
                if (b < 0) {
                    if (((java.lang.Long.MIN_VALUE) - b) <= a) {
                        ret = a + b;
                    }else {
                        throw new java.lang.ArithmeticException(msg);
                    }
                }else {
                    ret = a + b;
                }
            }else {
                if (a <= ((java.lang.Long.MAX_VALUE) - b)) {
                    boolean spoonDefaultValue = false;
                    try {
                        spoonDefaultValue = true;
                    } catch (java.lang.Exception __NopolProcessorException) {
                    }
                    boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                    if (fr.inria.lille.commons.trace.RuntimeValues.instance(12).isEnabled()) {
                        fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectionStarts();
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("msg",msg);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("org.apache.commons.math.util.MathUtils.PS",org.apache.commons.math.util.MathUtils.PS);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("a",a);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("b",b);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("org.apache.commons.math.util.MathUtils.factorials",org.apache.commons.math.util.MathUtils.factorials);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("org.apache.commons.math.util.MathUtils.SAFE_MIN",org.apache.commons.math.util.MathUtils.SAFE_MIN);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("org.apache.commons.math.util.MathUtils.ZB",org.apache.commons.math.util.MathUtils.ZB);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("org.apache.commons.math.util.MathUtils.NS",org.apache.commons.math.util.MathUtils.NS);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("org.apache.commons.math.util.MathUtils.ZS",org.apache.commons.math.util.MathUtils.ZS);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("org.apache.commons.math.util.MathUtils.TWO_PI",org.apache.commons.math.util.MathUtils.TWO_PI);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("org.apache.commons.math.util.MathUtils.NB",org.apache.commons.math.util.MathUtils.NB);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("org.apache.commons.math.util.MathUtils.PB",org.apache.commons.math.util.MathUtils.PB);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("org.apache.commons.math.util.MathUtils.EPSILON",org.apache.commons.math.util.MathUtils.EPSILON);} catch (Exception ex1) {ex1.printStackTrace();};
                        fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectOutput(runtimeAngelicValue);
                        fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectionEnds();
                    }
                    if (runtimeAngelicValue)
                        ret = a + b;

                }else {
                    throw new java.lang.ArithmeticException(msg);
                }
            }
        }
        return ret;
    }

    public static long binomialCoefficient(final int n, final int k) {
        if (n < k) {
            throw new java.lang.IllegalArgumentException("must have n >= k for binomial coefficient (n,k)");
        }
        if (n < 0) {
            throw new java.lang.IllegalArgumentException("must have n >= 0 for binomial coefficient (n,k)");
        }
        if ((n == k) || (k == 0)) {
            return 1;
        }
        if ((k == 1) || (k == (n - 1))) {
            return n;
        }
        long result = java.lang.Math.round(org.apache.commons.math.util.MathUtils.binomialCoefficientDouble(n, k));
        if (result == (java.lang.Long.MAX_VALUE)) {
            throw new java.lang.ArithmeticException("result too large to represent in a long integer");
        }
        return result;
    }

    public static double binomialCoefficientDouble(final int n, final int k) {
        return java.lang.Math.floor(((java.lang.Math.exp(org.apache.commons.math.util.MathUtils.binomialCoefficientLog(n, k))) + 0.5));
    }

    public static double binomialCoefficientLog(final int n, final int k) {
        if (n < k) {
            throw new java.lang.IllegalArgumentException("must have n >= k for binomial coefficient (n,k)");
        }
        if (n < 0) {
            throw new java.lang.IllegalArgumentException("must have n >= 0 for binomial coefficient (n,k)");
        }
        if ((n == k) || (k == 0)) {
            return 0;
        }
        if ((k == 1) || (k == (n - 1))) {
            return java.lang.Math.log(((double) (n)));
        }
        double logSum = 0;
        for (int i = k + 1; i <= n; i++) {
            logSum += java.lang.Math.log(((double) (i)));
        }
        for (int i = 2; i <= (n - k); i++) {
            logSum -= java.lang.Math.log(((double) (i)));
        }
        return logSum;
    }

    public static double cosh(double x) {
        return ((java.lang.Math.exp(x)) + (java.lang.Math.exp((-x)))) / 2.0;
    }

    public static boolean equals(double x, double y) {
        return ((java.lang.Double.isNaN(x)) && (java.lang.Double.isNaN(y))) || (x == y);
    }

    public static boolean equals(double[] x, double[] y) {
        if ((x == null) || (y == null)) {
            return !((x == null) ^ (y == null));
        }
        if ((x.length) != (y.length)) {
            return false;
        }
        for (int i = 0; i < (x.length); ++i) {
            if (!(org.apache.commons.math.util.MathUtils.equals(x[i], y[i]))) {
                return false;
            }
        }
        return true;
    }

    private static final long[] factorials = new long[]{ 1, 1, 2, 6, 24, 120, 720, 5040, 40320, 362880, 3628800, 39916800, 479001600, 6227020800L, 87178291200L, 1307674368000L, 20922789888000L, 355687428096000L, 6402373705728000L, 121645100408832000L, 2432902008176640000L };

    public static long factorial(final int n) {
        if (n < 0) {
            throw new java.lang.IllegalArgumentException("must have n >= 0 for n!");
        }
        if (n > 20) {
            throw new java.lang.ArithmeticException("factorial value is too large to fit in a long");
        }
        return org.apache.commons.math.util.MathUtils.factorials[n];
    }

    public static double factorialDouble(final int n) {
        if (n < 0) {
            throw new java.lang.IllegalArgumentException("must have n >= 0 for n!");
        }
        if (n < 21) {
            return org.apache.commons.math.util.MathUtils.factorial(n);
        }
        return java.lang.Math.floor(((java.lang.Math.exp(org.apache.commons.math.util.MathUtils.factorialLog(n))) + 0.5));
    }

    public static double factorialLog(final int n) {
        if (n < 0) {
            throw new java.lang.IllegalArgumentException("must have n > 0 for n!");
        }
        if (n < 21) {
            return java.lang.Math.log(org.apache.commons.math.util.MathUtils.factorial(n));
        }
        double logSum = 0;
        for (int i = 2; i <= n; i++) {
            logSum += java.lang.Math.log(((double) (i)));
        }
        return logSum;
    }

    public static int gcd(int u, int v) {
        if ((u == 0) || (v == 0)) {
            return (java.lang.Math.abs(u)) + (java.lang.Math.abs(v));
        }
        if (u > 0) {
            u = -u;
        }
        if (v > 0) {
            v = -v;
        }
        int k = 0;
        while ((((u & 1) == 0) && ((v & 1) == 0)) && (k < 31)) {
            u /= 2;
            v /= 2;
            k++;
        } 
        if (k == 31) {
            throw new java.lang.ArithmeticException("overflow: gcd is 2^31");
        }
        int t = ((u & 1) == 1) ? v : -(u / 2);
        do {
            while ((t & 1) == 0) {
                t /= 2;
            } 
            if (t > 0) {
                u = -t;
            }else {
                v = t;
            }
            t = (v - u) / 2;
        } while (t != 0 );
        return (-u) * (1 << k);
    }

    public static int hash(double value) {
        return new java.lang.Double(value).hashCode();
    }

    public static int hash(double[] value) {
        return java.util.Arrays.hashCode(value);
    }

    public static byte indicator(final byte x) {
        return x >= (org.apache.commons.math.util.MathUtils.ZB) ? org.apache.commons.math.util.MathUtils.PB : org.apache.commons.math.util.MathUtils.NB;
    }

    public static double indicator(final double x) {
        if (java.lang.Double.isNaN(x)) {
            return java.lang.Double.NaN;
        }
        return x >= 0.0 ? 1.0 : -1.0;
    }

    public static float indicator(final float x) {
        if (java.lang.Float.isNaN(x)) {
            return java.lang.Float.NaN;
        }
        return x >= 0.0F ? 1.0F : -1.0F;
    }

    public static int indicator(final int x) {
        return x >= 0 ? 1 : -1;
    }

    public static long indicator(final long x) {
        return x >= 0L ? 1L : -1L;
    }

    public static short indicator(final short x) {
        return x >= (org.apache.commons.math.util.MathUtils.ZS) ? org.apache.commons.math.util.MathUtils.PS : org.apache.commons.math.util.MathUtils.NS;
    }

    public static int lcm(int a, int b) {
        return java.lang.Math.abs(org.apache.commons.math.util.MathUtils.mulAndCheck((a / (org.apache.commons.math.util.MathUtils.gcd(a, b))), b));
    }

    public static double log(double base, double x) {
        return (java.lang.Math.log(x)) / (java.lang.Math.log(base));
    }

    public static int mulAndCheck(int x, int y) {
        long m = ((long) (x)) * ((long) (y));
        if ((m < (java.lang.Integer.MIN_VALUE)) || (m > (java.lang.Integer.MAX_VALUE))) {
            throw new java.lang.ArithmeticException("overflow: mul");
        }
        return ((int) (m));
    }

    public static long mulAndCheck(long a, long b) {
        long ret;
        java.lang.String msg = "overflow: multiply";
        if (a > b) {
            ret = org.apache.commons.math.util.MathUtils.mulAndCheck(b, a);
        }else {
            if (a < 0) {
                if (b < 0) {
                    if (a >= ((java.lang.Long.MAX_VALUE) / b)) {
                        ret = a * b;
                    }else {
                        throw new java.lang.ArithmeticException(msg);
                    }
                }else
                    if (b > 0) {
                        if (((java.lang.Long.MIN_VALUE) / b) <= a) {
                            ret = a * b;
                        }else {
                            throw new java.lang.ArithmeticException(msg);
                        }
                    }else {
                        ret = 0;
                    }

            }else
                if (a > 0) {
                    if (a <= ((java.lang.Long.MAX_VALUE) / b)) {
                        ret = a * b;
                    }else {
                        throw new java.lang.ArithmeticException(msg);
                    }
                }else {
                    ret = 0;
                }

        }
        return ret;
    }

    public static double nextAfter(double d, double direction) {
        if ((java.lang.Double.isNaN(d)) || (java.lang.Double.isInfinite(d))) {
            return d;
        }else
            if (d == 0) {
                return direction < 0 ? -(java.lang.Double.MIN_VALUE) : java.lang.Double.MIN_VALUE;
            }

        long bits = java.lang.Double.doubleToLongBits(d);
        long sign = bits & -9223372036854775808L;
        long exponent = bits & 9218868437227405312L;
        long mantissa = bits & 4503599627370495L;
        if ((d * (direction - d)) >= 0) {
            if (mantissa == 4503599627370495L) {
                return java.lang.Double.longBitsToDouble((sign | (exponent + 4503599627370496L)));
            }else {
                return java.lang.Double.longBitsToDouble(((sign | exponent) | (mantissa + 1)));
            }
        }else {
            if (mantissa == 0L) {
                return java.lang.Double.longBitsToDouble(((sign | (exponent - 4503599627370496L)) | 4503599627370495L));
            }else {
                return java.lang.Double.longBitsToDouble(((sign | exponent) | (mantissa - 1)));
            }
        }
    }

    public static double scalb(final double d, final int scaleFactor) {
        if (((d == 0) || (java.lang.Double.isNaN(d))) || (java.lang.Double.isInfinite(d))) {
            return d;
        }
        final long bits = java.lang.Double.doubleToLongBits(d);
        final long exponent = bits & 9218868437227405312L;
        final long rest = bits & -9218868437227405313L;
        final long newBits = rest | (exponent + (((long) (scaleFactor)) << 52));
        return java.lang.Double.longBitsToDouble(newBits);
    }

    public static double normalizeAngle(double a, double center) {
        return a - ((org.apache.commons.math.util.MathUtils.TWO_PI) * (java.lang.Math.floor((((a + (java.lang.Math.PI)) - center) / (org.apache.commons.math.util.MathUtils.TWO_PI)))));
    }

    public static double round(double x, int scale) {
        return org.apache.commons.math.util.MathUtils.round(x, scale, java.math.BigDecimal.ROUND_HALF_UP);
    }

    public static double round(double x, int scale, int roundingMethod) {
        try {
            return new java.math.BigDecimal(java.lang.Double.toString(x)).setScale(scale, roundingMethod).doubleValue();
        } catch (java.lang.NumberFormatException ex) {
            if (java.lang.Double.isInfinite(x)) {
                return x;
            }else {
                return java.lang.Double.NaN;
            }
        }
    }

    public static float round(float x, int scale) {
        return org.apache.commons.math.util.MathUtils.round(x, scale, java.math.BigDecimal.ROUND_HALF_UP);
    }

    public static float round(float x, int scale, int roundingMethod) {
        float sign = org.apache.commons.math.util.MathUtils.indicator(x);
        float factor = ((float) (java.lang.Math.pow(10.0F, scale))) * sign;
        return ((float) (org.apache.commons.math.util.MathUtils.roundUnscaled((x * factor), sign, roundingMethod))) / factor;
    }

    private static double roundUnscaled(double unscaled, double sign, int roundingMethod) {
        switch (roundingMethod) {
            case java.math.BigDecimal.ROUND_CEILING :
                if (sign == (-1)) {
                    unscaled = java.lang.Math.floor(org.apache.commons.math.util.MathUtils.nextAfter(unscaled, java.lang.Double.NEGATIVE_INFINITY));
                }else {
                    unscaled = java.lang.Math.ceil(org.apache.commons.math.util.MathUtils.nextAfter(unscaled, java.lang.Double.POSITIVE_INFINITY));
                }
                break;
            case java.math.BigDecimal.ROUND_DOWN :
                unscaled = java.lang.Math.floor(org.apache.commons.math.util.MathUtils.nextAfter(unscaled, java.lang.Double.NEGATIVE_INFINITY));
                break;
            case java.math.BigDecimal.ROUND_FLOOR :
                if (sign == (-1)) {
                    unscaled = java.lang.Math.ceil(org.apache.commons.math.util.MathUtils.nextAfter(unscaled, java.lang.Double.POSITIVE_INFINITY));
                }else {
                    unscaled = java.lang.Math.floor(org.apache.commons.math.util.MathUtils.nextAfter(unscaled, java.lang.Double.NEGATIVE_INFINITY));
                }
                break;
            case java.math.BigDecimal.ROUND_HALF_DOWN :
                {
                    unscaled = org.apache.commons.math.util.MathUtils.nextAfter(unscaled, java.lang.Double.NEGATIVE_INFINITY);
                    double fraction = unscaled - (java.lang.Math.floor(unscaled));
                    if (fraction > 0.5) {
                        unscaled = java.lang.Math.ceil(unscaled);
                    }else {
                        unscaled = java.lang.Math.floor(unscaled);
                    }
                    break;
                }
            case java.math.BigDecimal.ROUND_HALF_EVEN :
                {
                    double fraction = unscaled - (java.lang.Math.floor(unscaled));
                    if (fraction > 0.5) {
                        unscaled = java.lang.Math.ceil(unscaled);
                    }else
                        if (fraction < 0.5) {
                            unscaled = java.lang.Math.floor(unscaled);
                        }else {
                            if (((java.lang.Math.floor(unscaled)) / 2.0) == (java.lang.Math.floor(((java.lang.Math.floor(unscaled)) / 2.0)))) {
                                unscaled = java.lang.Math.floor(unscaled);
                            }else {
                                unscaled = java.lang.Math.ceil(unscaled);
                            }
                        }

                    break;
                }
            case java.math.BigDecimal.ROUND_HALF_UP :
                {
                    unscaled = org.apache.commons.math.util.MathUtils.nextAfter(unscaled, java.lang.Double.POSITIVE_INFINITY);
                    double fraction = unscaled - (java.lang.Math.floor(unscaled));
                    if (fraction >= 0.5) {
                        unscaled = java.lang.Math.ceil(unscaled);
                    }else {
                        unscaled = java.lang.Math.floor(unscaled);
                    }
                    break;
                }
            case java.math.BigDecimal.ROUND_UNNECESSARY :
                if (unscaled != (java.lang.Math.floor(unscaled))) {
                    throw new java.lang.ArithmeticException("Inexact result from rounding");
                }
                break;
            case java.math.BigDecimal.ROUND_UP :
                unscaled = java.lang.Math.ceil(org.apache.commons.math.util.MathUtils.nextAfter(unscaled, java.lang.Double.POSITIVE_INFINITY));
                break;
            default :
                throw new java.lang.IllegalArgumentException("Invalid rounding method.");
        }
        return unscaled;
    }

    public static byte sign(final byte x) {
        return x == (org.apache.commons.math.util.MathUtils.ZB) ? org.apache.commons.math.util.MathUtils.ZB : x > (org.apache.commons.math.util.MathUtils.ZB) ? org.apache.commons.math.util.MathUtils.PB : org.apache.commons.math.util.MathUtils.NB;
    }

    public static double sign(final double x) {
        if (java.lang.Double.isNaN(x)) {
            return java.lang.Double.NaN;
        }
        return x == 0.0 ? 0.0 : x > 0.0 ? 1.0 : -1.0;
    }

    public static float sign(final float x) {
        if (java.lang.Float.isNaN(x)) {
            return java.lang.Float.NaN;
        }
        return x == 0.0F ? 0.0F : x > 0.0F ? 1.0F : -1.0F;
    }

    public static int sign(final int x) {
        return x == 0 ? 0 : x > 0 ? 1 : -1;
    }

    public static long sign(final long x) {
        return x == 0L ? 0L : x > 0L ? 1L : -1L;
    }

    public static short sign(final short x) {
        return x == (org.apache.commons.math.util.MathUtils.ZS) ? org.apache.commons.math.util.MathUtils.ZS : x > (org.apache.commons.math.util.MathUtils.ZS) ? org.apache.commons.math.util.MathUtils.PS : org.apache.commons.math.util.MathUtils.NS;
    }

    public static double sinh(double x) {
        return ((java.lang.Math.exp(x)) - (java.lang.Math.exp((-x)))) / 2.0;
    }

    public static int subAndCheck(int x, int y) {
        long s = ((long) (x)) - ((long) (y));
        if ((s < (java.lang.Integer.MIN_VALUE)) || (s > (java.lang.Integer.MAX_VALUE))) {
            throw new java.lang.ArithmeticException("overflow: subtract");
        }
        return ((int) (s));
    }

    public static long subAndCheck(long a, long b) {
        long ret;
        java.lang.String msg = "overflow: subtract";
        if (b == (java.lang.Long.MIN_VALUE)) {
            if (a < 0) {
                ret = a - b;
            }else {
                throw new java.lang.ArithmeticException(msg);
            }
        }else {
            ret = org.apache.commons.math.util.MathUtils.addAndCheck(a, (-b), msg);
        }
        return ret;
    }
}
22:11:36.219 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
22:11:36.219 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #114
22:11:36.220 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.MathUtils:134 which is executed by 4 tests
-1550426518
22:11:36.370 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)
22:11:36.403 [pool-162-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (28 ms)
<> Total tests run: 43
<> Ignored tests: 0
<> Failed tests: 1
~ testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest)
[48,22 expected:<27385657281648> but was:<27385657281647>]
junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)

22:11:36.643 [pool-161-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
MathUtils.java:86: error: variable ret might not have been initialized
        return ret;
               ^
22:11:36.653 [pool-161-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public final class MathUtils {
    public static final double EPSILON = 1.1102230246251565E-16;

    public static final double SAFE_MIN = 2.2250738585072014E-308;

    private static final byte NB = ((byte) (-1));

    private static final short NS = ((short) (-1));

    private static final byte PB = ((byte) (1));

    private static final short PS = ((short) (1));

    private static final byte ZB = ((byte) (0));

    private static final short ZS = ((short) (0));

    private static final double TWO_PI = 2 * (java.lang.Math.PI);

    private MathUtils() {
        super();
    }

    public static int addAndCheck(int x, int y) {
        long s = ((long) (x)) + ((long) (y));
        if ((s < (java.lang.Integer.MIN_VALUE)) || (s > (java.lang.Integer.MAX_VALUE))) {
            throw new java.lang.ArithmeticException("overflow: add");
        }
        return ((int) (s));
    }

    public static long addAndCheck(long a, long b) {
        return org.apache.commons.math.util.MathUtils.addAndCheck(a, b, "overflow: add");
    }

    private static long addAndCheck(long a, long b, java.lang.String msg) {
        long ret;
        if (a > b) {
            ret = org.apache.commons.math.util.MathUtils.addAndCheck(b, a, msg);
        }else {
            if (a < 0) {
                if (b < 0) {
                    if (((java.lang.Long.MIN_VALUE) - b) <= a) {
                        ret = a + b;
                    }else {
                        throw new java.lang.ArithmeticException(msg);
                    }
                }else {
                    ret = a + b;
                }
            }else {
                boolean spoonDefaultValue = false;
                try {
                    spoonDefaultValue = true;
                } catch (java.lang.Exception __NopolProcessorException) {
                }
                boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                if (fr.inria.lille.commons.trace.RuntimeValues.instance(13).isEnabled()) {
                    fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectionStarts();
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("msg",msg);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("org.apache.commons.math.util.MathUtils.PS",org.apache.commons.math.util.MathUtils.PS);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("a",a);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("b",b);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("a <= ((java.lang.Long.MAX_VALUE) - b)",a <= ((java.lang.Long.MAX_VALUE) - b));} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("org.apache.commons.math.util.MathUtils.factorials",org.apache.commons.math.util.MathUtils.factorials);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("org.apache.commons.math.util.MathUtils.SAFE_MIN",org.apache.commons.math.util.MathUtils.SAFE_MIN);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("org.apache.commons.math.util.MathUtils.ZB",org.apache.commons.math.util.MathUtils.ZB);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("org.apache.commons.math.util.MathUtils.NS",org.apache.commons.math.util.MathUtils.NS);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("org.apache.commons.math.util.MathUtils.ZS",org.apache.commons.math.util.MathUtils.ZS);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("org.apache.commons.math.util.MathUtils.TWO_PI",org.apache.commons.math.util.MathUtils.TWO_PI);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("org.apache.commons.math.util.MathUtils.NB",org.apache.commons.math.util.MathUtils.NB);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("org.apache.commons.math.util.MathUtils.PB",org.apache.commons.math.util.MathUtils.PB);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("((java.lang.Long.MAX_VALUE) - b)",((java.lang.Long.MAX_VALUE) - b));} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("org.apache.commons.math.util.MathUtils.EPSILON",org.apache.commons.math.util.MathUtils.EPSILON);} catch (Exception ex1) {ex1.printStackTrace();};
                    fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectOutput(runtimeAngelicValue);
                    fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectionEnds();
                }
                if (runtimeAngelicValue) if (a <= ((java.lang.Long.MAX_VALUE) - b)) {
                    ret = a + b;
                }else {
                    throw new java.lang.ArithmeticException(msg);
                }
            }
        }
        return ret;
    }

    public static long binomialCoefficient(final int n, final int k) {
        if (n < k) {
            throw new java.lang.IllegalArgumentException("must have n >= k for binomial coefficient (n,k)");
        }
        if (n < 0) {
            throw new java.lang.IllegalArgumentException("must have n >= 0 for binomial coefficient (n,k)");
        }
        if ((n == k) || (k == 0)) {
            return 1;
        }
        if ((k == 1) || (k == (n - 1))) {
            return n;
        }
        long result = java.lang.Math.round(org.apache.commons.math.util.MathUtils.binomialCoefficientDouble(n, k));
        if (result == (java.lang.Long.MAX_VALUE)) {
            throw new java.lang.ArithmeticException("result too large to represent in a long integer");
        }
        return result;
    }

    public static double binomialCoefficientDouble(final int n, final int k) {
        return java.lang.Math.floor(((java.lang.Math.exp(org.apache.commons.math.util.MathUtils.binomialCoefficientLog(n, k))) + 0.5));
    }

    public static double binomialCoefficientLog(final int n, final int k) {
        if (n < k) {
            throw new java.lang.IllegalArgumentException("must have n >= k for binomial coefficient (n,k)");
        }
        if (n < 0) {
            throw new java.lang.IllegalArgumentException("must have n >= 0 for binomial coefficient (n,k)");
        }
        if ((n == k) || (k == 0)) {
            return 0;
        }
        if ((k == 1) || (k == (n - 1))) {
            return java.lang.Math.log(((double) (n)));
        }
        double logSum = 0;
        for (int i = k + 1; i <= n; i++) {
            logSum += java.lang.Math.log(((double) (i)));
        }
        for (int i = 2; i <= (n - k); i++) {
            logSum -= java.lang.Math.log(((double) (i)));
        }
        return logSum;
    }

    public static double cosh(double x) {
        return ((java.lang.Math.exp(x)) + (java.lang.Math.exp((-x)))) / 2.0;
    }

    public static boolean equals(double x, double y) {
        return ((java.lang.Double.isNaN(x)) && (java.lang.Double.isNaN(y))) || (x == y);
    }

    public static boolean equals(double[] x, double[] y) {
        if ((x == null) || (y == null)) {
            return !((x == null) ^ (y == null));
        }
        if ((x.length) != (y.length)) {
            return false;
        }
        for (int i = 0; i < (x.length); ++i) {
            if (!(org.apache.commons.math.util.MathUtils.equals(x[i], y[i]))) {
                return false;
            }
        }
        return true;
    }

    private static final long[] factorials = new long[]{ 1, 1, 2, 6, 24, 120, 720, 5040, 40320, 362880, 3628800, 39916800, 479001600, 6227020800L, 87178291200L, 1307674368000L, 20922789888000L, 355687428096000L, 6402373705728000L, 121645100408832000L, 2432902008176640000L };

    public static long factorial(final int n) {
        if (n < 0) {
            throw new java.lang.IllegalArgumentException("must have n >= 0 for n!");
        }
        if (n > 20) {
            throw new java.lang.ArithmeticException("factorial value is too large to fit in a long");
        }
        return org.apache.commons.math.util.MathUtils.factorials[n];
    }

    public static double factorialDouble(final int n) {
        if (n < 0) {
            throw new java.lang.IllegalArgumentException("must have n >= 0 for n!");
        }
        if (n < 21) {
            return org.apache.commons.math.util.MathUtils.factorial(n);
        }
        return java.lang.Math.floor(((java.lang.Math.exp(org.apache.commons.math.util.MathUtils.factorialLog(n))) + 0.5));
    }

    public static double factorialLog(final int n) {
        if (n < 0) {
            throw new java.lang.IllegalArgumentException("must have n > 0 for n!");
        }
        if (n < 21) {
            return java.lang.Math.log(org.apache.commons.math.util.MathUtils.factorial(n));
        }
        double logSum = 0;
        for (int i = 2; i <= n; i++) {
            logSum += java.lang.Math.log(((double) (i)));
        }
        return logSum;
    }

    public static int gcd(int u, int v) {
        if ((u == 0) || (v == 0)) {
            return (java.lang.Math.abs(u)) + (java.lang.Math.abs(v));
        }
        if (u > 0) {
            u = -u;
        }
        if (v > 0) {
            v = -v;
        }
        int k = 0;
        while ((((u & 1) == 0) && ((v & 1) == 0)) && (k < 31)) {
            u /= 2;
            v /= 2;
            k++;
        } 
        if (k == 31) {
            throw new java.lang.ArithmeticException("overflow: gcd is 2^31");
        }
        int t = ((u & 1) == 1) ? v : -(u / 2);
        do {
            while ((t & 1) == 0) {
                t /= 2;
            } 
            if (t > 0) {
                u = -t;
            }else {
                v = t;
            }
            t = (v - u) / 2;
        } while (t != 0 );
        return (-u) * (1 << k);
    }

    public static int hash(double value) {
        return new java.lang.Double(value).hashCode();
    }

    public static int hash(double[] value) {
        return java.util.Arrays.hashCode(value);
    }

    public static byte indicator(final byte x) {
        return x >= (org.apache.commons.math.util.MathUtils.ZB) ? org.apache.commons.math.util.MathUtils.PB : org.apache.commons.math.util.MathUtils.NB;
    }

    public static double indicator(final double x) {
        if (java.lang.Double.isNaN(x)) {
            return java.lang.Double.NaN;
        }
        return x >= 0.0 ? 1.0 : -1.0;
    }

    public static float indicator(final float x) {
        if (java.lang.Float.isNaN(x)) {
            return java.lang.Float.NaN;
        }
        return x >= 0.0F ? 1.0F : -1.0F;
    }

    public static int indicator(final int x) {
        return x >= 0 ? 1 : -1;
    }

    public static long indicator(final long x) {
        return x >= 0L ? 1L : -1L;
    }

    public static short indicator(final short x) {
        return x >= (org.apache.commons.math.util.MathUtils.ZS) ? org.apache.commons.math.util.MathUtils.PS : org.apache.commons.math.util.MathUtils.NS;
    }

    public static int lcm(int a, int b) {
        return java.lang.Math.abs(org.apache.commons.math.util.MathUtils.mulAndCheck((a / (org.apache.commons.math.util.MathUtils.gcd(a, b))), b));
    }

    public static double log(double base, double x) {
        return (java.lang.Math.log(x)) / (java.lang.Math.log(base));
    }

    public static int mulAndCheck(int x, int y) {
        long m = ((long) (x)) * ((long) (y));
        if ((m < (java.lang.Integer.MIN_VALUE)) || (m > (java.lang.Integer.MAX_VALUE))) {
            throw new java.lang.ArithmeticException("overflow: mul");
        }
        return ((int) (m));
    }

    public static long mulAndCheck(long a, long b) {
        long ret;
        java.lang.String msg = "overflow: multiply";
        if (a > b) {
            ret = org.apache.commons.math.util.MathUtils.mulAndCheck(b, a);
        }else {
            if (a < 0) {
                if (b < 0) {
                    if (a >= ((java.lang.Long.MAX_VALUE) / b)) {
                        ret = a * b;
                    }else {
                        throw new java.lang.ArithmeticException(msg);
                    }
                }else
                    if (b > 0) {
                        if (((java.lang.Long.MIN_VALUE) / b) <= a) {
                            ret = a * b;
                        }else {
                            throw new java.lang.ArithmeticException(msg);
                        }
                    }else {
                        ret = 0;
                    }

            }else
                if (a > 0) {
                    if (a <= ((java.lang.Long.MAX_VALUE) / b)) {
                        ret = a * b;
                    }else {
                        throw new java.lang.ArithmeticException(msg);
                    }
                }else {
                    ret = 0;
                }

        }
        return ret;
    }

    public static double nextAfter(double d, double direction) {
        if ((java.lang.Double.isNaN(d)) || (java.lang.Double.isInfinite(d))) {
            return d;
        }else
            if (d == 0) {
                return direction < 0 ? -(java.lang.Double.MIN_VALUE) : java.lang.Double.MIN_VALUE;
            }

        long bits = java.lang.Double.doubleToLongBits(d);
        long sign = bits & -9223372036854775808L;
        long exponent = bits & 9218868437227405312L;
        long mantissa = bits & 4503599627370495L;
        if ((d * (direction - d)) >= 0) {
            if (mantissa == 4503599627370495L) {
                return java.lang.Double.longBitsToDouble((sign | (exponent + 4503599627370496L)));
            }else {
                return java.lang.Double.longBitsToDouble(((sign | exponent) | (mantissa + 1)));
            }
        }else {
            if (mantissa == 0L) {
                return java.lang.Double.longBitsToDouble(((sign | (exponent - 4503599627370496L)) | 4503599627370495L));
            }else {
                return java.lang.Double.longBitsToDouble(((sign | exponent) | (mantissa - 1)));
            }
        }
    }

    public static double scalb(final double d, final int scaleFactor) {
        if (((d == 0) || (java.lang.Double.isNaN(d))) || (java.lang.Double.isInfinite(d))) {
            return d;
        }
        final long bits = java.lang.Double.doubleToLongBits(d);
        final long exponent = bits & 9218868437227405312L;
        final long rest = bits & -9218868437227405313L;
        final long newBits = rest | (exponent + (((long) (scaleFactor)) << 52));
        return java.lang.Double.longBitsToDouble(newBits);
    }

    public static double normalizeAngle(double a, double center) {
        return a - ((org.apache.commons.math.util.MathUtils.TWO_PI) * (java.lang.Math.floor((((a + (java.lang.Math.PI)) - center) / (org.apache.commons.math.util.MathUtils.TWO_PI)))));
    }

    public static double round(double x, int scale) {
        return org.apache.commons.math.util.MathUtils.round(x, scale, java.math.BigDecimal.ROUND_HALF_UP);
    }

    public static double round(double x, int scale, int roundingMethod) {
        try {
            return new java.math.BigDecimal(java.lang.Double.toString(x)).setScale(scale, roundingMethod).doubleValue();
        } catch (java.lang.NumberFormatException ex) {
            if (java.lang.Double.isInfinite(x)) {
                return x;
            }else {
                return java.lang.Double.NaN;
            }
        }
    }

    public static float round(float x, int scale) {
        return org.apache.commons.math.util.MathUtils.round(x, scale, java.math.BigDecimal.ROUND_HALF_UP);
    }

    public static float round(float x, int scale, int roundingMethod) {
        float sign = org.apache.commons.math.util.MathUtils.indicator(x);
        float factor = ((float) (java.lang.Math.pow(10.0F, scale))) * sign;
        return ((float) (org.apache.commons.math.util.MathUtils.roundUnscaled((x * factor), sign, roundingMethod))) / factor;
    }

    private static double roundUnscaled(double unscaled, double sign, int roundingMethod) {
        switch (roundingMethod) {
            case java.math.BigDecimal.ROUND_CEILING :
                if (sign == (-1)) {
                    unscaled = java.lang.Math.floor(org.apache.commons.math.util.MathUtils.nextAfter(unscaled, java.lang.Double.NEGATIVE_INFINITY));
                }else {
                    unscaled = java.lang.Math.ceil(org.apache.commons.math.util.MathUtils.nextAfter(unscaled, java.lang.Double.POSITIVE_INFINITY));
                }
                break;
            case java.math.BigDecimal.ROUND_DOWN :
                unscaled = java.lang.Math.floor(org.apache.commons.math.util.MathUtils.nextAfter(unscaled, java.lang.Double.NEGATIVE_INFINITY));
                break;
            case java.math.BigDecimal.ROUND_FLOOR :
                if (sign == (-1)) {
                    unscaled = java.lang.Math.ceil(org.apache.commons.math.util.MathUtils.nextAfter(unscaled, java.lang.Double.POSITIVE_INFINITY));
                }else {
                    unscaled = java.lang.Math.floor(org.apache.commons.math.util.MathUtils.nextAfter(unscaled, java.lang.Double.NEGATIVE_INFINITY));
                }
                break;
            case java.math.BigDecimal.ROUND_HALF_DOWN :
                {
                    unscaled = org.apache.commons.math.util.MathUtils.nextAfter(unscaled, java.lang.Double.NEGATIVE_INFINITY);
                    double fraction = unscaled - (java.lang.Math.floor(unscaled));
                    if (fraction > 0.5) {
                        unscaled = java.lang.Math.ceil(unscaled);
                    }else {
                        unscaled = java.lang.Math.floor(unscaled);
                    }
                    break;
                }
            case java.math.BigDecimal.ROUND_HALF_EVEN :
                {
                    double fraction = unscaled - (java.lang.Math.floor(unscaled));
                    if (fraction > 0.5) {
                        unscaled = java.lang.Math.ceil(unscaled);
                    }else
                        if (fraction < 0.5) {
                            unscaled = java.lang.Math.floor(unscaled);
                        }else {
                            if (((java.lang.Math.floor(unscaled)) / 2.0) == (java.lang.Math.floor(((java.lang.Math.floor(unscaled)) / 2.0)))) {
                                unscaled = java.lang.Math.floor(unscaled);
                            }else {
                                unscaled = java.lang.Math.ceil(unscaled);
                            }
                        }

                    break;
                }
            case java.math.BigDecimal.ROUND_HALF_UP :
                {
                    unscaled = org.apache.commons.math.util.MathUtils.nextAfter(unscaled, java.lang.Double.POSITIVE_INFINITY);
                    double fraction = unscaled - (java.lang.Math.floor(unscaled));
                    if (fraction >= 0.5) {
                        unscaled = java.lang.Math.ceil(unscaled);
                    }else {
                        unscaled = java.lang.Math.floor(unscaled);
                    }
                    break;
                }
            case java.math.BigDecimal.ROUND_UNNECESSARY :
                if (unscaled != (java.lang.Math.floor(unscaled))) {
                    throw new java.lang.ArithmeticException("Inexact result from rounding");
                }
                break;
            case java.math.BigDecimal.ROUND_UP :
                unscaled = java.lang.Math.ceil(org.apache.commons.math.util.MathUtils.nextAfter(unscaled, java.lang.Double.POSITIVE_INFINITY));
                break;
            default :
                throw new java.lang.IllegalArgumentException("Invalid rounding method.");
        }
        return unscaled;
    }

    public static byte sign(final byte x) {
        return x == (org.apache.commons.math.util.MathUtils.ZB) ? org.apache.commons.math.util.MathUtils.ZB : x > (org.apache.commons.math.util.MathUtils.ZB) ? org.apache.commons.math.util.MathUtils.PB : org.apache.commons.math.util.MathUtils.NB;
    }

    public static double sign(final double x) {
        if (java.lang.Double.isNaN(x)) {
            return java.lang.Double.NaN;
        }
        return x == 0.0 ? 0.0 : x > 0.0 ? 1.0 : -1.0;
    }

    public static float sign(final float x) {
        if (java.lang.Float.isNaN(x)) {
            return java.lang.Float.NaN;
        }
        return x == 0.0F ? 0.0F : x > 0.0F ? 1.0F : -1.0F;
    }

    public static int sign(final int x) {
        return x == 0 ? 0 : x > 0 ? 1 : -1;
    }

    public static long sign(final long x) {
        return x == 0L ? 0L : x > 0L ? 1L : -1L;
    }

    public static short sign(final short x) {
        return x == (org.apache.commons.math.util.MathUtils.ZS) ? org.apache.commons.math.util.MathUtils.ZS : x > (org.apache.commons.math.util.MathUtils.ZS) ? org.apache.commons.math.util.MathUtils.PS : org.apache.commons.math.util.MathUtils.NS;
    }

    public static double sinh(double x) {
        return ((java.lang.Math.exp(x)) - (java.lang.Math.exp((-x)))) / 2.0;
    }

    public static int subAndCheck(int x, int y) {
        long s = ((long) (x)) - ((long) (y));
        if ((s < (java.lang.Integer.MIN_VALUE)) || (s > (java.lang.Integer.MAX_VALUE))) {
            throw new java.lang.ArithmeticException("overflow: subtract");
        }
        return ((int) (s));
    }

    public static long subAndCheck(long a, long b) {
        long ret;
        java.lang.String msg = "overflow: subtract";
        if (b == (java.lang.Long.MIN_VALUE)) {
            if (a < 0) {
                ret = a - b;
            }else {
                throw new java.lang.ArithmeticException(msg);
            }
        }else {
            ret = org.apache.commons.math.util.MathUtils.addAndCheck(a, (-b), msg);
        }
        return ret;
    }
}
22:11:36.654 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
22:11:36.654 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)
22:11:36.691 [pool-164-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (29 ms)
<> Total tests run: 43
<> Ignored tests: 0
<> Failed tests: 1
~ testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest)
[48,22 expected:<27385657281648> but was:<27385657281647>]
junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)

junit.framework.AssertionFailedError: 4,2 expected:<true> but was:<false>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:174)
    at junit.framework.TestCase.assertEquals(TestCase.java:333)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:194)
22:11:36.952 [pool-165-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (3 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest)
[4,2 expected:<true> but was:<false>]
junit.framework.AssertionFailedError: 4,2 expected:<true> but was:<false>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:174)
    at junit.framework.TestCase.assertEquals(TestCase.java:333)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:194)

junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)
22:11:36.981 [pool-166-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (27 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest)
[48,22 expected:<27385657281648> but was:<27385657281647>]
junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)

22:11:36.982 [pool-163-thread-1] DEBUG tests.output - Failing tests with false: 
[testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest): 4,2 expected:<true> but was:<false>]
22:11:36.982 [pool-163-thread-1] DEBUG tests.output - Failing tests with true: 
[testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest): 48,22 expected:<27385657281648> but was:<27385657281647>]
22:11:36.982 [pool-163-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.MathUtils:134.
22:11:36.982 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #115
22:11:36.982 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.MathUtils:117 which is executed by 4 tests
-1550426518
22:11:37.139 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)
22:11:37.172 [pool-168-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (29 ms)
<> Total tests run: 43
<> Ignored tests: 0
<> Failed tests: 1
~ testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest)
[48,22 expected:<27385657281648> but was:<27385657281647>]
junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)

22:11:37.434 [pool-167-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
MathUtils.java:86: error: variable ret might not have been initialized
        return ret;
               ^
22:11:37.443 [pool-167-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public final class MathUtils {
    public static final double EPSILON = 1.1102230246251565E-16;

    public static final double SAFE_MIN = 2.2250738585072014E-308;

    private static final byte NB = ((byte) (-1));

    private static final short NS = ((short) (-1));

    private static final byte PB = ((byte) (1));

    private static final short PS = ((short) (1));

    private static final byte ZB = ((byte) (0));

    private static final short ZS = ((short) (0));

    private static final double TWO_PI = 2 * (java.lang.Math.PI);

    private MathUtils() {
        super();
    }

    public static int addAndCheck(int x, int y) {
        long s = ((long) (x)) + ((long) (y));
        if ((s < (java.lang.Integer.MIN_VALUE)) || (s > (java.lang.Integer.MAX_VALUE))) {
            throw new java.lang.ArithmeticException("overflow: add");
        }
        return ((int) (s));
    }

    public static long addAndCheck(long a, long b) {
        return org.apache.commons.math.util.MathUtils.addAndCheck(a, b, "overflow: add");
    }

    private static long addAndCheck(long a, long b, java.lang.String msg) {
        long ret;
        if (a > b) {
            ret = org.apache.commons.math.util.MathUtils.addAndCheck(b, a, msg);
        }else {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(15).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(15).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(15).collectInput("msg",msg);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(15).collectInput("org.apache.commons.math.util.MathUtils.PS",org.apache.commons.math.util.MathUtils.PS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(15).collectInput("a",a);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(15).collectInput("b",b);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(15).collectInput("org.apache.commons.math.util.MathUtils.factorials",org.apache.commons.math.util.MathUtils.factorials);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(15).collectInput("org.apache.commons.math.util.MathUtils.SAFE_MIN",org.apache.commons.math.util.MathUtils.SAFE_MIN);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(15).collectInput("org.apache.commons.math.util.MathUtils.ZB",org.apache.commons.math.util.MathUtils.ZB);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(15).collectInput("org.apache.commons.math.util.MathUtils.NS",org.apache.commons.math.util.MathUtils.NS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(15).collectInput("org.apache.commons.math.util.MathUtils.ZS",org.apache.commons.math.util.MathUtils.ZS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(15).collectInput("a < 0",a < 0);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(15).collectInput("org.apache.commons.math.util.MathUtils.TWO_PI",org.apache.commons.math.util.MathUtils.TWO_PI);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(15).collectInput("0",0);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(15).collectInput("org.apache.commons.math.util.MathUtils.NB",org.apache.commons.math.util.MathUtils.NB);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(15).collectInput("org.apache.commons.math.util.MathUtils.PB",org.apache.commons.math.util.MathUtils.PB);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(15).collectInput("org.apache.commons.math.util.MathUtils.EPSILON",org.apache.commons.math.util.MathUtils.EPSILON);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(15).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(15).collectionEnds();
            }
            if (runtimeAngelicValue) if (a < 0) {
                if (b < 0) {
                    if (((java.lang.Long.MIN_VALUE) - b) <= a) {
                        ret = a + b;
                    }else {
                        throw new java.lang.ArithmeticException(msg);
                    }
                }else {
                    ret = a + b;
                }
            }else {
                if (a <= ((java.lang.Long.MAX_VALUE) - b)) {
                    ret = a + b;
                }else {
                    throw new java.lang.ArithmeticException(msg);
                }
            }
        }
        return ret;
    }

    public static long binomialCoefficient(final int n, final int k) {
        if (n < k) {
            throw new java.lang.IllegalArgumentException("must have n >= k for binomial coefficient (n,k)");
        }
        if (n < 0) {
            throw new java.lang.IllegalArgumentException("must have n >= 0 for binomial coefficient (n,k)");
        }
        if ((n == k) || (k == 0)) {
            return 1;
        }
        if ((k == 1) || (k == (n - 1))) {
            return n;
        }
        long result = java.lang.Math.round(org.apache.commons.math.util.MathUtils.binomialCoefficientDouble(n, k));
        if (result == (java.lang.Long.MAX_VALUE)) {
            throw new java.lang.ArithmeticException("result too large to represent in a long integer");
        }
        return result;
    }

    public static double binomialCoefficientDouble(final int n, final int k) {
        return java.lang.Math.floor(((java.lang.Math.exp(org.apache.commons.math.util.MathUtils.binomialCoefficientLog(n, k))) + 0.5));
    }

    public static double binomialCoefficientLog(final int n, final int k) {
        if (n < k) {
            throw new java.lang.IllegalArgumentException("must have n >= k for binomial coefficient (n,k)");
        }
        if (n < 0) {
            throw new java.lang.IllegalArgumentException("must have n >= 0 for binomial coefficient (n,k)");
        }
        if ((n == k) || (k == 0)) {
            return 0;
        }
        if ((k == 1) || (k == (n - 1))) {
            return java.lang.Math.log(((double) (n)));
        }
        double logSum = 0;
        for (int i = k + 1; i <= n; i++) {
            logSum += java.lang.Math.log(((double) (i)));
        }
        for (int i = 2; i <= (n - k); i++) {
            logSum -= java.lang.Math.log(((double) (i)));
        }
        return logSum;
    }

    public static double cosh(double x) {
        return ((java.lang.Math.exp(x)) + (java.lang.Math.exp((-x)))) / 2.0;
    }

    public static boolean equals(double x, double y) {
        return ((java.lang.Double.isNaN(x)) && (java.lang.Double.isNaN(y))) || (x == y);
    }

    public static boolean equals(double[] x, double[] y) {
        if ((x == null) || (y == null)) {
            return !((x == null) ^ (y == null));
        }
        if ((x.length) != (y.length)) {
            return false;
        }
        for (int i = 0; i < (x.length); ++i) {
            if (!(org.apache.commons.math.util.MathUtils.equals(x[i], y[i]))) {
                return false;
            }
        }
        return true;
    }

    private static final long[] factorials = new long[]{ 1, 1, 2, 6, 24, 120, 720, 5040, 40320, 362880, 3628800, 39916800, 479001600, 6227020800L, 87178291200L, 1307674368000L, 20922789888000L, 355687428096000L, 6402373705728000L, 121645100408832000L, 2432902008176640000L };

    public static long factorial(final int n) {
        if (n < 0) {
            throw new java.lang.IllegalArgumentException("must have n >= 0 for n!");
        }
        if (n > 20) {
            throw new java.lang.ArithmeticException("factorial value is too large to fit in a long");
        }
        return org.apache.commons.math.util.MathUtils.factorials[n];
    }

    public static double factorialDouble(final int n) {
        if (n < 0) {
            throw new java.lang.IllegalArgumentException("must have n >= 0 for n!");
        }
        if (n < 21) {
            return org.apache.commons.math.util.MathUtils.factorial(n);
        }
        return java.lang.Math.floor(((java.lang.Math.exp(org.apache.commons.math.util.MathUtils.factorialLog(n))) + 0.5));
    }

    public static double factorialLog(final int n) {
        if (n < 0) {
            throw new java.lang.IllegalArgumentException("must have n > 0 for n!");
        }
        if (n < 21) {
            return java.lang.Math.log(org.apache.commons.math.util.MathUtils.factorial(n));
        }
        double logSum = 0;
        for (int i = 2; i <= n; i++) {
            logSum += java.lang.Math.log(((double) (i)));
        }
        return logSum;
    }

    public static int gcd(int u, int v) {
        if ((u == 0) || (v == 0)) {
            return (java.lang.Math.abs(u)) + (java.lang.Math.abs(v));
        }
        if (u > 0) {
            u = -u;
        }
        if (v > 0) {
            v = -v;
        }
        int k = 0;
        while ((((u & 1) == 0) && ((v & 1) == 0)) && (k < 31)) {
            u /= 2;
            v /= 2;
            k++;
        } 
        if (k == 31) {
            throw new java.lang.ArithmeticException("overflow: gcd is 2^31");
        }
        int t = ((u & 1) == 1) ? v : -(u / 2);
        do {
            while ((t & 1) == 0) {
                t /= 2;
            } 
            if (t > 0) {
                u = -t;
            }else {
                v = t;
            }
            t = (v - u) / 2;
        } while (t != 0 );
        return (-u) * (1 << k);
    }

    public static int hash(double value) {
        return new java.lang.Double(value).hashCode();
    }

    public static int hash(double[] value) {
        return java.util.Arrays.hashCode(value);
    }

    public static byte indicator(final byte x) {
        return x >= (org.apache.commons.math.util.MathUtils.ZB) ? org.apache.commons.math.util.MathUtils.PB : org.apache.commons.math.util.MathUtils.NB;
    }

    public static double indicator(final double x) {
        if (java.lang.Double.isNaN(x)) {
            return java.lang.Double.NaN;
        }
        return x >= 0.0 ? 1.0 : -1.0;
    }

    public static float indicator(final float x) {
        if (java.lang.Float.isNaN(x)) {
            return java.lang.Float.NaN;
        }
        return x >= 0.0F ? 1.0F : -1.0F;
    }

    public static int indicator(final int x) {
        return x >= 0 ? 1 : -1;
    }

    public static long indicator(final long x) {
        return x >= 0L ? 1L : -1L;
    }

    public static short indicator(final short x) {
        return x >= (org.apache.commons.math.util.MathUtils.ZS) ? org.apache.commons.math.util.MathUtils.PS : org.apache.commons.math.util.MathUtils.NS;
    }

    public static int lcm(int a, int b) {
        return java.lang.Math.abs(org.apache.commons.math.util.MathUtils.mulAndCheck((a / (org.apache.commons.math.util.MathUtils.gcd(a, b))), b));
    }

    public static double log(double base, double x) {
        return (java.lang.Math.log(x)) / (java.lang.Math.log(base));
    }

    public static int mulAndCheck(int x, int y) {
        long m = ((long) (x)) * ((long) (y));
        if ((m < (java.lang.Integer.MIN_VALUE)) || (m > (java.lang.Integer.MAX_VALUE))) {
            throw new java.lang.ArithmeticException("overflow: mul");
        }
        return ((int) (m));
    }

    public static long mulAndCheck(long a, long b) {
        long ret;
        java.lang.String msg = "overflow: multiply";
        if (a > b) {
            ret = org.apache.commons.math.util.MathUtils.mulAndCheck(b, a);
        }else {
            if (a < 0) {
                if (b < 0) {
                    if (a >= ((java.lang.Long.MAX_VALUE) / b)) {
                        ret = a * b;
                    }else {
                        throw new java.lang.ArithmeticException(msg);
                    }
                }else
                    if (b > 0) {
                        if (((java.lang.Long.MIN_VALUE) / b) <= a) {
                            ret = a * b;
                        }else {
                            throw new java.lang.ArithmeticException(msg);
                        }
                    }else {
                        ret = 0;
                    }

            }else
                if (a > 0) {
                    if (a <= ((java.lang.Long.MAX_VALUE) / b)) {
                        ret = a * b;
                    }else {
                        throw new java.lang.ArithmeticException(msg);
                    }
                }else {
                    ret = 0;
                }

        }
        return ret;
    }

    public static double nextAfter(double d, double direction) {
        if ((java.lang.Double.isNaN(d)) || (java.lang.Double.isInfinite(d))) {
            return d;
        }else
            if (d == 0) {
                return direction < 0 ? -(java.lang.Double.MIN_VALUE) : java.lang.Double.MIN_VALUE;
            }

        long bits = java.lang.Double.doubleToLongBits(d);
        long sign = bits & -9223372036854775808L;
        long exponent = bits & 9218868437227405312L;
        long mantissa = bits & 4503599627370495L;
        if ((d * (direction - d)) >= 0) {
            if (mantissa == 4503599627370495L) {
                return java.lang.Double.longBitsToDouble((sign | (exponent + 4503599627370496L)));
            }else {
                return java.lang.Double.longBitsToDouble(((sign | exponent) | (mantissa + 1)));
            }
        }else {
            if (mantissa == 0L) {
                return java.lang.Double.longBitsToDouble(((sign | (exponent - 4503599627370496L)) | 4503599627370495L));
            }else {
                return java.lang.Double.longBitsToDouble(((sign | exponent) | (mantissa - 1)));
            }
        }
    }

    public static double scalb(final double d, final int scaleFactor) {
        if (((d == 0) || (java.lang.Double.isNaN(d))) || (java.lang.Double.isInfinite(d))) {
            return d;
        }
        final long bits = java.lang.Double.doubleToLongBits(d);
        final long exponent = bits & 9218868437227405312L;
        final long rest = bits & -9218868437227405313L;
        final long newBits = rest | (exponent + (((long) (scaleFactor)) << 52));
        return java.lang.Double.longBitsToDouble(newBits);
    }

    public static double normalizeAngle(double a, double center) {
        return a - ((org.apache.commons.math.util.MathUtils.TWO_PI) * (java.lang.Math.floor((((a + (java.lang.Math.PI)) - center) / (org.apache.commons.math.util.MathUtils.TWO_PI)))));
    }

    public static double round(double x, int scale) {
        return org.apache.commons.math.util.MathUtils.round(x, scale, java.math.BigDecimal.ROUND_HALF_UP);
    }

    public static double round(double x, int scale, int roundingMethod) {
        try {
            return new java.math.BigDecimal(java.lang.Double.toString(x)).setScale(scale, roundingMethod).doubleValue();
        } catch (java.lang.NumberFormatException ex) {
            if (java.lang.Double.isInfinite(x)) {
                return x;
            }else {
                return java.lang.Double.NaN;
            }
        }
    }

    public static float round(float x, int scale) {
        return org.apache.commons.math.util.MathUtils.round(x, scale, java.math.BigDecimal.ROUND_HALF_UP);
    }

    public static float round(float x, int scale, int roundingMethod) {
        float sign = org.apache.commons.math.util.MathUtils.indicator(x);
        float factor = ((float) (java.lang.Math.pow(10.0F, scale))) * sign;
        return ((float) (org.apache.commons.math.util.MathUtils.roundUnscaled((x * factor), sign, roundingMethod))) / factor;
    }

    private static double roundUnscaled(double unscaled, double sign, int roundingMethod) {
        switch (roundingMethod) {
            case java.math.BigDecimal.ROUND_CEILING :
                if (sign == (-1)) {
                    unscaled = java.lang.Math.floor(org.apache.commons.math.util.MathUtils.nextAfter(unscaled, java.lang.Double.NEGATIVE_INFINITY));
                }else {
                    unscaled = java.lang.Math.ceil(org.apache.commons.math.util.MathUtils.nextAfter(unscaled, java.lang.Double.POSITIVE_INFINITY));
                }
                break;
            case java.math.BigDecimal.ROUND_DOWN :
                unscaled = java.lang.Math.floor(org.apache.commons.math.util.MathUtils.nextAfter(unscaled, java.lang.Double.NEGATIVE_INFINITY));
                break;
            case java.math.BigDecimal.ROUND_FLOOR :
                if (sign == (-1)) {
                    unscaled = java.lang.Math.ceil(org.apache.commons.math.util.MathUtils.nextAfter(unscaled, java.lang.Double.POSITIVE_INFINITY));
                }else {
                    unscaled = java.lang.Math.floor(org.apache.commons.math.util.MathUtils.nextAfter(unscaled, java.lang.Double.NEGATIVE_INFINITY));
                }
                break;
            case java.math.BigDecimal.ROUND_HALF_DOWN :
                {
                    unscaled = org.apache.commons.math.util.MathUtils.nextAfter(unscaled, java.lang.Double.NEGATIVE_INFINITY);
                    double fraction = unscaled - (java.lang.Math.floor(unscaled));
                    if (fraction > 0.5) {
                        unscaled = java.lang.Math.ceil(unscaled);
                    }else {
                        unscaled = java.lang.Math.floor(unscaled);
                    }
                    break;
                }
            case java.math.BigDecimal.ROUND_HALF_EVEN :
                {
                    double fraction = unscaled - (java.lang.Math.floor(unscaled));
                    if (fraction > 0.5) {
                        unscaled = java.lang.Math.ceil(unscaled);
                    }else
                        if (fraction < 0.5) {
                            unscaled = java.lang.Math.floor(unscaled);
                        }else {
                            if (((java.lang.Math.floor(unscaled)) / 2.0) == (java.lang.Math.floor(((java.lang.Math.floor(unscaled)) / 2.0)))) {
                                unscaled = java.lang.Math.floor(unscaled);
                            }else {
                                unscaled = java.lang.Math.ceil(unscaled);
                            }
                        }

                    break;
                }
            case java.math.BigDecimal.ROUND_HALF_UP :
                {
                    unscaled = org.apache.commons.math.util.MathUtils.nextAfter(unscaled, java.lang.Double.POSITIVE_INFINITY);
                    double fraction = unscaled - (java.lang.Math.floor(unscaled));
                    if (fraction >= 0.5) {
                        unscaled = java.lang.Math.ceil(unscaled);
                    }else {
                        unscaled = java.lang.Math.floor(unscaled);
                    }
                    break;
                }
            case java.math.BigDecimal.ROUND_UNNECESSARY :
                if (unscaled != (java.lang.Math.floor(unscaled))) {
                    throw new java.lang.ArithmeticException("Inexact result from rounding");
                }
                break;
            case java.math.BigDecimal.ROUND_UP :
                unscaled = java.lang.Math.ceil(org.apache.commons.math.util.MathUtils.nextAfter(unscaled, java.lang.Double.POSITIVE_INFINITY));
                break;
            default :
                throw new java.lang.IllegalArgumentException("Invalid rounding method.");
        }
        return unscaled;
    }

    public static byte sign(final byte x) {
        return x == (org.apache.commons.math.util.MathUtils.ZB) ? org.apache.commons.math.util.MathUtils.ZB : x > (org.apache.commons.math.util.MathUtils.ZB) ? org.apache.commons.math.util.MathUtils.PB : org.apache.commons.math.util.MathUtils.NB;
    }

    public static double sign(final double x) {
        if (java.lang.Double.isNaN(x)) {
            return java.lang.Double.NaN;
        }
        return x == 0.0 ? 0.0 : x > 0.0 ? 1.0 : -1.0;
    }

    public static float sign(final float x) {
        if (java.lang.Float.isNaN(x)) {
            return java.lang.Float.NaN;
        }
        return x == 0.0F ? 0.0F : x > 0.0F ? 1.0F : -1.0F;
    }

    public static int sign(final int x) {
        return x == 0 ? 0 : x > 0 ? 1 : -1;
    }

    public static long sign(final long x) {
        return x == 0L ? 0L : x > 0L ? 1L : -1L;
    }

    public static short sign(final short x) {
        return x == (org.apache.commons.math.util.MathUtils.ZS) ? org.apache.commons.math.util.MathUtils.ZS : x > (org.apache.commons.math.util.MathUtils.ZS) ? org.apache.commons.math.util.MathUtils.PS : org.apache.commons.math.util.MathUtils.NS;
    }

    public static double sinh(double x) {
        return ((java.lang.Math.exp(x)) - (java.lang.Math.exp((-x)))) / 2.0;
    }

    public static int subAndCheck(int x, int y) {
        long s = ((long) (x)) - ((long) (y));
        if ((s < (java.lang.Integer.MIN_VALUE)) || (s > (java.lang.Integer.MAX_VALUE))) {
            throw new java.lang.ArithmeticException("overflow: subtract");
        }
        return ((int) (s));
    }

    public static long subAndCheck(long a, long b) {
        long ret;
        java.lang.String msg = "overflow: subtract";
        if (b == (java.lang.Long.MIN_VALUE)) {
            if (a < 0) {
                ret = a - b;
            }else {
                throw new java.lang.ArithmeticException(msg);
            }
        }else {
            ret = org.apache.commons.math.util.MathUtils.addAndCheck(a, (-b), msg);
        }
        return ret;
    }
}
22:11:37.444 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
22:11:37.444 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)
22:11:37.481 [pool-170-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (31 ms)
<> Total tests run: 43
<> Ignored tests: 0
<> Failed tests: 1
~ testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest)
[48,22 expected:<27385657281648> but was:<27385657281647>]
junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)

junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)
22:11:37.764 [pool-171-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (25 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest)
[48,22 expected:<27385657281648> but was:<27385657281647>]
junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)

junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)
22:11:37.769 [pool-172-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (4 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest)
[48,22 expected:<27385657281648> but was:<27385657281647>]
junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)

22:11:37.770 [pool-169-thread-1] DEBUG tests.output - Failing tests with false: 
[testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest): 48,22 expected:<27385657281648> but was:<27385657281647>]
22:11:37.770 [pool-169-thread-1] DEBUG tests.output - Failing tests with true: 
[testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest): 48,22 expected:<27385657281648> but was:<27385657281647>]
22:11:37.770 [pool-169-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.MathUtils:117.
22:11:37.770 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #116
22:11:37.770 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.MathUtils:113 which is executed by 4 tests
-1550426518
22:11:37.954 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)
22:11:37.987 [pool-174-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (28 ms)
<> Total tests run: 43
<> Ignored tests: 0
<> Failed tests: 1
~ testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest)
[48,22 expected:<27385657281648> but was:<27385657281647>]
junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)

22:11:38.213 [pool-173-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
MathUtils.java:86: error: variable ret might not have been initialized
        return ret;
               ^
22:11:38.221 [pool-173-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public final class MathUtils {
    public static final double EPSILON = 1.1102230246251565E-16;

    public static final double SAFE_MIN = 2.2250738585072014E-308;

    private static final byte NB = ((byte) (-1));

    private static final short NS = ((short) (-1));

    private static final byte PB = ((byte) (1));

    private static final short PS = ((short) (1));

    private static final byte ZB = ((byte) (0));

    private static final short ZS = ((short) (0));

    private static final double TWO_PI = 2 * (java.lang.Math.PI);

    private MathUtils() {
        super();
    }

    public static int addAndCheck(int x, int y) {
        long s = ((long) (x)) + ((long) (y));
        if ((s < (java.lang.Integer.MIN_VALUE)) || (s > (java.lang.Integer.MAX_VALUE))) {
            throw new java.lang.ArithmeticException("overflow: add");
        }
        return ((int) (s));
    }

    public static long addAndCheck(long a, long b) {
        return org.apache.commons.math.util.MathUtils.addAndCheck(a, b, "overflow: add");
    }

    private static long addAndCheck(long a, long b, java.lang.String msg) {
        long ret;
        if (a > b) {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(17).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(17).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(17).collectInput("msg",msg);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(17).collectInput("org.apache.commons.math.util.MathUtils.PS",org.apache.commons.math.util.MathUtils.PS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(17).collectInput("a",a);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(17).collectInput("b",b);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(17).collectInput("org.apache.commons.math.util.MathUtils.factorials",org.apache.commons.math.util.MathUtils.factorials);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(17).collectInput("org.apache.commons.math.util.MathUtils.SAFE_MIN",org.apache.commons.math.util.MathUtils.SAFE_MIN);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(17).collectInput("org.apache.commons.math.util.MathUtils.ZB",org.apache.commons.math.util.MathUtils.ZB);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(17).collectInput("org.apache.commons.math.util.MathUtils.NS",org.apache.commons.math.util.MathUtils.NS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(17).collectInput("org.apache.commons.math.util.MathUtils.ZS",org.apache.commons.math.util.MathUtils.ZS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(17).collectInput("org.apache.commons.math.util.MathUtils.TWO_PI",org.apache.commons.math.util.MathUtils.TWO_PI);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(17).collectInput("org.apache.commons.math.util.MathUtils.NB",org.apache.commons.math.util.MathUtils.NB);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(17).collectInput("org.apache.commons.math.util.MathUtils.PB",org.apache.commons.math.util.MathUtils.PB);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(17).collectInput("org.apache.commons.math.util.MathUtils.EPSILON",org.apache.commons.math.util.MathUtils.EPSILON);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(17).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(17).collectionEnds();
            }
            if (runtimeAngelicValue)
                ret = org.apache.commons.math.util.MathUtils.addAndCheck(b, a, msg);

        }else {
            if (a < 0) {
                if (b < 0) {
                    if (((java.lang.Long.MIN_VALUE) - b) <= a) {
                        ret = a + b;
                    }else {
                        throw new java.lang.ArithmeticException(msg);
                    }
                }else {
                    ret = a + b;
                }
            }else {
                if (a <= ((java.lang.Long.MAX_VALUE) - b)) {
                    ret = a + b;
                }else {
                    throw new java.lang.ArithmeticException(msg);
                }
            }
        }
        return ret;
    }

    public static long binomialCoefficient(final int n, final int k) {
        if (n < k) {
            throw new java.lang.IllegalArgumentException("must have n >= k for binomial coefficient (n,k)");
        }
        if (n < 0) {
            throw new java.lang.IllegalArgumentException("must have n >= 0 for binomial coefficient (n,k)");
        }
        if ((n == k) || (k == 0)) {
            return 1;
        }
        if ((k == 1) || (k == (n - 1))) {
            return n;
        }
        long result = java.lang.Math.round(org.apache.commons.math.util.MathUtils.binomialCoefficientDouble(n, k));
        if (result == (java.lang.Long.MAX_VALUE)) {
            throw new java.lang.ArithmeticException("result too large to represent in a long integer");
        }
        return result;
    }

    public static double binomialCoefficientDouble(final int n, final int k) {
        return java.lang.Math.floor(((java.lang.Math.exp(org.apache.commons.math.util.MathUtils.binomialCoefficientLog(n, k))) + 0.5));
    }

    public static double binomialCoefficientLog(final int n, final int k) {
        if (n < k) {
            throw new java.lang.IllegalArgumentException("must have n >= k for binomial coefficient (n,k)");
        }
        if (n < 0) {
            throw new java.lang.IllegalArgumentException("must have n >= 0 for binomial coefficient (n,k)");
        }
        if ((n == k) || (k == 0)) {
            return 0;
        }
        if ((k == 1) || (k == (n - 1))) {
            return java.lang.Math.log(((double) (n)));
        }
        double logSum = 0;
        for (int i = k + 1; i <= n; i++) {
            logSum += java.lang.Math.log(((double) (i)));
        }
        for (int i = 2; i <= (n - k); i++) {
            logSum -= java.lang.Math.log(((double) (i)));
        }
        return logSum;
    }

    public static double cosh(double x) {
        return ((java.lang.Math.exp(x)) + (java.lang.Math.exp((-x)))) / 2.0;
    }

    public static boolean equals(double x, double y) {
        return ((java.lang.Double.isNaN(x)) && (java.lang.Double.isNaN(y))) || (x == y);
    }

    public static boolean equals(double[] x, double[] y) {
        if ((x == null) || (y == null)) {
            return !((x == null) ^ (y == null));
        }
        if ((x.length) != (y.length)) {
            return false;
        }
        for (int i = 0; i < (x.length); ++i) {
            if (!(org.apache.commons.math.util.MathUtils.equals(x[i], y[i]))) {
                return false;
            }
        }
        return true;
    }

    private static final long[] factorials = new long[]{ 1, 1, 2, 6, 24, 120, 720, 5040, 40320, 362880, 3628800, 39916800, 479001600, 6227020800L, 87178291200L, 1307674368000L, 20922789888000L, 355687428096000L, 6402373705728000L, 121645100408832000L, 2432902008176640000L };

    public static long factorial(final int n) {
        if (n < 0) {
            throw new java.lang.IllegalArgumentException("must have n >= 0 for n!");
        }
        if (n > 20) {
            throw new java.lang.ArithmeticException("factorial value is too large to fit in a long");
        }
        return org.apache.commons.math.util.MathUtils.factorials[n];
    }

    public static double factorialDouble(final int n) {
        if (n < 0) {
            throw new java.lang.IllegalArgumentException("must have n >= 0 for n!");
        }
        if (n < 21) {
            return org.apache.commons.math.util.MathUtils.factorial(n);
        }
        return java.lang.Math.floor(((java.lang.Math.exp(org.apache.commons.math.util.MathUtils.factorialLog(n))) + 0.5));
    }

    public static double factorialLog(final int n) {
        if (n < 0) {
            throw new java.lang.IllegalArgumentException("must have n > 0 for n!");
        }
        if (n < 21) {
            return java.lang.Math.log(org.apache.commons.math.util.MathUtils.factorial(n));
        }
        double logSum = 0;
        for (int i = 2; i <= n; i++) {
            logSum += java.lang.Math.log(((double) (i)));
        }
        return logSum;
    }

    public static int gcd(int u, int v) {
        if ((u == 0) || (v == 0)) {
            return (java.lang.Math.abs(u)) + (java.lang.Math.abs(v));
        }
        if (u > 0) {
            u = -u;
        }
        if (v > 0) {
            v = -v;
        }
        int k = 0;
        while ((((u & 1) == 0) && ((v & 1) == 0)) && (k < 31)) {
            u /= 2;
            v /= 2;
            k++;
        } 
        if (k == 31) {
            throw new java.lang.ArithmeticException("overflow: gcd is 2^31");
        }
        int t = ((u & 1) == 1) ? v : -(u / 2);
        do {
            while ((t & 1) == 0) {
                t /= 2;
            } 
            if (t > 0) {
                u = -t;
            }else {
                v = t;
            }
            t = (v - u) / 2;
        } while (t != 0 );
        return (-u) * (1 << k);
    }

    public static int hash(double value) {
        return new java.lang.Double(value).hashCode();
    }

    public static int hash(double[] value) {
        return java.util.Arrays.hashCode(value);
    }

    public static byte indicator(final byte x) {
        return x >= (org.apache.commons.math.util.MathUtils.ZB) ? org.apache.commons.math.util.MathUtils.PB : org.apache.commons.math.util.MathUtils.NB;
    }

    public static double indicator(final double x) {
        if (java.lang.Double.isNaN(x)) {
            return java.lang.Double.NaN;
        }
        return x >= 0.0 ? 1.0 : -1.0;
    }

    public static float indicator(final float x) {
        if (java.lang.Float.isNaN(x)) {
            return java.lang.Float.NaN;
        }
        return x >= 0.0F ? 1.0F : -1.0F;
    }

    public static int indicator(final int x) {
        return x >= 0 ? 1 : -1;
    }

    public static long indicator(final long x) {
        return x >= 0L ? 1L : -1L;
    }

    public static short indicator(final short x) {
        return x >= (org.apache.commons.math.util.MathUtils.ZS) ? org.apache.commons.math.util.MathUtils.PS : org.apache.commons.math.util.MathUtils.NS;
    }

    public static int lcm(int a, int b) {
        return java.lang.Math.abs(org.apache.commons.math.util.MathUtils.mulAndCheck((a / (org.apache.commons.math.util.MathUtils.gcd(a, b))), b));
    }

    public static double log(double base, double x) {
        return (java.lang.Math.log(x)) / (java.lang.Math.log(base));
    }

    public static int mulAndCheck(int x, int y) {
        long m = ((long) (x)) * ((long) (y));
        if ((m < (java.lang.Integer.MIN_VALUE)) || (m > (java.lang.Integer.MAX_VALUE))) {
            throw new java.lang.ArithmeticException("overflow: mul");
        }
        return ((int) (m));
    }

    public static long mulAndCheck(long a, long b) {
        long ret;
        java.lang.String msg = "overflow: multiply";
        if (a > b) {
            ret = org.apache.commons.math.util.MathUtils.mulAndCheck(b, a);
        }else {
            if (a < 0) {
                if (b < 0) {
                    if (a >= ((java.lang.Long.MAX_VALUE) / b)) {
                        ret = a * b;
                    }else {
                        throw new java.lang.ArithmeticException(msg);
                    }
                }else
                    if (b > 0) {
                        if (((java.lang.Long.MIN_VALUE) / b) <= a) {
                            ret = a * b;
                        }else {
                            throw new java.lang.ArithmeticException(msg);
                        }
                    }else {
                        ret = 0;
                    }

            }else
                if (a > 0) {
                    if (a <= ((java.lang.Long.MAX_VALUE) / b)) {
                        ret = a * b;
                    }else {
                        throw new java.lang.ArithmeticException(msg);
                    }
                }else {
                    ret = 0;
                }

        }
        return ret;
    }

    public static double nextAfter(double d, double direction) {
        if ((java.lang.Double.isNaN(d)) || (java.lang.Double.isInfinite(d))) {
            return d;
        }else
            if (d == 0) {
                return direction < 0 ? -(java.lang.Double.MIN_VALUE) : java.lang.Double.MIN_VALUE;
            }

        long bits = java.lang.Double.doubleToLongBits(d);
        long sign = bits & -9223372036854775808L;
        long exponent = bits & 9218868437227405312L;
        long mantissa = bits & 4503599627370495L;
        if ((d * (direction - d)) >= 0) {
            if (mantissa == 4503599627370495L) {
                return java.lang.Double.longBitsToDouble((sign | (exponent + 4503599627370496L)));
            }else {
                return java.lang.Double.longBitsToDouble(((sign | exponent) | (mantissa + 1)));
            }
        }else {
            if (mantissa == 0L) {
                return java.lang.Double.longBitsToDouble(((sign | (exponent - 4503599627370496L)) | 4503599627370495L));
            }else {
                return java.lang.Double.longBitsToDouble(((sign | exponent) | (mantissa - 1)));
            }
        }
    }

    public static double scalb(final double d, final int scaleFactor) {
        if (((d == 0) || (java.lang.Double.isNaN(d))) || (java.lang.Double.isInfinite(d))) {
            return d;
        }
        final long bits = java.lang.Double.doubleToLongBits(d);
        final long exponent = bits & 9218868437227405312L;
        final long rest = bits & -9218868437227405313L;
        final long newBits = rest | (exponent + (((long) (scaleFactor)) << 52));
        return java.lang.Double.longBitsToDouble(newBits);
    }

    public static double normalizeAngle(double a, double center) {
        return a - ((org.apache.commons.math.util.MathUtils.TWO_PI) * (java.lang.Math.floor((((a + (java.lang.Math.PI)) - center) / (org.apache.commons.math.util.MathUtils.TWO_PI)))));
    }

    public static double round(double x, int scale) {
        return org.apache.commons.math.util.MathUtils.round(x, scale, java.math.BigDecimal.ROUND_HALF_UP);
    }

    public static double round(double x, int scale, int roundingMethod) {
        try {
            return new java.math.BigDecimal(java.lang.Double.toString(x)).setScale(scale, roundingMethod).doubleValue();
        } catch (java.lang.NumberFormatException ex) {
            if (java.lang.Double.isInfinite(x)) {
                return x;
            }else {
                return java.lang.Double.NaN;
            }
        }
    }

    public static float round(float x, int scale) {
        return org.apache.commons.math.util.MathUtils.round(x, scale, java.math.BigDecimal.ROUND_HALF_UP);
    }

    public static float round(float x, int scale, int roundingMethod) {
        float sign = org.apache.commons.math.util.MathUtils.indicator(x);
        float factor = ((float) (java.lang.Math.pow(10.0F, scale))) * sign;
        return ((float) (org.apache.commons.math.util.MathUtils.roundUnscaled((x * factor), sign, roundingMethod))) / factor;
    }

    private static double roundUnscaled(double unscaled, double sign, int roundingMethod) {
        switch (roundingMethod) {
            case java.math.BigDecimal.ROUND_CEILING :
                if (sign == (-1)) {
                    unscaled = java.lang.Math.floor(org.apache.commons.math.util.MathUtils.nextAfter(unscaled, java.lang.Double.NEGATIVE_INFINITY));
                }else {
                    unscaled = java.lang.Math.ceil(org.apache.commons.math.util.MathUtils.nextAfter(unscaled, java.lang.Double.POSITIVE_INFINITY));
                }
                break;
            case java.math.BigDecimal.ROUND_DOWN :
                unscaled = java.lang.Math.floor(org.apache.commons.math.util.MathUtils.nextAfter(unscaled, java.lang.Double.NEGATIVE_INFINITY));
                break;
            case java.math.BigDecimal.ROUND_FLOOR :
                if (sign == (-1)) {
                    unscaled = java.lang.Math.ceil(org.apache.commons.math.util.MathUtils.nextAfter(unscaled, java.lang.Double.POSITIVE_INFINITY));
                }else {
                    unscaled = java.lang.Math.floor(org.apache.commons.math.util.MathUtils.nextAfter(unscaled, java.lang.Double.NEGATIVE_INFINITY));
                }
                break;
            case java.math.BigDecimal.ROUND_HALF_DOWN :
                {
                    unscaled = org.apache.commons.math.util.MathUtils.nextAfter(unscaled, java.lang.Double.NEGATIVE_INFINITY);
                    double fraction = unscaled - (java.lang.Math.floor(unscaled));
                    if (fraction > 0.5) {
                        unscaled = java.lang.Math.ceil(unscaled);
                    }else {
                        unscaled = java.lang.Math.floor(unscaled);
                    }
                    break;
                }
            case java.math.BigDecimal.ROUND_HALF_EVEN :
                {
                    double fraction = unscaled - (java.lang.Math.floor(unscaled));
                    if (fraction > 0.5) {
                        unscaled = java.lang.Math.ceil(unscaled);
                    }else
                        if (fraction < 0.5) {
                            unscaled = java.lang.Math.floor(unscaled);
                        }else {
                            if (((java.lang.Math.floor(unscaled)) / 2.0) == (java.lang.Math.floor(((java.lang.Math.floor(unscaled)) / 2.0)))) {
                                unscaled = java.lang.Math.floor(unscaled);
                            }else {
                                unscaled = java.lang.Math.ceil(unscaled);
                            }
                        }

                    break;
                }
            case java.math.BigDecimal.ROUND_HALF_UP :
                {
                    unscaled = org.apache.commons.math.util.MathUtils.nextAfter(unscaled, java.lang.Double.POSITIVE_INFINITY);
                    double fraction = unscaled - (java.lang.Math.floor(unscaled));
                    if (fraction >= 0.5) {
                        unscaled = java.lang.Math.ceil(unscaled);
                    }else {
                        unscaled = java.lang.Math.floor(unscaled);
                    }
                    break;
                }
            case java.math.BigDecimal.ROUND_UNNECESSARY :
                if (unscaled != (java.lang.Math.floor(unscaled))) {
                    throw new java.lang.ArithmeticException("Inexact result from rounding");
                }
                break;
            case java.math.BigDecimal.ROUND_UP :
                unscaled = java.lang.Math.ceil(org.apache.commons.math.util.MathUtils.nextAfter(unscaled, java.lang.Double.POSITIVE_INFINITY));
                break;
            default :
                throw new java.lang.IllegalArgumentException("Invalid rounding method.");
        }
        return unscaled;
    }

    public static byte sign(final byte x) {
        return x == (org.apache.commons.math.util.MathUtils.ZB) ? org.apache.commons.math.util.MathUtils.ZB : x > (org.apache.commons.math.util.MathUtils.ZB) ? org.apache.commons.math.util.MathUtils.PB : org.apache.commons.math.util.MathUtils.NB;
    }

    public static double sign(final double x) {
        if (java.lang.Double.isNaN(x)) {
            return java.lang.Double.NaN;
        }
        return x == 0.0 ? 0.0 : x > 0.0 ? 1.0 : -1.0;
    }

    public static float sign(final float x) {
        if (java.lang.Float.isNaN(x)) {
            return java.lang.Float.NaN;
        }
        return x == 0.0F ? 0.0F : x > 0.0F ? 1.0F : -1.0F;
    }

    public static int sign(final int x) {
        return x == 0 ? 0 : x > 0 ? 1 : -1;
    }

    public static long sign(final long x) {
        return x == 0L ? 0L : x > 0L ? 1L : -1L;
    }

    public static short sign(final short x) {
        return x == (org.apache.commons.math.util.MathUtils.ZS) ? org.apache.commons.math.util.MathUtils.ZS : x > (org.apache.commons.math.util.MathUtils.ZS) ? org.apache.commons.math.util.MathUtils.PS : org.apache.commons.math.util.MathUtils.NS;
    }

    public static double sinh(double x) {
        return ((java.lang.Math.exp(x)) - (java.lang.Math.exp((-x)))) / 2.0;
    }

    public static int subAndCheck(int x, int y) {
        long s = ((long) (x)) - ((long) (y));
        if ((s < (java.lang.Integer.MIN_VALUE)) || (s > (java.lang.Integer.MAX_VALUE))) {
            throw new java.lang.ArithmeticException("overflow: subtract");
        }
        return ((int) (s));
    }

    public static long subAndCheck(long a, long b) {
        long ret;
        java.lang.String msg = "overflow: subtract";
        if (b == (java.lang.Long.MIN_VALUE)) {
            if (a < 0) {
                ret = a - b;
            }else {
                throw new java.lang.ArithmeticException(msg);
            }
        }else {
            ret = org.apache.commons.math.util.MathUtils.addAndCheck(a, (-b), msg);
        }
        return ret;
    }
}
22:11:38.222 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
22:11:38.222 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #117
22:11:38.222 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.MathUtils:111 which is executed by 4 tests
-1550426518
22:11:38.373 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)
22:11:38.406 [pool-176-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (28 ms)
<> Total tests run: 43
<> Ignored tests: 0
<> Failed tests: 1
~ testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest)
[48,22 expected:<27385657281648> but was:<27385657281647>]
junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)

22:11:38.638 [pool-175-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
MathUtils.java:85: error: variable ret might not have been initialized
        return ret;
               ^
22:11:38.647 [pool-175-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public final class MathUtils {
    public static final double EPSILON = 1.1102230246251565E-16;

    public static final double SAFE_MIN = 2.2250738585072014E-308;

    private static final byte NB = ((byte) (-1));

    private static final short NS = ((short) (-1));

    private static final byte PB = ((byte) (1));

    private static final short PS = ((short) (1));

    private static final byte ZB = ((byte) (0));

    private static final short ZS = ((short) (0));

    private static final double TWO_PI = 2 * (java.lang.Math.PI);

    private MathUtils() {
        super();
    }

    public static int addAndCheck(int x, int y) {
        long s = ((long) (x)) + ((long) (y));
        if ((s < (java.lang.Integer.MIN_VALUE)) || (s > (java.lang.Integer.MAX_VALUE))) {
            throw new java.lang.ArithmeticException("overflow: add");
        }
        return ((int) (s));
    }

    public static long addAndCheck(long a, long b) {
        return org.apache.commons.math.util.MathUtils.addAndCheck(a, b, "overflow: add");
    }

    private static long addAndCheck(long a, long b, java.lang.String msg) {
        long ret;
        boolean spoonDefaultValue = false;
        try {
            spoonDefaultValue = true;
        } catch (java.lang.Exception __NopolProcessorException) {
        }
        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
        if (fr.inria.lille.commons.trace.RuntimeValues.instance(18).isEnabled()) {
            fr.inria.lille.commons.trace.RuntimeValues.instance(18).collectionStarts();
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(18).collectInput("msg",msg);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(18).collectInput("org.apache.commons.math.util.MathUtils.PS",org.apache.commons.math.util.MathUtils.PS);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(18).collectInput("a",a);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(18).collectInput("b",b);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(18).collectInput("org.apache.commons.math.util.MathUtils.factorials",org.apache.commons.math.util.MathUtils.factorials);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(18).collectInput("org.apache.commons.math.util.MathUtils.SAFE_MIN",org.apache.commons.math.util.MathUtils.SAFE_MIN);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(18).collectInput("org.apache.commons.math.util.MathUtils.ZB",org.apache.commons.math.util.MathUtils.ZB);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(18).collectInput("org.apache.commons.math.util.MathUtils.NS",org.apache.commons.math.util.MathUtils.NS);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(18).collectInput("a > b",a > b);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(18).collectInput("org.apache.commons.math.util.MathUtils.ZS",org.apache.commons.math.util.MathUtils.ZS);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(18).collectInput("org.apache.commons.math.util.MathUtils.TWO_PI",org.apache.commons.math.util.MathUtils.TWO_PI);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(18).collectInput("org.apache.commons.math.util.MathUtils.NB",org.apache.commons.math.util.MathUtils.NB);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(18).collectInput("org.apache.commons.math.util.MathUtils.PB",org.apache.commons.math.util.MathUtils.PB);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(18).collectInput("org.apache.commons.math.util.MathUtils.EPSILON",org.apache.commons.math.util.MathUtils.EPSILON);} catch (Exception ex1) {ex1.printStackTrace();};
            fr.inria.lille.commons.trace.RuntimeValues.instance(18).collectOutput(runtimeAngelicValue);
            fr.inria.lille.commons.trace.RuntimeValues.instance(18).collectionEnds();
        }
        if (runtimeAngelicValue) if (a > b) {
            ret = org.apache.commons.math.util.MathUtils.addAndCheck(b, a, msg);
        }else {
            if (a < 0) {
                if (b < 0) {
                    if (((java.lang.Long.MIN_VALUE) - b) <= a) {
                        ret = a + b;
                    }else {
                        throw new java.lang.ArithmeticException(msg);
                    }
                }else {
                    ret = a + b;
                }
            }else {
                if (a <= ((java.lang.Long.MAX_VALUE) - b)) {
                    ret = a + b;
                }else {
                    throw new java.lang.ArithmeticException(msg);
                }
            }
        }
        return ret;
    }

    public static long binomialCoefficient(final int n, final int k) {
        if (n < k) {
            throw new java.lang.IllegalArgumentException("must have n >= k for binomial coefficient (n,k)");
        }
        if (n < 0) {
            throw new java.lang.IllegalArgumentException("must have n >= 0 for binomial coefficient (n,k)");
        }
        if ((n == k) || (k == 0)) {
            return 1;
        }
        if ((k == 1) || (k == (n - 1))) {
            return n;
        }
        long result = java.lang.Math.round(org.apache.commons.math.util.MathUtils.binomialCoefficientDouble(n, k));
        if (result == (java.lang.Long.MAX_VALUE)) {
            throw new java.lang.ArithmeticException("result too large to represent in a long integer");
        }
        return result;
    }

    public static double binomialCoefficientDouble(final int n, final int k) {
        return java.lang.Math.floor(((java.lang.Math.exp(org.apache.commons.math.util.MathUtils.binomialCoefficientLog(n, k))) + 0.5));
    }

    public static double binomialCoefficientLog(final int n, final int k) {
        if (n < k) {
            throw new java.lang.IllegalArgumentException("must have n >= k for binomial coefficient (n,k)");
        }
        if (n < 0) {
            throw new java.lang.IllegalArgumentException("must have n >= 0 for binomial coefficient (n,k)");
        }
        if ((n == k) || (k == 0)) {
            return 0;
        }
        if ((k == 1) || (k == (n - 1))) {
            return java.lang.Math.log(((double) (n)));
        }
        double logSum = 0;
        for (int i = k + 1; i <= n; i++) {
            logSum += java.lang.Math.log(((double) (i)));
        }
        for (int i = 2; i <= (n - k); i++) {
            logSum -= java.lang.Math.log(((double) (i)));
        }
        return logSum;
    }

    public static double cosh(double x) {
        return ((java.lang.Math.exp(x)) + (java.lang.Math.exp((-x)))) / 2.0;
    }

    public static boolean equals(double x, double y) {
        return ((java.lang.Double.isNaN(x)) && (java.lang.Double.isNaN(y))) || (x == y);
    }

    public static boolean equals(double[] x, double[] y) {
        if ((x == null) || (y == null)) {
            return !((x == null) ^ (y == null));
        }
        if ((x.length) != (y.length)) {
            return false;
        }
        for (int i = 0; i < (x.length); ++i) {
            if (!(org.apache.commons.math.util.MathUtils.equals(x[i], y[i]))) {
                return false;
            }
        }
        return true;
    }

    private static final long[] factorials = new long[]{ 1, 1, 2, 6, 24, 120, 720, 5040, 40320, 362880, 3628800, 39916800, 479001600, 6227020800L, 87178291200L, 1307674368000L, 20922789888000L, 355687428096000L, 6402373705728000L, 121645100408832000L, 2432902008176640000L };

    public static long factorial(final int n) {
        if (n < 0) {
            throw new java.lang.IllegalArgumentException("must have n >= 0 for n!");
        }
        if (n > 20) {
            throw new java.lang.ArithmeticException("factorial value is too large to fit in a long");
        }
        return org.apache.commons.math.util.MathUtils.factorials[n];
    }

    public static double factorialDouble(final int n) {
        if (n < 0) {
            throw new java.lang.IllegalArgumentException("must have n >= 0 for n!");
        }
        if (n < 21) {
            return org.apache.commons.math.util.MathUtils.factorial(n);
        }
        return java.lang.Math.floor(((java.lang.Math.exp(org.apache.commons.math.util.MathUtils.factorialLog(n))) + 0.5));
    }

    public static double factorialLog(final int n) {
        if (n < 0) {
            throw new java.lang.IllegalArgumentException("must have n > 0 for n!");
        }
        if (n < 21) {
            return java.lang.Math.log(org.apache.commons.math.util.MathUtils.factorial(n));
        }
        double logSum = 0;
        for (int i = 2; i <= n; i++) {
            logSum += java.lang.Math.log(((double) (i)));
        }
        return logSum;
    }

    public static int gcd(int u, int v) {
        if ((u == 0) || (v == 0)) {
            return (java.lang.Math.abs(u)) + (java.lang.Math.abs(v));
        }
        if (u > 0) {
            u = -u;
        }
        if (v > 0) {
            v = -v;
        }
        int k = 0;
        while ((((u & 1) == 0) && ((v & 1) == 0)) && (k < 31)) {
            u /= 2;
            v /= 2;
            k++;
        } 
        if (k == 31) {
            throw new java.lang.ArithmeticException("overflow: gcd is 2^31");
        }
        int t = ((u & 1) == 1) ? v : -(u / 2);
        do {
            while ((t & 1) == 0) {
                t /= 2;
            } 
            if (t > 0) {
                u = -t;
            }else {
                v = t;
            }
            t = (v - u) / 2;
        } while (t != 0 );
        return (-u) * (1 << k);
    }

    public static int hash(double value) {
        return new java.lang.Double(value).hashCode();
    }

    public static int hash(double[] value) {
        return java.util.Arrays.hashCode(value);
    }

    public static byte indicator(final byte x) {
        return x >= (org.apache.commons.math.util.MathUtils.ZB) ? org.apache.commons.math.util.MathUtils.PB : org.apache.commons.math.util.MathUtils.NB;
    }

    public static double indicator(final double x) {
        if (java.lang.Double.isNaN(x)) {
            return java.lang.Double.NaN;
        }
        return x >= 0.0 ? 1.0 : -1.0;
    }

    public static float indicator(final float x) {
        if (java.lang.Float.isNaN(x)) {
            return java.lang.Float.NaN;
        }
        return x >= 0.0F ? 1.0F : -1.0F;
    }

    public static int indicator(final int x) {
        return x >= 0 ? 1 : -1;
    }

    public static long indicator(final long x) {
        return x >= 0L ? 1L : -1L;
    }

    public static short indicator(final short x) {
        return x >= (org.apache.commons.math.util.MathUtils.ZS) ? org.apache.commons.math.util.MathUtils.PS : org.apache.commons.math.util.MathUtils.NS;
    }

    public static int lcm(int a, int b) {
        return java.lang.Math.abs(org.apache.commons.math.util.MathUtils.mulAndCheck((a / (org.apache.commons.math.util.MathUtils.gcd(a, b))), b));
    }

    public static double log(double base, double x) {
        return (java.lang.Math.log(x)) / (java.lang.Math.log(base));
    }

    public static int mulAndCheck(int x, int y) {
        long m = ((long) (x)) * ((long) (y));
        if ((m < (java.lang.Integer.MIN_VALUE)) || (m > (java.lang.Integer.MAX_VALUE))) {
            throw new java.lang.ArithmeticException("overflow: mul");
        }
        return ((int) (m));
    }

    public static long mulAndCheck(long a, long b) {
        long ret;
        java.lang.String msg = "overflow: multiply";
        if (a > b) {
            ret = org.apache.commons.math.util.MathUtils.mulAndCheck(b, a);
        }else {
            if (a < 0) {
                if (b < 0) {
                    if (a >= ((java.lang.Long.MAX_VALUE) / b)) {
                        ret = a * b;
                    }else {
                        throw new java.lang.ArithmeticException(msg);
                    }
                }else
                    if (b > 0) {
                        if (((java.lang.Long.MIN_VALUE) / b) <= a) {
                            ret = a * b;
                        }else {
                            throw new java.lang.ArithmeticException(msg);
                        }
                    }else {
                        ret = 0;
                    }

            }else
                if (a > 0) {
                    if (a <= ((java.lang.Long.MAX_VALUE) / b)) {
                        ret = a * b;
                    }else {
                        throw new java.lang.ArithmeticException(msg);
                    }
                }else {
                    ret = 0;
                }

        }
        return ret;
    }

    public static double nextAfter(double d, double direction) {
        if ((java.lang.Double.isNaN(d)) || (java.lang.Double.isInfinite(d))) {
            return d;
        }else
            if (d == 0) {
                return direction < 0 ? -(java.lang.Double.MIN_VALUE) : java.lang.Double.MIN_VALUE;
            }

        long bits = java.lang.Double.doubleToLongBits(d);
        long sign = bits & -9223372036854775808L;
        long exponent = bits & 9218868437227405312L;
        long mantissa = bits & 4503599627370495L;
        if ((d * (direction - d)) >= 0) {
            if (mantissa == 4503599627370495L) {
                return java.lang.Double.longBitsToDouble((sign | (exponent + 4503599627370496L)));
            }else {
                return java.lang.Double.longBitsToDouble(((sign | exponent) | (mantissa + 1)));
            }
        }else {
            if (mantissa == 0L) {
                return java.lang.Double.longBitsToDouble(((sign | (exponent - 4503599627370496L)) | 4503599627370495L));
            }else {
                return java.lang.Double.longBitsToDouble(((sign | exponent) | (mantissa - 1)));
            }
        }
    }

    public static double scalb(final double d, final int scaleFactor) {
        if (((d == 0) || (java.lang.Double.isNaN(d))) || (java.lang.Double.isInfinite(d))) {
            return d;
        }
        final long bits = java.lang.Double.doubleToLongBits(d);
        final long exponent = bits & 9218868437227405312L;
        final long rest = bits & -9218868437227405313L;
        final long newBits = rest | (exponent + (((long) (scaleFactor)) << 52));
        return java.lang.Double.longBitsToDouble(newBits);
    }

    public static double normalizeAngle(double a, double center) {
        return a - ((org.apache.commons.math.util.MathUtils.TWO_PI) * (java.lang.Math.floor((((a + (java.lang.Math.PI)) - center) / (org.apache.commons.math.util.MathUtils.TWO_PI)))));
    }

    public static double round(double x, int scale) {
        return org.apache.commons.math.util.MathUtils.round(x, scale, java.math.BigDecimal.ROUND_HALF_UP);
    }

    public static double round(double x, int scale, int roundingMethod) {
        try {
            return new java.math.BigDecimal(java.lang.Double.toString(x)).setScale(scale, roundingMethod).doubleValue();
        } catch (java.lang.NumberFormatException ex) {
            if (java.lang.Double.isInfinite(x)) {
                return x;
            }else {
                return java.lang.Double.NaN;
            }
        }
    }

    public static float round(float x, int scale) {
        return org.apache.commons.math.util.MathUtils.round(x, scale, java.math.BigDecimal.ROUND_HALF_UP);
    }

    public static float round(float x, int scale, int roundingMethod) {
        float sign = org.apache.commons.math.util.MathUtils.indicator(x);
        float factor = ((float) (java.lang.Math.pow(10.0F, scale))) * sign;
        return ((float) (org.apache.commons.math.util.MathUtils.roundUnscaled((x * factor), sign, roundingMethod))) / factor;
    }

    private static double roundUnscaled(double unscaled, double sign, int roundingMethod) {
        switch (roundingMethod) {
            case java.math.BigDecimal.ROUND_CEILING :
                if (sign == (-1)) {
                    unscaled = java.lang.Math.floor(org.apache.commons.math.util.MathUtils.nextAfter(unscaled, java.lang.Double.NEGATIVE_INFINITY));
                }else {
                    unscaled = java.lang.Math.ceil(org.apache.commons.math.util.MathUtils.nextAfter(unscaled, java.lang.Double.POSITIVE_INFINITY));
                }
                break;
            case java.math.BigDecimal.ROUND_DOWN :
                unscaled = java.lang.Math.floor(org.apache.commons.math.util.MathUtils.nextAfter(unscaled, java.lang.Double.NEGATIVE_INFINITY));
                break;
            case java.math.BigDecimal.ROUND_FLOOR :
                if (sign == (-1)) {
                    unscaled = java.lang.Math.ceil(org.apache.commons.math.util.MathUtils.nextAfter(unscaled, java.lang.Double.POSITIVE_INFINITY));
                }else {
                    unscaled = java.lang.Math.floor(org.apache.commons.math.util.MathUtils.nextAfter(unscaled, java.lang.Double.NEGATIVE_INFINITY));
                }
                break;
            case java.math.BigDecimal.ROUND_HALF_DOWN :
                {
                    unscaled = org.apache.commons.math.util.MathUtils.nextAfter(unscaled, java.lang.Double.NEGATIVE_INFINITY);
                    double fraction = unscaled - (java.lang.Math.floor(unscaled));
                    if (fraction > 0.5) {
                        unscaled = java.lang.Math.ceil(unscaled);
                    }else {
                        unscaled = java.lang.Math.floor(unscaled);
                    }
                    break;
                }
            case java.math.BigDecimal.ROUND_HALF_EVEN :
                {
                    double fraction = unscaled - (java.lang.Math.floor(unscaled));
                    if (fraction > 0.5) {
                        unscaled = java.lang.Math.ceil(unscaled);
                    }else
                        if (fraction < 0.5) {
                            unscaled = java.lang.Math.floor(unscaled);
                        }else {
                            if (((java.lang.Math.floor(unscaled)) / 2.0) == (java.lang.Math.floor(((java.lang.Math.floor(unscaled)) / 2.0)))) {
                                unscaled = java.lang.Math.floor(unscaled);
                            }else {
                                unscaled = java.lang.Math.ceil(unscaled);
                            }
                        }

                    break;
                }
            case java.math.BigDecimal.ROUND_HALF_UP :
                {
                    unscaled = org.apache.commons.math.util.MathUtils.nextAfter(unscaled, java.lang.Double.POSITIVE_INFINITY);
                    double fraction = unscaled - (java.lang.Math.floor(unscaled));
                    if (fraction >= 0.5) {
                        unscaled = java.lang.Math.ceil(unscaled);
                    }else {
                        unscaled = java.lang.Math.floor(unscaled);
                    }
                    break;
                }
            case java.math.BigDecimal.ROUND_UNNECESSARY :
                if (unscaled != (java.lang.Math.floor(unscaled))) {
                    throw new java.lang.ArithmeticException("Inexact result from rounding");
                }
                break;
            case java.math.BigDecimal.ROUND_UP :
                unscaled = java.lang.Math.ceil(org.apache.commons.math.util.MathUtils.nextAfter(unscaled, java.lang.Double.POSITIVE_INFINITY));
                break;
            default :
                throw new java.lang.IllegalArgumentException("Invalid rounding method.");
        }
        return unscaled;
    }

    public static byte sign(final byte x) {
        return x == (org.apache.commons.math.util.MathUtils.ZB) ? org.apache.commons.math.util.MathUtils.ZB : x > (org.apache.commons.math.util.MathUtils.ZB) ? org.apache.commons.math.util.MathUtils.PB : org.apache.commons.math.util.MathUtils.NB;
    }

    public static double sign(final double x) {
        if (java.lang.Double.isNaN(x)) {
            return java.lang.Double.NaN;
        }
        return x == 0.0 ? 0.0 : x > 0.0 ? 1.0 : -1.0;
    }

    public static float sign(final float x) {
        if (java.lang.Float.isNaN(x)) {
            return java.lang.Float.NaN;
        }
        return x == 0.0F ? 0.0F : x > 0.0F ? 1.0F : -1.0F;
    }

    public static int sign(final int x) {
        return x == 0 ? 0 : x > 0 ? 1 : -1;
    }

    public static long sign(final long x) {
        return x == 0L ? 0L : x > 0L ? 1L : -1L;
    }

    public static short sign(final short x) {
        return x == (org.apache.commons.math.util.MathUtils.ZS) ? org.apache.commons.math.util.MathUtils.ZS : x > (org.apache.commons.math.util.MathUtils.ZS) ? org.apache.commons.math.util.MathUtils.PS : org.apache.commons.math.util.MathUtils.NS;
    }

    public static double sinh(double x) {
        return ((java.lang.Math.exp(x)) - (java.lang.Math.exp((-x)))) / 2.0;
    }

    public static int subAndCheck(int x, int y) {
        long s = ((long) (x)) - ((long) (y));
        if ((s < (java.lang.Integer.MIN_VALUE)) || (s > (java.lang.Integer.MAX_VALUE))) {
            throw new java.lang.ArithmeticException("overflow: subtract");
        }
        return ((int) (s));
    }

    public static long subAndCheck(long a, long b) {
        long ret;
        java.lang.String msg = "overflow: subtract";
        if (b == (java.lang.Long.MIN_VALUE)) {
            if (a < 0) {
                ret = a - b;
            }else {
                throw new java.lang.ArithmeticException(msg);
            }
        }else {
            ret = org.apache.commons.math.util.MathUtils.addAndCheck(a, (-b), msg);
        }
        return ret;
    }
}
22:11:38.647 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
22:11:38.647 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)
22:11:38.681 [pool-178-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (29 ms)
<> Total tests run: 43
<> Ignored tests: 0
<> Failed tests: 1
~ testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest)
[48,22 expected:<27385657281648> but was:<27385657281647>]
junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)

junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)
22:11:38.943 [pool-179-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (23 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest)
[48,22 expected:<27385657281648> but was:<27385657281647>]
junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)

junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)
22:11:38.948 [pool-180-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (4 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest)
[48,22 expected:<27385657281648> but was:<27385657281647>]
junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)

22:11:38.949 [pool-177-thread-1] DEBUG tests.output - Failing tests with false: 
[testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest): 48,22 expected:<27385657281648> but was:<27385657281647>]
22:11:38.949 [pool-177-thread-1] DEBUG tests.output - Failing tests with true: 
[testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest): 48,22 expected:<27385657281648> but was:<27385657281647>]
22:11:38.949 [pool-177-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.MathUtils:111.
22:11:38.949 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #118
22:11:38.950 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.linear.MatrixUtils:61 which is executed by 69 tests
1308483921
22:11:39.092 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #119
22:11:39.092 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.linear.DenseRealMatrix:246 which is executed by 107 tests
-1626805409
22:11:39.276 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #120
22:11:39.276 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.linear.DenseRealMatrix:240 which is executed by 107 tests
-1626805409
22:11:39.459 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
22:11:39.494 [pool-182-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (29 ms)
<> Total tests run: 31
<> Ignored tests: 0
<> Failed tests: 0

22:11:39.494 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
22:11:39.494 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #121
22:11:39.494 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.linear.DenseRealMatrix:239 which is executed by 107 tests
-1626805409
22:11:39.675 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
22:11:39.706 [pool-184-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (25 ms)
<> Total tests run: 31
<> Ignored tests: 0
<> Failed tests: 0

22:11:39.707 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
22:11:39.707 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #122
22:11:39.707 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.linear.DenseRealMatrix:236 which is executed by 107 tests
-1626805409
22:11:39.887 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
22:11:39.919 [pool-186-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (25 ms)
<> Total tests run: 31
<> Ignored tests: 0
<> Failed tests: 0

22:11:39.920 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
22:11:39.920 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #123
22:11:39.920 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.linear.DenseRealMatrix:235 which is executed by 107 tests
-1626805409
22:11:40.100 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #124
22:11:40.100 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.linear.DenseRealMatrix:232 which is executed by 107 tests
-1626805409
22:11:40.280 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #125
22:11:40.280 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.linear.DenseRealMatrix:231 which is executed by 107 tests
-1626805409
22:11:40.465 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #126
22:11:40.465 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.linear.DenseRealMatrix:230 which is executed by 107 tests
-1626805409
22:11:40.643 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #127
22:11:40.644 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.linear.DenseRealMatrix:229 which is executed by 107 tests
-1626805409
22:11:40.825 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
22:11:40.858 [pool-188-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (26 ms)
<> Total tests run: 31
<> Ignored tests: 0
<> Failed tests: 0

22:11:40.858 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
22:11:40.858 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #128
22:11:40.858 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.linear.DenseRealMatrix:228 which is executed by 107 tests
-1626805409
22:11:41.036 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #129
22:11:41.036 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.linear.DenseRealMatrix:227 which is executed by 107 tests
-1626805409
22:11:41.214 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #130
22:11:41.215 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.linear.DenseRealMatrix:226 which is executed by 107 tests
-1626805409
22:11:41.392 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #131
22:11:41.392 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.linear.DenseRealMatrix:225 which is executed by 107 tests
-1626805409
22:11:41.571 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
22:11:41.605 [pool-190-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (28 ms)
<> Total tests run: 31
<> Ignored tests: 0
<> Failed tests: 0

22:11:41.605 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
22:11:41.605 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #132
22:11:41.605 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.linear.DenseRealMatrix:224 which is executed by 107 tests
-1626805409
22:11:41.820 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #133
22:11:41.820 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.linear.DenseRealMatrix:216 which is executed by 107 tests
-1626805409
22:11:42.042 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
22:11:42.076 [pool-192-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (27 ms)
<> Total tests run: 31
<> Ignored tests: 0
<> Failed tests: 0

22:11:42.076 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
22:11:42.076 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
22:11:42.109 [pool-194-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (26 ms)
<> Total tests run: 31
<> Ignored tests: 0
<> Failed tests: 0

22:11:42.110 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
22:11:42.110 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #134
22:11:42.110 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.linear.DenseRealMatrix:215 which is executed by 107 tests
-1626805409
22:11:42.332 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #135
22:11:42.332 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.linear.DenseRealMatrix:214 which is executed by 107 tests
-1626805409
22:11:42.554 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
22:11:42.642 [pool-196-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (26 ms)
<> Total tests run: 31
<> Ignored tests: 0
<> Failed tests: 0

22:11:42.642 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
22:11:42.643 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #136
22:11:42.643 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.linear.DenseRealMatrix:211 which is executed by 107 tests
-1626805409
22:11:42.821 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #137
22:11:42.821 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.linear.DenseRealMatrix:210 which is executed by 107 tests
-1626805409
22:11:42.997 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #138
22:11:42.997 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.linear.DenseRealMatrix:209 which is executed by 107 tests
-1626805409
22:11:43.173 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #139
22:11:43.173 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.linear.DenseRealMatrix:208 which is executed by 107 tests
-1626805409
22:11:43.351 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #140
22:11:43.351 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.linear.DenseRealMatrix:1609 which is executed by 124 tests
-1626805409
22:11:43.543 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #141
22:11:43.543 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.MathUtils:236 which is executed by 10 tests
-1550426518
22:11:43.690 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #142
22:11:43.691 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.linear.DenseRealMatrix:1618 which is executed by 161 tests
-1626805409
22:11:43.881 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #143
22:11:43.881 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.MathUtils:298 which is executed by 16 tests
-1550426518
22:11:44.027 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #144
22:11:44.027 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.MathUtils:295 which is executed by 16 tests
-1550426518
22:11:44.173 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)
22:11:44.205 [pool-198-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (28 ms)
<> Total tests run: 43
<> Ignored tests: 0
<> Failed tests: 1
~ testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest)
[48,22 expected:<27385657281648> but was:<27385657281647>]
junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)

junit.framework.AssertionFailedError: 4,2 expected:<6> but was:<12>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)
22:11:44.418 [pool-199-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest)
[4,2 expected:<6> but was:<12>]
junit.framework.AssertionFailedError: 4,2 expected:<6> but was:<12>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)

junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)
22:11:44.581 [pool-200-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (162 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest)
[48,22 expected:<27385657281648> but was:<27385657281647>]
junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)

22:11:44.582 [pool-197-thread-1] DEBUG tests.output - Failing tests with false: 
[testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest): 4,2 expected:<6> but was:<12>]
22:11:44.582 [pool-197-thread-1] DEBUG tests.output - Failing tests with true: 
[testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest): 48,22 expected:<27385657281648> but was:<27385657281647>]
22:11:44.582 [pool-197-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.MathUtils:295.
22:11:44.583 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #145
22:11:44.583 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.MathUtils:294 which is executed by 16 tests
-1550426518
22:11:44.730 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)
22:11:44.765 [pool-202-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (30 ms)
<> Total tests run: 43
<> Ignored tests: 0
<> Failed tests: 1
~ testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest)
[48,22 expected:<27385657281648> but was:<27385657281647>]
junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)

junit.framework.AssertionFailedError: 4,2 expected:<6> but was:<12>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)
22:11:44.978 [pool-203-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest)
[4,2 expected:<6> but was:<12>]
junit.framework.AssertionFailedError: 4,2 expected:<6> but was:<12>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)

junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)
22:11:44.999 [pool-204-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (20 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest)
[48,22 expected:<27385657281648> but was:<27385657281647>]
junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)

22:11:45.000 [pool-201-thread-1] DEBUG tests.output - Failing tests with false: 
[testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest): 4,2 expected:<6> but was:<12>]
22:11:45.001 [pool-201-thread-1] DEBUG tests.output - Failing tests with true: 
[testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest): 48,22 expected:<27385657281648> but was:<27385657281647>]
22:11:45.001 [pool-201-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.MathUtils:294.
22:11:45.001 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #146
22:11:45.001 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.MathUtils:290 which is executed by 16 tests
-1550426518
22:11:45.148 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)
22:11:45.180 [pool-206-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (27 ms)
<> Total tests run: 43
<> Ignored tests: 0
<> Failed tests: 1
~ testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest)
[48,22 expected:<27385657281648> but was:<27385657281647>]
junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)

junit.framework.AssertionFailedError: 4,2 expected:<6> but was:<1>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)
22:11:45.396 [pool-207-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (3 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest)
[4,2 expected:<6> but was:<1>]
junit.framework.AssertionFailedError: 4,2 expected:<6> but was:<1>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)

junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)
22:11:45.569 [pool-208-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (172 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest)
[48,22 expected:<27385657281648> but was:<27385657281647>]
junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)

22:11:45.569 [pool-205-thread-1] DEBUG tests.output - Failing tests with false: 
[testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest): 4,2 expected:<6> but was:<1>]
22:11:45.588 [pool-205-thread-1] DEBUG tests.output - Failing tests with true: 
[testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest): 48,22 expected:<27385657281648> but was:<27385657281647>]
22:11:45.588 [pool-205-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.MathUtils:290.
22:11:45.588 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #147
22:11:45.588 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.MathUtils:289 which is executed by 16 tests
-1550426518
22:11:45.734 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)
22:11:45.767 [pool-210-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (27 ms)
<> Total tests run: 43
<> Ignored tests: 0
<> Failed tests: 1
~ testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest)
[48,22 expected:<27385657281648> but was:<27385657281647>]
junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)

junit.framework.AssertionFailedError: 4,2 expected:<6> but was:<1>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)
22:11:45.979 [pool-211-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest)
[4,2 expected:<6> but was:<1>]
junit.framework.AssertionFailedError: 4,2 expected:<6> but was:<1>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)

junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)
22:11:46.001 [pool-212-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (20 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest)
[48,22 expected:<27385657281648> but was:<27385657281647>]
junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)

22:11:46.002 [pool-209-thread-1] DEBUG tests.output - Failing tests with false: 
[testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest): 4,2 expected:<6> but was:<1>]
22:11:46.002 [pool-209-thread-1] DEBUG tests.output - Failing tests with true: 
[testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest): 48,22 expected:<27385657281648> but was:<27385657281647>]
22:11:46.002 [pool-209-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.MathUtils:289.
22:11:46.002 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #148
22:11:46.002 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.MathUtils:286 which is executed by 16 tests
-1550426518
22:11:46.149 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #149
22:11:46.149 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.MathUtils:269 which is executed by 17 tests
-1550426518
22:11:46.295 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)
22:11:46.327 [pool-214-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (27 ms)
<> Total tests run: 43
<> Ignored tests: 0
<> Failed tests: 1
~ testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest)
[48,22 expected:<27385657281648> but was:<27385657281647>]
junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)

junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)
22:11:46.561 [pool-215-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (24 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest)
[48,22 expected:<27385657281648> but was:<27385657281647>]
junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)

junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)
22:11:46.582 [pool-216-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (19 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest)
[48,22 expected:<27385657281648> but was:<27385657281647>]
junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)

22:11:46.583 [pool-213-thread-1] DEBUG tests.output - Failing tests with false: 
[testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest): 48,22 expected:<27385657281648> but was:<27385657281647>]
22:11:46.583 [pool-213-thread-1] DEBUG tests.output - Failing tests with true: 
[testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest): 48,22 expected:<27385657281648> but was:<27385657281647>]
22:11:46.583 [pool-213-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.MathUtils:269.
22:11:46.583 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)
22:11:46.616 [pool-218-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (29 ms)
<> Total tests run: 43
<> Ignored tests: 0
<> Failed tests: 1
~ testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest)
[48,22 expected:<27385657281648> but was:<27385657281647>]
junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)

junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)
22:11:46.873 [pool-219-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (26 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest)
[48,22 expected:<27385657281648> but was:<27385657281647>]
junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)

junit.framework.AssertionFailedError: 4,2 expected:<6> but was:<4>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)
22:11:46.876 [pool-220-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest)
[4,2 expected:<6> but was:<4>]
junit.framework.AssertionFailedError: 4,2 expected:<6> but was:<4>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)

22:11:46.876 [pool-217-thread-1] DEBUG tests.output - Failing tests with false: 
[testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest): 48,22 expected:<27385657281648> but was:<27385657281647>]
22:11:46.876 [pool-217-thread-1] DEBUG tests.output - Failing tests with true: 
[testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest): 4,2 expected:<6> but was:<4>]
22:11:46.876 [pool-217-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.MathUtils:269.
22:11:46.876 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #150
22:11:46.877 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.MathUtils:266 which is executed by 19 tests
-1550426518
22:11:47.025 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)
22:11:47.058 [pool-222-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (29 ms)
<> Total tests run: 43
<> Ignored tests: 0
<> Failed tests: 1
~ testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest)
[48,22 expected:<27385657281648> but was:<27385657281647>]
junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)

junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)
22:11:47.380 [pool-223-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (22 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest)
[48,22 expected:<27385657281648> but was:<27385657281647>]
junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)

junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)
22:11:47.400 [pool-224-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (18 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest)
[48,22 expected:<27385657281648> but was:<27385657281647>]
junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)

22:11:47.400 [pool-221-thread-1] DEBUG tests.output - Failing tests with false: 
[testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest): 48,22 expected:<27385657281648> but was:<27385657281647>]
22:11:47.400 [pool-221-thread-1] DEBUG tests.output - Failing tests with true: 
[testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest): 48,22 expected:<27385657281648> but was:<27385657281647>]
22:11:47.400 [pool-221-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.MathUtils:266.
22:11:47.401 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)
22:11:47.433 [pool-226-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (28 ms)
<> Total tests run: 43
<> Ignored tests: 0
<> Failed tests: 1
~ testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest)
[48,22 expected:<27385657281648> but was:<27385657281647>]
junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)

junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)
22:11:47.686 [pool-227-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (45 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest)
[48,22 expected:<27385657281648> but was:<27385657281647>]
junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)

junit.framework.AssertionFailedError: 4,2 expected:<6> but was:<1>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)
22:11:47.688 [pool-228-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest)
[4,2 expected:<6> but was:<1>]
junit.framework.AssertionFailedError: 4,2 expected:<6> but was:<1>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)

22:11:47.689 [pool-225-thread-1] DEBUG tests.output - Failing tests with false: 
[testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest): 48,22 expected:<27385657281648> but was:<27385657281647>]
22:11:47.689 [pool-225-thread-1] DEBUG tests.output - Failing tests with true: 
[testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest): 4,2 expected:<6> but was:<1>]
22:11:47.689 [pool-225-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.MathUtils:266.
22:11:47.689 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #151
22:11:47.689 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.MathUtils:262 which is executed by 19 tests
-1550426518
22:11:47.837 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)
22:11:47.870 [pool-230-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (28 ms)
<> Total tests run: 43
<> Ignored tests: 0
<> Failed tests: 1
~ testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest)
[48,22 expected:<27385657281648> but was:<27385657281647>]
junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)

junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)
22:11:48.098 [pool-231-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (22 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest)
[48,22 expected:<27385657281648> but was:<27385657281647>]
junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)

junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)
22:11:48.117 [pool-232-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (18 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest)
[48,22 expected:<27385657281648> but was:<27385657281647>]
junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)

22:11:48.117 [pool-229-thread-1] DEBUG tests.output - Failing tests with false: 
[testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest): 48,22 expected:<27385657281648> but was:<27385657281647>]
22:11:48.117 [pool-229-thread-1] DEBUG tests.output - Failing tests with true: 
[testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest): 48,22 expected:<27385657281648> but was:<27385657281647>]
22:11:48.117 [pool-229-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.MathUtils:262.
22:11:48.117 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)
22:11:48.150 [pool-234-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (28 ms)
<> Total tests run: 43
<> Ignored tests: 0
<> Failed tests: 1
~ testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest)
[48,22 expected:<27385657281648> but was:<27385657281647>]
junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)

junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)
22:11:48.398 [pool-235-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (32 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest)
[48,22 expected:<27385657281648> but was:<27385657281647>]
junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)

java.lang.IllegalArgumentException: must have n >= 0 for binomial coefficient (n,k)
    at org.apache.commons.math.util.MathUtils.binomialCoefficientLog(MathUtils.java:117)
    at org.apache.commons.math.util.MathUtils.binomialCoefficientDouble(MathUtils.java:84)
    at org.apache.commons.math.util.MathUtils.binomialCoefficient(MathUtils.java:76)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:185)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
22:11:48.401 [pool-236-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest)
[must have n >= 0 for binomial coefficient (n,k)]
java.lang.IllegalArgumentException: must have n >= 0 for binomial coefficient (n,k)    at org.apache.commons.math.util.MathUtils.binomialCoefficientLog(MathUtils.java:117)
    at org.apache.commons.math.util.MathUtils.binomialCoefficientDouble(MathUtils.java:84)
    at org.apache.commons.math.util.MathUtils.binomialCoefficient(MathUtils.java:76)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:185)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

22:11:48.401 [pool-233-thread-1] DEBUG tests.output - Failing tests with false: 
[testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest): 48,22 expected:<27385657281648> but was:<27385657281647>]
22:11:48.401 [pool-233-thread-1] DEBUG tests.output - Failing tests with true: 
[testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest): must have n >= 0 for binomial coefficient (n,k)]
22:11:48.401 [pool-233-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.MathUtils:262.
22:11:48.401 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #152
22:11:48.402 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.MathUtils:258 which is executed by 19 tests
-1550426518
22:11:48.546 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)
22:11:48.580 [pool-238-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (29 ms)
<> Total tests run: 43
<> Ignored tests: 0
<> Failed tests: 1
~ testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest)
[48,22 expected:<27385657281648> but was:<27385657281647>]
junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)

junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)
22:11:48.805 [pool-239-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (21 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest)
[48,22 expected:<27385657281648> but was:<27385657281647>]
junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)

junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)
22:11:48.823 [pool-240-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (17 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest)
[48,22 expected:<27385657281648> but was:<27385657281647>]
junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)

22:11:48.823 [pool-237-thread-1] DEBUG tests.output - Failing tests with false: 
[testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest): 48,22 expected:<27385657281648> but was:<27385657281647>]
22:11:48.823 [pool-237-thread-1] DEBUG tests.output - Failing tests with true: 
[testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest): 48,22 expected:<27385657281648> but was:<27385657281647>]
22:11:48.823 [pool-237-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.MathUtils:258.
22:11:48.824 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)
22:11:48.856 [pool-242-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (28 ms)
<> Total tests run: 43
<> Ignored tests: 0
<> Failed tests: 1
~ testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest)
[48,22 expected:<27385657281648> but was:<27385657281647>]
junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)

junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)
22:11:49.085 [pool-243-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (21 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest)
[48,22 expected:<27385657281648> but was:<27385657281647>]
junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:159)
    at junit.framework.TestCase.assertEquals(TestCase.java:316)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)

java.lang.IllegalArgumentException: must have n >= k for binomial coefficient (n,k)
    at org.apache.commons.math.util.MathUtils.binomialCoefficientLog(MathUtils.java:113)
    at org.apache.commons.math.util.MathUtils.binomialCoefficientDouble(MathUtils.java:84)
    at org.apache.commons.math.util.MathUtils.binomialCoefficient(MathUtils.java:76)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:185)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
22:11:49.087 [pool-244-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest)
[must have n >= k for binomial coefficient (n,k)]
java.lang.IllegalArgumentException: must have n >= k for binomial coefficient (n,k)    at org.apache.commons.math.util.MathUtils.binomialCoefficientLog(MathUtils.java:113)
    at org.apache.commons.math.util.MathUtils.binomialCoefficientDouble(MathUtils.java:84)
    at org.apache.commons.math.util.MathUtils.binomialCoefficient(MathUtils.java:76)
    at org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:185)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

22:11:49.087 [pool-241-thread-1] DEBUG tests.output - Failing tests with false: 
[testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest): 48,22 expected:<27385657281648> but was:<27385657281647>]
22:11:49.088 [pool-241-thread-1] DEBUG tests.output - Failing tests with true: 
[testBinomialCoefficientLarge(org.apache.commons.math.util.MathUtilsTest): must have n >= k for binomial coefficient (n,k)]
22:11:49.088 [pool-241-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.MathUtils:258.
22:11:49.088 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #153
22:11:49.088 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.linear.DenseRealMatrix:1312 which is executed by 145 tests
-1626805409
22:11:49.273 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #154
22:11:49.273 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.linear.DenseRealMatrix:1307 which is executed by 147 tests
-1626805409
22:11:49.466 [pool-2-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol - ----INFORMATION----
22:11:49.597 [pool-2-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol - Nb classes : 278
22:11:49.597 [pool-2-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol - Nb methods : 1954
22:11:49.597 [pool-2-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol - Nb Statements Analyzed : 32
22:11:49.597 [pool-2-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol - Nb Statements with Angelic Value Found : 0
22:11:49.597 [pool-2-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol - Nb inputs in SMT : 0
22:11:49.601 [pool-2-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol - Nb SMT level: 0
22:11:49.601 [pool-2-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol - Nb variables in SMT : 0
22:11:49.601 [pool-2-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol - NoPol Execution time : 118898ms
22:11:49.601 [pool-2-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol - 
NO_ANGELIC_VALUE
Command exited with non-zero status 255
277.79user 10.50system 2:00.77elapsed 238%CPU (0avgtext+0avgdata 1309520maxresident)k
51280inputs+6688outputs (3major+446101minor)pagefaults 0swaps


Node: granduc-21.luxembourg.grid5000.fr



Date: Wed Nov 28 22:11:50 EST 2018

