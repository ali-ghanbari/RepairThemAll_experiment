{
  "repair_end": "2018-12-01 12:05:55.220970", 
  "repair_begin": "2018-12-01 11:43:23.042055", 
  "patches": [
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_1310/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:59:01.567818650 -0500\n@@ -97,7 +97,11 @@\n      */\n     public double inverseCumulativeProbability(final double p) \n         throws MathException {\n-        if (p == 0) {\n+        if (p < 0.0 || p > 1.0) {\n+\t\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\t\"probability of success must be between 0.0 and 1.0, inclusive.\");\n+\t\t\t}\n+\t\tif (p == 0) {\n             return 0d;\n         }\n         if (p == 1) {\n@@ -145,7 +149,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return denominatorDegreesOfFreedom;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return denominatorDegreesOfFreedom;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 100, 
          "faulty": "if (p == 0) {\n  return 0d;\n}", 
          "type": "InsertBefore", 
          "seed": "if (p < 0.0 || p > 1.0) {\n  throw new IllegalArgumentException(\"probability of success must be between 0.0 and 1.0, inclusive.\");\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_1777/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 06:04:13.747934461 -0500\n@@ -142,10 +142,13 @@\n      */\n     protected double getInitialDomain(double p) {\n         double ret;\n-        double d = getDenominatorDegreesOfFreedom();\n-            // use mean\n-            ret = d / (d - 2.0);\n-        return ret;\n+        if (p < 0.0 || p > 1.0) {\n+\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\"probability of success must be between 0.0 and 1.0, inclusive.\");\n+\t\t}\n+\t\tdouble d = getDenominatorDegreesOfFreedom();\n+            ret = Double.MAX_VALUE;\n+        return 0d;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0d;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 147, 
          "faulty": "ret=d / (d - 2.0);", 
          "type": "Replace", 
          "seed": "ret=Double.MAX_VALUE;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 145, 
          "faulty": "double d=getDenominatorDegreesOfFreedom();", 
          "type": "InsertBefore", 
          "seed": "if (p < 0.0 || p > 1.0) {\n  throw new IllegalArgumentException(\"probability of success must be between 0.0 and 1.0, inclusive.\");\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_276/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:47:27.239235254 -0500\n@@ -69,7 +69,8 @@\n      */\n     public double cumulativeProbability(double x) throws MathException {\n         double ret;\n-        if (x <= 0.0) {\n+        ret = 0.0;\n+\t\tif (x <= 0.0) {\n             ret = 0.0;\n         } else {\n             double n = getNumeratorDegreesOfFreedom();\n@@ -145,7 +146,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 72, 
          "faulty": "if (x <= 0.0) {\n  ret=0.0;\n}\n else {\n  double n=getNumeratorDegreesOfFreedom();\n  double m=getDenominatorDegreesOfFreedom();\n  ret=Beta.regularizedBeta((n * x) / (m + n * x),0.5 * n,0.5 * m);\n}", 
          "type": "InsertBefore", 
          "seed": "ret=0.0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_328/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:47:56.195267749 -0500\n@@ -142,10 +142,11 @@\n      */\n     protected double getInitialDomain(double p) {\n         double ret;\n-        double d = getDenominatorDegreesOfFreedom();\n+        ret = 0.5;\n+\t\tdouble d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return denominatorDegreesOfFreedom;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return denominatorDegreesOfFreedom;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 145, 
          "faulty": "double d=getDenominatorDegreesOfFreedom();", 
          "type": "InsertBefore", 
          "seed": "ret=0.5;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_1897/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 06:05:36.455971710 -0500\n@@ -103,7 +103,11 @@\n         if (p == 1) {\n             return Double.POSITIVE_INFINITY;\n         }\n-        return super.inverseCumulativeProbability(p);\n+        if (p == 1) {\n+\t\t\treturn 1;\n+\t\t} else {\n+\t\t\treturn super.inverseCumulativeProbability(p);\n+\t\t}\n     }\n         \n     /**\n@@ -145,7 +149,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 106, 
          "faulty": "return super.inverseCumulativeProbability(p);", 
          "type": "Replace", 
          "seed": "if (p == 1) {\n  return 1;\n}\n else {\n  return super.inverseCumulativeProbability(p);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_1837/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 06:05:09.655959232 -0500\n@@ -98,6 +98,9 @@\n     public double inverseCumulativeProbability(final double p) \n         throws MathException {\n         if (p == 0) {\n+\t\t\t\treturn 0d;\n+\t\t\t}\n+\t\tif (p == 0) {\n             return 0d;\n         }\n         if (p == 1) {\n@@ -145,7 +148,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0d;\n     }\n     \n     /**\n\n\n--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\t2018-12-01 05:43:11.219151160 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_1837/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\t2018-12-01 06:05:09.655959232 -0500\n@@ -62,7 +62,11 @@\n             throw new IllegalArgumentException(\"p must be between 0.0 and 1.0, inclusive.\");\n         }\n \n-        // by default, do simple root finding using bracketing and default solver.\n+        if (p < 0.0 || p > 1.0) {\n+\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\"p must be between 0.0 and 1.0, inclusive.\");\n+\t\t}\n+\t\t// by default, do simple root finding using bracketing and default solver.\n         // subclasses can overide if there is a better method.\n         UnivariateRealFunction rootFindingFunction =\n             new UnivariateRealFunction() {\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0d;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java", 
          "line": 67, 
          "faulty": "UnivariateRealFunction rootFindingFunction=new UnivariateRealFunction(){\n  public double value(  double x) throws FunctionEvaluationException {\n    try {\n      return cumulativeProbability(x) - p;\n    }\n catch (    MathException ex) {\n      throw new FunctionEvaluationException(x,ex.getPattern(),ex.getArguments(),ex);\n    }\n  }\n}\n;", 
          "type": "InsertBefore", 
          "seed": "if (p < 0.0 || p > 1.0) {\n  throw new IllegalArgumentException(\"p must be between 0.0 and 1.0, inclusive.\");\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 100, 
          "faulty": "if (p == 0) {\n  return 0d;\n}", 
          "type": "InsertBefore", 
          "seed": "if (p == 0) {\n  return 0d;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_156/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:46:16.491156211 -0500\n@@ -145,7 +145,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0d;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0d;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_1163/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:57:29.759759846 -0500\n@@ -145,7 +145,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return Double.MIN_VALUE;\n     }\n     \n     /**\n\n\n--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\t2018-12-01 05:43:11.219151160 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_1163/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\t2018-12-01 05:57:29.759759846 -0500\n@@ -58,7 +58,10 @@\n      */\n     public double inverseCumulativeProbability(final double p)\n         throws MathException {\n-        if (p < 0.0 || p > 1.0) {\n+        if (p == 1) {\n+\t\t\t\treturn Integer.MAX_VALUE;\n+\t\t\t}\n+\t\tif (p < 0.0 || p > 1.0) {\n             throw new IllegalArgumentException(\"p must be between 0.0 and 1.0, inclusive.\");\n         }\n \n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return Double.MIN_VALUE;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java", 
          "line": 61, 
          "faulty": "if (p < 0.0 || p > 1.0) {\n  throw new IllegalArgumentException(\"p must be between 0.0 and 1.0, inclusive.\");\n}", 
          "type": "InsertBefore", 
          "seed": "if (p == 1) {\n  return Integer.MAX_VALUE;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_1672/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 06:03:17.019911419 -0500\n@@ -145,7 +145,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0d;\n     }\n     \n     /**\n\n\n--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\t2018-12-01 05:43:11.219151160 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_1672/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\t2018-12-01 06:03:17.019911419 -0500\n@@ -59,10 +59,10 @@\n     public double inverseCumulativeProbability(final double p)\n         throws MathException {\n         if (p < 0.0 || p > 1.0) {\n-            throw new IllegalArgumentException(\"p must be between 0.0 and 1.0, inclusive.\");\n-        }\n-\n-        // by default, do simple root finding using bracketing and default solver.\n+\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\"p must be between 0.0 and 1.0, inclusive.\");\n+\t\t}\n+\t\t// by default, do simple root finding using bracketing and default solver.\n         // subclasses can overide if there is a better method.\n         UnivariateRealFunction rootFindingFunction =\n             new UnivariateRealFunction() {\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0d;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java", 
          "line": 67, 
          "faulty": "UnivariateRealFunction rootFindingFunction=new UnivariateRealFunction(){\n  public double value(  double x) throws FunctionEvaluationException {\n    try {\n      return cumulativeProbability(x) - p;\n    }\n catch (    MathException ex) {\n      throw new FunctionEvaluationException(x,ex.getPattern(),ex.getArguments(),ex);\n    }\n  }\n}\n;", 
          "type": "InsertBefore", 
          "seed": "if (p < 0.0 || p > 1.0) {\n  throw new IllegalArgumentException(\"p must be between 0.0 and 1.0, inclusive.\");\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java", 
          "line": 61, 
          "faulty": "if (p < 0.0 || p > 1.0) {\n  throw new IllegalArgumentException(\"p must be between 0.0 and 1.0, inclusive.\");\n}", 
          "type": "Delete", 
          "seed": "if (p < 0.0 || p > 1.0) {\n  throw new IllegalArgumentException(\"probability of success must be between 0.0 and 1.0, inclusive.\");\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_1281/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:58:46.547813002 -0500\n@@ -145,7 +145,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0d;\n     }\n     \n     /**\n\n\n--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java\t2018-12-01 05:43:11.219151160 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_1281/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java\t2018-12-01 05:58:46.547813002 -0500\n@@ -125,8 +125,8 @@\n     public static double[] bracket(UnivariateRealFunction function, \n             double initial, double lowerBound, double upperBound) \n     throws ConvergenceException, FunctionEvaluationException {\n-        return bracket( function, initial, lowerBound, upperBound,\n-            Integer.MAX_VALUE ) ;\n+        return bracket(function, initial, lowerBound, upperBound,\n+\t\t\t\tInteger.MAX_VALUE);\n     }\n \n      /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0d;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java", 
          "line": 128, 
          "faulty": "return bracket(function,initial,lowerBound,upperBound,Integer.MAX_VALUE);", 
          "type": "Replace", 
          "seed": "return bracket(function,initial,lowerBound,upperBound,Integer.MAX_VALUE);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_874/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:53:56.731602424 -0500\n@@ -98,6 +98,9 @@\n     public double inverseCumulativeProbability(final double p) \n         throws MathException {\n         if (p == 0) {\n+\t\t\t\treturn 0d;\n+\t\t\t}\n+\t\tif (p == 0) {\n             return 0d;\n         }\n         if (p == 1) {\n@@ -145,7 +148,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0d;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0d;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 100, 
          "faulty": "if (p == 0) {\n  return 0d;\n}", 
          "type": "InsertBefore", 
          "seed": "if (p == 0) {\n  return 0d;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_1854/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 06:05:15.303961832 -0500\n@@ -100,9 +100,7 @@\n         if (p == 0) {\n             return 0d;\n         }\n-        if (p == 1) {\n-            return Double.POSITIVE_INFINITY;\n-        }\n+        setNumeratorDegreesOfFreedom(numeratorDegreesOfFreedom);\n         return super.inverseCumulativeProbability(p);\n     }\n         \n@@ -145,7 +143,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0d;\n     }\n     \n     /**\n\n\n--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\t2018-12-01 05:43:11.219151160 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_1854/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\t2018-12-01 06:05:15.307961834 -0500\n@@ -76,7 +76,10 @@\n             }\n         };\n               \n-        // Try to bracket root, test domain endoints if this fails     \n+        if (p == 1) {\n+\t\t\treturn Double.POSITIVE_INFINITY;\n+\t\t}\n+\t\t// Try to bracket root, test domain endoints if this fails     \n         double lowerBound = getDomainLowerBound(p);\n         double upperBound = getDomainUpperBound(p);\n         double[] bracket = null;\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0d;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java", 
          "line": 80, 
          "faulty": "double lowerBound=getDomainLowerBound(p);", 
          "type": "InsertBefore", 
          "seed": "if (p == 1) {\n  return Double.POSITIVE_INFINITY;\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 103, 
          "faulty": "if (p == 1) {\n  return Double.POSITIVE_INFINITY;\n}", 
          "type": "Replace", 
          "seed": "setNumeratorDegreesOfFreedom(numeratorDegreesOfFreedom);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_679/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:51:52.059498557 -0500\n@@ -145,7 +145,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0;\n     }\n     \n     /**\n\n\n--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java\t2018-12-01 05:43:11.219151160 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_679/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java\t2018-12-01 05:51:52.059498557 -0500\n@@ -171,7 +171,10 @@\n         if (function == null) {\n             throw new IllegalArgumentException (\"function is null.\");\n         }\n-        if (maximumIterations <= 0)  {\n+        if (factory == null) {\n+\t\t\tfactory = UnivariateRealSolverFactory.newInstance();\n+\t\t}\n+\t\tif (maximumIterations <= 0)  {\n             throw new IllegalArgumentException\n             (\"bad value for maximumIterations: \" + maximumIterations);\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java", 
          "line": 174, 
          "faulty": "if (maximumIterations <= 0) {\n  throw new IllegalArgumentException(\"bad value for maximumIterations: \" + maximumIterations);\n}", 
          "type": "InsertBefore", 
          "seed": "if (factory == null) {\n  factory=UnivariateRealSolverFactory.newInstance();\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_1432/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 06:00:36.427857690 -0500\n@@ -142,10 +142,14 @@\n      */\n     protected double getInitialDomain(double p) {\n         double ret;\n-        double d = getDenominatorDegreesOfFreedom();\n+        if (p < 0.0 || p > 1.0) {\n+\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\"p must be between 0.0 and 1.0, inclusive.\");\n+\t\t}\n+\t\tdouble d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0d;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0d;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 145, 
          "faulty": "double d=getDenominatorDegreesOfFreedom();", 
          "type": "InsertBefore", 
          "seed": "if (p < 0.0 || p > 1.0) {\n  throw new IllegalArgumentException(\"p must be between 0.0 and 1.0, inclusive.\");\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_221/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:46:50.723191731 -0500\n@@ -69,7 +69,8 @@\n      */\n     public double cumulativeProbability(double x) throws MathException {\n         double ret;\n-        if (x <= 0.0) {\n+        setDenominatorDegreesOfFreedom(denominatorDegreesOfFreedom);\n+\t\tif (x <= 0.0) {\n             ret = 0.0;\n         } else {\n             double n = getNumeratorDegreesOfFreedom();\n@@ -145,7 +146,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return denominatorDegreesOfFreedom;\n     }\n     \n     /**\n\n\n--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java\t2018-12-01 05:43:11.219151160 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_221/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java\t2018-12-01 05:46:50.723191731 -0500\n@@ -176,7 +176,11 @@\n             (\"bad value for maximumIterations: \" + maximumIterations);\n         }\n         if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n-            throw new IllegalArgumentException\n+            if (maximumIterations <= 0) {\n+\t\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\t\"bad value for maximumIterations: \" + maximumIterations);\n+\t\t\t}\n+\t\t\tthrow new IllegalArgumentException\n             (\"Invalid endpoint parameters:  lowerBound=\" + lowerBound + \n               \" initial=\" + initial + \" upperBound=\" + upperBound);\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return denominatorDegreesOfFreedom;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java", 
          "line": 179, 
          "faulty": "throw new IllegalArgumentException(\"Invalid endpoint parameters:  lowerBound=\" + lowerBound + \" initial=\"+ initial+ \" upperBound=\"+ upperBound);", 
          "type": "InsertBefore", 
          "seed": "if (maximumIterations <= 0) {\n  throw new IllegalArgumentException(\"bad value for maximumIterations: \" + maximumIterations);\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 72, 
          "faulty": "if (x <= 0.0) {\n  ret=0.0;\n}\n else {\n  double n=getNumeratorDegreesOfFreedom();\n  double m=getDenominatorDegreesOfFreedom();\n  ret=Beta.regularizedBeta((n * x) / (m + n * x),0.5 * n,0.5 * m);\n}", 
          "type": "InsertBefore", 
          "seed": "setDenominatorDegreesOfFreedom(denominatorDegreesOfFreedom);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_415/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:48:54.339328409 -0500\n@@ -143,9 +143,7 @@\n     protected double getInitialDomain(double p) {\n         double ret;\n         double d = getDenominatorDegreesOfFreedom();\n-            // use mean\n-            ret = d / (d - 2.0);\n-        return ret;\n+            return denominatorDegreesOfFreedom;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return denominatorDegreesOfFreedom;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 147, 
          "faulty": "ret=d / (d - 2.0);", 
          "type": "Delete", 
          "seed": "if (p == 0) {\n  return -1;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_556/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:50:42.607434454 -0500\n@@ -72,7 +72,15 @@\n         if (x <= 0.0) {\n             ret = 0.0;\n         } else {\n-            double n = getNumeratorDegreesOfFreedom();\n+            if (x <= 0.0) {\n+\t\t\t\tret = 0.0;\n+\t\t\t} else {\n+\t\t\t\tdouble n = getNumeratorDegreesOfFreedom();\n+\t\t\t\tdouble m = getDenominatorDegreesOfFreedom();\n+\t\t\t\tret = Beta.regularizedBeta((n * x) / (m + n * x), 0.5 * n,\n+\t\t\t\t\t\t0.5 * m);\n+\t\t\t}\n+\t\t\tdouble n = getNumeratorDegreesOfFreedom();\n             double m = getDenominatorDegreesOfFreedom();\n             \n             ret = Beta.regularizedBeta((n * x) / (m + n * x),\n@@ -145,7 +153,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0d;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0d;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 75, 
          "faulty": "double n=getNumeratorDegreesOfFreedom();", 
          "type": "InsertBefore", 
          "seed": "if (x <= 0.0) {\n  ret=0.0;\n}\n else {\n  double n=getNumeratorDegreesOfFreedom();\n  double m=getDenominatorDegreesOfFreedom();\n  ret=Beta.regularizedBeta((n * x) / (m + n * x),0.5 * n,0.5 * m);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_1669/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 06:03:16.271911131 -0500\n@@ -143,9 +143,10 @@\n     protected double getInitialDomain(double p) {\n         double ret;\n         double d = getDenominatorDegreesOfFreedom();\n-            // use mean\n-            ret = d / (d - 2.0);\n-        return ret;\n+            if (p == 0) {\n+\t\t\t\treturn -1;\n+\t\t\t}\n+        return 0d;\n     }\n     \n     /**\n\n\n--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java\t2018-12-01 05:43:11.219151160 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_1669/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java\t2018-12-01 06:03:16.271911131 -0500\n@@ -125,8 +125,8 @@\n     public static double[] bracket(UnivariateRealFunction function, \n             double initial, double lowerBound, double upperBound) \n     throws ConvergenceException, FunctionEvaluationException {\n-        return bracket( function, initial, lowerBound, upperBound,\n-            Integer.MAX_VALUE ) ;\n+        return bracket(function, initial, lowerBound, upperBound,\n+\t\t\t\tInteger.MAX_VALUE);\n     }\n \n      /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0d;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java", 
          "line": 128, 
          "faulty": "return bracket(function,initial,lowerBound,upperBound,Integer.MAX_VALUE);", 
          "type": "Replace", 
          "seed": "return bracket(function,initial,lowerBound,upperBound,Integer.MAX_VALUE);"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 147, 
          "faulty": "ret=d / (d - 2.0);", 
          "type": "Replace", 
          "seed": "if (p == 0) {\n  return -1;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_789/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:52:58.767555621 -0500\n@@ -98,6 +98,9 @@\n     public double inverseCumulativeProbability(final double p) \n         throws MathException {\n         if (p == 0) {\n+\t\t\t\treturn 0d;\n+\t\t\t}\n+\t\tif (p == 0) {\n             return 0d;\n         }\n         if (p == 1) {\n@@ -145,7 +148,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 100, 
          "faulty": "if (p == 0) {\n  return 0d;\n}", 
          "type": "InsertBefore", 
          "seed": "if (p == 0) {\n  return 0d;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_1549/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 06:01:47.191880558 -0500\n@@ -72,7 +72,15 @@\n         if (x <= 0.0) {\n             ret = 0.0;\n         } else {\n-            double n = getNumeratorDegreesOfFreedom();\n+            if (x <= 0.0) {\n+\t\t\t\tret = 0.0;\n+\t\t\t} else {\n+\t\t\t\tdouble n = getNumeratorDegreesOfFreedom();\n+\t\t\t\tdouble m = getDenominatorDegreesOfFreedom();\n+\t\t\t\tret = Beta.regularizedBeta((n * x) / (m + n * x), 0.5 * n,\n+\t\t\t\t\t\t0.5 * m);\n+\t\t\t}\n+\t\t\tdouble n = getNumeratorDegreesOfFreedom();\n             double m = getDenominatorDegreesOfFreedom();\n             \n             ret = Beta.regularizedBeta((n * x) / (m + n * x),\n@@ -142,10 +150,11 @@\n      */\n     protected double getInitialDomain(double p) {\n         double ret;\n-        double d = getDenominatorDegreesOfFreedom();\n+        setDenominatorDegreesOfFreedom(denominatorDegreesOfFreedom);\n+\t\tdouble d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0d;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0d;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 75, 
          "faulty": "double n=getNumeratorDegreesOfFreedom();", 
          "type": "InsertBefore", 
          "seed": "if (x <= 0.0) {\n  ret=0.0;\n}\n else {\n  double n=getNumeratorDegreesOfFreedom();\n  double m=getDenominatorDegreesOfFreedom();\n  ret=Beta.regularizedBeta((n * x) / (m + n * x),0.5 * n,0.5 * m);\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 145, 
          "faulty": "double d=getDenominatorDegreesOfFreedom();", 
          "type": "InsertBefore", 
          "seed": "setDenominatorDegreesOfFreedom(denominatorDegreesOfFreedom);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_584/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:51:02.883453742 -0500\n@@ -145,7 +145,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0d;\n     }\n     \n     /**\n\n\n--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\t2018-12-01 05:43:11.219151160 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_584/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\t2018-12-01 05:51:02.883453742 -0500\n@@ -62,7 +62,10 @@\n             throw new IllegalArgumentException(\"p must be between 0.0 and 1.0, inclusive.\");\n         }\n \n-        // by default, do simple root finding using bracketing and default solver.\n+        if (p == 0) {\n+\t\t\treturn 0d;\n+\t\t}\n+\t\t// by default, do simple root finding using bracketing and default solver.\n         // subclasses can overide if there is a better method.\n         UnivariateRealFunction rootFindingFunction =\n             new UnivariateRealFunction() {\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0d;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java", 
          "line": 67, 
          "faulty": "UnivariateRealFunction rootFindingFunction=new UnivariateRealFunction(){\n  public double value(  double x) throws FunctionEvaluationException {\n    try {\n      return cumulativeProbability(x) - p;\n    }\n catch (    MathException ex) {\n      throw new FunctionEvaluationException(x,ex.getPattern(),ex.getArguments(),ex);\n    }\n  }\n}\n;", 
          "type": "InsertBefore", 
          "seed": "if (p == 0) {\n  return 0d;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_55/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:44:53.399153946 -0500\n@@ -145,7 +145,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return Double.MIN_VALUE;\n     }\n     \n     /**\n\n\n--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\t2018-12-01 05:43:11.219151160 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_55/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\t2018-12-01 05:44:53.399153946 -0500\n@@ -62,7 +62,11 @@\n             throw new IllegalArgumentException(\"p must be between 0.0 and 1.0, inclusive.\");\n         }\n \n-        // by default, do simple root finding using bracketing and default solver.\n+        if (p <= 0) {\n+\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\"The Poisson mean must be positive\");\n+\t\t}\n+\t\t// by default, do simple root finding using bracketing and default solver.\n         // subclasses can overide if there is a better method.\n         UnivariateRealFunction rootFindingFunction =\n             new UnivariateRealFunction() {\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return Double.MIN_VALUE;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java", 
          "line": 67, 
          "faulty": "UnivariateRealFunction rootFindingFunction=new UnivariateRealFunction(){\n  public double value(  double x) throws FunctionEvaluationException {\n    try {\n      return cumulativeProbability(x) - p;\n    }\n catch (    MathException ex) {\n      throw new FunctionEvaluationException(x,ex.getPattern(),ex.getArguments(),ex);\n    }\n  }\n}\n;", 
          "type": "InsertBefore", 
          "seed": "if (p <= 0) {\n  throw new IllegalArgumentException(\"The Poisson mean must be positive\");\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_1107/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:56:52.451733487 -0500\n@@ -116,7 +116,7 @@\n      *         P(X &lt; <i>lower bound</i>) &lt; <code>p</code> \n      */\n     protected double getDomainLowerBound(double p) {\n-        return 0.0;\n+        return 0;\n     }\n \n     /**\n@@ -145,7 +145,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return numeratorDegreesOfFreedom;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return numeratorDegreesOfFreedom;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 119, 
          "faulty": "return 0.0;", 
          "type": "Replace", 
          "seed": "return 0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_1664/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 06:03:14.567910477 -0500\n@@ -69,7 +69,8 @@\n      */\n     public double cumulativeProbability(double x) throws MathException {\n         double ret;\n-        if (x <= 0.0) {\n+        ret = Double.NEGATIVE_INFINITY;\n+\t\tif (x <= 0.0) {\n             ret = 0.0;\n         } else {\n             double n = getNumeratorDegreesOfFreedom();\n@@ -145,7 +146,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0;\n     }\n     \n     /**\n\n\n--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\t2018-12-01 05:43:11.219151160 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_1664/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\t2018-12-01 06:03:14.567910477 -0500\n@@ -76,7 +76,10 @@\n             }\n         };\n               \n-        // Try to bracket root, test domain endoints if this fails     \n+        if (p == 1) {\n+\t\t\treturn Double.POSITIVE_INFINITY;\n+\t\t}\n+\t\t// Try to bracket root, test domain endoints if this fails     \n         double lowerBound = getDomainLowerBound(p);\n         double upperBound = getDomainUpperBound(p);\n         double[] bracket = null;\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 72, 
          "faulty": "if (x <= 0.0) {\n  ret=0.0;\n}\n else {\n  double n=getNumeratorDegreesOfFreedom();\n  double m=getDenominatorDegreesOfFreedom();\n  ret=Beta.regularizedBeta((n * x) / (m + n * x),0.5 * n,0.5 * m);\n}", 
          "type": "InsertBefore", 
          "seed": "ret=Double.NEGATIVE_INFINITY;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java", 
          "line": 80, 
          "faulty": "double lowerBound=getDomainLowerBound(p);", 
          "type": "InsertBefore", 
          "seed": "if (p == 1) {\n  return Double.POSITIVE_INFINITY;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_435/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:49:07.115341018 -0500\n@@ -145,7 +145,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 119, 
          "faulty": "return 0.0;", 
          "type": "Replace", 
          "seed": "return 0.0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_45/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:44:49.983153853 -0500\n@@ -145,7 +145,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_300/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:47:35.523244722 -0500\n@@ -145,7 +145,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return denominatorDegreesOfFreedom;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return denominatorDegreesOfFreedom;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_236/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:47:01.959205446 -0500\n@@ -145,7 +145,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return numeratorDegreesOfFreedom;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return numeratorDegreesOfFreedom;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_793/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:52:59.875556538 -0500\n@@ -116,7 +116,11 @@\n      *         P(X &lt; <i>lower bound</i>) &lt; <code>p</code> \n      */\n     protected double getDomainLowerBound(double p) {\n-        return 0.0;\n+        if (p < 0.0 || p > 1.0) {\n+\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\"p must be between 0.0 and 1.0, inclusive.\");\n+\t\t}\n+\t\treturn 0.0;\n     }\n \n     /**\n@@ -145,7 +149,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 119, 
          "faulty": "return 0.0;", 
          "type": "InsertBefore", 
          "seed": "if (p < 0.0 || p > 1.0) {\n  throw new IllegalArgumentException(\"p must be between 0.0 and 1.0, inclusive.\");\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_853/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:53:44.275592555 -0500\n@@ -145,7 +145,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0d;\n     }\n     \n     /**\n\n\n--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\t2018-12-01 05:43:11.219151160 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_853/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\t2018-12-01 05:53:44.279592558 -0500\n@@ -62,7 +62,10 @@\n             throw new IllegalArgumentException(\"p must be between 0.0 and 1.0, inclusive.\");\n         }\n \n-        // by default, do simple root finding using bracketing and default solver.\n+        if (p == 0) {\n+\t\t\treturn 0d;\n+\t\t}\n+\t\t// by default, do simple root finding using bracketing and default solver.\n         // subclasses can overide if there is a better method.\n         UnivariateRealFunction rootFindingFunction =\n             new UnivariateRealFunction() {\n\n\n--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java\t2018-12-01 05:43:11.219151160 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_853/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java\t2018-12-01 05:53:44.279592558 -0500\n@@ -171,7 +171,10 @@\n         if (function == null) {\n             throw new IllegalArgumentException (\"function is null.\");\n         }\n-        if (maximumIterations <= 0)  {\n+        if (factory == null) {\n+\t\t\tfactory = UnivariateRealSolverFactory.newInstance();\n+\t\t}\n+\t\tif (maximumIterations <= 0)  {\n             throw new IllegalArgumentException\n             (\"bad value for maximumIterations: \" + maximumIterations);\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0d;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java", 
          "line": 174, 
          "faulty": "if (maximumIterations <= 0) {\n  throw new IllegalArgumentException(\"bad value for maximumIterations: \" + maximumIterations);\n}", 
          "type": "InsertBefore", 
          "seed": "if (factory == null) {\n  factory=UnivariateRealSolverFactory.newInstance();\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java", 
          "line": 67, 
          "faulty": "UnivariateRealFunction rootFindingFunction=new UnivariateRealFunction(){\n  public double value(  double x) throws FunctionEvaluationException {\n    try {\n      return cumulativeProbability(x) - p;\n    }\n catch (    MathException ex) {\n      throw new FunctionEvaluationException(x,ex.getPattern(),ex.getArguments(),ex);\n    }\n  }\n}\n;", 
          "type": "InsertBefore", 
          "seed": "if (p == 0) {\n  return 0d;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_855/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:53:44.679592876 -0500\n@@ -143,9 +143,10 @@\n     protected double getInitialDomain(double p) {\n         double ret;\n         double d = getDenominatorDegreesOfFreedom();\n-            // use mean\n-            ret = d / (d - 2.0);\n-        return ret;\n+            if (p == 0) {\n+\t\t\t\treturn -1;\n+\t\t\t}\n+        return 0d;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0d;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 147, 
          "faulty": "ret=d / (d - 2.0);", 
          "type": "Replace", 
          "seed": "if (p == 0) {\n  return -1;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_891/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:54:02.283606793 -0500\n@@ -145,7 +145,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0d;\n     }\n     \n     /**\n\n\n--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\t2018-12-01 05:43:11.219151160 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_891/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\t2018-12-01 05:54:02.283606793 -0500\n@@ -76,7 +76,11 @@\n             }\n         };\n               \n-        // Try to bracket root, test domain endoints if this fails     \n+        if (p < 0.0 || p > 1.0) {\n+\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\"p must be between 0 and 1.0 (inclusive)\");\n+\t\t}\n+\t\t// Try to bracket root, test domain endoints if this fails     \n         double lowerBound = getDomainLowerBound(p);\n         double upperBound = getDomainUpperBound(p);\n         double[] bracket = null;\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0d;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java", 
          "line": 80, 
          "faulty": "double lowerBound=getDomainLowerBound(p);", 
          "type": "InsertBefore", 
          "seed": "if (p < 0.0 || p > 1.0) {\n  throw new IllegalArgumentException(\"p must be between 0 and 1.0 (inclusive)\");\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_1751/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 06:03:58.899928207 -0500\n@@ -145,7 +145,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return denominatorDegreesOfFreedom;\n     }\n     \n     /**\n\n\n--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java\t2018-12-01 05:43:11.219151160 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_1751/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java\t2018-12-01 06:03:58.903928209 -0500\n@@ -176,7 +176,8 @@\n             (\"bad value for maximumIterations: \" + maximumIterations);\n         }\n         if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n-            throw new IllegalArgumentException\n+            factory = UnivariateRealSolverFactory.newInstance();\n+\t\t\tthrow new IllegalArgumentException\n             (\"Invalid endpoint parameters:  lowerBound=\" + lowerBound + \n               \" initial=\" + initial + \" upperBound=\" + upperBound);\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return denominatorDegreesOfFreedom;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java", 
          "line": 179, 
          "faulty": "throw new IllegalArgumentException(\"Invalid endpoint parameters:  lowerBound=\" + lowerBound + \" initial=\"+ initial+ \" upperBound=\"+ upperBound);", 
          "type": "InsertBefore", 
          "seed": "factory=UnivariateRealSolverFactory.newInstance();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_461/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:49:17.723351310 -0500\n@@ -145,7 +145,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return denominatorDegreesOfFreedom;\n     }\n     \n     /**\n\n\n--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\t2018-12-01 05:43:11.219151160 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_461/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\t2018-12-01 05:49:17.723351310 -0500\n@@ -78,7 +78,11 @@\n               \n         // Try to bracket root, test domain endoints if this fails     \n         double lowerBound = getDomainLowerBound(p);\n-        double upperBound = getDomainUpperBound(p);\n+        if (p < 0.0 || p > 1.0) {\n+\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\"probability of success must be between 0.0 and 1.0, inclusive.\");\n+\t\t}\n+\t\tdouble upperBound = getDomainUpperBound(p);\n         double[] bracket = null;\n         try {\n             bracket = UnivariateRealSolverUtils.bracket(\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return denominatorDegreesOfFreedom;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java", 
          "line": 81, 
          "faulty": "double upperBound=getDomainUpperBound(p);", 
          "type": "InsertBefore", 
          "seed": "if (p < 0.0 || p > 1.0) {\n  throw new IllegalArgumentException(\"probability of success must be between 0.0 and 1.0, inclusive.\");\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_318/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:47:47.007257618 -0500\n@@ -142,10 +142,14 @@\n      */\n     protected double getInitialDomain(double p) {\n         double ret;\n-        double d = getDenominatorDegreesOfFreedom();\n+        if (p < 0.0 || p > 1.0) {\n+\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\"probability of success must be between 0.0 and 1.0, inclusive.\");\n+\t\t}\n+\t\tdouble d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 145, 
          "faulty": "double d=getDenominatorDegreesOfFreedom();", 
          "type": "InsertBefore", 
          "seed": "if (p < 0.0 || p > 1.0) {\n  throw new IllegalArgumentException(\"probability of success must be between 0.0 and 1.0, inclusive.\");\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_806/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:53:04.967560739 -0500\n@@ -100,7 +100,8 @@\n         if (p == 0) {\n             return 0d;\n         }\n-        if (p == 1) {\n+        setNumeratorDegreesOfFreedom(numeratorDegreesOfFreedom);\n+\t\tif (p == 1) {\n             return Double.POSITIVE_INFINITY;\n         }\n         return super.inverseCumulativeProbability(p);\n@@ -145,7 +146,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0d;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0d;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 103, 
          "faulty": "if (p == 1) {\n  return Double.POSITIVE_INFINITY;\n}", 
          "type": "InsertBefore", 
          "seed": "setNumeratorDegreesOfFreedom(numeratorDegreesOfFreedom);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_594/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:51:05.663456347 -0500\n@@ -143,9 +143,7 @@\n     protected double getInitialDomain(double p) {\n         double ret;\n         double d = getDenominatorDegreesOfFreedom();\n-            // use mean\n-            ret = d / (d - 2.0);\n-        return ret;\n+            return 0d;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0d;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 147, 
          "faulty": "ret=d / (d - 2.0);", 
          "type": "Delete", 
          "seed": "if (p == 0) {\n  return -1;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_816/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:53:13.823568001 -0500\n@@ -145,7 +145,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0;\n     }\n     \n     /**\n\n\n--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\t2018-12-01 05:43:11.219151160 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_816/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\t2018-12-01 05:53:13.823568001 -0500\n@@ -78,7 +78,10 @@\n               \n         // Try to bracket root, test domain endoints if this fails     \n         double lowerBound = getDomainLowerBound(p);\n-        double upperBound = getDomainUpperBound(p);\n+        if (p == 1) {\n+\t\t\treturn Double.POSITIVE_INFINITY;\n+\t\t}\n+\t\tdouble upperBound = getDomainUpperBound(p);\n         double[] bracket = null;\n         try {\n             bracket = UnivariateRealSolverUtils.bracket(\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java", 
          "line": 81, 
          "faulty": "double upperBound=getDomainUpperBound(p);", 
          "type": "InsertBefore", 
          "seed": "if (p == 1) {\n  return Double.POSITIVE_INFINITY;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_1076/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:56:29.715717221 -0500\n@@ -116,7 +116,8 @@\n      *         P(X &lt; <i>lower bound</i>) &lt; <code>p</code> \n      */\n     protected double getDomainLowerBound(double p) {\n-        return 0.0;\n+        setDenominatorDegreesOfFreedom(denominatorDegreesOfFreedom);\n+\t\treturn 0.0;\n     }\n \n     /**\n@@ -145,7 +146,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return numeratorDegreesOfFreedom;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return numeratorDegreesOfFreedom;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 119, 
          "faulty": "return 0.0;", 
          "type": "InsertBefore", 
          "seed": "setDenominatorDegreesOfFreedom(denominatorDegreesOfFreedom);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_563/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:50:50.443441969 -0500\n@@ -73,7 +73,8 @@\n             ret = 0.0;\n         } else {\n             double n = getNumeratorDegreesOfFreedom();\n-            double m = getDenominatorDegreesOfFreedom();\n+            ret = 0.0;\n+\t\t\tdouble m = getDenominatorDegreesOfFreedom();\n             \n             ret = Beta.regularizedBeta((n * x) / (m + n * x),\n                 0.5 * n,\n@@ -145,7 +146,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 76, 
          "faulty": "double m=getDenominatorDegreesOfFreedom();", 
          "type": "InsertBefore", 
          "seed": "ret=0.0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_592/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:51:05.303456011 -0500\n@@ -145,7 +145,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return numeratorDegreesOfFreedom;\n     }\n     \n     /**\n\n\n--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\t2018-12-01 05:43:11.219151160 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_592/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\t2018-12-01 05:51:05.303456011 -0500\n@@ -59,10 +59,18 @@\n     public double inverseCumulativeProbability(final double p)\n         throws MathException {\n         if (p < 0.0 || p > 1.0) {\n+\t\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\t\"probability of success must be between 0.0 and 1.0, inclusive.\");\n+\t\t\t}\n+\t\tif (p < 0.0 || p > 1.0) {\n             throw new IllegalArgumentException(\"p must be between 0.0 and 1.0, inclusive.\");\n         }\n \n-        // by default, do simple root finding using bracketing and default solver.\n+        if (p < 0.0 || p > 1.0) {\n+\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\"p must be between 0.0 and 1.0, inclusive.\");\n+\t\t}\n+\t\t// by default, do simple root finding using bracketing and default solver.\n         // subclasses can overide if there is a better method.\n         UnivariateRealFunction rootFindingFunction =\n             new UnivariateRealFunction() {\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return numeratorDegreesOfFreedom;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java", 
          "line": 67, 
          "faulty": "UnivariateRealFunction rootFindingFunction=new UnivariateRealFunction(){\n  public double value(  double x) throws FunctionEvaluationException {\n    try {\n      return cumulativeProbability(x) - p;\n    }\n catch (    MathException ex) {\n      throw new FunctionEvaluationException(x,ex.getPattern(),ex.getArguments(),ex);\n    }\n  }\n}\n;", 
          "type": "InsertBefore", 
          "seed": "if (p < 0.0 || p > 1.0) {\n  throw new IllegalArgumentException(\"p must be between 0.0 and 1.0, inclusive.\");\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java", 
          "line": 61, 
          "faulty": "if (p < 0.0 || p > 1.0) {\n  throw new IllegalArgumentException(\"p must be between 0.0 and 1.0, inclusive.\");\n}", 
          "type": "InsertBefore", 
          "seed": "if (p < 0.0 || p > 1.0) {\n  throw new IllegalArgumentException(\"probability of success must be between 0.0 and 1.0, inclusive.\");\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_1724/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 06:03:43.091921716 -0500\n@@ -100,7 +100,8 @@\n         if (p == 0) {\n             return 0d;\n         }\n-        if (p == 1) {\n+        setNumeratorDegreesOfFreedom(numeratorDegreesOfFreedom);\n+\t\tif (p == 1) {\n             return Double.POSITIVE_INFINITY;\n         }\n         return super.inverseCumulativeProbability(p);\n@@ -145,7 +146,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return denominatorDegreesOfFreedom;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return denominatorDegreesOfFreedom;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 103, 
          "faulty": "if (p == 1) {\n  return Double.POSITIVE_INFINITY;\n}", 
          "type": "InsertBefore", 
          "seed": "setNumeratorDegreesOfFreedom(numeratorDegreesOfFreedom);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_1915/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 06:05:53.791979965 -0500\n@@ -145,7 +145,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0;\n     }\n     \n     /**\n\n\n--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\t2018-12-01 05:43:11.219151160 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_1915/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\t2018-12-01 06:05:53.795979967 -0500\n@@ -62,7 +62,11 @@\n             throw new IllegalArgumentException(\"p must be between 0.0 and 1.0, inclusive.\");\n         }\n \n-        // by default, do simple root finding using bracketing and default solver.\n+        if (p <= 0) {\n+\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\"The Poisson mean must be positive\");\n+\t\t}\n+\t\t// by default, do simple root finding using bracketing and default solver.\n         // subclasses can overide if there is a better method.\n         UnivariateRealFunction rootFindingFunction =\n             new UnivariateRealFunction() {\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java", 
          "line": 67, 
          "faulty": "UnivariateRealFunction rootFindingFunction=new UnivariateRealFunction(){\n  public double value(  double x) throws FunctionEvaluationException {\n    try {\n      return cumulativeProbability(x) - p;\n    }\n catch (    MathException ex) {\n      throw new FunctionEvaluationException(x,ex.getPattern(),ex.getArguments(),ex);\n    }\n  }\n}\n;", 
          "type": "InsertBefore", 
          "seed": "if (p <= 0) {\n  throw new IllegalArgumentException(\"The Poisson mean must be positive\");\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_258/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:47:10.059215152 -0500\n@@ -69,7 +69,8 @@\n      */\n     public double cumulativeProbability(double x) throws MathException {\n         double ret;\n-        if (x <= 0.0) {\n+        setDenominatorDegreesOfFreedom(denominatorDegreesOfFreedom);\n+\t\tif (x <= 0.0) {\n             ret = 0.0;\n         } else {\n             double n = getNumeratorDegreesOfFreedom();\n@@ -145,7 +146,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0;\n     }\n     \n     /**\n\n\n--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\t2018-12-01 05:43:11.219151160 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_258/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\t2018-12-01 05:47:10.059215152 -0500\n@@ -76,7 +76,10 @@\n             }\n         };\n               \n-        // Try to bracket root, test domain endoints if this fails     \n+        if (p == 1) {\n+\t\t\treturn Double.POSITIVE_INFINITY;\n+\t\t}\n+\t\t// Try to bracket root, test domain endoints if this fails     \n         double lowerBound = getDomainLowerBound(p);\n         double upperBound = getDomainUpperBound(p);\n         double[] bracket = null;\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 72, 
          "faulty": "if (x <= 0.0) {\n  ret=0.0;\n}\n else {\n  double n=getNumeratorDegreesOfFreedom();\n  double m=getDenominatorDegreesOfFreedom();\n  ret=Beta.regularizedBeta((n * x) / (m + n * x),0.5 * n,0.5 * m);\n}", 
          "type": "InsertBefore", 
          "seed": "setDenominatorDegreesOfFreedom(denominatorDegreesOfFreedom);"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java", 
          "line": 80, 
          "faulty": "double lowerBound=getDomainLowerBound(p);", 
          "type": "InsertBefore", 
          "seed": "if (p == 1) {\n  return Double.POSITIVE_INFINITY;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_644/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:51:29.191478041 -0500\n@@ -145,7 +145,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0.0d;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0.0d;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_123/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:45:48.335155444 -0500\n@@ -69,7 +69,8 @@\n      */\n     public double cumulativeProbability(double x) throws MathException {\n         double ret;\n-        if (x <= 0.0) {\n+        setDenominatorDegreesOfFreedom(denominatorDegreesOfFreedom);\n+\t\tif (x <= 0.0) {\n             ret = 0.0;\n         } else {\n             double n = getNumeratorDegreesOfFreedom();\n@@ -145,7 +146,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 72, 
          "faulty": "if (x <= 0.0) {\n  ret=0.0;\n}\n else {\n  double n=getNumeratorDegreesOfFreedom();\n  double m=getDenominatorDegreesOfFreedom();\n  ret=Beta.regularizedBeta((n * x) / (m + n * x),0.5 * n,0.5 * m);\n}", 
          "type": "InsertBefore", 
          "seed": "setDenominatorDegreesOfFreedom(denominatorDegreesOfFreedom);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_1808/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 06:04:47.419949163 -0500\n@@ -145,7 +145,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0d;\n     }\n     \n     /**\n\n\n--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java\t2018-12-01 05:43:11.219151160 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_1808/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java\t2018-12-01 06:04:47.419949163 -0500\n@@ -171,7 +171,10 @@\n         if (function == null) {\n             throw new IllegalArgumentException (\"function is null.\");\n         }\n-        if (maximumIterations <= 0)  {\n+        if (factory == null) {\n+\t\t\tfactory = UnivariateRealSolverFactory.newInstance();\n+\t\t}\n+\t\tif (maximumIterations <= 0)  {\n             throw new IllegalArgumentException\n             (\"bad value for maximumIterations: \" + maximumIterations);\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0d;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java", 
          "line": 174, 
          "faulty": "if (maximumIterations <= 0) {\n  throw new IllegalArgumentException(\"bad value for maximumIterations: \" + maximumIterations);\n}", 
          "type": "InsertBefore", 
          "seed": "if (factory == null) {\n  factory=UnivariateRealSolverFactory.newInstance();\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_514/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:49:47.275379189 -0500\n@@ -69,7 +69,8 @@\n      */\n     public double cumulativeProbability(double x) throws MathException {\n         double ret;\n-        if (x <= 0.0) {\n+        ret = 0.0;\n+\t\tif (x <= 0.0) {\n             ret = 0.0;\n         } else {\n             double n = getNumeratorDegreesOfFreedom();\n@@ -145,7 +146,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0d;\n     }\n     \n     /**\n\n\n--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\t2018-12-01 05:43:11.219151160 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_514/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\t2018-12-01 05:49:47.275379189 -0500\n@@ -62,7 +62,10 @@\n             throw new IllegalArgumentException(\"p must be between 0.0 and 1.0, inclusive.\");\n         }\n \n-        // by default, do simple root finding using bracketing and default solver.\n+        if (p == 0) {\n+\t\t\treturn 0d;\n+\t\t}\n+\t\t// by default, do simple root finding using bracketing and default solver.\n         // subclasses can overide if there is a better method.\n         UnivariateRealFunction rootFindingFunction =\n             new UnivariateRealFunction() {\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0d;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 72, 
          "faulty": "if (x <= 0.0) {\n  ret=0.0;\n}\n else {\n  double n=getNumeratorDegreesOfFreedom();\n  double m=getDenominatorDegreesOfFreedom();\n  ret=Beta.regularizedBeta((n * x) / (m + n * x),0.5 * n,0.5 * m);\n}", 
          "type": "InsertBefore", 
          "seed": "ret=0.0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java", 
          "line": 67, 
          "faulty": "UnivariateRealFunction rootFindingFunction=new UnivariateRealFunction(){\n  public double value(  double x) throws FunctionEvaluationException {\n    try {\n      return cumulativeProbability(x) - p;\n    }\n catch (    MathException ex) {\n      throw new FunctionEvaluationException(x,ex.getPattern(),ex.getArguments(),ex);\n    }\n  }\n}\n;", 
          "type": "InsertBefore", 
          "seed": "if (p == 0) {\n  return 0d;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_205/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:46:45.375185096 -0500\n@@ -145,7 +145,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 1.0d;\n     }\n     \n     /**\n\n\n--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\t2018-12-01 05:43:11.219151160 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_205/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\t2018-12-01 05:46:45.375185096 -0500\n@@ -62,7 +62,11 @@\n             throw new IllegalArgumentException(\"p must be between 0.0 and 1.0, inclusive.\");\n         }\n \n-        // by default, do simple root finding using bracketing and default solver.\n+        if (p <= 0) {\n+\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\"The Poisson mean must be positive\");\n+\t\t}\n+\t\t// by default, do simple root finding using bracketing and default solver.\n         // subclasses can overide if there is a better method.\n         UnivariateRealFunction rootFindingFunction =\n             new UnivariateRealFunction() {\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 1.0d;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java", 
          "line": 67, 
          "faulty": "UnivariateRealFunction rootFindingFunction=new UnivariateRealFunction(){\n  public double value(  double x) throws FunctionEvaluationException {\n    try {\n      return cumulativeProbability(x) - p;\n    }\n catch (    MathException ex) {\n      throw new FunctionEvaluationException(x,ex.getPattern(),ex.getArguments(),ex);\n    }\n  }\n}\n;", 
          "type": "InsertBefore", 
          "seed": "if (p <= 0) {\n  throw new IllegalArgumentException(\"The Poisson mean must be positive\");\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_1508/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 06:01:32.199876235 -0500\n@@ -145,7 +145,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return numeratorDegreesOfFreedom;\n     }\n     \n     /**\n\n\n--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\t2018-12-01 05:43:11.219151160 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_1508/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\t2018-12-01 06:01:32.203876236 -0500\n@@ -78,7 +78,10 @@\n               \n         // Try to bracket root, test domain endoints if this fails     \n         double lowerBound = getDomainLowerBound(p);\n-        double upperBound = getDomainUpperBound(p);\n+        if (p == 0) {\n+\t\t\treturn -1;\n+\t\t}\n+\t\tdouble upperBound = getDomainUpperBound(p);\n         double[] bracket = null;\n         try {\n             bracket = UnivariateRealSolverUtils.bracket(\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return numeratorDegreesOfFreedom;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java", 
          "line": 81, 
          "faulty": "double upperBound=getDomainUpperBound(p);", 
          "type": "InsertBefore", 
          "seed": "if (p == 0) {\n  return -1;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_640/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:51:28.111477060 -0500\n@@ -72,7 +72,15 @@\n         if (x <= 0.0) {\n             ret = 0.0;\n         } else {\n-            double n = getNumeratorDegreesOfFreedom();\n+            if (x <= 0.0) {\n+\t\t\t\tret = 0.0;\n+\t\t\t} else {\n+\t\t\t\tdouble n = getNumeratorDegreesOfFreedom();\n+\t\t\t\tdouble m = getDenominatorDegreesOfFreedom();\n+\t\t\t\tret = Beta.regularizedBeta((n * x) / (m + n * x), 0.5 * n,\n+\t\t\t\t\t\t0.5 * m);\n+\t\t\t}\n+\t\t\tdouble n = getNumeratorDegreesOfFreedom();\n             double m = getDenominatorDegreesOfFreedom();\n             \n             ret = Beta.regularizedBeta((n * x) / (m + n * x),\n@@ -142,10 +150,14 @@\n      */\n     protected double getInitialDomain(double p) {\n         double ret;\n-        double d = getDenominatorDegreesOfFreedom();\n+        if (p < 0.0 || p > 1.0) {\n+\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\"p must be between 0.0 and 1.0, inclusive.\");\n+\t\t}\n+\t\tdouble d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 75, 
          "faulty": "double n=getNumeratorDegreesOfFreedom();", 
          "type": "InsertBefore", 
          "seed": "if (x <= 0.0) {\n  ret=0.0;\n}\n else {\n  double n=getNumeratorDegreesOfFreedom();\n  double m=getDenominatorDegreesOfFreedom();\n  ret=Beta.regularizedBeta((n * x) / (m + n * x),0.5 * n,0.5 * m);\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 145, 
          "faulty": "double d=getDenominatorDegreesOfFreedom();", 
          "type": "InsertBefore", 
          "seed": "if (p < 0.0 || p > 1.0) {\n  throw new IllegalArgumentException(\"p must be between 0.0 and 1.0, inclusive.\");\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_706/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:52:06.731511445 -0500\n@@ -145,7 +145,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0;\n     }\n     \n     /**\n\n\n--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\t2018-12-01 05:43:11.219151160 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_706/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\t2018-12-01 05:52:06.731511445 -0500\n@@ -76,7 +76,11 @@\n             }\n         };\n               \n-        // Try to bracket root, test domain endoints if this fails     \n+        if (p < 0.0 || p > 1.0) {\n+\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\"p must be between 0 and 1.0 (inclusive)\");\n+\t\t}\n+\t\t// Try to bracket root, test domain endoints if this fails     \n         double lowerBound = getDomainLowerBound(p);\n         double upperBound = getDomainUpperBound(p);\n         double[] bracket = null;\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java", 
          "line": 80, 
          "faulty": "double lowerBound=getDomainLowerBound(p);", 
          "type": "InsertBefore", 
          "seed": "if (p < 0.0 || p > 1.0) {\n  throw new IllegalArgumentException(\"p must be between 0 and 1.0 (inclusive)\");\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_630/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:51:25.155474364 -0500\n@@ -69,7 +69,8 @@\n      */\n     public double cumulativeProbability(double x) throws MathException {\n         double ret;\n-        if (x <= 0.0) {\n+        ret = 0.0;\n+\t\tif (x <= 0.0) {\n             ret = 0.0;\n         } else {\n             double n = getNumeratorDegreesOfFreedom();\n@@ -145,7 +146,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0;\n     }\n     \n     /**\n\n\n--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\t2018-12-01 05:43:11.219151160 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_630/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\t2018-12-01 05:51:25.155474364 -0500\n@@ -78,7 +78,10 @@\n               \n         // Try to bracket root, test domain endoints if this fails     \n         double lowerBound = getDomainLowerBound(p);\n-        double upperBound = getDomainUpperBound(p);\n+        if (p == 1) {\n+\t\t\treturn Double.POSITIVE_INFINITY;\n+\t\t}\n+\t\tdouble upperBound = getDomainUpperBound(p);\n         double[] bracket = null;\n         try {\n             bracket = UnivariateRealSolverUtils.bracket(\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 72, 
          "faulty": "if (x <= 0.0) {\n  ret=0.0;\n}\n else {\n  double n=getNumeratorDegreesOfFreedom();\n  double m=getDenominatorDegreesOfFreedom();\n  ret=Beta.regularizedBeta((n * x) / (m + n * x),0.5 * n,0.5 * m);\n}", 
          "type": "InsertBefore", 
          "seed": "ret=0.0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java", 
          "line": 81, 
          "faulty": "double upperBound=getDomainUpperBound(p);", 
          "type": "InsertBefore", 
          "seed": "if (p == 1) {\n  return Double.POSITIVE_INFINITY;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_1088/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:56:39.871724508 -0500\n@@ -145,7 +145,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0d;\n     }\n     \n     /**\n\n\n--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java\t2018-12-01 05:43:11.219151160 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_1088/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java\t2018-12-01 05:56:39.871724508 -0500\n@@ -176,7 +176,10 @@\n             (\"bad value for maximumIterations: \" + maximumIterations);\n         }\n         if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n-            throw new IllegalArgumentException\n+            if (function == null) {\n+\t\t\t\tthrow new IllegalArgumentException(\"function is null.\");\n+\t\t\t}\n+\t\t\tthrow new IllegalArgumentException\n             (\"Invalid endpoint parameters:  lowerBound=\" + lowerBound + \n               \" initial=\" + initial + \" upperBound=\" + upperBound);\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0d;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java", 
          "line": 179, 
          "faulty": "throw new IllegalArgumentException(\"Invalid endpoint parameters:  lowerBound=\" + lowerBound + \" initial=\"+ initial+ \" upperBound=\"+ upperBound);", 
          "type": "InsertBefore", 
          "seed": "if (function == null) {\n  throw new IllegalArgumentException(\"function is null.\");\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_1358/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:59:35.463831811 -0500\n@@ -143,9 +143,8 @@\n     protected double getInitialDomain(double p) {\n         double ret;\n         double d = getDenominatorDegreesOfFreedom();\n-            // use mean\n-            ret = d / (d - 2.0);\n-        return ret;\n+            ret = 1.0;\n+        return 0;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 147, 
          "faulty": "ret=d / (d - 2.0);", 
          "type": "Replace", 
          "seed": "ret=1.0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_291/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:47:32.343241104 -0500\n@@ -143,9 +143,7 @@\n     protected double getInitialDomain(double p) {\n         double ret;\n         double d = getDenominatorDegreesOfFreedom();\n-            // use mean\n-            ret = d / (d - 2.0);\n-        return ret;\n+            return 1.0d;\n     }\n     \n     /**\n\n\n--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\t2018-12-01 05:43:11.219151160 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_291/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\t2018-12-01 05:47:32.347241109 -0500\n@@ -62,7 +62,10 @@\n             throw new IllegalArgumentException(\"p must be between 0.0 and 1.0, inclusive.\");\n         }\n \n-        // by default, do simple root finding using bracketing and default solver.\n+        if (p == 0) {\n+\t\t\treturn 0d;\n+\t\t}\n+\t\t// by default, do simple root finding using bracketing and default solver.\n         // subclasses can overide if there is a better method.\n         UnivariateRealFunction rootFindingFunction =\n             new UnivariateRealFunction() {\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 1.0d;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 147, 
          "faulty": "ret=d / (d - 2.0);", 
          "type": "Delete", 
          "seed": "if (p < 0.0 || p > 1.0) {\n  throw new IllegalArgumentException(\"probability of success must be between 0.0 and 1.0, inclusive.\");\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java", 
          "line": 67, 
          "faulty": "UnivariateRealFunction rootFindingFunction=new UnivariateRealFunction(){\n  public double value(  double x) throws FunctionEvaluationException {\n    try {\n      return cumulativeProbability(x) - p;\n    }\n catch (    MathException ex) {\n      throw new FunctionEvaluationException(x,ex.getPattern(),ex.getArguments(),ex);\n    }\n  }\n}\n;", 
          "type": "InsertBefore", 
          "seed": "if (p == 0) {\n  return 0d;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_662/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:51:40.675488411 -0500\n@@ -69,7 +69,8 @@\n      */\n     public double cumulativeProbability(double x) throws MathException {\n         double ret;\n-        if (x <= 0.0) {\n+        ret = Double.NEGATIVE_INFINITY;\n+\t\tif (x <= 0.0) {\n             ret = 0.0;\n         } else {\n             double n = getNumeratorDegreesOfFreedom();\n@@ -143,9 +144,10 @@\n     protected double getInitialDomain(double p) {\n         double ret;\n         double d = getDenominatorDegreesOfFreedom();\n-            // use mean\n-            ret = d / (d - 2.0);\n-        return ret;\n+            if (p == 0) {\n+\t\t\t\treturn -1;\n+\t\t\t}\n+        return 0;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 147, 
          "faulty": "ret=d / (d - 2.0);", 
          "type": "Replace", 
          "seed": "if (p == 0) {\n  return -1;\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 72, 
          "faulty": "if (x <= 0.0) {\n  ret=0.0;\n}\n else {\n  double n=getNumeratorDegreesOfFreedom();\n  double m=getDenominatorDegreesOfFreedom();\n  ret=Beta.regularizedBeta((n * x) / (m + n * x),0.5 * n,0.5 * m);\n}", 
          "type": "InsertBefore", 
          "seed": "ret=Double.NEGATIVE_INFINITY;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_1471/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 06:01:02.603868526 -0500\n@@ -145,7 +145,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0;\n     }\n     \n     /**\n\n\n--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\t2018-12-01 05:43:11.219151160 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_1471/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\t2018-12-01 06:01:02.603868526 -0500\n@@ -78,7 +78,11 @@\n               \n         // Try to bracket root, test domain endoints if this fails     \n         double lowerBound = getDomainLowerBound(p);\n-        double upperBound = getDomainUpperBound(p);\n+        if (p < 0.0 || p > 1.0) {\n+\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\"p must be between 0 and 1.0 (inclusive)\");\n+\t\t}\n+\t\tdouble upperBound = getDomainUpperBound(p);\n         double[] bracket = null;\n         try {\n             bracket = UnivariateRealSolverUtils.bracket(\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java", 
          "line": 81, 
          "faulty": "double upperBound=getDomainUpperBound(p);", 
          "type": "InsertBefore", 
          "seed": "if (p < 0.0 || p > 1.0) {\n  throw new IllegalArgumentException(\"p must be between 0 and 1.0 (inclusive)\");\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_1879/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 06:05:29.479968428 -0500\n@@ -145,7 +145,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 82, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return ret;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_495/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:49:35.435368154 -0500\n@@ -72,7 +72,15 @@\n         if (x <= 0.0) {\n             ret = 0.0;\n         } else {\n-            double n = getNumeratorDegreesOfFreedom();\n+            if (x <= 0.0) {\n+\t\t\t\tret = 0.0;\n+\t\t\t} else {\n+\t\t\t\tdouble n = getNumeratorDegreesOfFreedom();\n+\t\t\t\tdouble m = getDenominatorDegreesOfFreedom();\n+\t\t\t\tret = Beta.regularizedBeta((n * x) / (m + n * x), 0.5 * n,\n+\t\t\t\t\t\t0.5 * m);\n+\t\t\t}\n+\t\t\tdouble n = getNumeratorDegreesOfFreedom();\n             double m = getDenominatorDegreesOfFreedom();\n             \n             ret = Beta.regularizedBeta((n * x) / (m + n * x),\n@@ -142,10 +150,14 @@\n      */\n     protected double getInitialDomain(double p) {\n         double ret;\n-        double d = getDenominatorDegreesOfFreedom();\n+        if (p < 0.0 || p > 1.0) {\n+\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\"probability of success must be between 0.0 and 1.0, inclusive.\");\n+\t\t}\n+\t\tdouble d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0d;\n     }\n     \n     /**\n@@ -181,7 +193,11 @@\n             throw new IllegalArgumentException(\n                 \"degrees of freedom must be positive.\");\n         }\n-        this.denominatorDegreesOfFreedom = degreesOfFreedom;\n+        if (degreesOfFreedom <= 0.0) {\n+\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\"degrees of freedom must be positive.\");\n+\t\t}\n+\t\tthis.denominatorDegreesOfFreedom = degreesOfFreedom;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0d;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 75, 
          "faulty": "double n=getNumeratorDegreesOfFreedom();", 
          "type": "InsertBefore", 
          "seed": "if (x <= 0.0) {\n  ret=0.0;\n}\n else {\n  double n=getNumeratorDegreesOfFreedom();\n  double m=getDenominatorDegreesOfFreedom();\n  ret=Beta.regularizedBeta((n * x) / (m + n * x),0.5 * n,0.5 * m);\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 184, 
          "faulty": "this.denominatorDegreesOfFreedom=degreesOfFreedom;", 
          "type": "InsertBefore", 
          "seed": "if (degreesOfFreedom <= 0.0) {\n  throw new IllegalArgumentException(\"degrees of freedom must be positive.\");\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 145, 
          "faulty": "double d=getDenominatorDegreesOfFreedom();", 
          "type": "InsertBefore", 
          "seed": "if (p < 0.0 || p > 1.0) {\n  throw new IllegalArgumentException(\"probability of success must be between 0.0 and 1.0, inclusive.\");\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_683/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:51:53.155499527 -0500\n@@ -72,7 +72,15 @@\n         if (x <= 0.0) {\n             ret = 0.0;\n         } else {\n-            double n = getNumeratorDegreesOfFreedom();\n+            if (x <= 0.0) {\n+\t\t\t\tret = 0.0;\n+\t\t\t} else {\n+\t\t\t\tdouble n = getNumeratorDegreesOfFreedom();\n+\t\t\t\tdouble m = getDenominatorDegreesOfFreedom();\n+\t\t\t\tret = Beta.regularizedBeta((n * x) / (m + n * x), 0.5 * n,\n+\t\t\t\t\t\t0.5 * m);\n+\t\t\t}\n+\t\t\tdouble n = getNumeratorDegreesOfFreedom();\n             double m = getDenominatorDegreesOfFreedom();\n             \n             ret = Beta.regularizedBeta((n * x) / (m + n * x),\n@@ -145,7 +153,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0;\n     }\n     \n     /**\n\n\n--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\t2018-12-01 05:43:11.219151160 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_683/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\t2018-12-01 05:51:53.155499527 -0500\n@@ -62,7 +62,10 @@\n             throw new IllegalArgumentException(\"p must be between 0.0 and 1.0, inclusive.\");\n         }\n \n-        // by default, do simple root finding using bracketing and default solver.\n+        if (p == 0) {\n+\t\t\treturn 0d;\n+\t\t}\n+\t\t// by default, do simple root finding using bracketing and default solver.\n         // subclasses can overide if there is a better method.\n         UnivariateRealFunction rootFindingFunction =\n             new UnivariateRealFunction() {\n@@ -76,7 +79,10 @@\n             }\n         };\n               \n-        // Try to bracket root, test domain endoints if this fails     \n+        if (p == 1) {\n+\t\t\treturn Double.POSITIVE_INFINITY;\n+\t\t}\n+\t\t// Try to bracket root, test domain endoints if this fails     \n         double lowerBound = getDomainLowerBound(p);\n         double upperBound = getDomainUpperBound(p);\n         double[] bracket = null;\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 75, 
          "faulty": "double n=getNumeratorDegreesOfFreedom();", 
          "type": "InsertBefore", 
          "seed": "if (x <= 0.0) {\n  ret=0.0;\n}\n else {\n  double n=getNumeratorDegreesOfFreedom();\n  double m=getDenominatorDegreesOfFreedom();\n  ret=Beta.regularizedBeta((n * x) / (m + n * x),0.5 * n,0.5 * m);\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java", 
          "line": 67, 
          "faulty": "UnivariateRealFunction rootFindingFunction=new UnivariateRealFunction(){\n  public double value(  double x) throws FunctionEvaluationException {\n    try {\n      return cumulativeProbability(x) - p;\n    }\n catch (    MathException ex) {\n      throw new FunctionEvaluationException(x,ex.getPattern(),ex.getArguments(),ex);\n    }\n  }\n}\n;", 
          "type": "InsertBefore", 
          "seed": "if (p == 0) {\n  return 0d;\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java", 
          "line": 80, 
          "faulty": "double lowerBound=getDomainLowerBound(p);", 
          "type": "InsertBefore", 
          "seed": "if (p == 1) {\n  return Double.POSITIVE_INFINITY;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_391/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:48:40.563314540 -0500\n@@ -143,9 +143,8 @@\n     protected double getInitialDomain(double p) {\n         double ret;\n         double d = getDenominatorDegreesOfFreedom();\n-            // use mean\n-            ret = d / (d - 2.0);\n-        return ret;\n+            setNumeratorDegreesOfFreedom(numeratorDegreesOfFreedom);\n+        return 0;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 147, 
          "faulty": "ret=d / (d - 2.0);", 
          "type": "Replace", 
          "seed": "setNumeratorDegreesOfFreedom(numeratorDegreesOfFreedom);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_471/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:49:21.567355000 -0500\n@@ -69,7 +69,8 @@\n      */\n     public double cumulativeProbability(double x) throws MathException {\n         double ret;\n-        if (x <= 0.0) {\n+        ret = Double.MAX_VALUE;\n+\t\tif (x <= 0.0) {\n             ret = 0.0;\n         } else {\n             double n = getNumeratorDegreesOfFreedom();\n@@ -145,7 +146,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 72, 
          "faulty": "if (x <= 0.0) {\n  ret=0.0;\n}\n else {\n  double n=getNumeratorDegreesOfFreedom();\n  double m=getDenominatorDegreesOfFreedom();\n  ret=Beta.regularizedBeta((n * x) / (m + n * x),0.5 * n,0.5 * m);\n}", 
          "type": "InsertBefore", 
          "seed": "ret=Double.MAX_VALUE;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_1071/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:56:27.579715684 -0500\n@@ -145,7 +145,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0;\n     }\n     \n     /**\n\n\n--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\t2018-12-01 05:43:11.219151160 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_1071/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\t2018-12-01 05:56:27.579715684 -0500\n@@ -79,7 +79,11 @@\n         // Try to bracket root, test domain endoints if this fails     \n         double lowerBound = getDomainLowerBound(p);\n         double upperBound = getDomainUpperBound(p);\n-        double[] bracket = null;\n+        if (p < 0.0 || p > 1.0) {\n+\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\"p must be between 0 and 1.0 (inclusive)\");\n+\t\t}\n+\t\tdouble[] bracket = null;\n         try {\n             bracket = UnivariateRealSolverUtils.bracket(\n                     rootFindingFunction, getInitialDomain(p),\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java", 
          "line": 82, 
          "faulty": "double[] bracket=null;", 
          "type": "InsertBefore", 
          "seed": "if (p < 0.0 || p > 1.0) {\n  throw new IllegalArgumentException(\"p must be between 0 and 1.0 (inclusive)\");\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_1609/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 06:02:20.379891033 -0500\n@@ -73,7 +73,8 @@\n             ret = 0.0;\n         } else {\n             double n = getNumeratorDegreesOfFreedom();\n-            double m = getDenominatorDegreesOfFreedom();\n+            ret = 0.0;\n+\t\t\tdouble m = getDenominatorDegreesOfFreedom();\n             \n             ret = Beta.regularizedBeta((n * x) / (m + n * x),\n                 0.5 * n,\n@@ -145,7 +146,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0d;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0d;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 76, 
          "faulty": "double m=getDenominatorDegreesOfFreedom();", 
          "type": "InsertBefore", 
          "seed": "ret=0.0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_1015/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:55:56.535693171 -0500\n@@ -72,7 +72,15 @@\n         if (x <= 0.0) {\n             ret = 0.0;\n         } else {\n-            double n = getNumeratorDegreesOfFreedom();\n+            if (x <= 0.0) {\n+\t\t\t\tret = 0.0;\n+\t\t\t} else {\n+\t\t\t\tdouble n = getNumeratorDegreesOfFreedom();\n+\t\t\t\tdouble m = getDenominatorDegreesOfFreedom();\n+\t\t\t\tret = Beta.regularizedBeta((n * x) / (m + n * x), 0.5 * n,\n+\t\t\t\t\t\t0.5 * m);\n+\t\t\t}\n+\t\t\tdouble n = getNumeratorDegreesOfFreedom();\n             double m = getDenominatorDegreesOfFreedom();\n             \n             ret = Beta.regularizedBeta((n * x) / (m + n * x),\n@@ -145,7 +153,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return Double.MIN_VALUE;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return Double.MIN_VALUE;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 75, 
          "faulty": "double n=getNumeratorDegreesOfFreedom();", 
          "type": "InsertBefore", 
          "seed": "if (x <= 0.0) {\n  ret=0.0;\n}\n else {\n  double n=getNumeratorDegreesOfFreedom();\n  double m=getDenominatorDegreesOfFreedom();\n  ret=Beta.regularizedBeta((n * x) / (m + n * x),0.5 * n,0.5 * m);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_288/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:47:31.611240268 -0500\n@@ -72,7 +72,15 @@\n         if (x <= 0.0) {\n             ret = 0.0;\n         } else {\n-            double n = getNumeratorDegreesOfFreedom();\n+            if (x <= 0.0) {\n+\t\t\t\tret = 0.0;\n+\t\t\t} else {\n+\t\t\t\tdouble n = getNumeratorDegreesOfFreedom();\n+\t\t\t\tdouble m = getDenominatorDegreesOfFreedom();\n+\t\t\t\tret = Beta.regularizedBeta((n * x) / (m + n * x), 0.5 * n,\n+\t\t\t\t\t\t0.5 * m);\n+\t\t\t}\n+\t\t\tdouble n = getNumeratorDegreesOfFreedom();\n             double m = getDenominatorDegreesOfFreedom();\n             \n             ret = Beta.regularizedBeta((n * x) / (m + n * x),\n@@ -145,7 +153,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 75, 
          "faulty": "double n=getNumeratorDegreesOfFreedom();", 
          "type": "InsertBefore", 
          "seed": "if (x <= 0.0) {\n  ret=0.0;\n}\n else {\n  double n=getNumeratorDegreesOfFreedom();\n  double m=getDenominatorDegreesOfFreedom();\n  ret=Beta.regularizedBeta((n * x) / (m + n * x),0.5 * n,0.5 * m);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_126/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:45:49.319155470 -0500\n@@ -97,9 +97,6 @@\n      */\n     public double inverseCumulativeProbability(final double p) \n         throws MathException {\n-        if (p == 0) {\n-            return 0d;\n-        }\n         if (p == 1) {\n             return Double.POSITIVE_INFINITY;\n         }\n@@ -145,7 +142,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return denominatorDegreesOfFreedom;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return denominatorDegreesOfFreedom;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 100, 
          "faulty": "if (p == 0) {\n  return 0d;\n}", 
          "type": "Delete", 
          "seed": "if (p <= 0) {\n  throw new IllegalArgumentException(\"The Poisson mean must be positive\");\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_474/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:49:22.279355682 -0500\n@@ -145,7 +145,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0d;\n     }\n     \n     /**\n\n\n--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java\t2018-12-01 05:43:11.219151160 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_474/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java\t2018-12-01 05:49:22.283355686 -0500\n@@ -171,7 +171,8 @@\n         if (function == null) {\n             throw new IllegalArgumentException (\"function is null.\");\n         }\n-        if (maximumIterations <= 0)  {\n+        factory = UnivariateRealSolverFactory.newInstance();\n+\t\tif (maximumIterations <= 0)  {\n             throw new IllegalArgumentException\n             (\"bad value for maximumIterations: \" + maximumIterations);\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0d;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java", 
          "line": 174, 
          "faulty": "if (maximumIterations <= 0) {\n  throw new IllegalArgumentException(\"bad value for maximumIterations: \" + maximumIterations);\n}", 
          "type": "InsertBefore", 
          "seed": "factory=UnivariateRealSolverFactory.newInstance();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_1861/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 06:05:17.479962838 -0500\n@@ -116,7 +116,8 @@\n      *         P(X &lt; <i>lower bound</i>) &lt; <code>p</code> \n      */\n     protected double getDomainLowerBound(double p) {\n-        return 0.0;\n+        setNumeratorDegreesOfFreedom(numeratorDegreesOfFreedom);\n+\t\treturn 0.0;\n     }\n \n     /**\n@@ -145,7 +146,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 119, 
          "faulty": "return 0.0;", 
          "type": "InsertBefore", 
          "seed": "setNumeratorDegreesOfFreedom(numeratorDegreesOfFreedom);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_659/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:51:39.955487765 -0500\n@@ -72,7 +72,15 @@\n         if (x <= 0.0) {\n             ret = 0.0;\n         } else {\n-            double n = getNumeratorDegreesOfFreedom();\n+            if (x <= 0.0) {\n+\t\t\t\tret = 0.0;\n+\t\t\t} else {\n+\t\t\t\tdouble n = getNumeratorDegreesOfFreedom();\n+\t\t\t\tdouble m = getDenominatorDegreesOfFreedom();\n+\t\t\t\tret = Beta.regularizedBeta((n * x) / (m + n * x), 0.5 * n,\n+\t\t\t\t\t\t0.5 * m);\n+\t\t\t}\n+\t\t\tdouble n = getNumeratorDegreesOfFreedom();\n             double m = getDenominatorDegreesOfFreedom();\n             \n             ret = Beta.regularizedBeta((n * x) / (m + n * x),\n@@ -116,7 +124,8 @@\n      *         P(X &lt; <i>lower bound</i>) &lt; <code>p</code> \n      */\n     protected double getDomainLowerBound(double p) {\n-        return 0.0;\n+        setDenominatorDegreesOfFreedom(denominatorDegreesOfFreedom);\n+\t\treturn 0.0;\n     }\n \n     /**\n@@ -145,7 +154,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 75, 
          "faulty": "double n=getNumeratorDegreesOfFreedom();", 
          "type": "InsertBefore", 
          "seed": "if (x <= 0.0) {\n  ret=0.0;\n}\n else {\n  double n=getNumeratorDegreesOfFreedom();\n  double m=getDenominatorDegreesOfFreedom();\n  ret=Beta.regularizedBeta((n * x) / (m + n * x),0.5 * n,0.5 * m);\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 119, 
          "faulty": "return 0.0;", 
          "type": "InsertBefore", 
          "seed": "setDenominatorDegreesOfFreedom(denominatorDegreesOfFreedom);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_1774/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 06:04:12.999934143 -0500\n@@ -145,7 +145,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return denominatorDegreesOfFreedom;\n     }\n     \n     /**\n\n\n--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\t2018-12-01 05:43:11.219151160 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_1774/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\t2018-12-01 06:04:13.003934144 -0500\n@@ -78,7 +78,10 @@\n               \n         // Try to bracket root, test domain endoints if this fails     \n         double lowerBound = getDomainLowerBound(p);\n-        double upperBound = getDomainUpperBound(p);\n+        if (p == 1) {\n+\t\t\treturn Double.POSITIVE_INFINITY;\n+\t\t}\n+\t\tdouble upperBound = getDomainUpperBound(p);\n         double[] bracket = null;\n         try {\n             bracket = UnivariateRealSolverUtils.bracket(\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return denominatorDegreesOfFreedom;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java", 
          "line": 81, 
          "faulty": "double upperBound=getDomainUpperBound(p);", 
          "type": "InsertBefore", 
          "seed": "if (p == 1) {\n  return Double.POSITIVE_INFINITY;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_610/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:51:11.511461797 -0500\n@@ -145,7 +145,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return numeratorDegreesOfFreedom;\n     }\n     \n     /**\n\n\n--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\t2018-12-01 05:43:11.219151160 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_610/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\t2018-12-01 05:51:11.515461801 -0500\n@@ -62,7 +62,11 @@\n             throw new IllegalArgumentException(\"p must be between 0.0 and 1.0, inclusive.\");\n         }\n \n-        // by default, do simple root finding using bracketing and default solver.\n+        if (p <= 0) {\n+\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\"The Poisson mean must be positive\");\n+\t\t}\n+\t\t// by default, do simple root finding using bracketing and default solver.\n         // subclasses can overide if there is a better method.\n         UnivariateRealFunction rootFindingFunction =\n             new UnivariateRealFunction() {\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return numeratorDegreesOfFreedom;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java", 
          "line": 67, 
          "faulty": "UnivariateRealFunction rootFindingFunction=new UnivariateRealFunction(){\n  public double value(  double x) throws FunctionEvaluationException {\n    try {\n      return cumulativeProbability(x) - p;\n    }\n catch (    MathException ex) {\n      throw new FunctionEvaluationException(x,ex.getPattern(),ex.getArguments(),ex);\n    }\n  }\n}\n;", 
          "type": "InsertBefore", 
          "seed": "if (p <= 0) {\n  throw new IllegalArgumentException(\"The Poisson mean must be positive\");\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_1619/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 06:02:35.491896182 -0500\n@@ -116,7 +116,8 @@\n      *         P(X &lt; <i>lower bound</i>) &lt; <code>p</code> \n      */\n     protected double getDomainLowerBound(double p) {\n-        return 0.0;\n+        setDenominatorDegreesOfFreedom(denominatorDegreesOfFreedom);\n+\t\treturn 0.0;\n     }\n \n     /**\n@@ -145,7 +146,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0;\n     }\n     \n     /**\n\n\n--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\t2018-12-01 05:43:11.219151160 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_1619/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\t2018-12-01 06:02:35.491896182 -0500\n@@ -62,7 +62,11 @@\n             throw new IllegalArgumentException(\"p must be between 0.0 and 1.0, inclusive.\");\n         }\n \n-        // by default, do simple root finding using bracketing and default solver.\n+        if (p <= 0) {\n+\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\"The Poisson mean must be positive\");\n+\t\t}\n+\t\t// by default, do simple root finding using bracketing and default solver.\n         // subclasses can overide if there is a better method.\n         UnivariateRealFunction rootFindingFunction =\n             new UnivariateRealFunction() {\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java", 
          "line": 67, 
          "faulty": "UnivariateRealFunction rootFindingFunction=new UnivariateRealFunction(){\n  public double value(  double x) throws FunctionEvaluationException {\n    try {\n      return cumulativeProbability(x) - p;\n    }\n catch (    MathException ex) {\n      throw new FunctionEvaluationException(x,ex.getPattern(),ex.getArguments(),ex);\n    }\n  }\n}\n;", 
          "type": "InsertBefore", 
          "seed": "if (p <= 0) {\n  throw new IllegalArgumentException(\"The Poisson mean must be positive\");\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 119, 
          "faulty": "return 0.0;", 
          "type": "InsertBefore", 
          "seed": "setDenominatorDegreesOfFreedom(denominatorDegreesOfFreedom);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_224/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:46:51.455192633 -0500\n@@ -142,10 +142,14 @@\n      */\n     protected double getInitialDomain(double p) {\n         double ret;\n-        double d = getDenominatorDegreesOfFreedom();\n+        if (p < 0.0 || p > 1.0) {\n+\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\"probability of success must be between 0.0 and 1.0, inclusive.\");\n+\t\t}\n+\t\tdouble d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0d;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0d;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 145, 
          "faulty": "double d=getDenominatorDegreesOfFreedom();", 
          "type": "InsertBefore", 
          "seed": "if (p < 0.0 || p > 1.0) {\n  throw new IllegalArgumentException(\"probability of success must be between 0.0 and 1.0, inclusive.\");\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_693/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:51:56.899502831 -0500\n@@ -142,10 +142,14 @@\n      */\n     protected double getInitialDomain(double p) {\n         double ret;\n-        double d = getDenominatorDegreesOfFreedom();\n+        if (p < 0.0 || p > 1.0) {\n+\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\"probability of success must be between 0.0 and 1.0, inclusive.\");\n+\t\t}\n+\t\tdouble d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return numeratorDegreesOfFreedom;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return numeratorDegreesOfFreedom;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 145, 
          "faulty": "double d=getDenominatorDegreesOfFreedom();", 
          "type": "InsertBefore", 
          "seed": "if (p < 0.0 || p > 1.0) {\n  throw new IllegalArgumentException(\"probability of success must be between 0.0 and 1.0, inclusive.\");\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_1209/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:57:51.339774922 -0500\n@@ -145,7 +145,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return numeratorDegreesOfFreedom;\n     }\n     \n     /**\n\n\n--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\t2018-12-01 05:43:11.219151160 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_1209/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\t2018-12-01 05:57:51.339774922 -0500\n@@ -78,7 +78,10 @@\n               \n         // Try to bracket root, test domain endoints if this fails     \n         double lowerBound = getDomainLowerBound(p);\n-        double upperBound = getDomainUpperBound(p);\n+        if (p == 1) {\n+\t\t\treturn Double.POSITIVE_INFINITY;\n+\t\t}\n+\t\tdouble upperBound = getDomainUpperBound(p);\n         double[] bracket = null;\n         try {\n             bracket = UnivariateRealSolverUtils.bracket(\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return numeratorDegreesOfFreedom;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java", 
          "line": 81, 
          "faulty": "double upperBound=getDomainUpperBound(p);", 
          "type": "InsertBefore", 
          "seed": "if (p == 1) {\n  return Double.POSITIVE_INFINITY;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_1411/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 06:00:28.247854071 -0500\n@@ -145,7 +145,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0d;\n     }\n     \n     /**\n\n\n--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java\t2018-12-01 05:43:11.219151160 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_1411/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java\t2018-12-01 06:00:28.251854073 -0500\n@@ -176,9 +176,13 @@\n             (\"bad value for maximumIterations: \" + maximumIterations);\n         }\n         if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n-            throw new IllegalArgumentException\n-            (\"Invalid endpoint parameters:  lowerBound=\" + lowerBound + \n-              \" initial=\" + initial + \" upperBound=\" + upperBound);\n+            if (initial < lowerBound || initial > upperBound\n+\t\t\t\t\t|| lowerBound >= upperBound) {\n+\t\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\t\"Invalid endpoint parameters:  lowerBound=\"\n+\t\t\t\t\t\t\t\t+ lowerBound + \" initial=\" + initial\n+\t\t\t\t\t\t\t\t+ \" upperBound=\" + upperBound);\n+\t\t\t}\n         }\n         double a = initial;\n         double b = initial;\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0d;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java", 
          "line": 179, 
          "faulty": "throw new IllegalArgumentException(\"Invalid endpoint parameters:  lowerBound=\" + lowerBound + \" initial=\"+ initial+ \" upperBound=\"+ upperBound);", 
          "type": "Replace", 
          "seed": "if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n  throw new IllegalArgumentException(\"Invalid endpoint parameters:  lowerBound=\" + lowerBound + \" initial=\"+ initial+ \" upperBound=\"+ upperBound);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_860/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:53:51.787598518 -0500\n@@ -116,7 +116,7 @@\n      *         P(X &lt; <i>lower bound</i>) &lt; <code>p</code> \n      */\n     protected double getDomainLowerBound(double p) {\n-        return 0.0;\n+        return Double.NEGATIVE_INFINITY;\n     }\n \n     /**\n@@ -145,7 +145,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 119, 
          "faulty": "return 0.0;", 
          "type": "Replace", 
          "seed": "return Double.NEGATIVE_INFINITY;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_1225/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:58:02.351782571 -0500\n@@ -145,7 +145,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return denominatorDegreesOfFreedom;\n     }\n     \n     /**\n@@ -178,6 +178,10 @@\n      */\n     public void setDenominatorDegreesOfFreedom(double degreesOfFreedom) {\n         if (degreesOfFreedom <= 0.0) {\n+\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\"degrees of freedom must be positive.\");\n+\t\t}\n+\t\tif (degreesOfFreedom <= 0.0) {\n             throw new IllegalArgumentException(\n                 \"degrees of freedom must be positive.\");\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return denominatorDegreesOfFreedom;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 180, 
          "faulty": "if (degreesOfFreedom <= 0.0) {\n  throw new IllegalArgumentException(\"degrees of freedom must be positive.\");\n}", 
          "type": "InsertBefore", 
          "seed": "if (degreesOfFreedom <= 0.0) {\n  throw new IllegalArgumentException(\"degrees of freedom must be positive.\");\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_266/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:47:23.967231474 -0500\n@@ -142,10 +142,14 @@\n      */\n     protected double getInitialDomain(double p) {\n         double ret;\n-        double d = getDenominatorDegreesOfFreedom();\n+        if (p < 0.0 || p > 1.0) {\n+\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\"p must be between 0.0 and 1.0, inclusive.\");\n+\t\t}\n+\t\tdouble d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0;\n     }\n     \n     /**\n\n\n--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\t2018-12-01 05:43:11.219151160 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_266/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\t2018-12-01 05:47:23.971231479 -0500\n@@ -78,7 +78,11 @@\n               \n         // Try to bracket root, test domain endoints if this fails     \n         double lowerBound = getDomainLowerBound(p);\n-        double upperBound = getDomainUpperBound(p);\n+        if (p < 0.0 || p > 1.0) {\n+\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\"probability of success must be between 0.0 and 1.0, inclusive.\");\n+\t\t}\n+\t\tdouble upperBound = getDomainUpperBound(p);\n         double[] bracket = null;\n         try {\n             bracket = UnivariateRealSolverUtils.bracket(\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java", 
          "line": 81, 
          "faulty": "double upperBound=getDomainUpperBound(p);", 
          "type": "InsertBefore", 
          "seed": "if (p < 0.0 || p > 1.0) {\n  throw new IllegalArgumentException(\"probability of success must be between 0.0 and 1.0, inclusive.\");\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 145, 
          "faulty": "double d=getDenominatorDegreesOfFreedom();", 
          "type": "InsertBefore", 
          "seed": "if (p < 0.0 || p > 1.0) {\n  throw new IllegalArgumentException(\"p must be between 0.0 and 1.0, inclusive.\");\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_813/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:53:13.031567353 -0500\n@@ -100,7 +100,11 @@\n         if (p == 0) {\n             return 0d;\n         }\n-        if (p == 1) {\n+        if (p < 0.0 || p > 1.0) {\n+\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\"p must be between 0 and 1.0 (inclusive)\");\n+\t\t}\n+\t\tif (p == 1) {\n             return Double.POSITIVE_INFINITY;\n         }\n         return super.inverseCumulativeProbability(p);\n@@ -145,7 +149,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 103, 
          "faulty": "if (p == 1) {\n  return Double.POSITIVE_INFINITY;\n}", 
          "type": "InsertBefore", 
          "seed": "if (p < 0.0 || p > 1.0) {\n  throw new IllegalArgumentException(\"p must be between 0 and 1.0 (inclusive)\");\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_500/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:49:36.531369183 -0500\n@@ -69,7 +69,8 @@\n      */\n     public double cumulativeProbability(double x) throws MathException {\n         double ret;\n-        if (x <= 0.0) {\n+        ret = Double.NEGATIVE_INFINITY;\n+\t\tif (x <= 0.0) {\n             ret = 0.0;\n         } else {\n             double n = getNumeratorDegreesOfFreedom();\n@@ -145,7 +146,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 72, 
          "faulty": "if (x <= 0.0) {\n  ret=0.0;\n}\n else {\n  double n=getNumeratorDegreesOfFreedom();\n  double m=getDenominatorDegreesOfFreedom();\n  ret=Beta.regularizedBeta((n * x) / (m + n * x),0.5 * n,0.5 * m);\n}", 
          "type": "InsertBefore", 
          "seed": "ret=Double.NEGATIVE_INFINITY;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_526/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:49:51.179383052 -0500\n@@ -100,7 +100,11 @@\n         if (p == 0) {\n             return 0d;\n         }\n-        if (p == 1) {\n+        if (p <= 0) {\n+\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\"The Poisson mean must be positive\");\n+\t\t}\n+\t\tif (p == 1) {\n             return Double.POSITIVE_INFINITY;\n         }\n         return super.inverseCumulativeProbability(p);\n@@ -143,9 +147,7 @@\n     protected double getInitialDomain(double p) {\n         double ret;\n         double d = getDenominatorDegreesOfFreedom();\n-            // use mean\n-            ret = d / (d - 2.0);\n-        return ret;\n+            return numeratorDegreesOfFreedom;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return numeratorDegreesOfFreedom;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 147, 
          "faulty": "ret=d / (d - 2.0);", 
          "type": "Delete", 
          "seed": "ret=-Double.MAX_VALUE;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 103, 
          "faulty": "if (p == 1) {\n  return Double.POSITIVE_INFINITY;\n}", 
          "type": "InsertBefore", 
          "seed": "if (p <= 0) {\n  throw new IllegalArgumentException(\"The Poisson mean must be positive\");\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_1206/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:57:50.311774206 -0500\n@@ -69,7 +69,8 @@\n      */\n     public double cumulativeProbability(double x) throws MathException {\n         double ret;\n-        if (x <= 0.0) {\n+        ret = Double.NEGATIVE_INFINITY;\n+\t\tif (x <= 0.0) {\n             ret = 0.0;\n         } else {\n             double n = getNumeratorDegreesOfFreedom();\n@@ -145,7 +146,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0d;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0d;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 72, 
          "faulty": "if (x <= 0.0) {\n  ret=0.0;\n}\n else {\n  double n=getNumeratorDegreesOfFreedom();\n  double m=getDenominatorDegreesOfFreedom();\n  ret=Beta.regularizedBeta((n * x) / (m + n * x),0.5 * n,0.5 * m);\n}", 
          "type": "InsertBefore", 
          "seed": "ret=Double.NEGATIVE_INFINITY;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_676/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:51:45.663492872 -0500\n@@ -145,7 +145,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0;\n     }\n     \n     /**\n\n\n--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java\t2018-12-01 05:43:11.219151160 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_676/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java\t2018-12-01 05:51:45.667492876 -0500\n@@ -171,7 +171,11 @@\n         if (function == null) {\n             throw new IllegalArgumentException (\"function is null.\");\n         }\n-        if (maximumIterations <= 0)  {\n+        if (maximumIterations <= 0) {\n+\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\"bad value for maximumIterations: \" + maximumIterations);\n+\t\t}\n+\t\tif (maximumIterations <= 0)  {\n             throw new IllegalArgumentException\n             (\"bad value for maximumIterations: \" + maximumIterations);\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java", 
          "line": 174, 
          "faulty": "if (maximumIterations <= 0) {\n  throw new IllegalArgumentException(\"bad value for maximumIterations: \" + maximumIterations);\n}", 
          "type": "InsertBefore", 
          "seed": "if (maximumIterations <= 0) {\n  throw new IllegalArgumentException(\"bad value for maximumIterations: \" + maximumIterations);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_208/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:46:46.099185998 -0500\n@@ -142,10 +142,14 @@\n      */\n     protected double getInitialDomain(double p) {\n         double ret;\n-        double d = getDenominatorDegreesOfFreedom();\n+        if (p < 0.0 || p > 1.0) {\n+\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\"p must be between 0.0 and 1.0, inclusive.\");\n+\t\t}\n+\t\tdouble d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 145, 
          "faulty": "double d=getDenominatorDegreesOfFreedom();", 
          "type": "InsertBefore", 
          "seed": "if (p < 0.0 || p > 1.0) {\n  throw new IllegalArgumentException(\"p must be between 0.0 and 1.0, inclusive.\");\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_1300/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:58:58.447817489 -0500\n@@ -145,7 +145,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0;\n     }\n     \n     /**\n\n\n--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\t2018-12-01 05:43:11.219151160 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_1300/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\t2018-12-01 05:58:58.447817489 -0500\n@@ -76,7 +76,10 @@\n             }\n         };\n               \n-        // Try to bracket root, test domain endoints if this fails     \n+        if (p == 1) {\n+\t\t\treturn Double.POSITIVE_INFINITY;\n+\t\t}\n+\t\t// Try to bracket root, test domain endoints if this fails     \n         double lowerBound = getDomainLowerBound(p);\n         double upperBound = getDomainUpperBound(p);\n         double[] bracket = null;\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java", 
          "line": 80, 
          "faulty": "double lowerBound=getDomainLowerBound(p);", 
          "type": "InsertBefore", 
          "seed": "if (p == 1) {\n  return Double.POSITIVE_INFINITY;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_846/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:53:36.419586279 -0500\n@@ -145,7 +145,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0d;\n     }\n     \n     /**\n\n\n--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java\t2018-12-01 05:43:11.219151160 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_846/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java\t2018-12-01 05:53:36.423586283 -0500\n@@ -175,7 +175,14 @@\n             throw new IllegalArgumentException\n             (\"bad value for maximumIterations: \" + maximumIterations);\n         }\n-        if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n+        if (initial < lowerBound || initial > upperBound\n+\t\t\t\t|| lowerBound >= upperBound) {\n+\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\"Invalid endpoint parameters:  lowerBound=\" + lowerBound\n+\t\t\t\t\t\t\t+ \" initial=\" + initial + \" upperBound=\"\n+\t\t\t\t\t\t\t+ upperBound);\n+\t\t}\n+\t\tif (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n             throw new IllegalArgumentException\n             (\"Invalid endpoint parameters:  lowerBound=\" + lowerBound + \n               \" initial=\" + initial + \" upperBound=\" + upperBound);\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0d;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java", 
          "line": 178, 
          "faulty": "if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n  throw new IllegalArgumentException(\"Invalid endpoint parameters:  lowerBound=\" + lowerBound + \" initial=\"+ initial+ \" upperBound=\"+ upperBound);\n}", 
          "type": "InsertBefore", 
          "seed": "if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n  throw new IllegalArgumentException(\"Invalid endpoint parameters:  lowerBound=\" + lowerBound + \" initial=\"+ initial+ \" upperBound=\"+ upperBound);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_350/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:48:03.315275490 -0500\n@@ -145,7 +145,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0;\n     }\n     \n     /**\n\n\n--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java\t2018-12-01 05:43:11.219151160 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_350/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java\t2018-12-01 05:48:03.319275495 -0500\n@@ -176,9 +176,13 @@\n             (\"bad value for maximumIterations: \" + maximumIterations);\n         }\n         if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n-            throw new IllegalArgumentException\n-            (\"Invalid endpoint parameters:  lowerBound=\" + lowerBound + \n-              \" initial=\" + initial + \" upperBound=\" + upperBound);\n+            if (initial < lowerBound || initial > upperBound\n+\t\t\t\t\t|| lowerBound >= upperBound) {\n+\t\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\t\"Invalid endpoint parameters:  lowerBound=\"\n+\t\t\t\t\t\t\t\t+ lowerBound + \" initial=\" + initial\n+\t\t\t\t\t\t\t\t+ \" upperBound=\" + upperBound);\n+\t\t\t}\n         }\n         double a = initial;\n         double b = initial;\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java", 
          "line": 179, 
          "faulty": "throw new IllegalArgumentException(\"Invalid endpoint parameters:  lowerBound=\" + lowerBound + \" initial=\"+ initial+ \" upperBound=\"+ upperBound);", 
          "type": "Replace", 
          "seed": "if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n  throw new IllegalArgumentException(\"Invalid endpoint parameters:  lowerBound=\" + lowerBound + \" initial=\"+ initial+ \" upperBound=\"+ upperBound);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_1244/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:58:26.599799318 -0500\n@@ -145,7 +145,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0;\n     }\n     \n     /**\n\n\n--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java\t2018-12-01 05:43:11.219151160 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_1244/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java\t2018-12-01 05:58:26.599799318 -0500\n@@ -175,7 +175,14 @@\n             throw new IllegalArgumentException\n             (\"bad value for maximumIterations: \" + maximumIterations);\n         }\n-        if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n+        if (initial < lowerBound || initial > upperBound\n+\t\t\t\t|| lowerBound >= upperBound) {\n+\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\"Invalid endpoint parameters:  lowerBound=\" + lowerBound\n+\t\t\t\t\t\t\t+ \" initial=\" + initial + \" upperBound=\"\n+\t\t\t\t\t\t\t+ upperBound);\n+\t\t}\n+\t\tif (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n             throw new IllegalArgumentException\n             (\"Invalid endpoint parameters:  lowerBound=\" + lowerBound + \n               \" initial=\" + initial + \" upperBound=\" + upperBound);\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java", 
          "line": 178, 
          "faulty": "if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n  throw new IllegalArgumentException(\"Invalid endpoint parameters:  lowerBound=\" + lowerBound + \" initial=\"+ initial+ \" upperBound=\"+ upperBound);\n}", 
          "type": "InsertBefore", 
          "seed": "if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n  throw new IllegalArgumentException(\"Invalid endpoint parameters:  lowerBound=\" + lowerBound + \" initial=\"+ initial+ \" upperBound=\"+ upperBound);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_497/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:49:35.803368500 -0500\n@@ -97,9 +97,6 @@\n      */\n     public double inverseCumulativeProbability(final double p) \n         throws MathException {\n-        if (p == 0) {\n-            return 0d;\n-        }\n         if (p == 1) {\n             return Double.POSITIVE_INFINITY;\n         }\n@@ -145,7 +142,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 100, 
          "faulty": "if (p == 0) {\n  return 0d;\n}", 
          "type": "Delete", 
          "seed": "if (p == 0) {\n  return 0d;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_1336/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:59:21.915826435 -0500\n@@ -69,7 +69,8 @@\n      */\n     public double cumulativeProbability(double x) throws MathException {\n         double ret;\n-        if (x <= 0.0) {\n+        ret = 0.0;\n+\t\tif (x <= 0.0) {\n             ret = 0.0;\n         } else {\n             double n = getNumeratorDegreesOfFreedom();\n@@ -145,7 +146,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0d;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0d;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 72, 
          "faulty": "if (x <= 0.0) {\n  ret=0.0;\n}\n else {\n  double n=getNumeratorDegreesOfFreedom();\n  double m=getDenominatorDegreesOfFreedom();\n  ret=Beta.regularizedBeta((n * x) / (m + n * x),0.5 * n,0.5 * m);\n}", 
          "type": "InsertBefore", 
          "seed": "ret=0.0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_598/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:51:06.743457357 -0500\n@@ -73,7 +73,8 @@\n             ret = 0.0;\n         } else {\n             double n = getNumeratorDegreesOfFreedom();\n-            double m = getDenominatorDegreesOfFreedom();\n+            ret = 1.0;\n+\t\t\tdouble m = getDenominatorDegreesOfFreedom();\n             \n             ret = Beta.regularizedBeta((n * x) / (m + n * x),\n                 0.5 * n,\n@@ -145,7 +146,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 76, 
          "faulty": "double m=getDenominatorDegreesOfFreedom();", 
          "type": "InsertBefore", 
          "seed": "ret=1.0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_1602/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 06:02:17.955890228 -0500\n@@ -142,10 +142,14 @@\n      */\n     protected double getInitialDomain(double p) {\n         double ret;\n-        double d = getDenominatorDegreesOfFreedom();\n+        if (p < 0.0 || p > 1.0) {\n+\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\"probability of success must be between 0.0 and 1.0, inclusive.\");\n+\t\t}\n+\t\tdouble d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0d;\n     }\n     \n     /**\n\n\n--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\t2018-12-01 05:43:11.219151160 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_1602/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\t2018-12-01 06:02:17.955890228 -0500\n@@ -62,7 +62,10 @@\n             throw new IllegalArgumentException(\"p must be between 0.0 and 1.0, inclusive.\");\n         }\n \n-        // by default, do simple root finding using bracketing and default solver.\n+        if (p == 0) {\n+\t\t\treturn 0d;\n+\t\t}\n+\t\t// by default, do simple root finding using bracketing and default solver.\n         // subclasses can overide if there is a better method.\n         UnivariateRealFunction rootFindingFunction =\n             new UnivariateRealFunction() {\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0d;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java", 
          "line": 67, 
          "faulty": "UnivariateRealFunction rootFindingFunction=new UnivariateRealFunction(){\n  public double value(  double x) throws FunctionEvaluationException {\n    try {\n      return cumulativeProbability(x) - p;\n    }\n catch (    MathException ex) {\n      throw new FunctionEvaluationException(x,ex.getPattern(),ex.getArguments(),ex);\n    }\n  }\n}\n;", 
          "type": "InsertBefore", 
          "seed": "if (p == 0) {\n  return 0d;\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 145, 
          "faulty": "double d=getDenominatorDegreesOfFreedom();", 
          "type": "InsertBefore", 
          "seed": "if (p < 0.0 || p > 1.0) {\n  throw new IllegalArgumentException(\"probability of success must be between 0.0 and 1.0, inclusive.\");\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_1298/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:58:58.079817352 -0500\n@@ -145,7 +145,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 1.0d;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 1.0d;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_1717/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 06:03:40.707920753 -0500\n@@ -97,7 +97,11 @@\n      */\n     public double inverseCumulativeProbability(final double p) \n         throws MathException {\n-        if (p == 0) {\n+        if (p < 0.0 || p > 1.0) {\n+\t\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\t\"probability of success must be between 0.0 and 1.0, inclusive.\");\n+\t\t\t}\n+\t\tif (p == 0) {\n             return 0d;\n         }\n         if (p == 1) {\n@@ -145,7 +149,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0d;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0d;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 100, 
          "faulty": "if (p == 0) {\n  return 0d;\n}", 
          "type": "InsertBefore", 
          "seed": "if (p < 0.0 || p > 1.0) {\n  throw new IllegalArgumentException(\"probability of success must be between 0.0 and 1.0, inclusive.\");\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_378/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:48:30.487304207 -0500\n@@ -145,7 +145,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return numeratorDegreesOfFreedom;\n     }\n     \n     /**\n\n\n--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java\t2018-12-01 05:43:11.219151160 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_378/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java\t2018-12-01 05:48:30.487304207 -0500\n@@ -169,6 +169,9 @@\n             FunctionEvaluationException {\n         \n         if (function == null) {\n+\t\t\t\t\tthrow new IllegalArgumentException(\"function is null.\");\n+\t\t\t\t}\n+\t\tif (function == null) {\n             throw new IllegalArgumentException (\"function is null.\");\n         }\n         if (maximumIterations <= 0)  {\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return numeratorDegreesOfFreedom;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java", 
          "line": 171, 
          "faulty": "if (function == null) {\n  throw new IllegalArgumentException(\"function is null.\");\n}", 
          "type": "InsertBefore", 
          "seed": "if (function == null) {\n  throw new IllegalArgumentException(\"function is null.\");\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_742/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:52:36.179536723 -0500\n@@ -145,7 +145,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0;\n     }\n     \n     /**\n@@ -181,7 +181,11 @@\n             throw new IllegalArgumentException(\n                 \"degrees of freedom must be positive.\");\n         }\n-        this.denominatorDegreesOfFreedom = degreesOfFreedom;\n+        if (degreesOfFreedom <= 0.0) {\n+\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\"degrees of freedom must be positive.\");\n+\t\t}\n+\t\tthis.denominatorDegreesOfFreedom = degreesOfFreedom;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 184, 
          "faulty": "this.denominatorDegreesOfFreedom=degreesOfFreedom;", 
          "type": "InsertBefore", 
          "seed": "if (degreesOfFreedom <= 0.0) {\n  throw new IllegalArgumentException(\"degrees of freedom must be positive.\");\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_551/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:50:41.515433401 -0500\n@@ -143,9 +143,7 @@\n     protected double getInitialDomain(double p) {\n         double ret;\n         double d = getDenominatorDegreesOfFreedom();\n-            // use mean\n-            ret = d / (d - 2.0);\n-        return ret;\n+            return 0;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 147, 
          "faulty": "ret=d / (d - 2.0);", 
          "type": "Delete", 
          "seed": "ret=1.0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_397/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:48:48.099322163 -0500\n@@ -145,7 +145,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0d;\n     }\n     \n     /**\n\n\n--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\t2018-12-01 05:43:11.219151160 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_397/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\t2018-12-01 05:48:48.099322163 -0500\n@@ -62,7 +62,11 @@\n             throw new IllegalArgumentException(\"p must be between 0.0 and 1.0, inclusive.\");\n         }\n \n-        // by default, do simple root finding using bracketing and default solver.\n+        if (p < 0.0 || p > 1.0) {\n+\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\"p must be between 0.0 and 1.0, inclusive.\");\n+\t\t}\n+\t\t// by default, do simple root finding using bracketing and default solver.\n         // subclasses can overide if there is a better method.\n         UnivariateRealFunction rootFindingFunction =\n             new UnivariateRealFunction() {\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0d;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java", 
          "line": 67, 
          "faulty": "UnivariateRealFunction rootFindingFunction=new UnivariateRealFunction(){\n  public double value(  double x) throws FunctionEvaluationException {\n    try {\n      return cumulativeProbability(x) - p;\n    }\n catch (    MathException ex) {\n      throw new FunctionEvaluationException(x,ex.getPattern(),ex.getArguments(),ex);\n    }\n  }\n}\n;", 
          "type": "InsertBefore", 
          "seed": "if (p < 0.0 || p > 1.0) {\n  throw new IllegalArgumentException(\"p must be between 0.0 and 1.0, inclusive.\");\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_710/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:52:13.491517316 -0500\n@@ -69,7 +69,8 @@\n      */\n     public double cumulativeProbability(double x) throws MathException {\n         double ret;\n-        if (x <= 0.0) {\n+        setDenominatorDegreesOfFreedom(denominatorDegreesOfFreedom);\n+\t\tif (x <= 0.0) {\n             ret = 0.0;\n         } else {\n             double n = getNumeratorDegreesOfFreedom();\n@@ -98,6 +99,9 @@\n     public double inverseCumulativeProbability(final double p) \n         throws MathException {\n         if (p == 0) {\n+\t\t\t\treturn 0d;\n+\t\t\t}\n+\t\tif (p == 0) {\n             return 0d;\n         }\n         if (p == 1) {\n@@ -145,7 +149,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 72, 
          "faulty": "if (x <= 0.0) {\n  ret=0.0;\n}\n else {\n  double n=getNumeratorDegreesOfFreedom();\n  double m=getDenominatorDegreesOfFreedom();\n  ret=Beta.regularizedBeta((n * x) / (m + n * x),0.5 * n,0.5 * m);\n}", 
          "type": "InsertBefore", 
          "seed": "setDenominatorDegreesOfFreedom(denominatorDegreesOfFreedom);"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 100, 
          "faulty": "if (p == 0) {\n  return 0d;\n}", 
          "type": "InsertBefore", 
          "seed": "if (p == 0) {\n  return 0d;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_402/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:48:50.047324119 -0500\n@@ -143,9 +143,7 @@\n     protected double getInitialDomain(double p) {\n         double ret;\n         double d = getDenominatorDegreesOfFreedom();\n-            // use mean\n-            ret = d / (d - 2.0);\n-        return ret;\n+            return numeratorDegreesOfFreedom;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return numeratorDegreesOfFreedom;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 147, 
          "faulty": "ret=d / (d - 2.0);", 
          "type": "Delete", 
          "seed": "ret=-Double.MAX_VALUE;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_756/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:52:41.307541049 -0500\n@@ -145,7 +145,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0;\n     }\n     \n     /**\n\n\n--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\t2018-12-01 05:43:11.219151160 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_756/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\t2018-12-01 05:52:41.307541049 -0500\n@@ -58,7 +58,11 @@\n      */\n     public double inverseCumulativeProbability(final double p)\n         throws MathException {\n-        if (p < 0.0 || p > 1.0) {\n+        if (p <= 0) {\n+\t\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\t\"The Poisson mean must be positive\");\n+\t\t\t}\n+\t\tif (p < 0.0 || p > 1.0) {\n             throw new IllegalArgumentException(\"p must be between 0.0 and 1.0, inclusive.\");\n         }\n \n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java", 
          "line": 61, 
          "faulty": "if (p < 0.0 || p > 1.0) {\n  throw new IllegalArgumentException(\"p must be between 0.0 and 1.0, inclusive.\");\n}", 
          "type": "InsertBefore", 
          "seed": "if (p <= 0) {\n  throw new IllegalArgumentException(\"The Poisson mean must be positive\");\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_1048/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:56:13.675705643 -0500\n@@ -145,7 +145,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 1.0d;\n     }\n     \n     /**\n\n\n--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java\t2018-12-01 05:43:11.219151160 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_1048/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java\t2018-12-01 05:56:13.675705643 -0500\n@@ -175,7 +175,10 @@\n             throw new IllegalArgumentException\n             (\"bad value for maximumIterations: \" + maximumIterations);\n         }\n-        if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n+        if (function == null) {\n+\t\t\tthrow new IllegalArgumentException(\"function is null.\");\n+\t\t}\n+\t\tif (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n             throw new IllegalArgumentException\n             (\"Invalid endpoint parameters:  lowerBound=\" + lowerBound + \n               \" initial=\" + initial + \" upperBound=\" + upperBound);\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 1.0d;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java", 
          "line": 178, 
          "faulty": "if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n  throw new IllegalArgumentException(\"Invalid endpoint parameters:  lowerBound=\" + lowerBound + \" initial=\"+ initial+ \" upperBound=\"+ upperBound);\n}", 
          "type": "InsertBefore", 
          "seed": "if (function == null) {\n  throw new IllegalArgumentException(\"function is null.\");\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_883/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:53:59.507604611 -0500\n@@ -145,7 +145,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return numeratorDegreesOfFreedom;\n     }\n     \n     /**\n\n\n--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java\t2018-12-01 05:43:11.219151160 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_883/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java\t2018-12-01 05:53:59.507604611 -0500\n@@ -125,8 +125,8 @@\n     public static double[] bracket(UnivariateRealFunction function, \n             double initial, double lowerBound, double upperBound) \n     throws ConvergenceException, FunctionEvaluationException {\n-        return bracket( function, initial, lowerBound, upperBound,\n-            Integer.MAX_VALUE ) ;\n+        return bracket(function, initial, lowerBound, upperBound,\n+\t\t\t\tInteger.MAX_VALUE);\n     }\n \n      /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return numeratorDegreesOfFreedom;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java", 
          "line": 128, 
          "faulty": "return bracket(function,initial,lowerBound,upperBound,Integer.MAX_VALUE);", 
          "type": "Replace", 
          "seed": "return bracket(function,initial,lowerBound,upperBound,Integer.MAX_VALUE);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_146/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:46:13.479156129 -0500\n@@ -145,7 +145,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0;\n     }\n     \n     /**\n\n\n--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\t2018-12-01 05:43:11.219151160 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_146/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\t2018-12-01 05:46:13.479156129 -0500\n@@ -78,7 +78,11 @@\n               \n         // Try to bracket root, test domain endoints if this fails     \n         double lowerBound = getDomainLowerBound(p);\n-        double upperBound = getDomainUpperBound(p);\n+        if (p < 0.0 || p > 1.0) {\n+\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\"probability of success must be between 0.0 and 1.0, inclusive.\");\n+\t\t}\n+\t\tdouble upperBound = getDomainUpperBound(p);\n         double[] bracket = null;\n         try {\n             bracket = UnivariateRealSolverUtils.bracket(\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java", 
          "line": 81, 
          "faulty": "double upperBound=getDomainUpperBound(p);", 
          "type": "InsertBefore", 
          "seed": "if (p < 0.0 || p > 1.0) {\n  throw new IllegalArgumentException(\"probability of success must be between 0.0 and 1.0, inclusive.\");\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_1908/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 06:05:40.299973528 -0500\n@@ -116,7 +116,8 @@\n      *         P(X &lt; <i>lower bound</i>) &lt; <code>p</code> \n      */\n     protected double getDomainLowerBound(double p) {\n-        return 0.0;\n+        setNumeratorDegreesOfFreedom(numeratorDegreesOfFreedom);\n+\t\treturn 0.0;\n     }\n \n     /**\n@@ -145,7 +146,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return denominatorDegreesOfFreedom;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return denominatorDegreesOfFreedom;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 119, 
          "faulty": "return 0.0;", 
          "type": "InsertBefore", 
          "seed": "setNumeratorDegreesOfFreedom(numeratorDegreesOfFreedom);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_1493/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 06:01:21.563873334 -0500\n@@ -116,7 +116,11 @@\n      *         P(X &lt; <i>lower bound</i>) &lt; <code>p</code> \n      */\n     protected double getDomainLowerBound(double p) {\n-        return 0.0;\n+        if (p < 0.0 || p > 1.0) {\n+\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\"p must be between 0.0 and 1.0, inclusive.\");\n+\t\t}\n+\t\treturn 0.0;\n     }\n \n     /**\n@@ -145,7 +149,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0d;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0d;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 119, 
          "faulty": "return 0.0;", 
          "type": "InsertBefore", 
          "seed": "if (p < 0.0 || p > 1.0) {\n  throw new IllegalArgumentException(\"p must be between 0.0 and 1.0, inclusive.\");\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_1218/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:57:59.903780873 -0500\n@@ -145,7 +145,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0;\n     }\n     \n     /**\n\n\n--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java\t2018-12-01 05:43:11.219151160 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_1218/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java\t2018-12-01 05:57:59.903780873 -0500\n@@ -175,7 +175,10 @@\n             throw new IllegalArgumentException\n             (\"bad value for maximumIterations: \" + maximumIterations);\n         }\n-        if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n+        if (function == null) {\n+\t\t\tthrow new IllegalArgumentException(\"function is null.\");\n+\t\t}\n+\t\tif (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n             throw new IllegalArgumentException\n             (\"Invalid endpoint parameters:  lowerBound=\" + lowerBound + \n               \" initial=\" + initial + \" upperBound=\" + upperBound);\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java", 
          "line": 178, 
          "faulty": "if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n  throw new IllegalArgumentException(\"Invalid endpoint parameters:  lowerBound=\" + lowerBound + \" initial=\"+ initial+ \" upperBound=\"+ upperBound);\n}", 
          "type": "InsertBefore", 
          "seed": "if (function == null) {\n  throw new IllegalArgumentException(\"function is null.\");\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_1113/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:56:54.127734680 -0500\n@@ -145,7 +145,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return numeratorDegreesOfFreedom;\n     }\n     \n     /**\n@@ -156,6 +156,10 @@\n      */\n     public void setNumeratorDegreesOfFreedom(double degreesOfFreedom) {\n         if (degreesOfFreedom <= 0.0) {\n+\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\"degrees of freedom must be positive.\");\n+\t\t}\n+\t\tif (degreesOfFreedom <= 0.0) {\n             throw new IllegalArgumentException(\n                 \"degrees of freedom must be positive.\");\n         }\n\n\n--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\t2018-12-01 05:43:11.219151160 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_1113/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\t2018-12-01 05:56:54.131734683 -0500\n@@ -62,7 +62,11 @@\n             throw new IllegalArgumentException(\"p must be between 0.0 and 1.0, inclusive.\");\n         }\n \n-        // by default, do simple root finding using bracketing and default solver.\n+        if (p < 0.0 || p > 1.0) {\n+\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\"p must be between 0.0 and 1.0, inclusive.\");\n+\t\t}\n+\t\t// by default, do simple root finding using bracketing and default solver.\n         // subclasses can overide if there is a better method.\n         UnivariateRealFunction rootFindingFunction =\n             new UnivariateRealFunction() {\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return numeratorDegreesOfFreedom;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 158, 
          "faulty": "if (degreesOfFreedom <= 0.0) {\n  throw new IllegalArgumentException(\"degrees of freedom must be positive.\");\n}", 
          "type": "InsertBefore", 
          "seed": "if (degreesOfFreedom <= 0.0) {\n  throw new IllegalArgumentException(\"degrees of freedom must be positive.\");\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java", 
          "line": 67, 
          "faulty": "UnivariateRealFunction rootFindingFunction=new UnivariateRealFunction(){\n  public double value(  double x) throws FunctionEvaluationException {\n    try {\n      return cumulativeProbability(x) - p;\n    }\n catch (    MathException ex) {\n      throw new FunctionEvaluationException(x,ex.getPattern(),ex.getArguments(),ex);\n    }\n  }\n}\n;", 
          "type": "InsertBefore", 
          "seed": "if (p < 0.0 || p > 1.0) {\n  throw new IllegalArgumentException(\"p must be between 0.0 and 1.0, inclusive.\");\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_750/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:52:38.963539075 -0500\n@@ -116,7 +116,8 @@\n      *         P(X &lt; <i>lower bound</i>) &lt; <code>p</code> \n      */\n     protected double getDomainLowerBound(double p) {\n-        return 0.0;\n+        setDenominatorDegreesOfFreedom(denominatorDegreesOfFreedom);\n+\t\treturn 0.0;\n     }\n \n     /**\n@@ -145,7 +146,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0d;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0d;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 119, 
          "faulty": "return 0.0;", 
          "type": "InsertBefore", 
          "seed": "setDenominatorDegreesOfFreedom(denominatorDegreesOfFreedom);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_1098/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:56:49.343731273 -0500\n@@ -116,7 +116,8 @@\n      *         P(X &lt; <i>lower bound</i>) &lt; <code>p</code> \n      */\n     protected double getDomainLowerBound(double p) {\n-        return 0.0;\n+        setDenominatorDegreesOfFreedom(denominatorDegreesOfFreedom);\n+\t\treturn 0.0;\n     }\n \n     /**\n@@ -145,7 +146,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0;\n     }\n     \n     /**\n\n\n--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java\t2018-12-01 05:43:11.219151160 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_1098/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java\t2018-12-01 05:56:49.343731273 -0500\n@@ -125,8 +125,8 @@\n     public static double[] bracket(UnivariateRealFunction function, \n             double initial, double lowerBound, double upperBound) \n     throws ConvergenceException, FunctionEvaluationException {\n-        return bracket( function, initial, lowerBound, upperBound,\n-            Integer.MAX_VALUE ) ;\n+        return bracket(function, initial, lowerBound, upperBound,\n+\t\t\t\tInteger.MAX_VALUE);\n     }\n \n      /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java", 
          "line": 128, 
          "faulty": "return bracket(function,initial,lowerBound,upperBound,Integer.MAX_VALUE);", 
          "type": "Replace", 
          "seed": "return bracket(function,initial,lowerBound,upperBound,Integer.MAX_VALUE);"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 119, 
          "faulty": "return 0.0;", 
          "type": "InsertBefore", 
          "seed": "setDenominatorDegreesOfFreedom(denominatorDegreesOfFreedom);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_589/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:51:04.323455093 -0500\n@@ -72,7 +72,8 @@\n         if (x <= 0.0) {\n             ret = 0.0;\n         } else {\n-            double n = getNumeratorDegreesOfFreedom();\n+            setDenominatorDegreesOfFreedom(denominatorDegreesOfFreedom);\n+\t\t\tdouble n = getNumeratorDegreesOfFreedom();\n             double m = getDenominatorDegreesOfFreedom();\n             \n             ret = Beta.regularizedBeta((n * x) / (m + n * x),\n@@ -145,7 +146,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 75, 
          "faulty": "double n=getNumeratorDegreesOfFreedom();", 
          "type": "InsertBefore", 
          "seed": "setDenominatorDegreesOfFreedom(denominatorDegreesOfFreedom);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_333/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:47:57.623269309 -0500\n@@ -145,7 +145,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0;\n     }\n     \n     /**\n\n\n--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\t2018-12-01 05:43:11.219151160 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_333/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\t2018-12-01 05:47:57.627269314 -0500\n@@ -62,7 +62,10 @@\n             throw new IllegalArgumentException(\"p must be between 0.0 and 1.0, inclusive.\");\n         }\n \n-        // by default, do simple root finding using bracketing and default solver.\n+        if (p == 0) {\n+\t\t\treturn 0d;\n+\t\t}\n+\t\t// by default, do simple root finding using bracketing and default solver.\n         // subclasses can overide if there is a better method.\n         UnivariateRealFunction rootFindingFunction =\n             new UnivariateRealFunction() {\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java", 
          "line": 67, 
          "faulty": "UnivariateRealFunction rootFindingFunction=new UnivariateRealFunction(){\n  public double value(  double x) throws FunctionEvaluationException {\n    try {\n      return cumulativeProbability(x) - p;\n    }\n catch (    MathException ex) {\n      throw new FunctionEvaluationException(x,ex.getPattern(),ex.getArguments(),ex);\n    }\n  }\n}\n;", 
          "type": "InsertBefore", 
          "seed": "if (p == 0) {\n  return 0d;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_409/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:48:52.291326365 -0500\n@@ -72,7 +72,8 @@\n         if (x <= 0.0) {\n             ret = 0.0;\n         } else {\n-            double n = getNumeratorDegreesOfFreedom();\n+            ret = Double.MAX_VALUE;\n+\t\t\tdouble n = getNumeratorDegreesOfFreedom();\n             double m = getDenominatorDegreesOfFreedom();\n             \n             ret = Beta.regularizedBeta((n * x) / (m + n * x),\n@@ -145,7 +146,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 75, 
          "faulty": "double n=getNumeratorDegreesOfFreedom();", 
          "type": "InsertBefore", 
          "seed": "ret=Double.MAX_VALUE;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_152/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:46:15.351156180 -0500\n@@ -97,7 +97,11 @@\n      */\n     public double inverseCumulativeProbability(final double p) \n         throws MathException {\n-        if (p == 0) {\n+        if (p < 0.0 || p > 1.0) {\n+\t\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\t\"probability of success must be between 0.0 and 1.0, inclusive.\");\n+\t\t\t}\n+\t\tif (p == 0) {\n             return 0d;\n         }\n         if (p == 1) {\n@@ -145,7 +149,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0;\n     }\n     \n     /**\n\n\n--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\t2018-12-01 05:43:11.219151160 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_152/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\t2018-12-01 05:46:15.351156180 -0500\n@@ -78,7 +78,10 @@\n               \n         // Try to bracket root, test domain endoints if this fails     \n         double lowerBound = getDomainLowerBound(p);\n-        double upperBound = getDomainUpperBound(p);\n+        if (p == 0) {\n+\t\t\treturn Double.NEGATIVE_INFINITY;\n+\t\t}\n+\t\tdouble upperBound = getDomainUpperBound(p);\n         double[] bracket = null;\n         try {\n             bracket = UnivariateRealSolverUtils.bracket(\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java", 
          "line": 81, 
          "faulty": "double upperBound=getDomainUpperBound(p);", 
          "type": "InsertBefore", 
          "seed": "if (p == 0) {\n  return Double.NEGATIVE_INFINITY;\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 100, 
          "faulty": "if (p == 0) {\n  return 0d;\n}", 
          "type": "InsertBefore", 
          "seed": "if (p < 0.0 || p > 1.0) {\n  throw new IllegalArgumentException(\"probability of success must be between 0.0 and 1.0, inclusive.\");\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_168/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:46:20.787156328 -0500\n@@ -145,7 +145,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return denominatorDegreesOfFreedom;\n     }\n     \n     /**\n\n\n--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java\t2018-12-01 05:43:11.219151160 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_168/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java\t2018-12-01 05:46:20.787156328 -0500\n@@ -176,7 +176,11 @@\n             (\"bad value for maximumIterations: \" + maximumIterations);\n         }\n         if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n-            throw new IllegalArgumentException\n+            if (maximumIterations <= 0) {\n+\t\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\t\"bad value for maximumIterations: \" + maximumIterations);\n+\t\t\t}\n+\t\t\tthrow new IllegalArgumentException\n             (\"Invalid endpoint parameters:  lowerBound=\" + lowerBound + \n               \" initial=\" + initial + \" upperBound=\" + upperBound);\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return denominatorDegreesOfFreedom;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java", 
          "line": 179, 
          "faulty": "throw new IllegalArgumentException(\"Invalid endpoint parameters:  lowerBound=\" + lowerBound + \" initial=\"+ initial+ \" upperBound=\"+ upperBound);", 
          "type": "InsertBefore", 
          "seed": "if (maximumIterations <= 0) {\n  throw new IllegalArgumentException(\"bad value for maximumIterations: \" + maximumIterations);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_1322/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:59:05.787820235 -0500\n@@ -145,7 +145,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0d;\n     }\n     \n     /**\n\n\n--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java\t2018-12-01 05:43:11.219151160 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_1322/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java\t2018-12-01 05:59:05.791820236 -0500\n@@ -175,7 +175,10 @@\n             throw new IllegalArgumentException\n             (\"bad value for maximumIterations: \" + maximumIterations);\n         }\n-        if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n+        if (function == null) {\n+\t\t\tthrow new IllegalArgumentException(\"function is null.\");\n+\t\t}\n+\t\tif (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n             throw new IllegalArgumentException\n             (\"Invalid endpoint parameters:  lowerBound=\" + lowerBound + \n               \" initial=\" + initial + \" upperBound=\" + upperBound);\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0d;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java", 
          "line": 178, 
          "faulty": "if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n  throw new IllegalArgumentException(\"Invalid endpoint parameters:  lowerBound=\" + lowerBound + \" initial=\"+ initial+ \" upperBound=\"+ upperBound);\n}", 
          "type": "InsertBefore", 
          "seed": "if (function == null) {\n  throw new IllegalArgumentException(\"function is null.\");\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_343/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:48:01.163273161 -0500\n@@ -100,7 +100,11 @@\n         if (p == 0) {\n             return 0d;\n         }\n-        if (p == 1) {\n+        if (p < 0.0 || p > 1.0) {\n+\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\"p must be between 0 and 1.0 (inclusive)\");\n+\t\t}\n+\t\tif (p == 1) {\n             return Double.POSITIVE_INFINITY;\n         }\n         return super.inverseCumulativeProbability(p);\n@@ -145,7 +149,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return numeratorDegreesOfFreedom;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return numeratorDegreesOfFreedom;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 103, 
          "faulty": "if (p == 1) {\n  return Double.POSITIVE_INFINITY;\n}", 
          "type": "InsertBefore", 
          "seed": "if (p < 0.0 || p > 1.0) {\n  throw new IllegalArgumentException(\"p must be between 0 and 1.0 (inclusive)\");\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_1506/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 06:01:31.591876066 -0500\n@@ -145,7 +145,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0d;\n     }\n     \n     /**\n\n\n--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\t2018-12-01 05:43:11.219151160 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_1506/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\t2018-12-01 06:01:31.595876066 -0500\n@@ -81,7 +81,10 @@\n         double upperBound = getDomainUpperBound(p);\n         double[] bracket = null;\n         try {\n-            bracket = UnivariateRealSolverUtils.bracket(\n+            if (p == 1) {\n+\t\t\t\treturn Integer.MAX_VALUE;\n+\t\t\t}\n+\t\t\tbracket = UnivariateRealSolverUtils.bracket(\n                     rootFindingFunction, getInitialDomain(p),\n                     lowerBound, upperBound);\n         }  catch (ConvergenceException ex) {\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0d;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java", 
          "line": 84, 
          "faulty": "bracket=UnivariateRealSolverUtils.bracket(rootFindingFunction,getInitialDomain(p),lowerBound,upperBound);", 
          "type": "InsertBefore", 
          "seed": "if (p == 1) {\n  return Integer.MAX_VALUE;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_284/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:47:30.523239024 -0500\n@@ -143,9 +143,10 @@\n     protected double getInitialDomain(double p) {\n         double ret;\n         double d = getDenominatorDegreesOfFreedom();\n-            // use mean\n-            ret = d / (d - 2.0);\n-        return ret;\n+            if (p == 0) {\n+\t\t\t\treturn -1;\n+\t\t\t}\n+        return 0;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 147, 
          "faulty": "ret=d / (d - 2.0);", 
          "type": "Replace", 
          "seed": "if (p == 0) {\n  return -1;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_517/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:49:48.019379877 -0500\n@@ -145,7 +145,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0;\n     }\n     \n     /**\n\n\n--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\t2018-12-01 05:43:11.219151160 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_517/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\t2018-12-01 05:49:48.023379881 -0500\n@@ -79,7 +79,11 @@\n         // Try to bracket root, test domain endoints if this fails     \n         double lowerBound = getDomainLowerBound(p);\n         double upperBound = getDomainUpperBound(p);\n-        double[] bracket = null;\n+        if (p <= 0) {\n+\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\"The Poisson mean must be positive\");\n+\t\t}\n+\t\tdouble[] bracket = null;\n         try {\n             bracket = UnivariateRealSolverUtils.bracket(\n                     rootFindingFunction, getInitialDomain(p),\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java", 
          "line": 82, 
          "faulty": "double[] bracket=null;", 
          "type": "InsertBefore", 
          "seed": "if (p <= 0) {\n  throw new IllegalArgumentException(\"The Poisson mean must be positive\");\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_1875/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 06:05:22.207965032 -0500\n@@ -145,7 +145,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0d;\n     }\n     \n     /**\n\n\n--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\t2018-12-01 05:43:11.219151160 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_1875/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\t2018-12-01 06:05:22.207965032 -0500\n@@ -58,7 +58,11 @@\n      */\n     public double inverseCumulativeProbability(final double p)\n         throws MathException {\n-        if (p < 0.0 || p > 1.0) {\n+        if (p <= 0) {\n+\t\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\t\"The Poisson mean must be positive\");\n+\t\t\t}\n+\t\tif (p < 0.0 || p > 1.0) {\n             throw new IllegalArgumentException(\"p must be between 0.0 and 1.0, inclusive.\");\n         }\n \n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0d;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java", 
          "line": 61, 
          "faulty": "if (p < 0.0 || p > 1.0) {\n  throw new IllegalArgumentException(\"p must be between 0.0 and 1.0, inclusive.\");\n}", 
          "type": "InsertBefore", 
          "seed": "if (p <= 0) {\n  throw new IllegalArgumentException(\"The Poisson mean must be positive\");\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_1002/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:55:29.279673105 -0500\n@@ -100,7 +100,8 @@\n         if (p == 0) {\n             return 0d;\n         }\n-        if (p == 1) {\n+        setNumeratorDegreesOfFreedom(numeratorDegreesOfFreedom);\n+\t\tif (p == 1) {\n             return Double.POSITIVE_INFINITY;\n         }\n         return super.inverseCumulativeProbability(p);\n@@ -145,7 +146,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 103, 
          "faulty": "if (p == 1) {\n  return Double.POSITIVE_INFINITY;\n}", 
          "type": "InsertBefore", 
          "seed": "setNumeratorDegreesOfFreedom(numeratorDegreesOfFreedom);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_311/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:47:44.835255199 -0500\n@@ -145,7 +145,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return Double.MIN_VALUE;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return Double.MIN_VALUE;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_1045/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:56:12.951705118 -0500\n@@ -69,7 +69,8 @@\n      */\n     public double cumulativeProbability(double x) throws MathException {\n         double ret;\n-        if (x <= 0.0) {\n+        ret = 0.0;\n+\t\tif (x <= 0.0) {\n             ret = 0.0;\n         } else {\n             double n = getNumeratorDegreesOfFreedom();\n@@ -97,7 +98,11 @@\n      */\n     public double inverseCumulativeProbability(final double p) \n         throws MathException {\n-        if (p == 0) {\n+        if (p < 0.0 || p > 1.0) {\n+\t\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\t\"probability of success must be between 0.0 and 1.0, inclusive.\");\n+\t\t\t}\n+\t\tif (p == 0) {\n             return 0d;\n         }\n         if (p == 1) {\n@@ -143,9 +148,8 @@\n     protected double getInitialDomain(double p) {\n         double ret;\n         double d = getDenominatorDegreesOfFreedom();\n-            // use mean\n-            ret = d / (d - 2.0);\n-        return ret;\n+            ret = 1.0;\n+        return 0;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 147, 
          "faulty": "ret=d / (d - 2.0);", 
          "type": "Replace", 
          "seed": "ret=1.0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 72, 
          "faulty": "if (x <= 0.0) {\n  ret=0.0;\n}\n else {\n  double n=getNumeratorDegreesOfFreedom();\n  double m=getDenominatorDegreesOfFreedom();\n  ret=Beta.regularizedBeta((n * x) / (m + n * x),0.5 * n,0.5 * m);\n}", 
          "type": "InsertBefore", 
          "seed": "ret=0.0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 100, 
          "faulty": "if (p == 0) {\n  return 0d;\n}", 
          "type": "InsertBefore", 
          "seed": "if (p < 0.0 || p > 1.0) {\n  throw new IllegalArgumentException(\"probability of success must be between 0.0 and 1.0, inclusive.\");\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_620/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:51:21.343470874 -0500\n@@ -145,7 +145,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0;\n     }\n     \n     /**\n\n\n--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\t2018-12-01 05:43:11.219151160 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_620/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\t2018-12-01 05:51:21.343470874 -0500\n@@ -58,7 +58,10 @@\n      */\n     public double inverseCumulativeProbability(final double p)\n         throws MathException {\n-        if (p < 0.0 || p > 1.0) {\n+        if (p == 1) {\n+\t\t\t\treturn Integer.MAX_VALUE;\n+\t\t\t}\n+\t\tif (p < 0.0 || p > 1.0) {\n             throw new IllegalArgumentException(\"p must be between 0.0 and 1.0, inclusive.\");\n         }\n \n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java", 
          "line": 61, 
          "faulty": "if (p < 0.0 || p > 1.0) {\n  throw new IllegalArgumentException(\"p must be between 0.0 and 1.0, inclusive.\");\n}", 
          "type": "InsertBefore", 
          "seed": "if (p == 1) {\n  return Integer.MAX_VALUE;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_1842/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 06:05:11.343960007 -0500\n@@ -116,7 +116,8 @@\n      *         P(X &lt; <i>lower bound</i>) &lt; <code>p</code> \n      */\n     protected double getDomainLowerBound(double p) {\n-        return 0.0;\n+        setNumeratorDegreesOfFreedom(numeratorDegreesOfFreedom);\n+\t\treturn 0.0;\n     }\n \n     /**\n@@ -145,7 +146,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return denominatorDegreesOfFreedom;\n     }\n     \n     /**\n\n\n--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\t2018-12-01 05:43:11.219151160 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_1842/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\t2018-12-01 06:05:11.347960009 -0500\n@@ -58,7 +58,10 @@\n      */\n     public double inverseCumulativeProbability(final double p)\n         throws MathException {\n-        if (p < 0.0 || p > 1.0) {\n+        if (p == 1) {\n+\t\t\t\treturn Double.POSITIVE_INFINITY;\n+\t\t\t}\n+\t\tif (p < 0.0 || p > 1.0) {\n             throw new IllegalArgumentException(\"p must be between 0.0 and 1.0, inclusive.\");\n         }\n \n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return denominatorDegreesOfFreedom;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java", 
          "line": 61, 
          "faulty": "if (p < 0.0 || p > 1.0) {\n  throw new IllegalArgumentException(\"p must be between 0.0 and 1.0, inclusive.\");\n}", 
          "type": "InsertBefore", 
          "seed": "if (p == 1) {\n  return Double.POSITIVE_INFINITY;\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 119, 
          "faulty": "return 0.0;", 
          "type": "InsertBefore", 
          "seed": "setNumeratorDegreesOfFreedom(numeratorDegreesOfFreedom);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_1388/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 06:00:08.975845715 -0500\n@@ -73,7 +73,9 @@\n             ret = 0.0;\n         } else {\n             double n = getNumeratorDegreesOfFreedom();\n-            double m = getDenominatorDegreesOfFreedom();\n+            if (x < 0)\n+\t\t\t\treturn 0;\n+\t\t\tdouble m = getDenominatorDegreesOfFreedom();\n             \n             ret = Beta.regularizedBeta((n * x) / (m + n * x),\n                 0.5 * n,\n@@ -145,7 +147,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return numeratorDegreesOfFreedom;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return numeratorDegreesOfFreedom;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 76, 
          "faulty": "double m=getDenominatorDegreesOfFreedom();", 
          "type": "InsertBefore", 
          "seed": "if (x < 0) return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 82, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return ret;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_573/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:50:53.335444723 -0500\n@@ -145,7 +145,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0d;\n     }\n     \n     /**\n\n\n--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java\t2018-12-01 05:43:11.219151160 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_573/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java\t2018-12-01 05:50:53.339444726 -0500\n@@ -171,7 +171,10 @@\n         if (function == null) {\n             throw new IllegalArgumentException (\"function is null.\");\n         }\n-        if (maximumIterations <= 0)  {\n+        if (function == null) {\n+\t\t\tthrow new IllegalArgumentException(\"function is null.\");\n+\t\t}\n+\t\tif (maximumIterations <= 0)  {\n             throw new IllegalArgumentException\n             (\"bad value for maximumIterations: \" + maximumIterations);\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0d;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java", 
          "line": 174, 
          "faulty": "if (maximumIterations <= 0) {\n  throw new IllegalArgumentException(\"bad value for maximumIterations: \" + maximumIterations);\n}", 
          "type": "InsertBefore", 
          "seed": "if (function == null) {\n  throw new IllegalArgumentException(\"function is null.\");\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_1576/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 06:02:02.679885297 -0500\n@@ -142,10 +142,14 @@\n      */\n     protected double getInitialDomain(double p) {\n         double ret;\n-        double d = getDenominatorDegreesOfFreedom();\n+        if (p < 0.0 || p > 1.0) {\n+\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\"probability of success must be between 0.0 and 1.0, inclusive.\");\n+\t\t}\n+\t\tdouble d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0d;\n     }\n     \n     /**\n\n\n--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\t2018-12-01 05:43:11.219151160 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_1576/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\t2018-12-01 06:02:02.683885298 -0500\n@@ -62,7 +62,11 @@\n             throw new IllegalArgumentException(\"p must be between 0.0 and 1.0, inclusive.\");\n         }\n \n-        // by default, do simple root finding using bracketing and default solver.\n+        if (p < 0.0 || p > 1.0) {\n+\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\"p must be between 0.0 and 1.0, inclusive.\");\n+\t\t}\n+\t\t// by default, do simple root finding using bracketing and default solver.\n         // subclasses can overide if there is a better method.\n         UnivariateRealFunction rootFindingFunction =\n             new UnivariateRealFunction() {\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0d;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java", 
          "line": 67, 
          "faulty": "UnivariateRealFunction rootFindingFunction=new UnivariateRealFunction(){\n  public double value(  double x) throws FunctionEvaluationException {\n    try {\n      return cumulativeProbability(x) - p;\n    }\n catch (    MathException ex) {\n      throw new FunctionEvaluationException(x,ex.getPattern(),ex.getArguments(),ex);\n    }\n  }\n}\n;", 
          "type": "InsertBefore", 
          "seed": "if (p < 0.0 || p > 1.0) {\n  throw new IllegalArgumentException(\"p must be between 0.0 and 1.0, inclusive.\");\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 145, 
          "faulty": "double d=getDenominatorDegreesOfFreedom();", 
          "type": "InsertBefore", 
          "seed": "if (p < 0.0 || p > 1.0) {\n  throw new IllegalArgumentException(\"probability of success must be between 0.0 and 1.0, inclusive.\");\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_418/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:48:55.063329130 -0500\n@@ -73,7 +73,8 @@\n             ret = 0.0;\n         } else {\n             double n = getNumeratorDegreesOfFreedom();\n-            double m = getDenominatorDegreesOfFreedom();\n+            ret = Double.NEGATIVE_INFINITY;\n+\t\t\tdouble m = getDenominatorDegreesOfFreedom();\n             \n             ret = Beta.regularizedBeta((n * x) / (m + n * x),\n                 0.5 * n,\n@@ -145,7 +146,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 76, 
          "faulty": "double m=getDenominatorDegreesOfFreedom();", 
          "type": "InsertBefore", 
          "seed": "ret=Double.NEGATIVE_INFINITY;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_823/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:53:21.647574369 -0500\n@@ -145,7 +145,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0d;\n     }\n     \n     /**\n@@ -181,7 +181,11 @@\n             throw new IllegalArgumentException(\n                 \"degrees of freedom must be positive.\");\n         }\n-        this.denominatorDegreesOfFreedom = degreesOfFreedom;\n+        if (degreesOfFreedom <= 0.0) {\n+\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\"degrees of freedom must be positive.\");\n+\t\t}\n+\t\tthis.denominatorDegreesOfFreedom = degreesOfFreedom;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0d;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 184, 
          "faulty": "this.denominatorDegreesOfFreedom=degreesOfFreedom;", 
          "type": "InsertBefore", 
          "seed": "if (degreesOfFreedom <= 0.0) {\n  throw new IllegalArgumentException(\"degrees of freedom must be positive.\");\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_1190/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:57:39.231766478 -0500\n@@ -145,7 +145,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return numeratorDegreesOfFreedom;\n     }\n     \n     /**\n\n\n--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\t2018-12-01 05:43:11.219151160 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_1190/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\t2018-12-01 05:57:39.231766478 -0500\n@@ -78,7 +78,10 @@\n               \n         // Try to bracket root, test domain endoints if this fails     \n         double lowerBound = getDomainLowerBound(p);\n-        double upperBound = getDomainUpperBound(p);\n+        if (p == 0) {\n+\t\t\treturn Double.NEGATIVE_INFINITY;\n+\t\t}\n+\t\tdouble upperBound = getDomainUpperBound(p);\n         double[] bracket = null;\n         try {\n             bracket = UnivariateRealSolverUtils.bracket(\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return numeratorDegreesOfFreedom;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java", 
          "line": 81, 
          "faulty": "double upperBound=getDomainUpperBound(p);", 
          "type": "InsertBefore", 
          "seed": "if (p == 0) {\n  return Double.NEGATIVE_INFINITY;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_959/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:55:06.863656370 -0500\n@@ -97,7 +97,11 @@\n      */\n     public double inverseCumulativeProbability(final double p) \n         throws MathException {\n-        if (p == 0) {\n+        if (p < 0.0 || p > 1.0) {\n+\t\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\t\"probability of success must be between 0.0 and 1.0, inclusive.\");\n+\t\t\t}\n+\t\tif (p == 0) {\n             return 0d;\n         }\n         if (p == 1) {\n@@ -145,7 +149,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0d;\n     }\n     \n     /**\n\n\n--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java\t2018-12-01 05:43:11.219151160 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_959/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java\t2018-12-01 05:55:06.863656370 -0500\n@@ -176,9 +176,13 @@\n             (\"bad value for maximumIterations: \" + maximumIterations);\n         }\n         if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n-            throw new IllegalArgumentException\n-            (\"Invalid endpoint parameters:  lowerBound=\" + lowerBound + \n-              \" initial=\" + initial + \" upperBound=\" + upperBound);\n+            if (initial < lowerBound || initial > upperBound\n+\t\t\t\t\t|| lowerBound >= upperBound) {\n+\t\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\t\"Invalid endpoint parameters:  lowerBound=\"\n+\t\t\t\t\t\t\t\t+ lowerBound + \" initial=\" + initial\n+\t\t\t\t\t\t\t\t+ \" upperBound=\" + upperBound);\n+\t\t\t}\n         }\n         double a = initial;\n         double b = initial;\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0d;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java", 
          "line": 179, 
          "faulty": "throw new IllegalArgumentException(\"Invalid endpoint parameters:  lowerBound=\" + lowerBound + \" initial=\"+ initial+ \" upperBound=\"+ upperBound);", 
          "type": "Replace", 
          "seed": "if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n  throw new IllegalArgumentException(\"Invalid endpoint parameters:  lowerBound=\" + lowerBound + \" initial=\"+ initial+ \" upperBound=\"+ upperBound);\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 100, 
          "faulty": "if (p == 0) {\n  return 0d;\n}", 
          "type": "InsertBefore", 
          "seed": "if (p < 0.0 || p > 1.0) {\n  throw new IllegalArgumentException(\"probability of success must be between 0.0 and 1.0, inclusive.\");\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_1326/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:59:07.115820737 -0500\n@@ -73,7 +73,8 @@\n             ret = 0.0;\n         } else {\n             double n = getNumeratorDegreesOfFreedom();\n-            double m = getDenominatorDegreesOfFreedom();\n+            ret = Double.NEGATIVE_INFINITY;\n+\t\t\tdouble m = getDenominatorDegreesOfFreedom();\n             \n             ret = Beta.regularizedBeta((n * x) / (m + n * x),\n                 0.5 * n,\n@@ -129,7 +130,7 @@\n      *         P(X &lt; <i>upper bound</i>) &gt; <code>p</code> \n      */\n     protected double getDomainUpperBound(double p) {\n-        return Double.MAX_VALUE;\n+        return Integer.MAX_VALUE - 1;\n     }\n \n     /**\n@@ -145,7 +146,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return numeratorDegreesOfFreedom;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return numeratorDegreesOfFreedom;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 76, 
          "faulty": "double m=getDenominatorDegreesOfFreedom();", 
          "type": "InsertBefore", 
          "seed": "ret=Double.NEGATIVE_INFINITY;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 132, 
          "faulty": "return Double.MAX_VALUE;", 
          "type": "Replace", 
          "seed": "return Integer.MAX_VALUE - 1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_905/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:54:13.259615376 -0500\n@@ -72,7 +72,8 @@\n         if (x <= 0.0) {\n             ret = 0.0;\n         } else {\n-            double n = getNumeratorDegreesOfFreedom();\n+            ret = 0.5;\n+\t\t\tdouble n = getNumeratorDegreesOfFreedom();\n             double m = getDenominatorDegreesOfFreedom();\n             \n             ret = Beta.regularizedBeta((n * x) / (m + n * x),\n@@ -145,7 +146,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 75, 
          "faulty": "double n=getNumeratorDegreesOfFreedom();", 
          "type": "InsertBefore", 
          "seed": "ret=0.5;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_703/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:52:06.003510811 -0500\n@@ -143,9 +143,12 @@\n     protected double getInitialDomain(double p) {\n         double ret;\n         double d = getDenominatorDegreesOfFreedom();\n-            // use mean\n+            if (p == 0) {\n+\t\t\treturn -1;\n+\t\t}\n+\t\t\t// use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 147, 
          "faulty": "ret=d / (d - 2.0);", 
          "type": "InsertBefore", 
          "seed": "if (p == 0) {\n  return -1;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_731/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:52:32.519533622 -0500\n@@ -145,7 +145,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0d;\n     }\n     \n     /**\n\n\n--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\t2018-12-01 05:43:11.219151160 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_731/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\t2018-12-01 05:52:32.519533622 -0500\n@@ -78,7 +78,10 @@\n               \n         // Try to bracket root, test domain endoints if this fails     \n         double lowerBound = getDomainLowerBound(p);\n-        double upperBound = getDomainUpperBound(p);\n+        if (p == 1) {\n+\t\t\treturn Double.POSITIVE_INFINITY;\n+\t\t}\n+\t\tdouble upperBound = getDomainUpperBound(p);\n         double[] bracket = null;\n         try {\n             bracket = UnivariateRealSolverUtils.bracket(\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0d;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java", 
          "line": 81, 
          "faulty": "double upperBound=getDomainUpperBound(p);", 
          "type": "InsertBefore", 
          "seed": "if (p == 1) {\n  return Double.POSITIVE_INFINITY;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_1559/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 06:01:57.199883590 -0500\n@@ -145,7 +145,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0;\n     }\n     \n     /**\n\n\n--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java\t2018-12-01 05:43:11.219151160 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_1559/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java\t2018-12-01 06:01:57.199883590 -0500\n@@ -171,7 +171,10 @@\n         if (function == null) {\n             throw new IllegalArgumentException (\"function is null.\");\n         }\n-        if (maximumIterations <= 0)  {\n+        if (function == null) {\n+\t\t\tthrow new IllegalArgumentException(\"function is null.\");\n+\t\t}\n+\t\tif (maximumIterations <= 0)  {\n             throw new IllegalArgumentException\n             (\"bad value for maximumIterations: \" + maximumIterations);\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java", 
          "line": 174, 
          "faulty": "if (maximumIterations <= 0) {\n  throw new IllegalArgumentException(\"bad value for maximumIterations: \" + maximumIterations);\n}", 
          "type": "InsertBefore", 
          "seed": "if (function == null) {\n  throw new IllegalArgumentException(\"function is null.\");\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_1188/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:57:38.635766061 -0500\n@@ -98,6 +98,9 @@\n     public double inverseCumulativeProbability(final double p) \n         throws MathException {\n         if (p == 0) {\n+\t\t\t\treturn 0d;\n+\t\t\t}\n+\t\tif (p == 0) {\n             return 0d;\n         }\n         if (p == 1) {\n@@ -142,10 +145,14 @@\n      */\n     protected double getInitialDomain(double p) {\n         double ret;\n-        double d = getDenominatorDegreesOfFreedom();\n+        if (p < 0.0 || p > 1.0) {\n+\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\"probability of success must be between 0.0 and 1.0, inclusive.\");\n+\t\t}\n+\t\tdouble d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0d;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0d;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 100, 
          "faulty": "if (p == 0) {\n  return 0d;\n}", 
          "type": "InsertBefore", 
          "seed": "if (p == 0) {\n  return 0d;\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 145, 
          "faulty": "double d=getDenominatorDegreesOfFreedom();", 
          "type": "InsertBefore", 
          "seed": "if (p < 0.0 || p > 1.0) {\n  throw new IllegalArgumentException(\"probability of success must be between 0.0 and 1.0, inclusive.\");\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_553/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:50:41.879433752 -0500\n@@ -97,7 +97,11 @@\n      */\n     public double inverseCumulativeProbability(final double p) \n         throws MathException {\n-        if (p == 0) {\n+        if (p < 0.0 || p > 1.0) {\n+\t\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\t\"probability of success must be between 0.0 and 1.0, inclusive.\");\n+\t\t\t}\n+\t\tif (p == 0) {\n             return 0d;\n         }\n         if (p == 1) {\n@@ -145,7 +149,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 100, 
          "faulty": "if (p == 0) {\n  return 0d;\n}", 
          "type": "InsertBefore", 
          "seed": "if (p < 0.0 || p > 1.0) {\n  throw new IllegalArgumentException(\"probability of success must be between 0.0 and 1.0, inclusive.\");\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_570/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:50:52.607444030 -0500\n@@ -145,7 +145,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0d;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0d;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 82, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return ret;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_637/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:51:27.379476392 -0500\n@@ -143,9 +143,10 @@\n     protected double getInitialDomain(double p) {\n         double ret;\n         double d = getDenominatorDegreesOfFreedom();\n-            // use mean\n-            ret = d / (d - 2.0);\n-        return ret;\n+            if (p == 0) {\n+\t\t\t\treturn -1;\n+\t\t\t}\n+        return 0;\n     }\n     \n     /**\n\n\n--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\t2018-12-01 05:43:11.219151160 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_637/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\t2018-12-01 05:51:27.379476392 -0500\n@@ -78,7 +78,11 @@\n               \n         // Try to bracket root, test domain endoints if this fails     \n         double lowerBound = getDomainLowerBound(p);\n-        double upperBound = getDomainUpperBound(p);\n+        if (p < 0.0 || p > 1.0) {\n+\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\"p must be between 0.0 and 1.0, inclusive.\");\n+\t\t}\n+\t\tdouble upperBound = getDomainUpperBound(p);\n         double[] bracket = null;\n         try {\n             bracket = UnivariateRealSolverUtils.bracket(\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 147, 
          "faulty": "ret=d / (d - 2.0);", 
          "type": "Replace", 
          "seed": "if (p == 0) {\n  return -1;\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java", 
          "line": 81, 
          "faulty": "double upperBound=getDomainUpperBound(p);", 
          "type": "InsertBefore", 
          "seed": "if (p < 0.0 || p > 1.0) {\n  throw new IllegalArgumentException(\"p must be between 0.0 and 1.0, inclusive.\");\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_1568/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 06:02:00.103884491 -0500\n@@ -145,7 +145,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0;\n     }\n     \n     /**\n\n\n--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\t2018-12-01 05:43:11.219151160 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_1568/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\t2018-12-01 06:02:00.107884492 -0500\n@@ -62,7 +62,10 @@\n             throw new IllegalArgumentException(\"p must be between 0.0 and 1.0, inclusive.\");\n         }\n \n-        // by default, do simple root finding using bracketing and default solver.\n+        if (p == 0) {\n+\t\t\treturn 0d;\n+\t\t}\n+\t\t// by default, do simple root finding using bracketing and default solver.\n         // subclasses can overide if there is a better method.\n         UnivariateRealFunction rootFindingFunction =\n             new UnivariateRealFunction() {\n@@ -78,7 +81,10 @@\n               \n         // Try to bracket root, test domain endoints if this fails     \n         double lowerBound = getDomainLowerBound(p);\n-        double upperBound = getDomainUpperBound(p);\n+        if (p == 1) {\n+\t\t\treturn Double.POSITIVE_INFINITY;\n+\t\t}\n+\t\tdouble upperBound = getDomainUpperBound(p);\n         double[] bracket = null;\n         try {\n             bracket = UnivariateRealSolverUtils.bracket(\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java", 
          "line": 67, 
          "faulty": "UnivariateRealFunction rootFindingFunction=new UnivariateRealFunction(){\n  public double value(  double x) throws FunctionEvaluationException {\n    try {\n      return cumulativeProbability(x) - p;\n    }\n catch (    MathException ex) {\n      throw new FunctionEvaluationException(x,ex.getPattern(),ex.getArguments(),ex);\n    }\n  }\n}\n;", 
          "type": "InsertBefore", 
          "seed": "if (p == 0) {\n  return 0d;\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java", 
          "line": 81, 
          "faulty": "double upperBound=getDomainUpperBound(p);", 
          "type": "InsertBefore", 
          "seed": "if (p == 1) {\n  return Double.POSITIVE_INFINITY;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_1360/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:59:35.823831956 -0500\n@@ -116,7 +116,8 @@\n      *         P(X &lt; <i>lower bound</i>) &lt; <code>p</code> \n      */\n     protected double getDomainLowerBound(double p) {\n-        return 0.0;\n+        setDenominatorDegreesOfFreedom(denominatorDegreesOfFreedom);\n+\t\treturn 0.0;\n     }\n \n     /**\n@@ -145,7 +146,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 119, 
          "faulty": "return 0.0;", 
          "type": "InsertBefore", 
          "seed": "setDenominatorDegreesOfFreedom(denominatorDegreesOfFreedom);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_1110/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:56:53.175734003 -0500\n@@ -145,7 +145,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0;\n     }\n     \n     /**\n\n\n--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java\t2018-12-01 05:43:11.219151160 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_1110/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java\t2018-12-01 05:56:53.175734003 -0500\n@@ -176,7 +176,14 @@\n             (\"bad value for maximumIterations: \" + maximumIterations);\n         }\n         if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n-            throw new IllegalArgumentException\n+            if (initial < lowerBound || initial > upperBound\n+\t\t\t\t\t|| lowerBound >= upperBound) {\n+\t\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\t\"Invalid endpoint parameters:  lowerBound=\"\n+\t\t\t\t\t\t\t\t+ lowerBound + \" initial=\" + initial\n+\t\t\t\t\t\t\t\t+ \" upperBound=\" + upperBound);\n+\t\t\t}\n+\t\t\tthrow new IllegalArgumentException\n             (\"Invalid endpoint parameters:  lowerBound=\" + lowerBound + \n               \" initial=\" + initial + \" upperBound=\" + upperBound);\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java", 
          "line": 179, 
          "faulty": "throw new IllegalArgumentException(\"Invalid endpoint parameters:  lowerBound=\" + lowerBound + \" initial=\"+ initial+ \" upperBound=\"+ upperBound);", 
          "type": "InsertBefore", 
          "seed": "if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n  throw new IllegalArgumentException(\"Invalid endpoint parameters:  lowerBound=\" + lowerBound + \" initial=\"+ initial+ \" upperBound=\"+ upperBound);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_245/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:47:04.887208972 -0500\n@@ -69,7 +69,8 @@\n      */\n     public double cumulativeProbability(double x) throws MathException {\n         double ret;\n-        if (x <= 0.0) {\n+        ret = 0.0;\n+\t\tif (x <= 0.0) {\n             ret = 0.0;\n         } else {\n             double n = getNumeratorDegreesOfFreedom();\n@@ -145,7 +146,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0;\n     }\n     \n     /**\n\n\n--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\t2018-12-01 05:43:11.219151160 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_245/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\t2018-12-01 05:47:04.891208977 -0500\n@@ -76,7 +76,10 @@\n             }\n         };\n               \n-        // Try to bracket root, test domain endoints if this fails     \n+        if (p == 1) {\n+\t\t\treturn Double.POSITIVE_INFINITY;\n+\t\t}\n+\t\t// Try to bracket root, test domain endoints if this fails     \n         double lowerBound = getDomainLowerBound(p);\n         double upperBound = getDomainUpperBound(p);\n         double[] bracket = null;\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 72, 
          "faulty": "if (x <= 0.0) {\n  ret=0.0;\n}\n else {\n  double n=getNumeratorDegreesOfFreedom();\n  double m=getDenominatorDegreesOfFreedom();\n  ret=Beta.regularizedBeta((n * x) / (m + n * x),0.5 * n,0.5 * m);\n}", 
          "type": "InsertBefore", 
          "seed": "ret=0.0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java", 
          "line": 80, 
          "faulty": "double lowerBound=getDomainLowerBound(p);", 
          "type": "InsertBefore", 
          "seed": "if (p == 1) {\n  return Double.POSITIVE_INFINITY;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_437/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:49:07.739341628 -0500\n@@ -145,7 +145,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return numeratorDegreesOfFreedom;\n     }\n     \n     /**\n\n\n--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java\t2018-12-01 05:43:11.219151160 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_437/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java\t2018-12-01 05:49:07.739341628 -0500\n@@ -176,9 +176,13 @@\n             (\"bad value for maximumIterations: \" + maximumIterations);\n         }\n         if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n-            throw new IllegalArgumentException\n-            (\"Invalid endpoint parameters:  lowerBound=\" + lowerBound + \n-              \" initial=\" + initial + \" upperBound=\" + upperBound);\n+            if (initial < lowerBound || initial > upperBound\n+\t\t\t\t\t|| lowerBound >= upperBound) {\n+\t\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\t\"Invalid endpoint parameters:  lowerBound=\"\n+\t\t\t\t\t\t\t\t+ lowerBound + \" initial=\" + initial\n+\t\t\t\t\t\t\t\t+ \" upperBound=\" + upperBound);\n+\t\t\t}\n         }\n         double a = initial;\n         double b = initial;\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return numeratorDegreesOfFreedom;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java", 
          "line": 179, 
          "faulty": "throw new IllegalArgumentException(\"Invalid endpoint parameters:  lowerBound=\" + lowerBound + \" initial=\"+ initial+ \" upperBound=\"+ upperBound);", 
          "type": "Replace", 
          "seed": "if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n  throw new IllegalArgumentException(\"Invalid endpoint parameters:  lowerBound=\" + lowerBound + \" initial=\"+ initial+ \" upperBound=\"+ upperBound);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_880/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:53:58.543603852 -0500\n@@ -98,6 +98,9 @@\n     public double inverseCumulativeProbability(final double p) \n         throws MathException {\n         if (p == 0) {\n+\t\t\t\treturn 0d;\n+\t\t\t}\n+\t\tif (p == 0) {\n             return 0d;\n         }\n         if (p == 1) {\n@@ -143,9 +146,10 @@\n     protected double getInitialDomain(double p) {\n         double ret;\n         double d = getDenominatorDegreesOfFreedom();\n-            // use mean\n-            ret = d / (d - 2.0);\n-        return ret;\n+            if (p == 0) {\n+\t\t\t\treturn -1;\n+\t\t\t}\n+        return 0;\n     }\n     \n     /**\n\n\n--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java\t2018-12-01 05:43:11.219151160 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_880/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java\t2018-12-01 05:53:58.543603852 -0500\n@@ -125,8 +125,8 @@\n     public static double[] bracket(UnivariateRealFunction function, \n             double initial, double lowerBound, double upperBound) \n     throws ConvergenceException, FunctionEvaluationException {\n-        return bracket( function, initial, lowerBound, upperBound,\n-            Integer.MAX_VALUE ) ;\n+        return bracket(function, initial, lowerBound, upperBound,\n+\t\t\t\tInteger.MAX_VALUE);\n     }\n \n      /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java", 
          "line": 128, 
          "faulty": "return bracket(function,initial,lowerBound,upperBound,Integer.MAX_VALUE);", 
          "type": "Replace", 
          "seed": "return bracket(function,initial,lowerBound,upperBound,Integer.MAX_VALUE);"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 147, 
          "faulty": "ret=d / (d - 2.0);", 
          "type": "Replace", 
          "seed": "if (p == 0) {\n  return -1;\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 100, 
          "faulty": "if (p == 0) {\n  return 0d;\n}", 
          "type": "InsertBefore", 
          "seed": "if (p == 0) {\n  return 0d;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_1305/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:58:59.907818031 -0500\n@@ -142,10 +142,12 @@\n      */\n     protected double getInitialDomain(double p) {\n         double ret;\n-        double d = getDenominatorDegreesOfFreedom();\n-            // use mean\n-            ret = d / (d - 2.0);\n-        return ret;\n+        if (p < 0.0 || p > 1.0) {\n+\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\"probability of success must be between 0.0 and 1.0, inclusive.\");\n+\t\t}\n+\t\tdouble d = getDenominatorDegreesOfFreedom();\n+            return 0d;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0d;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 147, 
          "faulty": "ret=d / (d - 2.0);", 
          "type": "Delete", 
          "seed": "if (p == 0) {\n  return -1;\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 145, 
          "faulty": "double d=getDenominatorDegreesOfFreedom();", 
          "type": "InsertBefore", 
          "seed": "if (p < 0.0 || p > 1.0) {\n  throw new IllegalArgumentException(\"probability of success must be between 0.0 and 1.0, inclusive.\");\n}"
        }
      ]
    }
  ]
}