{
  "repair_end": "2018-12-02 17:02:48.234079", 
  "repair_begin": "2018-12-02 16:50:23.841699", 
  "patches": [
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:50:15.340967631 -0500\n+++ /tmp/GenProg_Defects4J_Math_95/patches_yjg5/Patch_1061/patched/tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:59:19.762803289 -0500\n@@ -75,7 +75,9 @@\n             double n = getNumeratorDegreesOfFreedom();\n             double m = getDenominatorDegreesOfFreedom();\n             \n-            ret = Beta.regularizedBeta((n * x) / (m + n * x),\n+            if (x < 0)\n+\t\t\t\treturn 0;\n+\t\t\tret = Beta.regularizedBeta((n * x) / (m + n * x),\n                 0.5 * n,\n                 0.5 * m);\n         }\n@@ -143,9 +145,7 @@\n     protected double getInitialDomain(double p) {\n         double ret;\n         double d = getDenominatorDegreesOfFreedom();\n-            // use mean\n-            ret = d / (d - 2.0);\n-        return ret;\n+            return 0;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 78, 
          "faulty": "ret=Beta.regularizedBeta((n * x) / (m + n * x),0.5 * n,0.5 * m);", 
          "type": "InsertBefore", 
          "seed": "if (x < 0) return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 147, 
          "faulty": "ret=d / (d - 2.0);", 
          "type": "Delete", 
          "seed": "if (p < .5) {\n  ret=getAlpha() * getBeta() * .5;\n}\n else {\n  ret=getAlpha() * getBeta();\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\t2018-12-02 10:50:11.864967711 -0500\n+++ /tmp/GenProg_Defects4J_Math_95/patches_yjg5/Patch_1331/patched/tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\t2018-12-02 11:01:08.031096813 -0500\n@@ -81,7 +81,10 @@\n         double upperBound = getDomainUpperBound(p);\n         double[] bracket = null;\n         try {\n-            bracket = UnivariateRealSolverUtils.bracket(\n+            if (p == 1) {\n+\t\t\t\treturn Integer.MAX_VALUE;\n+\t\t\t}\n+\t\t\tbracket = UnivariateRealSolverUtils.bracket(\n                     rootFindingFunction, getInitialDomain(p),\n                     lowerBound, upperBound);\n         }  catch (ConvergenceException ex) {\n\n\n--- /tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:50:15.340967631 -0500\n+++ /tmp/GenProg_Defects4J_Math_95/patches_yjg5/Patch_1331/patched/tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 11:01:08.031096813 -0500\n@@ -143,9 +143,10 @@\n     protected double getInitialDomain(double p) {\n         double ret;\n         double d = getDenominatorDegreesOfFreedom();\n-            // use mean\n+            ret = Double.MAX_VALUE;\n+\t\t\t// use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 147, 
          "faulty": "ret=d / (d - 2.0);", 
          "type": "InsertBefore", 
          "seed": "ret=Double.MAX_VALUE;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java", 
          "line": 84, 
          "faulty": "bracket=UnivariateRealSolverUtils.bracket(rootFindingFunction,getInitialDomain(p),lowerBound,upperBound);", 
          "type": "InsertBefore", 
          "seed": "if (p == 1) {\n  return Integer.MAX_VALUE;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:50:15.340967631 -0500\n+++ /tmp/GenProg_Defects4J_Math_95/patches_yjg5/Patch_1580/patched/tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 11:02:38.375389960 -0500\n@@ -69,7 +69,8 @@\n      */\n     public double cumulativeProbability(double x) throws MathException {\n         double ret;\n-        if (x <= 0.0) {\n+        ret = 1.0;\n+\t\tif (x <= 0.0) {\n             ret = 0.0;\n         } else {\n             double n = getNumeratorDegreesOfFreedom();\n@@ -145,7 +146,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 72, 
          "faulty": "if (x <= 0.0) {\n  ret=0.0;\n}\n else {\n  double n=getNumeratorDegreesOfFreedom();\n  double m=getDenominatorDegreesOfFreedom();\n  ret=Beta.regularizedBeta((n * x) / (m + n * x),0.5 * n,0.5 * m);\n}", 
          "type": "InsertBefore", 
          "seed": "ret=1.0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:50:15.340967631 -0500\n+++ /tmp/GenProg_Defects4J_Math_95/patches_yjg5/Patch_564/patched/tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:55:55.854188644 -0500\n@@ -145,7 +145,11 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        if (p <= 0) {\n+\t\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\t\"The Poisson mean must be positive\");\n+\t\t\t}\n+\t\treturn 0;\n     }\n     \n     /**\n@@ -156,6 +160,10 @@\n      */\n     public void setNumeratorDegreesOfFreedom(double degreesOfFreedom) {\n         if (degreesOfFreedom <= 0.0) {\n+\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\"degrees of freedom must be positive.\");\n+\t\t}\n+\t\tif (degreesOfFreedom <= 0.0) {\n             throw new IllegalArgumentException(\n                 \"degrees of freedom must be positive.\");\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 158, 
          "faulty": "if (degreesOfFreedom <= 0.0) {\n  throw new IllegalArgumentException(\"degrees of freedom must be positive.\");\n}", 
          "type": "InsertBefore", 
          "seed": "if (degreesOfFreedom <= 0.0) {\n  throw new IllegalArgumentException(\"degrees of freedom must be positive.\");\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "InsertBefore", 
          "seed": "if (p <= 0) {\n  throw new IllegalArgumentException(\"The Poisson mean must be positive\");\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\t2018-12-02 10:50:11.864967711 -0500\n+++ /tmp/GenProg_Defects4J_Math_95/patches_yjg5/Patch_584/patched/tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\t2018-12-02 10:56:03.014237961 -0500\n@@ -81,7 +81,11 @@\n         double upperBound = getDomainUpperBound(p);\n         double[] bracket = null;\n         try {\n-            bracket = UnivariateRealSolverUtils.bracket(\n+            if (p < 0.0 || p > 1.0) {\n+\t\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\t\"p must be between 0.0 and 1.0, inclusive.\");\n+\t\t\t}\n+\t\t\tbracket = UnivariateRealSolverUtils.bracket(\n                     rootFindingFunction, getInitialDomain(p),\n                     lowerBound, upperBound);\n         }  catch (ConvergenceException ex) {\n\n\n--- /tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:50:15.340967631 -0500\n+++ /tmp/GenProg_Defects4J_Math_95/patches_yjg5/Patch_584/patched/tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:56:03.014237961 -0500\n@@ -97,9 +97,6 @@\n      */\n     public double inverseCumulativeProbability(final double p) \n         throws MathException {\n-        if (p == 0) {\n-            return 0d;\n-        }\n         if (p == 1) {\n             return Double.POSITIVE_INFINITY;\n         }\n@@ -145,7 +142,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 100, 
          "faulty": "if (p == 0) {\n  return 0d;\n}", 
          "type": "Delete", 
          "seed": "return Integer.MAX_VALUE;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java", 
          "line": 84, 
          "faulty": "bracket=UnivariateRealSolverUtils.bracket(rootFindingFunction,getInitialDomain(p),lowerBound,upperBound);", 
          "type": "InsertBefore", 
          "seed": "if (p < 0.0 || p > 1.0) {\n  throw new IllegalArgumentException(\"p must be between 0.0 and 1.0, inclusive.\");\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:50:15.340967631 -0500\n+++ /tmp/GenProg_Defects4J_Math_95/patches_yjg5/Patch_881/patched/tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:58:11.958614211 -0500\n@@ -143,9 +143,12 @@\n     protected double getInitialDomain(double p) {\n         double ret;\n         double d = getDenominatorDegreesOfFreedom();\n-            // use mean\n+            if (p == 0) {\n+\t\t\treturn 0d;\n+\t\t}\n+\t\t\t// use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 147, 
          "faulty": "ret=d / (d - 2.0);", 
          "type": "InsertBefore", 
          "seed": "if (p == 0) {\n  return 0d;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:50:15.340967631 -0500\n+++ /tmp/GenProg_Defects4J_Math_95/patches_yjg5/Patch_931/patched/tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:58:31.110668119 -0500\n@@ -103,7 +103,11 @@\n         if (p == 1) {\n             return Double.POSITIVE_INFINITY;\n         }\n-        return super.inverseCumulativeProbability(p);\n+        if (p == 1) {\n+\t\t\treturn 1;\n+\t\t} else {\n+\t\t\treturn super.inverseCumulativeProbability(p);\n+\t\t}\n     }\n         \n     /**\n@@ -143,9 +147,10 @@\n     protected double getInitialDomain(double p) {\n         double ret;\n         double d = getDenominatorDegreesOfFreedom();\n-            // use mean\n+            ret = Double.MAX_VALUE;\n+\t\t\t// use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 147, 
          "faulty": "ret=d / (d - 2.0);", 
          "type": "InsertBefore", 
          "seed": "ret=Double.MAX_VALUE;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 106, 
          "faulty": "return super.inverseCumulativeProbability(p);", 
          "type": "Replace", 
          "seed": "if (p == 1) {\n  return 1;\n}\n else {\n  return super.inverseCumulativeProbability(p);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:50:15.340967631 -0500\n+++ /tmp/GenProg_Defects4J_Math_95/patches_yjg5/Patch_1244/patched/tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 11:00:35.363009143 -0500\n@@ -145,7 +145,8 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        ret = 0.0;\n+\t\treturn 0;\n     }\n     \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java\t2018-12-02 10:50:11.860967711 -0500\n+++ /tmp/GenProg_Defects4J_Math_95/patches_yjg5/Patch_1244/patched/tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java\t2018-12-02 11:00:35.363009143 -0500\n@@ -176,9 +176,13 @@\n             (\"bad value for maximumIterations: \" + maximumIterations);\n         }\n         if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n-            throw new IllegalArgumentException\n-            (\"Invalid endpoint parameters:  lowerBound=\" + lowerBound + \n-              \" initial=\" + initial + \" upperBound=\" + upperBound);\n+            if (initial < lowerBound || initial > upperBound\n+\t\t\t\t\t|| lowerBound >= upperBound) {\n+\t\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\t\"Invalid endpoint parameters:  lowerBound=\"\n+\t\t\t\t\t\t\t\t+ lowerBound + \" initial=\" + initial\n+\t\t\t\t\t\t\t\t+ \" upperBound=\" + upperBound);\n+\t\t\t}\n         }\n         double a = initial;\n         double b = initial;\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "InsertBefore", 
          "seed": "ret=0.0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java", 
          "line": 179, 
          "faulty": "throw new IllegalArgumentException(\"Invalid endpoint parameters:  lowerBound=\" + lowerBound + \" initial=\"+ initial+ \" upperBound=\"+ upperBound);", 
          "type": "Replace", 
          "seed": "if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n  throw new IllegalArgumentException(\"Invalid endpoint parameters:  lowerBound=\" + lowerBound + \" initial=\"+ initial+ \" upperBound=\"+ upperBound);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:50:15.340967631 -0500\n+++ /tmp/GenProg_Defects4J_Math_95/patches_yjg5/Patch_299/patched/tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:54:06.420962278 -0500\n@@ -73,7 +73,8 @@\n             ret = 0.0;\n         } else {\n             double n = getNumeratorDegreesOfFreedom();\n-            double m = getDenominatorDegreesOfFreedom();\n+            double[] bracket = null;\n+\t\t\tdouble m = getDenominatorDegreesOfFreedom();\n             \n             ret = Beta.regularizedBeta((n * x) / (m + n * x),\n                 0.5 * n,\n@@ -145,7 +146,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 76, 
          "faulty": "double m=getDenominatorDegreesOfFreedom();", 
          "type": "InsertBefore", 
          "seed": "double[] bracket=null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:50:15.340967631 -0500\n+++ /tmp/GenProg_Defects4J_Math_95/patches_yjg5/Patch_361/patched/tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:54:29.737130928 -0500\n@@ -145,7 +145,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0;\n     }\n     \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java\t2018-12-02 10:50:11.860967711 -0500\n+++ /tmp/GenProg_Defects4J_Math_95/patches_yjg5/Patch_361/patched/tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java\t2018-12-02 10:54:29.741131017 -0500\n@@ -125,7 +125,14 @@\n     public static double[] bracket(UnivariateRealFunction function, \n             double initial, double lowerBound, double upperBound) \n     throws ConvergenceException, FunctionEvaluationException {\n-        return bracket( function, initial, lowerBound, upperBound,\n+        if (initial < lowerBound || initial > upperBound\n+\t\t\t\t|| lowerBound >= upperBound) {\n+\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\"Invalid endpoint parameters:  lowerBound=\" + lowerBound\n+\t\t\t\t\t\t\t+ \" initial=\" + initial + \" upperBound=\"\n+\t\t\t\t\t\t\t+ upperBound);\n+\t\t}\n+\t\treturn bracket( function, initial, lowerBound, upperBound,\n             Integer.MAX_VALUE ) ;\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java", 
          "line": 128, 
          "faulty": "return bracket(function,initial,lowerBound,upperBound,Integer.MAX_VALUE);", 
          "type": "InsertBefore", 
          "seed": "if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n  throw new IllegalArgumentException(\"Invalid endpoint parameters:  lowerBound=\" + lowerBound + \" initial=\"+ initial+ \" upperBound=\"+ upperBound);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:50:15.340967631 -0500\n+++ /tmp/GenProg_Defects4J_Math_95/patches_yjg5/Patch_716/patched/tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:56:53.446388245 -0500\n@@ -143,9 +143,11 @@\n     protected double getInitialDomain(double p) {\n         double ret;\n         double d = getDenominatorDegreesOfFreedom();\n-            // use mean\n-            ret = d / (d - 2.0);\n-        return ret;\n+            if (p <= 0) {\n+\t\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\t\"The Poisson mean must be positive\");\n+\t\t\t}\n+        return 0;\n     }\n     \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java\t2018-12-02 10:50:11.860967711 -0500\n+++ /tmp/GenProg_Defects4J_Math_95/patches_yjg5/Patch_716/patched/tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java\t2018-12-02 10:56:53.446388245 -0500\n@@ -171,7 +171,8 @@\n         if (function == null) {\n             throw new IllegalArgumentException (\"function is null.\");\n         }\n-        if (maximumIterations <= 0)  {\n+        int i = 1;\n+\t\tif (maximumIterations <= 0)  {\n             throw new IllegalArgumentException\n             (\"bad value for maximumIterations: \" + maximumIterations);\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java", 
          "line": 174, 
          "faulty": "if (maximumIterations <= 0) {\n  throw new IllegalArgumentException(\"bad value for maximumIterations: \" + maximumIterations);\n}", 
          "type": "InsertBefore", 
          "seed": "int i=1;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 147, 
          "faulty": "ret=d / (d - 2.0);", 
          "type": "Replace", 
          "seed": "if (p <= 0) {\n  throw new IllegalArgumentException(\"The Poisson mean must be positive\");\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:50:15.340967631 -0500\n+++ /tmp/GenProg_Defects4J_Math_95/patches_yjg5/Patch_1190/patched/tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 11:00:15.590955734 -0500\n@@ -145,7 +145,8 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        ret = 0.5;\n+\t\treturn 0;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "InsertBefore", 
          "seed": "ret=0.5;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:50:15.340967631 -0500\n+++ /tmp/GenProg_Defects4J_Math_95/patches_yjg5/Patch_934/patched/tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:58:31.886670293 -0500\n@@ -75,7 +75,9 @@\n             double n = getNumeratorDegreesOfFreedom();\n             double m = getDenominatorDegreesOfFreedom();\n             \n-            ret = Beta.regularizedBeta((n * x) / (m + n * x),\n+            if (x < 0)\n+\t\t\t\treturn 0;\n+\t\t\tret = Beta.regularizedBeta((n * x) / (m + n * x),\n                 0.5 * n,\n                 0.5 * m);\n         }\n@@ -143,9 +145,10 @@\n     protected double getInitialDomain(double p) {\n         double ret;\n         double d = getDenominatorDegreesOfFreedom();\n-            // use mean\n+            ret = Double.MAX_VALUE;\n+\t\t\t// use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 147, 
          "faulty": "ret=d / (d - 2.0);", 
          "type": "InsertBefore", 
          "seed": "ret=Double.MAX_VALUE;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 78, 
          "faulty": "ret=Beta.regularizedBeta((n * x) / (m + n * x),0.5 * n,0.5 * m);", 
          "type": "InsertBefore", 
          "seed": "if (x < 0) return 0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:50:15.340967631 -0500\n+++ /tmp/GenProg_Defects4J_Math_95/patches_yjg5/Patch_1589/patched/tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 11:02:41.515400417 -0500\n@@ -129,7 +129,8 @@\n      *         P(X &lt; <i>upper bound</i>) &gt; <code>p</code> \n      */\n     protected double getDomainUpperBound(double p) {\n-        return Double.MAX_VALUE;\n+        double n = getNumeratorDegreesOfFreedom();\n+\t\treturn Double.MAX_VALUE;\n     }\n \n     /**\n@@ -145,7 +146,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0;\n     }\n     \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java\t2018-12-02 10:50:11.860967711 -0500\n+++ /tmp/GenProg_Defects4J_Math_95/patches_yjg5/Patch_1589/patched/tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java\t2018-12-02 11:02:41.519400430 -0500\n@@ -175,7 +175,8 @@\n             throw new IllegalArgumentException\n             (\"bad value for maximumIterations: \" + maximumIterations);\n         }\n-        if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n+        factory = UnivariateRealSolverFactory.newInstance();\n+\t\tif (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n             throw new IllegalArgumentException\n             (\"Invalid endpoint parameters:  lowerBound=\" + lowerBound + \n               \" initial=\" + initial + \" upperBound=\" + upperBound);\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 132, 
          "faulty": "return Double.MAX_VALUE;", 
          "type": "InsertBefore", 
          "seed": "double n=getNumeratorDegreesOfFreedom();"
        }, 
        {
          "path": "src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java", 
          "line": 178, 
          "faulty": "if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n  throw new IllegalArgumentException(\"Invalid endpoint parameters:  lowerBound=\" + lowerBound + \" initial=\"+ initial+ \" upperBound=\"+ upperBound);\n}", 
          "type": "InsertBefore", 
          "seed": "factory=UnivariateRealSolverFactory.newInstance();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:50:15.340967631 -0500\n+++ /tmp/GenProg_Defects4J_Math_95/patches_yjg5/Patch_600/patched/tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:56:09.038256159 -0500\n@@ -145,7 +145,11 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        if (p <= 0) {\n+\t\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\t\"The Poisson mean must be positive\");\n+\t\t\t}\n+\t\treturn 0;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "InsertBefore", 
          "seed": "if (p <= 0) {\n  throw new IllegalArgumentException(\"The Poisson mean must be positive\");\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:50:15.340967631 -0500\n+++ /tmp/GenProg_Defects4J_Math_95/patches_yjg5/Patch_1342/patched/tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 11:01:11.599106347 -0500\n@@ -143,9 +143,8 @@\n     protected double getInitialDomain(double p) {\n         double ret;\n         double d = getDenominatorDegreesOfFreedom();\n-            // use mean\n-            ret = d / (d - 2.0);\n-        return ret;\n+            ret = Double.POSITIVE_INFINITY;\n+        return 0;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 147, 
          "faulty": "ret=d / (d - 2.0);", 
          "type": "Replace", 
          "seed": "ret=Double.POSITIVE_INFINITY;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:50:15.340967631 -0500\n+++ /tmp/GenProg_Defects4J_Math_95/patches_yjg5/Patch_454/patched/tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:55:06.725651639 -0500\n@@ -73,7 +73,8 @@\n             ret = 0.0;\n         } else {\n             double n = getNumeratorDegreesOfFreedom();\n-            double m = getDenominatorDegreesOfFreedom();\n+            double[] bracket = null;\n+\t\t\tdouble m = getDenominatorDegreesOfFreedom();\n             \n             ret = Beta.regularizedBeta((n * x) / (m + n * x),\n                 0.5 * n,\n@@ -97,9 +98,10 @@\n      */\n     public double inverseCumulativeProbability(final double p) \n         throws MathException {\n-        if (p == 0) {\n-            return 0d;\n-        }\n+        if (p < 0.0 || p > 1.0) {\n+\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\"p must be between 0 and 1.0 (inclusive)\");\n+\t\t}\n         if (p == 1) {\n             return Double.POSITIVE_INFINITY;\n         }\n@@ -145,7 +147,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 76, 
          "faulty": "double m=getDenominatorDegreesOfFreedom();", 
          "type": "InsertBefore", 
          "seed": "double[] bracket=null;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 100, 
          "faulty": "if (p == 0) {\n  return 0d;\n}", 
          "type": "Replace", 
          "seed": "if (p < 0.0 || p > 1.0) {\n  throw new IllegalArgumentException(\"p must be between 0 and 1.0 (inclusive)\");\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:50:15.340967631 -0500\n+++ /tmp/GenProg_Defects4J_Math_95/patches_yjg5/Patch_764/patched/tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:57:16.866456574 -0500\n@@ -72,7 +72,10 @@\n         if (x <= 0.0) {\n             ret = 0.0;\n         } else {\n-            double n = getNumeratorDegreesOfFreedom();\n+            if (x < 0) {\n+\t\t\t\treturn 0;\n+\t\t\t}\n+\t\t\tdouble n = getNumeratorDegreesOfFreedom();\n             double m = getDenominatorDegreesOfFreedom();\n             \n             ret = Beta.regularizedBeta((n * x) / (m + n * x),\n@@ -145,7 +148,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 75, 
          "faulty": "double n=getNumeratorDegreesOfFreedom();", 
          "type": "InsertBefore", 
          "seed": "if (x < 0) {\n  return 0;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:50:15.340967631 -0500\n+++ /tmp/GenProg_Defects4J_Math_95/patches_yjg5/Patch_246/patched/tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:53:47.020962728 -0500\n@@ -72,7 +72,8 @@\n         if (x <= 0.0) {\n             ret = 0.0;\n         } else {\n-            double n = getNumeratorDegreesOfFreedom();\n+            double d = getDenominatorDegreesOfFreedom();\n+\t\t\tdouble n = getNumeratorDegreesOfFreedom();\n             double m = getDenominatorDegreesOfFreedom();\n             \n             ret = Beta.regularizedBeta((n * x) / (m + n * x),\n@@ -145,7 +146,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 75, 
          "faulty": "double n=getNumeratorDegreesOfFreedom();", 
          "type": "InsertBefore", 
          "seed": "double d=getDenominatorDegreesOfFreedom();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:50:15.340967631 -0500\n+++ /tmp/GenProg_Defects4J_Math_95/patches_yjg5/Patch_1514/patched/tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 11:02:13.611306468 -0500\n@@ -100,7 +100,10 @@\n         if (p == 0) {\n             return 0d;\n         }\n-        if (p == 1) {\n+        if (p == 0) {\n+\t\t\treturn Double.NEGATIVE_INFINITY;\n+\t\t}\n+\t\tif (p == 1) {\n             return Double.POSITIVE_INFINITY;\n         }\n         return super.inverseCumulativeProbability(p);\n@@ -143,9 +146,8 @@\n     protected double getInitialDomain(double p) {\n         double ret;\n         double d = getDenominatorDegreesOfFreedom();\n-            // use mean\n-            ret = d / (d - 2.0);\n-        return ret;\n+            double[] bracket = null;\n+        return 0;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 103, 
          "faulty": "if (p == 1) {\n  return Double.POSITIVE_INFINITY;\n}", 
          "type": "InsertBefore", 
          "seed": "if (p == 0) {\n  return Double.NEGATIVE_INFINITY;\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 147, 
          "faulty": "ret=d / (d - 2.0);", 
          "type": "Replace", 
          "seed": "double[] bracket=null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:50:15.340967631 -0500\n+++ /tmp/GenProg_Defects4J_Math_95/patches_yjg5/Patch_1082/patched/tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:59:27.566824758 -0500\n@@ -75,7 +75,8 @@\n             double n = getNumeratorDegreesOfFreedom();\n             double m = getDenominatorDegreesOfFreedom();\n             \n-            ret = Beta.regularizedBeta((n * x) / (m + n * x),\n+            double d = getDenominatorDegreesOfFreedom();\n+\t\t\tret = Beta.regularizedBeta((n * x) / (m + n * x),\n                 0.5 * n,\n                 0.5 * m);\n         }\n@@ -143,9 +144,10 @@\n     protected double getInitialDomain(double p) {\n         double ret;\n         double d = getDenominatorDegreesOfFreedom();\n-            // use mean\n-            ret = d / (d - 2.0);\n-        return ret;\n+            if (p == 0) {\n+\t\t\treturn 0d;\n+\t\t}\n+\t\t\treturn 0;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 147, 
          "faulty": "ret=d / (d - 2.0);", 
          "type": "InsertBefore", 
          "seed": "if (p == 0) {\n  return 0d;\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 147, 
          "faulty": "ret=d / (d - 2.0);", 
          "type": "Delete", 
          "seed": "return getUpperDomain(getSampleSize(),getNumberOfSuccesses());"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 78, 
          "faulty": "ret=Beta.regularizedBeta((n * x) / (m + n * x),0.5 * n,0.5 * m);", 
          "type": "InsertBefore", 
          "seed": "double d=getDenominatorDegreesOfFreedom();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:50:15.340967631 -0500\n+++ /tmp/GenProg_Defects4J_Math_95/patches_yjg5/Patch_1458/patched/tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 11:01:54.523240790 -0500\n@@ -100,7 +100,10 @@\n         if (p == 0) {\n             return 0d;\n         }\n-        if (p == 1) {\n+        if (p == 0) {\n+\t\t\treturn Double.NEGATIVE_INFINITY;\n+\t\t}\n+\t\tif (p == 1) {\n             return Double.POSITIVE_INFINITY;\n         }\n         return super.inverseCumulativeProbability(p);\n@@ -129,7 +132,8 @@\n      *         P(X &lt; <i>upper bound</i>) &gt; <code>p</code> \n      */\n     protected double getDomainUpperBound(double p) {\n-        return Double.MAX_VALUE;\n+        double n = getNumeratorDegreesOfFreedom();\n+\t\treturn Double.MAX_VALUE;\n     }\n \n     /**\n@@ -143,9 +147,7 @@\n     protected double getInitialDomain(double p) {\n         double ret;\n         double d = getDenominatorDegreesOfFreedom();\n-            // use mean\n-            ret = d / (d - 2.0);\n-        return ret;\n+            return 0;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 132, 
          "faulty": "return Double.MAX_VALUE;", 
          "type": "InsertBefore", 
          "seed": "double n=getNumeratorDegreesOfFreedom();"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 103, 
          "faulty": "if (p == 1) {\n  return Double.POSITIVE_INFINITY;\n}", 
          "type": "InsertBefore", 
          "seed": "if (p == 0) {\n  return Double.NEGATIVE_INFINITY;\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 147, 
          "faulty": "ret=d / (d - 2.0);", 
          "type": "Delete", 
          "seed": "return 0.0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:50:15.340967631 -0500\n+++ /tmp/GenProg_Defects4J_Math_95/patches_yjg5/Patch_556/patched/tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:55:53.046162906 -0500\n@@ -97,9 +97,6 @@\n      */\n     public double inverseCumulativeProbability(final double p) \n         throws MathException {\n-        if (p == 0) {\n-            return 0d;\n-        }\n         if (p == 1) {\n             return Double.POSITIVE_INFINITY;\n         }\n@@ -145,7 +142,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0;\n     }\n     \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java\t2018-12-02 10:50:11.860967711 -0500\n+++ /tmp/GenProg_Defects4J_Math_95/patches_yjg5/Patch_556/patched/tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java\t2018-12-02 10:55:53.046162906 -0500\n@@ -125,7 +125,14 @@\n     public static double[] bracket(UnivariateRealFunction function, \n             double initial, double lowerBound, double upperBound) \n     throws ConvergenceException, FunctionEvaluationException {\n-        return bracket( function, initial, lowerBound, upperBound,\n+        if (initial < lowerBound || initial > upperBound\n+\t\t\t\t|| lowerBound >= upperBound) {\n+\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\"Invalid endpoint parameters:  lowerBound=\" + lowerBound\n+\t\t\t\t\t\t\t+ \" initial=\" + initial + \" upperBound=\"\n+\t\t\t\t\t\t\t+ upperBound);\n+\t\t}\n+\t\treturn bracket( function, initial, lowerBound, upperBound,\n             Integer.MAX_VALUE ) ;\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java", 
          "line": 128, 
          "faulty": "return bracket(function,initial,lowerBound,upperBound,Integer.MAX_VALUE);", 
          "type": "InsertBefore", 
          "seed": "if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n  throw new IllegalArgumentException(\"Invalid endpoint parameters:  lowerBound=\" + lowerBound + \" initial=\"+ initial+ \" upperBound=\"+ upperBound);\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 100, 
          "faulty": "if (p == 0) {\n  return 0d;\n}", 
          "type": "Delete", 
          "seed": "return 0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:50:15.340967631 -0500\n+++ /tmp/GenProg_Defects4J_Math_95/patches_yjg5/Patch_250/patched/tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:53:48.184962701 -0500\n@@ -145,7 +145,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0;\n     }\n     \n     /**\n@@ -156,6 +156,10 @@\n      */\n     public void setNumeratorDegreesOfFreedom(double degreesOfFreedom) {\n         if (degreesOfFreedom <= 0.0) {\n+\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\"degrees of freedom must be positive.\");\n+\t\t}\n+\t\tif (degreesOfFreedom <= 0.0) {\n             throw new IllegalArgumentException(\n                 \"degrees of freedom must be positive.\");\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 158, 
          "faulty": "if (degreesOfFreedom <= 0.0) {\n  throw new IllegalArgumentException(\"degrees of freedom must be positive.\");\n}", 
          "type": "InsertBefore", 
          "seed": "if (degreesOfFreedom <= 0.0) {\n  throw new IllegalArgumentException(\"degrees of freedom must be positive.\");\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:50:15.340967631 -0500\n+++ /tmp/GenProg_Defects4J_Math_95/patches_yjg5/Patch_1340/patched/tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 11:01:11.203105289 -0500\n@@ -100,7 +100,10 @@\n         if (p == 0) {\n             return 0d;\n         }\n-        if (p == 1) {\n+        if (p == 0) {\n+\t\t\treturn Double.NEGATIVE_INFINITY;\n+\t\t}\n+\t\tif (p == 1) {\n             return Double.POSITIVE_INFINITY;\n         }\n         return super.inverseCumulativeProbability(p);\n@@ -129,7 +132,8 @@\n      *         P(X &lt; <i>upper bound</i>) &gt; <code>p</code> \n      */\n     protected double getDomainUpperBound(double p) {\n-        return Double.MAX_VALUE;\n+        double n = getNumeratorDegreesOfFreedom();\n+\t\treturn Double.MAX_VALUE;\n     }\n \n     /**\n@@ -143,9 +147,10 @@\n     protected double getInitialDomain(double p) {\n         double ret;\n         double d = getDenominatorDegreesOfFreedom();\n-            // use mean\n-            ret = d / (d - 2.0);\n-        return ret;\n+            if (p == 0) {\n+\t\t\treturn 0d;\n+\t\t}\n+\t\t\treturn 0;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 147, 
          "faulty": "ret=d / (d - 2.0);", 
          "type": "InsertBefore", 
          "seed": "if (p == 0) {\n  return 0d;\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 147, 
          "faulty": "ret=d / (d - 2.0);", 
          "type": "Delete", 
          "seed": "return getUpperDomain(getSampleSize(),getNumberOfSuccesses());"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 132, 
          "faulty": "return Double.MAX_VALUE;", 
          "type": "InsertBefore", 
          "seed": "double n=getNumeratorDegreesOfFreedom();"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 103, 
          "faulty": "if (p == 1) {\n  return Double.POSITIVE_INFINITY;\n}", 
          "type": "InsertBefore", 
          "seed": "if (p == 0) {\n  return Double.NEGATIVE_INFINITY;\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 147, 
          "faulty": "ret=d / (d - 2.0);", 
          "type": "Delete", 
          "seed": "return 0.0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:50:15.340967631 -0500\n+++ /tmp/GenProg_Defects4J_Math_95/patches_yjg5/Patch_994/patched/tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:58:53.178729728 -0500\n@@ -75,7 +75,8 @@\n             double n = getNumeratorDegreesOfFreedom();\n             double m = getDenominatorDegreesOfFreedom();\n             \n-            ret = Beta.regularizedBeta((n * x) / (m + n * x),\n+            double d = getDenominatorDegreesOfFreedom();\n+\t\t\tret = Beta.regularizedBeta((n * x) / (m + n * x),\n                 0.5 * n,\n                 0.5 * m);\n         }\n@@ -143,9 +144,10 @@\n     protected double getInitialDomain(double p) {\n         double ret;\n         double d = getDenominatorDegreesOfFreedom();\n-            // use mean\n+            ret = Double.MAX_VALUE;\n+\t\t\t// use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 147, 
          "faulty": "ret=d / (d - 2.0);", 
          "type": "InsertBefore", 
          "seed": "ret=Double.MAX_VALUE;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 78, 
          "faulty": "ret=Beta.regularizedBeta((n * x) / (m + n * x),0.5 * n,0.5 * m);", 
          "type": "InsertBefore", 
          "seed": "double d=getDenominatorDegreesOfFreedom();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:50:15.340967631 -0500\n+++ /tmp/GenProg_Defects4J_Math_95/patches_yjg5/Patch_1277/patched/tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 11:00:48.263043846 -0500\n@@ -100,7 +100,10 @@\n         if (p == 0) {\n             return 0d;\n         }\n-        if (p == 1) {\n+        if (p == 0) {\n+\t\t\treturn Double.NEGATIVE_INFINITY;\n+\t\t}\n+\t\tif (p == 1) {\n             return Double.POSITIVE_INFINITY;\n         }\n         return super.inverseCumulativeProbability(p);\n@@ -145,7 +148,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 103, 
          "faulty": "if (p == 1) {\n  return Double.POSITIVE_INFINITY;\n}", 
          "type": "InsertBefore", 
          "seed": "if (p == 0) {\n  return Double.NEGATIVE_INFINITY;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:50:15.340967631 -0500\n+++ /tmp/GenProg_Defects4J_Math_95/patches_yjg5/Patch_1355/patched/tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 11:01:15.527116835 -0500\n@@ -129,7 +129,8 @@\n      *         P(X &lt; <i>upper bound</i>) &gt; <code>p</code> \n      */\n     protected double getDomainUpperBound(double p) {\n-        return Double.MAX_VALUE;\n+        double n = getNumeratorDegreesOfFreedom();\n+\t\treturn Double.MAX_VALUE;\n     }\n \n     /**\n@@ -142,10 +143,7 @@\n      */\n     protected double getInitialDomain(double p) {\n         double ret;\n-        double d = getDenominatorDegreesOfFreedom();\n-            // use mean\n-            ret = d / (d - 2.0);\n-        return ret;\n+        return 0;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 147, 
          "faulty": "ret=d / (d - 2.0);", 
          "type": "Delete", 
          "seed": "return getUpperDomain(getSampleSize(),getNumberOfSuccesses());"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 132, 
          "faulty": "return Double.MAX_VALUE;", 
          "type": "InsertBefore", 
          "seed": "double n=getNumeratorDegreesOfFreedom();"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 145, 
          "faulty": "double d=getDenominatorDegreesOfFreedom();", 
          "type": "Delete", 
          "seed": "double d=getDenominatorDegreesOfFreedom();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:50:15.340967631 -0500\n+++ /tmp/GenProg_Defects4J_Math_95/patches_yjg5/Patch_948/patched/tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:58:36.986684573 -0500\n@@ -75,7 +75,9 @@\n             double n = getNumeratorDegreesOfFreedom();\n             double m = getDenominatorDegreesOfFreedom();\n             \n-            ret = Beta.regularizedBeta((n * x) / (m + n * x),\n+            if (x < 0)\n+\t\t\t\treturn 0;\n+\t\t\tret = Beta.regularizedBeta((n * x) / (m + n * x),\n                 0.5 * n,\n                 0.5 * m);\n         }\n@@ -97,9 +99,6 @@\n      */\n     public double inverseCumulativeProbability(final double p) \n         throws MathException {\n-        if (p == 0) {\n-            return 0d;\n-        }\n         if (p == 1) {\n             return Double.POSITIVE_INFINITY;\n         }\n@@ -143,9 +142,10 @@\n     protected double getInitialDomain(double p) {\n         double ret;\n         double d = getDenominatorDegreesOfFreedom();\n-            // use mean\n+            ret = Double.MAX_VALUE;\n+\t\t\t// use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 147, 
          "faulty": "ret=d / (d - 2.0);", 
          "type": "InsertBefore", 
          "seed": "ret=Double.MAX_VALUE;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 78, 
          "faulty": "ret=Beta.regularizedBeta((n * x) / (m + n * x),0.5 * n,0.5 * m);", 
          "type": "InsertBefore", 
          "seed": "if (x < 0) return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 100, 
          "faulty": "if (p == 0) {\n  return 0d;\n}", 
          "type": "Delete", 
          "seed": "if (p == 1) {\n  return Integer.MAX_VALUE;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:50:15.340967631 -0500\n+++ /tmp/GenProg_Defects4J_Math_95/patches_yjg5/Patch_325/patched/tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:54:17.000962033 -0500\n@@ -97,9 +97,6 @@\n      */\n     public double inverseCumulativeProbability(final double p) \n         throws MathException {\n-        if (p == 0) {\n-            return 0d;\n-        }\n         if (p == 1) {\n             return Double.POSITIVE_INFINITY;\n         }\n@@ -145,7 +142,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 100, 
          "faulty": "if (p == 0) {\n  return 0d;\n}", 
          "type": "Delete", 
          "seed": "return 0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:50:15.340967631 -0500\n+++ /tmp/GenProg_Defects4J_Math_95/patches_yjg5/Patch_681/patched/tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:56:39.818348080 -0500\n@@ -145,7 +145,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0;\n     }\n     \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java\t2018-12-02 10:50:11.860967711 -0500\n+++ /tmp/GenProg_Defects4J_Math_95/patches_yjg5/Patch_681/patched/tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java\t2018-12-02 10:56:39.818348080 -0500\n@@ -171,7 +171,8 @@\n         if (function == null) {\n             throw new IllegalArgumentException (\"function is null.\");\n         }\n-        if (maximumIterations <= 0)  {\n+        int i = 1;\n+\t\tif (maximumIterations <= 0)  {\n             throw new IllegalArgumentException\n             (\"bad value for maximumIterations: \" + maximumIterations);\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java", 
          "line": 174, 
          "faulty": "if (maximumIterations <= 0) {\n  throw new IllegalArgumentException(\"bad value for maximumIterations: \" + maximumIterations);\n}", 
          "type": "InsertBefore", 
          "seed": "int i=1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:50:15.340967631 -0500\n+++ /tmp/GenProg_Defects4J_Math_95/patches_yjg5/Patch_1445/patched/tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 11:01:49.803224360 -0500\n@@ -100,7 +100,10 @@\n         if (p == 0) {\n             return 0d;\n         }\n-        if (p == 1) {\n+        if (p == 0) {\n+\t\t\treturn Double.NEGATIVE_INFINITY;\n+\t\t}\n+\t\tif (p == 1) {\n             return Double.POSITIVE_INFINITY;\n         }\n         return super.inverseCumulativeProbability(p);\n@@ -143,9 +146,10 @@\n     protected double getInitialDomain(double p) {\n         double ret;\n         double d = getDenominatorDegreesOfFreedom();\n-            // use mean\n-            ret = d / (d - 2.0);\n-        return ret;\n+            if (p == 0) {\n+\t\t\treturn 0d;\n+\t\t}\n+\t\t\treturn 0;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 147, 
          "faulty": "ret=d / (d - 2.0);", 
          "type": "InsertBefore", 
          "seed": "if (p == 0) {\n  return 0d;\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 103, 
          "faulty": "if (p == 1) {\n  return Double.POSITIVE_INFINITY;\n}", 
          "type": "InsertBefore", 
          "seed": "if (p == 0) {\n  return Double.NEGATIVE_INFINITY;\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 147, 
          "faulty": "ret=d / (d - 2.0);", 
          "type": "Delete", 
          "seed": "if (p == 1) {\n  return 1;\n}\n else {\n  return super.inverseCumulativeProbability(p);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:50:15.340967631 -0500\n+++ /tmp/GenProg_Defects4J_Math_95/patches_yjg5/Patch_854/patched/tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:58:02.090586267 -0500\n@@ -70,15 +70,12 @@\n     public double cumulativeProbability(double x) throws MathException {\n         double ret;\n         if (x <= 0.0) {\n-            ret = 0.0;\n-        } else {\n-            double n = getNumeratorDegreesOfFreedom();\n-            double m = getDenominatorDegreesOfFreedom();\n-            \n-            ret = Beta.regularizedBeta((n * x) / (m + n * x),\n-                0.5 * n,\n-                0.5 * m);\n-        }\n+\t\t\tret = 0.0;\n+\t\t} else {\n+\t\t\tdouble n = getNumeratorDegreesOfFreedom();\n+\t\t\tdouble m = getDenominatorDegreesOfFreedom();\n+\t\t\tret = Beta.regularizedBeta((n * x) / (m + n * x), 0.5 * n, 0.5 * m);\n+\t\t}\n         return ret;\n     }\n     \n@@ -143,9 +140,10 @@\n     protected double getInitialDomain(double p) {\n         double ret;\n         double d = getDenominatorDegreesOfFreedom();\n-            // use mean\n+            ret = Double.MAX_VALUE;\n+\t\t\t// use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 147, 
          "faulty": "ret=d / (d - 2.0);", 
          "type": "InsertBefore", 
          "seed": "ret=Double.MAX_VALUE;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 72, 
          "faulty": "if (x <= 0.0) {\n  ret=0.0;\n}\n else {\n  double n=getNumeratorDegreesOfFreedom();\n  double m=getDenominatorDegreesOfFreedom();\n  ret=Beta.regularizedBeta((n * x) / (m + n * x),0.5 * n,0.5 * m);\n}", 
          "type": "Replace", 
          "seed": "if (x <= 0.0) {\n  ret=0.0;\n}\n else {\n  double n=getNumeratorDegreesOfFreedom();\n  double m=getDenominatorDegreesOfFreedom();\n  ret=Beta.regularizedBeta((n * x) / (m + n * x),0.5 * n,0.5 * m);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:50:15.340967631 -0500\n+++ /tmp/GenProg_Defects4J_Math_95/patches_yjg5/Patch_1462/patched/tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 11:01:55.719244940 -0500\n@@ -145,7 +145,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0;\n     }\n     \n     /**\n@@ -181,7 +181,8 @@\n             throw new IllegalArgumentException(\n                 \"degrees of freedom must be positive.\");\n         }\n-        this.denominatorDegreesOfFreedom = degreesOfFreedom;\n+        double n = getNumeratorDegreesOfFreedom();\n+\t\tthis.denominatorDegreesOfFreedom = degreesOfFreedom;\n     }\n     \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java\t2018-12-02 10:50:11.860967711 -0500\n+++ /tmp/GenProg_Defects4J_Math_95/patches_yjg5/Patch_1462/patched/tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java\t2018-12-02 11:01:55.719244940 -0500\n@@ -176,7 +176,8 @@\n             (\"bad value for maximumIterations: \" + maximumIterations);\n         }\n         if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n-            throw new IllegalArgumentException\n+            double b = initial;\n+\t\t\tthrow new IllegalArgumentException\n             (\"Invalid endpoint parameters:  lowerBound=\" + lowerBound + \n               \" initial=\" + initial + \" upperBound=\" + upperBound);\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 184, 
          "faulty": "this.denominatorDegreesOfFreedom=degreesOfFreedom;", 
          "type": "InsertBefore", 
          "seed": "double n=getNumeratorDegreesOfFreedom();"
        }, 
        {
          "path": "src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java", 
          "line": 179, 
          "faulty": "throw new IllegalArgumentException(\"Invalid endpoint parameters:  lowerBound=\" + lowerBound + \" initial=\"+ initial+ \" upperBound=\"+ upperBound);", 
          "type": "InsertBefore", 
          "seed": "double b=initial;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:50:15.340967631 -0500\n+++ /tmp/GenProg_Defects4J_Math_95/patches_yjg5/Patch_261/patched/tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:53:52.144962609 -0500\n@@ -143,9 +143,7 @@\n     protected double getInitialDomain(double p) {\n         double ret;\n         double d = getDenominatorDegreesOfFreedom();\n-            // use mean\n-            ret = d / (d - 2.0);\n-        return ret;\n+            return 0;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 147, 
          "faulty": "ret=d / (d - 2.0);", 
          "type": "Delete", 
          "seed": "ret=getMean() - getStandardDeviation();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:50:15.340967631 -0500\n+++ /tmp/GenProg_Defects4J_Math_95/patches_yjg5/Patch_346/patched/tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:54:24.549007216 -0500\n@@ -75,7 +75,8 @@\n             double n = getNumeratorDegreesOfFreedom();\n             double m = getDenominatorDegreesOfFreedom();\n             \n-            ret = Beta.regularizedBeta((n * x) / (m + n * x),\n+            double logX = Math.log(x);\n+\t\t\tret = Beta.regularizedBeta((n * x) / (m + n * x),\n                 0.5 * n,\n                 0.5 * m);\n         }\n@@ -145,7 +146,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 78, 
          "faulty": "ret=Beta.regularizedBeta((n * x) / (m + n * x),0.5 * n,0.5 * m);", 
          "type": "InsertBefore", 
          "seed": "double logX=Math.log(x);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:50:15.340967631 -0500\n+++ /tmp/GenProg_Defects4J_Math_95/patches_yjg5/Patch_1487/patched/tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 11:02:04.099273889 -0500\n@@ -142,10 +142,7 @@\n      */\n     protected double getInitialDomain(double p) {\n         double ret;\n-        double d = getDenominatorDegreesOfFreedom();\n-            // use mean\n-            ret = d / (d - 2.0);\n-        return ret;\n+        return 0;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 147, 
          "faulty": "ret=d / (d - 2.0);", 
          "type": "Delete", 
          "seed": "return getUpperDomain(getSampleSize(),getNumberOfSuccesses());"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 145, 
          "faulty": "double d=getDenominatorDegreesOfFreedom();", 
          "type": "Delete", 
          "seed": "ret=getDegreesOfFreedom();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:50:15.340967631 -0500\n+++ /tmp/GenProg_Defects4J_Math_95/patches_yjg5/Patch_1002/patched/tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:58:55.934737386 -0500\n@@ -75,7 +75,8 @@\n             double n = getNumeratorDegreesOfFreedom();\n             double m = getDenominatorDegreesOfFreedom();\n             \n-            ret = Beta.regularizedBeta((n * x) / (m + n * x),\n+            ret = Double.MAX_VALUE;\n+\t\t\tret = Beta.regularizedBeta((n * x) / (m + n * x),\n                 0.5 * n,\n                 0.5 * m);\n         }\n@@ -143,9 +144,10 @@\n     protected double getInitialDomain(double p) {\n         double ret;\n         double d = getDenominatorDegreesOfFreedom();\n-            // use mean\n+            ret = Double.MAX_VALUE;\n+\t\t\t// use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 147, 
          "faulty": "ret=d / (d - 2.0);", 
          "type": "InsertBefore", 
          "seed": "ret=Double.MAX_VALUE;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 78, 
          "faulty": "ret=Beta.regularizedBeta((n * x) / (m + n * x),0.5 * n,0.5 * m);", 
          "type": "InsertBefore", 
          "seed": "ret=Double.MAX_VALUE;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:50:15.340967631 -0500\n+++ /tmp/GenProg_Defects4J_Math_95/patches_yjg5/Patch_1034/patched/tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:59:09.306774438 -0500\n@@ -142,10 +142,14 @@\n      */\n     protected double getInitialDomain(double p) {\n         double ret;\n-        double d = getDenominatorDegreesOfFreedom();\n-            // use mean\n-            ret = d / (d - 2.0);\n-        return ret;\n+        if (p < 0.0 || p > 1.0) {\n+\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\"p must be between 0.0 and 1.0, inclusive.\");\n+\t\t}\n+            if (p == 0) {\n+\t\t\treturn 0d;\n+\t\t}\n+\t\t\treturn 0;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 147, 
          "faulty": "ret=d / (d - 2.0);", 
          "type": "InsertBefore", 
          "seed": "if (p == 0) {\n  return 0d;\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 147, 
          "faulty": "ret=d / (d - 2.0);", 
          "type": "Delete", 
          "seed": "return getUpperDomain(getSampleSize(),getNumberOfSuccesses());"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 145, 
          "faulty": "double d=getDenominatorDegreesOfFreedom();", 
          "type": "Replace", 
          "seed": "if (p < 0.0 || p > 1.0) {\n  throw new IllegalArgumentException(\"p must be between 0.0 and 1.0, inclusive.\");\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:50:15.340967631 -0500\n+++ /tmp/GenProg_Defects4J_Math_95/patches_yjg5/Patch_1432/patched/tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 11:01:44.407205482 -0500\n@@ -145,7 +145,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0;\n     }\n     \n     /**\n@@ -181,7 +181,8 @@\n             throw new IllegalArgumentException(\n                 \"degrees of freedom must be positive.\");\n         }\n-        this.denominatorDegreesOfFreedom = degreesOfFreedom;\n+        double n = getNumeratorDegreesOfFreedom();\n+\t\tthis.denominatorDegreesOfFreedom = degreesOfFreedom;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 184, 
          "faulty": "this.denominatorDegreesOfFreedom=degreesOfFreedom;", 
          "type": "InsertBefore", 
          "seed": "double n=getNumeratorDegreesOfFreedom();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:50:15.340967631 -0500\n+++ /tmp/GenProg_Defects4J_Math_95/patches_yjg5/Patch_648/patched/tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:56:27.242310731 -0500\n@@ -73,9 +73,11 @@\n             ret = 0.0;\n         } else {\n             double n = getNumeratorDegreesOfFreedom();\n-            double m = getDenominatorDegreesOfFreedom();\n+            double[] bracket = null;\n+\t\t\tdouble m = getDenominatorDegreesOfFreedom();\n             \n-            ret = Beta.regularizedBeta((n * x) / (m + n * x),\n+            ret = Double.MAX_VALUE;\n+\t\t\tret = Beta.regularizedBeta((n * x) / (m + n * x),\n                 0.5 * n,\n                 0.5 * m);\n         }\n@@ -145,7 +147,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 76, 
          "faulty": "double m=getDenominatorDegreesOfFreedom();", 
          "type": "InsertBefore", 
          "seed": "double[] bracket=null;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 78, 
          "faulty": "ret=Beta.regularizedBeta((n * x) / (m + n * x),0.5 * n,0.5 * m);", 
          "type": "InsertBefore", 
          "seed": "ret=Double.MAX_VALUE;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:50:15.340967631 -0500\n+++ /tmp/GenProg_Defects4J_Math_95/patches_yjg5/Patch_869/patched/tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:58:07.614601924 -0500\n@@ -75,7 +75,8 @@\n             double n = getNumeratorDegreesOfFreedom();\n             double m = getDenominatorDegreesOfFreedom();\n             \n-            ret = Beta.regularizedBeta((n * x) / (m + n * x),\n+            double d = getDenominatorDegreesOfFreedom();\n+\t\t\tret = Beta.regularizedBeta((n * x) / (m + n * x),\n                 0.5 * n,\n                 0.5 * m);\n         }\n@@ -145,7 +146,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 78, 
          "faulty": "ret=Beta.regularizedBeta((n * x) / (m + n * x),0.5 * n,0.5 * m);", 
          "type": "InsertBefore", 
          "seed": "double d=getDenominatorDegreesOfFreedom();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:50:15.340967631 -0500\n+++ /tmp/GenProg_Defects4J_Math_95/patches_yjg5/Patch_1283/patched/tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 11:00:50.219049097 -0500\n@@ -116,7 +116,8 @@\n      *         P(X &lt; <i>lower bound</i>) &lt; <code>p</code> \n      */\n     protected double getDomainLowerBound(double p) {\n-        return 0.0;\n+        double upperBound = getDomainUpperBound(p);\n+\t\treturn 0.0;\n     }\n \n     /**\n@@ -145,7 +146,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 119, 
          "faulty": "return 0.0;", 
          "type": "InsertBefore", 
          "seed": "double upperBound=getDomainUpperBound(p);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:50:15.340967631 -0500\n+++ /tmp/GenProg_Defects4J_Math_95/patches_yjg5/Patch_1490/patched/tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 11:02:04.895276626 -0500\n@@ -143,9 +143,8 @@\n     protected double getInitialDomain(double p) {\n         double ret;\n         double d = getDenominatorDegreesOfFreedom();\n-            // use mean\n-            ret = d / (d - 2.0);\n-        return ret;\n+            ret = Double.POSITIVE_INFINITY;\n+        return 0;\n     }\n     \n     /**\n@@ -181,7 +180,8 @@\n             throw new IllegalArgumentException(\n                 \"degrees of freedom must be positive.\");\n         }\n-        this.denominatorDegreesOfFreedom = degreesOfFreedom;\n+        double n = getNumeratorDegreesOfFreedom();\n+\t\tthis.denominatorDegreesOfFreedom = degreesOfFreedom;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 184, 
          "faulty": "this.denominatorDegreesOfFreedom=degreesOfFreedom;", 
          "type": "InsertBefore", 
          "seed": "double n=getNumeratorDegreesOfFreedom();"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 147, 
          "faulty": "ret=d / (d - 2.0);", 
          "type": "Replace", 
          "seed": "ret=Double.POSITIVE_INFINITY;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:50:15.340967631 -0500\n+++ /tmp/GenProg_Defects4J_Math_95/patches_yjg5/Patch_1427/patched/tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 11:01:42.811199879 -0500\n@@ -129,7 +129,8 @@\n      *         P(X &lt; <i>upper bound</i>) &gt; <code>p</code> \n      */\n     protected double getDomainUpperBound(double p) {\n-        return Double.MAX_VALUE;\n+        double n = getNumeratorDegreesOfFreedom();\n+\t\treturn Double.MAX_VALUE;\n     }\n \n     /**\n@@ -143,9 +144,12 @@\n     protected double getInitialDomain(double p) {\n         double ret;\n         double d = getDenominatorDegreesOfFreedom();\n-            // use mean\n+            if (p == 0) {\n+\t\t\treturn 0d;\n+\t\t}\n+\t\t\t// use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 147, 
          "faulty": "ret=d / (d - 2.0);", 
          "type": "InsertBefore", 
          "seed": "if (p == 0) {\n  return 0d;\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 132, 
          "faulty": "return Double.MAX_VALUE;", 
          "type": "InsertBefore", 
          "seed": "double n=getNumeratorDegreesOfFreedom();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:50:15.340967631 -0500\n+++ /tmp/GenProg_Defects4J_Math_95/patches_yjg5/Patch_282/patched/tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:54:00.104962424 -0500\n@@ -97,9 +97,9 @@\n      */\n     public double inverseCumulativeProbability(final double p) \n         throws MathException {\n-        if (p == 0) {\n-            return 0d;\n-        }\n+        if (p == 1) {\n+\t\t\treturn Double.POSITIVE_INFINITY;\n+\t\t}\n         if (p == 1) {\n             return Double.POSITIVE_INFINITY;\n         }\n@@ -145,7 +145,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0;\n     }\n     \n     /**\n@@ -156,6 +156,10 @@\n      */\n     public void setNumeratorDegreesOfFreedom(double degreesOfFreedom) {\n         if (degreesOfFreedom <= 0.0) {\n+\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\"degrees of freedom must be positive.\");\n+\t\t}\n+\t\tif (degreesOfFreedom <= 0.0) {\n             throw new IllegalArgumentException(\n                 \"degrees of freedom must be positive.\");\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 158, 
          "faulty": "if (degreesOfFreedom <= 0.0) {\n  throw new IllegalArgumentException(\"degrees of freedom must be positive.\");\n}", 
          "type": "InsertBefore", 
          "seed": "if (degreesOfFreedom <= 0.0) {\n  throw new IllegalArgumentException(\"degrees of freedom must be positive.\");\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 100, 
          "faulty": "if (p == 0) {\n  return 0d;\n}", 
          "type": "Replace", 
          "seed": "if (p == 1) {\n  return Double.POSITIVE_INFINITY;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:50:15.340967631 -0500\n+++ /tmp/GenProg_Defects4J_Math_95/patches_yjg5/Patch_1570/patched/tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 11:02:34.159375875 -0500\n@@ -129,7 +129,8 @@\n      *         P(X &lt; <i>upper bound</i>) &gt; <code>p</code> \n      */\n     protected double getDomainUpperBound(double p) {\n-        return Double.MAX_VALUE;\n+        double n = getNumeratorDegreesOfFreedom();\n+\t\treturn Double.MAX_VALUE;\n     }\n \n     /**\n@@ -145,7 +146,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0;\n     }\n     \n     /**\n@@ -181,7 +182,8 @@\n             throw new IllegalArgumentException(\n                 \"degrees of freedom must be positive.\");\n         }\n-        this.denominatorDegreesOfFreedom = degreesOfFreedom;\n+        double n = getNumeratorDegreesOfFreedom();\n+\t\tthis.denominatorDegreesOfFreedom = degreesOfFreedom;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 184, 
          "faulty": "this.denominatorDegreesOfFreedom=degreesOfFreedom;", 
          "type": "InsertBefore", 
          "seed": "double n=getNumeratorDegreesOfFreedom();"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 132, 
          "faulty": "return Double.MAX_VALUE;", 
          "type": "InsertBefore", 
          "seed": "double n=getNumeratorDegreesOfFreedom();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:50:15.340967631 -0500\n+++ /tmp/GenProg_Defects4J_Math_95/patches_yjg5/Patch_992/patched/tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:58:52.782728626 -0500\n@@ -75,7 +75,9 @@\n             double n = getNumeratorDegreesOfFreedom();\n             double m = getDenominatorDegreesOfFreedom();\n             \n-            ret = Beta.regularizedBeta((n * x) / (m + n * x),\n+            if (x < 0)\n+\t\t\t\treturn 0;\n+\t\t\tret = Beta.regularizedBeta((n * x) / (m + n * x),\n                 0.5 * n,\n                 0.5 * m);\n         }\n@@ -145,7 +147,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 78, 
          "faulty": "ret=Beta.regularizedBeta((n * x) / (m + n * x),0.5 * n,0.5 * m);", 
          "type": "InsertBefore", 
          "seed": "if (x < 0) return 0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:50:15.340967631 -0500\n+++ /tmp/GenProg_Defects4J_Math_95/patches_yjg5/Patch_1396/patched/tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 11:01:30.975158062 -0500\n@@ -97,9 +97,10 @@\n      */\n     public double inverseCumulativeProbability(final double p) \n         throws MathException {\n-        if (p == 0) {\n-            return 0d;\n-        }\n+        if (p < 0.0 || p > 1.0) {\n+\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\"p must be between 0.0 and 1.0, inclusive.\");\n+\t\t}\n         if (p == 1) {\n             return Double.POSITIVE_INFINITY;\n         }\n@@ -145,7 +146,11 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        ret = 0.5;\n+\t\t\tif (p == 1) {\n+\t\t\t\treturn Double.POSITIVE_INFINITY;\n+\t\t\t}\n+\t\treturn 0;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "InsertBefore", 
          "seed": "ret=0.5;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 100, 
          "faulty": "if (p == 0) {\n  return 0d;\n}", 
          "type": "Replace", 
          "seed": "double n=getNumeratorDegreesOfFreedom();"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "InsertBefore", 
          "seed": "if (p == 1) {\n  return Double.POSITIVE_INFINITY;\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 100, 
          "faulty": "if (p == 0) {\n  return 0d;\n}", 
          "type": "Replace", 
          "seed": "if (p < 0.0 || p > 1.0) {\n  throw new IllegalArgumentException(\"p must be between 0.0 and 1.0, inclusive.\");\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:50:15.340967631 -0500\n+++ /tmp/GenProg_Defects4J_Math_95/patches_yjg5/Patch_736/patched/tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:57:00.922410151 -0500\n@@ -142,10 +142,11 @@\n      */\n     protected double getInitialDomain(double p) {\n         double ret;\n-        double d = getDenominatorDegreesOfFreedom();\n+        ret = Double.MAX_VALUE;\n+\t\tdouble d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 145, 
          "faulty": "double d=getDenominatorDegreesOfFreedom();", 
          "type": "InsertBefore", 
          "seed": "ret=Double.MAX_VALUE;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:50:15.340967631 -0500\n+++ /tmp/GenProg_Defects4J_Math_95/patches_yjg5/Patch_1107/patched/tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:59:37.274851389 -0500\n@@ -75,7 +75,9 @@\n             double n = getNumeratorDegreesOfFreedom();\n             double m = getDenominatorDegreesOfFreedom();\n             \n-            ret = Beta.regularizedBeta((n * x) / (m + n * x),\n+            if (x < 0)\n+\t\t\t\treturn 0;\n+\t\t\tret = Beta.regularizedBeta((n * x) / (m + n * x),\n                 0.5 * n,\n                 0.5 * m);\n         }\n@@ -142,10 +144,7 @@\n      */\n     protected double getInitialDomain(double p) {\n         double ret;\n-        double d = getDenominatorDegreesOfFreedom();\n-            // use mean\n-            ret = d / (d - 2.0);\n-        return ret;\n+        return 0;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 78, 
          "faulty": "ret=Beta.regularizedBeta((n * x) / (m + n * x),0.5 * n,0.5 * m);", 
          "type": "InsertBefore", 
          "seed": "if (x < 0) return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 147, 
          "faulty": "ret=d / (d - 2.0);", 
          "type": "Delete", 
          "seed": "if (p < .5) {\n  ret=getAlpha() * getBeta() * .5;\n}\n else {\n  ret=getAlpha() * getBeta();\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 145, 
          "faulty": "double d=getDenominatorDegreesOfFreedom();", 
          "type": "Delete", 
          "seed": "int x1=getDomainUpperBound(p);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:50:15.340967631 -0500\n+++ /tmp/GenProg_Defects4J_Math_95/patches_yjg5/Patch_1294/patched/tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 11:00:54.235059873 -0500\n@@ -97,9 +97,7 @@\n      */\n     public double inverseCumulativeProbability(final double p) \n         throws MathException {\n-        if (p == 0) {\n-            return 0d;\n-        }\n+        double n = getNumeratorDegreesOfFreedom();\n         if (p == 1) {\n             return Double.POSITIVE_INFINITY;\n         }\n@@ -145,7 +143,11 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        ret = 0.5;\n+\t\t\tif (p == 1) {\n+\t\t\t\treturn Double.POSITIVE_INFINITY;\n+\t\t\t}\n+\t\treturn 0;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "InsertBefore", 
          "seed": "ret=0.5;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 100, 
          "faulty": "if (p == 0) {\n  return 0d;\n}", 
          "type": "Replace", 
          "seed": "double n=getNumeratorDegreesOfFreedom();"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "InsertBefore", 
          "seed": "if (p == 1) {\n  return Double.POSITIVE_INFINITY;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\t2018-12-02 10:50:11.864967711 -0500\n+++ /tmp/GenProg_Defects4J_Math_95/patches_yjg5/Patch_150/patched/tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\t2018-12-02 10:52:45.256964158 -0500\n@@ -58,7 +58,11 @@\n      */\n     public double inverseCumulativeProbability(final double p)\n         throws MathException {\n-        if (p < 0.0 || p > 1.0) {\n+        if (p <= 0) {\n+\t\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\t\"The Poisson mean must be positive\");\n+\t\t\t}\n+\t\tif (p < 0.0 || p > 1.0) {\n             throw new IllegalArgumentException(\"p must be between 0.0 and 1.0, inclusive.\");\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:50:15.340967631 -0500\n+++ /tmp/GenProg_Defects4J_Math_95/patches_yjg5/Patch_150/patched/tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:52:45.256964158 -0500\n@@ -145,7 +145,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java", 
          "line": 61, 
          "faulty": "if (p < 0.0 || p > 1.0) {\n  throw new IllegalArgumentException(\"p must be between 0.0 and 1.0, inclusive.\");\n}", 
          "type": "InsertBefore", 
          "seed": "if (p <= 0) {\n  throw new IllegalArgumentException(\"The Poisson mean must be positive\");\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:50:15.340967631 -0500\n+++ /tmp/GenProg_Defects4J_Math_95/patches_yjg5/Patch_768/patched/tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:57:18.026459936 -0500\n@@ -143,9 +143,10 @@\n     protected double getInitialDomain(double p) {\n         double ret;\n         double d = getDenominatorDegreesOfFreedom();\n-            // use mean\n+            ret = Double.MAX_VALUE;\n+\t\t\t// use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 147, 
          "faulty": "ret=d / (d - 2.0);", 
          "type": "InsertBefore", 
          "seed": "ret=Double.MAX_VALUE;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:50:15.340967631 -0500\n+++ /tmp/GenProg_Defects4J_Math_95/patches_yjg5/Patch_153/patched/tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:52:46.064964139 -0500\n@@ -129,7 +129,11 @@\n      *         P(X &lt; <i>upper bound</i>) &gt; <code>p</code> \n      */\n     protected double getDomainUpperBound(double p) {\n-        return Double.MAX_VALUE;\n+        if (p <= 0) {\n+\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\"The Poisson mean must be positive\");\n+\t\t}\n+\t\treturn Double.MAX_VALUE;\n     }\n \n     /**\n@@ -145,7 +149,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 132, 
          "faulty": "return Double.MAX_VALUE;", 
          "type": "InsertBefore", 
          "seed": "if (p <= 0) {\n  throw new IllegalArgumentException(\"The Poisson mean must be positive\");\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:50:15.340967631 -0500\n+++ /tmp/GenProg_Defects4J_Math_95/patches_yjg5/Patch_190/patched/tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:53:06.892963657 -0500\n@@ -116,7 +116,10 @@\n      *         P(X &lt; <i>lower bound</i>) &lt; <code>p</code> \n      */\n     protected double getDomainLowerBound(double p) {\n-        return 0.0;\n+        if (p == 0) {\n+\t\t\treturn 0d;\n+\t\t}\n+\t\treturn 0.0;\n     }\n \n     /**\n@@ -145,7 +148,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 119, 
          "faulty": "return 0.0;", 
          "type": "InsertBefore", 
          "seed": "if (p == 0) {\n  return 0d;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:50:15.340967631 -0500\n+++ /tmp/GenProg_Defects4J_Math_95/patches_yjg5/Patch_1351/patched/tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 11:01:14.339113664 -0500\n@@ -129,7 +129,8 @@\n      *         P(X &lt; <i>upper bound</i>) &gt; <code>p</code> \n      */\n     protected double getDomainUpperBound(double p) {\n-        return Double.MAX_VALUE;\n+        double n = getNumeratorDegreesOfFreedom();\n+\t\treturn Double.MAX_VALUE;\n     }\n \n     /**\n@@ -143,9 +144,7 @@\n     protected double getInitialDomain(double p) {\n         double ret;\n         double d = getDenominatorDegreesOfFreedom();\n-            // use mean\n-            ret = d / (d - 2.0);\n-        return ret;\n+            return 0;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 147, 
          "faulty": "ret=d / (d - 2.0);", 
          "type": "Delete", 
          "seed": "return getUpperDomain(getSampleSize(),getNumberOfSuccesses());"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 132, 
          "faulty": "return Double.MAX_VALUE;", 
          "type": "InsertBefore", 
          "seed": "double n=getNumeratorDegreesOfFreedom();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:50:15.340967631 -0500\n+++ /tmp/GenProg_Defects4J_Math_95/patches_yjg5/Patch_613/patched/tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:56:13.842270621 -0500\n@@ -97,7 +97,11 @@\n      */\n     public double inverseCumulativeProbability(final double p) \n         throws MathException {\n-        if (p == 0) {\n+        if (p < 0.0 || p > 1.0) {\n+\t\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\t\"p must be between 0 and 1.0 (inclusive)\");\n+\t\t\t}\n+\t\tif (p == 0) {\n             return 0d;\n         }\n         if (p == 1) {\n@@ -145,7 +149,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 100, 
          "faulty": "if (p == 0) {\n  return 0d;\n}", 
          "type": "InsertBefore", 
          "seed": "if (p < 0.0 || p > 1.0) {\n  throw new IllegalArgumentException(\"p must be between 0 and 1.0 (inclusive)\");\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:50:15.340967631 -0500\n+++ /tmp/GenProg_Defects4J_Math_95/patches_yjg5/Patch_1166/patched/tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 11:00:00.234914055 -0500\n@@ -142,10 +142,14 @@\n      */\n     protected double getInitialDomain(double p) {\n         double ret;\n-        double d = getDenominatorDegreesOfFreedom();\n-            // use mean\n-            ret = d / (d - 2.0);\n-        return ret;\n+        if (p < 0.0 || p > 1.0) {\n+\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\"p must be between 0.0 and 1.0, inclusive.\");\n+\t\t}\n+            if (p == 0) {\n+\t\t\treturn 0d;\n+\t\t}\n+\t\t\treturn 0;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 147, 
          "faulty": "ret=d / (d - 2.0);", 
          "type": "InsertBefore", 
          "seed": "if (p == 0) {\n  return 0d;\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 147, 
          "faulty": "ret=d / (d - 2.0);", 
          "type": "Delete", 
          "seed": "return getUpperDomain(getSampleSize(),getNumberOfSuccesses());"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 145, 
          "faulty": "double d=getDenominatorDegreesOfFreedom();", 
          "type": "Replace", 
          "seed": "if (p < 0.0 || p > 1.0) {\n  throw new IllegalArgumentException(\"p must be between 0.0 and 1.0, inclusive.\");\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 132, 
          "faulty": "return Double.MAX_VALUE;", 
          "type": "Replace", 
          "seed": "return Double.MAX_VALUE;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:50:15.340967631 -0500\n+++ /tmp/GenProg_Defects4J_Math_95/patches_yjg5/Patch_496/patched/tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:55:29.921870303 -0500\n@@ -97,9 +97,6 @@\n      */\n     public double inverseCumulativeProbability(final double p) \n         throws MathException {\n-        if (p == 0) {\n-            return 0d;\n-        }\n         if (p == 1) {\n             return Double.POSITIVE_INFINITY;\n         }\n@@ -145,7 +142,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0;\n     }\n     \n     /**\n@@ -156,6 +153,10 @@\n      */\n     public void setNumeratorDegreesOfFreedom(double degreesOfFreedom) {\n         if (degreesOfFreedom <= 0.0) {\n+\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\"degrees of freedom must be positive.\");\n+\t\t}\n+\t\tif (degreesOfFreedom <= 0.0) {\n             throw new IllegalArgumentException(\n                 \"degrees of freedom must be positive.\");\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 158, 
          "faulty": "if (degreesOfFreedom <= 0.0) {\n  throw new IllegalArgumentException(\"degrees of freedom must be positive.\");\n}", 
          "type": "InsertBefore", 
          "seed": "if (degreesOfFreedom <= 0.0) {\n  throw new IllegalArgumentException(\"degrees of freedom must be positive.\");\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 100, 
          "faulty": "if (p == 0) {\n  return 0d;\n}", 
          "type": "Delete", 
          "seed": "return 0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:50:15.340967631 -0500\n+++ /tmp/GenProg_Defects4J_Math_95/patches_yjg5/Patch_342/patched/tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:54:23.380976332 -0500\n@@ -97,9 +97,9 @@\n      */\n     public double inverseCumulativeProbability(final double p) \n         throws MathException {\n-        if (p == 0) {\n-            return 0d;\n-        }\n+        if (p == 1) {\n+\t\t\treturn Double.POSITIVE_INFINITY;\n+\t\t}\n         if (p == 1) {\n             return Double.POSITIVE_INFINITY;\n         }\n@@ -145,7 +145,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0;\n     }\n     \n     /**\n@@ -156,10 +156,18 @@\n      */\n     public void setNumeratorDegreesOfFreedom(double degreesOfFreedom) {\n         if (degreesOfFreedom <= 0.0) {\n+\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\"degrees of freedom must be positive.\");\n+\t\t}\n+\t\tif (degreesOfFreedom <= 0.0) {\n             throw new IllegalArgumentException(\n                 \"degrees of freedom must be positive.\");\n         }\n-        this.numeratorDegreesOfFreedom = degreesOfFreedom;\n+        if (degreesOfFreedom <= 0.0) {\n+\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\"degrees of freedom must be positive.\");\n+\t\t}\n+\t\tthis.numeratorDegreesOfFreedom = degreesOfFreedom;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 158, 
          "faulty": "if (degreesOfFreedom <= 0.0) {\n  throw new IllegalArgumentException(\"degrees of freedom must be positive.\");\n}", 
          "type": "InsertBefore", 
          "seed": "if (degreesOfFreedom <= 0.0) {\n  throw new IllegalArgumentException(\"degrees of freedom must be positive.\");\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 100, 
          "faulty": "if (p == 0) {\n  return 0d;\n}", 
          "type": "Replace", 
          "seed": "if (p == 1) {\n  return Double.POSITIVE_INFINITY;\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 162, 
          "faulty": "this.numeratorDegreesOfFreedom=degreesOfFreedom;", 
          "type": "InsertBefore", 
          "seed": "if (degreesOfFreedom <= 0.0) {\n  throw new IllegalArgumentException(\"degrees of freedom must be positive.\");\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:50:15.340967631 -0500\n+++ /tmp/GenProg_Defects4J_Math_95/patches_yjg5/Patch_1202/patched/tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 11:00:19.862967297 -0500\n@@ -116,7 +116,11 @@\n      *         P(X &lt; <i>lower bound</i>) &lt; <code>p</code> \n      */\n     protected double getDomainLowerBound(double p) {\n-        return 0.0;\n+        if (p < 0.0 || p > 1.0) {\n+\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\"probability of success must be between 0.0 and 1.0, inclusive.\");\n+\t\t}\n+\t\treturn 0.0;\n     }\n \n     /**\n@@ -143,9 +147,7 @@\n     protected double getInitialDomain(double p) {\n         double ret;\n         double d = getDenominatorDegreesOfFreedom();\n-            // use mean\n-            ret = d / (d - 2.0);\n-        return ret;\n+            return 0;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 147, 
          "faulty": "ret=d / (d - 2.0);", 
          "type": "Delete", 
          "seed": "if (p < .5) {\n  ret=getAlpha() * getBeta() * .5;\n}\n else {\n  ret=getAlpha() * getBeta();\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 119, 
          "faulty": "return 0.0;", 
          "type": "InsertBefore", 
          "seed": "if (p < 0.0 || p > 1.0) {\n  throw new IllegalArgumentException(\"probability of success must be between 0.0 and 1.0, inclusive.\");\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:50:15.340967631 -0500\n+++ /tmp/GenProg_Defects4J_Math_95/patches_yjg5/Patch_1476/patched/tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 11:02:00.487261440 -0500\n@@ -142,10 +142,10 @@\n      */\n     protected double getInitialDomain(double p) {\n         double ret;\n-        double d = getDenominatorDegreesOfFreedom();\n-            // use mean\n-            ret = d / (d - 2.0);\n-        return ret;\n+        if (p == 0) {\n+\t\t\treturn 0d;\n+\t\t}\n+\t\t\treturn 0;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 147, 
          "faulty": "ret=d / (d - 2.0);", 
          "type": "InsertBefore", 
          "seed": "if (p == 0) {\n  return 0d;\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 147, 
          "faulty": "ret=d / (d - 2.0);", 
          "type": "Delete", 
          "seed": "return getUpperDomain(getSampleSize(),getNumberOfSuccesses());"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 145, 
          "faulty": "double d=getDenominatorDegreesOfFreedom();", 
          "type": "Delete", 
          "seed": "ret=getDegreesOfFreedom();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:50:15.340967631 -0500\n+++ /tmp/GenProg_Defects4J_Math_95/patches_yjg5/Patch_7/patched/tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:51:28.196965943 -0500\n@@ -145,7 +145,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:50:15.340967631 -0500\n+++ /tmp/GenProg_Defects4J_Math_95/patches_yjg5/Patch_461/patched/tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:55:16.141725101 -0500\n@@ -145,7 +145,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0;\n     }\n     \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java\t2018-12-02 10:50:11.860967711 -0500\n+++ /tmp/GenProg_Defects4J_Math_95/patches_yjg5/Patch_461/patched/tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java\t2018-12-02 10:55:16.145725127 -0500\n@@ -125,7 +125,14 @@\n     public static double[] bracket(UnivariateRealFunction function, \n             double initial, double lowerBound, double upperBound) \n     throws ConvergenceException, FunctionEvaluationException {\n-        return bracket( function, initial, lowerBound, upperBound,\n+        if (initial < lowerBound || initial > upperBound\n+\t\t\t\t|| lowerBound >= upperBound) {\n+\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\"Invalid endpoint parameters:  lowerBound=\" + lowerBound\n+\t\t\t\t\t\t\t+ \" initial=\" + initial + \" upperBound=\"\n+\t\t\t\t\t\t\t+ upperBound);\n+\t\t}\n+\t\treturn bracket( function, initial, lowerBound, upperBound,\n             Integer.MAX_VALUE ) ;\n     }\n \n@@ -176,9 +183,6 @@\n             (\"bad value for maximumIterations: \" + maximumIterations);\n         }\n         if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n-            throw new IllegalArgumentException\n-            (\"Invalid endpoint parameters:  lowerBound=\" + lowerBound + \n-              \" initial=\" + initial + \" upperBound=\" + upperBound);\n         }\n         double a = initial;\n         double b = initial;\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java", 
          "line": 128, 
          "faulty": "return bracket(function,initial,lowerBound,upperBound,Integer.MAX_VALUE);", 
          "type": "InsertBefore", 
          "seed": "if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n  throw new IllegalArgumentException(\"Invalid endpoint parameters:  lowerBound=\" + lowerBound + \" initial=\"+ initial+ \" upperBound=\"+ upperBound);\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java", 
          "line": 179, 
          "faulty": "throw new IllegalArgumentException(\"Invalid endpoint parameters:  lowerBound=\" + lowerBound + \" initial=\"+ initial+ \" upperBound=\"+ upperBound);", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:50:15.340967631 -0500\n+++ /tmp/GenProg_Defects4J_Math_95/patches_yjg5/Patch_1206/patched/tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 11:00:21.062970544 -0500\n@@ -145,7 +145,8 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        ret = 0.0;\n+\t\treturn 0;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "InsertBefore", 
          "seed": "ret=0.0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:50:15.340967631 -0500\n+++ /tmp/GenProg_Defects4J_Math_95/patches_yjg5/Patch_1228/patched/tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 11:00:29.410993094 -0500\n@@ -97,9 +97,7 @@\n      */\n     public double inverseCumulativeProbability(final double p) \n         throws MathException {\n-        if (p == 0) {\n-            return 0d;\n-        }\n+        double n = getNumeratorDegreesOfFreedom();\n         if (p == 1) {\n             return Double.POSITIVE_INFINITY;\n         }\n@@ -145,7 +143,8 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        ret = 0.5;\n+\t\treturn 0;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "InsertBefore", 
          "seed": "ret=0.5;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 100, 
          "faulty": "if (p == 0) {\n  return 0d;\n}", 
          "type": "Replace", 
          "seed": "double n=getNumeratorDegreesOfFreedom();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:50:15.340967631 -0500\n+++ /tmp/GenProg_Defects4J_Math_95/patches_yjg5/Patch_912/patched/tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:58:24.010648183 -0500\n@@ -75,7 +75,8 @@\n             double n = getNumeratorDegreesOfFreedom();\n             double m = getDenominatorDegreesOfFreedom();\n             \n-            ret = Beta.regularizedBeta((n * x) / (m + n * x),\n+            ret = Double.MAX_VALUE;\n+\t\t\tret = Beta.regularizedBeta((n * x) / (m + n * x),\n                 0.5 * n,\n                 0.5 * m);\n         }\n@@ -103,7 +104,10 @@\n         if (p == 1) {\n             return Double.POSITIVE_INFINITY;\n         }\n-        return super.inverseCumulativeProbability(p);\n+        if (p == 1) {\n+\t\t\treturn Double.POSITIVE_INFINITY;\n+\t\t}\n+\t\treturn super.inverseCumulativeProbability(p);\n     }\n         \n     /**\n@@ -145,7 +149,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 78, 
          "faulty": "ret=Beta.regularizedBeta((n * x) / (m + n * x),0.5 * n,0.5 * m);", 
          "type": "InsertBefore", 
          "seed": "ret=Double.MAX_VALUE;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 106, 
          "faulty": "return super.inverseCumulativeProbability(p);", 
          "type": "InsertBefore", 
          "seed": "if (p == 1) {\n  return Double.POSITIVE_INFINITY;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:50:15.340967631 -0500\n+++ /tmp/GenProg_Defects4J_Math_95/patches_yjg5/Patch_838/patched/tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:57:56.058569126 -0500\n@@ -145,7 +145,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 119, 
          "faulty": "return 0.0;", 
          "type": "Replace", 
          "seed": "return 0.0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:50:15.340967631 -0500\n+++ /tmp/GenProg_Defects4J_Math_95/patches_yjg5/Patch_1506/patched/tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 11:02:10.799296868 -0500\n@@ -100,7 +100,10 @@\n         if (p == 0) {\n             return 0d;\n         }\n-        if (p == 1) {\n+        if (p == 0) {\n+\t\t\treturn Double.NEGATIVE_INFINITY;\n+\t\t}\n+\t\tif (p == 1) {\n             return Double.POSITIVE_INFINITY;\n         }\n         return super.inverseCumulativeProbability(p);\n@@ -143,9 +146,10 @@\n     protected double getInitialDomain(double p) {\n         double ret;\n         double d = getDenominatorDegreesOfFreedom();\n-            // use mean\n-            ret = d / (d - 2.0);\n-        return ret;\n+            if (p == 0) {\n+\t\t\treturn 0d;\n+\t\t}\n+\t\t\treturn 0;\n     }\n     \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java\t2018-12-02 10:50:11.860967711 -0500\n+++ /tmp/GenProg_Defects4J_Math_95/patches_yjg5/Patch_1506/patched/tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java\t2018-12-02 11:02:10.803296881 -0500\n@@ -176,7 +176,8 @@\n             (\"bad value for maximumIterations: \" + maximumIterations);\n         }\n         if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n-            throw new IllegalArgumentException\n+            double g = 0;\n+\t\t\tthrow new IllegalArgumentException\n             (\"Invalid endpoint parameters:  lowerBound=\" + lowerBound + \n               \" initial=\" + initial + \" upperBound=\" + upperBound);\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 147, 
          "faulty": "ret=d / (d - 2.0);", 
          "type": "InsertBefore", 
          "seed": "if (p == 0) {\n  return 0d;\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 103, 
          "faulty": "if (p == 1) {\n  return Double.POSITIVE_INFINITY;\n}", 
          "type": "InsertBefore", 
          "seed": "if (p == 0) {\n  return Double.NEGATIVE_INFINITY;\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 147, 
          "faulty": "ret=d / (d - 2.0);", 
          "type": "Delete", 
          "seed": "if (p == 1) {\n  return 1;\n}\n else {\n  return super.inverseCumulativeProbability(p);\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java", 
          "line": 179, 
          "faulty": "throw new IllegalArgumentException(\"Invalid endpoint parameters:  lowerBound=\" + lowerBound + \" initial=\"+ initial+ \" upperBound=\"+ upperBound);", 
          "type": "InsertBefore", 
          "seed": "double g=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:50:15.340967631 -0500\n+++ /tmp/GenProg_Defects4J_Math_95/patches_yjg5/Patch_548/patched/tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:55:50.282136018 -0500\n@@ -73,7 +73,8 @@\n             ret = 0.0;\n         } else {\n             double n = getNumeratorDegreesOfFreedom();\n-            double m = getDenominatorDegreesOfFreedom();\n+            double[] bracket = null;\n+\t\t\tdouble m = getDenominatorDegreesOfFreedom();\n             \n             ret = Beta.regularizedBeta((n * x) / (m + n * x),\n                 0.5 * n,\n@@ -145,7 +146,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0;\n     }\n     \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java\t2018-12-02 10:50:11.860967711 -0500\n+++ /tmp/GenProg_Defects4J_Math_95/patches_yjg5/Patch_548/patched/tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java\t2018-12-02 10:55:50.282136018 -0500\n@@ -125,7 +125,14 @@\n     public static double[] bracket(UnivariateRealFunction function, \n             double initial, double lowerBound, double upperBound) \n     throws ConvergenceException, FunctionEvaluationException {\n-        return bracket( function, initial, lowerBound, upperBound,\n+        if (initial < lowerBound || initial > upperBound\n+\t\t\t\t|| lowerBound >= upperBound) {\n+\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\"Invalid endpoint parameters:  lowerBound=\" + lowerBound\n+\t\t\t\t\t\t\t+ \" initial=\" + initial + \" upperBound=\"\n+\t\t\t\t\t\t\t+ upperBound);\n+\t\t}\n+\t\treturn bracket( function, initial, lowerBound, upperBound,\n             Integer.MAX_VALUE ) ;\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java", 
          "line": 128, 
          "faulty": "return bracket(function,initial,lowerBound,upperBound,Integer.MAX_VALUE);", 
          "type": "InsertBefore", 
          "seed": "if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n  throw new IllegalArgumentException(\"Invalid endpoint parameters:  lowerBound=\" + lowerBound + \" initial=\"+ initial+ \" upperBound=\"+ upperBound);\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 76, 
          "faulty": "double m=getDenominatorDegreesOfFreedom();", 
          "type": "InsertBefore", 
          "seed": "double[] bracket=null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:50:15.340967631 -0500\n+++ /tmp/GenProg_Defects4J_Math_95/patches_yjg5/Patch_958/patched/tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:58:40.178693497 -0500\n@@ -143,9 +143,13 @@\n     protected double getInitialDomain(double p) {\n         double ret;\n         double d = getDenominatorDegreesOfFreedom();\n-            // use mean\n+            ret = Double.MAX_VALUE;\n+\t\tif (p == 0) {\n+\t\t\treturn 0d;\n+\t\t}\n+\t\t\t// use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 147, 
          "faulty": "ret=d / (d - 2.0);", 
          "type": "InsertBefore", 
          "seed": "ret=Double.MAX_VALUE;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 147, 
          "faulty": "ret=d / (d - 2.0);", 
          "type": "InsertBefore", 
          "seed": "if (p == 0) {\n  return 0d;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:50:15.340967631 -0500\n+++ /tmp/GenProg_Defects4J_Math_95/patches_yjg5/Patch_1263/patched/tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 11:00:42.543028472 -0500\n@@ -129,7 +129,8 @@\n      *         P(X &lt; <i>upper bound</i>) &gt; <code>p</code> \n      */\n     protected double getDomainUpperBound(double p) {\n-        return Double.MAX_VALUE;\n+        double n = getNumeratorDegreesOfFreedom();\n+\t\treturn Double.MAX_VALUE;\n     }\n \n     /**\n@@ -143,9 +144,10 @@\n     protected double getInitialDomain(double p) {\n         double ret;\n         double d = getDenominatorDegreesOfFreedom();\n-            // use mean\n-            ret = d / (d - 2.0);\n-        return ret;\n+            if (p == 0) {\n+\t\t\treturn 0d;\n+\t\t}\n+\t\t\treturn 0;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 147, 
          "faulty": "ret=d / (d - 2.0);", 
          "type": "InsertBefore", 
          "seed": "if (p == 0) {\n  return 0d;\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 147, 
          "faulty": "ret=d / (d - 2.0);", 
          "type": "Delete", 
          "seed": "return getUpperDomain(getSampleSize(),getNumberOfSuccesses());"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 132, 
          "faulty": "return Double.MAX_VALUE;", 
          "type": "InsertBefore", 
          "seed": "double n=getNumeratorDegreesOfFreedom();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\t2018-12-02 10:50:11.864967711 -0500\n+++ /tmp/GenProg_Defects4J_Math_95/patches_yjg5/Patch_1042/patched/tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\t2018-12-02 10:59:12.058782041 -0500\n@@ -79,7 +79,11 @@\n         // Try to bracket root, test domain endoints if this fails     \n         double lowerBound = getDomainLowerBound(p);\n         double upperBound = getDomainUpperBound(p);\n-        double[] bracket = null;\n+        if (p < 0.0 || p > 1.0) {\n+\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\"probability of success must be between 0.0 and 1.0, inclusive.\");\n+\t\t}\n+\t\tdouble[] bracket = null;\n         try {\n             bracket = UnivariateRealSolverUtils.bracket(\n                     rootFindingFunction, getInitialDomain(p),\n\n\n--- /tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:50:15.340967631 -0500\n+++ /tmp/GenProg_Defects4J_Math_95/patches_yjg5/Patch_1042/patched/tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:59:12.062782053 -0500\n@@ -145,7 +145,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0;\n     }\n     \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java\t2018-12-02 10:50:11.860967711 -0500\n+++ /tmp/GenProg_Defects4J_Math_95/patches_yjg5/Patch_1042/patched/tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java\t2018-12-02 10:59:12.062782053 -0500\n@@ -175,7 +175,8 @@\n             throw new IllegalArgumentException\n             (\"bad value for maximumIterations: \" + maximumIterations);\n         }\n-        if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n+        int i, j, n, nearest = 0;\n+\t\tif (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n             throw new IllegalArgumentException\n             (\"Invalid endpoint parameters:  lowerBound=\" + lowerBound + \n               \" initial=\" + initial + \" upperBound=\" + upperBound);\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java", 
          "line": 178, 
          "faulty": "if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n  throw new IllegalArgumentException(\"Invalid endpoint parameters:  lowerBound=\" + lowerBound + \" initial=\"+ initial+ \" upperBound=\"+ upperBound);\n}", 
          "type": "InsertBefore", 
          "seed": "int i, j, n, nearest=0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java", 
          "line": 82, 
          "faulty": "double[] bracket=null;", 
          "type": "InsertBefore", 
          "seed": "if (p < 0.0 || p > 1.0) {\n  throw new IllegalArgumentException(\"probability of success must be between 0.0 and 1.0, inclusive.\");\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\t2018-12-02 10:50:11.864967711 -0500\n+++ /tmp/GenProg_Defects4J_Math_95/patches_yjg5/Patch_1518/patched/tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\t2018-12-02 11:02:14.803310530 -0500\n@@ -81,7 +81,10 @@\n         double upperBound = getDomainUpperBound(p);\n         double[] bracket = null;\n         try {\n-            bracket = UnivariateRealSolverUtils.bracket(\n+            if (p == 1) {\n+\t\t\t\treturn Integer.MAX_VALUE;\n+\t\t\t}\n+\t\t\tbracket = UnivariateRealSolverUtils.bracket(\n                     rootFindingFunction, getInitialDomain(p),\n                     lowerBound, upperBound);\n         }  catch (ConvergenceException ex) {\n\n\n--- /tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:50:15.340967631 -0500\n+++ /tmp/GenProg_Defects4J_Math_95/patches_yjg5/Patch_1518/patched/tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 11:02:14.807310544 -0500\n@@ -145,7 +145,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0;\n     }\n     \n     /**\n@@ -181,7 +181,8 @@\n             throw new IllegalArgumentException(\n                 \"degrees of freedom must be positive.\");\n         }\n-        this.denominatorDegreesOfFreedom = degreesOfFreedom;\n+        double n = getNumeratorDegreesOfFreedom();\n+\t\tthis.denominatorDegreesOfFreedom = degreesOfFreedom;\n     }\n     \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java\t2018-12-02 10:50:11.860967711 -0500\n+++ /tmp/GenProg_Defects4J_Math_95/patches_yjg5/Patch_1518/patched/tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java\t2018-12-02 11:02:14.807310544 -0500\n@@ -176,7 +176,8 @@\n             (\"bad value for maximumIterations: \" + maximumIterations);\n         }\n         if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n-            throw new IllegalArgumentException\n+            double b = initial;\n+\t\t\tthrow new IllegalArgumentException\n             (\"Invalid endpoint parameters:  lowerBound=\" + lowerBound + \n               \" initial=\" + initial + \" upperBound=\" + upperBound);\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 184, 
          "faulty": "this.denominatorDegreesOfFreedom=degreesOfFreedom;", 
          "type": "InsertBefore", 
          "seed": "double n=getNumeratorDegreesOfFreedom();"
        }, 
        {
          "path": "src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java", 
          "line": 179, 
          "faulty": "throw new IllegalArgumentException(\"Invalid endpoint parameters:  lowerBound=\" + lowerBound + \" initial=\"+ initial+ \" upperBound=\"+ upperBound);", 
          "type": "InsertBefore", 
          "seed": "double b=initial;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java", 
          "line": 84, 
          "faulty": "bracket=UnivariateRealSolverUtils.bracket(rootFindingFunction,getInitialDomain(p),lowerBound,upperBound);", 
          "type": "InsertBefore", 
          "seed": "if (p == 1) {\n  return Integer.MAX_VALUE;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:50:15.340967631 -0500\n+++ /tmp/GenProg_Defects4J_Math_95/patches_yjg5/Patch_352/patched/tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:54:26.545056681 -0500\n@@ -73,7 +73,8 @@\n             ret = 0.0;\n         } else {\n             double n = getNumeratorDegreesOfFreedom();\n-            double m = getDenominatorDegreesOfFreedom();\n+            double[] bracket = null;\n+\t\t\tdouble m = getDenominatorDegreesOfFreedom();\n             \n             ret = Beta.regularizedBeta((n * x) / (m + n * x),\n                 0.5 * n,\n@@ -145,7 +146,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0;\n     }\n     \n     /**\n@@ -156,6 +157,10 @@\n      */\n     public void setNumeratorDegreesOfFreedom(double degreesOfFreedom) {\n         if (degreesOfFreedom <= 0.0) {\n+\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\"degrees of freedom must be positive.\");\n+\t\t}\n+\t\tif (degreesOfFreedom <= 0.0) {\n             throw new IllegalArgumentException(\n                 \"degrees of freedom must be positive.\");\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 158, 
          "faulty": "if (degreesOfFreedom <= 0.0) {\n  throw new IllegalArgumentException(\"degrees of freedom must be positive.\");\n}", 
          "type": "InsertBefore", 
          "seed": "if (degreesOfFreedom <= 0.0) {\n  throw new IllegalArgumentException(\"degrees of freedom must be positive.\");\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 76, 
          "faulty": "double m=getDenominatorDegreesOfFreedom();", 
          "type": "InsertBefore", 
          "seed": "double[] bracket=null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:50:15.340967631 -0500\n+++ /tmp/GenProg_Defects4J_Math_95/patches_yjg5/Patch_1329/patched/tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 11:01:07.639095765 -0500\n@@ -129,7 +129,8 @@\n      *         P(X &lt; <i>upper bound</i>) &gt; <code>p</code> \n      */\n     protected double getDomainUpperBound(double p) {\n-        return Double.MAX_VALUE;\n+        double n = getNumeratorDegreesOfFreedom();\n+\t\treturn Double.MAX_VALUE;\n     }\n \n     /**\n@@ -143,9 +144,11 @@\n     protected double getInitialDomain(double p) {\n         double ret;\n         double d = getDenominatorDegreesOfFreedom();\n-            // use mean\n-            ret = d / (d - 2.0);\n-        return ret;\n+            if (p == 0) {\n+\t\t\treturn 0d;\n+\t\t}\n+\t\t\tret = Double.POSITIVE_INFINITY;\n+        return 0;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 147, 
          "faulty": "ret=d / (d - 2.0);", 
          "type": "InsertBefore", 
          "seed": "if (p == 0) {\n  return 0d;\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 147, 
          "faulty": "ret=d / (d - 2.0);", 
          "type": "Delete", 
          "seed": "return getUpperDomain(getSampleSize(),getNumberOfSuccesses());"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 132, 
          "faulty": "return Double.MAX_VALUE;", 
          "type": "InsertBefore", 
          "seed": "double n=getNumeratorDegreesOfFreedom();"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 147, 
          "faulty": "ret=d / (d - 2.0);", 
          "type": "Replace", 
          "seed": "ret=Double.POSITIVE_INFINITY;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:50:15.340967631 -0500\n+++ /tmp/GenProg_Defects4J_Math_95/patches_yjg5/Patch_1551/patched/tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 11:02:27.043351985 -0500\n@@ -129,7 +129,8 @@\n      *         P(X &lt; <i>upper bound</i>) &gt; <code>p</code> \n      */\n     protected double getDomainUpperBound(double p) {\n-        return Double.MAX_VALUE;\n+        double n = getNumeratorDegreesOfFreedom();\n+\t\treturn Double.MAX_VALUE;\n     }\n \n     /**\n@@ -145,7 +146,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0;\n     }\n     \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java\t2018-12-02 10:50:11.860967711 -0500\n+++ /tmp/GenProg_Defects4J_Math_95/patches_yjg5/Patch_1551/patched/tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java\t2018-12-02 11:02:27.043351985 -0500\n@@ -176,7 +176,8 @@\n             (\"bad value for maximumIterations: \" + maximumIterations);\n         }\n         if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n-            throw new IllegalArgumentException\n+            int i = 0;\n+\t\t\tthrow new IllegalArgumentException\n             (\"Invalid endpoint parameters:  lowerBound=\" + lowerBound + \n               \" initial=\" + initial + \" upperBound=\" + upperBound);\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 132, 
          "faulty": "return Double.MAX_VALUE;", 
          "type": "InsertBefore", 
          "seed": "double n=getNumeratorDegreesOfFreedom();"
        }, 
        {
          "path": "src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java", 
          "line": 179, 
          "faulty": "throw new IllegalArgumentException(\"Invalid endpoint parameters:  lowerBound=\" + lowerBound + \" initial=\"+ initial+ \" upperBound=\"+ upperBound);", 
          "type": "InsertBefore", 
          "seed": "int i=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:50:15.340967631 -0500\n+++ /tmp/GenProg_Defects4J_Math_95/patches_yjg5/Patch_1485/patched/tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 11:02:03.699272512 -0500\n@@ -143,9 +143,12 @@\n     protected double getInitialDomain(double p) {\n         double ret;\n         double d = getDenominatorDegreesOfFreedom();\n-            // use mean\n+            if (p == 0) {\n+\t\t\treturn 0d;\n+\t\t}\n+\t\t\t// use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0;\n     }\n     \n     /**\n@@ -181,7 +184,8 @@\n             throw new IllegalArgumentException(\n                 \"degrees of freedom must be positive.\");\n         }\n-        this.denominatorDegreesOfFreedom = degreesOfFreedom;\n+        double n = getNumeratorDegreesOfFreedom();\n+\t\tthis.denominatorDegreesOfFreedom = degreesOfFreedom;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 147, 
          "faulty": "ret=d / (d - 2.0);", 
          "type": "InsertBefore", 
          "seed": "if (p == 0) {\n  return 0d;\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 184, 
          "faulty": "this.denominatorDegreesOfFreedom=degreesOfFreedom;", 
          "type": "InsertBefore", 
          "seed": "double n=getNumeratorDegreesOfFreedom();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:50:15.340967631 -0500\n+++ /tmp/GenProg_Defects4J_Math_95/patches_yjg5/Patch_1360/patched/tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 11:01:17.107121053 -0500\n@@ -129,7 +129,8 @@\n      *         P(X &lt; <i>upper bound</i>) &gt; <code>p</code> \n      */\n     protected double getDomainUpperBound(double p) {\n-        return Double.MAX_VALUE;\n+        double n = getNumeratorDegreesOfFreedom();\n+\t\treturn Double.MAX_VALUE;\n     }\n \n     /**\n@@ -145,7 +146,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 132, 
          "faulty": "return Double.MAX_VALUE;", 
          "type": "InsertBefore", 
          "seed": "double n=getNumeratorDegreesOfFreedom();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:50:15.340967631 -0500\n+++ /tmp/GenProg_Defects4J_Math_95/patches_yjg5/Patch_747/patched/tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:57:04.910421799 -0500\n@@ -75,7 +75,8 @@\n             double n = getNumeratorDegreesOfFreedom();\n             double m = getDenominatorDegreesOfFreedom();\n             \n-            ret = Beta.regularizedBeta((n * x) / (m + n * x),\n+            ret = Double.MAX_VALUE;\n+\t\t\tret = Beta.regularizedBeta((n * x) / (m + n * x),\n                 0.5 * n,\n                 0.5 * m);\n         }\n@@ -145,7 +146,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 78, 
          "faulty": "ret=Beta.regularizedBeta((n * x) / (m + n * x),0.5 * n,0.5 * m);", 
          "type": "InsertBefore", 
          "seed": "ret=Double.MAX_VALUE;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:50:15.340967631 -0500\n+++ /tmp/GenProg_Defects4J_Math_95/patches_yjg5/Patch_981/patched/tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:58:48.890717797 -0500\n@@ -143,9 +143,10 @@\n     protected double getInitialDomain(double p) {\n         double ret;\n         double d = getDenominatorDegreesOfFreedom();\n-            // use mean\n-            ret = d / (d - 2.0);\n-        return ret;\n+            if (p == 0) {\n+\t\t\treturn 0d;\n+\t\t}\n+\t\t\treturn 0;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 147, 
          "faulty": "ret=d / (d - 2.0);", 
          "type": "InsertBefore", 
          "seed": "if (p == 0) {\n  return 0d;\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 147, 
          "faulty": "ret=d / (d - 2.0);", 
          "type": "Delete", 
          "seed": "return getUpperDomain(getSampleSize(),getNumberOfSuccesses());"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\t2018-12-02 10:50:11.864967711 -0500\n+++ /tmp/GenProg_Defects4J_Math_95/patches_yjg5/Patch_951/patched/tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\t2018-12-02 10:58:37.794686834 -0500\n@@ -81,7 +81,11 @@\n         double upperBound = getDomainUpperBound(p);\n         double[] bracket = null;\n         try {\n-            bracket = UnivariateRealSolverUtils.bracket(\n+            if (p < 0.0 || p > 1.0) {\n+\t\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\t\"probability of success must be between 0.0 and 1.0, inclusive.\");\n+\t\t\t}\n+\t\t\tbracket = UnivariateRealSolverUtils.bracket(\n                     rootFindingFunction, getInitialDomain(p),\n                     lowerBound, upperBound);\n         }  catch (ConvergenceException ex) {\n\n\n--- /tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:50:15.340967631 -0500\n+++ /tmp/GenProg_Defects4J_Math_95/patches_yjg5/Patch_951/patched/tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:58:37.794686834 -0500\n@@ -143,9 +143,7 @@\n     protected double getInitialDomain(double p) {\n         double ret;\n         double d = getDenominatorDegreesOfFreedom();\n-            // use mean\n-            ret = d / (d - 2.0);\n-        return ret;\n+            return 0;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java", 
          "line": 84, 
          "faulty": "bracket=UnivariateRealSolverUtils.bracket(rootFindingFunction,getInitialDomain(p),lowerBound,upperBound);", 
          "type": "InsertBefore", 
          "seed": "if (p < 0.0 || p > 1.0) {\n  throw new IllegalArgumentException(\"probability of success must be between 0.0 and 1.0, inclusive.\");\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 147, 
          "faulty": "ret=d / (d - 2.0);", 
          "type": "Delete", 
          "seed": "int n=getPopulationSize();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:50:15.340967631 -0500\n+++ /tmp/GenProg_Defects4J_Math_95/patches_yjg5/Patch_573/patched/tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:55:59.034215572 -0500\n@@ -97,9 +97,6 @@\n      */\n     public double inverseCumulativeProbability(final double p) \n         throws MathException {\n-        if (p == 0) {\n-            return 0d;\n-        }\n         if (p == 1) {\n             return Double.POSITIVE_INFINITY;\n         }\n@@ -143,9 +140,8 @@\n     protected double getInitialDomain(double p) {\n         double ret;\n         double d = getDenominatorDegreesOfFreedom();\n-            // use mean\n-            ret = d / (d - 2.0);\n-        return ret;\n+            ret = Double.POSITIVE_INFINITY;\n+        return 0;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 100, 
          "faulty": "if (p == 0) {\n  return 0d;\n}", 
          "type": "Delete", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 147, 
          "faulty": "ret=d / (d - 2.0);", 
          "type": "Replace", 
          "seed": "ret=Double.POSITIVE_INFINITY;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:50:15.340967631 -0500\n+++ /tmp/GenProg_Defects4J_Math_95/patches_yjg5/Patch_1529/patched/tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 11:02:18.735323898 -0500\n@@ -116,7 +116,7 @@\n      *         P(X &lt; <i>lower bound</i>) &lt; <code>p</code> \n      */\n     protected double getDomainLowerBound(double p) {\n-        return 0.0;\n+        return 0.0d;\n     }\n \n     /**\n@@ -145,7 +145,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 119, 
          "faulty": "return 0.0;", 
          "type": "Replace", 
          "seed": "return 0.0d;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\t2018-12-02 10:50:11.864967711 -0500\n+++ /tmp/GenProg_Defects4J_Math_95/patches_yjg5/Patch_1467/patched/tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\t2018-12-02 11:01:57.315250472 -0500\n@@ -76,7 +76,11 @@\n             }\n         };\n               \n-        // Try to bracket root, test domain endoints if this fails     \n+        if (p < 0.0 || p > 1.0) {\n+\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\"p must be between 0 and 1.0 (inclusive)\");\n+\t\t}\n+\t\t// Try to bracket root, test domain endoints if this fails     \n         double lowerBound = getDomainLowerBound(p);\n         double upperBound = getDomainUpperBound(p);\n         double[] bracket = null;\n\n\n--- /tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:50:15.340967631 -0500\n+++ /tmp/GenProg_Defects4J_Math_95/patches_yjg5/Patch_1467/patched/tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 11:01:57.315250472 -0500\n@@ -129,7 +129,8 @@\n      *         P(X &lt; <i>upper bound</i>) &gt; <code>p</code> \n      */\n     protected double getDomainUpperBound(double p) {\n-        return Double.MAX_VALUE;\n+        double n = getNumeratorDegreesOfFreedom();\n+\t\treturn Double.MAX_VALUE;\n     }\n \n     /**\n@@ -143,9 +144,12 @@\n     protected double getInitialDomain(double p) {\n         double ret;\n         double d = getDenominatorDegreesOfFreedom();\n-            // use mean\n+            if (p == 0) {\n+\t\t\treturn 0d;\n+\t\t}\n+\t\t\t// use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 147, 
          "faulty": "ret=d / (d - 2.0);", 
          "type": "InsertBefore", 
          "seed": "if (p == 0) {\n  return 0d;\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 132, 
          "faulty": "return Double.MAX_VALUE;", 
          "type": "InsertBefore", 
          "seed": "double n=getNumeratorDegreesOfFreedom();"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java", 
          "line": 80, 
          "faulty": "double lowerBound=getDomainLowerBound(p);", 
          "type": "InsertBefore", 
          "seed": "if (p < 0.0 || p > 1.0) {\n  throw new IllegalArgumentException(\"p must be between 0 and 1.0 (inclusive)\");\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:50:15.340967631 -0500\n+++ /tmp/GenProg_Defects4J_Math_95/patches_yjg5/Patch_777/patched/tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:57:21.246469258 -0500\n@@ -116,7 +116,7 @@\n      *         P(X &lt; <i>lower bound</i>) &lt; <code>p</code> \n      */\n     protected double getDomainLowerBound(double p) {\n-        return 0.0;\n+        return 0;\n     }\n \n     /**\n@@ -145,7 +145,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return 0;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 119, 
          "faulty": "return 0.0;", 
          "type": "Replace", 
          "seed": "return 0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:50:15.340967631 -0500\n+++ /tmp/GenProg_Defects4J_Math_95/patches_yjg5/Patch_1349/patched/tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 11:01:13.947112618 -0500\n@@ -97,9 +97,7 @@\n      */\n     public double inverseCumulativeProbability(final double p) \n         throws MathException {\n-        if (p == 0) {\n-            return 0d;\n-        }\n+        double n = getNumeratorDegreesOfFreedom();\n         if (p == 1) {\n             return Double.POSITIVE_INFINITY;\n         }\n@@ -143,9 +141,16 @@\n     protected double getInitialDomain(double p) {\n         double ret;\n         double d = getDenominatorDegreesOfFreedom();\n-            // use mean\n+            if (p == 0) {\n+\t\t\treturn 0d;\n+\t\t}\n+\t\t\t// use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        ret = 0.5;\n+\t\t\tif (p == 1) {\n+\t\t\t\treturn Double.POSITIVE_INFINITY;\n+\t\t\t}\n+\t\treturn 0;\n     }\n     \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 147, 
          "faulty": "ret=d / (d - 2.0);", 
          "type": "InsertBefore", 
          "seed": "if (p == 0) {\n  return 0d;\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "InsertBefore", 
          "seed": "ret=0.5;"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 100, 
          "faulty": "if (p == 0) {\n  return 0d;\n}", 
          "type": "Replace", 
          "seed": "double n=getNumeratorDegreesOfFreedom();"
        }, 
        {
          "path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", 
          "line": 148, 
          "faulty": "return ret;", 
          "type": "InsertBefore", 
          "seed": "if (p == 1) {\n  return Double.POSITIVE_INFINITY;\n}"
        }
      ]
    }
  ]
}